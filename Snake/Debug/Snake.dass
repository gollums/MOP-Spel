
./Debug/Snake.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:
int seed;

__attribute__((naked)) __attribute__((section (".start_section")) )
void startup ( void )
{
__asm__ volatile(" LDR R0,=0x2001C000\n");		/* set stack */
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <startup+0xc>)
__asm__ volatile(" MOV SP,R0\n");
20000002:	4685      	mov	sp, r0
__asm__ volatile(" BL main\n");					/* call main */
20000004:	f000 fc60 	bl	200008c8 <main>
__asm__ volatile(".L1: B .L1\n");				/* never return */
20000008:	e7fe      	b.n	20000008 <startup+0x8>
};
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <set_object_speed>:

void set_object_speed(POBJECT o, int speedx, int speedy){
20000010:	b580      	push	{r7, lr}
20000012:	b084      	sub	sp, #16
20000014:	af00      	add	r7, sp, #0
20000016:	60f8      	str	r0, [r7, #12]
20000018:	60b9      	str	r1, [r7, #8]
2000001a:	607a      	str	r2, [r7, #4]
    o->dirx = speedx;
2000001c:	68fb      	ldr	r3, [r7, #12]
2000001e:	68ba      	ldr	r2, [r7, #8]
20000020:	605a      	str	r2, [r3, #4]
    o->diry = speedy;
20000022:	68fb      	ldr	r3, [r7, #12]
20000024:	687a      	ldr	r2, [r7, #4]
20000026:	609a      	str	r2, [r3, #8]
}
20000028:	46c0      	nop			; (mov r8, r8)
2000002a:	46bd      	mov	sp, r7
2000002c:	b004      	add	sp, #16
2000002e:	bd80      	pop	{r7, pc}

20000030 <draw_object>:

void draw_object(POBJECT o){
20000030:	b580      	push	{r7, lr}
20000032:	b084      	sub	sp, #16
20000034:	af00      	add	r7, sp, #0
20000036:	6078      	str	r0, [r7, #4]
    for (int i = 0; i<o->geo->numpoints; i++)
20000038:	2300      	movs	r3, #0
2000003a:	60fb      	str	r3, [r7, #12]
2000003c:	e01e      	b.n	2000007c <draw_object+0x4c>
        pixel(o->geo->px[i].x+o->posx,o->geo->px[i].y+o->posy);
2000003e:	687b      	ldr	r3, [r7, #4]
20000040:	681a      	ldr	r2, [r3, #0]
20000042:	68fb      	ldr	r3, [r7, #12]
20000044:	3304      	adds	r3, #4
20000046:	005b      	lsls	r3, r3, #1
20000048:	18d3      	adds	r3, r2, r3
2000004a:	3304      	adds	r3, #4
2000004c:	781b      	ldrb	r3, [r3, #0]
2000004e:	001a      	movs	r2, r3
20000050:	687b      	ldr	r3, [r7, #4]
20000052:	68db      	ldr	r3, [r3, #12]
20000054:	18d3      	adds	r3, r2, r3
20000056:	0018      	movs	r0, r3
20000058:	687b      	ldr	r3, [r7, #4]
2000005a:	681a      	ldr	r2, [r3, #0]
2000005c:	68fb      	ldr	r3, [r7, #12]
2000005e:	3304      	adds	r3, #4
20000060:	005b      	lsls	r3, r3, #1
20000062:	18d3      	adds	r3, r2, r3
20000064:	3305      	adds	r3, #5
20000066:	781b      	ldrb	r3, [r3, #0]
20000068:	001a      	movs	r2, r3
2000006a:	687b      	ldr	r3, [r7, #4]
2000006c:	691b      	ldr	r3, [r3, #16]
2000006e:	18d3      	adds	r3, r2, r3
20000070:	0019      	movs	r1, r3
20000072:	f000 fed1 	bl	20000e18 <pixel>
    for (int i = 0; i<o->geo->numpoints; i++)
20000076:	68fb      	ldr	r3, [r7, #12]
20000078:	3301      	adds	r3, #1
2000007a:	60fb      	str	r3, [r7, #12]
2000007c:	687b      	ldr	r3, [r7, #4]
2000007e:	681b      	ldr	r3, [r3, #0]
20000080:	681b      	ldr	r3, [r3, #0]
20000082:	68fa      	ldr	r2, [r7, #12]
20000084:	429a      	cmp	r2, r3
20000086:	dbda      	blt.n	2000003e <draw_object+0xe>
        
}
20000088:	46c0      	nop			; (mov r8, r8)
2000008a:	46c0      	nop			; (mov r8, r8)
2000008c:	46bd      	mov	sp, r7
2000008e:	b004      	add	sp, #16
20000090:	bd80      	pop	{r7, pc}

20000092 <clear_object>:

void clear_object(POBJECT o){
20000092:	b580      	push	{r7, lr}
20000094:	b084      	sub	sp, #16
20000096:	af00      	add	r7, sp, #0
20000098:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < o->geo->numpoints; i++)
2000009a:	2300      	movs	r3, #0
2000009c:	60fb      	str	r3, [r7, #12]
2000009e:	e01e      	b.n	200000de <clear_object+0x4c>
        pixel(o->geo->px[i].x+o->posx,o->geo->px[i].y+o->posy);
200000a0:	687b      	ldr	r3, [r7, #4]
200000a2:	681a      	ldr	r2, [r3, #0]
200000a4:	68fb      	ldr	r3, [r7, #12]
200000a6:	3304      	adds	r3, #4
200000a8:	005b      	lsls	r3, r3, #1
200000aa:	18d3      	adds	r3, r2, r3
200000ac:	3304      	adds	r3, #4
200000ae:	781b      	ldrb	r3, [r3, #0]
200000b0:	001a      	movs	r2, r3
200000b2:	687b      	ldr	r3, [r7, #4]
200000b4:	68db      	ldr	r3, [r3, #12]
200000b6:	18d3      	adds	r3, r2, r3
200000b8:	0018      	movs	r0, r3
200000ba:	687b      	ldr	r3, [r7, #4]
200000bc:	681a      	ldr	r2, [r3, #0]
200000be:	68fb      	ldr	r3, [r7, #12]
200000c0:	3304      	adds	r3, #4
200000c2:	005b      	lsls	r3, r3, #1
200000c4:	18d3      	adds	r3, r2, r3
200000c6:	3305      	adds	r3, #5
200000c8:	781b      	ldrb	r3, [r3, #0]
200000ca:	001a      	movs	r2, r3
200000cc:	687b      	ldr	r3, [r7, #4]
200000ce:	691b      	ldr	r3, [r3, #16]
200000d0:	18d3      	adds	r3, r2, r3
200000d2:	0019      	movs	r1, r3
200000d4:	f000 fea0 	bl	20000e18 <pixel>
    for (int i = 0; i < o->geo->numpoints; i++)
200000d8:	68fb      	ldr	r3, [r7, #12]
200000da:	3301      	adds	r3, #1
200000dc:	60fb      	str	r3, [r7, #12]
200000de:	687b      	ldr	r3, [r7, #4]
200000e0:	681b      	ldr	r3, [r3, #0]
200000e2:	681b      	ldr	r3, [r3, #0]
200000e4:	68fa      	ldr	r2, [r7, #12]
200000e6:	429a      	cmp	r2, r3
200000e8:	dbda      	blt.n	200000a0 <clear_object+0xe>
        
}
200000ea:	46c0      	nop			; (mov r8, r8)
200000ec:	46c0      	nop			; (mov r8, r8)
200000ee:	46bd      	mov	sp, r7
200000f0:	b004      	add	sp, #16
200000f2:	bd80      	pop	{r7, pc}

200000f4 <move_object>:

void move_object(POBJECT o){
200000f4:	b580      	push	{r7, lr}
200000f6:	b082      	sub	sp, #8
200000f8:	af00      	add	r7, sp, #0
200000fa:	6078      	str	r0, [r7, #4]
    //clear_object(o);
    
    o->posx = o->posx + o->dirx;
200000fc:	687b      	ldr	r3, [r7, #4]
200000fe:	68da      	ldr	r2, [r3, #12]
20000100:	687b      	ldr	r3, [r7, #4]
20000102:	685b      	ldr	r3, [r3, #4]
20000104:	18d2      	adds	r2, r2, r3
20000106:	687b      	ldr	r3, [r7, #4]
20000108:	60da      	str	r2, [r3, #12]
    o->posy = o->posy + o->diry;
2000010a:	687b      	ldr	r3, [r7, #4]
2000010c:	691a      	ldr	r2, [r3, #16]
2000010e:	687b      	ldr	r3, [r7, #4]
20000110:	689b      	ldr	r3, [r3, #8]
20000112:	18d2      	adds	r2, r2, r3
20000114:	687b      	ldr	r3, [r7, #4]
20000116:	611a      	str	r2, [r3, #16]
    
    /*Dead if hit wall*/
    if((o->posx)<0){
20000118:	687b      	ldr	r3, [r7, #4]
2000011a:	68db      	ldr	r3, [r3, #12]
2000011c:	2b00      	cmp	r3, #0
2000011e:	da02      	bge.n	20000126 <move_object+0x32>
        dead = 1;
20000120:	4b0f      	ldr	r3, [pc, #60]	; (20000160 <move_object+0x6c>)
20000122:	2201      	movs	r2, #1
20000124:	601a      	str	r2, [r3, #0]
    }
    if((o->posx)>128){
20000126:	687b      	ldr	r3, [r7, #4]
20000128:	68db      	ldr	r3, [r3, #12]
2000012a:	2b80      	cmp	r3, #128	; 0x80
2000012c:	dd02      	ble.n	20000134 <move_object+0x40>
        dead = 1;
2000012e:	4b0c      	ldr	r3, [pc, #48]	; (20000160 <move_object+0x6c>)
20000130:	2201      	movs	r2, #1
20000132:	601a      	str	r2, [r3, #0]
    }
    if((o->posy)<0){
20000134:	687b      	ldr	r3, [r7, #4]
20000136:	691b      	ldr	r3, [r3, #16]
20000138:	2b00      	cmp	r3, #0
2000013a:	da02      	bge.n	20000142 <move_object+0x4e>
        dead = 1;
2000013c:	4b08      	ldr	r3, [pc, #32]	; (20000160 <move_object+0x6c>)
2000013e:	2201      	movs	r2, #1
20000140:	601a      	str	r2, [r3, #0]
    }
    if((o->posy)>64){
20000142:	687b      	ldr	r3, [r7, #4]
20000144:	691b      	ldr	r3, [r3, #16]
20000146:	2b40      	cmp	r3, #64	; 0x40
20000148:	dd02      	ble.n	20000150 <move_object+0x5c>
        dead = 1;
2000014a:	4b05      	ldr	r3, [pc, #20]	; (20000160 <move_object+0x6c>)
2000014c:	2201      	movs	r2, #1
2000014e:	601a      	str	r2, [r3, #0]
    }
    draw_object(o);
20000150:	687b      	ldr	r3, [r7, #4]
20000152:	0018      	movs	r0, r3
20000154:	f7ff ff6c 	bl	20000030 <draw_object>
}
20000158:	46c0      	nop			; (mov r8, r8)
2000015a:	46bd      	mov	sp, r7
2000015c:	b002      	add	sp, #8
2000015e:	bd80      	pop	{r7, pc}
20000160:	20002744 	andcs	r2, r0, r4, asr #14

20000164 <load_sprite>:
    clear_object,
    move_object,
    set_object_speed
};

static void load_sprite(sprite* s, unsigned char* data, int width, int height){
20000164:	b580      	push	{r7, lr}
20000166:	b084      	sub	sp, #16
20000168:	af00      	add	r7, sp, #0
2000016a:	60f8      	str	r0, [r7, #12]
2000016c:	60b9      	str	r1, [r7, #8]
2000016e:	607a      	str	r2, [r7, #4]
20000170:	603b      	str	r3, [r7, #0]
    s->width = width;
20000172:	687b      	ldr	r3, [r7, #4]
20000174:	b2da      	uxtb	r2, r3
20000176:	68fb      	ldr	r3, [r7, #12]
20000178:	701a      	strb	r2, [r3, #0]
    s->height = height;
2000017a:	683b      	ldr	r3, [r7, #0]
2000017c:	b2da      	uxtb	r2, r3
2000017e:	68fb      	ldr	r3, [r7, #12]
20000180:	705a      	strb	r2, [r3, #1]
    s->data = data;
20000182:	68fb      	ldr	r3, [r7, #12]
20000184:	68ba      	ldr	r2, [r7, #8]
20000186:	605a      	str	r2, [r3, #4]
}
20000188:	46c0      	nop			; (mov r8, r8)
2000018a:	46bd      	mov	sp, r7
2000018c:	b004      	add	sp, #16
2000018e:	bd80      	pop	{r7, pc}

20000190 <draw_sprite>:

void draw_sprite(sprite* s, int x, int y){
20000190:	b580      	push	{r7, lr}
20000192:	b08a      	sub	sp, #40	; 0x28
20000194:	af00      	add	r7, sp, #0
20000196:	60f8      	str	r0, [r7, #12]
20000198:	60b9      	str	r1, [r7, #8]
2000019a:	607a      	str	r2, [r7, #4]
    int i,j,k, width_in_bytes;
    
    if(s->width % 8 == 0){
2000019c:	68fb      	ldr	r3, [r7, #12]
2000019e:	781b      	ldrb	r3, [r3, #0]
200001a0:	2207      	movs	r2, #7
200001a2:	4013      	ands	r3, r2
200001a4:	b2db      	uxtb	r3, r3
200001a6:	2b00      	cmp	r3, #0
200001a8:	d105      	bne.n	200001b6 <draw_sprite+0x26>
        width_in_bytes = s->width/8;
200001aa:	68fb      	ldr	r3, [r7, #12]
200001ac:	781b      	ldrb	r3, [r3, #0]
200001ae:	08db      	lsrs	r3, r3, #3
200001b0:	b2db      	uxtb	r3, r3
200001b2:	61bb      	str	r3, [r7, #24]
200001b4:	e005      	b.n	200001c2 <draw_sprite+0x32>
    }else{
        width_in_bytes = s->width/8 + 1;
200001b6:	68fb      	ldr	r3, [r7, #12]
200001b8:	781b      	ldrb	r3, [r3, #0]
200001ba:	08db      	lsrs	r3, r3, #3
200001bc:	b2db      	uxtb	r3, r3
200001be:	3301      	adds	r3, #1
200001c0:	61bb      	str	r3, [r7, #24]
    }
    
    for (i = 0; i < s->height; i++){
200001c2:	2300      	movs	r3, #0
200001c4:	627b      	str	r3, [r7, #36]	; 0x24
200001c6:	e039      	b.n	2000023c <draw_sprite+0xac>
        for (j = 0; j < width_in_bytes; j++){
200001c8:	2300      	movs	r3, #0
200001ca:	623b      	str	r3, [r7, #32]
200001cc:	e02f      	b.n	2000022e <draw_sprite+0x9e>
            unsigned char byte = s->data[i*width_in_bytes +j];
200001ce:	68fb      	ldr	r3, [r7, #12]
200001d0:	685b      	ldr	r3, [r3, #4]
200001d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
200001d4:	69b9      	ldr	r1, [r7, #24]
200001d6:	4351      	muls	r1, r2
200001d8:	6a3a      	ldr	r2, [r7, #32]
200001da:	188a      	adds	r2, r1, r2
200001dc:	189a      	adds	r2, r3, r2
200001de:	2317      	movs	r3, #23
200001e0:	18fb      	adds	r3, r7, r3
200001e2:	7812      	ldrb	r2, [r2, #0]
200001e4:	701a      	strb	r2, [r3, #0]
            for (k = 0; k < 8; k++){
200001e6:	2300      	movs	r3, #0
200001e8:	61fb      	str	r3, [r7, #28]
200001ea:	e01a      	b.n	20000222 <draw_sprite+0x92>
                if (byte & (1<<k))
200001ec:	2317      	movs	r3, #23
200001ee:	18fb      	adds	r3, r7, r3
200001f0:	781a      	ldrb	r2, [r3, #0]
200001f2:	69fb      	ldr	r3, [r7, #28]
200001f4:	411a      	asrs	r2, r3
200001f6:	0013      	movs	r3, r2
200001f8:	2201      	movs	r2, #1
200001fa:	4013      	ands	r3, r2
200001fc:	d00e      	beq.n	2000021c <draw_sprite+0x8c>
                    pixel(8 * j + k + x + 1, i + y + 1);
200001fe:	6a3b      	ldr	r3, [r7, #32]
20000200:	00da      	lsls	r2, r3, #3
20000202:	69fb      	ldr	r3, [r7, #28]
20000204:	18d2      	adds	r2, r2, r3
20000206:	68bb      	ldr	r3, [r7, #8]
20000208:	18d3      	adds	r3, r2, r3
2000020a:	3301      	adds	r3, #1
2000020c:	0018      	movs	r0, r3
2000020e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
20000210:	687b      	ldr	r3, [r7, #4]
20000212:	18d3      	adds	r3, r2, r3
20000214:	3301      	adds	r3, #1
20000216:	0019      	movs	r1, r3
20000218:	f000 fdfe 	bl	20000e18 <pixel>
            for (k = 0; k < 8; k++){
2000021c:	69fb      	ldr	r3, [r7, #28]
2000021e:	3301      	adds	r3, #1
20000220:	61fb      	str	r3, [r7, #28]
20000222:	69fb      	ldr	r3, [r7, #28]
20000224:	2b07      	cmp	r3, #7
20000226:	dde1      	ble.n	200001ec <draw_sprite+0x5c>
        for (j = 0; j < width_in_bytes; j++){
20000228:	6a3b      	ldr	r3, [r7, #32]
2000022a:	3301      	adds	r3, #1
2000022c:	623b      	str	r3, [r7, #32]
2000022e:	6a3a      	ldr	r2, [r7, #32]
20000230:	69bb      	ldr	r3, [r7, #24]
20000232:	429a      	cmp	r2, r3
20000234:	dbcb      	blt.n	200001ce <draw_sprite+0x3e>
    for (i = 0; i < s->height; i++){
20000236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20000238:	3301      	adds	r3, #1
2000023a:	627b      	str	r3, [r7, #36]	; 0x24
2000023c:	68fb      	ldr	r3, [r7, #12]
2000023e:	785b      	ldrb	r3, [r3, #1]
20000240:	001a      	movs	r2, r3
20000242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20000244:	4293      	cmp	r3, r2
20000246:	dbbf      	blt.n	200001c8 <draw_sprite+0x38>
            }
        }
    }
}
20000248:	46c0      	nop			; (mov r8, r8)
2000024a:	46c0      	nop			; (mov r8, r8)
2000024c:	46bd      	mov	sp, r7
2000024e:	b00a      	add	sp, #40	; 0x28
20000250:	bd80      	pop	{r7, pc}

20000252 <draw_snake>:

void draw_snake(POBJECT s){
20000252:	b580      	push	{r7, lr}
20000254:	b084      	sub	sp, #16
20000256:	af00      	add	r7, sp, #0
20000258:	6078      	str	r0, [r7, #4]
    if (s[0].dirx != 0 || s[0].diry != 0)
2000025a:	687b      	ldr	r3, [r7, #4]
2000025c:	685b      	ldr	r3, [r3, #4]
2000025e:	2b00      	cmp	r3, #0
20000260:	d103      	bne.n	2000026a <draw_snake+0x18>
20000262:	687b      	ldr	r3, [r7, #4]
20000264:	689b      	ldr	r3, [r3, #8]
20000266:	2b00      	cmp	r3, #0
20000268:	d003      	beq.n	20000272 <draw_snake+0x20>
            follow_leader(s);
2000026a:	687b      	ldr	r3, [r7, #4]
2000026c:	0018      	movs	r0, r3
2000026e:	f000 f835 	bl	200002dc <follow_leader>
    for (int i = 0; i <= snakeSize - 1; i++){
20000272:	2300      	movs	r3, #0
20000274:	60fb      	str	r3, [r7, #12]
20000276:	e015      	b.n	200002a4 <draw_snake+0x52>
        s[i].move(&s[i]);
20000278:	68fa      	ldr	r2, [r7, #12]
2000027a:	0013      	movs	r3, r2
2000027c:	00db      	lsls	r3, r3, #3
2000027e:	189b      	adds	r3, r3, r2
20000280:	009b      	lsls	r3, r3, #2
20000282:	001a      	movs	r2, r3
20000284:	687b      	ldr	r3, [r7, #4]
20000286:	189b      	adds	r3, r3, r2
20000288:	69d9      	ldr	r1, [r3, #28]
2000028a:	68fa      	ldr	r2, [r7, #12]
2000028c:	0013      	movs	r3, r2
2000028e:	00db      	lsls	r3, r3, #3
20000290:	189b      	adds	r3, r3, r2
20000292:	009b      	lsls	r3, r3, #2
20000294:	001a      	movs	r2, r3
20000296:	687b      	ldr	r3, [r7, #4]
20000298:	189b      	adds	r3, r3, r2
2000029a:	0018      	movs	r0, r3
2000029c:	4788      	blx	r1
    for (int i = 0; i <= snakeSize - 1; i++){
2000029e:	68fb      	ldr	r3, [r7, #12]
200002a0:	3301      	adds	r3, #1
200002a2:	60fb      	str	r3, [r7, #12]
200002a4:	4b04      	ldr	r3, [pc, #16]	; (200002b8 <draw_snake+0x66>)
200002a6:	681b      	ldr	r3, [r3, #0]
200002a8:	68fa      	ldr	r2, [r7, #12]
200002aa:	429a      	cmp	r2, r3
200002ac:	dbe4      	blt.n	20000278 <draw_snake+0x26>
    }
}
200002ae:	46c0      	nop			; (mov r8, r8)
200002b0:	46c0      	nop			; (mov r8, r8)
200002b2:	46bd      	mov	sp, r7
200002b4:	b004      	add	sp, #16
200002b6:	bd80      	pop	{r7, pc}
200002b8:	20002740 	andcs	r2, r0, r0, asr #14

200002bc <draw_food>:

void draw_food(POBJECT f){
200002bc:	b580      	push	{r7, lr}
200002be:	b082      	sub	sp, #8
200002c0:	af00      	add	r7, sp, #0
200002c2:	6078      	str	r0, [r7, #4]
    f->move(&food_obj);
200002c4:	687b      	ldr	r3, [r7, #4]
200002c6:	69db      	ldr	r3, [r3, #28]
200002c8:	4a03      	ldr	r2, [pc, #12]	; (200002d8 <draw_food+0x1c>)
200002ca:	0010      	movs	r0, r2
200002cc:	4798      	blx	r3
}
200002ce:	46c0      	nop			; (mov r8, r8)
200002d0:	46bd      	mov	sp, r7
200002d2:	b002      	add	sp, #8
200002d4:	bd80      	pop	{r7, pc}
200002d6:	46c0      	nop			; (mov r8, r8)
200002d8:	200039f8 	strdcs	r3, [r0], -r8

200002dc <follow_leader>:

void follow_leader(POBJECT s){
200002dc:	b580      	push	{r7, lr}
200002de:	b086      	sub	sp, #24
200002e0:	af00      	add	r7, sp, #0
200002e2:	6078      	str	r0, [r7, #4]
    int next_x = s[0].posx;
200002e4:	687b      	ldr	r3, [r7, #4]
200002e6:	68db      	ldr	r3, [r3, #12]
200002e8:	617b      	str	r3, [r7, #20]
    int next_y = s[0].posy;
200002ea:	687b      	ldr	r3, [r7, #4]
200002ec:	691b      	ldr	r3, [r3, #16]
200002ee:	613b      	str	r3, [r7, #16]
    for(int i = 0; i < snakeSize; i++){
200002f0:	2300      	movs	r3, #0
200002f2:	60fb      	str	r3, [r7, #12]
200002f4:	e02e      	b.n	20000354 <follow_leader+0x78>
        int current = s[i].posx;
200002f6:	68fa      	ldr	r2, [r7, #12]
200002f8:	0013      	movs	r3, r2
200002fa:	00db      	lsls	r3, r3, #3
200002fc:	189b      	adds	r3, r3, r2
200002fe:	009b      	lsls	r3, r3, #2
20000300:	001a      	movs	r2, r3
20000302:	687b      	ldr	r3, [r7, #4]
20000304:	189b      	adds	r3, r3, r2
20000306:	68db      	ldr	r3, [r3, #12]
20000308:	60bb      	str	r3, [r7, #8]
        s[i].posx = next_x;
2000030a:	68fa      	ldr	r2, [r7, #12]
2000030c:	0013      	movs	r3, r2
2000030e:	00db      	lsls	r3, r3, #3
20000310:	189b      	adds	r3, r3, r2
20000312:	009b      	lsls	r3, r3, #2
20000314:	001a      	movs	r2, r3
20000316:	687b      	ldr	r3, [r7, #4]
20000318:	189b      	adds	r3, r3, r2
2000031a:	697a      	ldr	r2, [r7, #20]
2000031c:	60da      	str	r2, [r3, #12]
        next_x = current;
2000031e:	68bb      	ldr	r3, [r7, #8]
20000320:	617b      	str	r3, [r7, #20]
        
        current = s[i].posy;
20000322:	68fa      	ldr	r2, [r7, #12]
20000324:	0013      	movs	r3, r2
20000326:	00db      	lsls	r3, r3, #3
20000328:	189b      	adds	r3, r3, r2
2000032a:	009b      	lsls	r3, r3, #2
2000032c:	001a      	movs	r2, r3
2000032e:	687b      	ldr	r3, [r7, #4]
20000330:	189b      	adds	r3, r3, r2
20000332:	691b      	ldr	r3, [r3, #16]
20000334:	60bb      	str	r3, [r7, #8]
        s[i].posy = next_y;
20000336:	68fa      	ldr	r2, [r7, #12]
20000338:	0013      	movs	r3, r2
2000033a:	00db      	lsls	r3, r3, #3
2000033c:	189b      	adds	r3, r3, r2
2000033e:	009b      	lsls	r3, r3, #2
20000340:	001a      	movs	r2, r3
20000342:	687b      	ldr	r3, [r7, #4]
20000344:	189b      	adds	r3, r3, r2
20000346:	693a      	ldr	r2, [r7, #16]
20000348:	611a      	str	r2, [r3, #16]
        next_y = current;
2000034a:	68bb      	ldr	r3, [r7, #8]
2000034c:	613b      	str	r3, [r7, #16]
    for(int i = 0; i < snakeSize; i++){
2000034e:	68fb      	ldr	r3, [r7, #12]
20000350:	3301      	adds	r3, #1
20000352:	60fb      	str	r3, [r7, #12]
20000354:	4b04      	ldr	r3, [pc, #16]	; (20000368 <follow_leader+0x8c>)
20000356:	681b      	ldr	r3, [r3, #0]
20000358:	68fa      	ldr	r2, [r7, #12]
2000035a:	429a      	cmp	r2, r3
2000035c:	dbcb      	blt.n	200002f6 <follow_leader+0x1a>
    }
}
2000035e:	46c0      	nop			; (mov r8, r8)
20000360:	46c0      	nop			; (mov r8, r8)
20000362:	46bd      	mov	sp, r7
20000364:	b006      	add	sp, #24
20000366:	bd80      	pop	{r7, pc}
20000368:	20002740 	andcs	r2, r0, r0, asr #14

2000036c <turn>:

void turn(int dir, POBJECT s){
2000036c:	b580      	push	{r7, lr}
2000036e:	b084      	sub	sp, #16
20000370:	af00      	add	r7, sp, #0
20000372:	6078      	str	r0, [r7, #4]
20000374:	6039      	str	r1, [r7, #0]
    int next_x = 0, next_y = 0;
20000376:	2300      	movs	r3, #0
20000378:	60fb      	str	r3, [r7, #12]
2000037a:	2300      	movs	r3, #0
2000037c:	60bb      	str	r3, [r7, #8]
     switch(dir){
2000037e:	687b      	ldr	r3, [r7, #4]
20000380:	2b08      	cmp	r3, #8
20000382:	d03b      	beq.n	200003fc <turn+0x90>
20000384:	687b      	ldr	r3, [r7, #4]
20000386:	2b08      	cmp	r3, #8
20000388:	dc4d      	bgt.n	20000426 <turn+0xba>
2000038a:	687b      	ldr	r3, [r7, #4]
2000038c:	2b06      	cmp	r3, #6
2000038e:	d009      	beq.n	200003a4 <turn+0x38>
20000390:	687b      	ldr	r3, [r7, #4]
20000392:	2b06      	cmp	r3, #6
20000394:	dc47      	bgt.n	20000426 <turn+0xba>
20000396:	687b      	ldr	r3, [r7, #4]
20000398:	2b02      	cmp	r3, #2
2000039a:	d020      	beq.n	200003de <turn+0x72>
2000039c:	687b      	ldr	r3, [r7, #4]
2000039e:	2b04      	cmp	r3, #4
200003a0:	d00e      	beq.n	200003c0 <turn+0x54>
                s->set_speed(s,0,4);
                s[0].geo = &snakehead_geometry_DOWN;
            }
            break;
    }
}
200003a2:	e040      	b.n	20000426 <turn+0xba>
            if(s[0].dirx == 0){
200003a4:	683b      	ldr	r3, [r7, #0]
200003a6:	685b      	ldr	r3, [r3, #4]
200003a8:	2b00      	cmp	r3, #0
200003aa:	d135      	bne.n	20000418 <turn+0xac>
                s->set_speed(s,4,0);
200003ac:	683b      	ldr	r3, [r7, #0]
200003ae:	6a1b      	ldr	r3, [r3, #32]
200003b0:	6838      	ldr	r0, [r7, #0]
200003b2:	2200      	movs	r2, #0
200003b4:	2104      	movs	r1, #4
200003b6:	4798      	blx	r3
                s[0].geo = &snakehead_geometry_RIGHT;
200003b8:	683b      	ldr	r3, [r7, #0]
200003ba:	4a1d      	ldr	r2, [pc, #116]	; (20000430 <turn+0xc4>)
200003bc:	601a      	str	r2, [r3, #0]
            break;
200003be:	e02b      	b.n	20000418 <turn+0xac>
            if(s[0].dirx == 0){
200003c0:	683b      	ldr	r3, [r7, #0]
200003c2:	685b      	ldr	r3, [r3, #4]
200003c4:	2b00      	cmp	r3, #0
200003c6:	d129      	bne.n	2000041c <turn+0xb0>
                s->set_speed(s,-4,0);
200003c8:	683b      	ldr	r3, [r7, #0]
200003ca:	6a1b      	ldr	r3, [r3, #32]
200003cc:	2204      	movs	r2, #4
200003ce:	4251      	negs	r1, r2
200003d0:	6838      	ldr	r0, [r7, #0]
200003d2:	2200      	movs	r2, #0
200003d4:	4798      	blx	r3
                s[0].geo = &snakehead_geometry_LEFT;
200003d6:	683b      	ldr	r3, [r7, #0]
200003d8:	4a16      	ldr	r2, [pc, #88]	; (20000434 <turn+0xc8>)
200003da:	601a      	str	r2, [r3, #0]
            break;
200003dc:	e01e      	b.n	2000041c <turn+0xb0>
            if(s[0].diry == 0){
200003de:	683b      	ldr	r3, [r7, #0]
200003e0:	689b      	ldr	r3, [r3, #8]
200003e2:	2b00      	cmp	r3, #0
200003e4:	d11c      	bne.n	20000420 <turn+0xb4>
                s->set_speed(s,0,-4);
200003e6:	683b      	ldr	r3, [r7, #0]
200003e8:	6a1b      	ldr	r3, [r3, #32]
200003ea:	2204      	movs	r2, #4
200003ec:	4252      	negs	r2, r2
200003ee:	6838      	ldr	r0, [r7, #0]
200003f0:	2100      	movs	r1, #0
200003f2:	4798      	blx	r3
                s[0].geo = &snakehead_geometry_UP;
200003f4:	683b      	ldr	r3, [r7, #0]
200003f6:	4a10      	ldr	r2, [pc, #64]	; (20000438 <turn+0xcc>)
200003f8:	601a      	str	r2, [r3, #0]
            break;
200003fa:	e011      	b.n	20000420 <turn+0xb4>
            if(s[0].diry == 0){
200003fc:	683b      	ldr	r3, [r7, #0]
200003fe:	689b      	ldr	r3, [r3, #8]
20000400:	2b00      	cmp	r3, #0
20000402:	d10f      	bne.n	20000424 <turn+0xb8>
                s->set_speed(s,0,4);
20000404:	683b      	ldr	r3, [r7, #0]
20000406:	6a1b      	ldr	r3, [r3, #32]
20000408:	6838      	ldr	r0, [r7, #0]
2000040a:	2204      	movs	r2, #4
2000040c:	2100      	movs	r1, #0
2000040e:	4798      	blx	r3
                s[0].geo = &snakehead_geometry_DOWN;
20000410:	683b      	ldr	r3, [r7, #0]
20000412:	4a0a      	ldr	r2, [pc, #40]	; (2000043c <turn+0xd0>)
20000414:	601a      	str	r2, [r3, #0]
            break;
20000416:	e005      	b.n	20000424 <turn+0xb8>
            break;
20000418:	46c0      	nop			; (mov r8, r8)
2000041a:	e004      	b.n	20000426 <turn+0xba>
            break;
2000041c:	46c0      	nop			; (mov r8, r8)
2000041e:	e002      	b.n	20000426 <turn+0xba>
            break;
20000420:	46c0      	nop			; (mov r8, r8)
20000422:	e000      	b.n	20000426 <turn+0xba>
            break;
20000424:	46c0      	nop			; (mov r8, r8)
}
20000426:	46c0      	nop			; (mov r8, r8)
20000428:	46bd      	mov	sp, r7
2000042a:	b004      	add	sp, #16
2000042c:	bd80      	pop	{r7, pc}
2000042e:	46c0      	nop			; (mov r8, r8)
20000430:	2000391c 	andcs	r3, r0, ip, lsl r9
20000434:	200038f0 	strdcs	r3, [r0], -r0
20000438:	20003974 	andcs	r3, r0, r4, ror r9
2000043c:	20003948 	andcs	r3, r0, r8, asr #18

20000440 <snake_eat_food>:

void snake_eat_food(POBJECT food, POBJECT snake){
20000440:	b580      	push	{r7, lr}
20000442:	b082      	sub	sp, #8
20000444:	af00      	add	r7, sp, #0
20000446:	6078      	str	r0, [r7, #4]
20000448:	6039      	str	r1, [r7, #0]
    if(snake[0].posx == food->posx && snake[0].posy == food->posy){
2000044a:	683b      	ldr	r3, [r7, #0]
2000044c:	68da      	ldr	r2, [r3, #12]
2000044e:	687b      	ldr	r3, [r7, #4]
20000450:	68db      	ldr	r3, [r3, #12]
20000452:	429a      	cmp	r2, r3
20000454:	d110      	bne.n	20000478 <snake_eat_food+0x38>
20000456:	683b      	ldr	r3, [r7, #0]
20000458:	691a      	ldr	r2, [r3, #16]
2000045a:	687b      	ldr	r3, [r7, #4]
2000045c:	691b      	ldr	r3, [r3, #16]
2000045e:	429a      	cmp	r2, r3
20000460:	d10a      	bne.n	20000478 <snake_eat_food+0x38>
        points++;
20000462:	4b07      	ldr	r3, [pc, #28]	; (20000480 <snake_eat_food+0x40>)
20000464:	681b      	ldr	r3, [r3, #0]
20000466:	1c5a      	adds	r2, r3, #1
20000468:	4b05      	ldr	r3, [pc, #20]	; (20000480 <snake_eat_food+0x40>)
2000046a:	601a      	str	r2, [r3, #0]
        new_pos_food(food, snake);
2000046c:	683a      	ldr	r2, [r7, #0]
2000046e:	687b      	ldr	r3, [r7, #4]
20000470:	0011      	movs	r1, r2
20000472:	0018      	movs	r0, r3
20000474:	f000 f806 	bl	20000484 <new_pos_food>
        //inc_snake();
    }
}
20000478:	46c0      	nop			; (mov r8, r8)
2000047a:	46bd      	mov	sp, r7
2000047c:	b002      	add	sp, #8
2000047e:	bd80      	pop	{r7, pc}
20000480:	2000273c 	andcs	r2, r0, ip, lsr r7

20000484 <new_pos_food>:

void new_pos_food(POBJECT f, POBJECT s){
20000484:	b580      	push	{r7, lr}
20000486:	b086      	sub	sp, #24
20000488:	af00      	add	r7, sp, #0
2000048a:	6078      	str	r0, [r7, #4]
2000048c:	6039      	str	r1, [r7, #0]
    int rand_x = randint(128), rand_y = randint(64);
2000048e:	2080      	movs	r0, #128	; 0x80
20000490:	f000 f852 	bl	20000538 <randint>
20000494:	0003      	movs	r3, r0
20000496:	617b      	str	r3, [r7, #20]
20000498:	2040      	movs	r0, #64	; 0x40
2000049a:	f000 f84d 	bl	20000538 <randint>
2000049e:	0003      	movs	r3, r0
200004a0:	613b      	str	r3, [r7, #16]
    
    for(int i = 0; i < snakeSize; i++){
200004a2:	2300      	movs	r3, #0
200004a4:	60fb      	str	r3, [r7, #12]
200004a6:	e03a      	b.n	2000051e <new_pos_food+0x9a>
        if (s[i].posx != rand_x && s[i].posy != rand_y){
200004a8:	68fa      	ldr	r2, [r7, #12]
200004aa:	0013      	movs	r3, r2
200004ac:	00db      	lsls	r3, r3, #3
200004ae:	189b      	adds	r3, r3, r2
200004b0:	009b      	lsls	r3, r3, #2
200004b2:	001a      	movs	r2, r3
200004b4:	683b      	ldr	r3, [r7, #0]
200004b6:	189b      	adds	r3, r3, r2
200004b8:	68db      	ldr	r3, [r3, #12]
200004ba:	697a      	ldr	r2, [r7, #20]
200004bc:	429a      	cmp	r2, r3
200004be:	d02b      	beq.n	20000518 <new_pos_food+0x94>
200004c0:	68fa      	ldr	r2, [r7, #12]
200004c2:	0013      	movs	r3, r2
200004c4:	00db      	lsls	r3, r3, #3
200004c6:	189b      	adds	r3, r3, r2
200004c8:	009b      	lsls	r3, r3, #2
200004ca:	001a      	movs	r2, r3
200004cc:	683b      	ldr	r3, [r7, #0]
200004ce:	189b      	adds	r3, r3, r2
200004d0:	691b      	ldr	r3, [r3, #16]
200004d2:	693a      	ldr	r2, [r7, #16]
200004d4:	429a      	cmp	r2, r3
200004d6:	d01f      	beq.n	20000518 <new_pos_food+0x94>

            while(1){
                if (rand_x % 4 != 0) rand_x++;
200004d8:	697b      	ldr	r3, [r7, #20]
200004da:	2203      	movs	r2, #3
200004dc:	4013      	ands	r3, r2
200004de:	d002      	beq.n	200004e6 <new_pos_food+0x62>
200004e0:	697b      	ldr	r3, [r7, #20]
200004e2:	3301      	adds	r3, #1
200004e4:	617b      	str	r3, [r7, #20]
                if (rand_y % 4 != 0) rand_y++;
200004e6:	693b      	ldr	r3, [r7, #16]
200004e8:	2203      	movs	r2, #3
200004ea:	4013      	ands	r3, r2
200004ec:	d002      	beq.n	200004f4 <new_pos_food+0x70>
200004ee:	693b      	ldr	r3, [r7, #16]
200004f0:	3301      	adds	r3, #1
200004f2:	613b      	str	r3, [r7, #16]
                
                if(rand_x % 4 == 0 && rand_y % 4 == 0) break;
200004f4:	697b      	ldr	r3, [r7, #20]
200004f6:	2203      	movs	r2, #3
200004f8:	4013      	ands	r3, r2
200004fa:	d1ed      	bne.n	200004d8 <new_pos_food+0x54>
200004fc:	693b      	ldr	r3, [r7, #16]
200004fe:	2203      	movs	r2, #3
20000500:	4013      	ands	r3, r2
20000502:	d000      	beq.n	20000506 <new_pos_food+0x82>
                if (rand_x % 4 != 0) rand_x++;
20000504:	e7e8      	b.n	200004d8 <new_pos_food+0x54>
                if(rand_x % 4 == 0 && rand_y % 4 == 0) break;
20000506:	46c0      	nop			; (mov r8, r8)
            }
            f->posx = rand_x+1;
20000508:	697b      	ldr	r3, [r7, #20]
2000050a:	1c5a      	adds	r2, r3, #1
2000050c:	687b      	ldr	r3, [r7, #4]
2000050e:	60da      	str	r2, [r3, #12]
            f->posy = rand_y+1;
20000510:	693b      	ldr	r3, [r7, #16]
20000512:	1c5a      	adds	r2, r3, #1
20000514:	687b      	ldr	r3, [r7, #4]
20000516:	611a      	str	r2, [r3, #16]
    for(int i = 0; i < snakeSize; i++){
20000518:	68fb      	ldr	r3, [r7, #12]
2000051a:	3301      	adds	r3, #1
2000051c:	60fb      	str	r3, [r7, #12]
2000051e:	4b05      	ldr	r3, [pc, #20]	; (20000534 <new_pos_food+0xb0>)
20000520:	681b      	ldr	r3, [r3, #0]
20000522:	68fa      	ldr	r2, [r7, #12]
20000524:	429a      	cmp	r2, r3
20000526:	dbbf      	blt.n	200004a8 <new_pos_food+0x24>
        }
    }
}
20000528:	46c0      	nop			; (mov r8, r8)
2000052a:	46c0      	nop			; (mov r8, r8)
2000052c:	46bd      	mov	sp, r7
2000052e:	b006      	add	sp, #24
20000530:	bd80      	pop	{r7, pc}
20000532:	46c0      	nop			; (mov r8, r8)
20000534:	20002740 	andcs	r2, r0, r0, asr #14

20000538 <randint>:

int randint(int n) {
20000538:	b580      	push	{r7, lr}
2000053a:	b086      	sub	sp, #24
2000053c:	af00      	add	r7, sp, #0
2000053e:	6078      	str	r0, [r7, #4]
    int m = 2^31, a = 1103515245, c = 12345;
20000540:	231d      	movs	r3, #29
20000542:	617b      	str	r3, [r7, #20]
20000544:	4b0e      	ldr	r3, [pc, #56]	; (20000580 <randint+0x48>)
20000546:	613b      	str	r3, [r7, #16]
20000548:	4b0e      	ldr	r3, [pc, #56]	; (20000584 <randint+0x4c>)
2000054a:	60fb      	str	r3, [r7, #12]
    seed = (a * seed + c) % m;
2000054c:	4b0e      	ldr	r3, [pc, #56]	; (20000588 <randint+0x50>)
2000054e:	681b      	ldr	r3, [r3, #0]
20000550:	693a      	ldr	r2, [r7, #16]
20000552:	435a      	muls	r2, r3
20000554:	68fb      	ldr	r3, [r7, #12]
20000556:	18d3      	adds	r3, r2, r3
20000558:	6979      	ldr	r1, [r7, #20]
2000055a:	0018      	movs	r0, r3
2000055c:	f001 f8e8 	bl	20001730 <__aeabi_idivmod>
20000560:	000b      	movs	r3, r1
20000562:	001a      	movs	r2, r3
20000564:	4b08      	ldr	r3, [pc, #32]	; (20000588 <randint+0x50>)
20000566:	601a      	str	r2, [r3, #0]
    return seed % n;
20000568:	4b07      	ldr	r3, [pc, #28]	; (20000588 <randint+0x50>)
2000056a:	681b      	ldr	r3, [r3, #0]
2000056c:	6879      	ldr	r1, [r7, #4]
2000056e:	0018      	movs	r0, r3
20000570:	f001 f8de 	bl	20001730 <__aeabi_idivmod>
20000574:	000b      	movs	r3, r1
}
20000576:	0018      	movs	r0, r3
20000578:	46bd      	mov	sp, r7
2000057a:	b006      	add	sp, #24
2000057c:	bd80      	pop	{r7, pc}
2000057e:	46c0      	nop			; (mov r8, r8)
20000580:	41c64e6d 	bicmi	r4, r6, sp, ror #28
20000584:	00003039 	andeq	r3, r0, r9, lsr r0
20000588:	20003750 	andcs	r3, r0, r0, asr r7

2000058c <print_score>:

static int print_score(void)
{
2000058c:	b580      	push	{r7, lr}
2000058e:	b082      	sub	sp, #8
20000590:	af00      	add	r7, sp, #0
    uint8_t ascii;
    int local_score = points;
20000592:	4b18      	ldr	r3, [pc, #96]	; (200005f4 <print_score+0x68>)
20000594:	681b      	ldr	r3, [r3, #0]
20000596:	603b      	str	r3, [r7, #0]

    if (local_score > 99)
20000598:	683b      	ldr	r3, [r7, #0]
2000059a:	2b63      	cmp	r3, #99	; 0x63
2000059c:	dd01      	ble.n	200005a2 <print_score+0x16>
        local_score = 99;
2000059e:	2363      	movs	r3, #99	; 0x63
200005a0:	603b      	str	r3, [r7, #0]

    /* tiotalen */
    if (local_score >= 10) {
200005a2:	683b      	ldr	r3, [r7, #0]
200005a4:	2b09      	cmp	r3, #9
200005a6:	dd13      	ble.n	200005d0 <print_score+0x44>
        ascii = '0';
200005a8:	1dfb      	adds	r3, r7, #7
200005aa:	2230      	movs	r2, #48	; 0x30
200005ac:	701a      	strb	r2, [r3, #0]

        while (local_score >= 10) {
200005ae:	e007      	b.n	200005c0 <print_score+0x34>
            ascii++;
200005b0:	1dfb      	adds	r3, r7, #7
200005b2:	781a      	ldrb	r2, [r3, #0]
200005b4:	1dfb      	adds	r3, r7, #7
200005b6:	3201      	adds	r2, #1
200005b8:	701a      	strb	r2, [r3, #0]
            local_score = local_score - 10;
200005ba:	683b      	ldr	r3, [r7, #0]
200005bc:	3b0a      	subs	r3, #10
200005be:	603b      	str	r3, [r7, #0]
        while (local_score >= 10) {
200005c0:	683b      	ldr	r3, [r7, #0]
200005c2:	2b09      	cmp	r3, #9
200005c4:	dcf4      	bgt.n	200005b0 <print_score+0x24>
        }

        ascii_write_char(ascii);
200005c6:	1dfb      	adds	r3, r7, #7
200005c8:	781b      	ldrb	r3, [r3, #0]
200005ca:	0018      	movs	r0, r3
200005cc:	f000 fea4 	bl	20001318 <ascii_write_char>
    }

    /* ettalet */
    ascii_write_char(local_score + '0');
200005d0:	683b      	ldr	r3, [r7, #0]
200005d2:	b2db      	uxtb	r3, r3
200005d4:	3330      	adds	r3, #48	; 0x30
200005d6:	b2db      	uxtb	r3, r3
200005d8:	0018      	movs	r0, r3
200005da:	f000 fe9d 	bl	20001318 <ascii_write_char>
    if (local_score == 0) return 1;
200005de:	683b      	ldr	r3, [r7, #0]
200005e0:	2b00      	cmp	r3, #0
200005e2:	d101      	bne.n	200005e8 <print_score+0x5c>
200005e4:	2301      	movs	r3, #1
200005e6:	e000      	b.n	200005ea <print_score+0x5e>
    else return 0;
200005e8:	2300      	movs	r3, #0
}
200005ea:	0018      	movs	r0, r3
200005ec:	46bd      	mov	sp, r7
200005ee:	b002      	add	sp, #8
200005f0:	bd80      	pop	{r7, pc}
200005f2:	46c0      	nop			; (mov r8, r8)
200005f4:	2000273c 	andcs	r2, r0, ip, lsr r7

200005f8 <print_score_all>:

static void print_score_all(void) {
200005f8:	b580      	push	{r7, lr}
200005fa:	af00      	add	r7, sp, #0
    ascii_gotoxy(1, 1);
200005fc:	2101      	movs	r1, #1
200005fe:	2001      	movs	r0, #1
20000600:	f000 fe9f 	bl	20001342 <ascii_gotoxy>
    ascii_print("You have: ");
20000604:	4b0f      	ldr	r3, [pc, #60]	; (20000644 <print_score_all+0x4c>)
20000606:	0018      	movs	r0, r3
20000608:	f000 fec1 	bl	2000138e <ascii_print>

    if (print_score()) {
2000060c:	f7ff ffbe 	bl	2000058c <print_score>
20000610:	1e03      	subs	r3, r0, #0
20000612:	d014      	beq.n	2000063e <print_score_all+0x46>
        if(dead){
20000614:	4b0c      	ldr	r3, [pc, #48]	; (20000648 <print_score_all+0x50>)
20000616:	681b      	ldr	r3, [r3, #0]
20000618:	2b00      	cmp	r3, #0
2000061a:	d008      	beq.n	2000062e <print_score_all+0x36>
            ascii_gotoxy(1, 2);
2000061c:	2102      	movs	r1, #2
2000061e:	2001      	movs	r0, #1
20000620:	f000 fe8f 	bl	20001342 <ascii_gotoxy>
            ascii_print("GAME OVER");
20000624:	4b09      	ldr	r3, [pc, #36]	; (2000064c <print_score_all+0x54>)
20000626:	0018      	movs	r0, r3
20000628:	f000 feb1 	bl	2000138e <ascii_print>
        }else{
            ascii_gotoxy(1, 2);
            ascii_print("");
        }
    }
}
2000062c:	e007      	b.n	2000063e <print_score_all+0x46>
            ascii_gotoxy(1, 2);
2000062e:	2102      	movs	r1, #2
20000630:	2001      	movs	r0, #1
20000632:	f000 fe86 	bl	20001342 <ascii_gotoxy>
            ascii_print("");
20000636:	4b06      	ldr	r3, [pc, #24]	; (20000650 <print_score_all+0x58>)
20000638:	0018      	movs	r0, r3
2000063a:	f000 fea8 	bl	2000138e <ascii_print>
}
2000063e:	46c0      	nop			; (mov r8, r8)
20000640:	46bd      	mov	sp, r7
20000642:	bd80      	pop	{r7, pc}
20000644:	20003a20 	andcs	r3, r0, r0, lsr #20
20000648:	20002744 	andcs	r2, r0, r4, asr #14
2000064c:	20003a2c 	andcs	r3, r0, ip, lsr #20
20000650:	20003a38 	andcs	r3, r0, r8, lsr sl

20000654 <init_app>:

void init_app(void){/**/
20000654:	b580      	push	{r7, lr}
20000656:	af00      	add	r7, sp, #0
    #ifdef USBDM
        /*starta klockor på port D & E*/
        * ( (unsigned long *) 0x40023830) = 0x18;
20000658:	4b12      	ldr	r3, [pc, #72]	; (200006a4 <init_app+0x50>)
2000065a:	2218      	movs	r2, #24
2000065c:	601a      	str	r2, [r3, #0]
        __asm volatile("  LDR R0,=0x08000209\n BLX R0 \n");
2000065e:	48f9      	ldr	r0, [pc, #996]	; (20000a44 <main+0x17c>)
20000660:	4780      	blx	r0
    #endif
    
    *GPIO_E_MODER = 0x55555555;
20000662:	4b11      	ldr	r3, [pc, #68]	; (200006a8 <init_app+0x54>)
20000664:	4a11      	ldr	r2, [pc, #68]	; (200006ac <init_app+0x58>)
20000666:	601a      	str	r2, [r3, #0]
    *GPIO_E_OTYPER = 0x00000000;
20000668:	4b11      	ldr	r3, [pc, #68]	; (200006b0 <init_app+0x5c>)
2000066a:	2200      	movs	r2, #0
2000066c:	801a      	strh	r2, [r3, #0]
    *GPIO_E_OSPEEDR = 0x00000000;
2000066e:	4b11      	ldr	r3, [pc, #68]	; (200006b4 <init_app+0x60>)
20000670:	2200      	movs	r2, #0
20000672:	601a      	str	r2, [r3, #0]
    
    *GPIO_D_MODER = 0;
20000674:	4b10      	ldr	r3, [pc, #64]	; (200006b8 <init_app+0x64>)
20000676:	2200      	movs	r2, #0
20000678:	601a      	str	r2, [r3, #0]
    *GPIO_D_MODER = 0x55000000;
2000067a:	4b0f      	ldr	r3, [pc, #60]	; (200006b8 <init_app+0x64>)
2000067c:	22aa      	movs	r2, #170	; 0xaa
2000067e:	05d2      	lsls	r2, r2, #23
20000680:	601a      	str	r2, [r3, #0]
    *GPIO_D_PUPDR = 0;
20000682:	4b0e      	ldr	r3, [pc, #56]	; (200006bc <init_app+0x68>)
20000684:	2200      	movs	r2, #0
20000686:	601a      	str	r2, [r3, #0]
    *GPIO_D_PUPDR |= 0xAA000000;
20000688:	4b0c      	ldr	r3, [pc, #48]	; (200006bc <init_app+0x68>)
2000068a:	681a      	ldr	r2, [r3, #0]
2000068c:	4b0b      	ldr	r3, [pc, #44]	; (200006bc <init_app+0x68>)
2000068e:	21aa      	movs	r1, #170	; 0xaa
20000690:	0609      	lsls	r1, r1, #24
20000692:	430a      	orrs	r2, r1
20000694:	601a      	str	r2, [r3, #0]
    *GPIO_D_OTYPER = 0;
20000696:	4b0a      	ldr	r3, [pc, #40]	; (200006c0 <init_app+0x6c>)
20000698:	2200      	movs	r2, #0
2000069a:	801a      	strh	r2, [r3, #0]
}
2000069c:	46c0      	nop			; (mov r8, r8)
2000069e:	46bd      	mov	sp, r7
200006a0:	bd80      	pop	{r7, pc}
200006a2:	46c0      	nop			; (mov r8, r8)
200006a4:	40023830 	andmi	r3, r2, r0, lsr r8
200006a8:	40021000 	andmi	r1, r2, r0
200006ac:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab
200006b0:	40021004 	andmi	r1, r2, r4
200006b4:	40021008 	andmi	r1, r2, r8
200006b8:	40020c00 	andmi	r0, r2, r0, lsl #24
200006bc:	40020c0c 	andmi	r0, r2, ip, lsl #24
200006c0:	40020c04 	andmi	r0, r2, r4, lsl #24

200006c4 <init_snake>:

void init_snake(POBJECT s){
200006c4:	b580      	push	{r7, lr}
200006c6:	b084      	sub	sp, #16
200006c8:	af00      	add	r7, sp, #0
200006ca:	6078      	str	r0, [r7, #4]
    int j = 0;
200006cc:	2300      	movs	r3, #0
200006ce:	60fb      	str	r3, [r7, #12]
    for (int i = 3; i >= 0; i--, j++){
200006d0:	2303      	movs	r3, #3
200006d2:	60bb      	str	r3, [r7, #8]
200006d4:	e075      	b.n	200007c2 <init_snake+0xfe>
        if(i == 0){ 
200006d6:	68bb      	ldr	r3, [r7, #8]
200006d8:	2b00      	cmp	r3, #0
200006da:	d10a      	bne.n	200006f2 <init_snake+0x2e>
            s[i].geo = &snakehead_geometry_RIGHT;
200006dc:	68ba      	ldr	r2, [r7, #8]
200006de:	0013      	movs	r3, r2
200006e0:	00db      	lsls	r3, r3, #3
200006e2:	189b      	adds	r3, r3, r2
200006e4:	009b      	lsls	r3, r3, #2
200006e6:	001a      	movs	r2, r3
200006e8:	687b      	ldr	r3, [r7, #4]
200006ea:	189b      	adds	r3, r3, r2
200006ec:	4a39      	ldr	r2, [pc, #228]	; (200007d4 <init_snake+0x110>)
200006ee:	601a      	str	r2, [r3, #0]
200006f0:	e009      	b.n	20000706 <init_snake+0x42>
        } else{ 
            s[i].geo = &snakebody_geometry;
200006f2:	68ba      	ldr	r2, [r7, #8]
200006f4:	0013      	movs	r3, r2
200006f6:	00db      	lsls	r3, r3, #3
200006f8:	189b      	adds	r3, r3, r2
200006fa:	009b      	lsls	r3, r3, #2
200006fc:	001a      	movs	r2, r3
200006fe:	687b      	ldr	r3, [r7, #4]
20000700:	189b      	adds	r3, r3, r2
20000702:	4a35      	ldr	r2, [pc, #212]	; (200007d8 <init_snake+0x114>)
20000704:	601a      	str	r2, [r3, #0]
        }
        s[i].posx = ((j+1) * 4) + 1;
20000706:	68fb      	ldr	r3, [r7, #12]
20000708:	3301      	adds	r3, #1
2000070a:	0099      	lsls	r1, r3, #2
2000070c:	68ba      	ldr	r2, [r7, #8]
2000070e:	0013      	movs	r3, r2
20000710:	00db      	lsls	r3, r3, #3
20000712:	189b      	adds	r3, r3, r2
20000714:	009b      	lsls	r3, r3, #2
20000716:	001a      	movs	r2, r3
20000718:	687b      	ldr	r3, [r7, #4]
2000071a:	189b      	adds	r3, r3, r2
2000071c:	1c4a      	adds	r2, r1, #1
2000071e:	60da      	str	r2, [r3, #12]
        s[i].posy = 1;
20000720:	68ba      	ldr	r2, [r7, #8]
20000722:	0013      	movs	r3, r2
20000724:	00db      	lsls	r3, r3, #3
20000726:	189b      	adds	r3, r3, r2
20000728:	009b      	lsls	r3, r3, #2
2000072a:	001a      	movs	r2, r3
2000072c:	687b      	ldr	r3, [r7, #4]
2000072e:	189b      	adds	r3, r3, r2
20000730:	2201      	movs	r2, #1
20000732:	611a      	str	r2, [r3, #16]
        s[i].dirx = 0;
20000734:	68ba      	ldr	r2, [r7, #8]
20000736:	0013      	movs	r3, r2
20000738:	00db      	lsls	r3, r3, #3
2000073a:	189b      	adds	r3, r3, r2
2000073c:	009b      	lsls	r3, r3, #2
2000073e:	001a      	movs	r2, r3
20000740:	687b      	ldr	r3, [r7, #4]
20000742:	189b      	adds	r3, r3, r2
20000744:	2200      	movs	r2, #0
20000746:	605a      	str	r2, [r3, #4]
        s[i].diry = 0;
20000748:	68ba      	ldr	r2, [r7, #8]
2000074a:	0013      	movs	r3, r2
2000074c:	00db      	lsls	r3, r3, #3
2000074e:	189b      	adds	r3, r3, r2
20000750:	009b      	lsls	r3, r3, #2
20000752:	001a      	movs	r2, r3
20000754:	687b      	ldr	r3, [r7, #4]
20000756:	189b      	adds	r3, r3, r2
20000758:	2200      	movs	r2, #0
2000075a:	609a      	str	r2, [r3, #8]
        s[i].move = move_object;
2000075c:	68ba      	ldr	r2, [r7, #8]
2000075e:	0013      	movs	r3, r2
20000760:	00db      	lsls	r3, r3, #3
20000762:	189b      	adds	r3, r3, r2
20000764:	009b      	lsls	r3, r3, #2
20000766:	001a      	movs	r2, r3
20000768:	687b      	ldr	r3, [r7, #4]
2000076a:	189b      	adds	r3, r3, r2
2000076c:	4a1b      	ldr	r2, [pc, #108]	; (200007dc <init_snake+0x118>)
2000076e:	61da      	str	r2, [r3, #28]
        s[i].clear = clear_object;
20000770:	68ba      	ldr	r2, [r7, #8]
20000772:	0013      	movs	r3, r2
20000774:	00db      	lsls	r3, r3, #3
20000776:	189b      	adds	r3, r3, r2
20000778:	009b      	lsls	r3, r3, #2
2000077a:	001a      	movs	r2, r3
2000077c:	687b      	ldr	r3, [r7, #4]
2000077e:	189b      	adds	r3, r3, r2
20000780:	4a17      	ldr	r2, [pc, #92]	; (200007e0 <init_snake+0x11c>)
20000782:	619a      	str	r2, [r3, #24]
        s[i].draw = draw_object;
20000784:	68ba      	ldr	r2, [r7, #8]
20000786:	0013      	movs	r3, r2
20000788:	00db      	lsls	r3, r3, #3
2000078a:	189b      	adds	r3, r3, r2
2000078c:	009b      	lsls	r3, r3, #2
2000078e:	001a      	movs	r2, r3
20000790:	687b      	ldr	r3, [r7, #4]
20000792:	189b      	adds	r3, r3, r2
20000794:	4a13      	ldr	r2, [pc, #76]	; (200007e4 <init_snake+0x120>)
20000796:	615a      	str	r2, [r3, #20]
        s[i].set_speed = set_object_speed;
20000798:	68ba      	ldr	r2, [r7, #8]
2000079a:	0013      	movs	r3, r2
2000079c:	00db      	lsls	r3, r3, #3
2000079e:	189b      	adds	r3, r3, r2
200007a0:	009b      	lsls	r3, r3, #2
200007a2:	001a      	movs	r2, r3
200007a4:	687b      	ldr	r3, [r7, #4]
200007a6:	189b      	adds	r3, r3, r2
200007a8:	4a0f      	ldr	r2, [pc, #60]	; (200007e8 <init_snake+0x124>)
200007aa:	621a      	str	r2, [r3, #32]
        snakeSize++;
200007ac:	4b0f      	ldr	r3, [pc, #60]	; (200007ec <init_snake+0x128>)
200007ae:	681b      	ldr	r3, [r3, #0]
200007b0:	1c5a      	adds	r2, r3, #1
200007b2:	4b0e      	ldr	r3, [pc, #56]	; (200007ec <init_snake+0x128>)
200007b4:	601a      	str	r2, [r3, #0]
    for (int i = 3; i >= 0; i--, j++){
200007b6:	68bb      	ldr	r3, [r7, #8]
200007b8:	3b01      	subs	r3, #1
200007ba:	60bb      	str	r3, [r7, #8]
200007bc:	68fb      	ldr	r3, [r7, #12]
200007be:	3301      	adds	r3, #1
200007c0:	60fb      	str	r3, [r7, #12]
200007c2:	68bb      	ldr	r3, [r7, #8]
200007c4:	2b00      	cmp	r3, #0
200007c6:	da86      	bge.n	200006d6 <init_snake+0x12>
    }
}
200007c8:	46c0      	nop			; (mov r8, r8)
200007ca:	46c0      	nop			; (mov r8, r8)
200007cc:	46bd      	mov	sp, r7
200007ce:	b004      	add	sp, #16
200007d0:	bd80      	pop	{r7, pc}
200007d2:	46c0      	nop			; (mov r8, r8)
200007d4:	2000391c 	andcs	r3, r0, ip, lsl r9
200007d8:	200039a0 	andcs	r3, r0, r0, lsr #19
200007dc:	200000f5 	strdcs	r0, [r0], -r5
200007e0:	20000093 	mulcs	r0, r3, r0
200007e4:	20000031 	andcs	r0, r0, r1, lsr r0
200007e8:	20000011 	andcs	r0, r0, r1, lsl r0
200007ec:	20002740 	andcs	r2, r0, r0, asr #14

200007f0 <init_food>:

void init_food(POBJECT f){
200007f0:	b580      	push	{r7, lr}
200007f2:	b082      	sub	sp, #8
200007f4:	af00      	add	r7, sp, #0
200007f6:	6078      	str	r0, [r7, #4]
    f->geo = &food_geometry;
200007f8:	687b      	ldr	r3, [r7, #4]
200007fa:	4a09      	ldr	r2, [pc, #36]	; (20000820 <init_food+0x30>)
200007fc:	601a      	str	r2, [r3, #0]
    f->draw = draw_object; 
200007fe:	687b      	ldr	r3, [r7, #4]
20000800:	4a08      	ldr	r2, [pc, #32]	; (20000824 <init_food+0x34>)
20000802:	615a      	str	r2, [r3, #20]
    f->clear = clear_object;
20000804:	687b      	ldr	r3, [r7, #4]
20000806:	4a08      	ldr	r2, [pc, #32]	; (20000828 <init_food+0x38>)
20000808:	619a      	str	r2, [r3, #24]
    f->move = move_object;
2000080a:	687b      	ldr	r3, [r7, #4]
2000080c:	4a07      	ldr	r2, [pc, #28]	; (2000082c <init_food+0x3c>)
2000080e:	61da      	str	r2, [r3, #28]
    f->set_speed = set_object_speed;
20000810:	687b      	ldr	r3, [r7, #4]
20000812:	4a07      	ldr	r2, [pc, #28]	; (20000830 <init_food+0x40>)
20000814:	621a      	str	r2, [r3, #32]
}
20000816:	46c0      	nop			; (mov r8, r8)
20000818:	46bd      	mov	sp, r7
2000081a:	b002      	add	sp, #8
2000081c:	bd80      	pop	{r7, pc}
2000081e:	46c0      	nop			; (mov r8, r8)
20000820:	200039cc 	andcs	r3, r0, ip, asr #19
20000824:	20000031 	andcs	r0, r0, r1, lsr r0
20000828:	20000093 	mulcs	r0, r3, r0
2000082c:	200000f5 	strdcs	r0, [r0], -r5
20000830:	20000011 	andcs	r0, r0, r1, lsl r0

20000834 <restart_game>:

void restart_game(){
20000834:	b580      	push	{r7, lr}
20000836:	af00      	add	r7, sp, #0
        clear_backbuffer();
20000838:	f000 fad3 	bl	20000de2 <clear_backbuffer>
        graphic_draw_screen();
2000083c:	f000 fb2e 	bl	20000e9c <graphic_draw_screen>
        points = 0;
20000840:	4b07      	ldr	r3, [pc, #28]	; (20000860 <restart_game+0x2c>)
20000842:	2200      	movs	r2, #0
20000844:	601a      	str	r2, [r3, #0]
        snakeSize = 0;
20000846:	4b07      	ldr	r3, [pc, #28]	; (20000864 <restart_game+0x30>)
20000848:	2200      	movs	r2, #0
2000084a:	601a      	str	r2, [r3, #0]
        seed = 123456789;
2000084c:	4b06      	ldr	r3, [pc, #24]	; (20000868 <restart_game+0x34>)
2000084e:	4a07      	ldr	r2, [pc, #28]	; (2000086c <restart_game+0x38>)
20000850:	601a      	str	r2, [r3, #0]
        dead = 0;
20000852:	4b07      	ldr	r3, [pc, #28]	; (20000870 <restart_game+0x3c>)
20000854:	2200      	movs	r2, #0
20000856:	601a      	str	r2, [r3, #0]
}
20000858:	46c0      	nop			; (mov r8, r8)
2000085a:	46bd      	mov	sp, r7
2000085c:	bd80      	pop	{r7, pc}
2000085e:	46c0      	nop			; (mov r8, r8)
20000860:	2000273c 	andcs	r2, r0, ip, lsr r7
20000864:	20002740 	andcs	r2, r0, r0, asr #14
20000868:	20003750 	andcs	r3, r0, r0, asr r7
2000086c:	075bcd15 	smmlaeq	fp, r5, sp, ip
20000870:	20002744 	andcs	r2, r0, r4, asr #14

20000874 <start>:

void start(){
20000874:	b590      	push	{r4, r7, lr}
20000876:	b087      	sub	sp, #28
20000878:	af00      	add	r7, sp, #0
     ascii_gotoxy(1,2);
2000087a:	2102      	movs	r1, #2
2000087c:	2001      	movs	r0, #1
2000087e:	f000 fd60 	bl	20001342 <ascii_gotoxy>
            char *s;
            char e[] = "Press 5 to start";
20000882:	003b      	movs	r3, r7
20000884:	4a0f      	ldr	r2, [pc, #60]	; (200008c4 <start+0x50>)
20000886:	ca13      	ldmia	r2!, {r0, r1, r4}
20000888:	c313      	stmia	r3!, {r0, r1, r4}
2000088a:	6811      	ldr	r1, [r2, #0]
2000088c:	6019      	str	r1, [r3, #0]
2000088e:	7912      	ldrb	r2, [r2, #4]
20000890:	711a      	strb	r2, [r3, #4]
            s = e;
20000892:	003b      	movs	r3, r7
20000894:	617b      	str	r3, [r7, #20]
            while(*s)
20000896:	e006      	b.n	200008a6 <start+0x32>
                ascii_write_char(*s++);
20000898:	697b      	ldr	r3, [r7, #20]
2000089a:	1c5a      	adds	r2, r3, #1
2000089c:	617a      	str	r2, [r7, #20]
2000089e:	781b      	ldrb	r3, [r3, #0]
200008a0:	0018      	movs	r0, r3
200008a2:	f000 fd39 	bl	20001318 <ascii_write_char>
            while(*s)
200008a6:	697b      	ldr	r3, [r7, #20]
200008a8:	781b      	ldrb	r3, [r3, #0]
200008aa:	2b00      	cmp	r3, #0
200008ac:	d1f4      	bne.n	20000898 <start+0x24>
        
    while(keyb() != 5){}
200008ae:	46c0      	nop			; (mov r8, r8)
200008b0:	f000 fe14 	bl	200014dc <keyb>
200008b4:	0003      	movs	r3, r0
200008b6:	2b05      	cmp	r3, #5
200008b8:	d1fa      	bne.n	200008b0 <start+0x3c>
           
}
200008ba:	46c0      	nop			; (mov r8, r8)
200008bc:	46c0      	nop			; (mov r8, r8)
200008be:	46bd      	mov	sp, r7
200008c0:	b007      	add	sp, #28
200008c2:	bd90      	pop	{r4, r7, pc}
200008c4:	20003a3c 	andcs	r3, r0, ip, lsr sl

200008c8 <main>:

void main(int argc, char **argv){
200008c8:	b5b0      	push	{r4, r5, r7, lr}
200008ca:	4c56      	ldr	r4, [pc, #344]	; (20000a24 <main+0x15c>)
200008cc:	44a5      	add	sp, r4
200008ce:	af00      	add	r7, sp, #0
200008d0:	6078      	str	r0, [r7, #4]
200008d2:	6039      	str	r1, [r7, #0]
    int game = 1, restart = 2;
200008d4:	2301      	movs	r3, #1
200008d6:	4a54      	ldr	r2, [pc, #336]	; (20000a28 <main+0x160>)
200008d8:	18ba      	adds	r2, r7, r2
200008da:	6013      	str	r3, [r2, #0]
200008dc:	2302      	movs	r3, #2
200008de:	22e2      	movs	r2, #226	; 0xe2
200008e0:	0112      	lsls	r2, r2, #4
200008e2:	18ba      	adds	r2, r7, r2
200008e4:	6013      	str	r3, [r2, #0]
    char key_stroke;
    POBJECT food = &food_obj;
200008e6:	4b51      	ldr	r3, [pc, #324]	; (20000a2c <main+0x164>)
200008e8:	4a51      	ldr	r2, [pc, #324]	; (20000a30 <main+0x168>)
200008ea:	18ba      	adds	r2, r7, r2
200008ec:	6013      	str	r3, [r2, #0]
    OBJECT snake[100];
        
    init_app();
200008ee:	f7ff feb1 	bl	20000654 <init_app>
    graphic_init();
200008f2:	f000 f8a9 	bl	20000a48 <graphic_init>
    ascii_init();
200008f6:	f000 fbd7 	bl	200010a8 <ascii_init>
    
    while(game){
200008fa:	e087      	b.n	20000a0c <main+0x144>
        #ifndef SIMULATOR
            graphic_clear_screen(); //JAG FÅR VARA MED
200008fc:	f000 fa44 	bl	20000d88 <graphic_clear_screen>
        #endif

        if(restart == 2){
20000900:	24e2      	movs	r4, #226	; 0xe2
20000902:	0124      	lsls	r4, r4, #4
20000904:	193b      	adds	r3, r7, r4
20000906:	681b      	ldr	r3, [r3, #0]
20000908:	2b02      	cmp	r3, #2
2000090a:	d000      	beq.n	2000090e <main+0x46>
2000090c:	e078      	b.n	20000a00 <main+0x138>
            restart_game();
2000090e:	f7ff ff91 	bl	20000834 <restart_game>
            restart = 1;
20000912:	2301      	movs	r3, #1
20000914:	193a      	adds	r2, r7, r4
20000916:	6013      	str	r3, [r2, #0]
            init_snake(snake);
20000918:	2408      	movs	r4, #8
2000091a:	193b      	adds	r3, r7, r4
2000091c:	0018      	movs	r0, r3
2000091e:	f7ff fed1 	bl	200006c4 <init_snake>
            init_food(food);
20000922:	4d43      	ldr	r5, [pc, #268]	; (20000a30 <main+0x168>)
20000924:	197b      	adds	r3, r7, r5
20000926:	681b      	ldr	r3, [r3, #0]
20000928:	0018      	movs	r0, r3
2000092a:	f7ff ff61 	bl	200007f0 <init_food>
            new_pos_food(food, snake);
2000092e:	193a      	adds	r2, r7, r4
20000930:	197b      	adds	r3, r7, r5
20000932:	681b      	ldr	r3, [r3, #0]
20000934:	0011      	movs	r1, r2
20000936:	0018      	movs	r0, r3
20000938:	f7ff fda4 	bl	20000484 <new_pos_food>
        }
        
        //start();
        
        while(restart == 1){
2000093c:	e060      	b.n	20000a00 <main+0x138>
            print_score_all();
2000093e:	f7ff fe5b 	bl	200005f8 <print_score_all>
            
            if (dead){
20000942:	4b3c      	ldr	r3, [pc, #240]	; (20000a34 <main+0x16c>)
20000944:	681b      	ldr	r3, [r3, #0]
20000946:	2b00      	cmp	r3, #0
20000948:	d004      	beq.n	20000954 <main+0x8c>
                restart = 2;
2000094a:	2302      	movs	r3, #2
2000094c:	22e2      	movs	r2, #226	; 0xe2
2000094e:	0112      	lsls	r2, r2, #4
20000950:	18ba      	adds	r2, r7, r2
20000952:	6013      	str	r3, [r2, #0]
            }
            clear_backbuffer();
20000954:	f000 fa45 	bl	20000de2 <clear_backbuffer>
            
            draw_snake(snake);
20000958:	2308      	movs	r3, #8
2000095a:	18fb      	adds	r3, r7, r3
2000095c:	0018      	movs	r0, r3
2000095e:	f7ff fc78 	bl	20000252 <draw_snake>
            draw_food(food);
20000962:	4b33      	ldr	r3, [pc, #204]	; (20000a30 <main+0x168>)
20000964:	18fb      	adds	r3, r7, r3
20000966:	681b      	ldr	r3, [r3, #0]
20000968:	0018      	movs	r0, r3
2000096a:	f7ff fca7 	bl	200002bc <draw_food>

            
            graphic_draw_screen();
2000096e:	f000 fa95 	bl	20000e9c <graphic_draw_screen>
            delay_milli(100);
20000972:	2064      	movs	r0, #100	; 0x64
20000974:	f000 fd6a 	bl	2000144c <delay_milli>
            key_stroke = keyb();
20000978:	4d2f      	ldr	r5, [pc, #188]	; (20000a38 <main+0x170>)
2000097a:	197c      	adds	r4, r7, r5
2000097c:	f000 fdae 	bl	200014dc <keyb>
20000980:	0003      	movs	r3, r0
20000982:	7023      	strb	r3, [r4, #0]
            switch(key_stroke){
20000984:	197b      	adds	r3, r7, r5
20000986:	781b      	ldrb	r3, [r3, #0]
20000988:	2b0d      	cmp	r3, #13
2000098a:	d830      	bhi.n	200009ee <main+0x126>
2000098c:	009a      	lsls	r2, r3, #2
2000098e:	4b2b      	ldr	r3, [pc, #172]	; (20000a3c <main+0x174>)
20000990:	18d3      	adds	r3, r2, r3
20000992:	681b      	ldr	r3, [r3, #0]
20000994:	469f      	mov	pc, r3
                case RIGHT: turn(RIGHT, snake); break; //dirx = +, diry = 0
20000996:	2308      	movs	r3, #8
20000998:	18fb      	adds	r3, r7, r3
2000099a:	0019      	movs	r1, r3
2000099c:	2006      	movs	r0, #6
2000099e:	f7ff fce5 	bl	2000036c <turn>
200009a2:	e024      	b.n	200009ee <main+0x126>
                case LEFT: turn(LEFT, snake); break; //dirx = -, diry = 0
200009a4:	2308      	movs	r3, #8
200009a6:	18fb      	adds	r3, r7, r3
200009a8:	0019      	movs	r1, r3
200009aa:	2004      	movs	r0, #4
200009ac:	f7ff fcde 	bl	2000036c <turn>
200009b0:	e01d      	b.n	200009ee <main+0x126>
                case UP: turn(UP, snake); break; //dirx = 0, diry = -
200009b2:	2308      	movs	r3, #8
200009b4:	18fb      	adds	r3, r7, r3
200009b6:	0019      	movs	r1, r3
200009b8:	2002      	movs	r0, #2
200009ba:	f7ff fcd7 	bl	2000036c <turn>
200009be:	e016      	b.n	200009ee <main+0x126>
                case DOWN: turn(DOWN, snake); break; //dirx = 0, diry = +
200009c0:	2308      	movs	r3, #8
200009c2:	18fb      	adds	r3, r7, r3
200009c4:	0019      	movs	r1, r3
200009c6:	2008      	movs	r0, #8
200009c8:	f7ff fcd0 	bl	2000036c <turn>
200009cc:	e00f      	b.n	200009ee <main+0x126>
                case QUIT: game = 0; restart = 0; break;
200009ce:	2300      	movs	r3, #0
200009d0:	4a15      	ldr	r2, [pc, #84]	; (20000a28 <main+0x160>)
200009d2:	18ba      	adds	r2, r7, r2
200009d4:	6013      	str	r3, [r2, #0]
200009d6:	2300      	movs	r3, #0
200009d8:	22e2      	movs	r2, #226	; 0xe2
200009da:	0112      	lsls	r2, r2, #4
200009dc:	18ba      	adds	r2, r7, r2
200009de:	6013      	str	r3, [r2, #0]
200009e0:	e005      	b.n	200009ee <main+0x126>
                case RESTART: restart = 2; break;
200009e2:	2302      	movs	r3, #2
200009e4:	22e2      	movs	r2, #226	; 0xe2
200009e6:	0112      	lsls	r2, r2, #4
200009e8:	18ba      	adds	r2, r7, r2
200009ea:	6013      	str	r3, [r2, #0]
200009ec:	46c0      	nop			; (mov r8, r8)
            }
            
            snake_eat_food(food, snake);
200009ee:	2308      	movs	r3, #8
200009f0:	18fa      	adds	r2, r7, r3
200009f2:	4b0f      	ldr	r3, [pc, #60]	; (20000a30 <main+0x168>)
200009f4:	18fb      	adds	r3, r7, r3
200009f6:	681b      	ldr	r3, [r3, #0]
200009f8:	0011      	movs	r1, r2
200009fa:	0018      	movs	r0, r3
200009fc:	f7ff fd20 	bl	20000440 <snake_eat_food>
        while(restart == 1){
20000a00:	23e2      	movs	r3, #226	; 0xe2
20000a02:	011b      	lsls	r3, r3, #4
20000a04:	18fb      	adds	r3, r7, r3
20000a06:	681b      	ldr	r3, [r3, #0]
20000a08:	2b01      	cmp	r3, #1
20000a0a:	d098      	beq.n	2000093e <main+0x76>
    while(game){
20000a0c:	4b06      	ldr	r3, [pc, #24]	; (20000a28 <main+0x160>)
20000a0e:	18fb      	adds	r3, r7, r3
20000a10:	681b      	ldr	r3, [r3, #0]
20000a12:	2b00      	cmp	r3, #0
20000a14:	d000      	beq.n	20000a18 <main+0x150>
20000a16:	e771      	b.n	200008fc <main+0x34>
        }
    }
}
20000a18:	46c0      	nop			; (mov r8, r8)
20000a1a:	46c0      	nop			; (mov r8, r8)
20000a1c:	46bd      	mov	sp, r7
20000a1e:	4b08      	ldr	r3, [pc, #32]	; (20000a40 <main+0x178>)
20000a20:	449d      	add	sp, r3
20000a22:	bdb0      	pop	{r4, r5, r7, pc}
20000a24:	fffff1d8 			; <UNDEFINED> instruction: 0xfffff1d8
20000a28:	00000e24 	andeq	r0, r0, r4, lsr #28
20000a2c:	200039f8 	strdcs	r3, [r0], -r8
20000a30:	00000e1c 	andeq	r0, r0, ip, lsl lr
20000a34:	20002744 	andcs	r2, r0, r4, asr #14
20000a38:	00000e1b 	andeq	r0, r0, fp, lsl lr
20000a3c:	20003a50 	andcs	r3, r0, r0, asr sl
20000a40:	00000e28 	andeq	r0, r0, r8, lsr #28
20000a44:	08000209 	stmdaeq	r0, {r0, r3, r9}

20000a48 <graphic_init>:
#include <defines.h>
#include <asciidisplay.h>
#include <graphicdisplay.h>


void graphic_init(void){
20000a48:	b580      	push	{r7, lr}
20000a4a:	af00      	add	r7, sp, #0
    graphic_ctrl_bit_set(B_E);
20000a4c:	2040      	movs	r0, #64	; 0x40
20000a4e:	f000 f851 	bl	20000af4 <graphic_ctrl_bit_set>
    delay_mikro(10);
20000a52:	200a      	movs	r0, #10
20000a54:	f000 fce3 	bl	2000141e <delay_mikro>
    graphic_ctrl_bit_clear(B_CS1|B_CS2|B_RST|B_E);
20000a58:	2078      	movs	r0, #120	; 0x78
20000a5a:	f000 f823 	bl	20000aa4 <graphic_ctrl_bit_clear>
    delay_milli(30);
20000a5e:	201e      	movs	r0, #30
20000a60:	f000 fcf4 	bl	2000144c <delay_milli>
    graphic_ctrl_bit_set(B_RST);
20000a64:	2020      	movs	r0, #32
20000a66:	f000 f845 	bl	20000af4 <graphic_ctrl_bit_set>
    delay_milli(100);
20000a6a:	2064      	movs	r0, #100	; 0x64
20000a6c:	f000 fcee 	bl	2000144c <delay_milli>
    graphic_write_command(LCD_OFF, B_CS1|B_CS2);
20000a70:	2118      	movs	r1, #24
20000a72:	203e      	movs	r0, #62	; 0x3e
20000a74:	f000 f942 	bl	20000cfc <graphic_write_command>
    graphic_write_command(LCD_ON, B_CS1|B_CS2);
20000a78:	2118      	movs	r1, #24
20000a7a:	203f      	movs	r0, #63	; 0x3f
20000a7c:	f000 f93e 	bl	20000cfc <graphic_write_command>
    graphic_write_command(LCD_DISP_START, B_CS1|B_CS2);
20000a80:	2118      	movs	r1, #24
20000a82:	20c0      	movs	r0, #192	; 0xc0
20000a84:	f000 f93a 	bl	20000cfc <graphic_write_command>
    graphic_write_command(LCD_SET_ADD, B_CS1|B_CS2);
20000a88:	2118      	movs	r1, #24
20000a8a:	2040      	movs	r0, #64	; 0x40
20000a8c:	f000 f936 	bl	20000cfc <graphic_write_command>
    graphic_write_command(LCD_SET_PAGE, B_CS1|B_CS2);
20000a90:	2118      	movs	r1, #24
20000a92:	20b8      	movs	r0, #184	; 0xb8
20000a94:	f000 f932 	bl	20000cfc <graphic_write_command>
    select_controller(0);
20000a98:	2000      	movs	r0, #0
20000a9a:	f000 f84d 	bl	20000b38 <select_controller>
}
20000a9e:	46c0      	nop			; (mov r8, r8)
20000aa0:	46bd      	mov	sp, r7
20000aa2:	bd80      	pop	{r7, pc}

20000aa4 <graphic_ctrl_bit_clear>:

void graphic_ctrl_bit_clear(uint8_t x){
20000aa4:	b580      	push	{r7, lr}
20000aa6:	b084      	sub	sp, #16
20000aa8:	af00      	add	r7, sp, #0
20000aaa:	0002      	movs	r2, r0
20000aac:	1dfb      	adds	r3, r7, #7
20000aae:	701a      	strb	r2, [r3, #0]
    //*GPIO_E_ODR_LOW &= ( B_SELECT | ~x);
    //ascii_ctrl_bit_clear(x);
    uint8_t c;
    c =*GPIO_E_ODR_LOW;
20000ab0:	4a0f      	ldr	r2, [pc, #60]	; (20000af0 <graphic_ctrl_bit_clear+0x4c>)
20000ab2:	210f      	movs	r1, #15
20000ab4:	187b      	adds	r3, r7, r1
20000ab6:	7812      	ldrb	r2, [r2, #0]
20000ab8:	701a      	strb	r2, [r3, #0]
    c &= ~x;
20000aba:	1dfb      	adds	r3, r7, #7
20000abc:	781b      	ldrb	r3, [r3, #0]
20000abe:	b25b      	sxtb	r3, r3
20000ac0:	43db      	mvns	r3, r3
20000ac2:	b25b      	sxtb	r3, r3
20000ac4:	187a      	adds	r2, r7, r1
20000ac6:	7812      	ldrb	r2, [r2, #0]
20000ac8:	b252      	sxtb	r2, r2
20000aca:	4013      	ands	r3, r2
20000acc:	b25a      	sxtb	r2, r3
20000ace:	187b      	adds	r3, r7, r1
20000ad0:	701a      	strb	r2, [r3, #0]
    c &= ~B_SELECT;
20000ad2:	187b      	adds	r3, r7, r1
20000ad4:	0008      	movs	r0, r1
20000ad6:	187a      	adds	r2, r7, r1
20000ad8:	7812      	ldrb	r2, [r2, #0]
20000ada:	2104      	movs	r1, #4
20000adc:	438a      	bics	r2, r1
20000ade:	701a      	strb	r2, [r3, #0]
    *GPIO_E_ODR_LOW=c;
20000ae0:	4a03      	ldr	r2, [pc, #12]	; (20000af0 <graphic_ctrl_bit_clear+0x4c>)
20000ae2:	183b      	adds	r3, r7, r0
20000ae4:	781b      	ldrb	r3, [r3, #0]
20000ae6:	7013      	strb	r3, [r2, #0]

}
20000ae8:	46c0      	nop			; (mov r8, r8)
20000aea:	46bd      	mov	sp, r7
20000aec:	b004      	add	sp, #16
20000aee:	bd80      	pop	{r7, pc}
20000af0:	40021014 	andmi	r1, r2, r4, lsl r0

20000af4 <graphic_ctrl_bit_set>:

void graphic_ctrl_bit_set(uint8_t x){
20000af4:	b580      	push	{r7, lr}
20000af6:	b084      	sub	sp, #16
20000af8:	af00      	add	r7, sp, #0
20000afa:	0002      	movs	r2, r0
20000afc:	1dfb      	adds	r3, r7, #7
20000afe:	701a      	strb	r2, [r3, #0]
    //*GPIO_E_ODR_LOW |= (B_SELECT | x );
    //ascii_ctrl_bit_set(x);
    uint8_t c;
    c =*GPIO_E_ODR_LOW;
20000b00:	4a0c      	ldr	r2, [pc, #48]	; (20000b34 <graphic_ctrl_bit_set+0x40>)
20000b02:	200f      	movs	r0, #15
20000b04:	183b      	adds	r3, r7, r0
20000b06:	7812      	ldrb	r2, [r2, #0]
20000b08:	701a      	strb	r2, [r3, #0]
    c |= x; 
20000b0a:	183b      	adds	r3, r7, r0
20000b0c:	1839      	adds	r1, r7, r0
20000b0e:	1dfa      	adds	r2, r7, #7
20000b10:	7809      	ldrb	r1, [r1, #0]
20000b12:	7812      	ldrb	r2, [r2, #0]
20000b14:	430a      	orrs	r2, r1
20000b16:	701a      	strb	r2, [r3, #0]
    c &=(~B_SELECT);
20000b18:	183b      	adds	r3, r7, r0
20000b1a:	183a      	adds	r2, r7, r0
20000b1c:	7812      	ldrb	r2, [r2, #0]
20000b1e:	2104      	movs	r1, #4
20000b20:	438a      	bics	r2, r1
20000b22:	701a      	strb	r2, [r3, #0]
    *GPIO_E_ODR_LOW= c;
20000b24:	4a03      	ldr	r2, [pc, #12]	; (20000b34 <graphic_ctrl_bit_set+0x40>)
20000b26:	183b      	adds	r3, r7, r0
20000b28:	781b      	ldrb	r3, [r3, #0]
20000b2a:	7013      	strb	r3, [r2, #0]
}
20000b2c:	46c0      	nop			; (mov r8, r8)
20000b2e:	46bd      	mov	sp, r7
20000b30:	b004      	add	sp, #16
20000b32:	bd80      	pop	{r7, pc}
20000b34:	40021014 	andmi	r1, r2, r4, lsl r0

20000b38 <select_controller>:

void select_controller(uint8_t controller){
20000b38:	b580      	push	{r7, lr}
20000b3a:	b082      	sub	sp, #8
20000b3c:	af00      	add	r7, sp, #0
20000b3e:	0002      	movs	r2, r0
20000b40:	1dfb      	adds	r3, r7, #7
20000b42:	701a      	strb	r2, [r3, #0]
    switch(controller){
20000b44:	1dfb      	adds	r3, r7, #7
20000b46:	781b      	ldrb	r3, [r3, #0]
20000b48:	2b18      	cmp	r3, #24
20000b4a:	d01a      	beq.n	20000b82 <select_controller+0x4a>
20000b4c:	dc1d      	bgt.n	20000b8a <select_controller+0x52>
20000b4e:	2b10      	cmp	r3, #16
20000b50:	d010      	beq.n	20000b74 <select_controller+0x3c>
20000b52:	dc1a      	bgt.n	20000b8a <select_controller+0x52>
20000b54:	2b00      	cmp	r3, #0
20000b56:	d002      	beq.n	20000b5e <select_controller+0x26>
20000b58:	2b08      	cmp	r3, #8
20000b5a:	d004      	beq.n	20000b66 <select_controller+0x2e>
            
        case B_CS1 | B_CS2:
            graphic_ctrl_bit_set(B_CS1|B_CS2);
            break;
    }
}
20000b5c:	e015      	b.n	20000b8a <select_controller+0x52>
            graphic_ctrl_bit_clear(B_CS1|B_CS2);
20000b5e:	2018      	movs	r0, #24
20000b60:	f7ff ffa0 	bl	20000aa4 <graphic_ctrl_bit_clear>
            break;
20000b64:	e011      	b.n	20000b8a <select_controller+0x52>
            graphic_ctrl_bit_set(B_CS1);
20000b66:	2008      	movs	r0, #8
20000b68:	f7ff ffc4 	bl	20000af4 <graphic_ctrl_bit_set>
            graphic_ctrl_bit_clear(B_CS2);
20000b6c:	2010      	movs	r0, #16
20000b6e:	f7ff ff99 	bl	20000aa4 <graphic_ctrl_bit_clear>
            break;
20000b72:	e00a      	b.n	20000b8a <select_controller+0x52>
            graphic_ctrl_bit_clear(B_CS1);
20000b74:	2008      	movs	r0, #8
20000b76:	f7ff ff95 	bl	20000aa4 <graphic_ctrl_bit_clear>
            graphic_ctrl_bit_set(B_CS2);
20000b7a:	2010      	movs	r0, #16
20000b7c:	f7ff ffba 	bl	20000af4 <graphic_ctrl_bit_set>
            break;
20000b80:	e003      	b.n	20000b8a <select_controller+0x52>
            graphic_ctrl_bit_set(B_CS1|B_CS2);
20000b82:	2018      	movs	r0, #24
20000b84:	f7ff ffb6 	bl	20000af4 <graphic_ctrl_bit_set>
            break;
20000b88:	46c0      	nop			; (mov r8, r8)
}
20000b8a:	46c0      	nop			; (mov r8, r8)
20000b8c:	46bd      	mov	sp, r7
20000b8e:	b002      	add	sp, #8
20000b90:	bd80      	pop	{r7, pc}

20000b92 <graphic_wait_ready>:

void graphic_wait_ready(void){
20000b92:	b580      	push	{r7, lr}
20000b94:	af00      	add	r7, sp, #0
    graphic_ctrl_bit_clear(B_E);
20000b96:	2040      	movs	r0, #64	; 0x40
20000b98:	f7ff ff84 	bl	20000aa4 <graphic_ctrl_bit_clear>
    *GPIO_E_MODER = 0x00005555;
20000b9c:	4b0a      	ldr	r3, [pc, #40]	; (20000bc8 <graphic_wait_ready+0x36>)
20000b9e:	4a0b      	ldr	r2, [pc, #44]	; (20000bcc <graphic_wait_ready+0x3a>)
20000ba0:	601a      	str	r2, [r3, #0]
    graphic_ctrl_bit_clear(B_RS);
20000ba2:	2001      	movs	r0, #1
20000ba4:	f7ff ff7e 	bl	20000aa4 <graphic_ctrl_bit_clear>
    graphic_ctrl_bit_set(B_RW);
20000ba8:	2002      	movs	r0, #2
20000baa:	f7ff ffa3 	bl	20000af4 <graphic_ctrl_bit_set>
    delay_500ns();
20000bae:	f000 fc2d 	bl	2000140c <delay_500ns>
    while(1){
        graphic_ctrl_bit_set(B_E);
20000bb2:	2040      	movs	r0, #64	; 0x40
20000bb4:	f7ff ff9e 	bl	20000af4 <graphic_ctrl_bit_set>
        delay_500ns();
20000bb8:	f000 fc28 	bl	2000140c <delay_500ns>
        graphic_ctrl_bit_clear(B_E);
20000bbc:	2040      	movs	r0, #64	; 0x40
20000bbe:	f7ff ff71 	bl	20000aa4 <graphic_ctrl_bit_clear>
        delay_500ns();
20000bc2:	f000 fc23 	bl	2000140c <delay_500ns>
        graphic_ctrl_bit_set(B_E);
20000bc6:	e7f4      	b.n	20000bb2 <graphic_wait_ready+0x20>
20000bc8:	40021000 	andmi	r1, r2, r0
20000bcc:	00005555 	andeq	r5, r0, r5, asr r5

20000bd0 <graphic_read>:
    //graphic_ctrl_bit_set(B_E); // Ej på föreläsning
    *GPIO_E_MODER = 0x55555555;
    
}

unsigned char graphic_read(unsigned char controller){
20000bd0:	b580      	push	{r7, lr}
20000bd2:	b084      	sub	sp, #16
20000bd4:	af00      	add	r7, sp, #0
20000bd6:	0002      	movs	r2, r0
20000bd8:	1dfb      	adds	r3, r7, #7
20000bda:	701a      	strb	r2, [r3, #0]
    graphic_ctrl_bit_clear(B_E);
20000bdc:	2040      	movs	r0, #64	; 0x40
20000bde:	f7ff ff61 	bl	20000aa4 <graphic_ctrl_bit_clear>
    *GPIO_E_MODER = 0x00005555;
20000be2:	4b1a      	ldr	r3, [pc, #104]	; (20000c4c <graphic_read+0x7c>)
20000be4:	4a1a      	ldr	r2, [pc, #104]	; (20000c50 <graphic_read+0x80>)
20000be6:	601a      	str	r2, [r3, #0]
    graphic_ctrl_bit_set(B_RS|B_RW);
20000be8:	2003      	movs	r0, #3
20000bea:	f7ff ff83 	bl	20000af4 <graphic_ctrl_bit_set>
    select_controller(controller);              //EJ i Boken
20000bee:	1dfb      	adds	r3, r7, #7
20000bf0:	781b      	ldrb	r3, [r3, #0]
20000bf2:	0018      	movs	r0, r3
20000bf4:	f7ff ffa0 	bl	20000b38 <select_controller>
    delay_500ns();
20000bf8:	f000 fc08 	bl	2000140c <delay_500ns>
    graphic_ctrl_bit_set(B_E);
20000bfc:	2040      	movs	r0, #64	; 0x40
20000bfe:	f7ff ff79 	bl	20000af4 <graphic_ctrl_bit_set>
    delay_500ns();
20000c02:	f000 fc03 	bl	2000140c <delay_500ns>
    unsigned char retval = *GPIO_E_IDR_HIGH;
20000c06:	4a13      	ldr	r2, [pc, #76]	; (20000c54 <graphic_read+0x84>)
20000c08:	230f      	movs	r3, #15
20000c0a:	18fb      	adds	r3, r7, r3
20000c0c:	7812      	ldrb	r2, [r2, #0]
20000c0e:	701a      	strb	r2, [r3, #0]
    graphic_ctrl_bit_clear(B_E);
20000c10:	2040      	movs	r0, #64	; 0x40
20000c12:	f7ff ff47 	bl	20000aa4 <graphic_ctrl_bit_clear>
    *GPIO_E_MODER = 0x55555555;
20000c16:	4b0d      	ldr	r3, [pc, #52]	; (20000c4c <graphic_read+0x7c>)
20000c18:	4a0f      	ldr	r2, [pc, #60]	; (20000c58 <graphic_read+0x88>)
20000c1a:	601a      	str	r2, [r3, #0]
    
    if (controller & B_CS1){
20000c1c:	1dfb      	adds	r3, r7, #7
20000c1e:	781b      	ldrb	r3, [r3, #0]
20000c20:	2208      	movs	r2, #8
20000c22:	4013      	ands	r3, r2
20000c24:	d002      	beq.n	20000c2c <graphic_read+0x5c>
        select_controller(B_CS1);
20000c26:	2008      	movs	r0, #8
20000c28:	f7ff ff86 	bl	20000b38 <select_controller>
        //graphic_wait_ready();
    }
    if (controller & B_CS2){
20000c2c:	1dfb      	adds	r3, r7, #7
20000c2e:	781b      	ldrb	r3, [r3, #0]
20000c30:	2210      	movs	r2, #16
20000c32:	4013      	ands	r3, r2
20000c34:	d002      	beq.n	20000c3c <graphic_read+0x6c>
        select_controller(B_CS2);
20000c36:	2010      	movs	r0, #16
20000c38:	f7ff ff7e 	bl	20000b38 <select_controller>
        //graphic_wait_ready();
    }
    return retval;
20000c3c:	230f      	movs	r3, #15
20000c3e:	18fb      	adds	r3, r7, r3
20000c40:	781b      	ldrb	r3, [r3, #0]
}
20000c42:	0018      	movs	r0, r3
20000c44:	46bd      	mov	sp, r7
20000c46:	b004      	add	sp, #16
20000c48:	bd80      	pop	{r7, pc}
20000c4a:	46c0      	nop			; (mov r8, r8)
20000c4c:	40021000 	andmi	r1, r2, r0
20000c50:	00005555 	andeq	r5, r0, r5, asr r5
20000c54:	40021011 	andmi	r1, r2, r1, lsl r0
20000c58:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000c5c <graphic_read_data>:

uint8_t graphic_read_data(uint8_t controller){
20000c5c:	b580      	push	{r7, lr}
20000c5e:	b082      	sub	sp, #8
20000c60:	af00      	add	r7, sp, #0
20000c62:	0002      	movs	r2, r0
20000c64:	1dfb      	adds	r3, r7, #7
20000c66:	701a      	strb	r2, [r3, #0]
    (void) graphic_read(controller);
20000c68:	1dfb      	adds	r3, r7, #7
20000c6a:	781b      	ldrb	r3, [r3, #0]
20000c6c:	0018      	movs	r0, r3
20000c6e:	f7ff ffaf 	bl	20000bd0 <graphic_read>
    return graphic_read(controller);
20000c72:	1dfb      	adds	r3, r7, #7
20000c74:	781b      	ldrb	r3, [r3, #0]
20000c76:	0018      	movs	r0, r3
20000c78:	f7ff ffaa 	bl	20000bd0 <graphic_read>
20000c7c:	0003      	movs	r3, r0
}
20000c7e:	0018      	movs	r0, r3
20000c80:	46bd      	mov	sp, r7
20000c82:	b002      	add	sp, #8
20000c84:	bd80      	pop	{r7, pc}

20000c86 <graphic_write>:

void graphic_write(uint8_t value, uint8_t controller){
20000c86:	b580      	push	{r7, lr}
20000c88:	b082      	sub	sp, #8
20000c8a:	af00      	add	r7, sp, #0
20000c8c:	0002      	movs	r2, r0
20000c8e:	1dfb      	adds	r3, r7, #7
20000c90:	701a      	strb	r2, [r3, #0]
20000c92:	1dbb      	adds	r3, r7, #6
20000c94:	1c0a      	adds	r2, r1, #0
20000c96:	701a      	strb	r2, [r3, #0]
    *GPIO_E_ODR_HIGH = value;
20000c98:	4a17      	ldr	r2, [pc, #92]	; (20000cf8 <graphic_write+0x72>)
20000c9a:	1dfb      	adds	r3, r7, #7
20000c9c:	781b      	ldrb	r3, [r3, #0]
20000c9e:	7013      	strb	r3, [r2, #0]
    select_controller(controller);
20000ca0:	1dbb      	adds	r3, r7, #6
20000ca2:	781b      	ldrb	r3, [r3, #0]
20000ca4:	0018      	movs	r0, r3
20000ca6:	f7ff ff47 	bl	20000b38 <select_controller>
    delay_500ns();
20000caa:	f000 fbaf 	bl	2000140c <delay_500ns>
    graphic_ctrl_bit_set(B_E);
20000cae:	2040      	movs	r0, #64	; 0x40
20000cb0:	f7ff ff20 	bl	20000af4 <graphic_ctrl_bit_set>
    delay_500ns();
20000cb4:	f000 fbaa 	bl	2000140c <delay_500ns>
    graphic_ctrl_bit_clear(B_E);
20000cb8:	2040      	movs	r0, #64	; 0x40
20000cba:	f7ff fef3 	bl	20000aa4 <graphic_ctrl_bit_clear>
    
    if(controller & B_CS1){
20000cbe:	1dbb      	adds	r3, r7, #6
20000cc0:	781b      	ldrb	r3, [r3, #0]
20000cc2:	2208      	movs	r2, #8
20000cc4:	4013      	ands	r3, r2
20000cc6:	d002      	beq.n	20000cce <graphic_write+0x48>
        select_controller(B_CS1);
20000cc8:	2008      	movs	r0, #8
20000cca:	f7ff ff35 	bl	20000b38 <select_controller>
        //graphic_wait_ready();
    }
    if(controller & B_CS2){
20000cce:	1dbb      	adds	r3, r7, #6
20000cd0:	781b      	ldrb	r3, [r3, #0]
20000cd2:	2210      	movs	r2, #16
20000cd4:	4013      	ands	r3, r2
20000cd6:	d002      	beq.n	20000cde <graphic_write+0x58>
        select_controller(B_CS2);
20000cd8:	2010      	movs	r0, #16
20000cda:	f7ff ff2d 	bl	20000b38 <select_controller>
        //graphic_wait_ready();
    }
    
    /* INTE på föreläsning*/
    *GPIO_E_ODR_HIGH = 0;
20000cde:	4b06      	ldr	r3, [pc, #24]	; (20000cf8 <graphic_write+0x72>)
20000ce0:	2200      	movs	r2, #0
20000ce2:	701a      	strb	r2, [r3, #0]
    graphic_ctrl_bit_set(B_E);
20000ce4:	2040      	movs	r0, #64	; 0x40
20000ce6:	f7ff ff05 	bl	20000af4 <graphic_ctrl_bit_set>
    select_controller(0);
20000cea:	2000      	movs	r0, #0
20000cec:	f7ff ff24 	bl	20000b38 <select_controller>
      
}
20000cf0:	46c0      	nop			; (mov r8, r8)
20000cf2:	46bd      	mov	sp, r7
20000cf4:	b002      	add	sp, #8
20000cf6:	bd80      	pop	{r7, pc}
20000cf8:	40021015 	andmi	r1, r2, r5, lsl r0

20000cfc <graphic_write_command>:

void graphic_write_command(uint8_t cmd, uint8_t controller){
20000cfc:	b580      	push	{r7, lr}
20000cfe:	b082      	sub	sp, #8
20000d00:	af00      	add	r7, sp, #0
20000d02:	0002      	movs	r2, r0
20000d04:	1dfb      	adds	r3, r7, #7
20000d06:	701a      	strb	r2, [r3, #0]
20000d08:	1dbb      	adds	r3, r7, #6
20000d0a:	1c0a      	adds	r2, r1, #0
20000d0c:	701a      	strb	r2, [r3, #0]
    graphic_ctrl_bit_clear(B_E);
20000d0e:	2040      	movs	r0, #64	; 0x40
20000d10:	f7ff fec8 	bl	20000aa4 <graphic_ctrl_bit_clear>
    select_controller(controller);
20000d14:	1dbb      	adds	r3, r7, #6
20000d16:	781b      	ldrb	r3, [r3, #0]
20000d18:	0018      	movs	r0, r3
20000d1a:	f7ff ff0d 	bl	20000b38 <select_controller>
    graphic_ctrl_bit_clear(B_RS);
20000d1e:	2001      	movs	r0, #1
20000d20:	f7ff fec0 	bl	20000aa4 <graphic_ctrl_bit_clear>
    graphic_ctrl_bit_clear(B_RW);
20000d24:	2002      	movs	r0, #2
20000d26:	f7ff febd 	bl	20000aa4 <graphic_ctrl_bit_clear>
    graphic_write(cmd, controller);
20000d2a:	1dbb      	adds	r3, r7, #6
20000d2c:	781a      	ldrb	r2, [r3, #0]
20000d2e:	1dfb      	adds	r3, r7, #7
20000d30:	781b      	ldrb	r3, [r3, #0]
20000d32:	0011      	movs	r1, r2
20000d34:	0018      	movs	r0, r3
20000d36:	f7ff ffa6 	bl	20000c86 <graphic_write>
}
20000d3a:	46c0      	nop			; (mov r8, r8)
20000d3c:	46bd      	mov	sp, r7
20000d3e:	b002      	add	sp, #8
20000d40:	bd80      	pop	{r7, pc}

20000d42 <graphic_write_data>:

void graphic_write_data(uint8_t data, uint8_t controller){
20000d42:	b580      	push	{r7, lr}
20000d44:	b082      	sub	sp, #8
20000d46:	af00      	add	r7, sp, #0
20000d48:	0002      	movs	r2, r0
20000d4a:	1dfb      	adds	r3, r7, #7
20000d4c:	701a      	strb	r2, [r3, #0]
20000d4e:	1dbb      	adds	r3, r7, #6
20000d50:	1c0a      	adds	r2, r1, #0
20000d52:	701a      	strb	r2, [r3, #0]
    graphic_ctrl_bit_clear(B_E);
20000d54:	2040      	movs	r0, #64	; 0x40
20000d56:	f7ff fea5 	bl	20000aa4 <graphic_ctrl_bit_clear>
    select_controller(controller);
20000d5a:	1dbb      	adds	r3, r7, #6
20000d5c:	781b      	ldrb	r3, [r3, #0]
20000d5e:	0018      	movs	r0, r3
20000d60:	f7ff feea 	bl	20000b38 <select_controller>
    graphic_ctrl_bit_set(B_RS);
20000d64:	2001      	movs	r0, #1
20000d66:	f7ff fec5 	bl	20000af4 <graphic_ctrl_bit_set>
    graphic_ctrl_bit_clear(B_RW);
20000d6a:	2002      	movs	r0, #2
20000d6c:	f7ff fe9a 	bl	20000aa4 <graphic_ctrl_bit_clear>
    graphic_write(data, controller);
20000d70:	1dbb      	adds	r3, r7, #6
20000d72:	781a      	ldrb	r2, [r3, #0]
20000d74:	1dfb      	adds	r3, r7, #7
20000d76:	781b      	ldrb	r3, [r3, #0]
20000d78:	0011      	movs	r1, r2
20000d7a:	0018      	movs	r0, r3
20000d7c:	f7ff ff83 	bl	20000c86 <graphic_write>
}
20000d80:	46c0      	nop			; (mov r8, r8)
20000d82:	46bd      	mov	sp, r7
20000d84:	b002      	add	sp, #8
20000d86:	bd80      	pop	{r7, pc}

20000d88 <graphic_clear_screen>:

void graphic_clear_screen(void){
20000d88:	b580      	push	{r7, lr}
20000d8a:	b082      	sub	sp, #8
20000d8c:	af00      	add	r7, sp, #0
    for (int page = 0; page < 8; page++){
20000d8e:	2300      	movs	r3, #0
20000d90:	607b      	str	r3, [r7, #4]
20000d92:	e01e      	b.n	20000dd2 <graphic_clear_screen+0x4a>
        graphic_write_command(LCD_SET_PAGE | page, B_CS1|B_CS2);
20000d94:	687b      	ldr	r3, [r7, #4]
20000d96:	b25b      	sxtb	r3, r3
20000d98:	2248      	movs	r2, #72	; 0x48
20000d9a:	4252      	negs	r2, r2
20000d9c:	4313      	orrs	r3, r2
20000d9e:	b25b      	sxtb	r3, r3
20000da0:	b2db      	uxtb	r3, r3
20000da2:	2118      	movs	r1, #24
20000da4:	0018      	movs	r0, r3
20000da6:	f7ff ffa9 	bl	20000cfc <graphic_write_command>
        graphic_write_command(LCD_SET_ADD | 0, B_CS1|B_CS2);
20000daa:	2118      	movs	r1, #24
20000dac:	2040      	movs	r0, #64	; 0x40
20000dae:	f7ff ffa5 	bl	20000cfc <graphic_write_command>
        for (int add = 0; add < 63; add++){
20000db2:	2300      	movs	r3, #0
20000db4:	603b      	str	r3, [r7, #0]
20000db6:	e006      	b.n	20000dc6 <graphic_clear_screen+0x3e>
            graphic_write_data(0, B_CS1|B_CS2);
20000db8:	2118      	movs	r1, #24
20000dba:	2000      	movs	r0, #0
20000dbc:	f7ff ffc1 	bl	20000d42 <graphic_write_data>
        for (int add = 0; add < 63; add++){
20000dc0:	683b      	ldr	r3, [r7, #0]
20000dc2:	3301      	adds	r3, #1
20000dc4:	603b      	str	r3, [r7, #0]
20000dc6:	683b      	ldr	r3, [r7, #0]
20000dc8:	2b3e      	cmp	r3, #62	; 0x3e
20000dca:	ddf5      	ble.n	20000db8 <graphic_clear_screen+0x30>
    for (int page = 0; page < 8; page++){
20000dcc:	687b      	ldr	r3, [r7, #4]
20000dce:	3301      	adds	r3, #1
20000dd0:	607b      	str	r3, [r7, #4]
20000dd2:	687b      	ldr	r3, [r7, #4]
20000dd4:	2b07      	cmp	r3, #7
20000dd6:	dddd      	ble.n	20000d94 <graphic_clear_screen+0xc>
        }
    }
}
20000dd8:	46c0      	nop			; (mov r8, r8)
20000dda:	46c0      	nop			; (mov r8, r8)
20000ddc:	46bd      	mov	sp, r7
20000dde:	b002      	add	sp, #8
20000de0:	bd80      	pop	{r7, pc}

20000de2 <clear_backbuffer>:

void clear_backbuffer(){
20000de2:	b580      	push	{r7, lr}
20000de4:	b082      	sub	sp, #8
20000de6:	af00      	add	r7, sp, #0
    int i;
    for (i = 0; i < 1024; i++)
20000de8:	2300      	movs	r3, #0
20000dea:	607b      	str	r3, [r7, #4]
20000dec:	e007      	b.n	20000dfe <clear_backbuffer+0x1c>
        backBuffer[i] = 0;
20000dee:	4b09      	ldr	r3, [pc, #36]	; (20000e14 <clear_backbuffer+0x32>)
20000df0:	687a      	ldr	r2, [r7, #4]
20000df2:	0092      	lsls	r2, r2, #2
20000df4:	2100      	movs	r1, #0
20000df6:	50d1      	str	r1, [r2, r3]
    for (i = 0; i < 1024; i++)
20000df8:	687b      	ldr	r3, [r7, #4]
20000dfa:	3301      	adds	r3, #1
20000dfc:	607b      	str	r3, [r7, #4]
20000dfe:	687a      	ldr	r2, [r7, #4]
20000e00:	2380      	movs	r3, #128	; 0x80
20000e02:	00db      	lsls	r3, r3, #3
20000e04:	429a      	cmp	r2, r3
20000e06:	dbf2      	blt.n	20000dee <clear_backbuffer+0xc>
}
20000e08:	46c0      	nop			; (mov r8, r8)
20000e0a:	46c0      	nop			; (mov r8, r8)
20000e0c:	46bd      	mov	sp, r7
20000e0e:	b002      	add	sp, #8
20000e10:	bd80      	pop	{r7, pc}
20000e12:	46c0      	nop			; (mov r8, r8)
20000e14:	20002748 	andcs	r2, r0, r8, asr #14

20000e18 <pixel>:

void pixel(unsigned x, unsigned y){
20000e18:	b580      	push	{r7, lr}
20000e1a:	b084      	sub	sp, #16
20000e1c:	af00      	add	r7, sp, #0
20000e1e:	6078      	str	r0, [r7, #4]
20000e20:	6039      	str	r1, [r7, #0]
    uint8_t mask;
    int index = 0;
20000e22:	2300      	movs	r3, #0
20000e24:	60fb      	str	r3, [r7, #12]
    if ((x >128)||(x <1)||(y >64)||(y <1)) return;
20000e26:	687b      	ldr	r3, [r7, #4]
20000e28:	2b80      	cmp	r3, #128	; 0x80
20000e2a:	d831      	bhi.n	20000e90 <pixel+0x78>
20000e2c:	687b      	ldr	r3, [r7, #4]
20000e2e:	2b00      	cmp	r3, #0
20000e30:	d02e      	beq.n	20000e90 <pixel+0x78>
20000e32:	683b      	ldr	r3, [r7, #0]
20000e34:	2b40      	cmp	r3, #64	; 0x40
20000e36:	d82b      	bhi.n	20000e90 <pixel+0x78>
20000e38:	683b      	ldr	r3, [r7, #0]
20000e3a:	2b00      	cmp	r3, #0
20000e3c:	d028      	beq.n	20000e90 <pixel+0x78>

    mask = 1 << ((y-1)%8);
20000e3e:	683b      	ldr	r3, [r7, #0]
20000e40:	3b01      	subs	r3, #1
20000e42:	2207      	movs	r2, #7
20000e44:	4013      	ands	r3, r2
20000e46:	2201      	movs	r2, #1
20000e48:	409a      	lsls	r2, r3
20000e4a:	230b      	movs	r3, #11
20000e4c:	18fb      	adds	r3, r7, r3
20000e4e:	701a      	strb	r2, [r3, #0]
    
    if(x > 64){
20000e50:	687b      	ldr	r3, [r7, #4]
20000e52:	2b40      	cmp	r3, #64	; 0x40
20000e54:	d905      	bls.n	20000e62 <pixel+0x4a>
        x -= 65;
20000e56:	687b      	ldr	r3, [r7, #4]
20000e58:	3b41      	subs	r3, #65	; 0x41
20000e5a:	607b      	str	r3, [r7, #4]
        index = 512;
20000e5c:	2380      	movs	r3, #128	; 0x80
20000e5e:	009b      	lsls	r3, r3, #2
20000e60:	60fb      	str	r3, [r7, #12]
    }
    
    index += x + ((y-1)/8)*64;
20000e62:	683b      	ldr	r3, [r7, #0]
20000e64:	3b01      	subs	r3, #1
20000e66:	08db      	lsrs	r3, r3, #3
20000e68:	019a      	lsls	r2, r3, #6
20000e6a:	687b      	ldr	r3, [r7, #4]
20000e6c:	18d2      	adds	r2, r2, r3
20000e6e:	68fb      	ldr	r3, [r7, #12]
20000e70:	18d3      	adds	r3, r2, r3
20000e72:	60fb      	str	r3, [r7, #12]
    
    backBuffer[index] |= mask;
20000e74:	4b08      	ldr	r3, [pc, #32]	; (20000e98 <pixel+0x80>)
20000e76:	68fa      	ldr	r2, [r7, #12]
20000e78:	0092      	lsls	r2, r2, #2
20000e7a:	58d2      	ldr	r2, [r2, r3]
20000e7c:	230b      	movs	r3, #11
20000e7e:	18fb      	adds	r3, r7, r3
20000e80:	781b      	ldrb	r3, [r3, #0]
20000e82:	431a      	orrs	r2, r3
20000e84:	0011      	movs	r1, r2
20000e86:	4b04      	ldr	r3, [pc, #16]	; (20000e98 <pixel+0x80>)
20000e88:	68fa      	ldr	r2, [r7, #12]
20000e8a:	0092      	lsls	r2, r2, #2
20000e8c:	50d1      	str	r1, [r2, r3]
20000e8e:	e000      	b.n	20000e92 <pixel+0x7a>
    if ((x >128)||(x <1)||(y >64)||(y <1)) return;
20000e90:	46c0      	nop			; (mov r8, r8)
}
20000e92:	46bd      	mov	sp, r7
20000e94:	b004      	add	sp, #16
20000e96:	bd80      	pop	{r7, pc}
20000e98:	20002748 	andcs	r2, r0, r8, asr #14

20000e9c <graphic_draw_screen>:

void graphic_draw_screen(void){
20000e9c:	b580      	push	{r7, lr}
20000e9e:	b084      	sub	sp, #16
20000ea0:	af00      	add	r7, sp, #0
    uint8_t i,  j, controller, c;
    unsigned int k = 0;
20000ea2:	2300      	movs	r3, #0
20000ea4:	60bb      	str	r3, [r7, #8]
    
    for (c = 0; c < 2; c++){
20000ea6:	230d      	movs	r3, #13
20000ea8:	18fb      	adds	r3, r7, r3
20000eaa:	2200      	movs	r2, #0
20000eac:	701a      	strb	r2, [r3, #0]
20000eae:	e050      	b.n	20000f52 <graphic_draw_screen+0xb6>
        controller = (c==0) ? B_CS1 : B_CS2;
20000eb0:	230d      	movs	r3, #13
20000eb2:	18fb      	adds	r3, r7, r3
20000eb4:	781b      	ldrb	r3, [r3, #0]
20000eb6:	2b00      	cmp	r3, #0
20000eb8:	d101      	bne.n	20000ebe <graphic_draw_screen+0x22>
20000eba:	2208      	movs	r2, #8
20000ebc:	e000      	b.n	20000ec0 <graphic_draw_screen+0x24>
20000ebe:	2210      	movs	r2, #16
20000ec0:	1dfb      	adds	r3, r7, #7
20000ec2:	701a      	strb	r2, [r3, #0]
        for (j = 0; j < 8; j++){
20000ec4:	230e      	movs	r3, #14
20000ec6:	18fb      	adds	r3, r7, r3
20000ec8:	2200      	movs	r2, #0
20000eca:	701a      	strb	r2, [r3, #0]
20000ecc:	e036      	b.n	20000f3c <graphic_draw_screen+0xa0>
            graphic_write_command(LCD_SET_PAGE | j, controller);
20000ece:	230e      	movs	r3, #14
20000ed0:	18fb      	adds	r3, r7, r3
20000ed2:	781b      	ldrb	r3, [r3, #0]
20000ed4:	2248      	movs	r2, #72	; 0x48
20000ed6:	4252      	negs	r2, r2
20000ed8:	4313      	orrs	r3, r2
20000eda:	b2da      	uxtb	r2, r3
20000edc:	1dfb      	adds	r3, r7, #7
20000ede:	781b      	ldrb	r3, [r3, #0]
20000ee0:	0019      	movs	r1, r3
20000ee2:	0010      	movs	r0, r2
20000ee4:	f7ff ff0a 	bl	20000cfc <graphic_write_command>
            graphic_write_command(LCD_SET_ADD | 0, controller);
20000ee8:	1dfb      	adds	r3, r7, #7
20000eea:	781b      	ldrb	r3, [r3, #0]
20000eec:	0019      	movs	r1, r3
20000eee:	2040      	movs	r0, #64	; 0x40
20000ef0:	f7ff ff04 	bl	20000cfc <graphic_write_command>
            for(i = 0; i <= 63; i++, k++){
20000ef4:	230f      	movs	r3, #15
20000ef6:	18fb      	adds	r3, r7, r3
20000ef8:	2200      	movs	r2, #0
20000efa:	701a      	strb	r2, [r3, #0]
20000efc:	e013      	b.n	20000f26 <graphic_draw_screen+0x8a>
                graphic_write_data(backBuffer[k],controller);  
20000efe:	4b1a      	ldr	r3, [pc, #104]	; (20000f68 <graphic_draw_screen+0xcc>)
20000f00:	68ba      	ldr	r2, [r7, #8]
20000f02:	0092      	lsls	r2, r2, #2
20000f04:	58d3      	ldr	r3, [r2, r3]
20000f06:	b2da      	uxtb	r2, r3
20000f08:	1dfb      	adds	r3, r7, #7
20000f0a:	781b      	ldrb	r3, [r3, #0]
20000f0c:	0019      	movs	r1, r3
20000f0e:	0010      	movs	r0, r2
20000f10:	f7ff ff17 	bl	20000d42 <graphic_write_data>
            for(i = 0; i <= 63; i++, k++){
20000f14:	210f      	movs	r1, #15
20000f16:	187b      	adds	r3, r7, r1
20000f18:	781a      	ldrb	r2, [r3, #0]
20000f1a:	187b      	adds	r3, r7, r1
20000f1c:	3201      	adds	r2, #1
20000f1e:	701a      	strb	r2, [r3, #0]
20000f20:	68bb      	ldr	r3, [r7, #8]
20000f22:	3301      	adds	r3, #1
20000f24:	60bb      	str	r3, [r7, #8]
20000f26:	230f      	movs	r3, #15
20000f28:	18fb      	adds	r3, r7, r3
20000f2a:	781b      	ldrb	r3, [r3, #0]
20000f2c:	2b3f      	cmp	r3, #63	; 0x3f
20000f2e:	d9e6      	bls.n	20000efe <graphic_draw_screen+0x62>
        for (j = 0; j < 8; j++){
20000f30:	210e      	movs	r1, #14
20000f32:	187b      	adds	r3, r7, r1
20000f34:	781a      	ldrb	r2, [r3, #0]
20000f36:	187b      	adds	r3, r7, r1
20000f38:	3201      	adds	r2, #1
20000f3a:	701a      	strb	r2, [r3, #0]
20000f3c:	230e      	movs	r3, #14
20000f3e:	18fb      	adds	r3, r7, r3
20000f40:	781b      	ldrb	r3, [r3, #0]
20000f42:	2b07      	cmp	r3, #7
20000f44:	d9c3      	bls.n	20000ece <graphic_draw_screen+0x32>
    for (c = 0; c < 2; c++){
20000f46:	210d      	movs	r1, #13
20000f48:	187b      	adds	r3, r7, r1
20000f4a:	781a      	ldrb	r2, [r3, #0]
20000f4c:	187b      	adds	r3, r7, r1
20000f4e:	3201      	adds	r2, #1
20000f50:	701a      	strb	r2, [r3, #0]
20000f52:	230d      	movs	r3, #13
20000f54:	18fb      	adds	r3, r7, r3
20000f56:	781b      	ldrb	r3, [r3, #0]
20000f58:	2b01      	cmp	r3, #1
20000f5a:	d9a9      	bls.n	20000eb0 <graphic_draw_screen+0x14>
            }
        }
    }
}
20000f5c:	46c0      	nop			; (mov r8, r8)
20000f5e:	46c0      	nop			; (mov r8, r8)
20000f60:	46bd      	mov	sp, r7
20000f62:	b004      	add	sp, #16
20000f64:	bd80      	pop	{r7, pc}
20000f66:	46c0      	nop			; (mov r8, r8)
20000f68:	20002748 	andcs	r2, r0, r8, asr #14

20000f6c <init_queue>:
POBJECT objArray[MAX];
int front = 0;
int rear = -1;
int itemCount = 0;

void init_queue(){
20000f6c:	b580      	push	{r7, lr}
20000f6e:	b082      	sub	sp, #8
20000f70:	af00      	add	r7, sp, #0
    for(int i = 0; i < MAX; i++)
20000f72:	2300      	movs	r3, #0
20000f74:	607b      	str	r3, [r7, #4]
20000f76:	e007      	b.n	20000f88 <init_queue+0x1c>
        objArray[i] = NULL;
20000f78:	4b07      	ldr	r3, [pc, #28]	; (20000f98 <init_queue+0x2c>)
20000f7a:	687a      	ldr	r2, [r7, #4]
20000f7c:	0092      	lsls	r2, r2, #2
20000f7e:	2100      	movs	r1, #0
20000f80:	50d1      	str	r1, [r2, r3]
    for(int i = 0; i < MAX; i++)
20000f82:	687b      	ldr	r3, [r7, #4]
20000f84:	3301      	adds	r3, #1
20000f86:	607b      	str	r3, [r7, #4]
20000f88:	687b      	ldr	r3, [r7, #4]
20000f8a:	2b63      	cmp	r3, #99	; 0x63
20000f8c:	ddf4      	ble.n	20000f78 <init_queue+0xc>
}
20000f8e:	46c0      	nop			; (mov r8, r8)
20000f90:	46c0      	nop			; (mov r8, r8)
20000f92:	46bd      	mov	sp, r7
20000f94:	b002      	add	sp, #8
20000f96:	bd80      	pop	{r7, pc}
20000f98:	20003754 	andcs	r3, r0, r4, asr r7

20000f9c <peek>:

/*returns the head*/
POBJECT peek() {
20000f9c:	b580      	push	{r7, lr}
20000f9e:	af00      	add	r7, sp, #0
   return objArray[front];
20000fa0:	4b03      	ldr	r3, [pc, #12]	; (20000fb0 <peek+0x14>)
20000fa2:	681a      	ldr	r2, [r3, #0]
20000fa4:	4b03      	ldr	r3, [pc, #12]	; (20000fb4 <peek+0x18>)
20000fa6:	0092      	lsls	r2, r2, #2
20000fa8:	58d3      	ldr	r3, [r2, r3]
}
20000faa:	0018      	movs	r0, r3
20000fac:	46bd      	mov	sp, r7
20000fae:	bd80      	pop	{r7, pc}
20000fb0:	20003748 	andcs	r3, r0, r8, asr #14
20000fb4:	20003754 	andcs	r3, r0, r4, asr r7

20000fb8 <isEmpty>:

/*returns true if itemCount == 0*/
bool isEmpty() {
20000fb8:	b580      	push	{r7, lr}
20000fba:	af00      	add	r7, sp, #0
   return itemCount == 0;
20000fbc:	4b03      	ldr	r3, [pc, #12]	; (20000fcc <isEmpty+0x14>)
20000fbe:	681b      	ldr	r3, [r3, #0]
20000fc0:	425a      	negs	r2, r3
20000fc2:	4153      	adcs	r3, r2
20000fc4:	b2db      	uxtb	r3, r3
}
20000fc6:	0018      	movs	r0, r3
20000fc8:	46bd      	mov	sp, r7
20000fca:	bd80      	pop	{r7, pc}
20000fcc:	2000374c 	andcs	r3, r0, ip, asr #14

20000fd0 <isFull>:

/*returns true if itemCount == MAX (512)*/
bool isFull() {
20000fd0:	b580      	push	{r7, lr}
20000fd2:	af00      	add	r7, sp, #0
   return itemCount == MAX;
20000fd4:	4b04      	ldr	r3, [pc, #16]	; (20000fe8 <isFull+0x18>)
20000fd6:	681b      	ldr	r3, [r3, #0]
20000fd8:	3b64      	subs	r3, #100	; 0x64
20000fda:	425a      	negs	r2, r3
20000fdc:	4153      	adcs	r3, r2
20000fde:	b2db      	uxtb	r3, r3
}
20000fe0:	0018      	movs	r0, r3
20000fe2:	46bd      	mov	sp, r7
20000fe4:	bd80      	pop	{r7, pc}
20000fe6:	46c0      	nop			; (mov r8, r8)
20000fe8:	2000374c 	andcs	r3, r0, ip, asr #14

20000fec <size>:

/*Returns itemCount*/
int size() {
20000fec:	b580      	push	{r7, lr}
20000fee:	af00      	add	r7, sp, #0
   return itemCount;
20000ff0:	4b02      	ldr	r3, [pc, #8]	; (20000ffc <size+0x10>)
20000ff2:	681b      	ldr	r3, [r3, #0]
}  
20000ff4:	0018      	movs	r0, r3
20000ff6:	46bd      	mov	sp, r7
20000ff8:	bd80      	pop	{r7, pc}
20000ffa:	46c0      	nop			; (mov r8, r8)
20000ffc:	2000374c 	andcs	r3, r0, ip, asr #14

20001000 <insert>:

/*Adds a node in the end of the queue*/
void insert(POBJECT data) {
20001000:	b580      	push	{r7, lr}
20001002:	b082      	sub	sp, #8
20001004:	af00      	add	r7, sp, #0
20001006:	6078      	str	r0, [r7, #4]

   if(!isFull()) {
20001008:	f7ff ffe2 	bl	20000fd0 <isFull>
2000100c:	0003      	movs	r3, r0
2000100e:	001a      	movs	r2, r3
20001010:	2301      	movs	r3, #1
20001012:	4053      	eors	r3, r2
20001014:	b2db      	uxtb	r3, r3
20001016:	2b00      	cmp	r3, #0
20001018:	d017      	beq.n	2000104a <insert+0x4a>
	
      if(rear == MAX-1) {
2000101a:	4b0e      	ldr	r3, [pc, #56]	; (20001054 <insert+0x54>)
2000101c:	681b      	ldr	r3, [r3, #0]
2000101e:	2b63      	cmp	r3, #99	; 0x63
20001020:	d103      	bne.n	2000102a <insert+0x2a>
         rear = -1;            
20001022:	4b0c      	ldr	r3, [pc, #48]	; (20001054 <insert+0x54>)
20001024:	2201      	movs	r2, #1
20001026:	4252      	negs	r2, r2
20001028:	601a      	str	r2, [r3, #0]
      }       
      objArray[++rear] = data;
2000102a:	4b0a      	ldr	r3, [pc, #40]	; (20001054 <insert+0x54>)
2000102c:	681b      	ldr	r3, [r3, #0]
2000102e:	1c5a      	adds	r2, r3, #1
20001030:	4b08      	ldr	r3, [pc, #32]	; (20001054 <insert+0x54>)
20001032:	601a      	str	r2, [r3, #0]
20001034:	4b07      	ldr	r3, [pc, #28]	; (20001054 <insert+0x54>)
20001036:	681a      	ldr	r2, [r3, #0]
20001038:	4b07      	ldr	r3, [pc, #28]	; (20001058 <insert+0x58>)
2000103a:	0092      	lsls	r2, r2, #2
2000103c:	6879      	ldr	r1, [r7, #4]
2000103e:	50d1      	str	r1, [r2, r3]
      itemCount++;
20001040:	4b06      	ldr	r3, [pc, #24]	; (2000105c <insert+0x5c>)
20001042:	681b      	ldr	r3, [r3, #0]
20001044:	1c5a      	adds	r2, r3, #1
20001046:	4b05      	ldr	r3, [pc, #20]	; (2000105c <insert+0x5c>)
20001048:	601a      	str	r2, [r3, #0]
   }
}
2000104a:	46c0      	nop			; (mov r8, r8)
2000104c:	46bd      	mov	sp, r7
2000104e:	b002      	add	sp, #8
20001050:	bd80      	pop	{r7, pc}
20001052:	46c0      	nop			; (mov r8, r8)
20001054:	20003a1c 	andcs	r3, r0, ip, lsl sl
20001058:	20003754 	andcs	r3, r0, r4, asr r7
2000105c:	2000374c 	andcs	r3, r0, ip, asr #14

20001060 <remove>:

int remove() {
20001060:	b580      	push	{r7, lr}
20001062:	b082      	sub	sp, #8
20001064:	af00      	add	r7, sp, #0
   POBJECT data = objArray[front++];
20001066:	4b0d      	ldr	r3, [pc, #52]	; (2000109c <remove+0x3c>)
20001068:	681b      	ldr	r3, [r3, #0]
2000106a:	1c59      	adds	r1, r3, #1
2000106c:	4a0b      	ldr	r2, [pc, #44]	; (2000109c <remove+0x3c>)
2000106e:	6011      	str	r1, [r2, #0]
20001070:	4a0b      	ldr	r2, [pc, #44]	; (200010a0 <remove+0x40>)
20001072:	009b      	lsls	r3, r3, #2
20001074:	589b      	ldr	r3, [r3, r2]
20001076:	607b      	str	r3, [r7, #4]
	
   if(front == MAX) {
20001078:	4b08      	ldr	r3, [pc, #32]	; (2000109c <remove+0x3c>)
2000107a:	681b      	ldr	r3, [r3, #0]
2000107c:	2b64      	cmp	r3, #100	; 0x64
2000107e:	d102      	bne.n	20001086 <remove+0x26>
      front = 0;
20001080:	4b06      	ldr	r3, [pc, #24]	; (2000109c <remove+0x3c>)
20001082:	2200      	movs	r2, #0
20001084:	601a      	str	r2, [r3, #0]
   }
	
   itemCount--;
20001086:	4b07      	ldr	r3, [pc, #28]	; (200010a4 <remove+0x44>)
20001088:	681b      	ldr	r3, [r3, #0]
2000108a:	1e5a      	subs	r2, r3, #1
2000108c:	4b05      	ldr	r3, [pc, #20]	; (200010a4 <remove+0x44>)
2000108e:	601a      	str	r2, [r3, #0]
   return (int)data;  
20001090:	687b      	ldr	r3, [r7, #4]
}
20001092:	0018      	movs	r0, r3
20001094:	46bd      	mov	sp, r7
20001096:	b002      	add	sp, #8
20001098:	bd80      	pop	{r7, pc}
2000109a:	46c0      	nop			; (mov r8, r8)
2000109c:	20003748 	andcs	r3, r0, r8, asr #14
200010a0:	20003754 	andcs	r3, r0, r4, asr r7
200010a4:	2000374c 	andcs	r3, r0, ip, asr #14

200010a8 <ascii_init>:
#include <defines.h>
#include <asciidisplay.h>
#include "delay.h"

void ascii_init(void){ /**/
200010a8:	b580      	push	{r7, lr}
200010aa:	af00      	add	r7, sp, #0
    /*function set*/
    funtion_set();
200010ac:	f000 f8ef 	bl	2000128e <funtion_set>
    
    /*Display Control*/
    display_control();
200010b0:	f000 f904 	bl	200012bc <display_control>
    
    /*Clear Display*/
    clear_display();
200010b4:	f000 f8d4 	bl	20001260 <clear_display>
    
    /*Entry mode set*/
    entry_mode_set();
200010b8:	f000 f917 	bl	200012ea <entry_mode_set>
}
200010bc:	46c0      	nop			; (mov r8, r8)
200010be:	46bd      	mov	sp, r7
200010c0:	bd80      	pop	{r7, pc}

200010c2 <ascii_ctrl_bit_set>:

/*adressera ASCII-display, ettställ de bitar som är 1 i x*/
void ascii_ctrl_bit_set(unsigned char x){
200010c2:	b580      	push	{r7, lr}
200010c4:	b082      	sub	sp, #8
200010c6:	af00      	add	r7, sp, #0
200010c8:	0002      	movs	r2, r0
200010ca:	1dfb      	adds	r3, r7, #7
200010cc:	701a      	strb	r2, [r3, #0]
    *GPIO_E_ODR_LOW |= ( B_SELECT | x );
200010ce:	4b08      	ldr	r3, [pc, #32]	; (200010f0 <ascii_ctrl_bit_set+0x2e>)
200010d0:	781b      	ldrb	r3, [r3, #0]
200010d2:	b2da      	uxtb	r2, r3
200010d4:	1dfb      	adds	r3, r7, #7
200010d6:	781b      	ldrb	r3, [r3, #0]
200010d8:	4313      	orrs	r3, r2
200010da:	b2db      	uxtb	r3, r3
200010dc:	4a04      	ldr	r2, [pc, #16]	; (200010f0 <ascii_ctrl_bit_set+0x2e>)
200010de:	2104      	movs	r1, #4
200010e0:	430b      	orrs	r3, r1
200010e2:	b2db      	uxtb	r3, r3
200010e4:	7013      	strb	r3, [r2, #0]
}
200010e6:	46c0      	nop			; (mov r8, r8)
200010e8:	46bd      	mov	sp, r7
200010ea:	b002      	add	sp, #8
200010ec:	bd80      	pop	{r7, pc}
200010ee:	46c0      	nop			; (mov r8, r8)
200010f0:	40021014 	andmi	r1, r2, r4, lsl r0

200010f4 <ascii_ctrl_bit_clear>:

/*adressera ASCII-display, nollställ de bitar som är 1 i x*/
void ascii_ctrl_bit_clear(unsigned char x){
200010f4:	b580      	push	{r7, lr}
200010f6:	b082      	sub	sp, #8
200010f8:	af00      	add	r7, sp, #0
200010fa:	0002      	movs	r2, r0
200010fc:	1dfb      	adds	r3, r7, #7
200010fe:	701a      	strb	r2, [r3, #0]
    *GPIO_E_ODR_LOW &= ( B_SELECT | ~x);
20001100:	4b0a      	ldr	r3, [pc, #40]	; (2000112c <ascii_ctrl_bit_clear+0x38>)
20001102:	781b      	ldrb	r3, [r3, #0]
20001104:	b2db      	uxtb	r3, r3
20001106:	b25b      	sxtb	r3, r3
20001108:	1dfa      	adds	r2, r7, #7
2000110a:	7812      	ldrb	r2, [r2, #0]
2000110c:	b252      	sxtb	r2, r2
2000110e:	43d2      	mvns	r2, r2
20001110:	b252      	sxtb	r2, r2
20001112:	2104      	movs	r1, #4
20001114:	430a      	orrs	r2, r1
20001116:	b252      	sxtb	r2, r2
20001118:	4013      	ands	r3, r2
2000111a:	b25a      	sxtb	r2, r3
2000111c:	4b03      	ldr	r3, [pc, #12]	; (2000112c <ascii_ctrl_bit_clear+0x38>)
2000111e:	b2d2      	uxtb	r2, r2
20001120:	701a      	strb	r2, [r3, #0]
    
}
20001122:	46c0      	nop			; (mov r8, r8)
20001124:	46bd      	mov	sp, r7
20001126:	b002      	add	sp, #8
20001128:	bd80      	pop	{r7, pc}
2000112a:	46c0      	nop			; (mov r8, r8)
2000112c:	40021014 	andmi	r1, r2, r4, lsl r0

20001130 <ascii_write_cmd>:

void ascii_write_cmd(unsigned char command){
20001130:	b580      	push	{r7, lr}
20001132:	b082      	sub	sp, #8
20001134:	af00      	add	r7, sp, #0
20001136:	0002      	movs	r2, r0
20001138:	1dfb      	adds	r3, r7, #7
2000113a:	701a      	strb	r2, [r3, #0]
    ascii_ctrl_bit_clear(B_RS);
2000113c:	2001      	movs	r0, #1
2000113e:	f7ff ffd9 	bl	200010f4 <ascii_ctrl_bit_clear>
    ascii_ctrl_bit_clear(B_RW);
20001142:	2002      	movs	r0, #2
20001144:	f7ff ffd6 	bl	200010f4 <ascii_ctrl_bit_clear>
    ascii_write_controller(command);
20001148:	1dfb      	adds	r3, r7, #7
2000114a:	781b      	ldrb	r3, [r3, #0]
2000114c:	0018      	movs	r0, r3
2000114e:	f000 f819 	bl	20001184 <ascii_write_controller>
}
20001152:	46c0      	nop			; (mov r8, r8)
20001154:	46bd      	mov	sp, r7
20001156:	b002      	add	sp, #8
20001158:	bd80      	pop	{r7, pc}

2000115a <ascii_write_data>:

void ascii_write_data(unsigned char data){
2000115a:	b580      	push	{r7, lr}
2000115c:	b082      	sub	sp, #8
2000115e:	af00      	add	r7, sp, #0
20001160:	0002      	movs	r2, r0
20001162:	1dfb      	adds	r3, r7, #7
20001164:	701a      	strb	r2, [r3, #0]
    ascii_ctrl_bit_set(B_RS);
20001166:	2001      	movs	r0, #1
20001168:	f7ff ffab 	bl	200010c2 <ascii_ctrl_bit_set>
    ascii_ctrl_bit_clear(B_RW);
2000116c:	2002      	movs	r0, #2
2000116e:	f7ff ffc1 	bl	200010f4 <ascii_ctrl_bit_clear>
    ascii_write_controller(data);
20001172:	1dfb      	adds	r3, r7, #7
20001174:	781b      	ldrb	r3, [r3, #0]
20001176:	0018      	movs	r0, r3
20001178:	f000 f804 	bl	20001184 <ascii_write_controller>
}
2000117c:	46c0      	nop			; (mov r8, r8)
2000117e:	46bd      	mov	sp, r7
20001180:	b002      	add	sp, #8
20001182:	bd80      	pop	{r7, pc}

20001184 <ascii_write_controller>:

void ascii_write_controller(unsigned char byte){
20001184:	b580      	push	{r7, lr}
20001186:	b082      	sub	sp, #8
20001188:	af00      	add	r7, sp, #0
2000118a:	0002      	movs	r2, r0
2000118c:	1dfb      	adds	r3, r7, #7
2000118e:	701a      	strb	r2, [r3, #0]
    ascii_ctrl_bit_set(B_E);
20001190:	2040      	movs	r0, #64	; 0x40
20001192:	f7ff ff96 	bl	200010c2 <ascii_ctrl_bit_set>
    *GPIO_E_ODR_HIGH = byte;
20001196:	4a06      	ldr	r2, [pc, #24]	; (200011b0 <ascii_write_controller+0x2c>)
20001198:	1dfb      	adds	r3, r7, #7
2000119a:	781b      	ldrb	r3, [r3, #0]
2000119c:	7013      	strb	r3, [r2, #0]
    delay_250ns();
2000119e:	f000 f913 	bl	200013c8 <delay_250ns>
    ascii_ctrl_bit_clear(B_E);
200011a2:	2040      	movs	r0, #64	; 0x40
200011a4:	f7ff ffa6 	bl	200010f4 <ascii_ctrl_bit_clear>
}
200011a8:	46c0      	nop			; (mov r8, r8)
200011aa:	46bd      	mov	sp, r7
200011ac:	b002      	add	sp, #8
200011ae:	bd80      	pop	{r7, pc}
200011b0:	40021015 	andmi	r1, r2, r5, lsl r0

200011b4 <ascii_read_controller>:

unsigned char ascii_read_controller(void){
200011b4:	b580      	push	{r7, lr}
200011b6:	b082      	sub	sp, #8
200011b8:	af00      	add	r7, sp, #0
    ascii_ctrl_bit_set(B_E);
200011ba:	2040      	movs	r0, #64	; 0x40
200011bc:	f7ff ff81 	bl	200010c2 <ascii_ctrl_bit_set>
    delay_250ns();
200011c0:	f000 f902 	bl	200013c8 <delay_250ns>
    delay_250ns();
200011c4:	f000 f900 	bl	200013c8 <delay_250ns>
    char retVal = *GPIO_E_IDR_HIGH;
200011c8:	4a06      	ldr	r2, [pc, #24]	; (200011e4 <ascii_read_controller+0x30>)
200011ca:	1dfb      	adds	r3, r7, #7
200011cc:	7812      	ldrb	r2, [r2, #0]
200011ce:	701a      	strb	r2, [r3, #0]
    ascii_ctrl_bit_clear(B_E);
200011d0:	2040      	movs	r0, #64	; 0x40
200011d2:	f7ff ff8f 	bl	200010f4 <ascii_ctrl_bit_clear>
    return retVal;
200011d6:	1dfb      	adds	r3, r7, #7
200011d8:	781b      	ldrb	r3, [r3, #0]
}
200011da:	0018      	movs	r0, r3
200011dc:	46bd      	mov	sp, r7
200011de:	b002      	add	sp, #8
200011e0:	bd80      	pop	{r7, pc}
200011e2:	46c0      	nop			; (mov r8, r8)
200011e4:	40021011 	andmi	r1, r2, r1, lsl r0

200011e8 <ascii_read_status>:

unsigned char ascii_read_status(void){
200011e8:	b590      	push	{r4, r7, lr}
200011ea:	b083      	sub	sp, #12
200011ec:	af00      	add	r7, sp, #0
    *(GPIO_E_MODER+0x02) = 0x0000;
200011ee:	4b0b      	ldr	r3, [pc, #44]	; (2000121c <ascii_read_status+0x34>)
200011f0:	2200      	movs	r2, #0
200011f2:	601a      	str	r2, [r3, #0]
    ascii_ctrl_bit_clear(B_RS);
200011f4:	2001      	movs	r0, #1
200011f6:	f7ff ff7d 	bl	200010f4 <ascii_ctrl_bit_clear>
    ascii_ctrl_bit_set(B_RW);
200011fa:	2002      	movs	r0, #2
200011fc:	f7ff ff61 	bl	200010c2 <ascii_ctrl_bit_set>
    char retStat = ascii_read_controller(); 
20001200:	1dfc      	adds	r4, r7, #7
20001202:	f7ff ffd7 	bl	200011b4 <ascii_read_controller>
20001206:	0003      	movs	r3, r0
20001208:	7023      	strb	r3, [r4, #0]
    *(GPIO_E_MODER+0x02) = 0x5555;
2000120a:	4b04      	ldr	r3, [pc, #16]	; (2000121c <ascii_read_status+0x34>)
2000120c:	4a04      	ldr	r2, [pc, #16]	; (20001220 <ascii_read_status+0x38>)
2000120e:	601a      	str	r2, [r3, #0]
    return retStat;
20001210:	1dfb      	adds	r3, r7, #7
20001212:	781b      	ldrb	r3, [r3, #0]
}
20001214:	0018      	movs	r0, r3
20001216:	46bd      	mov	sp, r7
20001218:	b003      	add	sp, #12
2000121a:	bd90      	pop	{r4, r7, pc}
2000121c:	40021008 	andmi	r1, r2, r8
20001220:	00005555 	andeq	r5, r0, r5, asr r5

20001224 <ascii_read_data>:

unsigned char ascii_read_data(void){
20001224:	b590      	push	{r4, r7, lr}
20001226:	b083      	sub	sp, #12
20001228:	af00      	add	r7, sp, #0
    *(GPIO_E_MODER+0x02) = 0x0000;
2000122a:	4b0b      	ldr	r3, [pc, #44]	; (20001258 <ascii_read_data+0x34>)
2000122c:	2200      	movs	r2, #0
2000122e:	601a      	str	r2, [r3, #0]
    ascii_ctrl_bit_set(B_RS);
20001230:	2001      	movs	r0, #1
20001232:	f7ff ff46 	bl	200010c2 <ascii_ctrl_bit_set>
    ascii_ctrl_bit_set(B_RW);
20001236:	2002      	movs	r0, #2
20001238:	f7ff ff43 	bl	200010c2 <ascii_ctrl_bit_set>
    char retData = ascii_read_controller();
2000123c:	1dfc      	adds	r4, r7, #7
2000123e:	f7ff ffb9 	bl	200011b4 <ascii_read_controller>
20001242:	0003      	movs	r3, r0
20001244:	7023      	strb	r3, [r4, #0]
    *(GPIO_E_MODER+0x02) = 0x5555;
20001246:	4b04      	ldr	r3, [pc, #16]	; (20001258 <ascii_read_data+0x34>)
20001248:	4a04      	ldr	r2, [pc, #16]	; (2000125c <ascii_read_data+0x38>)
2000124a:	601a      	str	r2, [r3, #0]
    return retData;
2000124c:	1dfb      	adds	r3, r7, #7
2000124e:	781b      	ldrb	r3, [r3, #0]
}
20001250:	0018      	movs	r0, r3
20001252:	46bd      	mov	sp, r7
20001254:	b003      	add	sp, #12
20001256:	bd90      	pop	{r4, r7, pc}
20001258:	40021008 	andmi	r1, r2, r8
2000125c:	00005555 	andeq	r5, r0, r5, asr r5

20001260 <clear_display>:

void clear_display(){
20001260:	b580      	push	{r7, lr}
20001262:	af00      	add	r7, sp, #0
    while((ascii_read_status() & 0x80) == 0x80){}
20001264:	46c0      	nop			; (mov r8, r8)
20001266:	f7ff ffbf 	bl	200011e8 <ascii_read_status>
2000126a:	0003      	movs	r3, r0
2000126c:	001a      	movs	r2, r3
2000126e:	2380      	movs	r3, #128	; 0x80
20001270:	4013      	ands	r3, r2
20001272:	2b80      	cmp	r3, #128	; 0x80
20001274:	d0f7      	beq.n	20001266 <clear_display+0x6>
    delay_mikro(8);
20001276:	2008      	movs	r0, #8
20001278:	f000 f8d1 	bl	2000141e <delay_mikro>
    ascii_write_cmd(1); /*clear display*/
2000127c:	2001      	movs	r0, #1
2000127e:	f7ff ff57 	bl	20001130 <ascii_write_cmd>
    delay_milli(2);
20001282:	2002      	movs	r0, #2
20001284:	f000 f8e2 	bl	2000144c <delay_milli>
}
20001288:	46c0      	nop			; (mov r8, r8)
2000128a:	46bd      	mov	sp, r7
2000128c:	bd80      	pop	{r7, pc}

2000128e <funtion_set>:

void funtion_set(){
2000128e:	b580      	push	{r7, lr}
20001290:	af00      	add	r7, sp, #0
    while((ascii_read_status() & 0x80) == 0x80){}
20001292:	46c0      	nop			; (mov r8, r8)
20001294:	f7ff ffa8 	bl	200011e8 <ascii_read_status>
20001298:	0003      	movs	r3, r0
2000129a:	001a      	movs	r2, r3
2000129c:	2380      	movs	r3, #128	; 0x80
2000129e:	4013      	ands	r3, r2
200012a0:	2b80      	cmp	r3, #128	; 0x80
200012a2:	d0f7      	beq.n	20001294 <funtion_set+0x6>
    delay_mikro(8);
200012a4:	2008      	movs	r0, #8
200012a6:	f000 f8ba 	bl	2000141e <delay_mikro>
    ascii_write_cmd(0x38); //0b00111000
200012aa:	2038      	movs	r0, #56	; 0x38
200012ac:	f7ff ff40 	bl	20001130 <ascii_write_cmd>
    delay_mikro(40);
200012b0:	2028      	movs	r0, #40	; 0x28
200012b2:	f000 f8b4 	bl	2000141e <delay_mikro>
}
200012b6:	46c0      	nop			; (mov r8, r8)
200012b8:	46bd      	mov	sp, r7
200012ba:	bd80      	pop	{r7, pc}

200012bc <display_control>:

void display_control(){
200012bc:	b580      	push	{r7, lr}
200012be:	af00      	add	r7, sp, #0
    while((ascii_read_status() & 0x80) == 0x80){}
200012c0:	46c0      	nop			; (mov r8, r8)
200012c2:	f7ff ff91 	bl	200011e8 <ascii_read_status>
200012c6:	0003      	movs	r3, r0
200012c8:	001a      	movs	r2, r3
200012ca:	2380      	movs	r3, #128	; 0x80
200012cc:	4013      	ands	r3, r2
200012ce:	2b80      	cmp	r3, #128	; 0x80
200012d0:	d0f7      	beq.n	200012c2 <display_control+0x6>
    delay_mikro(8);
200012d2:	2008      	movs	r0, #8
200012d4:	f000 f8a3 	bl	2000141e <delay_mikro>
    ascii_write_cmd(0xE);
200012d8:	200e      	movs	r0, #14
200012da:	f7ff ff29 	bl	20001130 <ascii_write_cmd>
    delay_mikro(40);
200012de:	2028      	movs	r0, #40	; 0x28
200012e0:	f000 f89d 	bl	2000141e <delay_mikro>
}
200012e4:	46c0      	nop			; (mov r8, r8)
200012e6:	46bd      	mov	sp, r7
200012e8:	bd80      	pop	{r7, pc}

200012ea <entry_mode_set>:

void entry_mode_set(){
200012ea:	b580      	push	{r7, lr}
200012ec:	af00      	add	r7, sp, #0
    while((ascii_read_status() & 0x80) == 0x80){}
200012ee:	46c0      	nop			; (mov r8, r8)
200012f0:	f7ff ff7a 	bl	200011e8 <ascii_read_status>
200012f4:	0003      	movs	r3, r0
200012f6:	001a      	movs	r2, r3
200012f8:	2380      	movs	r3, #128	; 0x80
200012fa:	4013      	ands	r3, r2
200012fc:	2b80      	cmp	r3, #128	; 0x80
200012fe:	d0f7      	beq.n	200012f0 <entry_mode_set+0x6>
    delay_mikro(8);
20001300:	2008      	movs	r0, #8
20001302:	f000 f88c 	bl	2000141e <delay_mikro>
    ascii_write_cmd(6);
20001306:	2006      	movs	r0, #6
20001308:	f7ff ff12 	bl	20001130 <ascii_write_cmd>
    delay_mikro(40);
2000130c:	2028      	movs	r0, #40	; 0x28
2000130e:	f000 f886 	bl	2000141e <delay_mikro>
}
20001312:	46c0      	nop			; (mov r8, r8)
20001314:	46bd      	mov	sp, r7
20001316:	bd80      	pop	{r7, pc}

20001318 <ascii_write_char>:

void ascii_write_char(unsigned char c){
20001318:	b580      	push	{r7, lr}
2000131a:	b082      	sub	sp, #8
2000131c:	af00      	add	r7, sp, #0
2000131e:	0002      	movs	r2, r0
20001320:	1dfb      	adds	r3, r7, #7
20001322:	701a      	strb	r2, [r3, #0]
    //while((ascii_read_status() & 0x80) == 0x80){} //Kommentera bort om det ska fungera...
    delay_mikro(8);
20001324:	2008      	movs	r0, #8
20001326:	f000 f87a 	bl	2000141e <delay_mikro>
    ascii_write_data(c);
2000132a:	1dfb      	adds	r3, r7, #7
2000132c:	781b      	ldrb	r3, [r3, #0]
2000132e:	0018      	movs	r0, r3
20001330:	f7ff ff13 	bl	2000115a <ascii_write_data>
    delay_mikro(45);
20001334:	202d      	movs	r0, #45	; 0x2d
20001336:	f000 f872 	bl	2000141e <delay_mikro>
}
2000133a:	46c0      	nop			; (mov r8, r8)
2000133c:	46bd      	mov	sp, r7
2000133e:	b002      	add	sp, #8
20001340:	bd80      	pop	{r7, pc}

20001342 <ascii_gotoxy>:

void ascii_gotoxy(int x, int y){ /**/
20001342:	b580      	push	{r7, lr}
20001344:	b084      	sub	sp, #16
20001346:	af00      	add	r7, sp, #0
20001348:	6078      	str	r0, [r7, #4]
2000134a:	6039      	str	r1, [r7, #0]
    unsigned char address;
    if(y!=1)
2000134c:	683b      	ldr	r3, [r7, #0]
2000134e:	2b01      	cmp	r3, #1
20001350:	d006      	beq.n	20001360 <ascii_gotoxy+0x1e>
        address = 0x40 + (x-1);
20001352:	687b      	ldr	r3, [r7, #4]
20001354:	b2da      	uxtb	r2, r3
20001356:	230f      	movs	r3, #15
20001358:	18fb      	adds	r3, r7, r3
2000135a:	323f      	adds	r2, #63	; 0x3f
2000135c:	701a      	strb	r2, [r3, #0]
2000135e:	e005      	b.n	2000136c <ascii_gotoxy+0x2a>
    else address=x-1;
20001360:	687b      	ldr	r3, [r7, #4]
20001362:	b2da      	uxtb	r2, r3
20001364:	230f      	movs	r3, #15
20001366:	18fb      	adds	r3, r7, r3
20001368:	3a01      	subs	r2, #1
2000136a:	701a      	strb	r2, [r3, #0]
    
    ascii_write_cmd( 0x80 | address);
2000136c:	230f      	movs	r3, #15
2000136e:	18fb      	adds	r3, r7, r3
20001370:	781b      	ldrb	r3, [r3, #0]
20001372:	2280      	movs	r2, #128	; 0x80
20001374:	4252      	negs	r2, r2
20001376:	4313      	orrs	r3, r2
20001378:	b2db      	uxtb	r3, r3
2000137a:	0018      	movs	r0, r3
2000137c:	f7ff fed8 	bl	20001130 <ascii_write_cmd>
    delay_mikro( 45 );
20001380:	202d      	movs	r0, #45	; 0x2d
20001382:	f000 f84c 	bl	2000141e <delay_mikro>
}
20001386:	46c0      	nop			; (mov r8, r8)
20001388:	46bd      	mov	sp, r7
2000138a:	b004      	add	sp, #16
2000138c:	bd80      	pop	{r7, pc}

2000138e <ascii_print>:

void ascii_print(char *text)
{
2000138e:	b580      	push	{r7, lr}
20001390:	b084      	sub	sp, #16
20001392:	af00      	add	r7, sp, #0
20001394:	6078      	str	r0, [r7, #4]
    int i = 0;
20001396:	2300      	movs	r3, #0
20001398:	60fb      	str	r3, [r7, #12]
    while (text[i] != '\0') {
2000139a:	e009      	b.n	200013b0 <ascii_print+0x22>
        ascii_write_char(text[i]);
2000139c:	68fb      	ldr	r3, [r7, #12]
2000139e:	687a      	ldr	r2, [r7, #4]
200013a0:	18d3      	adds	r3, r2, r3
200013a2:	781b      	ldrb	r3, [r3, #0]
200013a4:	0018      	movs	r0, r3
200013a6:	f7ff ffb7 	bl	20001318 <ascii_write_char>
        i++;
200013aa:	68fb      	ldr	r3, [r7, #12]
200013ac:	3301      	adds	r3, #1
200013ae:	60fb      	str	r3, [r7, #12]
    while (text[i] != '\0') {
200013b0:	68fb      	ldr	r3, [r7, #12]
200013b2:	687a      	ldr	r2, [r7, #4]
200013b4:	18d3      	adds	r3, r2, r3
200013b6:	781b      	ldrb	r3, [r3, #0]
200013b8:	2b00      	cmp	r3, #0
200013ba:	d1ef      	bne.n	2000139c <ascii_print+0xe>
    }
200013bc:	46c0      	nop			; (mov r8, r8)
200013be:	46c0      	nop			; (mov r8, r8)
200013c0:	46bd      	mov	sp, r7
200013c2:	b004      	add	sp, #16
200013c4:	bd80      	pop	{r7, pc}
200013c6:	46c0      	nop			; (mov r8, r8)

200013c8 <delay_250ns>:
#include <defines.h>
#include <delay.h>


void delay_250ns ( void){
200013c8:	b580      	push	{r7, lr}
200013ca:	af00      	add	r7, sp, #0
    #ifdef SIMULATOR
        return;
    #endif
    /* SystemCoreClock = 168000000 */ 
    *STK_CTRL = 0;
200013cc:	4b0c      	ldr	r3, [pc, #48]	; (20001400 <delay_250ns+0x38>)
200013ce:	2200      	movs	r2, #0
200013d0:	601a      	str	r2, [r3, #0]
    *STK_LOAD = ( (168/4) -1 );
200013d2:	4b0c      	ldr	r3, [pc, #48]	; (20001404 <delay_250ns+0x3c>)
200013d4:	2229      	movs	r2, #41	; 0x29
200013d6:	601a      	str	r2, [r3, #0]
    *STK_VAL = 0;
200013d8:	4b0b      	ldr	r3, [pc, #44]	; (20001408 <delay_250ns+0x40>)
200013da:	2200      	movs	r2, #0
200013dc:	601a      	str	r2, [r3, #0]
    *STK_CTRL = 5;
200013de:	4b08      	ldr	r3, [pc, #32]	; (20001400 <delay_250ns+0x38>)
200013e0:	2205      	movs	r2, #5
200013e2:	601a      	str	r2, [r3, #0]
    while( (*STK_CTRL & 0x10000 )== 0 ) {} 
200013e4:	46c0      	nop			; (mov r8, r8)
200013e6:	4b06      	ldr	r3, [pc, #24]	; (20001400 <delay_250ns+0x38>)
200013e8:	681a      	ldr	r2, [r3, #0]
200013ea:	2380      	movs	r3, #128	; 0x80
200013ec:	025b      	lsls	r3, r3, #9
200013ee:	4013      	ands	r3, r2
200013f0:	d0f9      	beq.n	200013e6 <delay_250ns+0x1e>
    *STK_CTRL = 0;
200013f2:	4b03      	ldr	r3, [pc, #12]	; (20001400 <delay_250ns+0x38>)
200013f4:	2200      	movs	r2, #0
200013f6:	601a      	str	r2, [r3, #0]
}
200013f8:	46c0      	nop			; (mov r8, r8)
200013fa:	46bd      	mov	sp, r7
200013fc:	bd80      	pop	{r7, pc}
200013fe:	46c0      	nop			; (mov r8, r8)
20001400:	e000e010 	and	lr, r0, r0, lsl r0
20001404:	e000e014 	and	lr, r0, r4, lsl r0
20001408:	e000e018 	and	lr, r0, r8, lsl r0

2000140c <delay_500ns>:

void delay_500ns(void){
2000140c:	b580      	push	{r7, lr}
2000140e:	af00      	add	r7, sp, #0
    #ifdef SIMULATOR
        return;
    #endif
    delay_250ns();
20001410:	f7ff ffda 	bl	200013c8 <delay_250ns>
    delay_250ns();
20001414:	f7ff ffd8 	bl	200013c8 <delay_250ns>
}
20001418:	46c0      	nop			; (mov r8, r8)
2000141a:	46bd      	mov	sp, r7
2000141c:	bd80      	pop	{r7, pc}

2000141e <delay_mikro>:

void delay_mikro(unsigned int us){
2000141e:	b580      	push	{r7, lr}
20001420:	b082      	sub	sp, #8
20001422:	af00      	add	r7, sp, #0
20001424:	6078      	str	r0, [r7, #4]
    #ifdef SIMULATOR
        return;
    #endif
    while(us--){
20001426:	e007      	b.n	20001438 <delay_mikro+0x1a>
        delay_250ns();
20001428:	f7ff ffce 	bl	200013c8 <delay_250ns>
        delay_250ns();
2000142c:	f7ff ffcc 	bl	200013c8 <delay_250ns>
        delay_250ns();
20001430:	f7ff ffca 	bl	200013c8 <delay_250ns>
        delay_250ns();
20001434:	f7ff ffc8 	bl	200013c8 <delay_250ns>
    while(us--){
20001438:	687b      	ldr	r3, [r7, #4]
2000143a:	1e5a      	subs	r2, r3, #1
2000143c:	607a      	str	r2, [r7, #4]
2000143e:	2b00      	cmp	r3, #0
20001440:	d1f2      	bne.n	20001428 <delay_mikro+0xa>
    }
}
20001442:	46c0      	nop			; (mov r8, r8)
20001444:	46c0      	nop			; (mov r8, r8)
20001446:	46bd      	mov	sp, r7
20001448:	b002      	add	sp, #8
2000144a:	bd80      	pop	{r7, pc}

2000144c <delay_milli>:

void delay_milli(unsigned int ms){
2000144c:	b580      	push	{r7, lr}
2000144e:	b082      	sub	sp, #8
20001450:	af00      	add	r7, sp, #0
20001452:	6078      	str	r0, [r7, #4]
    #ifdef SIMULATOR
        ms = ms / 1000;
        ms++;
    #endif
    
    while(ms--){
20001454:	e004      	b.n	20001460 <delay_milli+0x14>
        delay_mikro(1000);
20001456:	23fa      	movs	r3, #250	; 0xfa
20001458:	009b      	lsls	r3, r3, #2
2000145a:	0018      	movs	r0, r3
2000145c:	f7ff ffdf 	bl	2000141e <delay_mikro>
    while(ms--){
20001460:	687b      	ldr	r3, [r7, #4]
20001462:	1e5a      	subs	r2, r3, #1
20001464:	607a      	str	r2, [r7, #4]
20001466:	2b00      	cmp	r3, #0
20001468:	d1f5      	bne.n	20001456 <delay_milli+0xa>
    }
2000146a:	46c0      	nop			; (mov r8, r8)
2000146c:	46c0      	nop			; (mov r8, r8)
2000146e:	46bd      	mov	sp, r7
20001470:	b002      	add	sp, #8
20001472:	bd80      	pop	{r7, pc}

20001474 <activate_row>:
#include <defines.h>
#include <keyb.h>

void activate_row(int i){
20001474:	b580      	push	{r7, lr}
20001476:	b082      	sub	sp, #8
20001478:	af00      	add	r7, sp, #0
2000147a:	6078      	str	r0, [r7, #4]
    *GPIO_D_ODR_HIGH = 1 << (i+4);
2000147c:	687b      	ldr	r3, [r7, #4]
2000147e:	3304      	adds	r3, #4
20001480:	2201      	movs	r2, #1
20001482:	409a      	lsls	r2, r3
20001484:	4b03      	ldr	r3, [pc, #12]	; (20001494 <activate_row+0x20>)
20001486:	b2d2      	uxtb	r2, r2
20001488:	701a      	strb	r2, [r3, #0]
}
2000148a:	46c0      	nop			; (mov r8, r8)
2000148c:	46bd      	mov	sp, r7
2000148e:	b002      	add	sp, #8
20001490:	bd80      	pop	{r7, pc}
20001492:	46c0      	nop			; (mov r8, r8)
20001494:	40020c15 	andmi	r0, r2, r5, lsl ip

20001498 <read_coloumn>:

int read_coloumn(){
20001498:	b580      	push	{r7, lr}
2000149a:	b082      	sub	sp, #8
2000149c:	af00      	add	r7, sp, #0
    int j; 
    char input = *GPIO_D_IDR_HIGH;
2000149e:	4a0e      	ldr	r2, [pc, #56]	; (200014d8 <read_coloumn+0x40>)
200014a0:	1cfb      	adds	r3, r7, #3
200014a2:	7812      	ldrb	r2, [r2, #0]
200014a4:	701a      	strb	r2, [r3, #0]
    for(j = 0; j<4 ; j++){
200014a6:	2300      	movs	r3, #0
200014a8:	607b      	str	r3, [r7, #4]
200014aa:	e00c      	b.n	200014c6 <read_coloumn+0x2e>
        if (input&(1<<j)){
200014ac:	1cfb      	adds	r3, r7, #3
200014ae:	781a      	ldrb	r2, [r3, #0]
200014b0:	687b      	ldr	r3, [r7, #4]
200014b2:	411a      	asrs	r2, r3
200014b4:	0013      	movs	r3, r2
200014b6:	2201      	movs	r2, #1
200014b8:	4013      	ands	r3, r2
200014ba:	d001      	beq.n	200014c0 <read_coloumn+0x28>
            return j;
200014bc:	687b      	ldr	r3, [r7, #4]
200014be:	e007      	b.n	200014d0 <read_coloumn+0x38>
    for(j = 0; j<4 ; j++){
200014c0:	687b      	ldr	r3, [r7, #4]
200014c2:	3301      	adds	r3, #1
200014c4:	607b      	str	r3, [r7, #4]
200014c6:	687b      	ldr	r3, [r7, #4]
200014c8:	2b03      	cmp	r3, #3
200014ca:	ddef      	ble.n	200014ac <read_coloumn+0x14>
        }
    }
    return -1;
200014cc:	2301      	movs	r3, #1
200014ce:	425b      	negs	r3, r3
}
200014d0:	0018      	movs	r0, r3
200014d2:	46bd      	mov	sp, r7
200014d4:	b002      	add	sp, #8
200014d6:	bd80      	pop	{r7, pc}
200014d8:	40020c11 	andmi	r0, r2, r1, lsl ip

200014dc <keyb>:

/*rader in, kolumner ut*/
unsigned char keyb(void){
200014dc:	b590      	push	{r4, r7, lr}
200014de:	b08b      	sub	sp, #44	; 0x2c
200014e0:	af00      	add	r7, sp, #0
    unsigned char key_value[] = {0x06,0x5B,0x4F,0x77,0x66,0x6D,0x7D,0x7C,0x07,0x7F,0x6F,0x39,0x79,0x3F,0x71,0xBF};
200014e2:	2310      	movs	r3, #16
200014e4:	18fb      	adds	r3, r7, r3
200014e6:	4a15      	ldr	r2, [pc, #84]	; (2000153c <keyb+0x60>)
200014e8:	ca13      	ldmia	r2!, {r0, r1, r4}
200014ea:	c313      	stmia	r3!, {r0, r1, r4}
200014ec:	6812      	ldr	r2, [r2, #0]
200014ee:	601a      	str	r2, [r3, #0]
    unsigned char keyVal[] = {1,2,3,0xA,4,5,6,0xB,7,8,9,0xC,0xE,0,0xF,0xD};
200014f0:	003b      	movs	r3, r7
200014f2:	4a13      	ldr	r2, [pc, #76]	; (20001540 <keyb+0x64>)
200014f4:	ca13      	ldmia	r2!, {r0, r1, r4}
200014f6:	c313      	stmia	r3!, {r0, r1, r4}
200014f8:	6812      	ldr	r2, [r2, #0]
200014fa:	601a      	str	r2, [r3, #0]
    
        
    int row, coloumn;
    for (row = 0; row < 4; row++){
200014fc:	2300      	movs	r3, #0
200014fe:	627b      	str	r3, [r7, #36]	; 0x24
20001500:	e014      	b.n	2000152c <keyb+0x50>
        activate_row(row);
20001502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001504:	0018      	movs	r0, r3
20001506:	f7ff ffb5 	bl	20001474 <activate_row>
        coloumn = read_coloumn();
2000150a:	f7ff ffc5 	bl	20001498 <read_coloumn>
2000150e:	0003      	movs	r3, r0
20001510:	623b      	str	r3, [r7, #32]
        if (coloumn != -1){
20001512:	6a3b      	ldr	r3, [r7, #32]
20001514:	3301      	adds	r3, #1
20001516:	d006      	beq.n	20001526 <keyb+0x4a>
            return keyVal[coloumn+row*4];
20001518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2000151a:	009a      	lsls	r2, r3, #2
2000151c:	6a3b      	ldr	r3, [r7, #32]
2000151e:	18d3      	adds	r3, r2, r3
20001520:	003a      	movs	r2, r7
20001522:	5cd3      	ldrb	r3, [r2, r3]
20001524:	e006      	b.n	20001534 <keyb+0x58>
    for (row = 0; row < 4; row++){
20001526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001528:	3301      	adds	r3, #1
2000152a:	627b      	str	r3, [r7, #36]	; 0x24
2000152c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2000152e:	2b03      	cmp	r3, #3
20001530:	dde7      	ble.n	20001502 <keyb+0x26>
        }
    }
    return 0x00;
20001532:	2300      	movs	r3, #0
}
20001534:	0018      	movs	r0, r3
20001536:	46bd      	mov	sp, r7
20001538:	b00b      	add	sp, #44	; 0x2c
2000153a:	bd90      	pop	{r4, r7, pc}
2000153c:	20003a88 	andcs	r3, r0, r8, lsl #21
20001540:	20003a98 	mulcs	r0, r8, sl

20001544 <out7seg>:

void out7seg(unsigned char c){
20001544:	b580      	push	{r7, lr}
20001546:	b082      	sub	sp, #8
20001548:	af00      	add	r7, sp, #0
2000154a:	0002      	movs	r2, r0
2000154c:	1dfb      	adds	r3, r7, #7
2000154e:	701a      	strb	r2, [r3, #0]
    
    *GPIO_D_ODR_LOW = c; //0x00 -> 0xFF
20001550:	4a03      	ldr	r2, [pc, #12]	; (20001560 <out7seg+0x1c>)
20001552:	1dfb      	adds	r3, r7, #7
20001554:	781b      	ldrb	r3, [r3, #0]
20001556:	7013      	strb	r3, [r2, #0]
    
20001558:	46c0      	nop			; (mov r8, r8)
2000155a:	46bd      	mov	sp, r7
2000155c:	b002      	add	sp, #8
2000155e:	bd80      	pop	{r7, pc}
20001560:	40020c14 	andmi	r0, r2, r4, lsl ip

20001564 <__divsi3>:
20001564:	4603      	mov	r3, r0
20001566:	430b      	orrs	r3, r1
20001568:	d47f      	bmi.n	2000166a <__divsi3+0x106>
2000156a:	2200      	movs	r2, #0
2000156c:	0843      	lsrs	r3, r0, #1
2000156e:	428b      	cmp	r3, r1
20001570:	d374      	bcc.n	2000165c <__divsi3+0xf8>
20001572:	0903      	lsrs	r3, r0, #4
20001574:	428b      	cmp	r3, r1
20001576:	d35f      	bcc.n	20001638 <__divsi3+0xd4>
20001578:	0a03      	lsrs	r3, r0, #8
2000157a:	428b      	cmp	r3, r1
2000157c:	d344      	bcc.n	20001608 <__divsi3+0xa4>
2000157e:	0b03      	lsrs	r3, r0, #12
20001580:	428b      	cmp	r3, r1
20001582:	d328      	bcc.n	200015d6 <__divsi3+0x72>
20001584:	0c03      	lsrs	r3, r0, #16
20001586:	428b      	cmp	r3, r1
20001588:	d30d      	bcc.n	200015a6 <__divsi3+0x42>
2000158a:	22ff      	movs	r2, #255	; 0xff
2000158c:	0209      	lsls	r1, r1, #8
2000158e:	ba12      	rev	r2, r2
20001590:	0c03      	lsrs	r3, r0, #16
20001592:	428b      	cmp	r3, r1
20001594:	d302      	bcc.n	2000159c <__divsi3+0x38>
20001596:	1212      	asrs	r2, r2, #8
20001598:	0209      	lsls	r1, r1, #8
2000159a:	d065      	beq.n	20001668 <__divsi3+0x104>
2000159c:	0b03      	lsrs	r3, r0, #12
2000159e:	428b      	cmp	r3, r1
200015a0:	d319      	bcc.n	200015d6 <__divsi3+0x72>
200015a2:	e000      	b.n	200015a6 <__divsi3+0x42>
200015a4:	0a09      	lsrs	r1, r1, #8
200015a6:	0bc3      	lsrs	r3, r0, #15
200015a8:	428b      	cmp	r3, r1
200015aa:	d301      	bcc.n	200015b0 <__divsi3+0x4c>
200015ac:	03cb      	lsls	r3, r1, #15
200015ae:	1ac0      	subs	r0, r0, r3
200015b0:	4152      	adcs	r2, r2
200015b2:	0b83      	lsrs	r3, r0, #14
200015b4:	428b      	cmp	r3, r1
200015b6:	d301      	bcc.n	200015bc <__divsi3+0x58>
200015b8:	038b      	lsls	r3, r1, #14
200015ba:	1ac0      	subs	r0, r0, r3
200015bc:	4152      	adcs	r2, r2
200015be:	0b43      	lsrs	r3, r0, #13
200015c0:	428b      	cmp	r3, r1
200015c2:	d301      	bcc.n	200015c8 <__divsi3+0x64>
200015c4:	034b      	lsls	r3, r1, #13
200015c6:	1ac0      	subs	r0, r0, r3
200015c8:	4152      	adcs	r2, r2
200015ca:	0b03      	lsrs	r3, r0, #12
200015cc:	428b      	cmp	r3, r1
200015ce:	d301      	bcc.n	200015d4 <__divsi3+0x70>
200015d0:	030b      	lsls	r3, r1, #12
200015d2:	1ac0      	subs	r0, r0, r3
200015d4:	4152      	adcs	r2, r2
200015d6:	0ac3      	lsrs	r3, r0, #11
200015d8:	428b      	cmp	r3, r1
200015da:	d301      	bcc.n	200015e0 <__divsi3+0x7c>
200015dc:	02cb      	lsls	r3, r1, #11
200015de:	1ac0      	subs	r0, r0, r3
200015e0:	4152      	adcs	r2, r2
200015e2:	0a83      	lsrs	r3, r0, #10
200015e4:	428b      	cmp	r3, r1
200015e6:	d301      	bcc.n	200015ec <__divsi3+0x88>
200015e8:	028b      	lsls	r3, r1, #10
200015ea:	1ac0      	subs	r0, r0, r3
200015ec:	4152      	adcs	r2, r2
200015ee:	0a43      	lsrs	r3, r0, #9
200015f0:	428b      	cmp	r3, r1
200015f2:	d301      	bcc.n	200015f8 <__divsi3+0x94>
200015f4:	024b      	lsls	r3, r1, #9
200015f6:	1ac0      	subs	r0, r0, r3
200015f8:	4152      	adcs	r2, r2
200015fa:	0a03      	lsrs	r3, r0, #8
200015fc:	428b      	cmp	r3, r1
200015fe:	d301      	bcc.n	20001604 <__divsi3+0xa0>
20001600:	020b      	lsls	r3, r1, #8
20001602:	1ac0      	subs	r0, r0, r3
20001604:	4152      	adcs	r2, r2
20001606:	d2cd      	bcs.n	200015a4 <__divsi3+0x40>
20001608:	09c3      	lsrs	r3, r0, #7
2000160a:	428b      	cmp	r3, r1
2000160c:	d301      	bcc.n	20001612 <__divsi3+0xae>
2000160e:	01cb      	lsls	r3, r1, #7
20001610:	1ac0      	subs	r0, r0, r3
20001612:	4152      	adcs	r2, r2
20001614:	0983      	lsrs	r3, r0, #6
20001616:	428b      	cmp	r3, r1
20001618:	d301      	bcc.n	2000161e <__divsi3+0xba>
2000161a:	018b      	lsls	r3, r1, #6
2000161c:	1ac0      	subs	r0, r0, r3
2000161e:	4152      	adcs	r2, r2
20001620:	0943      	lsrs	r3, r0, #5
20001622:	428b      	cmp	r3, r1
20001624:	d301      	bcc.n	2000162a <__divsi3+0xc6>
20001626:	014b      	lsls	r3, r1, #5
20001628:	1ac0      	subs	r0, r0, r3
2000162a:	4152      	adcs	r2, r2
2000162c:	0903      	lsrs	r3, r0, #4
2000162e:	428b      	cmp	r3, r1
20001630:	d301      	bcc.n	20001636 <__divsi3+0xd2>
20001632:	010b      	lsls	r3, r1, #4
20001634:	1ac0      	subs	r0, r0, r3
20001636:	4152      	adcs	r2, r2
20001638:	08c3      	lsrs	r3, r0, #3
2000163a:	428b      	cmp	r3, r1
2000163c:	d301      	bcc.n	20001642 <__divsi3+0xde>
2000163e:	00cb      	lsls	r3, r1, #3
20001640:	1ac0      	subs	r0, r0, r3
20001642:	4152      	adcs	r2, r2
20001644:	0883      	lsrs	r3, r0, #2
20001646:	428b      	cmp	r3, r1
20001648:	d301      	bcc.n	2000164e <__divsi3+0xea>
2000164a:	008b      	lsls	r3, r1, #2
2000164c:	1ac0      	subs	r0, r0, r3
2000164e:	4152      	adcs	r2, r2
20001650:	0843      	lsrs	r3, r0, #1
20001652:	428b      	cmp	r3, r1
20001654:	d301      	bcc.n	2000165a <__divsi3+0xf6>
20001656:	004b      	lsls	r3, r1, #1
20001658:	1ac0      	subs	r0, r0, r3
2000165a:	4152      	adcs	r2, r2
2000165c:	1a41      	subs	r1, r0, r1
2000165e:	d200      	bcs.n	20001662 <__divsi3+0xfe>
20001660:	4601      	mov	r1, r0
20001662:	4152      	adcs	r2, r2
20001664:	4610      	mov	r0, r2
20001666:	4770      	bx	lr
20001668:	e05d      	b.n	20001726 <__divsi3+0x1c2>
2000166a:	0fca      	lsrs	r2, r1, #31
2000166c:	d000      	beq.n	20001670 <__divsi3+0x10c>
2000166e:	4249      	negs	r1, r1
20001670:	1003      	asrs	r3, r0, #32
20001672:	d300      	bcc.n	20001676 <__divsi3+0x112>
20001674:	4240      	negs	r0, r0
20001676:	4053      	eors	r3, r2
20001678:	2200      	movs	r2, #0
2000167a:	469c      	mov	ip, r3
2000167c:	0903      	lsrs	r3, r0, #4
2000167e:	428b      	cmp	r3, r1
20001680:	d32d      	bcc.n	200016de <__divsi3+0x17a>
20001682:	0a03      	lsrs	r3, r0, #8
20001684:	428b      	cmp	r3, r1
20001686:	d312      	bcc.n	200016ae <__divsi3+0x14a>
20001688:	22fc      	movs	r2, #252	; 0xfc
2000168a:	0189      	lsls	r1, r1, #6
2000168c:	ba12      	rev	r2, r2
2000168e:	0a03      	lsrs	r3, r0, #8
20001690:	428b      	cmp	r3, r1
20001692:	d30c      	bcc.n	200016ae <__divsi3+0x14a>
20001694:	0189      	lsls	r1, r1, #6
20001696:	1192      	asrs	r2, r2, #6
20001698:	428b      	cmp	r3, r1
2000169a:	d308      	bcc.n	200016ae <__divsi3+0x14a>
2000169c:	0189      	lsls	r1, r1, #6
2000169e:	1192      	asrs	r2, r2, #6
200016a0:	428b      	cmp	r3, r1
200016a2:	d304      	bcc.n	200016ae <__divsi3+0x14a>
200016a4:	0189      	lsls	r1, r1, #6
200016a6:	d03a      	beq.n	2000171e <__divsi3+0x1ba>
200016a8:	1192      	asrs	r2, r2, #6
200016aa:	e000      	b.n	200016ae <__divsi3+0x14a>
200016ac:	0989      	lsrs	r1, r1, #6
200016ae:	09c3      	lsrs	r3, r0, #7
200016b0:	428b      	cmp	r3, r1
200016b2:	d301      	bcc.n	200016b8 <__divsi3+0x154>
200016b4:	01cb      	lsls	r3, r1, #7
200016b6:	1ac0      	subs	r0, r0, r3
200016b8:	4152      	adcs	r2, r2
200016ba:	0983      	lsrs	r3, r0, #6
200016bc:	428b      	cmp	r3, r1
200016be:	d301      	bcc.n	200016c4 <__divsi3+0x160>
200016c0:	018b      	lsls	r3, r1, #6
200016c2:	1ac0      	subs	r0, r0, r3
200016c4:	4152      	adcs	r2, r2
200016c6:	0943      	lsrs	r3, r0, #5
200016c8:	428b      	cmp	r3, r1
200016ca:	d301      	bcc.n	200016d0 <__divsi3+0x16c>
200016cc:	014b      	lsls	r3, r1, #5
200016ce:	1ac0      	subs	r0, r0, r3
200016d0:	4152      	adcs	r2, r2
200016d2:	0903      	lsrs	r3, r0, #4
200016d4:	428b      	cmp	r3, r1
200016d6:	d301      	bcc.n	200016dc <__divsi3+0x178>
200016d8:	010b      	lsls	r3, r1, #4
200016da:	1ac0      	subs	r0, r0, r3
200016dc:	4152      	adcs	r2, r2
200016de:	08c3      	lsrs	r3, r0, #3
200016e0:	428b      	cmp	r3, r1
200016e2:	d301      	bcc.n	200016e8 <__divsi3+0x184>
200016e4:	00cb      	lsls	r3, r1, #3
200016e6:	1ac0      	subs	r0, r0, r3
200016e8:	4152      	adcs	r2, r2
200016ea:	0883      	lsrs	r3, r0, #2
200016ec:	428b      	cmp	r3, r1
200016ee:	d301      	bcc.n	200016f4 <__divsi3+0x190>
200016f0:	008b      	lsls	r3, r1, #2
200016f2:	1ac0      	subs	r0, r0, r3
200016f4:	4152      	adcs	r2, r2
200016f6:	d2d9      	bcs.n	200016ac <__divsi3+0x148>
200016f8:	0843      	lsrs	r3, r0, #1
200016fa:	428b      	cmp	r3, r1
200016fc:	d301      	bcc.n	20001702 <__divsi3+0x19e>
200016fe:	004b      	lsls	r3, r1, #1
20001700:	1ac0      	subs	r0, r0, r3
20001702:	4152      	adcs	r2, r2
20001704:	1a41      	subs	r1, r0, r1
20001706:	d200      	bcs.n	2000170a <__divsi3+0x1a6>
20001708:	4601      	mov	r1, r0
2000170a:	4663      	mov	r3, ip
2000170c:	4152      	adcs	r2, r2
2000170e:	105b      	asrs	r3, r3, #1
20001710:	4610      	mov	r0, r2
20001712:	d301      	bcc.n	20001718 <__divsi3+0x1b4>
20001714:	4240      	negs	r0, r0
20001716:	2b00      	cmp	r3, #0
20001718:	d500      	bpl.n	2000171c <__divsi3+0x1b8>
2000171a:	4249      	negs	r1, r1
2000171c:	4770      	bx	lr
2000171e:	4663      	mov	r3, ip
20001720:	105b      	asrs	r3, r3, #1
20001722:	d300      	bcc.n	20001726 <__divsi3+0x1c2>
20001724:	4240      	negs	r0, r0
20001726:	b501      	push	{r0, lr}
20001728:	2000      	movs	r0, #0
2000172a:	f000 f805 	bl	20001738 <__aeabi_idiv0>
2000172e:	bd02      	pop	{r1, pc}

20001730 <__aeabi_idivmod>:
20001730:	2900      	cmp	r1, #0
20001732:	d0f8      	beq.n	20001726 <__divsi3+0x1c2>
20001734:	e716      	b.n	20001564 <__divsi3>
20001736:	4770      	bx	lr

20001738 <__aeabi_idiv0>:
20001738:	4770      	bx	lr
2000173a:	46c0      	nop			; (mov r8, r8)

2000173c <backBuffer>:
	...

2000273c <points>:
2000273c:	00000000 	andeq	r0, r0, r0

20002740 <snakeSize>:
20002740:	00000000 	andeq	r0, r0, r0

20002744 <dead>:
20002744:	00000000 	andeq	r0, r0, r0

20002748 <backBuffer>:
	...

20003748 <front>:
20003748:	00000000 	andeq	r0, r0, r0

2000374c <itemCount>:
2000374c:	00000000 	andeq	r0, r0, r0

20003750 <seed>:
20003750:	00000000 	andeq	r0, r0, r0

20003754 <objArray>:
	...

200038e4 <image_bits>:
200038e4:	aa889494 	bge	1e228b3c <startup-0x1dd74c4>
200038e8:	beebffeb 	cdplt	15, 14, cr15, cr11, cr11, {7}
200038ec:	0000009c 	muleq	r0, ip, r0

200038f0 <snakehead_geometry_LEFT>:
200038f0:	0000000a 	andeq	r0, r0, sl
200038f4:	00000004 	andeq	r0, r0, r4
200038f8:	00000004 	andeq	r0, r0, r4
200038fc:	02000100 	andeq	r0, r0, #0, 2
20003900:	02010101 	andeq	r0, r1, #1073741824	; 0x40000000
20003904:	03020002 	movweq	r0, #8194	; 0x2002
20003908:	01030003 	tsteq	r3, r3
2000390c:	03030203 	movweq	r0, #12803	; 0x3203
	...

2000391c <snakehead_geometry_RIGHT>:
2000391c:	0000000a 	andeq	r0, r0, sl
20003920:	00000004 	andeq	r0, r0, r4
20003924:	00000004 	andeq	r0, r0, r4
20003928:	01000000 	mrseq	r0, (UNDEF: 0)
2000392c:	03000200 	movweq	r0, #512	; 0x200
20003930:	03010001 	movweq	r0, #4097	; 0x1001
20003934:	02020102 	andeq	r0, r2, #-2147483648	; 0x80000000
20003938:	02030103 	andeq	r0, r3, #-1073741824	; 0xc0000000
	...

20003948 <snakehead_geometry_DOWN>:
20003948:	0000000a 	andeq	r0, r0, sl
2000394c:	00000004 	andeq	r0, r0, r4
20003950:	00000004 	andeq	r0, r0, r4
20003954:	01000000 	mrseq	r0, (UNDEF: 0)
20003958:	02010001 	andeq	r0, r1, #1
2000395c:	00020301 	andeq	r0, r2, r1, lsl #6
20003960:	03020202 	movweq	r0, #8706	; 0x2202
20003964:	01030003 	tsteq	r3, r3
	...

20003974 <snakehead_geometry_UP>:
20003974:	0000000a 	andeq	r0, r0, sl
20003978:	00000004 	andeq	r0, r0, r4
2000397c:	00000004 	andeq	r0, r0, r4
20003980:	03000200 	movweq	r0, #512	; 0x200
20003984:	01010001 	tsteq	r1, r1
20003988:	00020301 	andeq	r0, r2, r1, lsl #6
2000398c:	03020102 	movweq	r0, #8450	; 0x2102
20003990:	03030203 	movweq	r0, #12803	; 0x3203
	...

200039a0 <snakebody_geometry>:
200039a0:	00000010 	andeq	r0, r0, r0, lsl r0
200039a4:	00000004 	andeq	r0, r0, r4
200039a8:	00000004 	andeq	r0, r0, r4
200039ac:	01000000 	mrseq	r0, (UNDEF: 0)
200039b0:	03000200 	movweq	r0, #512	; 0x200
200039b4:	01010001 	tsteq	r1, r1
200039b8:	03010201 	movweq	r0, #4609	; 0x1201
200039bc:	01020002 	tsteq	r2, r2
200039c0:	03020202 	movweq	r0, #8706	; 0x2202
200039c4:	01030003 	tsteq	r3, r3
200039c8:	03030203 	movweq	r0, #12803	; 0x3203

200039cc <food_geometry>:
200039cc:	0000000c 	andeq	r0, r0, ip
200039d0:	00000004 	andeq	r0, r0, r4
200039d4:	00000004 	andeq	r0, r0, r4
200039d8:	01000000 	mrseq	r0, (UNDEF: 0)
200039dc:	03000200 	movweq	r0, #512	; 0x200
200039e0:	03010001 	movweq	r0, #4097	; 0x1001
200039e4:	03020002 	movweq	r0, #8194	; 0x2002
200039e8:	01030003 	tsteq	r3, r3
200039ec:	03030203 	movweq	r0, #12803	; 0x3203
	...

200039f8 <food_obj>:
200039f8:	200039cc 	andcs	r3, r0, ip, asr #19
	...
20003a04:	00000001 	andeq	r0, r0, r1
20003a08:	00000001 	andeq	r0, r0, r1
20003a0c:	20000031 	andcs	r0, r0, r1, lsr r0
20003a10:	20000093 	mulcs	r0, r3, r0
20003a14:	200000f5 	strdcs	r0, [r0], -r5
20003a18:	20000011 	andcs	r0, r0, r1, lsl r0

20003a1c <rear>:
20003a1c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20003a20:	20756f59 	rsbscs	r6, r5, r9, asr pc
20003a24:	65766168 	ldrbvs	r6, [r6, #-360]!	; 0xfffffe98
20003a28:	0000203a 	andeq	r2, r0, sl, lsr r0
20003a2c:	454d4147 	strbmi	r4, [sp, #-327]	; 0xfffffeb9
20003a30:	45564f20 	ldrbmi	r4, [r6, #-3872]	; 0xfffff0e0
20003a34:	00000052 	andeq	r0, r0, r2, asr r0
20003a38:	00000000 	andeq	r0, r0, r0
20003a3c:	73657250 	cmnvc	r5, #80, 4
20003a40:	20352073 	eorscs	r2, r5, r3, ror r0
20003a44:	73206f74 			; <UNDEFINED> instruction: 0x73206f74
20003a48:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
20003a4c:	00000000 	andeq	r0, r0, r0
20003a50:	200009ee 	andcs	r0, r0, lr, ror #19
20003a54:	200009ee 	andcs	r0, r0, lr, ror #19
20003a58:	200009b2 			; <UNDEFINED> instruction: 0x200009b2
20003a5c:	200009ee 	andcs	r0, r0, lr, ror #19
20003a60:	200009a4 	andcs	r0, r0, r4, lsr #19
20003a64:	200009ee 	andcs	r0, r0, lr, ror #19
20003a68:	20000996 	mulcs	r0, r6, r9
20003a6c:	200009ee 	andcs	r0, r0, lr, ror #19
20003a70:	200009c0 	andcs	r0, r0, r0, asr #19
20003a74:	200009ee 	andcs	r0, r0, lr, ror #19
20003a78:	200009ce 	andcs	r0, r0, lr, asr #19
20003a7c:	200009ee 	andcs	r0, r0, lr, ror #19
20003a80:	200009ee 	andcs	r0, r0, lr, ror #19
20003a84:	200009e2 	andcs	r0, r0, r2, ror #19
20003a88:	774f5b06 	strbvc	r5, [pc, -r6, lsl #22]
20003a8c:	7c7d6d66 	ldclvc	13, cr6, [sp], #-408	; 0xfffffe68
20003a90:	396f7f07 	stmdbcc	pc!, {r0, r1, r2, r8, r9, sl, fp, ip, sp, lr}^	; <UNPREDICTABLE>
20003a94:	bf713f79 	svclt	0x00713f79
20003a98:	0a030201 	beq	200c42a4 <rear+0xc0888>
20003a9c:	0b060504 	bleq	20184eb4 <rear+0x181498>
20003aa0:	0c090807 	stceq	8, cr0, [r9], {7}
20003aa4:	0d0f000e 	stceq	0, cr0, [pc, #-56]	; 20003a74 <rear+0x58>

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	000011ee 	andeq	r1, r0, lr, ror #3
       4:	00000004 	andeq	r0, r0, r4
       8:	01040000 	mrseq	r0, (UNDEF: 4)
       c:	0000064d 	andeq	r0, r0, sp, asr #12
      10:	0002240c 	andeq	r2, r2, ip, lsl #8
      14:	00040d00 	andeq	r0, r4, r0, lsl #26
	...
      24:	07040200 	streq	r0, [r4, -r0, lsl #4]
      28:	0000007f 	andeq	r0, r0, pc, ror r0
      2c:	00002503 	andeq	r2, r0, r3, lsl #10
      30:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
      34:	00746e69 	rsbseq	r6, r4, r9, ror #28
      38:	00003103 	andeq	r3, r0, r3, lsl #2
      3c:	06010200 	streq	r0, [r1], -r0, lsl #4
      40:	00000431 	andeq	r0, r0, r1, lsr r4
      44:	00003405 	andeq	r3, r0, r5, lsl #8
      48:	182b0200 	stmdane	fp!, {r9}
      4c:	00000050 	andeq	r0, r0, r0, asr r0
      50:	2f080102 	svccs	0x00080102
      54:	02000004 	andeq	r0, r0, #4
      58:	04740502 	ldrbteq	r0, [r4], #-1282	; 0xfffffafe
      5c:	02020000 	andeq	r0, r2, #0
      60:	0002ef07 	andeq	lr, r2, r7, lsl #30
      64:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
      68:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
      6c:	7a070402 	bvc	1c107c <startup-0x1fe3ef84>
      70:	02000000 	andeq	r0, r0, #0
      74:	00fa0508 	rscseq	r0, sl, r8, lsl #10
      78:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
      7c:	00007507 	andeq	r7, r0, r7, lsl #10
      80:	03550500 	cmpeq	r5, #0, 10
      84:	22030000 	andcs	r0, r3, #0
      88:	00008d19 	andeq	r8, r0, r9, lsl sp
      8c:	93040600 	movwls	r0, #17920	; 0x4600
      90:	07000000 	streq	r0, [r0, -r0]
      94:	00000548 	andeq	r0, r0, r8, asr #10
      98:	0003d805 	andeq	sp, r3, r5, lsl #16
      9c:	0e2c0400 	cdpeq	4, 2, cr0, cr12, cr0, {0}
      a0:	00000065 	andeq	r0, r0, r5, rrx
      a4:	00055d05 	andeq	r5, r5, r5, lsl #26
      a8:	0e720400 	cdpeq	4, 7, cr0, cr2, cr0, {0}
      ac:	00000065 	andeq	r0, r0, r5, rrx
      b0:	00035d08 	andeq	r5, r3, r8, lsl #26
      b4:	015e0500 	cmpeq	lr, r0, lsl #10
      b8:	00002517 	andeq	r2, r0, r7, lsl r5
      bc:	04040900 	streq	r0, [r4], #-2304	; 0xfffff700
      c0:	00df03a6 	sbcseq	r0, pc, r6, lsr #7
      c4:	4f0a0000 	svcmi	0x000a0000
      c8:	04000003 	streq	r0, [r0], #-3
      cc:	00b00ca8 	adcseq	r0, r0, r8, lsr #25
      d0:	a20a0000 	andge	r0, sl, #0
      d4:	04000002 	streq	r0, [r0], #-2
      d8:	00df13a9 	sbcseq	r1, pc, r9, lsr #7
      dc:	0b000000 	bleq	e4 <startup-0x1fffff1c>
      e0:	00000050 	andeq	r0, r0, r0, asr r0
      e4:	000000ef 	andeq	r0, r0, pc, ror #1
      e8:	0000250c 	andeq	r2, r0, ip, lsl #10
      ec:	0d000300 	stceq	3, cr0, [r0, #-0]
      f0:	09a30408 	stmibeq	r3!, {r3, sl}
      f4:	00000113 	andeq	r0, r0, r3, lsl r1
      f8:	0005400e 	andeq	r4, r5, lr
      fc:	07a50400 	streq	r0, [r5, r0, lsl #8]!
     100:	00000031 	andeq	r0, r0, r1, lsr r0
     104:	054f0e00 	strbeq	r0, [pc, #-3584]	; fffff30c <rear+0xdfffb8f0>
     108:	aa040000 	bge	100110 <startup-0x1feffef0>
     10c:	0000bd05 	andeq	fp, r0, r5, lsl #26
     110:	05000400 	streq	r0, [r0, #-1024]	; 0xfffffc00
     114:	0000049c 	muleq	r0, ip, r4
     118:	ef03ab04 	svc	0x0003ab04
     11c:	05000000 	streq	r0, [r0, #-0]
     120:	00000256 	andeq	r0, r0, r6, asr r2
     124:	811baf04 	tsthi	fp, r4, lsl #30
     128:	0f000000 	svceq	0x00000000
     12c:	33040604 	movwcc	r0, #17924	; 0x4604
     130:	02000001 	andeq	r0, r0, #1
     134:	04380801 	ldrteq	r0, [r8], #-2049	; 0xfffff7ff
     138:	33100000 	tstcc	r0, #0
     13c:	05000001 	streq	r0, [r0, #-1]
     140:	000005d6 	ldrdeq	r0, [r0], -r6
     144:	6c191606 	ldcvs	6, cr1, [r9], {6}
     148:	11000000 	mrsne	r0, (UNDEF: 0)
     14c:	00000267 	andeq	r0, r0, r7, ror #4
     150:	082f0618 	stmdaeq	pc!, {r3, r4, r9, sl}	; <UNPREDICTABLE>
     154:	000001a5 	andeq	r0, r0, r5, lsr #3
     158:	0004bd0e 	andeq	fp, r4, lr, lsl #26
     15c:	13310600 	teqne	r1, #0, 12
     160:	000001a5 	andeq	r0, r0, r5, lsr #3
     164:	6b5f1200 	blvs	17c496c <startup-0x1e83b694>
     168:	07320600 	ldreq	r0, [r2, -r0, lsl #12]!
     16c:	00000031 	andeq	r0, r0, r1, lsr r0
     170:	05130e04 	ldreq	r0, [r3, #-3588]	; 0xfffff1fc
     174:	32060000 	andcc	r0, r6, #0
     178:	0000310b 	andeq	r3, r0, fp, lsl #2
     17c:	500e0800 	andpl	r0, lr, r0, lsl #16
     180:	06000002 	streq	r0, [r0], -r2
     184:	00311432 	eorseq	r1, r1, r2, lsr r4
     188:	0e0c0000 	cdpeq	0, 0, cr0, cr12, cr0, {0}
     18c:	0000062b 	andeq	r0, r0, fp, lsr #12
     190:	311b3206 	tstcc	fp, r6, lsl #4
     194:	10000000 	andne	r0, r0, r0
     198:	00785f12 	rsbseq	r5, r8, r2, lsl pc
     19c:	ab0b3306 	blge	2ccdbc <startup-0x1fd33244>
     1a0:	14000001 	strne	r0, [r0], #-1
     1a4:	4b040600 	blmi	1019ac <startup-0x1fefe654>
     1a8:	0b000001 	bleq	1b4 <startup-0x1ffffe4c>
     1ac:	0000013f 	andeq	r0, r0, pc, lsr r1
     1b0:	000001bb 			; <UNDEFINED> instruction: 0x000001bb
     1b4:	0000250c 	andeq	r2, r0, ip, lsl #10
     1b8:	11000000 	mrsne	r0, (UNDEF: 0)
     1bc:	00000288 	andeq	r0, r0, r8, lsl #5
     1c0:	08370624 	ldmdaeq	r7!, {r2, r5, r9, sl}
     1c4:	0000023e 	andeq	r0, r0, lr, lsr r2
     1c8:	0000e40e 	andeq	lr, r0, lr, lsl #8
     1cc:	09390600 	ldmdbeq	r9!, {r9, sl}
     1d0:	00000031 	andeq	r0, r0, r1, lsr r0
     1d4:	05650e00 	strbeq	r0, [r5, #-3584]!	; 0xfffff200
     1d8:	3a060000 	bcc	1801e0 <startup-0x1fe7fe20>
     1dc:	00003109 	andeq	r3, r0, r9, lsl #2
     1e0:	320e0400 	andcc	r0, lr, #0, 8
     1e4:	06000001 	streq	r0, [r0], -r1
     1e8:	0031093b 	eorseq	r0, r1, fp, lsr r9
     1ec:	0e080000 	cdpeq	0, 0, cr0, cr8, cr0, {0}
     1f0:	00000755 	andeq	r0, r0, r5, asr r7
     1f4:	31093c06 	tstcc	r9, r6, lsl #24
     1f8:	0c000000 	stceq	0, cr0, [r0], {-0}
     1fc:	0003b20e 	andeq	fp, r3, lr, lsl #4
     200:	093d0600 	ldmdbeq	sp!, {r9, sl}
     204:	00000031 	andeq	r0, r0, r1, lsr r0
     208:	036c0e10 	cmneq	ip, #16, 28	; 0x100
     20c:	3e060000 	cdpcc	0, 0, cr0, cr6, cr0, {0}
     210:	00003109 	andeq	r3, r0, r9, lsl #2
     214:	300e1400 	andcc	r1, lr, r0, lsl #8
     218:	06000006 	streq	r0, [r0], -r6
     21c:	0031093f 	eorseq	r0, r1, pc, lsr r9
     220:	0e180000 	cdpeq	0, 1, cr0, cr8, cr0, {0}
     224:	0000047e 	andeq	r0, r0, lr, ror r4
     228:	31094006 	tstcc	r9, r6
     22c:	1c000000 	stcne	0, cr0, [r0], {-0}
     230:	0006fa0e 	andeq	pc, r6, lr, lsl #20
     234:	09410600 	stmdbeq	r1, {r9, sl}^
     238:	00000031 	andeq	r0, r0, r1, lsr r0
     23c:	54130020 	ldrpl	r0, [r3], #-32	; 0xffffffe0
     240:	08000001 	stmdaeq	r0, {r0}
     244:	084a0601 	stmdaeq	sl, {r0, r9, sl}^
     248:	00000283 	andeq	r0, r0, r3, lsl #5
     24c:	0002070e 	andeq	r0, r2, lr, lsl #14
     250:	0a4b0600 	beq	12c1a58 <startup-0x1ed3e5a8>
     254:	00000283 	andeq	r0, r0, r3, lsl #5
     258:	00000e00 	andeq	r0, r0, r0, lsl #28
     25c:	4c060000 	stcmi	0, cr0, [r6], {-0}
     260:	00028309 	andeq	r8, r2, r9, lsl #6
     264:	9e148000 	cdpls	0, 1, cr8, cr4, cr0, {0}
     268:	06000005 	streq	r0, [r0], -r5
     26c:	013f0a4e 	teqeq	pc, lr, asr #20
     270:	01000000 	mrseq	r0, (UNDEF: 0)
     274:	00018c14 	andeq	r8, r1, r4, lsl ip
     278:	0a510600 	beq	1441a80 <startup-0x1ebbe580>
     27c:	0000013f 	andeq	r0, r0, pc, lsr r1
     280:	0b000104 	bleq	698 <startup-0x1ffff968>
     284:	0000012b 	andeq	r0, r0, fp, lsr #2
     288:	00000293 	muleq	r0, r3, r2
     28c:	0000250c 	andeq	r2, r0, ip, lsl #10
     290:	13001f00 	movwne	r1, #3840	; 0xf00
     294:	000003bb 			; <UNDEFINED> instruction: 0x000003bb
     298:	5d060190 	stfpls	f0, [r6, #-576]	; 0xfffffdc0
     29c:	0002d608 	andeq	sp, r2, r8, lsl #12
     2a0:	04bd0e00 	ldrteq	r0, [sp], #3584	; 0xe00
     2a4:	5e060000 	cdppl	0, 0, cr0, cr6, cr0, {0}
     2a8:	0002d612 	andeq	sp, r2, r2, lsl r6
     2ac:	d50e0000 	strle	r0, [lr, #-0]
     2b0:	06000004 	streq	r0, [r0], -r4
     2b4:	0031065f 	eorseq	r0, r1, pc, asr r6
     2b8:	0e040000 	cdpeq	0, 0, cr0, cr4, cr0, {0}
     2bc:	0000021f 	andeq	r0, r0, pc, lsl r2
     2c0:	dc096106 	stfles	f6, [r9], {6}
     2c4:	08000002 	stmdaeq	r0, {r1}
     2c8:	0001540e 	andeq	r5, r1, lr, lsl #8
     2cc:	1e620600 	cdpne	6, 6, cr0, cr2, cr0, {0}
     2d0:	0000023e 	andeq	r0, r0, lr, lsr r2
     2d4:	04060088 	streq	r0, [r6], #-136	; 0xffffff78
     2d8:	00000293 	muleq	r0, r3, r2
     2dc:	0002ec0b 	andeq	lr, r2, fp, lsl #24
     2e0:	0002ec00 	andeq	lr, r2, r0, lsl #24
     2e4:	00250c00 	eoreq	r0, r5, r0, lsl #24
     2e8:	001f0000 	andseq	r0, pc, r0
     2ec:	02f20406 	rscseq	r0, r2, #100663296	; 0x6000000
     2f0:	11150000 	tstne	r5, r0
     2f4:	00000488 	andeq	r0, r0, r8, lsl #9
     2f8:	08750608 	ldmdaeq	r5!, {r3, r9, sl}^
     2fc:	0000031b 	andeq	r0, r0, fp, lsl r3
     300:	0001270e 	andeq	r2, r1, lr, lsl #14
     304:	11760600 	cmnne	r6, r0, lsl #12
     308:	0000031b 	andeq	r0, r0, fp, lsl r3
     30c:	000c0e00 	andeq	r0, ip, r0, lsl #28
     310:	77060000 	strvc	r0, [r6, -r0]
     314:	00003106 	andeq	r3, r0, r6, lsl #2
     318:	06000400 	streq	r0, [r0], -r0, lsl #8
     31c:	00005004 	andeq	r5, r0, r4
     320:	04a71100 	strteq	r1, [r7], #256	; 0x100
     324:	06680000 	strbteq	r0, [r8], -r0
     328:	046408b5 	strbteq	r0, [r4], #-2229	; 0xfffff74b
     32c:	5f120000 	svcpl	0x00120000
     330:	b6060070 			; <UNDEFINED> instruction: 0xb6060070
     334:	00031b12 	andeq	r1, r3, r2, lsl fp
     338:	5f120000 	svcpl	0x00120000
     33c:	b7060072 	smlsdxlt	r6, r2, r0, r0
     340:	00003107 	andeq	r3, r0, r7, lsl #2
     344:	5f120400 	svcpl	0x00120400
     348:	b8060077 	stmdalt	r6, {r0, r1, r2, r4, r5, r6}
     34c:	00003107 	andeq	r3, r0, r7, lsl #2
     350:	850e0800 	strhi	r0, [lr, #-2048]	; 0xfffff800
     354:	06000001 	streq	r0, [r0], -r1
     358:	005709b9 	ldrheq	r0, [r7], #-153	; 0xffffff67
     35c:	0e0c0000 	cdpeq	0, 0, cr0, cr12, cr0, {0}
     360:	000002c0 	andeq	r0, r0, r0, asr #5
     364:	5709ba06 	strpl	fp, [r9, -r6, lsl #20]
     368:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
     36c:	66625f12 	uqadd16vs	r5, r2, r2
     370:	11bb0600 			; <UNDEFINED> instruction: 0x11bb0600
     374:	000002f3 	strdeq	r0, [r0], -r3
     378:	00960e10 	addseq	r0, r6, r0, lsl lr
     37c:	bc060000 	stclt	0, cr0, [r6], {-0}
     380:	00003107 	andeq	r3, r0, r7, lsl #2
     384:	620e1800 	andvs	r1, lr, #0, 16
     388:	06000001 	streq	r0, [r0], -r1
     38c:	012b0ac3 	smlawteq	fp, r3, sl, r0
     390:	0e1c0000 	cdpeq	0, 1, cr0, cr12, cr0, {0}
     394:	00000798 	muleq	r0, r8, r7
     398:	d61dc506 	ldrle	ip, [sp], -r6, lsl #10
     39c:	20000005 	andcs	r0, r0, r5
     3a0:	0007f50e 	andeq	pc, r7, lr, lsl #10
     3a4:	1dc70600 	stclne	6, cr0, [r7]
     3a8:	00000600 	andeq	r0, r0, r0, lsl #12
     3ac:	05570e24 	ldrbeq	r0, [r7, #-3620]	; 0xfffff1dc
     3b0:	ca060000 	bgt	1803b8 <startup-0x1fe7fc48>
     3b4:	0006240d 	andeq	r2, r6, sp, lsl #8
     3b8:	140e2800 	strne	r2, [lr], #-2048	; 0xfffff800
     3bc:	06000007 	streq	r0, [r0], -r7
     3c0:	063e09cb 	ldrteq	r0, [lr], -fp, asr #19
     3c4:	122c0000 	eorne	r0, ip, #0
     3c8:	0062755f 	rsbeq	r7, r2, pc, asr r5
     3cc:	f311ce06 	vcge.f16	d12, d1, d6
     3d0:	30000002 	andcc	r0, r0, r2
     3d4:	70755f12 	rsbsvc	r5, r5, r2, lsl pc
     3d8:	12cf0600 	sbcne	r0, pc, #0, 12
     3dc:	0000031b 	andeq	r0, r0, fp, lsl r3
     3e0:	755f1238 	ldrbvc	r1, [pc, #-568]	; 1b0 <startup-0x1ffffe50>
     3e4:	d0060072 	andle	r0, r6, r2, ror r0
     3e8:	00003107 	andeq	r3, r0, r7, lsl #2
     3ec:	210e3c00 	tstcs	lr, r0, lsl #24
     3f0:	06000001 	streq	r0, [r0], -r1
     3f4:	064411d3 			; <UNDEFINED> instruction: 0x064411d3
     3f8:	0e400000 	cdpeq	0, 4, cr0, cr0, cr0, {0}
     3fc:	000006e2 	andeq	r0, r0, r2, ror #13
     400:	5411d406 	ldrpl	sp, [r1], #-1030	; 0xfffffbfa
     404:	43000006 	movwmi	r0, #6
     408:	626c5f12 	rsbvs	r5, ip, #18, 30	; 0x48
     40c:	11d70600 	bicsne	r0, r7, r0, lsl #12
     410:	000002f3 	strdeq	r0, [r0], -r3
     414:	01b10e44 			; <UNDEFINED> instruction: 0x01b10e44
     418:	da060000 	ble	180420 <startup-0x1fe7fbe0>
     41c:	00003107 	andeq	r3, r0, r7, lsl #2
     420:	da0e4c00 	ble	393428 <startup-0x1fc6cbd8>
     424:	06000001 	streq	r0, [r0], -r1
     428:	00980adb 			; <UNDEFINED> instruction: 0x00980adb
     42c:	0e500000 	cdpeq	0, 5, cr0, cr0, cr0, {0}
     430:	0000078b 	andeq	r0, r0, fp, lsl #15
     434:	8212de06 	andshi	sp, r2, #6, 28	; 0x60
     438:	54000004 	strpl	r0, [r0], #-4
     43c:	0005490e 	andeq	r4, r5, lr, lsl #18
     440:	0ce20600 	stcleq	6, cr0, [r2]
     444:	0000011f 	andeq	r0, r0, pc, lsl r1
     448:	04af0e58 	strteq	r0, [pc], #3672	; 450 <startup-0x1ffffbb0>
     44c:	e4060000 	str	r0, [r6], #-0
     450:	0001130e 	andeq	r1, r1, lr, lsl #6
     454:	640e5c00 	strvs	r5, [lr], #-3072	; 0xfffff400
     458:	06000003 	streq	r0, [r0], -r3
     45c:	003109e5 	eorseq	r0, r1, r5, ror #19
     460:	00640000 	rsbeq	r0, r4, r0
     464:	00003116 	andeq	r3, r0, r6, lsl r1
     468:	00048200 	andeq	r8, r4, r0, lsl #4
     46c:	04821700 	streq	r1, [r2], #1792	; 0x700
     470:	2b170000 	blcs	5c0478 <startup-0x1fa3fb88>
     474:	17000001 	strne	r0, [r0, -r1]
     478:	0000012d 	andeq	r0, r0, sp, lsr #2
     47c:	00003117 	andeq	r3, r0, r7, lsl r1
     480:	04060000 	streq	r0, [r6], #-0
     484:	0000048d 	andeq	r0, r0, sp, lsl #9
     488:	00048210 	andeq	r8, r4, r0, lsl r2
     48c:	051b1800 	ldreq	r1, [fp, #-2048]	; 0xfffff800
     490:	04280000 	strteq	r0, [r8], #-0
     494:	08026006 	stmdaeq	r2, {r1, r2, sp, lr}
     498:	000005d6 	ldrdeq	r0, [r0], -r6
     49c:	00046d19 	andeq	r6, r4, r9, lsl sp
     4a0:	02620600 	rsbeq	r0, r2, #0, 12
     4a4:	00003107 	andeq	r3, r0, r7, lsl #2
     4a8:	94190000 	ldrls	r0, [r9], #-0
     4ac:	06000001 	streq	r0, [r0], -r1
     4b0:	b00b0267 	andlt	r0, fp, r7, ror #4
     4b4:	04000006 	streq	r0, [r0], #-6
     4b8:	0002a919 	andeq	sl, r2, r9, lsl r9
     4bc:	02670600 	rsbeq	r0, r7, #0, 12
     4c0:	0006b014 	andeq	fp, r6, r4, lsl r0
     4c4:	5f190800 	svcpl	0x00190800
     4c8:	06000002 	streq	r0, [r0], -r2
     4cc:	b01e0267 	andslt	r0, lr, r7, ror #4
     4d0:	0c000006 	stceq	0, cr0, [r0], {6}
     4d4:	0004d019 	andeq	sp, r4, r9, lsl r0
     4d8:	02690600 	rsbeq	r0, r9, #0, 12
     4dc:	00003108 	andeq	r3, r0, r8, lsl #2
     4e0:	24191000 	ldrcs	r1, [r9], #-0
     4e4:	06000000 	streq	r0, [r0], -r0
     4e8:	b008026a 	andlt	r0, r8, sl, ror #4
     4ec:	14000008 	strne	r0, [r0], #-8
     4f0:	0004fa19 	andeq	pc, r4, r9, lsl sl	; <UNPREDICTABLE>
     4f4:	026d0600 	rsbeq	r0, sp, #0, 12
     4f8:	00003107 	andeq	r3, r0, r7, lsl #2
     4fc:	e8193000 	ldmda	r9, {ip, sp}
     500:	06000004 	streq	r0, [r0], -r4
     504:	c516026e 	ldrgt	r0, [r6, #-622]	; 0xfffffd92
     508:	34000008 	strcc	r0, [r0], #-8
     50c:	0003cd19 	andeq	ip, r3, r9, lsl sp
     510:	02700600 	rsbseq	r0, r0, #0, 12
     514:	00003107 	andeq	r3, r0, r7, lsl #2
     518:	f0193800 			; <UNDEFINED> instruction: 0xf0193800
     51c:	06000004 	streq	r0, [r0], -r4
     520:	d60a0272 			; <UNDEFINED> instruction: 0xd60a0272
     524:	3c000008 	stccc	0, cr0, [r0], {8}
     528:	00034719 	andeq	r4, r3, r9, lsl r7
     52c:	02750600 	rsbseq	r0, r5, #0, 12
     530:	0001a513 	andeq	sl, r1, r3, lsl r5
     534:	7e194000 	cdpvc	0, 1, cr4, cr9, cr0, {0}
     538:	06000002 	streq	r0, [r0], -r2
     53c:	31070276 	tstcc	r7, r6, ror r2
     540:	44000000 	strmi	r0, [r0], #-0
     544:	00073419 	andeq	r3, r7, r9, lsl r4
     548:	02770600 	rsbseq	r0, r7, #0, 12
     54c:	0001a513 	andeq	sl, r1, r3, lsl r5
     550:	e9194800 	ldmdb	r9, {fp, lr}
     554:	06000003 	streq	r0, [r0], -r3
     558:	dc140278 	lfmle	f0, 4, [r4], {120}	; 0x78
     55c:	4c000008 	stcmi	0, cr0, [r0], {8}
     560:	0002b819 	andeq	fp, r2, r9, lsl r8
     564:	027b0600 	rsbseq	r0, fp, #0, 12
     568:	00003107 	andeq	r3, r0, r7, lsl #2
     56c:	d2195000 	andsle	r5, r9, #0
     570:	06000001 	streq	r0, [r0], -r1
     574:	2d09027c 	sfmcs	f0, 4, [r9, #-496]	; 0xfffffe10
     578:	54000001 	strpl	r0, [r0], #-1
     57c:	00043d19 	andeq	r3, r4, r9, lsl sp
     580:	029f0600 	addseq	r0, pc, #0, 12
     584:	00088b07 	andeq	r8, r8, r7, lsl #22
     588:	bb1a5800 	bllt	696590 <startup-0x1f969a70>
     58c:	06000003 	streq	r0, [r0], -r3
     590:	d61302a3 	ldrle	r0, [r3], -r3, lsr #5
     594:	48000002 	stmdami	r0, {r1}
     598:	03171a01 	tsteq	r7, #4096	; 0x1000
     59c:	a4060000 	strge	r0, [r6], #-0
     5a0:	02931202 	addseq	r1, r3, #536870912	; 0x20000000
     5a4:	014c0000 	mrseq	r0, (UNDEF: 76)
     5a8:	0006d31a 	andeq	sp, r6, sl, lsl r3
     5ac:	02a80600 	adceq	r0, r8, #0, 12
     5b0:	0008ed0c 	andeq	lr, r8, ip, lsl #26
     5b4:	1a02dc00 	bne	b75bc <startup-0x1ff48a44>
     5b8:	0000016a 	andeq	r0, r0, sl, ror #2
     5bc:	1002ad06 	andne	sl, r2, r6, lsl #26
     5c0:	00000671 	andeq	r0, r0, r1, ror r6
     5c4:	4f1a02e0 	svcmi	0x001a02e0
     5c8:	06000001 	streq	r0, [r0], -r1
     5cc:	f90a02af 			; <UNDEFINED> instruction: 0xf90a02af
     5d0:	ec000008 	stc	0, cr0, [r0], {8}
     5d4:	04060002 	streq	r0, [r6], #-2
     5d8:	00000464 	andeq	r0, r0, r4, ror #8
     5dc:	00003116 	andeq	r3, r0, r6, lsl r1
     5e0:	0005fa00 	andeq	pc, r5, r0, lsl #20
     5e4:	04821700 	streq	r1, [r2], #1792	; 0x700
     5e8:	2b170000 	blcs	5c05f0 <startup-0x1fa3fa10>
     5ec:	17000001 	strne	r0, [r0, -r1]
     5f0:	000005fa 	strdeq	r0, [r0], -sl
     5f4:	00003117 	andeq	r3, r0, r7, lsl r1
     5f8:	04060000 	streq	r0, [r6], #-0
     5fc:	0000013a 	andeq	r0, r0, sl, lsr r1
     600:	05dc0406 	ldrbeq	r0, [ip, #1030]	; 0x406
     604:	a4160000 	ldrge	r0, [r6], #-0
     608:	24000000 	strcs	r0, [r0], #-0
     60c:	17000006 	strne	r0, [r0, -r6]
     610:	00000482 	andeq	r0, r0, r2, lsl #9
     614:	00012b17 	andeq	r2, r1, r7, lsl fp
     618:	00a41700 	adceq	r1, r4, r0, lsl #14
     61c:	31170000 	tstcc	r7, r0
     620:	00000000 	andeq	r0, r0, r0
     624:	06060406 	streq	r0, [r6], -r6, lsl #8
     628:	31160000 	tstcc	r6, r0
     62c:	3e000000 	cdpcc	0, 0, cr0, cr0, cr0, {0}
     630:	17000006 	strne	r0, [r0, -r6]
     634:	00000482 	andeq	r0, r0, r2, lsl #9
     638:	00012b17 	andeq	r2, r1, r7, lsl fp
     63c:	04060000 	streq	r0, [r6], #-0
     640:	0000062a 	andeq	r0, r0, sl, lsr #12
     644:	0000500b 	andeq	r5, r0, fp
     648:	00065400 	andeq	r5, r6, r0, lsl #8
     64c:	00250c00 	eoreq	r0, r5, r0, lsl #24
     650:	00020000 	andeq	r0, r2, r0
     654:	0000500b 	andeq	r5, r0, fp
     658:	00066400 	andeq	r6, r6, r0, lsl #8
     65c:	00250c00 	eoreq	r0, r5, r0, lsl #24
     660:	00000000 	andeq	r0, r0, r0
     664:	00049508 	andeq	r9, r4, r8, lsl #10
     668:	011f0600 	tsteq	pc, r0, lsl #12
     66c:	0003211a 	andeq	r2, r3, sl, lsl r1
     670:	063a1b00 	ldrteq	r1, [sl], -r0, lsl #22
     674:	060c0000 	streq	r0, [ip], -r0
     678:	aa080123 	bge	200b0c <startup-0x1fdff4f4>
     67c:	19000006 	stmdbne	r0, {r1, r2}
     680:	000004bd 			; <UNDEFINED> instruction: 0x000004bd
     684:	11012506 	tstne	r1, r6, lsl #10
     688:	000006aa 	andeq	r0, r0, sl, lsr #13
     68c:	02db1900 	sbcseq	r1, fp, #0, 18
     690:	26060000 	strcs	r0, [r6], -r0
     694:	00310701 	eorseq	r0, r1, r1, lsl #14
     698:	19040000 	stmdbne	r4, {}	; <UNPREDICTABLE>
     69c:	0000048f 	andeq	r0, r0, pc, lsl #9
     6a0:	0b012706 	bleq	4a2c0 <startup-0x1ffb5d40>
     6a4:	000006b0 			; <UNDEFINED> instruction: 0x000006b0
     6a8:	04060008 	streq	r0, [r6], #-8
     6ac:	00000671 	andeq	r0, r0, r1, ror r6
     6b0:	06640406 	strbteq	r0, [r4], -r6, lsl #8
     6b4:	1c1b0000 	ldcne	0, cr0, [fp], {-0}
     6b8:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
     6bc:	08013f06 	stmdaeq	r1, {r1, r2, r8, r9, sl, fp, ip, sp}
     6c0:	000006ef 	andeq	r0, r0, pc, ror #13
     6c4:	00052219 	andeq	r2, r5, r9, lsl r2
     6c8:	01400600 	cmpeq	r0, r0, lsl #12
     6cc:	0006ef12 	andeq	lr, r6, r2, lsl pc
     6d0:	8b190000 	blhi	6406d8 <startup-0x1f9bf928>
     6d4:	06000005 	streq	r0, [r0], -r5
     6d8:	ef120141 	svc	0x00120141
     6dc:	06000006 	streq	r0, [r0], -r6
     6e0:	0005b819 	andeq	fp, r5, r9, lsl r8
     6e4:	01420600 	cmpeq	r2, r0, lsl #12
     6e8:	00005e12 	andeq	r5, r0, r2, lsl lr
     6ec:	0b000c00 	bleq	36f4 <startup-0x1fffc90c>
     6f0:	0000005e 	andeq	r0, r0, lr, asr r0
     6f4:	000006ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
     6f8:	0000250c 	andeq	r2, r0, ip, lsl #10
     6fc:	1c000200 	sfmne	f0, 4, [r0], {-0}
     700:	028006d0 	addeq	r0, r0, #208, 12	; 0xd000000
     704:	00081407 	andeq	r1, r8, r7, lsl #8
     708:	06181900 	ldreq	r1, [r8], -r0, lsl #18
     70c:	82060000 	andhi	r0, r6, #0
     710:	00251802 	eoreq	r1, r5, r2, lsl #16
     714:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
     718:	00000591 	muleq	r0, r1, r5
     71c:	12028306 	andne	r8, r2, #402653184	; 0x18000000
     720:	0000012d 	andeq	r0, r0, sp, lsr #2
     724:	032c1904 			; <UNDEFINED> instruction: 0x032c1904
     728:	84060000 	strhi	r0, [r6], #-0
     72c:	08141002 	ldmdaeq	r4, {r1, ip}
     730:	19080000 	stmdbne	r8, {}	; <UNPREDICTABLE>
     734:	00000705 	andeq	r0, r0, r5, lsl #14
     738:	17028506 	strne	r8, [r2, -r6, lsl #10]
     73c:	000001bb 			; <UNDEFINED> instruction: 0x000001bb
     740:	026f1924 	rsbeq	r1, pc, #36, 18	; 0x90000
     744:	86060000 	strhi	r0, [r6], -r0
     748:	00310f02 	eorseq	r0, r1, r2, lsl #30
     74c:	19480000 	stmdbne	r8, {}^	; <UNPREDICTABLE>
     750:	000004b8 			; <UNDEFINED> instruction: 0x000004b8
     754:	2c028706 	stccs	7, cr8, [r2], {6}
     758:	0000007a 	andeq	r0, r0, sl, ror r0
     75c:	07211950 			; <UNDEFINED> instruction: 0x07211950
     760:	88060000 	stmdahi	r6, {}	; <UNPREDICTABLE>
     764:	06b61a02 	ldrteq	r1, [r6], r2, lsl #20
     768:	19580000 	ldmdbne	r8, {}^	; <UNPREDICTABLE>
     76c:	000004c3 	andeq	r0, r0, r3, asr #9
     770:	16028906 	strne	r8, [r2], -r6, lsl #18
     774:	00000113 	andeq	r0, r0, r3, lsl r1
     778:	07261968 	streq	r1, [r6, -r8, ror #18]!
     77c:	8a060000 	bhi	180784 <startup-0x1fe7f87c>
     780:	01131602 	tsteq	r3, r2, lsl #12
     784:	19700000 	ldmdbne	r0!, {}^	; <UNPREDICTABLE>
     788:	000003f3 	strdeq	r0, [r0], -r3
     78c:	16028b06 	strne	r8, [r2], -r6, lsl #22
     790:	00000113 	andeq	r0, r0, r3, lsl r1
     794:	06c91978 			; <UNDEFINED> instruction: 0x06c91978
     798:	8c060000 	stchi	0, cr0, [r6], {-0}
     79c:	08241002 	stmdaeq	r4!, {r1, ip}
     7a0:	19800000 	stmibne	r0, {}	; <UNPREDICTABLE>
     7a4:	00000320 	andeq	r0, r0, r0, lsr #6
     7a8:	10028d06 	andne	r8, r2, r6, lsl #26
     7ac:	00000834 	andeq	r0, r0, r4, lsr r8
     7b0:	05de1988 	ldrbeq	r1, [lr, #2440]	; 0x988
     7b4:	8e060000 	cdphi	0, 0, cr0, cr6, cr0, {0}
     7b8:	00310f02 	eorseq	r0, r1, r2, lsl #30
     7bc:	19a00000 	stmibne	r0!, {}	; <UNPREDICTABLE>
     7c0:	000001f9 	strdeq	r0, [r0], -r9
     7c4:	16028f06 	strne	r8, [r2], -r6, lsl #30
     7c8:	00000113 	andeq	r0, r0, r3, lsl r1
     7cc:	00d519a4 	sbcseq	r1, r5, r4, lsr #19
     7d0:	90060000 	andls	r0, r6, r0
     7d4:	01131602 	tsteq	r3, r2, lsl #12
     7d8:	19ac0000 	stmibne	ip!, {}	; <UNPREDICTABLE>
     7dc:	000001e2 	andeq	r0, r0, r2, ror #3
     7e0:	16029106 	strne	r9, [r2], -r6, lsl #2
     7e4:	00000113 	andeq	r0, r0, r3, lsl r1
     7e8:	005519b4 	ldrheq	r1, [r5], #-148	; 0xffffff6c
     7ec:	92060000 	andls	r0, r6, #0
     7f0:	01131602 	tsteq	r3, r2, lsl #12
     7f4:	19bc0000 	ldmibne	ip!, {}	; <UNPREDICTABLE>
     7f8:	00000064 	andeq	r0, r0, r4, rrx
     7fc:	16029306 	strne	r9, [r2], -r6, lsl #6
     800:	00000113 	andeq	r0, r0, r3, lsl r1
     804:	046b19c4 	strbteq	r1, [fp], #-2500	; 0xfffff63c
     808:	94060000 	strls	r0, [r6], #-0
     80c:	00310802 	eorseq	r0, r1, r2, lsl #16
     810:	00cc0000 	sbceq	r0, ip, r0
     814:	0001330b 	andeq	r3, r1, fp, lsl #6
     818:	00082400 	andeq	r2, r8, r0, lsl #8
     81c:	00250c00 	eoreq	r0, r5, r0, lsl #24
     820:	00190000 	andseq	r0, r9, r0
     824:	0001330b 	andeq	r3, r1, fp, lsl #6
     828:	00083400 	andeq	r3, r8, r0, lsl #8
     82c:	00250c00 	eoreq	r0, r5, r0, lsl #24
     830:	00070000 	andeq	r0, r7, r0
     834:	0001330b 	andeq	r3, r1, fp, lsl #6
     838:	00084400 	andeq	r4, r8, r0, lsl #8
     83c:	00250c00 	eoreq	r0, r5, r0, lsl #24
     840:	00170000 	andseq	r0, r7, r0
     844:	9906f01c 	stmdbls	r6, {r2, r3, r4, ip, sp, lr, pc}
     848:	086b0702 	stmdaeq	fp!, {r1, r8, r9, sl}^
     84c:	ab190000 	blge	640854 <startup-0x1f9bf7ac>
     850:	06000003 	streq	r0, [r0], -r3
     854:	6b1b029c 	blvs	6c12cc <startup-0x1f93ed34>
     858:	00000008 	andeq	r0, r0, r8
     85c:	00038319 	andeq	r8, r3, r9, lsl r3
     860:	029d0600 	addseq	r0, sp, #0, 12
     864:	00087b18 	andeq	r7, r8, r8, lsl fp
     868:	0b007800 	bleq	1e870 <startup-0x1ffe1790>
     86c:	0000031b 	andeq	r0, r0, fp, lsl r3
     870:	0000087b 	andeq	r0, r0, fp, ror r8
     874:	0000250c 	andeq	r2, r0, ip, lsl #10
     878:	0b001d00 	bleq	7c80 <startup-0x1fff8380>
     87c:	00000025 	andeq	r0, r0, r5, lsr #32
     880:	0000088b 	andeq	r0, r0, fp, lsl #17
     884:	0000250c 	andeq	r2, r0, ip, lsl #10
     888:	1d001d00 	stcne	13, cr1, [r0, #-0]
     88c:	027e06f0 	rsbseq	r0, lr, #240, 12	; 0xf000000
     890:	0008b003 	andeq	fp, r8, r3
     894:	051b1e00 	ldreq	r1, [fp, #-3584]	; 0xfffff200
     898:	95060000 	strls	r0, [r6, #-0]
     89c:	06ff0b02 	ldrbteq	r0, [pc], r2, lsl #22
     8a0:	e81e0000 	ldmda	lr, {}	; <UNPREDICTABLE>
     8a4:	06000006 	streq	r0, [r0], -r6
     8a8:	440b029e 	strmi	r0, [fp], #-670	; 0xfffffd62
     8ac:	00000008 	andeq	r0, r0, r8
     8b0:	0001330b 	andeq	r3, r1, fp, lsl #6
     8b4:	0008c000 	andeq	ip, r8, r0
     8b8:	00250c00 	eoreq	r0, r5, r0, lsl #24
     8bc:	00180000 	andseq	r0, r8, r0
     8c0:	0000a607 	andeq	sl, r0, r7, lsl #12
     8c4:	c0040600 	andgt	r0, r4, r0, lsl #12
     8c8:	1f000008 	svcne	0x00000008
     8cc:	000008d6 	ldrdeq	r0, [r0], -r6
     8d0:	00048217 	andeq	r8, r4, r7, lsl r2
     8d4:	04060000 	streq	r0, [r6], #-0
     8d8:	000008cb 	andeq	r0, r0, fp, asr #17
     8dc:	01a50406 			; <UNDEFINED> instruction: 0x01a50406
     8e0:	ed1f0000 	ldc	0, cr0, [pc, #-0]	; 8e8 <startup-0x1ffff718>
     8e4:	17000008 	strne	r0, [r0, -r8]
     8e8:	00000031 	andeq	r0, r0, r1, lsr r0
     8ec:	f3040600 	vmax.u8	d0, d4, d0
     8f0:	06000008 	streq	r0, [r0], -r8
     8f4:	0008e204 	andeq	lr, r8, r4, lsl #4
     8f8:	06640b00 	strbteq	r0, [r4], -r0, lsl #22
     8fc:	09090000 	stmdbeq	r9, {}	; <UNPREDICTABLE>
     900:	250c0000 	strcs	r0, [ip, #-0]
     904:	02000000 	andeq	r0, r0, #0
     908:	05ff2000 	ldrbeq	r2, [pc, #0]!	; 910 <startup-0x1ffff6f0>
     90c:	2e060000 	cdpcs	0, 0, cr0, cr6, cr0, {0}
     910:	04821703 	streq	r1, [r2], #1795	; 0x703
     914:	f8200000 			; <UNDEFINED> instruction: 0xf8200000
     918:	06000005 	streq	r0, [r0], -r5
     91c:	881d032f 	ldmdahi	sp, {r0, r1, r2, r3, r5, r8, r9}
     920:	05000004 	streq	r0, [r0, #-4]
     924:	00000036 	andeq	r0, r0, r6, lsr r0
     928:	44131807 	ldrmi	r1, [r3], #-2055	; 0xfffff7f9
     92c:	0b000000 	bleq	934 <startup-0x1ffff6cc>
     930:	0000002c 	andeq	r0, r0, ip, lsr #32
     934:	00000940 	andeq	r0, r0, r0, asr #18
     938:	00002521 	andeq	r2, r0, r1, lsr #10
     93c:	0003ff00 	andeq	pc, r3, r0, lsl #30
     940:	00092f03 	andeq	r2, r9, r3, lsl #30
     944:	020f2200 	andeq	r2, pc, #0, 4
     948:	0f090000 	svceq	0x00090000
     94c:	0009401e 	andeq	r4, r9, lr, lsl r0
     950:	3c030500 	cfstr32cc	mvfx0, [r3], {-0}
     954:	11200017 			; <UNDEFINED> instruction: 0x11200017
     958:	00000646 	andeq	r0, r0, r6, asr #12
     95c:	10010802 	andne	r0, r1, r2, lsl #16
     960:	0000097b 	andeq	r0, r0, fp, ror r9
     964:	08007812 	stmdaeq	r0, {r1, r4, fp, ip, sp, lr}
     968:	00501302 	subseq	r1, r0, r2, lsl #6
     96c:	12000000 	andne	r0, r0, #0
     970:	03080079 	movweq	r0, #32889	; 0x8079
     974:	00005013 	andeq	r5, r0, r3, lsl r0
     978:	05000100 	streq	r0, [r0, #-256]	; 0xffffff00
     97c:	000001f3 	strdeq	r0, [r0], -r3
     980:	57020408 	strpl	r0, [r2, -r8, lsl #8]
     984:	11000009 	tstne	r0, r9
     988:	00000012 	andeq	r0, r0, r2, lsl r0
     98c:	1008082c 	andne	r0, r8, ip, lsr #16
     990:	000009c8 	andeq	r0, r0, r8, asr #19
     994:	0001170e 	andeq	r1, r1, lr, lsl #14
     998:	09090800 	stmdbeq	r9, {fp}
     99c:	00000031 	andeq	r0, r0, r1, lsr r0
     9a0:	06400e00 	strbeq	r0, [r0], -r0, lsl #28
     9a4:	0a080000 	beq	2009ac <startup-0x1fdff654>
     9a8:	00003109 	andeq	r3, r0, r9, lsl #2
     9ac:	1b0e0400 	blne	3819b4 <startup-0x1fc7e64c>
     9b0:	08000007 	stmdaeq	r0, {r0, r1, r2}
     9b4:	0031090b 	eorseq	r0, r1, fp, lsl #18
     9b8:	12080000 	andne	r0, r8, #0
     9bc:	08007870 	stmdaeq	r0, {r4, r5, r6, fp, ip, sp, lr}
     9c0:	09c80b0c 	stmibeq	r8, {r2, r3, r8, r9, fp}^
     9c4:	000c0000 	andeq	r0, ip, r0
     9c8:	00097b0b 	andeq	r7, r9, fp, lsl #22
     9cc:	0009d800 	andeq	sp, r9, r0, lsl #16
     9d0:	00250c00 	eoreq	r0, r5, r0, lsl #24
     9d4:	000f0000 	andeq	r0, pc, r0
     9d8:	0003c405 	andeq	ip, r3, r5, lsl #8
     9dc:	030d0800 	movweq	r0, #55296	; 0xd800
     9e0:	00000987 	andeq	r0, r0, r7, lsl #19
     9e4:	0003c305 	andeq	ip, r3, r5, lsl #6
     9e8:	0e0d0800 	cdpeq	8, 0, cr0, cr13, cr0, {0}
     9ec:	000009f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     9f0:	09870406 	stmibeq	r7, {r1, r2, sl}
     9f4:	b3110000 	tstlt	r1, #0
     9f8:	24000005 	strcs	r0, [r0], #-5
     9fc:	79100f08 	ldmdbvc	r0, {r3, r8, r9, sl, fp}
     a00:	1200000a 	andne	r0, r0, #10
     a04:	006f6567 	rsbeq	r6, pc, r7, ror #10
     a08:	e40f1008 	str	r1, [pc], #-8	; a10 <startup-0x1ffff5f0>
     a0c:	00000009 	andeq	r0, r0, r9
     a10:	00002f0e 	andeq	r2, r0, lr, lsl #30
     a14:	09110800 	ldmdbeq	r1, {fp}
     a18:	00000031 	andeq	r0, r0, r1, lsr r0
     a1c:	003e0e04 	eorseq	r0, lr, r4, lsl #28
     a20:	11080000 	mrsne	r0, (UNDEF: 8)
     a24:	0000310e 	andeq	r3, r0, lr, lsl #2
     a28:	dd0e0800 	stcle	8, cr0, [lr, #-0]
     a2c:	08000006 	stmdaeq	r0, {r1, r2}
     a30:	00310912 	eorseq	r0, r1, r2, lsl r9
     a34:	0e0c0000 	cdpeq	0, 0, cr0, cr12, cr0, {0}
     a38:	000006f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     a3c:	310e1208 	tstcc	lr, r8, lsl #4
     a40:	10000000 	andne	r0, r0, r0
     a44:	0005f30e 	andeq	pc, r5, lr, lsl #6
     a48:	0d130800 	ldceq	8, cr0, [r3, #-0]
     a4c:	00000a8a 	andeq	r0, r0, sl, lsl #21
     a50:	084d0e14 	stmdaeq	sp, {r2, r4, r9, sl, fp}^
     a54:	14080000 	strne	r0, [r8], #-0
     a58:	000a8a0d 	andeq	r8, sl, sp, lsl #20
     a5c:	f40e1800 	vst2.8	{d1-d2}, [lr], r0
     a60:	08000008 	stmdaeq	r0, {r3}
     a64:	0a8a0d15 	beq	fe283ec0 <rear+0xde2804a4>
     a68:	0e1c0000 	cdpeq	0, 1, cr0, cr12, cr0, {0}
     a6c:	0000008c 	andeq	r0, r0, ip, lsl #1
     a70:	a50d1608 	strge	r1, [sp, #-1544]	; 0xfffff9f8
     a74:	2000000a 	andcs	r0, r0, sl
     a78:	0a841f00 	beq	fe108680 <rear+0xde104c64>
     a7c:	84170000 	ldrhi	r0, [r7], #-0
     a80:	0000000a 	andeq	r0, r0, sl
     a84:	09f60406 	ldmibeq	r6!, {r1, r2, sl}^
     a88:	04060000 	streq	r0, [r6], #-0
     a8c:	00000a79 	andeq	r0, r0, r9, ror sl
     a90:	000aa51f 	andeq	sl, sl, pc, lsl r5
     a94:	0a841700 	beq	fe10669c <rear+0xde102c80>
     a98:	31170000 	tstcc	r7, r0
     a9c:	17000000 	strne	r0, [r0, -r0]
     aa0:	00000031 	andeq	r0, r0, r1, lsr r0
     aa4:	90040600 	andls	r0, r4, r0, lsl #12
     aa8:	0500000a 	streq	r0, [r0, #-10]
     aac:	000003a4 	andeq	r0, r0, r4, lsr #7
     ab0:	f6031708 			; <UNDEFINED> instruction: 0xf6031708
     ab4:	05000009 	streq	r0, [r0, #-9]
     ab8:	000003a3 	andeq	r0, r0, r3, lsr #7
     abc:	840c1708 	strhi	r1, [ip], #-1800	; 0xfffff8f8
     ac0:	0d00000a 	stceq	0, cr0, [r0, #-40]	; 0xffffffd8
     ac4:	09190808 	ldmdbeq	r9, {r3, fp}
     ac8:	00000af4 	strdeq	r0, [r0], -r4
     acc:	0002e20e 	andeq	lr, r2, lr, lsl #4
     ad0:	131a0800 	tstne	sl, #0, 16
     ad4:	00000050 	andeq	r0, r0, r0, asr r0
     ad8:	02b10e00 	adcseq	r0, r1, #0, 28
     adc:	1b080000 	blne	200ae4 <startup-0x1fdff51c>
     ae0:	00005013 	andeq	r5, r0, r3, lsl r0
     ae4:	8c0e0100 	stfhis	f0, [lr], {-0}
     ae8:	08000007 	stmdaeq	r0, {r0, r1, r2}
     aec:	031b141c 	tsteq	fp, #28, 8	; 0x1c000000
     af0:	00040000 	andeq	r0, r4, r0
     af4:	00039105 	andeq	r9, r3, r5, lsl #2
     af8:	021d0800 	andseq	r0, sp, #0, 16
     afc:	00000ac3 	andeq	r0, r0, r3, asr #21
     b00:	0000500b 	andeq	r5, r0, fp
     b04:	000b1000 	andeq	r1, fp, r0
     b08:	00250c00 	eoreq	r0, r5, r0, lsl #24
     b0c:	00080000 	andeq	r0, r8, r0
     b10:	00073922 	andeq	r3, r7, r2, lsr #18
     b14:	16030a00 	strne	r0, [r3], -r0, lsl #20
     b18:	00000b00 	andeq	r0, r0, r0, lsl #22
     b1c:	38e40305 	stmiacc	r4!, {r0, r2, r8, r9}^
     b20:	1a222000 	bne	888b28 <startup-0x1f7774d8>
     b24:	01000001 	tsteq	r0, r1
     b28:	00381519 	eorseq	r1, r8, r9, lsl r5
     b2c:	03050000 	movweq	r0, #20480	; 0x5000
     b30:	2000273c 	andcs	r2, r0, ip, lsr r7
     b34:	00030222 	andeq	r0, r3, r2, lsr #4
     b38:	1d190100 	ldfnes	f0, [r9, #-0]
     b3c:	00000038 	andeq	r0, r0, r8, lsr r0
     b40:	27400305 	strbcs	r0, [r0, -r5, lsl #6]
     b44:	2d222000 	stccs	0, cr2, [r2, #-0]
     b48:	01000001 	tsteq	r0, r1
     b4c:	00382819 	eorseq	r2, r8, r9, lsl r8
     b50:	03050000 	movweq	r0, #20480	; 0x5000
     b54:	20002744 	andcs	r2, r0, r4, asr #14
     b58:	00052323 	andeq	r2, r5, r3, lsr #6
     b5c:	051a0100 	ldreq	r0, [sl, #-256]	; 0xffffff00
     b60:	00000031 	andeq	r0, r0, r1, lsr r0
     b64:	37500305 	ldrbcc	r0, [r0, -r5, lsl #6]
     b68:	28232000 	stmdacs	r3!, {sp}
     b6c:	01000005 	tsteq	r0, r5
     b70:	09d80a4c 	ldmibeq	r8, {r2, r3, r6, r9, fp}^
     b74:	03050000 	movweq	r0, #20480	; 0x5000
     b78:	200038f0 	strdcs	r3, [r0], -r0
     b7c:	0005bd23 	andeq	fp, r5, r3, lsr #26
     b80:	0a570100 	beq	15c0f88 <startup-0x1ea3f078>
     b84:	000009d8 	ldrdeq	r0, [r0], -r8
     b88:	391c0305 	ldmdbcc	ip, {r0, r2, r8, r9}
     b8c:	42232000 	eormi	r2, r3, #0
     b90:	01000004 	tsteq	r0, r4
     b94:	09d80a62 	ldmibeq	r8, {r1, r5, r6, r9, fp}^
     b98:	03050000 	movweq	r0, #20480	; 0x5000
     b9c:	20003948 	andcs	r3, r0, r8, asr #18
     ba0:	00019b23 	andeq	r9, r1, r3, lsr #22
     ba4:	0a6d0100 	beq	1b40fac <startup-0x1e4bf054>
     ba8:	000009d8 	ldrdeq	r0, [r0], -r8
     bac:	39740305 	ldmdbcc	r4!, {r0, r2, r8, r9}^
     bb0:	3c232000 	stccc	0, cr2, [r3], #-0
     bb4:	01000001 	tsteq	r0, r1
     bb8:	09d80a7a 	ldmibeq	r8, {r1, r3, r4, r5, r6, r9, fp}^
     bbc:	03050000 	movweq	r0, #20480	; 0x5000
     bc0:	200039a0 	andcs	r3, r0, r0, lsr #19
     bc4:	0000c023 	andeq	ip, r0, r3, lsr #32
     bc8:	0a850100 	beq	fe140fd0 <rear+0xde13d5b4>
     bcc:	000009d8 	ldrdeq	r0, [r0], -r8
     bd0:	39cc0305 	stmibcc	ip, {r0, r2, r8, r9}^
     bd4:	99222000 	stmdbls	r2!, {sp}
     bd8:	01000002 	tsteq	r0, r2
     bdc:	0aab0f90 	beq	feac4a24 <rear+0xdeac1008>
     be0:	03050000 	movweq	r0, #20480	; 0x5000
     be4:	200039f8 	strdcs	r3, [r0], -r8
     be8:	00074424 	andeq	r4, r7, r4, lsr #8
     bec:	01790100 	cmneq	r9, r0, lsl #2
     bf0:	0008c806 	andeq	ip, r8, r6, lsl #16
     bf4:	00017c20 	andeq	r7, r1, r0, lsr #24
     bf8:	739c0100 	orrsvc	r0, ip, #0, 2
     bfc:	2500000c 	strcs	r0, [r0, #-12]
     c00:	000006f5 	strdeq	r0, [r0], -r5
     c04:	0f017901 	svceq	0x00017901
     c08:	00000031 	andeq	r0, r0, r1, lsr r0
     c0c:	63cc9103 	bicvs	r9, ip, #-1073741824	; 0xc0000000
     c10:	00061325 	andeq	r1, r6, r5, lsr #6
     c14:	01790100 	cmneq	r9, r0, lsl #2
     c18:	000c731c 	andeq	r7, ip, ip, lsl r3
     c1c:	c8910300 	ldmgt	r1, {r8, r9}
     c20:	037e2663 	cmneq	lr, #103809024	; 0x6300000
     c24:	7a010000 	bvc	40c2c <startup-0x1ffbf3d4>
     c28:	00310901 	eorseq	r0, r1, r1, lsl #18
     c2c:	91020000 	mrsls	r0, (UNDEF: 2)
     c30:	05eb266c 	strbeq	r2, [fp, #1644]!	; 0x66c
     c34:	7a010000 	bvc	40c3c <startup-0x1ffbf3c4>
     c38:	00311301 	eorseq	r1, r1, r1, lsl #6
     c3c:	91020000 	mrsls	r0, (UNDEF: 2)
     c40:	02d02668 	sbcseq	r2, r0, #104, 12	; 0x6800000
     c44:	7b010000 	blvc	40c4c <startup-0x1ffbf3b4>
     c48:	01330a01 	teqeq	r3, r1, lsl #20
     c4c:	91020000 	mrsls	r0, (UNDEF: 2)
     c50:	00f52663 	rscseq	r2, r5, r3, ror #12
     c54:	7c010000 	stcvc	0, cr0, [r1], {-0}
     c58:	0ab70d01 	beq	fedc4064 <rear+0xdedc0648>
     c5c:	91020000 	mrsls	r0, (UNDEF: 2)
     c60:	039d2664 	orrseq	r2, sp, #100, 12	; 0x6400000
     c64:	7d010000 	stcvc	0, cr0, [r1, #-0]
     c68:	0c790c01 	ldcleq	12, cr0, [r9], #-4
     c6c:	91030000 	mrsls	r0, (UNDEF: 3)
     c70:	060063d0 			; <UNDEFINED> instruction: 0x060063d0
     c74:	00012d04 	andeq	r2, r1, r4, lsl #26
     c78:	0aab0b00 	beq	feac3880 <rear+0xdeabfe64>
     c7c:	0c890000 	stceq	0, cr0, [r9], {0}
     c80:	250c0000 	strcs	r0, [ip, #-0]
     c84:	63000000 	movwvs	r0, #0
     c88:	05ed2700 	strbeq	r2, [sp, #1792]!	; 0x700
     c8c:	6d010000 	stcvs	0, cr0, [r1, #-0]
     c90:	08740601 	ldmdaeq	r4!, {r0, r9, sl}^
     c94:	00542000 	subseq	r2, r4, r0
     c98:	9c010000 	stcls	0, cr0, [r1], {-0}
     c9c:	00000cbd 			; <UNDEFINED> instruction: 0x00000cbd
     ca0:	01007328 	tsteq	r0, r8, lsr #6
     ca4:	2d13016f 	ldfcss	f0, [r3, #-444]	; 0xfffffe44
     ca8:	02000001 	andeq	r0, r0, #1
     cac:	65286c91 	strvs	r6, [r8, #-3217]!	; 0xfffff36f
     cb0:	01700100 	cmneq	r0, r0, lsl #2
     cb4:	000cbd12 	andeq	fp, ip, r2, lsl sp
     cb8:	58910200 	ldmpl	r1, {r9}
     cbc:	01330b00 	teqeq	r3, r0, lsl #22
     cc0:	0ccd0000 	stcleq	0, cr0, [sp], {0}
     cc4:	250c0000 	strcs	r0, [ip, #-0]
     cc8:	10000000 	andne	r0, r0, r0
     ccc:	03762900 	cmneq	r6, #0, 18
     cd0:	64010000 	strvs	r0, [r1], #-0
     cd4:	08340601 	ldmdaeq	r4!, {r0, r9, sl}
     cd8:	00402000 	subeq	r2, r0, r0
     cdc:	9c010000 	stcls	0, cr0, [r1], {-0}
     ce0:	0003df2a 	andeq	sp, r3, sl, lsr #30
     ce4:	015c0100 	cmpeq	ip, r0, lsl #2
     ce8:	0007f006 	andeq	pc, r7, r6
     cec:	00004420 	andeq	r4, r0, r0, lsr #8
     cf0:	069c0100 	ldreq	r0, [ip], r0, lsl #2
     cf4:	2b00000d 	blcs	d30 <startup-0x1ffff2d0>
     cf8:	5c010066 	stcpl	0, cr0, [r1], {102}	; 0x66
     cfc:	0ab71801 	beq	fedc6d08 <rear+0xdedc32ec>
     d00:	91020000 	mrsls	r0, (UNDEF: 2)
     d04:	982a0074 	stmdals	sl!, {r2, r4, r5, r6}
     d08:	01000003 	tsteq	r0, r3
     d0c:	c4060148 	strgt	r0, [r6], #-328	; 0xfffffeb8
     d10:	2c200006 	stccs	0, cr0, [r0], #-24	; 0xffffffe8
     d14:	01000001 	tsteq	r0, r1
     d18:	000d529c 	muleq	sp, ip, r2
     d1c:	00732b00 	rsbseq	r2, r3, r0, lsl #22
     d20:	19014801 	stmdbne	r1, {r0, fp, lr}
     d24:	00000ab7 			; <UNDEFINED> instruction: 0x00000ab7
     d28:	286c9102 	stmdacs	ip!, {r1, r8, ip, pc}^
     d2c:	4901006a 	stmdbmi	r1, {r1, r3, r5, r6}
     d30:	00310901 	eorseq	r0, r1, r1, lsl #18
     d34:	91020000 	mrsls	r0, (UNDEF: 2)
     d38:	06d02c74 			; <UNDEFINED> instruction: 0x06d02c74
     d3c:	00f82000 	rscseq	r2, r8, r0
     d40:	69280000 	stmdbvs	r8!, {}	; <UNPREDICTABLE>
     d44:	014a0100 	mrseq	r0, (UNDEF: 90)
     d48:	0000310e 	andeq	r3, r0, lr, lsl #2
     d4c:	70910200 	addsvc	r0, r1, r0, lsl #4
     d50:	822d0000 	eorhi	r0, sp, #0
     d54:	01000005 	tsteq	r0, r5
     d58:	54060136 	strpl	r0, [r6], #-310	; 0xfffffeca
     d5c:	70200006 	eorvc	r0, r0, r6
     d60:	01000000 	mrseq	r0, (UNDEF: 0)
     d64:	01c22e9c 	stlexbeq	r2, ip, [r2]
     d68:	27010000 	strcs	r0, [r1, -r0]
     d6c:	05f80d01 	ldrbeq	r0, [r8, #3329]!	; 0xd01
     d70:	005c2000 	subseq	r2, ip, r0
     d74:	9c010000 	stcls	0, cr0, [r1], {-0}
     d78:	00000d8c 	andeq	r0, r0, ip, lsl #27
     d7c:	0004012f 	andeq	r0, r4, pc, lsr #2
     d80:	01290100 			; <UNDEFINED> instruction: 0x01290100
     d84:	00003105 	andeq	r3, r0, r5, lsl #2
     d88:	00003000 	andeq	r3, r0, r0
     d8c:	00056e31 	andeq	r6, r5, r1, lsr lr
     d90:	010d0100 	mrseq	r0, (UNDEF: 29)
     d94:	0000310c 	andeq	r3, r0, ip, lsl #2
     d98:	00058c00 	andeq	r8, r5, r0, lsl #24
     d9c:	00006c20 	andeq	r6, r0, r0, lsr #24
     da0:	c89c0100 	ldmgt	ip, {r8}
     da4:	2600000d 	strcs	r0, [r0], -sp
     da8:	00000625 	andeq	r0, r0, r5, lsr #12
     dac:	0d010f01 	stceq	15, cr0, [r1, #-4]
     db0:	00000923 	andeq	r0, r0, r3, lsr #18
     db4:	26779102 	ldrbtcs	r9, [r7], -r2, lsl #2
     db8:	00000749 	andeq	r0, r0, r9, asr #14
     dbc:	09011001 	stmdbeq	r1, {r0, ip}
     dc0:	00000031 	andeq	r0, r0, r1, lsr r0
     dc4:	00709102 	rsbseq	r9, r0, r2, lsl #2
     dc8:	0001ba32 	andeq	fp, r1, r2, lsr sl
     dcc:	01070100 	mrseq	r0, (UNDEF: 23)
     dd0:	00003105 	andeq	r3, r0, r5, lsl #2
     dd4:	00053800 	andeq	r3, r5, r0, lsl #16
     dd8:	00005420 	andeq	r5, r0, r0, lsr #8
     ddc:	1c9c0100 	ldfnes	f0, [ip], {0}
     de0:	2b00000e 	blcs	e20 <startup-0x1ffff1e0>
     de4:	0701006e 	streq	r0, [r1, -lr, rrx]
     de8:	00311101 	eorseq	r1, r1, r1, lsl #2
     dec:	91020000 	mrsls	r0, (UNDEF: 2)
     df0:	006d2864 	rsbeq	r2, sp, r4, ror #16
     df4:	09010801 	stmdbeq	r1, {r0, fp}
     df8:	00000031 	andeq	r0, r0, r1, lsr r0
     dfc:	28749102 	ldmdacs	r4!, {r1, r8, ip, pc}^
     e00:	08010061 	stmdaeq	r1, {r0, r5, r6}
     e04:	00311301 	eorseq	r1, r1, r1, lsl #6
     e08:	91020000 	mrsls	r0, (UNDEF: 2)
     e0c:	00632870 	rsbeq	r2, r3, r0, ror r8
     e10:	23010801 	movwcs	r0, #6145	; 0x1801
     e14:	00000031 	andeq	r0, r0, r1, lsr r0
     e18:	006c9102 	rsbeq	r9, ip, r2, lsl #2
     e1c:	0000ed33 	andeq	lr, r0, r3, lsr sp
     e20:	06f50100 	ldrbteq	r0, [r5], r0, lsl #2
     e24:	20000484 	andcs	r0, r0, r4, lsl #9
     e28:	000000b4 	strheq	r0, [r0], -r4
     e2c:	0e949c01 	cdpeq	12, 9, cr9, cr4, cr1, {0}
     e30:	66340000 	ldrtvs	r0, [r4], -r0
     e34:	1bf50100 	blne	ffd4123c <rear+0xdfd3d820>
     e38:	00000ab7 			; <UNDEFINED> instruction: 0x00000ab7
     e3c:	34649102 	strbtcc	r9, [r4], #-258	; 0xfffffefe
     e40:	f5010073 			; <UNDEFINED> instruction: 0xf5010073
     e44:	000ab726 	andeq	fp, sl, r6, lsr #14
     e48:	60910200 	addsvs	r0, r1, r0, lsl #4
     e4c:	0002e822 	andeq	lr, r2, r2, lsr #16
     e50:	09f60100 	ldmibeq	r6!, {r8}^
     e54:	00000031 	andeq	r0, r0, r1, lsr r0
     e58:	35749102 	ldrbcc	r9, [r4, #-258]!	; 0xfffffefe
     e5c:	000001ba 			; <UNDEFINED> instruction: 0x000001ba
     e60:	3112f601 	tstcc	r2, r1, lsl #12	; <UNPREDICTABLE>
     e64:	6d000000 	stcvs	0, cr0, [r0, #-0]
     e68:	3000000e 	andcc	r0, r0, lr
     e6c:	009f2200 	addseq	r2, pc, r0, lsl #4
     e70:	f6010000 			; <UNDEFINED> instruction: 0xf6010000
     e74:	00003120 	andeq	r3, r0, r0, lsr #2
     e78:	70910200 	addsvc	r0, r1, r0, lsl #4
     e7c:	0004a22c 	andeq	sl, r4, ip, lsr #4
     e80:	00008620 	andeq	r8, r0, r0, lsr #12
     e84:	00693600 	rsbeq	r3, r9, r0, lsl #12
     e88:	310df801 	tstcc	sp, r1, lsl #16	; <UNPREDICTABLE>
     e8c:	02000000 	andeq	r0, r0, #0
     e90:	00006c91 	muleq	r0, r1, ip
     e94:	00010833 	andeq	r0, r1, r3, lsr r8
     e98:	06ed0100 	strbteq	r0, [sp], r0, lsl #2
     e9c:	20000440 	andcs	r0, r0, r0, asr #8
     ea0:	00000044 	andeq	r0, r0, r4, asr #32
     ea4:	0ee19c01 	cdpeq	12, 14, cr9, cr1, cr1, {0}
     ea8:	f5370000 			; <UNDEFINED> instruction: 0xf5370000
     eac:	01000000 	mrseq	r0, (UNDEF: 0)
     eb0:	0ab71ded 	beq	fedc866c <rear+0xdedc4c50>
     eb4:	91020000 	mrsls	r0, (UNDEF: 2)
     eb8:	039d3774 	orrseq	r3, sp, #116, 14	; 0x1d00000
     ebc:	ed010000 	stc	0, cr0, [r1, #-0]
     ec0:	000ab72b 	andeq	fp, sl, fp, lsr #14
     ec4:	70910200 	addsvc	r0, r1, r0, lsl #4
     ec8:	0004622c 	andeq	r6, r4, ip, lsr #4
     ecc:	00001620 	andeq	r1, r0, r0, lsr #12
     ed0:	00ed3800 	rsceq	r3, sp, r0, lsl #16
     ed4:	f0010000 			; <UNDEFINED> instruction: 0xf0010000
     ed8:	00003109 	andeq	r3, r0, r9, lsl #2
     edc:	00003000 	andeq	r3, r0, r0
     ee0:	00503300 	subseq	r3, r0, r0, lsl #6
     ee4:	cf010000 	svcgt	0x00010000
     ee8:	00036c06 	andeq	r6, r3, r6, lsl #24
     eec:	0000d420 	andeq	sp, r0, r0, lsr #8
     ef0:	329c0100 	addscc	r0, ip, #0, 2
     ef4:	3400000f 	strcc	r0, [r0], #-15
     ef8:	00726964 	rsbseq	r6, r2, r4, ror #18
     efc:	310fcf01 	tstcc	pc, r1, lsl #30
     f00:	02000000 	andeq	r0, r0, #0
     f04:	73346c91 	teqvc	r4, #37120	; 0x9100
     f08:	1ccf0100 	stfnee	f0, [pc], {0}
     f0c:	00000ab7 			; <UNDEFINED> instruction: 0x00000ab7
     f10:	22689102 	rsbcs	r9, r8, #-2147483648	; 0x80000000
     f14:	000000ce 	andeq	r0, r0, lr, asr #1
     f18:	3109d001 	tstcc	r9, r1
     f1c:	02000000 	andeq	r0, r0, #0
     f20:	72227491 	eorvc	r7, r2, #-1862270976	; 0x91000000
     f24:	01000001 	tsteq	r0, r1
     f28:	003115d0 	ldrsbteq	r1, [r1], -r0
     f2c:	91020000 	mrsls	r0, (UNDEF: 2)
     f30:	da390070 	ble	e410f8 <startup-0x1f1bef08>
     f34:	01000004 	tsteq	r0, r4
     f38:	02dc06c1 	sbcseq	r0, ip, #202375168	; 0xc100000
     f3c:	00902000 	addseq	r2, r0, r0
     f40:	9c010000 	stcls	0, cr0, [r1], {-0}
     f44:	00000fa4 	andeq	r0, r0, r4, lsr #31
     f48:	01007334 	tsteq	r0, r4, lsr r3
     f4c:	0ab71cc1 	beq	fedc8258 <rear+0xdedc483c>
     f50:	91020000 	mrsls	r0, (UNDEF: 2)
     f54:	00ce2264 	sbceq	r2, lr, r4, ror #4
     f58:	c2010000 	andgt	r0, r1, #0
     f5c:	00003109 	andeq	r3, r0, r9, lsl #2
     f60:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     f64:	00017222 	andeq	r7, r1, r2, lsr #4
     f68:	09c30100 	stmibeq	r3, {r8}^
     f6c:	00000031 	andeq	r0, r0, r1, lsr r0
     f70:	2c709102 	ldfcsp	f1, [r0], #-8
     f74:	200002f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
     f78:	0000006e 	andeq	r0, r0, lr, rrx
     f7c:	01006936 	tsteq	r0, r6, lsr r9
     f80:	00310dc4 	eorseq	r0, r1, r4, asr #27
     f84:	91020000 	mrsls	r0, (UNDEF: 2)
     f88:	02f62c6c 	rscseq	r2, r6, #108, 24	; 0x6c00
     f8c:	00582000 	subseq	r2, r8, r0
     f90:	0b220000 	bleq	880f98 <startup-0x1f77f068>
     f94:	01000006 	tsteq	r0, r6
     f98:	00310dc5 	eorseq	r0, r1, r5, asr #27
     f9c:	91020000 	mrsls	r0, (UNDEF: 2)
     fa0:	00000068 	andeq	r0, r0, r8, rrx
     fa4:	0002c633 	andeq	ip, r2, r3, lsr r6
     fa8:	06bd0100 	ldrteq	r0, [sp], r0, lsl #2
     fac:	200002bc 			; <UNDEFINED> instruction: 0x200002bc
     fb0:	00000020 	andeq	r0, r0, r0, lsr #32
     fb4:	0fc89c01 	svceq	0x00c89c01
     fb8:	66340000 	ldrtvs	r0, [r4], -r0
     fbc:	18bd0100 	ldmfdne	sp!, {r8}
     fc0:	00000ab7 			; <UNDEFINED> instruction: 0x00000ab7
     fc4:	00749102 	rsbseq	r9, r4, r2, lsl #2
     fc8:	00030c33 	andeq	r0, r3, r3, lsr ip
     fcc:	06b50100 	ldrteq	r0, [r5], r0, lsl #2
     fd0:	20000252 	andcs	r0, r0, r2, asr r2
     fd4:	0000006a 	andeq	r0, r0, sl, rrx
     fd8:	101f9c01 	andsne	r9, pc, r1, lsl #24
     fdc:	73340000 	teqvc	r4, #0
     fe0:	19b50100 	ldmibne	r5!, {r8}
     fe4:	00000ab7 			; <UNDEFINED> instruction: 0x00000ab7
     fe8:	3a6c9102 	bcc	1b253f8 <startup-0x1e4dac08>
     fec:	2000026a 	andcs	r0, r0, sl, ror #4
     ff0:	00000008 	andeq	r0, r0, r8
     ff4:	00001007 	andeq	r1, r0, r7
     ff8:	0004da38 	andeq	sp, r4, r8, lsr sl
     ffc:	0db70100 	ldfeqs	f0, [r7]
    1000:	00000031 	andeq	r0, r0, r1, lsr r0
    1004:	2c000030 	stccs	0, cr0, [r0], {48}	; 0x30
    1008:	20000272 	andcs	r0, r0, r2, ror r2
    100c:	0000003c 	andeq	r0, r0, ip, lsr r0
    1010:	01006936 	tsteq	r0, r6, lsr r9
    1014:	00310eb8 	ldrhteq	r0, [r1], -r8
    1018:	91020000 	mrsls	r0, (UNDEF: 2)
    101c:	33000074 	movwcc	r0, #116	; 0x74
    1020:	000005a7 	andeq	r0, r0, r7, lsr #11
    1024:	9006a101 	andls	sl, r6, r1, lsl #2
    1028:	c2200001 	eorgt	r0, r0, #1
    102c:	01000000 	mrseq	r0, (UNDEF: 0)
    1030:	0010ac9c 	mulseq	r0, ip, ip
    1034:	00733400 	rsbseq	r3, r3, r0, lsl #8
    1038:	ac1aa101 	ldfged	f2, [sl], {1}
    103c:	02000010 	andeq	r0, r0, #16
    1040:	78345c91 	ldmdavc	r4!, {r0, r4, r7, sl, fp, ip, lr}
    1044:	21a10100 			; <UNDEFINED> instruction: 0x21a10100
    1048:	00000031 	andeq	r0, r0, r1, lsr r0
    104c:	34589102 	ldrbcc	r9, [r8], #-258	; 0xfffffefe
    1050:	a1010079 	tstge	r1, r9, ror r0
    1054:	00003128 	andeq	r3, r0, r8, lsr #2
    1058:	54910200 	ldrpl	r0, [r1], #512	; 0x200
    105c:	01006936 	tsteq	r0, r6, lsr r9
    1060:	003109a2 	eorseq	r0, r1, r2, lsr #19
    1064:	91020000 	mrsls	r0, (UNDEF: 2)
    1068:	006a3674 	rsbeq	r3, sl, r4, ror r6
    106c:	310ba201 	tstcc	fp, r1, lsl #4
    1070:	02000000 	andeq	r0, r0, #0
    1074:	6b367091 	blvs	d9d2c0 <startup-0x1f262d40>
    1078:	0da20100 	stfeqs	f0, [r2]
    107c:	00000031 	andeq	r0, r0, r1, lsr r0
    1080:	226c9102 	rsbcs	r9, ip, #-2147483648	; 0x80000000
    1084:	000000b1 	strheq	r0, [r0], -r1
    1088:	3110a201 	tstcc	r0, r1, lsl #4
    108c:	02000000 	andeq	r0, r0, #0
    1090:	ce2c6891 	mcrgt	8, 1, r6, cr12, cr1, {4}
    1094:	5a200001 	bpl	8010a0 <startup-0x1f7fef60>
    1098:	22000000 	andcs	r0, r0, #0
    109c:	0000021a 	andeq	r0, r0, sl, lsl r2
    10a0:	501bac01 	andspl	sl, fp, r1, lsl #24
    10a4:	02000000 	andeq	r0, r0, #0
    10a8:	00006791 	muleq	r0, r1, r7
    10ac:	0af40406 	beq	ffd020cc <rear+0xdfcfe6b0>
    10b0:	8c3b0000 	ldchi	0, cr0, [fp], #-0
    10b4:	01000003 	tsteq	r0, r3
    10b8:	01640d9b 			; <UNDEFINED> instruction: 0x01640d9b
    10bc:	002c2000 	eoreq	r2, ip, r0
    10c0:	9c010000 	stcls	0, cr0, [r1], {-0}
    10c4:	00001103 	andeq	r1, r0, r3, lsl #2
    10c8:	01007334 	tsteq	r0, r4, lsr r3
    10cc:	10ac219b 	umlalne	r2, ip, fp, r1
    10d0:	91020000 	mrsls	r0, (UNDEF: 2)
    10d4:	078c3774 			; <UNDEFINED> instruction: 0x078c3774
    10d8:	9b010000 	blls	410e0 <startup-0x1ffbef20>
    10dc:	00031b33 	andeq	r1, r3, r3, lsr fp
    10e0:	70910200 	addsvc	r0, r1, r0, lsl #4
    10e4:	0002e237 	andeq	lr, r2, r7, lsr r2
    10e8:	3d9b0100 	ldfccs	f0, [fp]
    10ec:	00000031 	andeq	r0, r0, r1, lsr r0
    10f0:	376c9102 	strbcc	r9, [ip, -r2, lsl #2]!
    10f4:	000002b1 			; <UNDEFINED> instruction: 0x000002b1
    10f8:	31489b01 	cmpcc	r8, r1, lsl #22
    10fc:	02000000 	andeq	r0, r0, #0
    1100:	33006891 	movwcc	r6, #2193	; 0x891
    1104:	00000179 	andeq	r0, r0, r9, ror r1
    1108:	f4063601 	vst1.8	{d3-d5}, [r6], r1
    110c:	70200000 	eorvc	r0, r0, r0
    1110:	01000000 	mrseq	r0, (UNDEF: 0)
    1114:	0011279c 	mulseq	r1, ip, r7
    1118:	006f3400 	rsbeq	r3, pc, r0, lsl #8
    111c:	b71a3601 	ldrlt	r3, [sl, -r1, lsl #12]
    1120:	0200000a 	andeq	r0, r0, #10
    1124:	33007491 	movwcc	r7, #1169	; 0x491
    1128:	00000043 	andeq	r0, r0, r3, asr #32
    112c:	92063001 	andls	r3, r6, #1
    1130:	62200000 	eorvs	r0, r0, #0
    1134:	01000000 	mrseq	r0, (UNDEF: 0)
    1138:	0011629c 	mulseq	r1, ip, r2
    113c:	006f3400 	rsbeq	r3, pc, r0, lsl #8
    1140:	b71b3001 	ldrlt	r3, [fp, -r1]
    1144:	0200000a 	andeq	r0, r0, #10
    1148:	9a2c6c91 	bls	b1c394 <startup-0x1f4e3c6c>
    114c:	50200000 	eorpl	r0, r0, r0
    1150:	36000000 	strcc	r0, [r0], -r0
    1154:	31010069 	tstcc	r1, r9, rrx
    1158:	0000310e 	andeq	r3, r0, lr, lsl #2
    115c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1160:	8d330000 	ldchi	0, cr0, [r3, #-0]
    1164:	01000002 	tsteq	r0, r2
    1168:	0030062a 	eorseq	r0, r0, sl, lsr #12
    116c:	00622000 	rsbeq	r2, r2, r0
    1170:	9c010000 	stcls	0, cr0, [r1], {-0}
    1174:	0000119d 	muleq	r0, sp, r1
    1178:	01006f34 	tsteq	r0, r4, lsr pc
    117c:	0ab71a2a 	beq	fedc7a2c <rear+0xdedc4010>
    1180:	91020000 	mrsls	r0, (UNDEF: 2)
    1184:	00382c6c 	eorseq	r2, r8, ip, ror #24
    1188:	00502000 	subseq	r2, r0, r0
    118c:	69360000 	ldmdbvs	r6!, {}	; <UNPREDICTABLE>
    1190:	0e2b0100 	sufeqe	f0, f3, f0
    1194:	00000031 	andeq	r0, r0, r1, lsr r0
    1198:	00749102 	rsbseq	r9, r4, r2, lsl #2
    119c:	045a3900 	ldrbeq	r3, [sl], #-2304	; 0xfffff700
    11a0:	25010000 	strcs	r0, [r1, #-0]
    11a4:	00001006 	andeq	r1, r0, r6
    11a8:	00002020 	andeq	r2, r0, r0, lsr #32
    11ac:	df9c0100 	svcle	0x009c0100
    11b0:	34000011 	strcc	r0, [r0], #-17	; 0xffffffef
    11b4:	2501006f 	strcs	r0, [r1, #-111]	; 0xffffff91
    11b8:	000ab71f 	andeq	fp, sl, pc, lsl r7
    11bc:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    11c0:	00033937 	andeq	r3, r3, r7, lsr r9
    11c4:	26250100 	strtcs	r0, [r5], -r0, lsl #2
    11c8:	00000031 	andeq	r0, r0, r1, lsr r0
    11cc:	37709102 	ldrbcc	r9, [r0, -r2, lsl #2]!
    11d0:	00000340 	andeq	r0, r0, r0, asr #6
    11d4:	31322501 	teqcc	r2, r1, lsl #10
    11d8:	02000000 	andeq	r0, r0, #0
    11dc:	3c006c91 	stccc	12, cr6, [r0], {145}	; 0x91
    11e0:	0000057a 	andeq	r0, r0, sl, ror r5
    11e4:	00061d01 	andeq	r1, r6, r1, lsl #26
    11e8:	0c200000 	stceq	0, cr0, [r0], #-0
    11ec:	01000000 	mrseq	r0, (UNDEF: 0)
    11f0:	0388009c 	orreq	r0, r8, #156	; 0x9c
    11f4:	00040000 	andeq	r0, r4, r0
    11f8:	000003e5 	andeq	r0, r0, r5, ror #7
    11fc:	064d0104 	strbeq	r0, [sp], -r4, lsl #2
    1200:	530c0000 	movwpl	r0, #49152	; 0xc000
    1204:	0d000008 	stceq	0, cr0, [r0, #-32]	; 0xffffffe0
    1208:	48000004 	stmdami	r0, {r2}
    120c:	2420000a 	strtcs	r0, [r0], #-10
    1210:	aa000005 	bge	122c <startup-0x1fffedd4>
    1214:	02000007 	andeq	r0, r0, #7
    1218:	00000036 	andeq	r0, r0, r6, lsr r0
    121c:	31170103 	tstcc	r7, r3, lsl #2
    1220:	03000000 	movweq	r0, #0
    1224:	042f0801 	strteq	r0, [pc], #-2049	; 122c <startup-0x1fffedd4>
    1228:	55040000 	strpl	r0, [r4, #-0]
    122c:	49000000 	stmdbmi	r0, {}	; <UNPREDICTABLE>
    1230:	05000000 	streq	r0, [r0, #-0]
    1234:	0000004e 	andeq	r0, r0, lr, asr #32
    1238:	060003ff 			; <UNDEFINED> instruction: 0x060003ff
    123c:	00000038 	andeq	r0, r0, r8, lsr r0
    1240:	7f070403 	svcvc	0x00070403
    1244:	06000000 	streq	r0, [r0], -r0
    1248:	0000004e 	andeq	r0, r0, lr, asr #32
    124c:	00020f07 	andeq	r0, r2, r7, lsl #30
    1250:	1e0f0200 	cdpne	2, 0, cr0, cr15, cr0, {0}
    1254:	00000049 	andeq	r0, r0, r9, asr #32
    1258:	27480305 	strbcs	r0, [r8, -r5, lsl #6]
    125c:	6b082000 	blvs	209264 <startup-0x1fdf6d9c>
    1260:	01000007 	tsteq	r0, r7
    1264:	0e9c06b7 	mrceq	6, 4, r0, cr12, cr7, {5}
    1268:	00d02000 	sbcseq	r2, r0, r0
    126c:	9c010000 	stcls	0, cr0, [r1], {-0}
    1270:	000000c6 	andeq	r0, r0, r6, asr #1
    1274:	01006909 	tsteq	r0, r9, lsl #18
    1278:	00250db8 	strhteq	r0, [r5], -r8
    127c:	91020000 	mrsls	r0, (UNDEF: 2)
    1280:	006a0977 	rsbeq	r0, sl, r7, ror r9
    1284:	2511b801 	ldrcs	fp, [r1, #-2049]	; 0xfffff7ff
    1288:	02000000 	andeq	r0, r0, #0
    128c:	c5077691 	strgt	r7, [r7, #-1681]	; 0xfffff96f
    1290:	01000009 	tsteq	r0, r9
    1294:	002514b8 	strhteq	r1, [r5], -r8
    1298:	91020000 	mrsls	r0, (UNDEF: 2)
    129c:	0063096f 	rsbeq	r0, r3, pc, ror #18
    12a0:	2520b801 	strcs	fp, [r0, #-2049]!	; 0xfffff7ff
    12a4:	02000000 	andeq	r0, r0, #0
    12a8:	6b097591 	blvs	25e8f4 <startup-0x1fda170c>
    12ac:	12b90100 	adcsne	r0, r9, #0, 2
    12b0:	0000004e 	andeq	r0, r0, lr, asr #32
    12b4:	00709102 	rsbseq	r9, r0, r2, lsl #2
    12b8:	00079e0a 	andeq	r9, r7, sl, lsl #28
    12bc:	06a60100 	strteq	r0, [r6], r0, lsl #2
    12c0:	20000e18 	andcs	r0, r0, r8, lsl lr
    12c4:	00000084 	andeq	r0, r0, r4, lsl #1
    12c8:	01159c01 	tsteq	r5, r1, lsl #24
    12cc:	780b0000 	stmdavc	fp, {}	; <UNPREDICTABLE>
    12d0:	15a60100 	strne	r0, [r6, #256]!	; 0x100
    12d4:	0000004e 	andeq	r0, r0, lr, asr #32
    12d8:	0b6c9102 	bleq	1b256e8 <startup-0x1e4da918>
    12dc:	a6010079 			; <UNDEFINED> instruction: 0xa6010079
    12e0:	00004e21 	andeq	r4, r0, r1, lsr #28
    12e4:	68910200 	ldmvs	r1, {r9}
    12e8:	0007e907 	andeq	lr, r7, r7, lsl #18
    12ec:	0da70100 	stfeqs	f0, [r7]
    12f0:	00000025 	andeq	r0, r0, r5, lsr #32
    12f4:	07739102 	ldrbeq	r9, [r3, -r2, lsl #2]!
    12f8:	0000080e 	andeq	r0, r0, lr, lsl #16
    12fc:	1509a801 	strne	sl, [r9, #-2049]	; 0xfffff7ff
    1300:	02000001 	andeq	r0, r0, #1
    1304:	0c007491 	cfstrseq	mvf7, [r0], {145}	; 0x91
    1308:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    130c:	b90d0074 	stmdblt	sp, {r2, r4, r5, r6}
    1310:	01000007 	tsteq	r0, r7
    1314:	0de206a0 	stcleq	6, cr0, [r2, #640]!	; 0x280
    1318:	00362000 	eorseq	r2, r6, r0
    131c:	9c010000 	stcls	0, cr0, [r1], {-0}
    1320:	00000140 	andeq	r0, r0, r0, asr #2
    1324:	01006909 	tsteq	r0, r9, lsl #18
    1328:	011509a1 	tsteq	r5, r1, lsr #19
    132c:	91020000 	mrsls	r0, (UNDEF: 2)
    1330:	14080074 	strne	r0, [r8], #-116	; 0xffffff8c
    1334:	01000008 	tsteq	r0, r8
    1338:	0d880696 	stceq	6, cr0, [r8, #600]	; 0x258
    133c:	005a2000 	subseq	r2, sl, r0
    1340:	9c010000 	stcls	0, cr0, [r1], {-0}
    1344:	00000189 	andeq	r0, r0, r9, lsl #3
    1348:	000d8e0e 	andeq	r8, sp, lr, lsl #28
    134c:	00004a20 	andeq	r4, r0, r0, lsr #20
    1350:	08860700 	stmeq	r6, {r8, r9, sl}
    1354:	97010000 	strls	r0, [r1, -r0]
    1358:	0001150e 	andeq	r1, r1, lr, lsl #10
    135c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1360:	000db20e 	andeq	fp, sp, lr, lsl #4
    1364:	00001a20 	andeq	r1, r0, r0, lsr #20
    1368:	64610900 	strbtvs	r0, [r1], #-2304	; 0xfffff700
    136c:	9a010064 	bls	41504 <startup-0x1ffbeafc>
    1370:	00011512 	andeq	r1, r1, r2, lsl r5
    1374:	70910200 	addsvc	r0, r1, r0, lsl #4
    1378:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    137c:	00000829 	andeq	r0, r0, r9, lsr #16
    1380:	42068e01 	andmi	r8, r6, #1, 28
    1384:	4620000d 	strtmi	r0, [r0], -sp
    1388:	01000000 	mrseq	r0, (UNDEF: 0)
    138c:	0001be9c 	muleq	r1, ip, lr
    1390:	078c0f00 	streq	r0, [ip, r0, lsl #30]
    1394:	8e010000 	cdphi	0, 0, cr0, cr1, cr0, {0}
    1398:	00002521 	andeq	r2, r0, r1, lsr #10
    139c:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    13a0:	0009c50f 	andeq	ip, r9, pc, lsl #10
    13a4:	2f8e0100 	svccs	0x008e0100
    13a8:	00000025 	andeq	r0, r0, r5, lsr #32
    13ac:	00769102 	rsbseq	r9, r6, r2, lsl #2
    13b0:	00088b08 	andeq	r8, r8, r8, lsl #22
    13b4:	06860100 	streq	r0, [r6], r0, lsl #2
    13b8:	20000cfc 	strdcs	r0, [r0], -ip
    13bc:	00000046 	andeq	r0, r0, r6, asr #32
    13c0:	01f39c01 	mvnseq	r9, r1, lsl #24
    13c4:	630b0000 	movwvs	r0, #45056	; 0xb000
    13c8:	0100646d 	tsteq	r0, sp, ror #8
    13cc:	00252486 	eoreq	r2, r5, r6, lsl #9
    13d0:	91020000 	mrsls	r0, (UNDEF: 2)
    13d4:	09c50f77 	stmibeq	r5, {r0, r1, r2, r4, r5, r6, r8, r9, sl, fp}^
    13d8:	86010000 	strhi	r0, [r1], -r0
    13dc:	00002531 	andeq	r2, r0, r1, lsr r5
    13e0:	76910200 	ldrvc	r0, [r1], r0, lsl #4
    13e4:	07ee0800 	strbeq	r0, [lr, r0, lsl #16]!
    13e8:	6e010000 	cdpvs	0, 0, cr0, cr1, cr0, {0}
    13ec:	000c8606 	andeq	r8, ip, r6, lsl #12
    13f0:	00007620 	andeq	r7, r0, r0, lsr #12
    13f4:	369c0100 	ldrcc	r0, [ip], r0, lsl #2
    13f8:	0f000002 	svceq	0x00000002
    13fc:	00000551 	andeq	r0, r0, r1, asr r5
    1400:	251c6e01 	ldrcs	r6, [ip, #-3585]	; 0xfffff1ff
    1404:	02000000 	andeq	r0, r0, #0
    1408:	c50f7791 	strgt	r7, [pc, #-1937]	; c7f <startup-0x1ffff381>
    140c:	01000009 	tsteq	r0, r9
    1410:	00252b6e 	eoreq	r2, r5, lr, ror #22
    1414:	91020000 	mrsls	r0, (UNDEF: 2)
    1418:	07ca1076 			; <UNDEFINED> instruction: 0x07ca1076
    141c:	45010000 	strmi	r0, [r1, #-0]
    1420:	00011505 	andeq	r1, r1, r5, lsl #10
    1424:	00001100 	andeq	r1, r0, r0, lsl #2
    1428:	00077f12 	andeq	r7, r7, r2, lsl pc
    142c:	09690100 	stmdbeq	r9!, {r8}^
    1430:	00000025 	andeq	r0, r0, r5, lsr #32
    1434:	20000c5c 	andcs	r0, r0, ip, asr ip
    1438:	0000002a 	andeq	r0, r0, sl, lsr #32
    143c:	02609c01 	rsbeq	r9, r0, #256	; 0x100
    1440:	c50f0000 	strgt	r0, [pc, #-0]	; 1448 <startup-0x1fffebb8>
    1444:	01000009 	tsteq	r0, r9
    1448:	00252369 	eoreq	r2, r5, r9, ror #6
    144c:	91020000 	mrsls	r0, (UNDEF: 2)
    1450:	91120077 	tstls	r2, r7, ror r0
    1454:	01000007 	tsteq	r0, r7
    1458:	00310f52 	eorseq	r0, r1, r2, asr pc
    145c:	0bd00000 	bleq	ff401464 <rear+0xdf3fda48>
    1460:	008c2000 	addeq	r2, ip, r0
    1464:	9c010000 	stcls	0, cr0, [r1], {-0}
    1468:	000002ab 	andeq	r0, r0, fp, lsr #5
    146c:	0009c50f 	andeq	ip, r9, pc, lsl #10
    1470:	2a520100 	bcs	1481878 <startup-0x1eb7e788>
    1474:	00000031 	andeq	r0, r0, r1, lsr r0
    1478:	136f9102 	cmnne	pc, #-2147483648	; 0x80000000
    147c:	000007ca 	andeq	r0, r0, sl, asr #15
    1480:	15054501 	strne	r4, [r5, #-1281]	; 0xfffffaff
    1484:	9b000001 	blls	1490 <startup-0x1fffeb70>
    1488:	11000002 	tstne	r0, r2
    148c:	08ba0700 	ldmeq	sl!, {r8, r9, sl}
    1490:	5a010000 	bpl	41498 <startup-0x1ffbeb68>
    1494:	00003113 	andeq	r3, r0, r3, lsl r1
    1498:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    149c:	07d60800 	ldrbeq	r0, [r6, r0, lsl #16]
    14a0:	40010000 	andmi	r0, r1, r0
    14a4:	000b9206 	andeq	r9, fp, r6, lsl #4
    14a8:	00003e20 	andeq	r3, r0, r0, lsr #28
    14ac:	d09c0100 	addsle	r0, ip, r0, lsl #2
    14b0:	10000002 	andne	r0, r0, r2
    14b4:	000007ca 	andeq	r0, r0, sl, asr #15
    14b8:	15054501 	strne	r4, [r5, #-1281]	; 0xfffffaff
    14bc:	11000001 	tstne	r0, r1
    14c0:	fc080000 	stc2	0, cr0, [r8], {-0}
    14c4:	01000007 	tsteq	r0, r7
    14c8:	0b38062a 	bleq	e02d78 <startup-0x1f1fd288>
    14cc:	005a2000 	subseq	r2, sl, r0
    14d0:	9c010000 	stcls	0, cr0, [r1], {-0}
    14d4:	000002f6 	strdeq	r0, [r0], -r6
    14d8:	0009c50f 	andeq	ip, r9, pc, lsl #10
    14dc:	202a0100 	eorcs	r0, sl, r0, lsl #2
    14e0:	00000025 	andeq	r0, r0, r5, lsr #32
    14e4:	00779102 	rsbseq	r9, r7, r2, lsl #2
    14e8:	0007a40a 	andeq	sl, r7, sl, lsl #8
    14ec:	06200100 	strteq	r0, [r0], -r0, lsl #2
    14f0:	20000af4 	strdcs	r0, [r0], -r4
    14f4:	00000044 	andeq	r0, r0, r4, asr #32
    14f8:	03279c01 			; <UNDEFINED> instruction: 0x03279c01
    14fc:	780b0000 	stmdavc	fp, {}	; <UNPREDICTABLE>
    1500:	23200100 	nopcs	{0}	; <UNPREDICTABLE>
    1504:	00000025 	andeq	r0, r0, r5, lsr #32
    1508:	096f9102 	stmdbeq	pc!, {r1, r8, ip, pc}^	; <UNPREDICTABLE>
    150c:	23010063 	movwcs	r0, #4195	; 0x1063
    1510:	0000250d 	andeq	r2, r0, sp, lsl #10
    1514:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    1518:	083c0a00 	ldmdaeq	ip!, {r9, fp}
    151c:	15010000 	strne	r0, [r1, #-0]
    1520:	000aa406 	andeq	sl, sl, r6, lsl #8
    1524:	00005020 	andeq	r5, r0, r0, lsr #32
    1528:	589c0100 	ldmpl	ip, {r8}
    152c:	0b000003 	bleq	1540 <startup-0x1fffeac0>
    1530:	15010078 	strne	r0, [r1, #-120]	; 0xffffff88
    1534:	00002525 	andeq	r2, r0, r5, lsr #10
    1538:	6f910200 	svcvs	0x00910200
    153c:	01006309 	tsteq	r0, r9, lsl #6
    1540:	00250d18 	eoreq	r0, r5, r8, lsl sp
    1544:	91020000 	mrsls	r0, (UNDEF: 2)
    1548:	ad140077 	ldcge	0, cr0, [r4, #-476]	; 0xfffffe24
    154c:	01000008 	tsteq	r0, r8
    1550:	0a480606 	beq	1202d70 <startup-0x1edfd290>
    1554:	005c2000 	subseq	r2, ip, r0
    1558:	9c010000 	stcls	0, cr0, [r1], {-0}
    155c:	00075f13 	andeq	r5, r7, r3, lsl pc
    1560:	05080100 	streq	r0, [r8, #-256]	; 0xffffff00
    1564:	00000115 	andeq	r0, r0, r5, lsl r1
    1568:	0000037c 	andeq	r0, r0, ip, ror r3
    156c:	a1100011 	tstge	r0, r1, lsl r0
    1570:	01000008 	tsteq	r0, r8
    1574:	0115050a 	tsteq	r5, sl, lsl #10
    1578:	00110000 	andseq	r0, r1, r0
    157c:	0b8f0000 	bleq	fe3c1584 <rear+0xde3bdb68>
    1580:	00040000 	andeq	r0, r4, r0
    1584:	0000053b 	andeq	r0, r0, fp, lsr r5
    1588:	064d0104 	strbeq	r0, [sp], -r4, lsl #2
    158c:	c10c0000 	mrsgt	r0, (UNDEF: 12)
    1590:	0d000008 	stceq	0, cr0, [r0, #-32]	; 0xffffffe0
    1594:	6c000004 	stcvs	0, cr0, [r0], {4}
    1598:	3c20000f 	stccc	0, cr0, [r0], #-60	; 0xffffffc4
    159c:	63000001 	movwvs	r0, #1
    15a0:	0200000a 	andeq	r0, r0, #10
    15a4:	007f0704 	rsbseq	r0, pc, r4, lsl #14
    15a8:	04030000 	streq	r0, [r3], #-0
    15ac:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    15b0:	06010200 	streq	r0, [r1], -r0, lsl #4
    15b4:	00000431 	andeq	r0, r0, r1, lsr r4
    15b8:	2f080102 	svccs	0x00080102
    15bc:	02000004 	andeq	r0, r0, #4
    15c0:	04740502 	ldrbteq	r0, [r4], #-1282	; 0xfffffafe
    15c4:	02020000 	andeq	r0, r2, #0
    15c8:	0002ef07 	andeq	lr, r2, r7, lsl #30
    15cc:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    15d0:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    15d4:	7a070402 	bvc	1c25e4 <startup-0x1fe3da1c>
    15d8:	02000000 	andeq	r0, r0, #0
    15dc:	00fa0508 	rscseq	r0, sl, r8, lsl #10
    15e0:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    15e4:	00007507 	andeq	r7, r0, r7, lsl #10
    15e8:	03550400 	cmpeq	r5, #0, 8
    15ec:	22020000 	andcs	r0, r2, #0
    15f0:	00007719 	andeq	r7, r0, r9, lsl r7
    15f4:	7d040500 	cfstr32vc	mvfx0, [r4, #-0]
    15f8:	06000000 	streq	r0, [r0], -r0
    15fc:	00000548 	andeq	r0, r0, r8, asr #10
    1600:	0003d804 	andeq	sp, r3, r4, lsl #16
    1604:	0e2c0300 	cdpeq	3, 2, cr0, cr12, cr0, {0}
    1608:	0000004f 	andeq	r0, r0, pc, asr #32
    160c:	00055d04 	andeq	r5, r5, r4, lsl #26
    1610:	0e720300 	cdpeq	3, 7, cr0, cr2, cr0, {0}
    1614:	0000004f 	andeq	r0, r0, pc, asr #32
    1618:	00035d07 	andeq	r5, r3, r7, lsl #26
    161c:	015e0400 	cmpeq	lr, r0, lsl #8
    1620:	00002517 	andeq	r2, r0, r7, lsl r5
    1624:	03040800 	movweq	r0, #18432	; 0x4800
    1628:	00c903a6 	sbceq	r0, r9, r6, lsr #7
    162c:	4f090000 	svcmi	0x00090000
    1630:	03000003 	movweq	r0, #3
    1634:	009a0ca8 	addseq	r0, sl, r8, lsr #25
    1638:	a2090000 	andge	r0, r9, #0
    163c:	03000002 	movweq	r0, #2
    1640:	00c913a9 	sbceq	r1, r9, r9, lsr #7
    1644:	0a000000 	beq	164c <startup-0x1fffe9b4>
    1648:	0000003a 	andeq	r0, r0, sl, lsr r0
    164c:	000000d9 	ldrdeq	r0, [r0], -r9
    1650:	0000250b 	andeq	r2, r0, fp, lsl #10
    1654:	0c000300 	stceq	3, cr0, [r0], {-0}
    1658:	09a30308 	stmibeq	r3!, {r3, r8, r9}
    165c:	000000fd 	strdeq	r0, [r0], -sp
    1660:	0005400d 	andeq	r4, r5, sp
    1664:	07a50300 	streq	r0, [r5, r0, lsl #6]!
    1668:	0000002c 	andeq	r0, r0, ip, lsr #32
    166c:	054f0d00 	strbeq	r0, [pc, #-3328]	; 974 <startup-0x1ffff68c>
    1670:	aa030000 	bge	c1678 <startup-0x1ff3e988>
    1674:	0000a705 	andeq	sl, r0, r5, lsl #14
    1678:	04000400 	streq	r0, [r0], #-1024	; 0xfffffc00
    167c:	0000049c 	muleq	r0, ip, r4
    1680:	d903ab03 	stmdble	r3, {r0, r1, r8, r9, fp, sp, pc}
    1684:	04000000 	streq	r0, [r0], #-0
    1688:	00000256 	andeq	r0, r0, r6, asr r2
    168c:	6b1baf03 	blvs	6ed2a0 <startup-0x1f912d60>
    1690:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    1694:	1d040504 	cfstr32ne	mvfx0, [r4, #-16]
    1698:	02000001 	andeq	r0, r0, #1
    169c:	04380801 	ldrteq	r0, [r8], #-2049	; 0xfffff7ff
    16a0:	1d0f0000 	stcne	0, cr0, [pc, #-0]	; 16a8 <startup-0x1fffe958>
    16a4:	04000001 	streq	r0, [r0], #-1
    16a8:	000005d6 	ldrdeq	r0, [r0], -r6
    16ac:	56191605 	ldrpl	r1, [r9], -r5, lsl #12
    16b0:	10000000 	andne	r0, r0, r0
    16b4:	00000267 	andeq	r0, r0, r7, ror #4
    16b8:	082f0518 	stmdaeq	pc!, {r3, r4, r8, sl}	; <UNPREDICTABLE>
    16bc:	0000018f 	andeq	r0, r0, pc, lsl #3
    16c0:	0004bd0d 	andeq	fp, r4, sp, lsl #26
    16c4:	13310500 	teqne	r1, #0, 10
    16c8:	0000018f 	andeq	r0, r0, pc, lsl #3
    16cc:	6b5f1100 	blvs	17c5ad4 <startup-0x1e83a52c>
    16d0:	07320500 	ldreq	r0, [r2, -r0, lsl #10]!
    16d4:	0000002c 	andeq	r0, r0, ip, lsr #32
    16d8:	05130d04 	ldreq	r0, [r3, #-3332]	; 0xfffff2fc
    16dc:	32050000 	andcc	r0, r5, #0
    16e0:	00002c0b 	andeq	r2, r0, fp, lsl #24
    16e4:	500d0800 	andpl	r0, sp, r0, lsl #16
    16e8:	05000002 	streq	r0, [r0, #-2]
    16ec:	002c1432 	eoreq	r1, ip, r2, lsr r4
    16f0:	0d0c0000 	stceq	0, cr0, [ip, #-0]
    16f4:	0000062b 	andeq	r0, r0, fp, lsr #12
    16f8:	2c1b3205 	lfmcs	f3, 4, [fp], {5}
    16fc:	10000000 	andne	r0, r0, r0
    1700:	00785f11 	rsbseq	r5, r8, r1, lsl pc
    1704:	950b3305 	strls	r3, [fp, #-773]	; 0xfffffcfb
    1708:	14000001 	strne	r0, [r0], #-1
    170c:	35040500 	strcc	r0, [r4, #-1280]	; 0xfffffb00
    1710:	0a000001 	beq	171c <startup-0x1fffe8e4>
    1714:	00000129 	andeq	r0, r0, r9, lsr #2
    1718:	000001a5 	andeq	r0, r0, r5, lsr #3
    171c:	0000250b 	andeq	r2, r0, fp, lsl #10
    1720:	10000000 	andne	r0, r0, r0
    1724:	00000288 	andeq	r0, r0, r8, lsl #5
    1728:	08370524 	ldmdaeq	r7!, {r2, r5, r8, sl}
    172c:	00000228 	andeq	r0, r0, r8, lsr #4
    1730:	0000e40d 	andeq	lr, r0, sp, lsl #8
    1734:	09390500 	ldmdbeq	r9!, {r8, sl}
    1738:	0000002c 	andeq	r0, r0, ip, lsr #32
    173c:	05650d00 	strbeq	r0, [r5, #-3328]!	; 0xfffff300
    1740:	3a050000 	bcc	141748 <startup-0x1febe8b8>
    1744:	00002c09 	andeq	r2, r0, r9, lsl #24
    1748:	320d0400 	andcc	r0, sp, #0, 8
    174c:	05000001 	streq	r0, [r0, #-1]
    1750:	002c093b 	eoreq	r0, ip, fp, lsr r9
    1754:	0d080000 	stceq	0, cr0, [r8, #-0]
    1758:	00000755 	andeq	r0, r0, r5, asr r7
    175c:	2c093c05 	stccs	12, cr3, [r9], {5}
    1760:	0c000000 	stceq	0, cr0, [r0], {-0}
    1764:	0003b20d 	andeq	fp, r3, sp, lsl #4
    1768:	093d0500 	ldmdbeq	sp!, {r8, sl}
    176c:	0000002c 	andeq	r0, r0, ip, lsr #32
    1770:	036c0d10 	cmneq	ip, #16, 26	; 0x400
    1774:	3e050000 	cdpcc	0, 0, cr0, cr5, cr0, {0}
    1778:	00002c09 	andeq	r2, r0, r9, lsl #24
    177c:	300d1400 	andcc	r1, sp, r0, lsl #8
    1780:	05000006 	streq	r0, [r0, #-6]
    1784:	002c093f 	eoreq	r0, ip, pc, lsr r9
    1788:	0d180000 	ldceq	0, cr0, [r8, #-0]
    178c:	0000047e 	andeq	r0, r0, lr, ror r4
    1790:	2c094005 	stccs	0, cr4, [r9], {5}
    1794:	1c000000 	stcne	0, cr0, [r0], {-0}
    1798:	0006fa0d 	andeq	pc, r6, sp, lsl #20
    179c:	09410500 	stmdbeq	r1, {r8, sl}^
    17a0:	0000002c 	andeq	r0, r0, ip, lsr #32
    17a4:	54120020 	ldrpl	r0, [r2], #-32	; 0xffffffe0
    17a8:	08000001 	stmdaeq	r0, {r0}
    17ac:	084a0501 	stmdaeq	sl, {r0, r8, sl}^
    17b0:	0000026d 	andeq	r0, r0, sp, ror #4
    17b4:	0002070d 	andeq	r0, r2, sp, lsl #14
    17b8:	0a4b0500 	beq	12c2bc0 <startup-0x1ed3d440>
    17bc:	0000026d 	andeq	r0, r0, sp, ror #4
    17c0:	00000d00 	andeq	r0, r0, r0, lsl #26
    17c4:	4c050000 	stcmi	0, cr0, [r5], {-0}
    17c8:	00026d09 	andeq	r6, r2, r9, lsl #26
    17cc:	9e138000 	cdpls	0, 1, cr8, cr3, cr0, {0}
    17d0:	05000005 	streq	r0, [r0, #-5]
    17d4:	01290a4e 			; <UNDEFINED> instruction: 0x01290a4e
    17d8:	01000000 	mrseq	r0, (UNDEF: 0)
    17dc:	00018c13 	andeq	r8, r1, r3, lsl ip
    17e0:	0a510500 	beq	1442be8 <startup-0x1ebbd418>
    17e4:	00000129 	andeq	r0, r0, r9, lsr #2
    17e8:	0a000104 	beq	1c00 <startup-0x1fffe400>
    17ec:	00000115 	andeq	r0, r0, r5, lsl r1
    17f0:	0000027d 	andeq	r0, r0, sp, ror r2
    17f4:	0000250b 	andeq	r2, r0, fp, lsl #10
    17f8:	12001f00 	andne	r1, r0, #0, 30
    17fc:	000003bb 			; <UNDEFINED> instruction: 0x000003bb
    1800:	5d050190 	stfpls	f0, [r5, #-576]	; 0xfffffdc0
    1804:	0002c008 	andeq	ip, r2, r8
    1808:	04bd0d00 	ldrteq	r0, [sp], #3328	; 0xd00
    180c:	5e050000 	cdppl	0, 0, cr0, cr5, cr0, {0}
    1810:	0002c012 	andeq	ip, r2, r2, lsl r0
    1814:	d50d0000 	strle	r0, [sp, #-0]
    1818:	05000004 	streq	r0, [r0, #-4]
    181c:	002c065f 	eoreq	r0, ip, pc, asr r6
    1820:	0d040000 	stceq	0, cr0, [r4, #-0]
    1824:	0000021f 	andeq	r0, r0, pc, lsl r2
    1828:	c6096105 	strgt	r6, [r9], -r5, lsl #2
    182c:	08000002 	stmdaeq	r0, {r1}
    1830:	0001540d 	andeq	r5, r1, sp, lsl #8
    1834:	1e620500 	cdpne	5, 6, cr0, cr2, cr0, {0}
    1838:	00000228 	andeq	r0, r0, r8, lsr #4
    183c:	04050088 	streq	r0, [r5], #-136	; 0xffffff78
    1840:	0000027d 	andeq	r0, r0, sp, ror r2
    1844:	0002d60a 	andeq	sp, r2, sl, lsl #12
    1848:	0002d600 	andeq	sp, r2, r0, lsl #12
    184c:	00250b00 	eoreq	r0, r5, r0, lsl #22
    1850:	001f0000 	andseq	r0, pc, r0
    1854:	02dc0405 	sbcseq	r0, ip, #83886080	; 0x5000000
    1858:	10140000 	andsne	r0, r4, r0
    185c:	00000488 	andeq	r0, r0, r8, lsl #9
    1860:	08750508 	ldmdaeq	r5!, {r3, r8, sl}^
    1864:	00000305 	andeq	r0, r0, r5, lsl #6
    1868:	0001270d 	andeq	r2, r1, sp, lsl #14
    186c:	11760500 	cmnne	r6, r0, lsl #10
    1870:	00000305 	andeq	r0, r0, r5, lsl #6
    1874:	000c0d00 	andeq	r0, ip, r0, lsl #26
    1878:	77050000 	strvc	r0, [r5, -r0]
    187c:	00002c06 	andeq	r2, r0, r6, lsl #24
    1880:	05000400 	streq	r0, [r0, #-1024]	; 0xfffffc00
    1884:	00003a04 	andeq	r3, r0, r4, lsl #20
    1888:	04a71000 	strteq	r1, [r7], #0
    188c:	05680000 	strbeq	r0, [r8, #-0]!
    1890:	044e08b5 	strbeq	r0, [lr], #-2229	; 0xfffff74b
    1894:	5f110000 	svcpl	0x00110000
    1898:	b6050070 			; <UNDEFINED> instruction: 0xb6050070
    189c:	00030512 	andeq	r0, r3, r2, lsl r5
    18a0:	5f110000 	svcpl	0x00110000
    18a4:	b7050072 	smlsdxlt	r5, r2, r0, r0
    18a8:	00002c07 	andeq	r2, r0, r7, lsl #24
    18ac:	5f110400 	svcpl	0x00110400
    18b0:	b8050077 	stmdalt	r5, {r0, r1, r2, r4, r5, r6}
    18b4:	00002c07 	andeq	r2, r0, r7, lsl #24
    18b8:	850d0800 	strhi	r0, [sp, #-2048]	; 0xfffff800
    18bc:	05000001 	streq	r0, [r0, #-1]
    18c0:	004109b9 	strheq	r0, [r1], #-153	; 0xffffff67
    18c4:	0d0c0000 	stceq	0, cr0, [ip, #-0]
    18c8:	000002c0 	andeq	r0, r0, r0, asr #5
    18cc:	4109ba05 	tstmi	r9, r5, lsl #20
    18d0:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    18d4:	66625f11 	uqadd16vs	r5, r2, r1
    18d8:	11bb0500 			; <UNDEFINED> instruction: 0x11bb0500
    18dc:	000002dd 	ldrdeq	r0, [r0], -sp
    18e0:	00960d10 	addseq	r0, r6, r0, lsl sp
    18e4:	bc050000 	stclt	0, cr0, [r5], {-0}
    18e8:	00002c07 	andeq	r2, r0, r7, lsl #24
    18ec:	620d1800 	andvs	r1, sp, #0, 16
    18f0:	05000001 	streq	r0, [r0, #-1]
    18f4:	01150ac3 	tsteq	r5, r3, asr #21
    18f8:	0d1c0000 	ldceq	0, cr0, [ip, #-0]
    18fc:	00000798 	muleq	r0, r8, r7
    1900:	c01dc505 	andsgt	ip, sp, r5, lsl #10
    1904:	20000005 	andcs	r0, r0, r5
    1908:	0007f50d 	andeq	pc, r7, sp, lsl #10
    190c:	1dc70500 	cfstr64ne	mvdx0, [r7]
    1910:	000005ea 	andeq	r0, r0, sl, ror #11
    1914:	05570d24 	ldrbeq	r0, [r7, #-3364]	; 0xfffff2dc
    1918:	ca050000 	bgt	141920 <startup-0x1febe6e0>
    191c:	00060e0d 	andeq	r0, r6, sp, lsl #28
    1920:	140d2800 	strne	r2, [sp], #-2048	; 0xfffff800
    1924:	05000007 	streq	r0, [r0, #-7]
    1928:	062809cb 	strteq	r0, [r8], -fp, asr #19
    192c:	112c0000 			; <UNDEFINED> instruction: 0x112c0000
    1930:	0062755f 	rsbeq	r7, r2, pc, asr r5
    1934:	dd11ce05 	ldcle	14, cr12, [r1, #-20]	; 0xffffffec
    1938:	30000002 	andcc	r0, r0, r2
    193c:	70755f11 	rsbsvc	r5, r5, r1, lsl pc
    1940:	12cf0500 	sbcne	r0, pc, #0, 10
    1944:	00000305 	andeq	r0, r0, r5, lsl #6
    1948:	755f1138 	ldrbvc	r1, [pc, #-312]	; 1818 <startup-0x1fffe7e8>
    194c:	d0050072 	andle	r0, r5, r2, ror r0
    1950:	00002c07 	andeq	r2, r0, r7, lsl #24
    1954:	210d3c00 	tstcs	sp, r0, lsl #24
    1958:	05000001 	streq	r0, [r0, #-1]
    195c:	062e11d3 			; <UNDEFINED> instruction: 0x062e11d3
    1960:	0d400000 	stcleq	0, cr0, [r0, #-0]
    1964:	000006e2 	andeq	r0, r0, r2, ror #13
    1968:	3e11d405 	cfmulscc	mvf13, mvf1, mvf5
    196c:	43000006 	movwmi	r0, #6
    1970:	626c5f11 	rsbvs	r5, ip, #17, 30	; 0x44
    1974:	11d70500 	bicsne	r0, r7, r0, lsl #10
    1978:	000002dd 	ldrdeq	r0, [r0], -sp
    197c:	01b10d44 			; <UNDEFINED> instruction: 0x01b10d44
    1980:	da050000 	ble	141988 <startup-0x1febe678>
    1984:	00002c07 	andeq	r2, r0, r7, lsl #24
    1988:	da0d4c00 	ble	354990 <startup-0x1fcab670>
    198c:	05000001 	streq	r0, [r0, #-1]
    1990:	00820adb 	ldrdeq	r0, [r2], fp
    1994:	0d500000 	ldcleq	0, cr0, [r0, #-0]
    1998:	0000078b 	andeq	r0, r0, fp, lsl #15
    199c:	6c12de05 	ldcvs	14, cr13, [r2], {5}
    19a0:	54000004 	strpl	r0, [r0], #-4
    19a4:	0005490d 	andeq	r4, r5, sp, lsl #18
    19a8:	0ce20500 	cfstr64eq	mvdx0, [r2]
    19ac:	00000109 	andeq	r0, r0, r9, lsl #2
    19b0:	04af0d58 	strteq	r0, [pc], #3416	; 19b8 <startup-0x1fffe648>
    19b4:	e4050000 	str	r0, [r5], #-0
    19b8:	0000fd0e 	andeq	pc, r0, lr, lsl #26
    19bc:	640d5c00 	strvs	r5, [sp], #-3072	; 0xfffff400
    19c0:	05000003 	streq	r0, [r0, #-3]
    19c4:	002c09e5 	eoreq	r0, ip, r5, ror #19
    19c8:	00640000 	rsbeq	r0, r4, r0
    19cc:	00002c15 	andeq	r2, r0, r5, lsl ip
    19d0:	00046c00 	andeq	r6, r4, r0, lsl #24
    19d4:	046c1600 	strbteq	r1, [ip], #-1536	; 0xfffffa00
    19d8:	15160000 	ldrne	r0, [r6, #-0]
    19dc:	16000001 	strne	r0, [r0], -r1
    19e0:	00000117 	andeq	r0, r0, r7, lsl r1
    19e4:	00002c16 	andeq	r2, r0, r6, lsl ip
    19e8:	04050000 	streq	r0, [r5], #-0
    19ec:	00000477 	andeq	r0, r0, r7, ror r4
    19f0:	00046c0f 	andeq	r6, r4, pc, lsl #24
    19f4:	051b1700 	ldreq	r1, [fp, #-1792]	; 0xfffff900
    19f8:	04280000 	strteq	r0, [r8], #-0
    19fc:	08026005 	stmdaeq	r2, {r0, r2, sp, lr}
    1a00:	000005c0 	andeq	r0, r0, r0, asr #11
    1a04:	00046d18 	andeq	r6, r4, r8, lsl sp
    1a08:	02620500 	rsbeq	r0, r2, #0, 10
    1a0c:	00002c07 	andeq	r2, r0, r7, lsl #24
    1a10:	94180000 	ldrls	r0, [r8], #-0
    1a14:	05000001 	streq	r0, [r0, #-1]
    1a18:	9a0b0267 	bls	2c23bc <startup-0x1fd3dc44>
    1a1c:	04000006 	streq	r0, [r0], #-6
    1a20:	0002a918 	andeq	sl, r2, r8, lsl r9
    1a24:	02670500 	rsbeq	r0, r7, #0, 10
    1a28:	00069a14 	andeq	r9, r6, r4, lsl sl
    1a2c:	5f180800 	svcpl	0x00180800
    1a30:	05000002 	streq	r0, [r0, #-2]
    1a34:	9a1e0267 	bls	7823d8 <startup-0x1f87dc28>
    1a38:	0c000006 	stceq	0, cr0, [r0], {6}
    1a3c:	0004d018 	andeq	sp, r4, r8, lsl r0
    1a40:	02690500 	rsbeq	r0, r9, #0, 10
    1a44:	00002c08 	andeq	r2, r0, r8, lsl #24
    1a48:	24181000 	ldrcs	r1, [r8], #-0
    1a4c:	05000000 	streq	r0, [r0, #-0]
    1a50:	9a08026a 	bls	202400 <startup-0x1fdfdc00>
    1a54:	14000008 	strne	r0, [r0], #-8
    1a58:	0004fa18 	andeq	pc, r4, r8, lsl sl	; <UNPREDICTABLE>
    1a5c:	026d0500 	rsbeq	r0, sp, #0, 10
    1a60:	00002c07 	andeq	r2, r0, r7, lsl #24
    1a64:	e8183000 	ldmda	r8, {ip, sp}
    1a68:	05000004 	streq	r0, [r0, #-4]
    1a6c:	af16026e 	svcge	0x0016026e
    1a70:	34000008 	strcc	r0, [r0], #-8
    1a74:	0003cd18 	andeq	ip, r3, r8, lsl sp
    1a78:	02700500 	rsbseq	r0, r0, #0, 10
    1a7c:	00002c07 	andeq	r2, r0, r7, lsl #24
    1a80:	f0183800 			; <UNDEFINED> instruction: 0xf0183800
    1a84:	05000004 	streq	r0, [r0, #-4]
    1a88:	c00a0272 	andgt	r0, sl, r2, ror r2
    1a8c:	3c000008 	stccc	0, cr0, [r0], {8}
    1a90:	00034718 	andeq	r4, r3, r8, lsl r7
    1a94:	02750500 	rsbseq	r0, r5, #0, 10
    1a98:	00018f13 	andeq	r8, r1, r3, lsl pc
    1a9c:	7e184000 	cdpvc	0, 1, cr4, cr8, cr0, {0}
    1aa0:	05000002 	streq	r0, [r0, #-2]
    1aa4:	2c070276 	sfmcs	f0, 4, [r7], {118}	; 0x76
    1aa8:	44000000 	strmi	r0, [r0], #-0
    1aac:	00073418 	andeq	r3, r7, r8, lsl r4
    1ab0:	02770500 	rsbseq	r0, r7, #0, 10
    1ab4:	00018f13 	andeq	r8, r1, r3, lsl pc
    1ab8:	e9184800 	ldmdb	r8, {fp, lr}
    1abc:	05000003 	streq	r0, [r0, #-3]
    1ac0:	c6140278 			; <UNDEFINED> instruction: 0xc6140278
    1ac4:	4c000008 	stcmi	0, cr0, [r0], {8}
    1ac8:	0002b818 	andeq	fp, r2, r8, lsl r8
    1acc:	027b0500 	rsbseq	r0, fp, #0, 10
    1ad0:	00002c07 	andeq	r2, r0, r7, lsl #24
    1ad4:	d2185000 	andsle	r5, r8, #0
    1ad8:	05000001 	streq	r0, [r0, #-1]
    1adc:	1709027c 	smlsdxne	r9, ip, r2, r0
    1ae0:	54000001 	strpl	r0, [r0], #-1
    1ae4:	00043d18 	andeq	r3, r4, r8, lsl sp
    1ae8:	029f0500 	addseq	r0, pc, #0, 10
    1aec:	00087507 	andeq	r7, r8, r7, lsl #10
    1af0:	bb195800 	bllt	657af8 <startup-0x1f9a8508>
    1af4:	05000003 	streq	r0, [r0, #-3]
    1af8:	c01302a3 	andsgt	r0, r3, r3, lsr #5
    1afc:	48000002 	stmdami	r0, {r1}
    1b00:	03171901 	tsteq	r7, #16384	; 0x4000
    1b04:	a4050000 	strge	r0, [r5], #-0
    1b08:	027d1202 	rsbseq	r1, sp, #536870912	; 0x20000000
    1b0c:	014c0000 	mrseq	r0, (UNDEF: 76)
    1b10:	0006d319 	andeq	sp, r6, r9, lsl r3
    1b14:	02a80500 	adceq	r0, r8, #0, 10
    1b18:	0008d70c 	andeq	sp, r8, ip, lsl #14
    1b1c:	1902dc00 	stmdbne	r2, {sl, fp, ip, lr, pc}
    1b20:	0000016a 	andeq	r0, r0, sl, ror #2
    1b24:	1002ad05 	andne	sl, r2, r5, lsl #26
    1b28:	0000065b 	andeq	r0, r0, fp, asr r6
    1b2c:	4f1902e0 	svcmi	0x001902e0
    1b30:	05000001 	streq	r0, [r0, #-1]
    1b34:	e30a02af 	movw	r0, #41647	; 0xa2af
    1b38:	ec000008 	stc	0, cr0, [r0], {8}
    1b3c:	04050002 	streq	r0, [r5], #-2
    1b40:	0000044e 	andeq	r0, r0, lr, asr #8
    1b44:	00002c15 	andeq	r2, r0, r5, lsl ip
    1b48:	0005e400 	andeq	lr, r5, r0, lsl #8
    1b4c:	046c1600 	strbteq	r1, [ip], #-1536	; 0xfffffa00
    1b50:	15160000 	ldrne	r0, [r6, #-0]
    1b54:	16000001 	strne	r0, [r0], -r1
    1b58:	000005e4 	andeq	r0, r0, r4, ror #11
    1b5c:	00002c16 	andeq	r2, r0, r6, lsl ip
    1b60:	04050000 	streq	r0, [r5], #-0
    1b64:	00000124 	andeq	r0, r0, r4, lsr #2
    1b68:	05c60405 	strbeq	r0, [r6, #1029]	; 0x405
    1b6c:	8e150000 	cdphi	0, 1, cr0, cr5, cr0, {0}
    1b70:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    1b74:	16000006 	strne	r0, [r0], -r6
    1b78:	0000046c 	andeq	r0, r0, ip, ror #8
    1b7c:	00011516 	andeq	r1, r1, r6, lsl r5
    1b80:	008e1600 	addeq	r1, lr, r0, lsl #12
    1b84:	2c160000 	ldccs	0, cr0, [r6], {-0}
    1b88:	00000000 	andeq	r0, r0, r0
    1b8c:	05f00405 	ldrbeq	r0, [r0, #1029]!	; 0x405
    1b90:	2c150000 	ldccs	0, cr0, [r5], {-0}
    1b94:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    1b98:	16000006 	strne	r0, [r0], -r6
    1b9c:	0000046c 	andeq	r0, r0, ip, ror #8
    1ba0:	00011516 	andeq	r1, r1, r6, lsl r5
    1ba4:	04050000 	streq	r0, [r5], #-0
    1ba8:	00000614 	andeq	r0, r0, r4, lsl r6
    1bac:	00003a0a 	andeq	r3, r0, sl, lsl #20
    1bb0:	00063e00 	andeq	r3, r6, r0, lsl #28
    1bb4:	00250b00 	eoreq	r0, r5, r0, lsl #22
    1bb8:	00020000 	andeq	r0, r2, r0
    1bbc:	00003a0a 	andeq	r3, r0, sl, lsl #20
    1bc0:	00064e00 	andeq	r4, r6, r0, lsl #28
    1bc4:	00250b00 	eoreq	r0, r5, r0, lsl #22
    1bc8:	00000000 	andeq	r0, r0, r0
    1bcc:	00049507 	andeq	r9, r4, r7, lsl #10
    1bd0:	011f0500 	tsteq	pc, r0, lsl #10
    1bd4:	00030b1a 	andeq	r0, r3, sl, lsl fp
    1bd8:	063a1a00 	ldrteq	r1, [sl], -r0, lsl #20
    1bdc:	050c0000 	streq	r0, [ip, #-0]
    1be0:	94080123 	strls	r0, [r8], #-291	; 0xfffffedd
    1be4:	18000006 	stmdane	r0, {r1, r2}
    1be8:	000004bd 			; <UNDEFINED> instruction: 0x000004bd
    1bec:	11012505 	tstne	r1, r5, lsl #10
    1bf0:	00000694 	muleq	r0, r4, r6
    1bf4:	02db1800 	sbcseq	r1, fp, #0, 16
    1bf8:	26050000 	strcs	r0, [r5], -r0
    1bfc:	002c0701 	eoreq	r0, ip, r1, lsl #14
    1c00:	18040000 	stmdane	r4, {}	; <UNPREDICTABLE>
    1c04:	0000048f 	andeq	r0, r0, pc, lsl #9
    1c08:	0b012705 	bleq	4b824 <startup-0x1ffb47dc>
    1c0c:	0000069a 	muleq	r0, sl, r6
    1c10:	04050008 	streq	r0, [r5], #-8
    1c14:	0000065b 	andeq	r0, r0, fp, asr r6
    1c18:	064e0405 	strbeq	r0, [lr], -r5, lsl #8
    1c1c:	1c1a0000 	ldcne	0, cr0, [sl], {-0}
    1c20:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    1c24:	08013f05 	stmdaeq	r1, {r0, r2, r8, r9, sl, fp, ip, sp}
    1c28:	000006d9 	ldrdeq	r0, [r0], -r9
    1c2c:	00052218 	andeq	r2, r5, r8, lsl r2
    1c30:	01400500 	cmpeq	r0, r0, lsl #10
    1c34:	0006d912 	andeq	sp, r6, r2, lsl r9
    1c38:	8b180000 	blhi	601c40 <startup-0x1f9fe3c0>
    1c3c:	05000005 	streq	r0, [r0, #-5]
    1c40:	d9120141 	ldmdble	r2, {r0, r6, r8}
    1c44:	06000006 	streq	r0, [r0], -r6
    1c48:	0005b818 	andeq	fp, r5, r8, lsl r8
    1c4c:	01420500 	cmpeq	r2, r0, lsl #10
    1c50:	00004812 	andeq	r4, r0, r2, lsl r8
    1c54:	0a000c00 	beq	4c5c <startup-0x1fffb3a4>
    1c58:	00000048 	andeq	r0, r0, r8, asr #32
    1c5c:	000006e9 	andeq	r0, r0, r9, ror #13
    1c60:	0000250b 	andeq	r2, r0, fp, lsl #10
    1c64:	1b000200 	blne	246c <startup-0x1fffdb94>
    1c68:	028005d0 	addeq	r0, r0, #208, 10	; 0x34000000
    1c6c:	0007fe07 	andeq	pc, r7, r7, lsl #28
    1c70:	06181800 	ldreq	r1, [r8], -r0, lsl #16
    1c74:	82050000 	andhi	r0, r5, #0
    1c78:	00251802 	eoreq	r1, r5, r2, lsl #16
    1c7c:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    1c80:	00000591 	muleq	r0, r1, r5
    1c84:	12028305 	andne	r8, r2, #335544320	; 0x14000000
    1c88:	00000117 	andeq	r0, r0, r7, lsl r1
    1c8c:	032c1804 			; <UNDEFINED> instruction: 0x032c1804
    1c90:	84050000 	strhi	r0, [r5], #-0
    1c94:	07fe1002 	ldrbeq	r1, [lr, r2]!
    1c98:	18080000 	stmdane	r8, {}	; <UNPREDICTABLE>
    1c9c:	00000705 	andeq	r0, r0, r5, lsl #14
    1ca0:	17028505 	strne	r8, [r2, -r5, lsl #10]
    1ca4:	000001a5 	andeq	r0, r0, r5, lsr #3
    1ca8:	026f1824 	rsbeq	r1, pc, #36, 16	; 0x240000
    1cac:	86050000 	strhi	r0, [r5], -r0
    1cb0:	002c0f02 	eoreq	r0, ip, r2, lsl #30
    1cb4:	18480000 	stmdane	r8, {}^	; <UNPREDICTABLE>
    1cb8:	000004b8 			; <UNDEFINED> instruction: 0x000004b8
    1cbc:	2c028705 	stccs	7, cr8, [r2], {5}
    1cc0:	00000064 	andeq	r0, r0, r4, rrx
    1cc4:	07211850 			; <UNDEFINED> instruction: 0x07211850
    1cc8:	88050000 	stmdahi	r5, {}	; <UNPREDICTABLE>
    1ccc:	06a01a02 	strteq	r1, [r0], r2, lsl #20
    1cd0:	18580000 	ldmdane	r8, {}^	; <UNPREDICTABLE>
    1cd4:	000004c3 	andeq	r0, r0, r3, asr #9
    1cd8:	16028905 	strne	r8, [r2], -r5, lsl #18
    1cdc:	000000fd 	strdeq	r0, [r0], -sp
    1ce0:	07261868 	streq	r1, [r6, -r8, ror #16]!
    1ce4:	8a050000 	bhi	141cec <startup-0x1febe314>
    1ce8:	00fd1602 	rscseq	r1, sp, r2, lsl #12
    1cec:	18700000 	ldmdane	r0!, {}^	; <UNPREDICTABLE>
    1cf0:	000003f3 	strdeq	r0, [r0], -r3
    1cf4:	16028b05 	strne	r8, [r2], -r5, lsl #22
    1cf8:	000000fd 	strdeq	r0, [r0], -sp
    1cfc:	06c91878 	uxtab16eq	r1, r9, r8, ror #16
    1d00:	8c050000 	stchi	0, cr0, [r5], {-0}
    1d04:	080e1002 	stmdaeq	lr, {r1, ip}
    1d08:	18800000 	stmne	r0, {}	; <UNPREDICTABLE>
    1d0c:	00000320 	andeq	r0, r0, r0, lsr #6
    1d10:	10028d05 	andne	r8, r2, r5, lsl #26
    1d14:	0000081e 	andeq	r0, r0, lr, lsl r8
    1d18:	05de1888 	ldrbeq	r1, [lr, #2184]	; 0x888
    1d1c:	8e050000 	cdphi	0, 0, cr0, cr5, cr0, {0}
    1d20:	002c0f02 	eoreq	r0, ip, r2, lsl #30
    1d24:	18a00000 	stmiane	r0!, {}	; <UNPREDICTABLE>
    1d28:	000001f9 	strdeq	r0, [r0], -r9
    1d2c:	16028f05 	strne	r8, [r2], -r5, lsl #30
    1d30:	000000fd 	strdeq	r0, [r0], -sp
    1d34:	00d518a4 	sbcseq	r1, r5, r4, lsr #17
    1d38:	90050000 	andls	r0, r5, r0
    1d3c:	00fd1602 	rscseq	r1, sp, r2, lsl #12
    1d40:	18ac0000 	stmiane	ip!, {}	; <UNPREDICTABLE>
    1d44:	000001e2 	andeq	r0, r0, r2, ror #3
    1d48:	16029105 	strne	r9, [r2], -r5, lsl #2
    1d4c:	000000fd 	strdeq	r0, [r0], -sp
    1d50:	005518b4 	ldrheq	r1, [r5], #-132	; 0xffffff7c
    1d54:	92050000 	andls	r0, r5, #0
    1d58:	00fd1602 	rscseq	r1, sp, r2, lsl #12
    1d5c:	18bc0000 	ldmne	ip!, {}	; <UNPREDICTABLE>
    1d60:	00000064 	andeq	r0, r0, r4, rrx
    1d64:	16029305 	strne	r9, [r2], -r5, lsl #6
    1d68:	000000fd 	strdeq	r0, [r0], -sp
    1d6c:	046b18c4 	strbteq	r1, [fp], #-2244	; 0xfffff73c
    1d70:	94050000 	strls	r0, [r5], #-0
    1d74:	002c0802 	eoreq	r0, ip, r2, lsl #16
    1d78:	00cc0000 	sbceq	r0, ip, r0
    1d7c:	00011d0a 	andeq	r1, r1, sl, lsl #26
    1d80:	00080e00 	andeq	r0, r8, r0, lsl #28
    1d84:	00250b00 	eoreq	r0, r5, r0, lsl #22
    1d88:	00190000 	andseq	r0, r9, r0
    1d8c:	00011d0a 	andeq	r1, r1, sl, lsl #26
    1d90:	00081e00 	andeq	r1, r8, r0, lsl #28
    1d94:	00250b00 	eoreq	r0, r5, r0, lsl #22
    1d98:	00070000 	andeq	r0, r7, r0
    1d9c:	00011d0a 	andeq	r1, r1, sl, lsl #26
    1da0:	00082e00 	andeq	r2, r8, r0, lsl #28
    1da4:	00250b00 	eoreq	r0, r5, r0, lsl #22
    1da8:	00170000 	andseq	r0, r7, r0
    1dac:	9905f01b 	stmdbls	r5, {r0, r1, r3, r4, ip, sp, lr, pc}
    1db0:	08550702 	ldmdaeq	r5, {r1, r8, r9, sl}^
    1db4:	ab180000 	blge	601dbc <startup-0x1f9fe244>
    1db8:	05000003 	streq	r0, [r0, #-3]
    1dbc:	551b029c 	ldrpl	r0, [fp, #-668]	; 0xfffffd64
    1dc0:	00000008 	andeq	r0, r0, r8
    1dc4:	00038318 	andeq	r8, r3, r8, lsl r3
    1dc8:	029d0500 	addseq	r0, sp, #0, 10
    1dcc:	00086518 	andeq	r6, r8, r8, lsl r5
    1dd0:	0a007800 	beq	1fdd8 <startup-0x1ffe0228>
    1dd4:	00000305 	andeq	r0, r0, r5, lsl #6
    1dd8:	00000865 	andeq	r0, r0, r5, ror #16
    1ddc:	0000250b 	andeq	r2, r0, fp, lsl #10
    1de0:	0a001d00 	beq	91e8 <startup-0x1fff6e18>
    1de4:	00000025 	andeq	r0, r0, r5, lsr #32
    1de8:	00000875 	andeq	r0, r0, r5, ror r8
    1dec:	0000250b 	andeq	r2, r0, fp, lsl #10
    1df0:	1c001d00 	stcne	13, cr1, [r0], {-0}
    1df4:	027e05f0 	rsbseq	r0, lr, #240, 10	; 0x3c000000
    1df8:	00089a03 	andeq	r9, r8, r3, lsl #20
    1dfc:	051b1d00 	ldreq	r1, [fp, #-3328]	; 0xfffff300
    1e00:	95050000 	strls	r0, [r5, #-0]
    1e04:	06e90b02 	strbteq	r0, [r9], r2, lsl #22
    1e08:	e81d0000 	ldmda	sp, {}	; <UNPREDICTABLE>
    1e0c:	05000006 	streq	r0, [r0, #-6]
    1e10:	2e0b029e 	mcrcs	2, 0, r0, cr11, cr14, {4}
    1e14:	00000008 	andeq	r0, r0, r8
    1e18:	00011d0a 	andeq	r1, r1, sl, lsl #26
    1e1c:	0008aa00 	andeq	sl, r8, r0, lsl #20
    1e20:	00250b00 	eoreq	r0, r5, r0, lsl #22
    1e24:	00180000 	andseq	r0, r8, r0
    1e28:	0000a606 	andeq	sl, r0, r6, lsl #12
    1e2c:	aa040500 	bge	103234 <startup-0x1fefcdcc>
    1e30:	1e000008 	cdpne	0, 0, cr0, cr0, cr8, {0}
    1e34:	000008c0 	andeq	r0, r0, r0, asr #17
    1e38:	00046c16 	andeq	r6, r4, r6, lsl ip
    1e3c:	04050000 	streq	r0, [r5], #-0
    1e40:	000008b5 			; <UNDEFINED> instruction: 0x000008b5
    1e44:	018f0405 	orreq	r0, pc, r5, lsl #8
    1e48:	d71e0000 	ldrle	r0, [lr, -r0]
    1e4c:	16000008 	strne	r0, [r0], -r8
    1e50:	0000002c 	andeq	r0, r0, ip, lsr #32
    1e54:	dd040500 	cfstr32le	mvfx0, [r4, #-0]
    1e58:	05000008 	streq	r0, [r0, #-8]
    1e5c:	0008cc04 	andeq	ip, r8, r4, lsl #24
    1e60:	064e0a00 	strbeq	r0, [lr], -r0, lsl #20
    1e64:	08f30000 	ldmeq	r3!, {}^	; <UNPREDICTABLE>
    1e68:	250b0000 	strcs	r0, [fp, #-0]
    1e6c:	02000000 	andeq	r0, r0, #0
    1e70:	05ff1f00 	ldrbeq	r1, [pc, #3840]!	; 2d78 <startup-0x1fffd288>
    1e74:	2e050000 	cdpcs	0, 0, cr0, cr5, cr0, {0}
    1e78:	046c1703 	strbteq	r1, [ip], #-1795	; 0xfffff8fd
    1e7c:	f81f0000 			; <UNDEFINED> instruction: 0xf81f0000
    1e80:	05000005 	streq	r0, [r0, #-5]
    1e84:	721d032f 	andsvc	r0, sp, #-1140850688	; 0xbc000000
    1e88:	10000004 	andne	r0, r0, r4
    1e8c:	00000646 	andeq	r0, r0, r6, asr #12
    1e90:	10010602 	andne	r0, r1, r2, lsl #12
    1e94:	00000931 	andeq	r0, r0, r1, lsr r9
    1e98:	06007811 			; <UNDEFINED> instruction: 0x06007811
    1e9c:	003a1302 	eorseq	r1, sl, r2, lsl #6
    1ea0:	11000000 	mrsne	r0, (UNDEF: 0)
    1ea4:	03060079 	movweq	r0, #24697	; 0x6079
    1ea8:	00003a13 	andeq	r3, r0, r3, lsl sl
    1eac:	04000100 	streq	r0, [r0], #-256	; 0xffffff00
    1eb0:	000001f3 	strdeq	r0, [r0], -r3
    1eb4:	0d020406 	cfstrseq	mvf0, [r2, #-24]	; 0xffffffe8
    1eb8:	10000009 	andne	r0, r0, r9
    1ebc:	00000012 	andeq	r0, r0, r2, lsl r0
    1ec0:	1008062c 	andne	r0, r8, ip, lsr #12
    1ec4:	0000097e 	andeq	r0, r0, lr, ror r9
    1ec8:	0001170d 	andeq	r1, r1, sp, lsl #14
    1ecc:	09090600 	stmdbeq	r9, {r9, sl}
    1ed0:	0000002c 	andeq	r0, r0, ip, lsr #32
    1ed4:	06400d00 	strbeq	r0, [r0], -r0, lsl #26
    1ed8:	0a060000 	beq	181ee0 <startup-0x1fe7e120>
    1edc:	00002c09 	andeq	r2, r0, r9, lsl #24
    1ee0:	1b0d0400 	blne	342ee8 <startup-0x1fcbd118>
    1ee4:	06000007 	streq	r0, [r0], -r7
    1ee8:	002c090b 	eoreq	r0, ip, fp, lsl #18
    1eec:	11080000 	mrsne	r0, (UNDEF: 8)
    1ef0:	06007870 			; <UNDEFINED> instruction: 0x06007870
    1ef4:	097e0b0c 	ldmdbeq	lr!, {r2, r3, r8, r9, fp}^
    1ef8:	000c0000 	andeq	r0, ip, r0
    1efc:	0009310a 	andeq	r3, r9, sl, lsl #2
    1f00:	00098e00 	andeq	r8, r9, r0, lsl #28
    1f04:	00250b00 	eoreq	r0, r5, r0, lsl #22
    1f08:	000f0000 	andeq	r0, pc, r0
    1f0c:	0003c304 	andeq	ip, r3, r4, lsl #6
    1f10:	0e0d0600 	cfmadd32eq	mvax0, mvfx0, mvfx13, mvfx0
    1f14:	0000099a 	muleq	r0, sl, r9
    1f18:	093d0405 	ldmdbeq	sp!, {r0, r2, sl}
    1f1c:	b3100000 	tstlt	r0, #0
    1f20:	24000005 	strcs	r0, [r0], #-5
    1f24:	23100f06 	tstcs	r0, #6, 30
    1f28:	1100000a 	tstne	r0, sl
    1f2c:	006f6567 	rsbeq	r6, pc, r7, ror #10
    1f30:	8e0f1006 	cdphi	0, 0, cr1, cr15, cr6, {0}
    1f34:	00000009 	andeq	r0, r0, r9
    1f38:	00002f0d 	andeq	r2, r0, sp, lsl #30
    1f3c:	09110600 	ldmdbeq	r1, {r9, sl}
    1f40:	0000002c 	andeq	r0, r0, ip, lsr #32
    1f44:	003e0d04 	eorseq	r0, lr, r4, lsl #26
    1f48:	11060000 	mrsne	r0, (UNDEF: 6)
    1f4c:	00002c0e 	andeq	r2, r0, lr, lsl #24
    1f50:	dd0d0800 	stcle	8, cr0, [sp, #-0]
    1f54:	06000006 	streq	r0, [r0], -r6
    1f58:	002c0912 	eoreq	r0, ip, r2, lsl r9
    1f5c:	0d0c0000 	stceq	0, cr0, [ip, #-0]
    1f60:	000006f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1f64:	2c0e1206 	sfmcs	f1, 4, [lr], {6}
    1f68:	10000000 	andne	r0, r0, r0
    1f6c:	0005f30d 	andeq	pc, r5, sp, lsl #6
    1f70:	0d130600 	ldceq	6, cr0, [r3, #-0]
    1f74:	00000a34 	andeq	r0, r0, r4, lsr sl
    1f78:	084d0d14 	stmdaeq	sp, {r2, r4, r8, sl, fp}^
    1f7c:	14060000 	strne	r0, [r6], #-0
    1f80:	000a340d 	andeq	r3, sl, sp, lsl #8
    1f84:	f40d1800 	vst2.8	{d1-d2}, [sp], r0
    1f88:	06000008 	streq	r0, [r0], -r8
    1f8c:	0a340d15 	beq	d053e8 <startup-0x1f2fac18>
    1f90:	0d1c0000 	ldceq	0, cr0, [ip, #-0]
    1f94:	0000008c 	andeq	r0, r0, ip, lsl #1
    1f98:	4f0d1606 	svcmi	0x000d1606
    1f9c:	2000000a 	andcs	r0, r0, sl
    1fa0:	0a2e1e00 	beq	b897a8 <startup-0x1f476858>
    1fa4:	2e160000 	cdpcs	0, 1, cr0, cr6, cr0, {0}
    1fa8:	0000000a 	andeq	r0, r0, sl
    1fac:	09a00405 	stmibeq	r0!, {r0, r2, sl}
    1fb0:	04050000 	streq	r0, [r5], #-0
    1fb4:	00000a23 	andeq	r0, r0, r3, lsr #20
    1fb8:	000a4f1e 	andeq	r4, sl, lr, lsl pc
    1fbc:	0a2e1600 	beq	b877c4 <startup-0x1f47883c>
    1fc0:	2c160000 	ldccs	0, cr0, [r6], {-0}
    1fc4:	16000000 	strne	r0, [r0], -r0
    1fc8:	0000002c 	andeq	r0, r0, ip, lsr #32
    1fcc:	3a040500 	bcc	1033d4 <startup-0x1fefcc2c>
    1fd0:	0400000a 	streq	r0, [r0], #-10
    1fd4:	000003a3 	andeq	r0, r0, r3, lsr #7
    1fd8:	2e0c1706 	cdpcs	7, 0, cr1, cr12, cr6, {0}
    1fdc:	0a00000a 	beq	200c <startup-0x1fffdff4>
    1fe0:	00000a55 	andeq	r0, r0, r5, asr sl
    1fe4:	00000a71 	andeq	r0, r0, r1, ror sl
    1fe8:	0000250b 	andeq	r2, r0, fp, lsl #10
    1fec:	20006300 	andcs	r6, r0, r0, lsl #6
    1ff0:	0000091e 	andeq	r0, r0, lr, lsl r9
    1ff4:	61090501 	tstvs	r9, r1, lsl #10
    1ff8:	0500000a 	streq	r0, [r0, #-10]
    1ffc:	00375403 	eorseq	r5, r7, r3, lsl #8
    2000:	09362020 	ldmdbeq	r6!, {r5, sp}
    2004:	06010000 	streq	r0, [r1], -r0
    2008:	00002c05 	andeq	r2, r0, r5, lsl #24
    200c:	48030500 	stmdami	r3, {r8, sl}
    2010:	20200037 	eorcs	r0, r0, r7, lsr r0
    2014:	00000927 	andeq	r0, r0, r7, lsr #18
    2018:	2c050701 	stccs	7, cr0, [r5], {1}
    201c:	05000000 	streq	r0, [r0, #-0]
    2020:	003a1c03 	eorseq	r1, sl, r3, lsl #24
    2024:	092c2020 	stmdbeq	ip!, {r5, sp}
    2028:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
    202c:	00002c05 	andeq	r2, r0, r5, lsl #24
    2030:	4c030500 	cfstr32mi	mvfx0, [r3], {-0}
    2034:	21200037 			; <UNDEFINED> instruction: 0x21200037
    2038:	000008f2 	strdeq	r0, [r0], -r2
    203c:	2c053001 	stccs	0, cr3, [r5], {1}
    2040:	60000000 	andvs	r0, r0, r0
    2044:	48200010 	stmdami	r0!, {r4}
    2048:	01000000 	mrseq	r0, (UNDEF: 0)
    204c:	000ae39c 	muleq	sl, ip, r3
    2050:	078c2200 	streq	r2, [ip, r0, lsl #4]
    2054:	31010000 	mrscc	r0, (UNDEF: 1)
    2058:	000a550c 	andeq	r5, sl, ip, lsl #10
    205c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    2060:	090c2300 	stmdbeq	ip, {r8, r9, sp}
    2064:	24010000 	strcs	r0, [r1], #-0
    2068:	00100006 	andseq	r0, r0, r6
    206c:	00006020 	andeq	r6, r0, r0, lsr #32
    2070:	099c0100 	ldmibeq	ip, {r8}
    2074:	2400000b 	strcs	r0, [r0], #-11
    2078:	0000078c 	andeq	r0, r0, ip, lsl #15
    207c:	55152401 	ldrpl	r2, [r5, #-1025]	; 0xfffffbff
    2080:	0200000a 	andeq	r0, r0, #10
    2084:	25007491 	strcs	r7, [r0, #-1169]	; 0xfffffb6f
    2088:	0000000d 	andeq	r0, r0, sp
    208c:	2c051f01 	stccs	15, cr1, [r5], {1}
    2090:	ec000000 	stc	0, cr0, [r0], {-0}
    2094:	1420000f 	strtne	r0, [r0], #-15
    2098:	01000000 	mrseq	r0, (UNDEF: 0)
    209c:	08eb259c 	stmiaeq	fp!, {r2, r3, r4, r7, r8, sl, sp}^
    20a0:	1a010000 	bne	420a8 <startup-0x1ffbdf58>
    20a4:	000b3506 	andeq	r3, fp, r6, lsl #10
    20a8:	000fd000 	andeq	sp, pc, r0
    20ac:	00001c20 	andeq	r1, r0, r0, lsr #24
    20b0:	029c0100 	addseq	r0, ip, #0, 2
    20b4:	09060201 	stmdbeq	r6, {r0, r9}
    20b8:	f9250000 			; <UNDEFINED> instruction: 0xf9250000
    20bc:	01000008 	tsteq	r0, r8
    20c0:	0b350615 	bleq	d4391c <startup-0x1f2bc6e4>
    20c4:	0fb80000 	svceq	0x00b80000
    20c8:	00182000 	andseq	r2, r8, r0
    20cc:	9c010000 	stcls	0, cr0, [r1], {-0}
    20d0:	00090125 	andeq	r0, r9, r5, lsr #2
    20d4:	09100100 	ldmdbeq	r0, {r8}
    20d8:	00000a55 	andeq	r0, r0, r5, asr sl
    20dc:	20000f9c 	mulcs	r0, ip, pc	; <UNPREDICTABLE>
    20e0:	0000001c 	andeq	r0, r0, ip, lsl r0
    20e4:	13269c01 			; <UNDEFINED> instruction: 0x13269c01
    20e8:	01000009 	tsteq	r0, r9
    20ec:	0f6c060a 	svceq	0x006c060a
    20f0:	00302000 	eorseq	r2, r0, r0
    20f4:	9c010000 	stcls	0, cr0, [r1], {-0}
    20f8:	000f7227 	andeq	r7, pc, r7, lsr #4
    20fc:	00001c20 	andeq	r1, r0, r0, lsr #24
    2100:	00692800 	rsbeq	r2, r9, r0, lsl #16
    2104:	2c0d0b01 			; <UNDEFINED> instruction: 0x2c0d0b01
    2108:	02000000 	andeq	r0, r0, #0
    210c:	00007491 	muleq	r0, r1, r4
    2110:	00026600 	andeq	r6, r2, r0, lsl #12
    2114:	96000400 	strls	r0, [r0], -r0, lsl #8
    2118:	04000007 	streq	r0, [r0], #-7
    211c:	00064d01 	andeq	r4, r6, r1, lsl #26
    2120:	0a040c00 	beq	105128 <startup-0x1fefaed8>
    2124:	040d0000 	streq	r0, [sp], #-0
    2128:	10a80000 	adcne	r0, r8, r0
    212c:	031e2000 	tsteq	lr, #0
    2130:	0c020000 	stceq	0, cr0, [r2], {-0}
    2134:	01020000 	mrseq	r0, (UNDEF: 2)
    2138:	00042f08 	andeq	r2, r4, r8, lsl #30
    213c:	04010300 	streq	r0, [r1], #-768	; 0xfffffd00
    2140:	79010000 	stmdbvc	r1, {}	; <UNPREDICTABLE>
    2144:	00138e06 	andseq	r8, r3, r6, lsl #28
    2148:	00003820 	andeq	r3, r0, r0, lsr #16
    214c:	5f9c0100 	svcpl	0x009c0100
    2150:	04000000 	streq	r0, [r0], #-0
    2154:	00000995 	muleq	r0, r5, r9
    2158:	5f187901 	svcpl	0x00187901
    215c:	02000000 	andeq	r0, r0, #0
    2160:	69056c91 	stmdbvs	r5, {r0, r4, r7, sl, fp, sp, lr}
    2164:	097b0100 	ldmdbeq	fp!, {r8}^
    2168:	0000006c 	andeq	r0, r0, ip, rrx
    216c:	00749102 	rsbseq	r9, r4, r2, lsl #2
    2170:	00650406 	rsbeq	r0, r5, r6, lsl #8
    2174:	01020000 	mrseq	r0, (UNDEF: 2)
    2178:	00043808 	andeq	r3, r4, r8, lsl #16
    217c:	05040700 	streq	r0, [r4, #-1792]	; 0xfffff900
    2180:	00746e69 	rsbseq	r6, r4, r9, ror #28
    2184:	00093c03 	andeq	r3, r9, r3, lsl #24
    2188:	066f0100 	strbteq	r0, [pc], -r0, lsl #2
    218c:	20001342 	andcs	r1, r0, r2, asr #6
    2190:	0000004c 	andeq	r0, r0, ip, asr #32
    2194:	00b39c01 	adcseq	r9, r3, r1, lsl #24
    2198:	78080000 	stmdavc	r8, {}	; <UNPREDICTABLE>
    219c:	176f0100 	strbne	r0, [pc, -r0, lsl #2]!
    21a0:	0000006c 	andeq	r0, r0, ip, rrx
    21a4:	086c9102 	stmdaeq	ip!, {r1, r8, ip, pc}^
    21a8:	6f010079 	svcvs	0x00010079
    21ac:	00006c1e 	andeq	r6, r0, lr, lsl ip
    21b0:	68910200 	ldmvs	r1, {r9}
    21b4:	0009b209 	andeq	fp, r9, r9, lsl #4
    21b8:	13700100 	cmnne	r0, #0, 2
    21bc:	00000025 	andeq	r0, r0, r5, lsr #32
    21c0:	00779102 	rsbseq	r9, r7, r2, lsl #2
    21c4:	000a5c03 	andeq	r5, sl, r3, lsl #24
    21c8:	06680100 	strbteq	r0, [r8], -r0, lsl #2
    21cc:	20001318 	andcs	r1, r0, r8, lsl r3
    21d0:	0000002a 	andeq	r0, r0, sl, lsr #32
    21d4:	00d79c01 	sbcseq	r9, r7, r1, lsl #24
    21d8:	63080000 	movwvs	r0, #32768	; 0x8000
    21dc:	25680100 	strbcs	r0, [r8, #-256]!	; 0xffffff00
    21e0:	00000025 	andeq	r0, r0, r5, lsr #32
    21e4:	00779102 	rsbseq	r9, r7, r2, lsl #2
    21e8:	000a4d0a 	andeq	r4, sl, sl, lsl #26
    21ec:	06610100 	strbteq	r0, [r1], -r0, lsl #2
    21f0:	200012ea 	andcs	r1, r0, sl, ror #5
    21f4:	0000002e 	andeq	r0, r0, lr, lsr #32
    21f8:	e00a9c01 	and	r9, sl, r1, lsl #24
    21fc:	01000009 	tsteq	r0, r9
    2200:	12bc065a 	adcsne	r0, ip, #94371840	; 0x5a00000
    2204:	002e2000 	eoreq	r2, lr, r0
    2208:	9c010000 	stcls	0, cr0, [r1], {-0}
    220c:	0009f80a 	andeq	pc, r9, sl, lsl #16
    2210:	06530100 	ldrbeq	r0, [r3], -r0, lsl #2
    2214:	2000128e 	andcs	r1, r0, lr, lsl #5
    2218:	0000002e 	andeq	r0, r0, lr, lsr #32
    221c:	5e0a9c01 	cdppl	12, 0, cr9, cr10, cr1, {0}
    2220:	01000009 	tsteq	r0, r9
    2224:	1260064c 	rsbne	r0, r0, #76, 12	; 0x4c00000
    2228:	002e2000 	eoreq	r2, lr, r0
    222c:	9c010000 	stcls	0, cr0, [r1], {-0}
    2230:	0009d00b 	andeq	sp, r9, fp
    2234:	0f430100 	svceq	0x00430100
    2238:	00000025 	andeq	r0, r0, r5, lsr #32
    223c:	20001224 	andcs	r1, r0, r4, lsr #4
    2240:	0000003c 	andeq	r0, r0, ip, lsr r0
    2244:	01499c01 	cmpeq	r9, r1, lsl #24
    2248:	f0090000 			; <UNDEFINED> instruction: 0xf0090000
    224c:	01000009 	tsteq	r0, r9
    2250:	00650a47 	rsbeq	r0, r5, r7, asr #20
    2254:	91020000 	mrsls	r0, (UNDEF: 2)
    2258:	830b006f 	movwhi	r0, #45167	; 0xb06f
    225c:	01000009 	tsteq	r0, r9
    2260:	00250f3a 	eoreq	r0, r5, sl, lsr pc
    2264:	11e80000 	mvnne	r0, r0
    2268:	003c2000 	eorseq	r2, ip, r0
    226c:	9c010000 	stcls	0, cr0, [r1], {-0}
    2270:	00000173 	andeq	r0, r0, r3, ror r1
    2274:	000a4509 	andeq	r4, sl, r9, lsl #10
    2278:	0a3e0100 	beq	f82680 <startup-0x1f07d980>
    227c:	00000065 	andeq	r0, r0, r5, rrx
    2280:	006f9102 	rsbeq	r9, pc, r2, lsl #2
    2284:	0009ba0b 	andeq	fp, r9, fp, lsl #20
    2288:	0f310100 	svceq	0x00310100
    228c:	00000025 	andeq	r0, r0, r5, lsr #32
    2290:	200011b4 			; <UNDEFINED> instruction: 0x200011b4
    2294:	00000034 	andeq	r0, r0, r4, lsr r0
    2298:	019d9c01 	orrseq	r9, sp, r1, lsl #24
    229c:	ab090000 	blge	2422a4 <startup-0x1fdbdd5c>
    22a0:	01000009 	tsteq	r0, r9
    22a4:	00650a35 	rsbeq	r0, r5, r5, lsr sl
    22a8:	91020000 	mrsls	r0, (UNDEF: 2)
    22ac:	6c030077 	stcvs	0, cr0, [r3], {119}	; 0x77
    22b0:	01000009 	tsteq	r0, r9
    22b4:	1184062a 	orrne	r0, r4, sl, lsr #12
    22b8:	00302000 	eorseq	r2, r0, r0
    22bc:	9c010000 	stcls	0, cr0, [r1], {-0}
    22c0:	000001c3 	andeq	r0, r0, r3, asr #3
    22c4:	00021a04 	andeq	r1, r2, r4, lsl #20
    22c8:	2b2a0100 	blcs	a826d0 <startup-0x1f57d930>
    22cc:	00000025 	andeq	r0, r0, r5, lsr #32
    22d0:	00779102 	rsbseq	r9, r7, r2, lsl #2
    22d4:	00099a03 	andeq	r9, r9, r3, lsl #20
    22d8:	06240100 	strteq	r0, [r4], -r0, lsl #2
    22dc:	2000115a 	andcs	r1, r0, sl, asr r1
    22e0:	0000002a 	andeq	r0, r0, sl, lsr #32
    22e4:	01e99c01 	mvneq	r9, r1, lsl #24
    22e8:	8c040000 	stchi	0, cr0, [r4], {-0}
    22ec:	01000007 	tsteq	r0, r7
    22f0:	00252524 	eoreq	r2, r5, r4, lsr #10
    22f4:	91020000 	mrsls	r0, (UNDEF: 2)
    22f8:	35030077 	strcc	r0, [r3, #-119]	; 0xffffff89
    22fc:	0100000a 	tsteq	r0, sl
    2300:	1130061e 	teqne	r0, lr, lsl r6
    2304:	002a2000 	eoreq	r2, sl, r0
    2308:	9c010000 	stcls	0, cr0, [r1], {-0}
    230c:	0000020f 	andeq	r0, r0, pc, lsl #4
    2310:	00089904 	andeq	r9, r8, r4, lsl #18
    2314:	241e0100 	ldrcs	r0, [lr], #-256	; 0xffffff00
    2318:	00000025 	andeq	r0, r0, r5, lsr #32
    231c:	00779102 	rsbseq	r9, r7, r2, lsl #2
    2320:	0009490c 	andeq	r4, r9, ip, lsl #18
    2324:	06190100 	ldreq	r0, [r9], -r0, lsl #2
    2328:	200010f4 	strdcs	r1, [r0], -r4
    232c:	0000003c 	andeq	r0, r0, ip, lsr r0
    2330:	02339c01 	eorseq	r9, r3, #256	; 0x100
    2334:	78080000 	stmdavc	r8, {}	; <UNPREDICTABLE>
    2338:	29190100 	ldmdbcs	r9, {r8}
    233c:	00000025 	andeq	r0, r0, r5, lsr #32
    2340:	00779102 	rsbseq	r9, r7, r2, lsl #2
    2344:	000a6d0c 	andeq	r6, sl, ip, lsl #26
    2348:	06140100 	ldreq	r0, [r4], -r0, lsl #2
    234c:	200010c2 	andcs	r1, r0, r2, asr #1
    2350:	00000032 	andeq	r0, r0, r2, lsr r0
    2354:	02579c01 	subseq	r9, r7, #256	; 0x100
    2358:	78080000 	stmdavc	r8, {}	; <UNPREDICTABLE>
    235c:	27140100 	ldrcs	r0, [r4, -r0, lsl #2]
    2360:	00000025 	andeq	r0, r0, r5, lsr #32
    2364:	00779102 	rsbseq	r9, r7, r2, lsl #2
    2368:	000a800d 	andeq	r8, sl, sp
    236c:	06050100 	streq	r0, [r5], -r0, lsl #2
    2370:	200010a8 	andcs	r1, r0, r8, lsr #1
    2374:	0000001a 	andeq	r0, r0, sl, lsl r0
    2378:	9e009c01 	cdpls	12, 0, cr9, cr0, cr1, {0}
    237c:	04000000 	streq	r0, [r0], #-0
    2380:	00089500 	andeq	r9, r8, r0, lsl #10
    2384:	4d010400 	cfstrsmi	mvf0, [r1, #-0]
    2388:	0c000006 	stceq	0, cr0, [r0], {6}
    238c:	00000a8b 	andeq	r0, r0, fp, lsl #21
    2390:	0000040d 	andeq	r0, r0, sp, lsl #8
    2394:	200013c8 	andcs	r1, r0, r8, asr #7
    2398:	000000ac 	andeq	r0, r0, ip, lsr #1
    239c:	00000dc2 	andeq	r0, r0, r2, asr #27
    23a0:	2f080102 	svccs	0x00080102
    23a4:	03000004 	movweq	r0, #4
    23a8:	000008a1 	andeq	r0, r0, r1, lsr #17
    23ac:	4c062601 	stcmi	6, cr2, [r6], {1}
    23b0:	28200014 	stmdacs	r0!, {r2, r4}
    23b4:	01000000 	mrseq	r0, (UNDEF: 0)
    23b8:	0000519c 	muleq	r0, ip, r1
    23bc:	736d0400 	cmnvc	sp, #0, 8
    23c0:	1f260100 	svcne	0x00260100
    23c4:	00000051 	andeq	r0, r0, r1, asr r0
    23c8:	00749102 	rsbseq	r9, r4, r2, lsl #2
    23cc:	7f070402 	svcvc	0x00070402
    23d0:	03000000 	movweq	r0, #0
    23d4:	0000075f 	andeq	r0, r0, pc, asr r7
    23d8:	1e061a01 	vmlane.f32	s2, s12, s2
    23dc:	2e200014 	miacs	acc0, r4, r0
    23e0:	01000000 	mrseq	r0, (UNDEF: 0)
    23e4:	00007d9c 	muleq	r0, ip, sp
    23e8:	73750400 	cmnvc	r5, #0, 8
    23ec:	1f1a0100 	svcne	0x001a0100
    23f0:	00000051 	andeq	r0, r0, r1, asr r0
    23f4:	00749102 	rsbseq	r9, r4, r2, lsl #2
    23f8:	0007ca05 	andeq	ip, r7, r5, lsl #20
    23fc:	06120100 	ldreq	r0, [r2], -r0, lsl #2
    2400:	2000140c 	andcs	r1, r0, ip, lsl #8
    2404:	00000012 	andeq	r0, r0, r2, lsl r0
    2408:	b5069c01 	strlt	r9, [r6, #-3073]	; 0xfffff3ff
    240c:	0100000a 	tsteq	r0, sl
    2410:	13c80605 	bicne	r0, r8, #5242880	; 0x500000
    2414:	00442000 	subeq	r2, r4, r0
    2418:	9c010000 	stcls	0, cr0, [r1], {-0}
    241c:	00012000 	andeq	r2, r1, r0
    2420:	15000400 	strne	r0, [r0, #-1024]	; 0xfffffc00
    2424:	04000009 	streq	r0, [r0], #-9
    2428:	00064d01 	andeq	r4, r6, r1, lsl #26
    242c:	0ac10c00 	beq	ff045434 <rear+0xdf041a18>
    2430:	040d0000 	streq	r0, [sp], #-0
    2434:	14740000 	ldrbtne	r0, [r4], #-0
    2438:	00f02000 	rscseq	r2, r0, r0
    243c:	0e850000 	cdpeq	0, 8, cr0, cr5, cr0, {0}
    2440:	01020000 	mrseq	r0, (UNDEF: 2)
    2444:	00042f08 	andeq	r2, r4, r8, lsl #30
    2448:	0afc0300 	beq	fff03050 <rear+0xdfeff634>
    244c:	24010000 	strcs	r0, [r1], #-0
    2450:	00154406 	andseq	r4, r5, r6, lsl #8
    2454:	00002020 	andeq	r2, r0, r0, lsr #32
    2458:	509c0100 	addspl	r0, ip, r0, lsl #2
    245c:	04000000 	streq	r0, [r0], #-0
    2460:	24010063 	strcs	r0, [r1], #-99	; 0xffffff9d
    2464:	0000251c 	andeq	r2, r0, ip, lsl r5
    2468:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    246c:	0aea0500 	beq	ffa83874 <rear+0xdfa7fe58>
    2470:	14010000 	strne	r0, [r1], #-0
    2474:	0000250f 	andeq	r2, r0, pc, lsl #10
    2478:	0014dc00 	andseq	sp, r4, r0, lsl #24
    247c:	00006820 	andeq	r6, r0, r0, lsr #16
    2480:	a79c0100 	ldrge	r0, [ip, r0, lsl #2]
    2484:	06000000 	streq	r0, [r0], -r0
    2488:	00000b1e 	andeq	r0, r0, lr, lsl fp
    248c:	a7131501 	ldrge	r1, [r3, -r1, lsl #10]
    2490:	02000000 	andeq	r0, r0, #0
    2494:	f5065891 			; <UNDEFINED> instruction: 0xf5065891
    2498:	0100000a 	tsteq	r0, sl
    249c:	00a71316 	adceq	r1, r7, r6, lsl r3
    24a0:	91020000 	mrsls	r0, (UNDEF: 2)
    24a4:	6f720748 	svcvs	0x00720748
    24a8:	19010077 	stmdbne	r1, {r0, r1, r2, r4, r5, r6}
    24ac:	0000be09 	andeq	fp, r0, r9, lsl #28
    24b0:	6c910200 	lfmvs	f0, 4, [r1], {0}
    24b4:	000b0906 	andeq	r0, fp, r6, lsl #18
    24b8:	0e190100 	mufeqe	f0, f1, f0
    24bc:	000000be 	strheq	r0, [r0], -lr
    24c0:	00689102 	rsbeq	r9, r8, r2, lsl #2
    24c4:	00002508 	andeq	r2, r0, r8, lsl #10
    24c8:	0000b700 	andeq	fp, r0, r0, lsl #14
    24cc:	00b70900 	adcseq	r0, r7, r0, lsl #18
    24d0:	000f0000 	andeq	r0, pc, r0
    24d4:	7f070402 	svcvc	0x00070402
    24d8:	0a000000 	beq	24e0 <startup-0x1fffdb20>
    24dc:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    24e0:	040b0074 	streq	r0, [fp], #-116	; 0xffffff8c
    24e4:	0100000b 	tsteq	r0, fp
    24e8:	00be0508 	adcseq	r0, lr, r8, lsl #10
    24ec:	14980000 	ldrne	r0, [r8], #0
    24f0:	00442000 	subeq	r2, r4, r0
    24f4:	9c010000 	stcls	0, cr0, [r1], {-0}
    24f8:	000000fc 	strdeq	r0, [r0], -ip
    24fc:	01006a07 	tsteq	r0, r7, lsl #20
    2500:	00be0909 	adcseq	r0, lr, r9, lsl #18
    2504:	91020000 	mrsls	r0, (UNDEF: 2)
    2508:	0aef0674 	beq	ffbc3ee0 <rear+0xdfbc04c4>
    250c:	0a010000 	beq	42514 <startup-0x1ffbdaec>
    2510:	0000fc0a 	andeq	pc, r0, sl, lsl #24
    2514:	73910200 	orrsvc	r0, r1, #0, 4
    2518:	08010200 	stmdaeq	r1, {r9}
    251c:	00000438 	andeq	r0, r0, r8, lsr r4
    2520:	000b110c 	andeq	r1, fp, ip, lsl #2
    2524:	06040100 	streq	r0, [r4], -r0, lsl #2
    2528:	20001474 	andcs	r1, r0, r4, ror r4
    252c:	00000024 	andeq	r0, r0, r4, lsr #32
    2530:	69049c01 	stmdbvs	r4, {r0, sl, fp, ip, pc}
    2534:	17040100 	strne	r0, [r4, -r0, lsl #2]
    2538:	000000be 	strheq	r0, [r0], -lr
    253c:	00749102 	rsbseq	r9, r4, r2, lsl #2
	...

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
   c:	10011117 	andne	r1, r1, r7, lsl r1
  10:	02000017 	andeq	r0, r0, #23
  14:	0b0b0024 	bleq	2c00ac <startup-0x1fd3ff54>
  18:	0e030b3e 	vmoveq.16	d3[0], r0
  1c:	35030000 	strcc	r0, [r3, #-0]
  20:	00134900 	andseq	r4, r3, r0, lsl #18
  24:	00240400 	eoreq	r0, r4, r0, lsl #8
  28:	0b3e0b0b 	bleq	f82c5c <startup-0x1f07d3a4>
  2c:	00000803 	andeq	r0, r0, r3, lsl #16
  30:	03001605 	movweq	r1, #1541	; 0x605
  34:	3b0b3a0e 	blcc	2ce874 <startup-0x1fd3178c>
  38:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
  3c:	06000013 			; <UNDEFINED> instruction: 0x06000013
  40:	0b0b000f 	bleq	2c0084 <startup-0x1fd3ff7c>
  44:	00001349 	andeq	r1, r0, r9, asr #6
  48:	03001307 	movweq	r1, #775	; 0x307
  4c:	00193c0e 	andseq	r3, r9, lr, lsl #24
  50:	00160800 	andseq	r0, r6, r0, lsl #16
  54:	0b3a0e03 	bleq	e83868 <startup-0x1f17c798>
  58:	0b39053b 	bleq	e4154c <startup-0x1f1beab4>
  5c:	00001349 	andeq	r1, r0, r9, asr #6
  60:	0b011709 	bleq	45c8c <startup-0x1ffba374>
  64:	3b0b3a0b 	blcc	2ce898 <startup-0x1fd31768>
  68:	010b390b 	tsteq	fp, fp, lsl #18
  6c:	0a000013 	beq	c0 <startup-0x1fffff40>
  70:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
  74:	0b3b0b3a 	bleq	ec2d64 <startup-0x1f13d29c>
  78:	13490b39 	movtne	r0, #39737	; 0x9b39
  7c:	010b0000 	mrseq	r0, (UNDEF: 11)
  80:	01134901 	tsteq	r3, r1, lsl #18
  84:	0c000013 	stceq	0, cr0, [r0], {19}
  88:	13490021 	movtne	r0, #36897	; 0x9021
  8c:	00000b2f 	andeq	r0, r0, pc, lsr #22
  90:	0b01130d 	bleq	44ccc <startup-0x1ffbb334>
  94:	3b0b3a0b 	blcc	2ce8c8 <startup-0x1fd31738>
  98:	010b390b 	tsteq	fp, fp, lsl #18
  9c:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
  a0:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
  a4:	0b3b0b3a 	bleq	ec2d94 <startup-0x1f13d26c>
  a8:	13490b39 	movtne	r0, #39737	; 0x9b39
  ac:	00000b38 	andeq	r0, r0, r8, lsr fp
  b0:	0b000f0f 	bleq	3cf4 <startup-0x1fffc30c>
  b4:	1000000b 	andne	r0, r0, fp
  b8:	13490026 	movtne	r0, #36902	; 0x9026
  bc:	13110000 	tstne	r1, #0
  c0:	0b0e0301 	bleq	380ccc <startup-0x1fc7f334>
  c4:	3b0b3a0b 	blcc	2ce8f8 <startup-0x1fd31708>
  c8:	010b390b 	tsteq	fp, fp, lsl #18
  cc:	12000013 	andne	r0, r0, #19
  d0:	0803000d 	stmdaeq	r3, {r0, r2, r3}
  d4:	0b3b0b3a 	bleq	ec2dc4 <startup-0x1f13d23c>
  d8:	13490b39 	movtne	r0, #39737	; 0x9b39
  dc:	00000b38 	andeq	r0, r0, r8, lsr fp
  e0:	03011313 	movweq	r1, #4883	; 0x1313
  e4:	3a050b0e 	bcc	142d24 <startup-0x1febd2dc>
  e8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  ec:	0013010b 	andseq	r0, r3, fp, lsl #2
  f0:	000d1400 	andeq	r1, sp, r0, lsl #8
  f4:	0b3a0e03 	bleq	e83908 <startup-0x1f17c6f8>
  f8:	0b390b3b 	bleq	e42dec <startup-0x1f1bd214>
  fc:	05381349 	ldreq	r1, [r8, #-841]!	; 0xfffffcb7
 100:	15150000 	ldrne	r0, [r5, #-0]
 104:	00192700 	andseq	r2, r9, r0, lsl #14
 108:	01151600 	tsteq	r5, r0, lsl #12
 10c:	13491927 	movtne	r1, #39207	; 0x9927
 110:	00001301 	andeq	r1, r0, r1, lsl #6
 114:	49000517 	stmdbmi	r0, {r0, r1, r2, r4, r8, sl}
 118:	18000013 	stmdane	r0, {r0, r1, r4}
 11c:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
 120:	0b3a050b 	bleq	e81554 <startup-0x1f17eaac>
 124:	0b39053b 	bleq	e41618 <startup-0x1f1be9e8>
 128:	00001301 	andeq	r1, r0, r1, lsl #6
 12c:	03000d19 	movweq	r0, #3353	; 0xd19
 130:	3b0b3a0e 	blcc	2ce970 <startup-0x1fd31690>
 134:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
 138:	000b3813 	andeq	r3, fp, r3, lsl r8
 13c:	000d1a00 	andeq	r1, sp, r0, lsl #20
 140:	0b3a0e03 	bleq	e83954 <startup-0x1f17c6ac>
 144:	0b39053b 	bleq	e41638 <startup-0x1f1be9c8>
 148:	05381349 	ldreq	r1, [r8, #-841]!	; 0xfffffcb7
 14c:	131b0000 	tstne	fp, #0
 150:	0b0e0301 	bleq	380d5c <startup-0x1fc7f2a4>
 154:	3b0b3a0b 	blcc	2ce988 <startup-0x1fd31678>
 158:	010b3905 	tsteq	fp, r5, lsl #18
 15c:	1c000013 	stcne	0, cr0, [r0], {19}
 160:	0b0b0113 	bleq	2c05b4 <startup-0x1fd3fa4c>
 164:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 168:	13010b39 	movwne	r0, #6969	; 0x1b39
 16c:	171d0000 	ldrne	r0, [sp, -r0]
 170:	3a0b0b01 	bcc	2c2d7c <startup-0x1fd3d284>
 174:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 178:	0013010b 	andseq	r0, r3, fp, lsl #2
 17c:	000d1e00 	andeq	r1, sp, r0, lsl #28
 180:	0b3a0e03 	bleq	e83994 <startup-0x1f17c66c>
 184:	0b39053b 	bleq	e41678 <startup-0x1f1be988>
 188:	00001349 	andeq	r1, r0, r9, asr #6
 18c:	2701151f 	smladcs	r1, pc, r5, r1	; <UNPREDICTABLE>
 190:	00130119 	andseq	r0, r3, r9, lsl r1
 194:	00342000 	eorseq	r2, r4, r0
 198:	0b3a0e03 	bleq	e839ac <startup-0x1f17c654>
 19c:	0b39053b 	bleq	e41690 <startup-0x1f1be970>
 1a0:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 1a4:	0000193c 	andeq	r1, r0, ip, lsr r9
 1a8:	49002121 	stmdbmi	r0, {r0, r5, r8, sp}
 1ac:	00052f13 	andeq	r2, r5, r3, lsl pc
 1b0:	00342200 	eorseq	r2, r4, r0, lsl #4
 1b4:	0b3a0e03 	bleq	e839c8 <startup-0x1f17c638>
 1b8:	0b390b3b 	bleq	e42eac <startup-0x1f1bd154>
 1bc:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 1c0:	34230000 	strtcc	r0, [r3], #-0
 1c4:	3a0e0300 	bcc	380dcc <startup-0x1fc7f234>
 1c8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 1cc:	3f13490b 	svccc	0x0013490b
 1d0:	00180219 	andseq	r0, r8, r9, lsl r2
 1d4:	012e2400 			; <UNDEFINED> instruction: 0x012e2400
 1d8:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 1dc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 1e0:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 1e4:	06120111 			; <UNDEFINED> instruction: 0x06120111
 1e8:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 1ec:	00130119 	andseq	r0, r3, r9, lsl r1
 1f0:	00052500 	andeq	r2, r5, r0, lsl #10
 1f4:	0b3a0e03 	bleq	e83a08 <startup-0x1f17c5f8>
 1f8:	0b39053b 	bleq	e416ec <startup-0x1f1be914>
 1fc:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 200:	34260000 	strtcc	r0, [r6], #-0
 204:	3a0e0300 	bcc	380e0c <startup-0x1fc7f1f4>
 208:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 20c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 210:	27000018 	smladcs	r0, r8, r0, r0
 214:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 218:	0b3a0e03 	bleq	e83a2c <startup-0x1f17c5d4>
 21c:	0b39053b 	bleq	e41710 <startup-0x1f1be8f0>
 220:	06120111 			; <UNDEFINED> instruction: 0x06120111
 224:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 228:	00130119 	andseq	r0, r3, r9, lsl r1
 22c:	00342800 	eorseq	r2, r4, r0, lsl #16
 230:	0b3a0803 	bleq	e82244 <startup-0x1f17ddbc>
 234:	0b39053b 	bleq	e41728 <startup-0x1f1be8d8>
 238:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 23c:	2e290000 	cdpcs	0, 2, cr0, cr9, cr0, {0}
 240:	03193f00 	tsteq	r9, #0, 30
 244:	3b0b3a0e 	blcc	2cea84 <startup-0x1fd3157c>
 248:	110b3905 	tstne	fp, r5, lsl #18
 24c:	40061201 	andmi	r1, r6, r1, lsl #4
 250:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 254:	2e2a0000 	cdpcs	0, 2, cr0, cr10, cr0, {0}
 258:	03193f01 	tsteq	r9, #1, 30
 25c:	3b0b3a0e 	blcc	2cea9c <startup-0x1fd31564>
 260:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
 264:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 268:	97184006 	ldrls	r4, [r8, -r6]
 26c:	13011942 	movwne	r1, #6466	; 0x1942
 270:	052b0000 	streq	r0, [fp, #-0]!
 274:	3a080300 	bcc	200e7c <startup-0x1fdff184>
 278:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 27c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 280:	2c000018 	stccs	0, cr0, [r0], {24}
 284:	0111010b 	tsteq	r1, fp, lsl #2
 288:	00000612 	andeq	r0, r0, r2, lsl r6
 28c:	3f002e2d 	svccc	0x00002e2d
 290:	3a0e0319 	bcc	380efc <startup-0x1fc7f104>
 294:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 298:	1119270b 	tstne	r9, fp, lsl #14
 29c:	40061201 	andmi	r1, r6, r1, lsl #4
 2a0:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 2a4:	2e2e0000 	cdpcs	0, 2, cr0, cr14, cr0, {0}
 2a8:	3a0e0301 	bcc	380eb4 <startup-0x1fc7f14c>
 2ac:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 2b0:	1119270b 	tstne	r9, fp, lsl #14
 2b4:	40061201 	andmi	r1, r6, r1, lsl #4
 2b8:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 2bc:	00001301 	andeq	r1, r0, r1, lsl #6
 2c0:	3f012e2f 	svccc	0x00012e2f
 2c4:	3a0e0319 	bcc	380f30 <startup-0x1fc7f0d0>
 2c8:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 2cc:	3c13490b 			; <UNDEFINED> instruction: 0x3c13490b
 2d0:	30000019 	andcc	r0, r0, r9, lsl r0
 2d4:	00000018 	andeq	r0, r0, r8, lsl r0
 2d8:	03012e31 	movweq	r2, #7729	; 0x1e31
 2dc:	3b0b3a0e 	blcc	2ceb1c <startup-0x1fd314e4>
 2e0:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
 2e4:	11134919 	tstne	r3, r9, lsl r9
 2e8:	40061201 	andmi	r1, r6, r1, lsl #4
 2ec:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 2f0:	00001301 	andeq	r1, r0, r1, lsl #6
 2f4:	3f012e32 	svccc	0x00012e32
 2f8:	3a0e0319 	bcc	380f64 <startup-0x1fc7f09c>
 2fc:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 300:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 304:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 308:	96184006 	ldrls	r4, [r8], -r6
 30c:	13011942 	movwne	r1, #6466	; 0x1942
 310:	2e330000 	cdpcs	0, 3, cr0, cr3, cr0, {0}
 314:	03193f01 	tsteq	r9, #1, 30
 318:	3b0b3a0e 	blcc	2ceb58 <startup-0x1fd314a8>
 31c:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
 320:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 324:	96184006 	ldrls	r4, [r8], -r6
 328:	13011942 	movwne	r1, #6466	; 0x1942
 32c:	05340000 	ldreq	r0, [r4, #-0]!
 330:	3a080300 	bcc	200f38 <startup-0x1fdff0c8>
 334:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 338:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 33c:	35000018 	strcc	r0, [r0, #-24]	; 0xffffffe8
 340:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 344:	0b3a0e03 	bleq	e83b58 <startup-0x1f17c4a8>
 348:	0b390b3b 	bleq	e4303c <startup-0x1f1bcfc4>
 34c:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
 350:	00001301 	andeq	r1, r0, r1, lsl #6
 354:	03003436 	movweq	r3, #1078	; 0x436
 358:	3b0b3a08 	blcc	2ceb80 <startup-0x1fd31480>
 35c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 360:	00180213 	andseq	r0, r8, r3, lsl r2
 364:	00053700 	andeq	r3, r5, r0, lsl #14
 368:	0b3a0e03 	bleq	e83b7c <startup-0x1f17c484>
 36c:	0b390b3b 	bleq	e43060 <startup-0x1f1bcfa0>
 370:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 374:	2e380000 	cdpcs	0, 3, cr0, cr8, cr0, {0}
 378:	03193f01 	tsteq	r9, #1, 30
 37c:	3b0b3a0e 	blcc	2cebbc <startup-0x1fd31444>
 380:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 384:	00193c13 	andseq	r3, r9, r3, lsl ip
 388:	012e3900 			; <UNDEFINED> instruction: 0x012e3900
 38c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 390:	0b3b0b3a 	bleq	ec3080 <startup-0x1f13cf80>
 394:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 398:	06120111 			; <UNDEFINED> instruction: 0x06120111
 39c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 3a0:	00130119 	andseq	r0, r3, r9, lsl r1
 3a4:	010b3a00 	tsteq	fp, r0, lsl #20
 3a8:	06120111 			; <UNDEFINED> instruction: 0x06120111
 3ac:	00001301 	andeq	r1, r0, r1, lsl #6
 3b0:	03012e3b 	movweq	r2, #7739	; 0x1e3b
 3b4:	3b0b3a0e 	blcc	2cebf4 <startup-0x1fd3140c>
 3b8:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
 3bc:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 3c0:	97184006 	ldrls	r4, [r8, -r6]
 3c4:	13011942 	movwne	r1, #6466	; 0x1942
 3c8:	2e3c0000 	cdpcs	0, 3, cr0, cr12, cr0, {0}
 3cc:	03193f00 	tsteq	r9, #0, 30
 3d0:	3b0b3a0e 	blcc	2cec10 <startup-0x1fd313f0>
 3d4:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
 3d8:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 3dc:	97184006 	ldrls	r4, [r8, -r6]
 3e0:	00001942 	andeq	r1, r0, r2, asr #18
 3e4:	01110100 	tsteq	r1, r0, lsl #2
 3e8:	0b130e25 	bleq	4c3c84 <startup-0x1fb3c37c>
 3ec:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
 3f0:	06120111 			; <UNDEFINED> instruction: 0x06120111
 3f4:	00001710 	andeq	r1, r0, r0, lsl r7
 3f8:	03001602 	movweq	r1, #1538	; 0x602
 3fc:	3b0b3a0e 	blcc	2cec3c <startup-0x1fd313c4>
 400:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 404:	03000013 	movweq	r0, #19
 408:	0b0b0024 	bleq	2c04a0 <startup-0x1fd3fb60>
 40c:	0e030b3e 	vmoveq.16	d3[0], r0
 410:	01040000 	mrseq	r0, (UNDEF: 4)
 414:	01134901 	tsteq	r3, r1, lsl #18
 418:	05000013 	streq	r0, [r0, #-19]	; 0xffffffed
 41c:	13490021 	movtne	r0, #36897	; 0x9021
 420:	0000052f 	andeq	r0, r0, pc, lsr #10
 424:	49003506 	stmdbmi	r0, {r1, r2, r8, sl, ip, sp}
 428:	07000013 	smladeq	r0, r3, r0, r0
 42c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 430:	0b3b0b3a 	bleq	ec3120 <startup-0x1f13cee0>
 434:	13490b39 	movtne	r0, #39737	; 0x9b39
 438:	00001802 	andeq	r1, r0, r2, lsl #16
 43c:	3f012e08 	svccc	0x00012e08
 440:	3a0e0319 	bcc	3810ac <startup-0x1fc7ef54>
 444:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 448:	1119270b 	tstne	r9, fp, lsl #14
 44c:	40061201 	andmi	r1, r6, r1, lsl #4
 450:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 454:	00001301 	andeq	r1, r0, r1, lsl #6
 458:	03003409 	movweq	r3, #1033	; 0x409
 45c:	3b0b3a08 	blcc	2cec84 <startup-0x1fd3137c>
 460:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 464:	00180213 	andseq	r0, r8, r3, lsl r2
 468:	012e0a00 			; <UNDEFINED> instruction: 0x012e0a00
 46c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 470:	0b3b0b3a 	bleq	ec3160 <startup-0x1f13cea0>
 474:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 478:	06120111 			; <UNDEFINED> instruction: 0x06120111
 47c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 480:	00130119 	andseq	r0, r3, r9, lsl r1
 484:	00050b00 	andeq	r0, r5, r0, lsl #22
 488:	0b3a0803 	bleq	e8249c <startup-0x1f17db64>
 48c:	0b390b3b 	bleq	e43180 <startup-0x1f1bce80>
 490:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 494:	240c0000 	strcs	r0, [ip], #-0
 498:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 49c:	0008030b 	andeq	r0, r8, fp, lsl #6
 4a0:	012e0d00 			; <UNDEFINED> instruction: 0x012e0d00
 4a4:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 4a8:	0b3b0b3a 	bleq	ec3198 <startup-0x1f13ce68>
 4ac:	01110b39 	tsteq	r1, r9, lsr fp
 4b0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 4b4:	01194297 			; <UNDEFINED> instruction: 0x01194297
 4b8:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
 4bc:	0111010b 	tsteq	r1, fp, lsl #2
 4c0:	00000612 	andeq	r0, r0, r2, lsl r6
 4c4:	0300050f 	movweq	r0, #1295	; 0x50f
 4c8:	3b0b3a0e 	blcc	2ced08 <startup-0x1fd312f8>
 4cc:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 4d0:	00180213 	andseq	r0, r8, r3, lsl r2
 4d4:	012e1000 			; <UNDEFINED> instruction: 0x012e1000
 4d8:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 4dc:	0b3b0b3a 	bleq	ec31cc <startup-0x1f13ce34>
 4e0:	13490b39 	movtne	r0, #39737	; 0x9b39
 4e4:	0000193c 	andeq	r1, r0, ip, lsr r9
 4e8:	00001811 	andeq	r1, r0, r1, lsl r8
 4ec:	012e1200 			; <UNDEFINED> instruction: 0x012e1200
 4f0:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 4f4:	0b3b0b3a 	bleq	ec31e4 <startup-0x1f13ce1c>
 4f8:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 4fc:	01111349 	tsteq	r1, r9, asr #6
 500:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 504:	01194296 			; <UNDEFINED> instruction: 0x01194296
 508:	13000013 	movwne	r0, #19
 50c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 510:	0b3a0e03 	bleq	e83d24 <startup-0x1f17c2dc>
 514:	0b390b3b 	bleq	e43208 <startup-0x1f1bcdf8>
 518:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
 51c:	00001301 	andeq	r1, r0, r1, lsl #6
 520:	3f012e14 	svccc	0x00012e14
 524:	3a0e0319 	bcc	381190 <startup-0x1fc7ee70>
 528:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 52c:	1119270b 	tstne	r9, fp, lsl #14
 530:	40061201 	andmi	r1, r6, r1, lsl #4
 534:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 538:	01000000 	mrseq	r0, (UNDEF: 0)
 53c:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 540:	0e030b13 	vmoveq.32	d3[0], r0
 544:	01110e1b 	tsteq	r1, fp, lsl lr
 548:	17100612 			; <UNDEFINED> instruction: 0x17100612
 54c:	24020000 	strcs	r0, [r2], #-0
 550:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 554:	000e030b 	andeq	r0, lr, fp, lsl #6
 558:	00240300 	eoreq	r0, r4, r0, lsl #6
 55c:	0b3e0b0b 	bleq	f83190 <startup-0x1f07ce70>
 560:	00000803 	andeq	r0, r0, r3, lsl #16
 564:	03001604 	movweq	r1, #1540	; 0x604
 568:	3b0b3a0e 	blcc	2ceda8 <startup-0x1fd31258>
 56c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 570:	05000013 	streq	r0, [r0, #-19]	; 0xffffffed
 574:	0b0b000f 	bleq	2c05b8 <startup-0x1fd3fa48>
 578:	00001349 	andeq	r1, r0, r9, asr #6
 57c:	03001306 	movweq	r1, #774	; 0x306
 580:	00193c0e 	andseq	r3, r9, lr, lsl #24
 584:	00160700 	andseq	r0, r6, r0, lsl #14
 588:	0b3a0e03 	bleq	e83d9c <startup-0x1f17c264>
 58c:	0b39053b 	bleq	e41a80 <startup-0x1f1be580>
 590:	00001349 	andeq	r1, r0, r9, asr #6
 594:	0b011708 	bleq	461bc <startup-0x1ffb9e44>
 598:	3b0b3a0b 	blcc	2cedcc <startup-0x1fd31234>
 59c:	010b390b 	tsteq	fp, fp, lsl #18
 5a0:	09000013 	stmdbeq	r0, {r0, r1, r4}
 5a4:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 5a8:	0b3b0b3a 	bleq	ec3298 <startup-0x1f13cd68>
 5ac:	13490b39 	movtne	r0, #39737	; 0x9b39
 5b0:	010a0000 	mrseq	r0, (UNDEF: 10)
 5b4:	01134901 	tsteq	r3, r1, lsl #18
 5b8:	0b000013 	bleq	60c <startup-0x1ffff9f4>
 5bc:	13490021 	movtne	r0, #36897	; 0x9021
 5c0:	00000b2f 	andeq	r0, r0, pc, lsr #22
 5c4:	0b01130c 	bleq	451fc <startup-0x1ffbae04>
 5c8:	3b0b3a0b 	blcc	2cedfc <startup-0x1fd31204>
 5cc:	010b390b 	tsteq	fp, fp, lsl #18
 5d0:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
 5d4:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 5d8:	0b3b0b3a 	bleq	ec32c8 <startup-0x1f13cd38>
 5dc:	13490b39 	movtne	r0, #39737	; 0x9b39
 5e0:	00000b38 	andeq	r0, r0, r8, lsr fp
 5e4:	0b000f0e 	bleq	4224 <startup-0x1fffbddc>
 5e8:	0f00000b 	svceq	0x0000000b
 5ec:	13490026 	movtne	r0, #36902	; 0x9026
 5f0:	13100000 	tstne	r0, #0
 5f4:	0b0e0301 	bleq	381200 <startup-0x1fc7ee00>
 5f8:	3b0b3a0b 	blcc	2cee2c <startup-0x1fd311d4>
 5fc:	010b390b 	tsteq	fp, fp, lsl #18
 600:	11000013 	tstne	r0, r3, lsl r0
 604:	0803000d 	stmdaeq	r3, {r0, r2, r3}
 608:	0b3b0b3a 	bleq	ec32f8 <startup-0x1f13cd08>
 60c:	13490b39 	movtne	r0, #39737	; 0x9b39
 610:	00000b38 	andeq	r0, r0, r8, lsr fp
 614:	03011312 	movweq	r1, #4882	; 0x1312
 618:	3a050b0e 	bcc	143258 <startup-0x1febcda8>
 61c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 620:	0013010b 	andseq	r0, r3, fp, lsl #2
 624:	000d1300 	andeq	r1, sp, r0, lsl #6
 628:	0b3a0e03 	bleq	e83e3c <startup-0x1f17c1c4>
 62c:	0b390b3b 	bleq	e43320 <startup-0x1f1bcce0>
 630:	05381349 	ldreq	r1, [r8, #-841]!	; 0xfffffcb7
 634:	15140000 	ldrne	r0, [r4, #-0]
 638:	00192700 	andseq	r2, r9, r0, lsl #14
 63c:	01151500 	tsteq	r5, r0, lsl #10
 640:	13491927 	movtne	r1, #39207	; 0x9927
 644:	00001301 	andeq	r1, r0, r1, lsl #6
 648:	49000516 	stmdbmi	r0, {r1, r2, r4, r8, sl}
 64c:	17000013 	smladne	r0, r3, r0, r0
 650:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
 654:	0b3a050b 	bleq	e81a88 <startup-0x1f17e578>
 658:	0b39053b 	bleq	e41b4c <startup-0x1f1be4b4>
 65c:	00001301 	andeq	r1, r0, r1, lsl #6
 660:	03000d18 	movweq	r0, #3352	; 0xd18
 664:	3b0b3a0e 	blcc	2ceea4 <startup-0x1fd3115c>
 668:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
 66c:	000b3813 	andeq	r3, fp, r3, lsl r8
 670:	000d1900 	andeq	r1, sp, r0, lsl #18
 674:	0b3a0e03 	bleq	e83e88 <startup-0x1f17c178>
 678:	0b39053b 	bleq	e41b6c <startup-0x1f1be494>
 67c:	05381349 	ldreq	r1, [r8, #-841]!	; 0xfffffcb7
 680:	131a0000 	tstne	sl, #0
 684:	0b0e0301 	bleq	381290 <startup-0x1fc7ed70>
 688:	3b0b3a0b 	blcc	2ceebc <startup-0x1fd31144>
 68c:	010b3905 	tsteq	fp, r5, lsl #18
 690:	1b000013 	blne	6e4 <startup-0x1ffff91c>
 694:	0b0b0113 	bleq	2c0ae8 <startup-0x1fd3f518>
 698:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 69c:	13010b39 	movwne	r0, #6969	; 0x1b39
 6a0:	171c0000 	ldrne	r0, [ip, -r0]
 6a4:	3a0b0b01 	bcc	2c32b0 <startup-0x1fd3cd50>
 6a8:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 6ac:	0013010b 	andseq	r0, r3, fp, lsl #2
 6b0:	000d1d00 	andeq	r1, sp, r0, lsl #26
 6b4:	0b3a0e03 	bleq	e83ec8 <startup-0x1f17c138>
 6b8:	0b39053b 	bleq	e41bac <startup-0x1f1be454>
 6bc:	00001349 	andeq	r1, r0, r9, asr #6
 6c0:	2701151e 	smladcs	r1, lr, r5, r1
 6c4:	00130119 	andseq	r0, r3, r9, lsl r1
 6c8:	00341f00 	eorseq	r1, r4, r0, lsl #30
 6cc:	0b3a0e03 	bleq	e83ee0 <startup-0x1f17c120>
 6d0:	0b39053b 	bleq	e41bc4 <startup-0x1f1be43c>
 6d4:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 6d8:	0000193c 	andeq	r1, r0, ip, lsr r9
 6dc:	03003420 	movweq	r3, #1056	; 0x420
 6e0:	3b0b3a0e 	blcc	2cef20 <startup-0x1fd310e0>
 6e4:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 6e8:	02193f13 	andseq	r3, r9, #19, 30	; 0x4c
 6ec:	21000018 	tstcs	r0, r8, lsl r0
 6f0:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 6f4:	0b3a0e03 	bleq	e83f08 <startup-0x1f17c0f8>
 6f8:	0b390b3b 	bleq	e433ec <startup-0x1f1bcc14>
 6fc:	01111349 	tsteq	r1, r9, asr #6
 700:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 704:	01194297 			; <UNDEFINED> instruction: 0x01194297
 708:	22000013 	andcs	r0, r0, #19
 70c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 710:	0b3b0b3a 	bleq	ec3400 <startup-0x1f13cc00>
 714:	13490b39 	movtne	r0, #39737	; 0x9b39
 718:	00001802 	andeq	r1, r0, r2, lsl #16
 71c:	3f012e23 	svccc	0x00012e23
 720:	3a0e0319 	bcc	38138c <startup-0x1fc7ec74>
 724:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 728:	1119270b 	tstne	r9, fp, lsl #14
 72c:	40061201 	andmi	r1, r6, r1, lsl #4
 730:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 734:	00001301 	andeq	r1, r0, r1, lsl #6
 738:	03000524 	movweq	r0, #1316	; 0x524
 73c:	3b0b3a0e 	blcc	2cef7c <startup-0x1fd31084>
 740:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 744:	00180213 	andseq	r0, r8, r3, lsl r2
 748:	002e2500 	eoreq	r2, lr, r0, lsl #10
 74c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 750:	0b3b0b3a 	bleq	ec3440 <startup-0x1f13cbc0>
 754:	13490b39 	movtne	r0, #39737	; 0x9b39
 758:	06120111 			; <UNDEFINED> instruction: 0x06120111
 75c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 760:	26000019 			; <UNDEFINED> instruction: 0x26000019
 764:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 768:	0b3a0e03 	bleq	e83f7c <startup-0x1f17c084>
 76c:	0b390b3b 	bleq	e43460 <startup-0x1f1bcba0>
 770:	06120111 			; <UNDEFINED> instruction: 0x06120111
 774:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 778:	27000019 	smladcs	r0, r9, r0, r0
 77c:	0111010b 	tsteq	r1, fp, lsl #2
 780:	00000612 	andeq	r0, r0, r2, lsl r6
 784:	03003428 	movweq	r3, #1064	; 0x428
 788:	3b0b3a08 	blcc	2cefb0 <startup-0x1fd31050>
 78c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 790:	00180213 	andseq	r0, r8, r3, lsl r2
 794:	11010000 	mrsne	r0, (UNDEF: 1)
 798:	130e2501 	movwne	r2, #58625	; 0xe501
 79c:	1b0e030b 	blne	3813d0 <startup-0x1fc7ec30>
 7a0:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
 7a4:	00171006 	andseq	r1, r7, r6
 7a8:	00240200 	eoreq	r0, r4, r0, lsl #4
 7ac:	0b3e0b0b 	bleq	f833e0 <startup-0x1f07cc20>
 7b0:	00000e03 	andeq	r0, r0, r3, lsl #28
 7b4:	3f012e03 	svccc	0x00012e03
 7b8:	3a0e0319 	bcc	381424 <startup-0x1fc7ebdc>
 7bc:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 7c0:	1119270b 	tstne	r9, fp, lsl #14
 7c4:	40061201 	andmi	r1, r6, r1, lsl #4
 7c8:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 7cc:	00001301 	andeq	r1, r0, r1, lsl #6
 7d0:	03000504 	movweq	r0, #1284	; 0x504
 7d4:	3b0b3a0e 	blcc	2cf014 <startup-0x1fd30fec>
 7d8:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 7dc:	00180213 	andseq	r0, r8, r3, lsl r2
 7e0:	00340500 	eorseq	r0, r4, r0, lsl #10
 7e4:	0b3a0803 	bleq	e827f8 <startup-0x1f17d808>
 7e8:	0b390b3b 	bleq	e434dc <startup-0x1f1bcb24>
 7ec:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 7f0:	0f060000 	svceq	0x00060000
 7f4:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
 7f8:	07000013 	smladeq	r0, r3, r0, r0
 7fc:	0b0b0024 	bleq	2c0894 <startup-0x1fd3f76c>
 800:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 804:	05080000 	streq	r0, [r8, #-0]
 808:	3a080300 	bcc	201410 <startup-0x1fdfebf0>
 80c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 810:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 814:	09000018 	stmdbeq	r0, {r3, r4}
 818:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 81c:	0b3b0b3a 	bleq	ec350c <startup-0x1f13caf4>
 820:	13490b39 	movtne	r0, #39737	; 0x9b39
 824:	00001802 	andeq	r1, r0, r2, lsl #16
 828:	3f002e0a 	svccc	0x00002e0a
 82c:	3a0e0319 	bcc	381498 <startup-0x1fc7eb68>
 830:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 834:	1201110b 	andne	r1, r1, #-1073741822	; 0xc0000002
 838:	96184006 	ldrls	r4, [r8], -r6
 83c:	00001942 	andeq	r1, r0, r2, asr #18
 840:	3f012e0b 	svccc	0x00012e0b
 844:	3a0e0319 	bcc	3814b0 <startup-0x1fc7eb50>
 848:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 84c:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 850:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 854:	96184006 	ldrls	r4, [r8], -r6
 858:	13011942 	movwne	r1, #6466	; 0x1942
 85c:	2e0c0000 	cdpcs	0, 0, cr0, cr12, cr0, {0}
 860:	03193f01 	tsteq	r9, #1, 30
 864:	3b0b3a0e 	blcc	2cf0a4 <startup-0x1fd30f5c>
 868:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
 86c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 870:	97184006 	ldrls	r4, [r8, -r6]
 874:	13011942 	movwne	r1, #6466	; 0x1942
 878:	2e0d0000 	cdpcs	0, 0, cr0, cr13, cr0, {0}
 87c:	03193f00 	tsteq	r9, #0, 30
 880:	3b0b3a0e 	blcc	2cf0c0 <startup-0x1fd30f40>
 884:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
 888:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 88c:	96184006 	ldrls	r4, [r8], -r6
 890:	00001942 	andeq	r1, r0, r2, asr #18
 894:	01110100 	tsteq	r1, r0, lsl #2
 898:	0b130e25 	bleq	4c4134 <startup-0x1fb3becc>
 89c:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
 8a0:	06120111 			; <UNDEFINED> instruction: 0x06120111
 8a4:	00001710 	andeq	r1, r0, r0, lsl r7
 8a8:	0b002402 	bleq	98b8 <startup-0x1fff6748>
 8ac:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 8b0:	0300000e 	movweq	r0, #14
 8b4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 8b8:	0b3a0e03 	bleq	e840cc <startup-0x1f17bf34>
 8bc:	0b390b3b 	bleq	e435b0 <startup-0x1f1bca50>
 8c0:	01111927 	tsteq	r1, r7, lsr #18
 8c4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 8c8:	01194296 			; <UNDEFINED> instruction: 0x01194296
 8cc:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
 8d0:	08030005 	stmdaeq	r3, {r0, r2}
 8d4:	0b3b0b3a 	bleq	ec35c4 <startup-0x1f13ca3c>
 8d8:	13490b39 	movtne	r0, #39737	; 0x9b39
 8dc:	00001802 	andeq	r1, r0, r2, lsl #16
 8e0:	3f002e05 	svccc	0x00002e05
 8e4:	3a0e0319 	bcc	381550 <startup-0x1fc7eab0>
 8e8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 8ec:	1119270b 	tstne	r9, fp, lsl #14
 8f0:	40061201 	andmi	r1, r6, r1, lsl #4
 8f4:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 8f8:	2e060000 	cdpcs	0, 0, cr0, cr6, cr0, {0}
 8fc:	03193f00 	tsteq	r9, #0, 30
 900:	3b0b3a0e 	blcc	2cf140 <startup-0x1fd30ec0>
 904:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
 908:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 90c:	97184006 	ldrls	r4, [r8, -r6]
 910:	00001942 	andeq	r1, r0, r2, asr #18
 914:	01110100 	tsteq	r1, r0, lsl #2
 918:	0b130e25 	bleq	4c41b4 <startup-0x1fb3be4c>
 91c:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
 920:	06120111 			; <UNDEFINED> instruction: 0x06120111
 924:	00001710 	andeq	r1, r0, r0, lsl r7
 928:	0b002402 	bleq	9938 <startup-0x1fff66c8>
 92c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 930:	0300000e 	movweq	r0, #14
 934:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 938:	0b3a0e03 	bleq	e8414c <startup-0x1f17beb4>
 93c:	0b390b3b 	bleq	e43630 <startup-0x1f1bc9d0>
 940:	01111927 	tsteq	r1, r7, lsr #18
 944:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 948:	01194297 			; <UNDEFINED> instruction: 0x01194297
 94c:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
 950:	08030005 	stmdaeq	r3, {r0, r2}
 954:	0b3b0b3a 	bleq	ec3644 <startup-0x1f13c9bc>
 958:	13490b39 	movtne	r0, #39737	; 0x9b39
 95c:	00001802 	andeq	r1, r0, r2, lsl #16
 960:	3f012e05 	svccc	0x00012e05
 964:	3a0e0319 	bcc	3815d0 <startup-0x1fc7ea30>
 968:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 96c:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 970:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 974:	96184006 	ldrls	r4, [r8], -r6
 978:	13011942 	movwne	r1, #6466	; 0x1942
 97c:	34060000 	strcc	r0, [r6], #-0
 980:	3a0e0300 	bcc	381588 <startup-0x1fc7ea78>
 984:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 988:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 98c:	07000018 	smladeq	r0, r8, r0, r0
 990:	08030034 	stmdaeq	r3, {r2, r4, r5}
 994:	0b3b0b3a 	bleq	ec3684 <startup-0x1f13c97c>
 998:	13490b39 	movtne	r0, #39737	; 0x9b39
 99c:	00001802 	andeq	r1, r0, r2, lsl #16
 9a0:	49010108 	stmdbmi	r1, {r3, r8}
 9a4:	00130113 	andseq	r0, r3, r3, lsl r1
 9a8:	00210900 	eoreq	r0, r1, r0, lsl #18
 9ac:	0b2f1349 	bleq	bc56d8 <startup-0x1f43a928>
 9b0:	240a0000 	strcs	r0, [sl], #-0
 9b4:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 9b8:	0008030b 	andeq	r0, r8, fp, lsl #6
 9bc:	012e0b00 			; <UNDEFINED> instruction: 0x012e0b00
 9c0:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 9c4:	0b3b0b3a 	bleq	ec36b4 <startup-0x1f13c94c>
 9c8:	13490b39 	movtne	r0, #39737	; 0x9b39
 9cc:	06120111 			; <UNDEFINED> instruction: 0x06120111
 9d0:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 9d4:	00130119 	andseq	r0, r3, r9, lsl r1
 9d8:	012e0c00 			; <UNDEFINED> instruction: 0x012e0c00
 9dc:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 9e0:	0b3b0b3a 	bleq	ec36d0 <startup-0x1f13c930>
 9e4:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 9e8:	06120111 			; <UNDEFINED> instruction: 0x06120111
 9ec:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 9f0:	00000019 	andeq	r0, r0, r9, lsl r0

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	00000a34 	andeq	r0, r0, r4, lsr sl
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
	...
  28:	0000001c 	andeq	r0, r0, ip, lsl r0
  2c:	11f20002 	mvnsne	r0, r2
  30:	00040000 	andeq	r0, r4, r0
  34:	00000000 	andeq	r0, r0, r0
  38:	20000a48 	andcs	r0, r0, r8, asr #20
  3c:	00000524 	andeq	r0, r0, r4, lsr #10
	...
  48:	0000001c 	andeq	r0, r0, ip, lsl r0
  4c:	157e0002 	ldrbne	r0, [lr, #-2]!
  50:	00040000 	andeq	r0, r4, r0
  54:	00000000 	andeq	r0, r0, r0
  58:	20000f6c 	andcs	r0, r0, ip, ror #30
  5c:	0000013c 	andeq	r0, r0, ip, lsr r1
	...
  68:	0000001c 	andeq	r0, r0, ip, lsl r0
  6c:	21110002 	tstcs	r1, r2
  70:	00040000 	andeq	r0, r4, r0
  74:	00000000 	andeq	r0, r0, r0
  78:	200010a8 	andcs	r1, r0, r8, lsr #1
  7c:	0000031e 	andeq	r0, r0, lr, lsl r3
	...
  88:	0000001c 	andeq	r0, r0, ip, lsl r0
  8c:	237b0002 	cmncs	fp, #2
  90:	00040000 	andeq	r0, r4, r0
  94:	00000000 	andeq	r0, r0, r0
  98:	200013c8 	andcs	r1, r0, r8, asr #7
  9c:	000000ac 	andeq	r0, r0, ip, lsr #1
	...
  a8:	0000001c 	andeq	r0, r0, ip, lsl r0
  ac:	241d0002 	ldrcs	r0, [sp], #-2
  b0:	00040000 	andeq	r0, r4, r0
  b4:	00000000 	andeq	r0, r0, r0
  b8:	20001474 	andcs	r1, r0, r4, ror r4
  bc:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20000010 	andcs	r0, r0, r0, lsl r0
   4:	20000a44 	andcs	r0, r0, r4, asr #20
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	000007a6 	andeq	r0, r0, r6, lsr #15
   4:	01850003 	orreq	r0, r5, r3
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	5a010000 	bpl	40020 <startup-0x1ffbffe0>
  1c:	6f6d2f3a 	svcvs	0x006d2f3a
  20:	4f4d2f70 	svcmi	0x004d2f70
  24:	70532d50 	subsvc	r2, r3, r0, asr sp
  28:	31286c65 			; <UNDEFINED> instruction: 0x31286c65
  2c:	4f4d2f29 	svcmi	0x004d2f29
  30:	70532d50 	subsvc	r2, r3, r0, asr sp
  34:	532f6c65 			; <UNDEFINED> instruction: 0x532f6c65
  38:	656b616e 	strbvs	r6, [fp, #-366]!	; 0xfffffe92
  3c:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
  40:	61657363 	cmnvs	r5, r3, ror #6
  44:	635c7070 	cmpvs	ip, #112	; 0x70
  48:	6c65646f 	cfstrdvs	mvd6, [r5], #-444	; 0xfffffe44
  4c:	5c657469 	cfstrdpl	mvd7, [r5], #-420	; 0xfffffe5c
  50:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; fffffe88 <rear+0xdfffc46c>
  54:	63675c73 	cmnvs	r7, #29440	; 0x7300
  58:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
  5c:	72615c6d 	rsbvc	r5, r1, #27904	; 0x6d00
  60:	6f6e2d6d 	svcvs	0x006e2d6d
  64:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
  68:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
  6c:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
  70:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
  74:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
  78:	00656e69 	rsbeq	r6, r5, r9, ror #28
  7c:	635c3a63 	cmpvs	ip, #405504	; 0x63000
  80:	70616573 	rsbvc	r6, r1, r3, ror r5
  84:	6f635c70 	svcvs	0x00635c70
  88:	696c6564 	stmdbvs	ip!, {r2, r5, r6, r8, sl, sp, lr}^
  8c:	745c6574 	ldrbvc	r6, [ip], #-1396	; 0xfffffa8c
  90:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
  94:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
  98:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
  9c:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
  a0:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
  a4:	61652d65 	cmnvs	r5, r5, ror #26
  a8:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
  ac:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
  b0:	735c6564 	cmpvc	ip, #100, 10	; 0x19000000
  b4:	63007379 	movwvs	r7, #889	; 0x379
  b8:	73635c3a 	cmnvc	r3, #14848	; 0x3a00
  bc:	70706165 	rsbsvc	r6, r0, r5, ror #2
  c0:	646f635c 	strbtvs	r6, [pc], #-860	; c8 <startup-0x1fffff38>
  c4:	74696c65 	strbtvc	r6, [r9], #-3173	; 0xfffff39b
  c8:	6f745c65 	svcvs	0x00745c65
  cc:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
  d0:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
  d4:	5c6d7261 	sfmpl	f7, 2, [sp], #-388	; 0xfffffe7c
  d8:	5c62696c 			; <UNDEFINED> instruction: 0x5c62696c
  dc:	5c636367 	stclpl	3, cr6, [r3], #-412	; 0xfffffe64
  e0:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
  e4:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
  e8:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
  ec:	2e395c69 	cdpcs	12, 3, cr5, cr9, cr9, {3}
  f0:	5c312e32 	ldcpl	14, cr2, [r1], #-200	; 0xffffff38
  f4:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
  f8:	00656475 	rsbeq	r6, r5, r5, ror r4
  fc:	61747300 	cmnvs	r4, r0, lsl #6
 100:	70757472 	rsbsvc	r7, r5, r2, ror r4
 104:	0100632e 	tsteq	r0, lr, lsr #6
 108:	645f0000 	ldrbvs	r0, [pc], #-0	; 110 <startup-0x1ffffef0>
 10c:	75616665 	strbvc	r6, [r1, #-1637]!	; 0xfffff99b
 110:	745f746c 	ldrbvc	r7, [pc], #-1132	; 118 <startup-0x1ffffee8>
 114:	73657079 	cmnvc	r5, #121	; 0x79
 118:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
 11c:	6f6c0000 	svcvs	0x006c0000
 120:	682e6b63 	stmdavs	lr!, {r0, r1, r5, r6, r8, r9, fp, sp, lr}
 124:	00000300 	andeq	r0, r0, r0, lsl #6
 128:	7079745f 	rsbsvc	r7, r9, pc, asr r4
 12c:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
 130:	00000300 	andeq	r0, r0, r0, lsl #6
 134:	64647473 	strbtvs	r7, [r4], #-1139	; 0xfffffb8d
 138:	682e6665 	stmdavs	lr!, {r0, r2, r5, r6, r9, sl, sp, lr}
 13c:	00000400 	andeq	r0, r0, r0, lsl #8
 140:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
 144:	00682e74 	rsbeq	r2, r8, r4, ror lr
 148:	5f000003 	svcpl	0x00000003
 14c:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
 150:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
 154:	00000300 	andeq	r0, r0, r0, lsl #6
 158:	6d6f6567 	cfstr64vs	mvdx6, [pc, #-412]!	; ffffffc4 <rear+0xdfffc5a8>
 15c:	69727465 	ldmdbvs	r2!, {r0, r2, r5, r6, sl, ip, sp, lr}^
 160:	6a626f63 	bvs	189bef4 <startup-0x1e76410c>
 164:	2e746365 	cdpcs	3, 7, cr6, cr4, cr5, {3}
 168:	00010068 	andeq	r0, r1, r8, rrx
 16c:	61726700 	cmnvs	r2, r0, lsl #14
 170:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 174:	70736964 	rsbsvc	r6, r3, r4, ror #18
 178:	2e79616c 	rpwcsez	f6, f1, #4.0
 17c:	00010068 	andeq	r0, r1, r8, rrx
 180:	616d6900 	cmnvs	sp, r0, lsl #18
 184:	782e6567 	stmdavc	lr!, {r0, r1, r2, r5, r6, r8, sl, sp, lr}
 188:	01006d62 	tsteq	r0, r2, ror #26
 18c:	05000000 	streq	r0, [r0, #-0]
 190:	02050001 	andeq	r0, r5, #1
 194:	20000000 	andcs	r0, r0, r0
 198:	13011d03 	movwne	r1, #7427	; 0x1d03
 19c:	212f2121 			; <UNDEFINED> instruction: 0x212f2121
 1a0:	01000302 	tsteq	r0, r2, lsl #6
 1a4:	00390501 	eorseq	r0, r9, r1, lsl #10
 1a8:	00100205 	andseq	r0, r0, r5, lsl #4
 1ac:	24032000 	strcs	r2, [r3], #-0
 1b0:	670d0501 	strvs	r0, [sp, -r1, lsl #10]
 1b4:	3d01053d 	cfstr32cc	mvfx0, [r1, #-244]	; 0xffffff0c
 1b8:	054c1c05 	strbeq	r1, [ip, #-3077]	; 0xfffff3fb
 1bc:	05054b0e 	streq	r4, [r5, #-2830]	; 0xfffff4f2
 1c0:	0010052e 	andseq	r0, r0, lr, lsr #10
 1c4:	21030402 	tstcs	r3, r2, lsl #8
 1c8:	02001c05 	andeq	r1, r0, #1280	; 0x500
 1cc:	052e0304 	streq	r0, [lr, #-772]!	; 0xfffffcfc
 1d0:	04020020 	streq	r0, [r2], #-32	; 0xffffffe0
 1d4:	1e057403 	cdpne	4, 0, cr7, cr5, cr3, {0}
 1d8:	03040200 	movweq	r0, #16896	; 0x4200
 1dc:	0009052e 	andeq	r0, r9, lr, lsr #10
 1e0:	20030402 	andcs	r0, r3, r2, lsl #8
 1e4:	02002805 	andeq	r2, r0, #327680	; 0x50000
 1e8:	05200304 	streq	r0, [r0, #-772]!	; 0xfffffcfc
 1ec:	04020034 	streq	r0, [r2], #-52	; 0xffffffcc
 1f0:	38052e03 	stmdacc	r5, {r0, r1, r9, sl, fp, sp}
 1f4:	03040200 	movweq	r0, #16896	; 0x4200
 1f8:	00360574 	eorseq	r0, r6, r4, ror r5
 1fc:	2e030402 	cdpcs	4, 0, cr0, cr3, cr2, {0}
 200:	02000905 	andeq	r0, r0, #81920	; 0x14000
 204:	05200304 	streq	r0, [r0, #-772]!	; 0xfffffcfc
 208:	0402002b 	streq	r0, [r2], #-43	; 0xffffffd5
 20c:	18053b03 	stmdane	r5, {r0, r1, r8, r9, fp, ip, sp}
 210:	01040200 	mrseq	r0, R12_usr
 214:	001d053c 	andseq	r0, sp, ip, lsr r5
 218:	2e010402 	cdpcs	4, 0, cr0, cr1, cr2, {0}
 21c:	02000505 	andeq	r0, r0, #20971520	; 0x1400000
 220:	05200104 	streq	r0, [r0, #-260]!	; 0xfffffefc
 224:	1d053f01 	stcne	15, cr3, [r5, #-4]
 228:	4b0e055a 	blmi	381798 <startup-0x1fc7e868>
 22c:	052e0505 	streq	r0, [lr, #-1285]!	; 0xfffffafb
 230:	04020010 	streq	r0, [r2], #-16
 234:	1c052103 	stfnes	f2, [r5], {3}
 238:	03040200 	movweq	r0, #16896	; 0x4200
 23c:	0020052e 	eoreq	r0, r0, lr, lsr #10
 240:	74030402 	strvc	r0, [r3], #-1026	; 0xfffffbfe
 244:	02001e05 	andeq	r1, r0, #5, 28	; 0x50
 248:	052e0304 	streq	r0, [lr, #-772]!	; 0xfffffcfc
 24c:	04020009 	streq	r0, [r2], #-9
 250:	28052003 	stmdacs	r5, {r0, r1, sp}
 254:	03040200 	movweq	r0, #16896	; 0x4200
 258:	00340520 	eorseq	r0, r4, r0, lsr #10
 25c:	2e030402 	cdpcs	4, 0, cr0, cr3, cr2, {0}
 260:	02003805 	andeq	r3, r0, #327680	; 0x50000
 264:	05740304 	ldrbeq	r0, [r4, #-772]!	; 0xfffffcfc
 268:	04020036 	streq	r0, [r2], #-54	; 0xffffffca
 26c:	09052e03 	stmdbeq	r5, {r0, r1, r9, sl, fp, sp}
 270:	03040200 	movweq	r0, #16896	; 0x4200
 274:	002d0520 	eoreq	r0, sp, r0, lsr #10
 278:	3b030402 	blcc	c1288 <startup-0x1ff3ed78>
 27c:	02001a05 	andeq	r1, r0, #20480	; 0x5000
 280:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 284:	0402001f 	streq	r0, [r2], #-31	; 0xffffffe1
 288:	05052e01 	streq	r2, [r5, #-3585]	; 0xfffff1ff
 28c:	01040200 	mrseq	r0, R12_usr
 290:	3f010520 	svccc	0x00010520
 294:	055a1c05 	ldrbeq	r1, [sl, #-3077]	; 0xfffff3fb
 298:	1a054d10 	bne	1536e0 <startup-0x1feac920>
 29c:	2e17052e 	cfmul64cs	mvdx0, mvdx7, mvdx14
 2a0:	05200d05 	streq	r0, [r0, #-3333]!	; 0xfffff2fb
 2a4:	1a052f10 	bne	14beec <startup-0x1feb4114>
 2a8:	2e17052e 	cfmul64cs	mvdx0, mvdx7, mvdx14
 2ac:	05200d05 	streq	r0, [r0, #-3333]!	; 0xfffff2fb
 2b0:	0705310a 	streq	r3, [r5, -sl, lsl #2]
 2b4:	2f0e052e 	svccs	0x000e052e
 2b8:	053e0a05 	ldreq	r0, [lr, #-2565]!	; 0xfffff5fb
 2bc:	0e052e07 	cdpeq	14, 0, cr2, cr5, cr7, {0}
 2c0:	3e0a052f 	cfsh32cc	mvfx0, mvfx10, #31
 2c4:	052e0705 	streq	r0, [lr, #-1797]!	; 0xfffff8fb
 2c8:	0a052f0e 	beq	14bf08 <startup-0x1feb40f8>
 2cc:	2e07053e 	mcrcs	5, 0, r0, cr7, cr14, {1}
 2d0:	052f0e05 	streq	r0, [pc, #-3589]!	; fffff4d3 <rear+0xdfffbab7>
 2d4:	01053e05 	tsteq	r5, r5, lsl #28
 2d8:	034f054b 	movteq	r0, #62795	; 0xf54b
 2dc:	056600d1 	strbeq	r0, [r6, #-209]!	; 0xffffff2f
 2e0:	0f05750e 	svceq	0x0005750e
 2e4:	4b0d054b 	blmi	341818 <startup-0x1fcbe7e8>
 2e8:	053d0105 	ldreq	r0, [sp, #-261]!	; 0xfffffefb
 2ec:	09054c2a 	stmdbeq	r5, {r1, r3, r5, sl, fp, lr}
 2f0:	2e150569 	cfmsc32cs	mvfx0, mvfx5, mvfx9
 2f4:	053c0705 	ldreq	r0, [ip, #-1797]!	; 0xfffff8fb
 2f8:	22052f1b 	andcs	r2, r5, #27, 30	; 0x6c
 2fc:	2e18052e 	cfmul64cs	mvdx0, mvdx8, mvdx14
 300:	05301b05 	ldreq	r1, [r0, #-2821]!	; 0xfffff4fb
 304:	18052e22 	stmdane	r5, {r1, r5, r9, sl, fp, sp}
 308:	310c052e 	tstcc	ip, lr, lsr #10
 30c:	052e0505 	streq	r0, [lr, #-1285]!	; 0xfffffafb
 310:	09052110 	stmdbeq	r5, {r4, r8, sp}
 314:	2123052e 			; <UNDEFINED> instruction: 0x2123052e
 318:	052e2b05 	streq	r2, [lr, #-2821]!	; 0xfffff4fb
 31c:	29053c3b 	stmdbcs	r5, {r0, r1, r3, r4, r5, sl, fp, ip, sp}
 320:	201b052e 	andscs	r0, fp, lr, lsr #10
 324:	054b1405 	strbeq	r1, [fp, #-1029]	; 0xfffffbfb
 328:	15052e0d 	strne	r2, [r5, #-3597]	; 0xfffff1f3
 32c:	82140521 	andshi	r0, r4, #138412032	; 0x8400000
 330:	05211d05 	streq	r1, [r1, #-3333]!	; 0xfffff2fb
 334:	25052e21 	strcs	r2, [r5, #-3617]	; 0xfffff1df
 338:	2e29052e 	cfsh64cs	mvdx0, mvdx9, #30
 33c:	05201505 	streq	r1, [r0, #-1285]!	; 0xfffffafb
 340:	34052030 	strcc	r2, [r5], #-48	; 0xffffffd0
 344:	2015053c 	andscs	r0, r5, ip, lsr r5
 348:	02002105 	andeq	r2, r0, #1073741825	; 0x40000001
 34c:	053a0204 	ldreq	r0, [sl, #-516]!	; 0xfffffdfc
 350:	0402000d 	streq	r0, [r2], #-13
 354:	2a053c01 	bcs	14f360 <startup-0x1feb0ca0>
 358:	02040200 	andeq	r0, r4, #0, 4
 35c:	0009053a 	andeq	r0, r9, sl, lsr r5
 360:	3c010402 	cfstrscc	mvf0, [r1], {2}
 364:	02002105 	andeq	r2, r0, #1073741825	; 0x40000001
 368:	05490204 	strbeq	r0, [r9, #-516]	; 0xfffffdfc
 36c:	04020016 	streq	r0, [r2], #-22	; 0xffffffea
 370:	05053c01 	streq	r3, [r5, #-3073]	; 0xfffff3ff
 374:	01040200 	mrseq	r0, R12_usr
 378:	0301053c 	movweq	r0, #5436	; 0x153c
 37c:	1b053c09 	blne	14f3a8 <startup-0x1feb0c58>
 380:	4b0d055a 	blmi	3418f0 <startup-0x1fcbe710>
 384:	052e0805 	streq	r0, [lr, #-2053]!	; 0xfffff7fb
 388:	0402001f 	streq	r0, [r2], #-31	; 0xffffffe1
 38c:	18052e01 	stmdane	r5, {r0, r9, sl, fp, sp}
 390:	01040200 	mrseq	r0, R12_usr
 394:	2f0d052e 	svccs	0x000d052e
 398:	054b0e05 	strbeq	r0, [fp, #-3589]	; 0xfffff1fb
 39c:	0a052e05 	beq	14bbb8 <startup-0x1feb4448>
 3a0:	03040200 	movweq	r0, #16896	; 0x4200
 3a4:	000d0521 	andeq	r0, sp, r1, lsr #10
 3a8:	82030402 	andhi	r0, r3, #33554432	; 0x2000000
 3ac:	02001505 	andeq	r1, r0, #20971520	; 0x1400000
 3b0:	05200304 	streq	r0, [r0, #-772]!	; 0xfffffcfc
 3b4:	04020009 	streq	r0, [r2], #-9
 3b8:	2a056603 	bcs	159bcc <startup-0x1fea6434>
 3bc:	03040200 	movweq	r0, #16896	; 0x4200
 3c0:	00170549 	andseq	r0, r7, r9, asr #10
 3c4:	3c010402 	cfstrscc	mvf0, [r1], {2}
 3c8:	02000505 	andeq	r0, r0, #20971520	; 0x1400000
 3cc:	052e0104 	streq	r0, [lr, #-260]!	; 0xfffffefc
 3d0:	1a053f01 	bne	14ffdc <startup-0x1feb0024>
 3d4:	4b060576 	blmi	1819b4 <startup-0x1fe7e64c>
 3d8:	052e0505 	streq	r0, [lr, #-1285]!	; 0xfffffafb
 3dc:	1e053d01 	cdpne	13, 0, cr3, cr5, cr1, {0}
 3e0:	4b090576 	blmi	2419c0 <startup-0x1fdbe640>
 3e4:	3d0d053d 	cfstr32cc	mvfx0, [sp, #-244]	; 0xffffff0c
 3e8:	052e0505 	streq	r0, [lr, #-1285]!	; 0xfffffafb
 3ec:	04020018 	streq	r0, [r2], #-24	; 0xffffffe8
 3f0:	0d052103 	stfeqs	f2, [r5, #-12]
 3f4:	03040200 	movweq	r0, #16896	; 0x4200
 3f8:	000a0582 	andeq	r0, sl, r2, lsl #11
 3fc:	2f030402 	svccs	0x00030402
 400:	02001305 	andeq	r1, r0, #335544320	; 0x14000000
 404:	05820304 	streq	r0, [r2, #772]	; 0x304
 408:	04020010 	streq	r0, [r2], #-16
 40c:	14052f03 	strne	r2, [r5], #-3843	; 0xfffff0fd
 410:	03040200 	movweq	r0, #16896	; 0x4200
 414:	00110530 	andseq	r0, r1, r0, lsr r5
 418:	82030402 	andhi	r0, r3, #33554432	; 0x2000000
 41c:	02000a05 	andeq	r0, r0, #20480	; 0x5000
 420:	052f0304 	streq	r0, [pc, #-772]!	; 124 <startup-0x1ffffedc>
 424:	04020013 	streq	r0, [r2], #-19	; 0xffffffed
 428:	10058203 	andne	r8, r5, r3, lsl #4
 42c:	03040200 	movweq	r0, #16896	; 0x4200
 430:	0024052f 	eoreq	r0, r4, pc, lsr #10
 434:	03030402 	movweq	r0, #13314	; 0x3402
 438:	16052e79 			; <UNDEFINED> instruction: 0x16052e79
 43c:	01040200 	mrseq	r0, R12_usr
 440:	0005053c 	andeq	r0, r5, ip, lsr r5
 444:	2e010402 	cdpcs	4, 0, cr0, cr1, cr2, {0}
 448:	09030105 	stmdbeq	r3, {r0, r2, r8}
 44c:	761e053c 			; <UNDEFINED> instruction: 0x761e053c
 450:	05590905 	ldrbeq	r0, [r9, #-2309]	; 0xfffff6fb
 454:	06052e15 			; <UNDEFINED> instruction: 0x06052e15
 458:	0301052f 	movweq	r0, #5423	; 0x152f
 45c:	0520081a 	streq	r0, [r0, #-2074]!	; 0xfffff7e6
 460:	20680314 	rsbcs	r0, r8, r4, lsl r3
 464:	052e0f05 	streq	r0, [lr, #-3845]!	; 0xfffff0fb
 468:	11052f12 	tstne	r5, r2, lsl pc
 46c:	4b1a052e 	blmi	68192c <startup-0x1f97e6d4>
 470:	053e0d05 	ldreq	r0, [lr, #-3333]!	; 0xfffff2fb
 474:	0f052214 	svceq	0x00052214
 478:	2f12052e 	svccs	0x0012052e
 47c:	052e1105 	streq	r1, [lr, #-261]!	; 0xfffffefb
 480:	0d05591a 	vstreq.16	s10, [r5, #-52]	; 0xffffffcc	; <UNPREDICTABLE>
 484:	2214053e 	andscs	r0, r4, #260046848	; 0xf800000
 488:	052e0f05 	streq	r0, [lr, #-3845]!	; 0xfffff0fb
 48c:	11052f12 	tstne	r5, r2, lsl pc
 490:	591a052e 	ldmdbpl	sl, {r1, r2, r3, r5, r8, sl}
 494:	053e0d05 	ldreq	r0, [lr, #-3333]!	; 0xfffff2fb
 498:	0f052214 	svceq	0x00052214
 49c:	2f12052e 	svccs	0x0012052e
 4a0:	052e1105 	streq	r1, [lr, #-261]!	; 0xfffffefb
 4a4:	0d054b1a 	vstreq	d4, [r5, #-104]	; 0xffffff98
 4a8:	206e033e 	rsbcs	r0, lr, lr, lsr r3
 4ac:	05343434 	ldreq	r3, [r4, #-1076]!	; 0xfffffbcc
 4b0:	31052201 	tstcc	r5, r1, lsl #4
 4b4:	591005ca 	ldmdbpl	r0, {r1, r3, r6, r7, r8, sl}
 4b8:	052e1d05 	streq	r1, [lr, #-3333]!	; 0xfffff2fb
 4bc:	2f052e07 	svccs	0x00052e07
 4c0:	01040200 	mrseq	r0, R12_usr
 4c4:	003c052e 	eorseq	r0, ip, lr, lsr #10
 4c8:	2e010402 	cdpcs	4, 0, cr0, cr1, cr2, {0}
 4cc:	02002405 	andeq	r2, r0, #83886080	; 0x5000000
 4d0:	052e0104 	streq	r0, [lr, #-260]!	; 0xfffffefc
 4d4:	09052f0f 	stmdbeq	r5, {r0, r1, r2, r3, r8, r9, sl, fp, sp}
 4d8:	69010559 	stmdbvs	r1, {r0, r3, r4, r6, r8, sl}
 4dc:	05682805 	strbeq	r2, [r8, #-2053]!	; 0xfffff7fb
 4e0:	29055912 	stmdbcs	r5, {r1, r4, r8, fp, ip, lr}
 4e4:	5a0d0558 	bpl	341a4c <startup-0x1fcbe5b4>
 4e8:	052e0505 	streq	r0, [lr, #-1285]!	; 0xfffffafb
 4ec:	1105210e 	tstne	r5, lr, lsl #2
 4f0:	200c0582 	andcs	r0, ip, r2, lsl #11
 4f4:	02002505 	andeq	r2, r0, #20971520	; 0x1400000
 4f8:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 4fc:	04020028 	streq	r0, [r2], #-40	; 0xffffffd8
 500:	21058201 	tstcs	r5, r1, lsl #4
 504:	01040200 	mrseq	r0, R12_usr
 508:	3f200520 	svccc	0x00200520
 50c:	053c1405 	ldreq	r1, [ip, #-1029]!	; 0xfffffbfb
 510:	0402002c 	streq	r0, [r2], #-44	; 0xffffffd4
 514:	20052001 	andcs	r2, r5, r1
 518:	3c14053d 	cfldr32cc	mvfx0, [r4], {61}	; 0x3d
 51c:	02002c05 	andeq	r2, r0, #1280	; 0x500
 520:	05200104 	streq	r0, [r0, #-260]!	; 0xfffffefc
 524:	13053e1f 	movwne	r3, #24095	; 0x5e1f
 528:	0032053c 	eorseq	r0, r2, ip, lsr r5
 52c:	20010402 	andcs	r0, r1, r2, lsl #8
 530:	02002405 	andeq	r2, r0, #83886080	; 0x5000000
 534:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 538:	11051d14 	tstne	r5, r4, lsl sp
 53c:	221d0523 	andscs	r0, sp, #146800640	; 0x8c00000
 540:	052e1505 	streq	r1, [lr, #-1285]!	; 0xfffffafb
 544:	15052f1d 	strne	r2, [r5, #-3869]	; 0xfffff0e3
 548:	0024052e 	eoreq	r0, r4, lr, lsr #10
 54c:	03020402 	movweq	r0, #9218	; 0x2402
 550:	16052e76 			; <UNDEFINED> instruction: 0x16052e76
 554:	01040200 	mrseq	r0, R12_usr
 558:	0005053c 	andeq	r0, r5, ip, lsr r5
 55c:	2e010402 	cdpcs	4, 0, cr0, cr1, cr2, {0}
 560:	0d030105 	stfeqs	f0, [r3, #-20]	; 0xffffffec
 564:	8414053c 	ldrhi	r0, [r4], #-1340	; 0xfffffac4
 568:	054b0905 	strbeq	r0, [fp, #-2309]	; 0xfffff6fb
 56c:	23052e13 	movwcs	r2, #24083	; 0x5e13
 570:	2f0f052e 	svccs	0x000f052e
 574:	054a1605 	strbeq	r1, [sl, #-1541]	; 0xfffff9fb
 578:	0a052e1b 	beq	14bdec <startup-0x1feb4214>
 57c:	2f110566 	svccs	0x00110566
 580:	af750105 	svcge	0x00750105
 584:	053e0905 	ldreq	r0, [lr, #-2309]!	; 0xfffff6fb
 588:	15053e08 	strne	r3, [r5, #-3592]	; 0xfffff1f8
 58c:	3108053d 	tstcc	r8, sp, lsr r5
 590:	3e3d0f05 	cdpcc	15, 3, cr0, cr13, cr5, {0}
 594:	05211205 	streq	r1, [r1, #-517]!	; 0xfffffdfb
 598:	0f055919 	svceq	0x00055919
 59c:	4109053a 	tstmi	r9, sl, lsr r5
 5a0:	055c0505 	ldrbeq	r0, [ip, #-1285]	; 0xfffffafb
 5a4:	22057508 	andcs	r7, r5, #8, 10	; 0x2000000
 5a8:	01040200 	mrseq	r0, R12_usr
 5ac:	2f11053c 	svccs	0x0011053c
 5b0:	05210105 	streq	r0, [r1, #-261]!	; 0xfffffefb
 5b4:	05057623 	streq	r7, [r5, #-1571]	; 0xfffff9dd
 5b8:	09054b2f 	stmdbeq	r5, {r0, r1, r2, r3, r5, r8, r9, fp, lr}
 5bc:	3c08054c 	cfstr32cc	mvfx0, [r8], {76}	; 0x4c
 5c0:	05210c05 	streq	r0, [r1, #-3077]!	; 0xfffff3fb
 5c4:	0d052e0b 	stceq	14, cr2, [r5, #-44]	; 0xffffffd4
 5c8:	01054b2f 	tsteq	r5, pc, lsr #22
 5cc:	1c0d0550 	cfstr32ne	mvfx0, [sp], {80}	; 0x50
 5d0:	4d01054b 	cfstr32mi	mvfx0, [r1, #-300]	; 0xfffffed4
 5d4:	05ae1405 	streq	r1, [lr, #1029]!	; 0x405
 5d8:	2b053109 	blcs	14ca04 <startup-0x1feb35fc>
 5dc:	2f090520 	svccs	0x00090520
 5e0:	05310505 	ldreq	r0, [r1, #-1285]!	; 0xfffffafb
 5e4:	05052013 	streq	r2, [r5, #-19]	; 0xffffffed
 5e8:	2014052f 	andscs	r0, r4, pc, lsr #10
 5ec:	052f0505 	streq	r0, [pc, #-1285]!	; ef <startup-0x1fffff11>
 5f0:	05052015 	streq	r2, [r5, #-21]	; 0xffffffeb
 5f4:	20130530 	andscs	r0, r3, r0, lsr r5
 5f8:	052f0505 	streq	r0, [pc, #-1285]!	; fb <startup-0x1fffff05>
 5fc:	05052013 	streq	r2, [r5, #-19]	; 0xffffffed
 600:	2013053d 	andscs	r0, r3, sp, lsr r5
 604:	7505052f 	strvc	r0, [r5, #-1327]	; 0xfffffad1
 608:	05201405 	streq	r1, [r0, #-1029]!	; 0xfffffbfb
 60c:	1b052f01 	blne	14c218 <startup-0x1feb3de8>
 610:	09053e08 	stmdbeq	r5, {r3, r9, sl, fp, ip, sp}
 614:	2f0e054b 	svccs	0x000e054b
 618:	052e0505 	streq	r0, [lr, #-1285]!	; 0xfffffafb
 61c:	0e05210b 	adfeqs	f2, f5, #3.0
 620:	8216053d 	andshi	r0, r6, #255852544	; 0xf400000
 624:	053e0e05 	ldreq	r0, [lr, #-3589]!	; 0xfffff1fb
 628:	18058216 	stmdane	r5, {r1, r2, r4, r9, pc}
 62c:	02040200 	andeq	r0, r4, #0, 4
 630:	001c0530 	andseq	r0, ip, r0, lsr r5
 634:	2e020402 	cdpcs	4, 0, cr0, cr2, cr2, {0}
 638:	02000a05 	andeq	r0, r0, #20480	; 0x5000
 63c:	05200204 	streq	r0, [r0, #-516]!	; 0xfffffdfc
 640:	04020021 	streq	r0, [r2], #-33	; 0xffffffdf
 644:	13058202 	movwne	r8, #20994	; 0x5202
 648:	02040200 	andeq	r0, r4, #0, 4
 64c:	000a0520 	andeq	r0, sl, r0, lsr #10
 650:	21020402 	tstcs	r2, r2, lsl #8
 654:	02001305 	andeq	r1, r0, #335544320	; 0x14000000
 658:	05820204 	streq	r0, [r2, #516]	; 0x204
 65c:	0402000a 	streq	r0, [r2], #-10
 660:	13052f02 	movwne	r2, #24322	; 0x5f02
 664:	02040200 	andeq	r0, r4, #0, 4
 668:	000a0582 	andeq	r0, sl, r2, lsl #11
 66c:	2f020402 	svccs	0x00020402
 670:	02001305 	andeq	r1, r0, #335544320	; 0x14000000
 674:	05820204 	streq	r0, [r2, #516]	; 0x204
 678:	0402000a 	streq	r0, [r2], #-10
 67c:	13052f02 	movwne	r2, #24322	; 0x5f02
 680:	02040200 	andeq	r0, r4, #0, 4
 684:	000a0582 	andeq	r0, sl, r2, lsl #11
 688:	2f020402 	svccs	0x00020402
 68c:	02001405 	andeq	r1, r0, #83886080	; 0x5000000
 690:	05820204 	streq	r0, [r2, #516]	; 0x204
 694:	0402000a 	streq	r0, [r2], #-10
 698:	13052f02 	movwne	r2, #24322	; 0x5f02
 69c:	02040200 	andeq	r0, r4, #0, 4
 6a0:	000a0582 	andeq	r0, sl, r2, lsl #11
 6a4:	2f020402 	svccs	0x00020402
 6a8:	02001805 	andeq	r1, r0, #327680	; 0x50000
 6ac:	05820204 	streq	r0, [r2, #516]	; 0x204
 6b0:	04020012 	streq	r0, [r2], #-18	; 0xffffffee
 6b4:	1e052f02 	cdpne	15, 0, cr2, cr5, cr2, {0}
 6b8:	02040200 	andeq	r0, r4, #0, 4
 6bc:	05587203 	ldrbeq	r7, [r8, #-515]	; 0xfffffdfd
 6c0:	04020023 	streq	r0, [r2], #-35	; 0xffffffdd
 6c4:	05053c02 	streq	r3, [r5, #-3074]	; 0xfffff3fe
 6c8:	01040200 	mrseq	r0, R12_usr
 6cc:	0301053c 	movweq	r0, #5436	; 0x153c
 6d0:	1a053c10 	bne	14f718 <startup-0x1feb08e8>
 6d4:	0c053e08 	stceq	14, cr3, [r5], {8}
 6d8:	3d0d054b 	cfstr32cc	mvfx0, [sp, #-300]	; 0xfffffed4
 6dc:	053d0e05 	ldreq	r0, [sp, #-3589]!	; 0xfffff1fb
 6e0:	12053d0d 	andne	r3, r5, #832	; 0x340
 6e4:	3d01053d 	cfstr32cc	mvfx0, [r1, #-244]	; 0xffffff0c
 6e8:	05e61405 	strbeq	r1, [r6, #1029]!	; 0x405
 6ec:	052f2f09 	streq	r2, [pc, #-3849]!	; fffff7eb <rear+0xdfffbdcf>
 6f0:	13052f10 	movwne	r2, #24336	; 0x5f10
 6f4:	3d0e053d 	cfstr32cc	mvfx0, [lr, #-244]	; 0xffffff0c
 6f8:	3d01053d 	cfstr32cc	mvfx0, [r1, #-244]	; 0xffffff0c
 6fc:	05d80d05 	ldrbeq	r0, [r8, #3333]	; 0xd05
 700:	12053d06 	andne	r3, r5, #384	; 0x180
 704:	830f054c 	movwhi	r0, #62796	; 0xf54c
 708:	052f1205 	streq	r1, [pc, #-517]!	; 50b <startup-0x1ffffaf5>
 70c:	11052124 	tstne	r5, r4, lsr #2
 710:	4913053c 	ldmdbmi	r3, {r2, r3, r4, r5, r8, sl}
 714:	052e1205 	streq	r1, [lr, #-517]!	; 0xfffffdfb
 718:	0b05310a 	bleq	14cb48 <startup-0x1feb34b8>
 71c:	01040200 	mrseq	r0, R12_usr
 720:	000a0520 	andeq	r0, sl, r0, lsr #10
 724:	3c010402 	cfstrscc	mvf0, [r1], {2}
 728:	05300105 	ldreq	r0, [r0, #-261]!	; 0xfffffefb
 72c:	09057621 	stmdbeq	r5, {r0, r5, r9, sl, ip, sp, lr}
 730:	4a130567 	bmi	4c1cd4 <startup-0x1fb3e32c>
 734:	055a0d05 	ldrbeq	r0, [sl, #-3333]	; 0xfffff2fb
 738:	2f2f4d05 	svccs	0x002f4d05
 73c:	05300a05 	ldreq	r0, [r0, #-2565]!	; 0xfffff5fb
 740:	0b05220d 	bleq	148f7c <startup-0x1feb7084>
 744:	750d0531 	strvc	r0, [sp, #-1329]	; 0xfffffacf
 748:	052f1505 	streq	r1, [pc, #-1285]!	; 24b <startup-0x1ffffdb5>
 74c:	67593d0d 	ldrbvs	r3, [r9, -sp, lsl #26]
 750:	05790e05 	ldrbeq	r0, [r9, #-3589]!	; 0xfffff1fb
 754:	1105210d 	tstne	r5, sp, lsl #2
 758:	2e100530 	cfmvr64hcs	r0, mvdx0
 75c:	052f1905 	streq	r1, [pc, #-2309]!	; fffffe5f <rear+0xdfffc443>
 760:	59305a0d 	ldmdbpl	r0!, {r0, r2, r3, r9, fp, ip, lr}
 764:	1a052f69 	bne	14c510 <startup-0x1feb3af0>
 768:	670d053d 	smladxvs	sp, sp, r5, r0
 76c:	05911d05 	ldreq	r1, [r1, #3333]	; 0xd05
 770:	1c056611 	stcne	6, cr6, [r5], {17}
 774:	66110521 	ldrvs	r0, [r1], -r1, lsr #10
 778:	05211a05 	streq	r1, [r1, #-2565]!	; 0xfffff5fb
 77c:	1c056611 	stcne	6, cr6, [r5], {17}
 780:	66110521 	ldrvs	r0, [r1], -r1, lsr #10
 784:	05212105 	streq	r2, [r1, #-261]!	; 0xfffffefb
 788:	11054a2e 	tstne	r5, lr, lsr #20
 78c:	21270558 			; <UNDEFINED> instruction: 0x21270558
 790:	05581105 	ldrbeq	r1, [r8, #-261]	; 0xfffffefb
 794:	0e05230d 	cdpeq	3, 0, cr2, cr5, cr13, {0}
 798:	05906803 	ldreq	r6, [r0, #2051]	; 0x803
 79c:	6671030a 	ldrbtvs	r0, [r1], -sl, lsl #6
 7a0:	2a030105 	bcs	c0bbc <startup-0x1ff3f444>
 7a4:	00180266 	andseq	r0, r8, r6, ror #4
 7a8:	02b50101 	adcseq	r0, r5, #1073741824	; 0x40000000
 7ac:	00030000 	andeq	r0, r3, r0
 7b0:	0000006e 	andeq	r0, r0, lr, rrx
 7b4:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
 7b8:	0101000d 	tsteq	r1, sp
 7bc:	00000101 	andeq	r0, r0, r1, lsl #2
 7c0:	00000100 	andeq	r0, r0, r0, lsl #2
 7c4:	2f3a5a01 	svccs	0x003a5a01
 7c8:	2f706f6d 	svccs	0x00706f6d
 7cc:	2d504f4d 	ldclcs	15, cr4, [r0, #-308]	; 0xfffffecc
 7d0:	6c657053 	stclvs	0, cr7, [r5], #-332	; 0xfffffeb4
 7d4:	2f293128 	svccs	0x00293128
 7d8:	2d504f4d 	ldclcs	15, cr4, [r0, #-308]	; 0xfffffecc
 7dc:	6c657053 	stclvs	0, cr7, [r5], #-332	; 0xfffffeb4
 7e0:	616e532f 	cmnvs	lr, pc, lsr #6
 7e4:	0000656b 	andeq	r6, r0, fp, ror #10
 7e8:	70617267 	rsbvc	r7, r1, r7, ror #4
 7ec:	64636968 	strbtvs	r6, [r3], #-2408	; 0xfffff698
 7f0:	6c707369 	ldclvs	3, cr7, [r0], #-420	; 0xfffffe5c
 7f4:	632e7961 			; <UNDEFINED> instruction: 0x632e7961
 7f8:	00000100 	andeq	r0, r0, r0, lsl #2
 7fc:	72672f2e 	rsbvc	r2, r7, #46, 30	; 0xb8
 800:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 804:	73696463 	cmnvc	r9, #1660944384	; 0x63000000
 808:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 80c:	0000682e 	andeq	r6, r0, lr, lsr #16
 810:	2f2e0000 	svccs	0x002e0000
 814:	69666564 	stmdbvs	r6!, {r2, r5, r6, r8, sl, sp, lr}^
 818:	2e73656e 	cdpcs	5, 7, cr6, cr3, cr14, {3}
 81c:	00000068 	andeq	r0, r0, r8, rrx
 820:	18050000 	stmdane	r5, {}	; <UNPREDICTABLE>
 824:	48020500 	stmdami	r2, {r8, sl}
 828:	1720000a 	strne	r0, [r0, -sl]!
 82c:	3d2f0505 	cfstr32cc	mvfx0, [pc, #-20]!	; 820 <startup-0x1ffff7e0>
 830:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
 834:	4b4b4b3d 	blmi	12d3530 <startup-0x1ed2cad0>
 838:	01054b4b 	tsteq	r5, fp, asr #22
 83c:	3e27053d 	mcrcc	5, 1, r0, cr7, cr13, {1}
 840:	056a0805 	strbeq	r0, [sl, #-2053]!	; 0xfffff7fb
 844:	bb4b2007 	bllt	12c8868 <startup-0x1ed37798>
 848:	05750505 	ldrbeq	r0, [r5, #-1285]!	; 0xfffffafb
 84c:	01052014 	tsteq	r5, r4, lsl r0
 850:	6825053e 	stmdavs	r5!, {r1, r2, r3, r4, r5, r8, sl}
 854:	056a0805 	strbeq	r0, [sl, #-2053]!	; 0xfffff7fb
 858:	754b2007 	strbvc	r2, [fp, #-7]
 85c:	05670505 	strbeq	r0, [r7, #-1285]!	; 0xfffffafb
 860:	01052014 	tsteq	r5, r4, lsl r0
 864:	682b053d 	stmdavs	fp!, {r0, r2, r3, r4, r5, r8, sl}
 868:	05670505 	strbeq	r0, [r7, #-1285]!	; 0xfffffafb
 86c:	ba130301 	blt	4c1478 <startup-0x1fb3eb88>
 870:	6f030d05 	svcvs	0x00030d05
 874:	3d233d20 	stccc	13, cr3, [r3, #-128]!	; 0xffffff80
 878:	3d3d233d 	ldccc	3, cr2, [sp, #-244]!	; 0xffffff0c
 87c:	01053d23 	tsteq	r5, r3, lsr #26
 880:	4c1e0522 	cfldr32mi	mvfx0, [lr], {34}	; 0x22
 884:	3d2f0505 	cfstr32cc	mvfx0, [pc, #-20]!	; 878 <startup-0x1ffff788>
 888:	05201305 	streq	r1, [r0, #-773]!	; 0xfffffcfb
 88c:	3d3d2f05 	ldccc	15, cr2, [sp, #-20]!	; 0xffffffec
 890:	02000905 	andeq	r0, r0, #81920	; 0x14000
 894:	00300104 	eorseq	r0, r0, r4, lsl #2
 898:	3d010402 	cfstrscc	mvf0, [r1, #-8]
 89c:	01040200 	mrseq	r0, R12_usr
 8a0:	0402002f 	streq	r0, [r2], #-47	; 0xffffffd1
 8a4:	02003d01 	andeq	r3, r0, #1, 26	; 0x40
 8a8:	052b0104 	streq	r0, [fp, #-260]!	; 0xfffffefc
 8ac:	580b0335 	stmdapl	fp, {r0, r2, r4, r5, r8, r9}
 8b0:	3d670505 	cfstr64cc	mvdx0, [r7, #-20]!	; 0xffffffec
 8b4:	05201305 	streq	r1, [r0, #-773]!	; 0xfffffcfb
 8b8:	593d2f05 	ldmdbpl	sp!, {r0, r2, r8, r9, sl, fp, sp}
 8bc:	1c053d2f 	stcne	13, cr3, [r5], {47}	; 0x2f
 8c0:	2013052f 	andscs	r0, r3, pc, lsr #10
 8c4:	3d4b0505 	cfstr64cc	mvdx0, [fp, #-20]	; 0xffffffec
 8c8:	05201305 	streq	r1, [r0, #-773]!	; 0xfffffcfb
 8cc:	08053014 	stmdaeq	r5, {r2, r4, ip, sp}
 8d0:	2109054a 	tstcs	r9, sl, asr #10
 8d4:	053f1405 	ldreq	r1, [pc, #-1029]!	; 4d7 <startup-0x1ffffb29>
 8d8:	09054a08 	stmdbeq	r5, {r3, r9, fp, lr}
 8dc:	3f0c0521 	svccc	0x000c0521
 8e0:	053d0105 	ldreq	r0, [sp, #-261]!	; 0xfffffefb
 8e4:	0c05ca2e 			; <UNDEFINED> instruction: 0x0c05ca2e
 8e8:	01055967 	tsteq	r5, r7, ror #18
 8ec:	4c360567 	cfldr32mi	mvfx0, [r6], #-412	; 0xfffffe64
 8f0:	05910505 	ldreq	r0, [r1, #1285]	; 0x505
 8f4:	05052016 	streq	r2, [r5, #-22]	; 0xffffffea
 8f8:	3d2f593d 			; <UNDEFINED> instruction: 0x3d2f593d
 8fc:	3e13052f 	cfmul64cc	mvdx0, mvdx3, mvdx15
 900:	054a0705 	strbeq	r0, [sl, #-1797]	; 0xfffff8fb
 904:	13052109 	movwne	r2, #20745	; 0x5109
 908:	4a07053f 	bmi	1c1e0c <startup-0x1fe3e1f4>
 90c:	05210905 	streq	r0, [r1, #-2309]!	; 0xfffff6fb
 910:	16054105 	strne	r4, [r5], -r5, lsl #2
 914:	2f050520 	svccs	0x00050520
 918:	3e01053d 	mcrcc	5, 0, r0, cr1, cr13, {1}
 91c:	05683c05 	strbeq	r3, [r8, #-3077]!	; 0xfffff3fb
 920:	593d9105 	ldmdbpl	sp!, {r0, r2, r8, ip, pc}
 924:	01053d3d 	tsteq	r5, sp, lsr sp
 928:	4c3a0583 	cfldr32mi	mvfx0, [sl], #-524	; 0xfffffdf4
 92c:	3d910505 	cfldr32cc	mvfx0, [r1, #20]
 930:	053d3d59 	ldreq	r3, [sp, #-3417]!	; 0xfffff2a7
 934:	20058301 	andcs	r8, r5, r1, lsl #6
 938:	3d0e054c 	cfstr32cc	mvfx0, [lr, #-304]	; 0xfffffed0
 93c:	052e0505 	streq	r0, [lr, #-1285]!	; 0xfffffafb
 940:	0905212c 	stmdbeq	r5, {r2, r3, r5, r8, sp}
 944:	12055966 	andne	r5, r5, #1671168	; 0x198000
 948:	2e09054b 	cfsh32cs	mvfx0, mvfx9, #43
 94c:	02000d05 	andeq	r0, r0, #320	; 0x140
 950:	05210304 	streq	r0, [r1, #-772]!	; 0xfffffcfc
 954:	04020028 	streq	r0, [r2], #-40	; 0xffffffd8
 958:	09054903 	stmdbeq	r5, {r0, r1, r8, fp, lr}
 95c:	01040200 	mrseq	r0, R12_usr
 960:	0026053c 	eoreq	r0, r6, ip, lsr r5
 964:	39020402 	stmdbcc	r2, {r1, sl}
 968:	02000505 	andeq	r0, r0, #20971520	; 0x1400000
 96c:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 970:	18054301 	stmdane	r5, {r0, r8, r9, lr}
 974:	3e0c055a 	cfrshl32cc	mvfx12, mvfx10, r0
 978:	052e0505 	streq	r0, [lr, #-1285]!	; 0xfffffafb
 97c:	04020017 	streq	r0, [r2], #-23	; 0xffffffe9
 980:	1c052103 	stfnes	f2, [r5], {3}
 984:	03040200 	movweq	r0, #16896	; 0x4200
 988:	00050557 	andeq	r0, r5, r7, asr r5
 98c:	3c010402 	cfstrscc	mvf0, [r1], {2}
 990:	055a0105 	ldrbeq	r0, [sl, #-261]	; 0xfffffefb
 994:	09058423 	stmdbeq	r5, {r0, r1, r5, sl, pc}
 998:	2f08055a 	svccs	0x0008055a
 99c:	02001105 	andeq	r1, r0, #1073741825	; 0x40000001
 9a0:	053c0204 	ldreq	r0, [ip, #-516]!	; 0xfffffdfc
 9a4:	04020019 	streq	r0, [r2], #-25	; 0xffffffe7
 9a8:	22053c04 	andcs	r3, r5, #4, 24	; 0x400
 9ac:	06040200 	streq	r0, [r4], -r0, lsl #4
 9b0:	3e14053c 	mrccc	5, 0, r0, cr4, cr12, {1}
 9b4:	052e1705 	streq	r1, [lr, #-1797]!	; 0xfffff8fb
 9b8:	0a052e0e 	beq	14c1f8 <startup-0x1feb3e08>
 9bc:	3e07052e 	cfsh32cc	mvfx0, mvfx7, #30
 9c0:	053d0b05 	ldreq	r0, [sp, #-2821]!	; 0xfffff4fb
 9c4:	15053d0f 	strne	r3, [r5, #-3343]	; 0xfffff2f1
 9c8:	2e18053f 	mrccs	5, 0, r0, cr8, cr15, {1}
 9cc:	05201b05 	streq	r1, [r0, #-2821]!	; 0xfffff4fb
 9d0:	0b052010 	bleq	148a18 <startup-0x1feb75e8>
 9d4:	3e17052e 	cfmul64cc	mvdx0, mvdx7, mvdx14
 9d8:	75032c05 	strvc	r2, [r3, #-3077]	; 0xfffff3fb
 9dc:	030105d6 	movweq	r0, #5590	; 0x15d6
 9e0:	1f05200c 	svcne	0x0005200c
 9e4:	3e12055a 	mrccc	5, 0, r0, cr2, cr10, {2}
 9e8:	05300c05 	ldreq	r0, [r0, #-3077]!	; 0xfffff3fb
 9ec:	14054a05 	strne	r4, [r5], #-2565	; 0xfffff5fb
 9f0:	04020021 	streq	r0, [r2], #-33	; 0xffffffdf
 9f4:	00580601 	subseq	r0, r8, r1, lsl #12
 9f8:	2e020402 	cdpcs	4, 0, cr0, cr2, cr2, {0}
 9fc:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
 a00:	00100520 	andseq	r0, r0, r0, lsr #10
 a04:	06040402 	streq	r0, [r4], -r2, lsl #8
 a08:	0009052f 	andeq	r0, r9, pc, lsr #10
 a0c:	4a040402 	bmi	101a1c <startup-0x1fefe5e4>
 a10:	c9210d05 	stmdbgt	r1!, {r0, r2, r8, sl, fp}
 a14:	05671305 	strbeq	r1, [r7, #-773]!	; 0xfffffcfb
 a18:	2e054a0d 	vmlacs.f32	s8, s10, s26
 a1c:	03040200 	movweq	r0, #16896	; 0x4200
 a20:	00110521 	andseq	r0, r1, r1, lsr #10
 a24:	4a030402 	bmi	c1a34 <startup-0x1ff3e5cc>
 a28:	02002205 	andeq	r2, r0, #1342177280	; 0x50000000
 a2c:	05730304 	ldrbeq	r0, [r3, #-772]!	; 0xfffffcfc
 a30:	04020027 	streq	r0, [r2], #-39	; 0xffffffd9
 a34:	0d056603 	stceq	6, cr6, [r5, #-12]
 a38:	01040200 	mrseq	r0, R12_usr
 a3c:	001d053c 	andseq	r0, sp, ip, lsr r5
 a40:	55020402 	strpl	r0, [r2, #-1026]	; 0xfffffbfe
 a44:	02000905 	andeq	r0, r0, #81920	; 0x14000
 a48:	05660104 	strbeq	r0, [r6, #-260]!	; 0xfffffefc
 a4c:	04020019 	streq	r0, [r2], #-25	; 0xffffffe7
 a50:	05055602 	streq	r5, [r5, #-1538]	; 0xfffff9fe
 a54:	01040200 	mrseq	r0, R12_usr
 a58:	03010566 	movweq	r0, #5478	; 0x1566
 a5c:	0802580a 	stmdaeq	r2, {r1, r3, fp, ip, lr}
 a60:	9b010100 	blls	40e68 <startup-0x1ffbf198>
 a64:	03000001 	movweq	r0, #1
 a68:	00010200 	andeq	r0, r1, r0, lsl #4
 a6c:	fb010200 	blx	41276 <startup-0x1ffbed8a>
 a70:	01000d0e 	tsteq	r0, lr, lsl #26
 a74:	00010101 	andeq	r0, r1, r1, lsl #2
 a78:	00010000 	andeq	r0, r1, r0
 a7c:	3a5a0100 	bcc	1680e84 <startup-0x1e97f17c>
 a80:	706f6d2f 	rsbvc	r6, pc, pc, lsr #26
 a84:	504f4d2f 	subpl	r4, pc, pc, lsr #26
 a88:	6570532d 	ldrbvs	r5, [r0, #-813]!	; 0xfffffcd3
 a8c:	2931286c 	ldmdbcs	r1!, {r2, r3, r5, r6, fp, sp}
 a90:	504f4d2f 	subpl	r4, pc, pc, lsr #26
 a94:	6570532d 	ldrbvs	r5, [r0, #-813]!	; 0xfffffcd3
 a98:	6e532f6c 	cdpvs	15, 5, cr2, cr3, cr12, {3}
 a9c:	00656b61 	rsbeq	r6, r5, r1, ror #22
 aa0:	635c3a63 	cmpvs	ip, #405504	; 0x63000
 aa4:	70616573 	rsbvc	r6, r1, r3, ror r5
 aa8:	6f635c70 	svcvs	0x00635c70
 aac:	696c6564 	stmdbvs	ip!, {r2, r5, r6, r8, sl, sp, lr}^
 ab0:	745c6574 	ldrbvc	r6, [ip], #-1396	; 0xfffffa8c
 ab4:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
 ab8:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
 abc:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
 ac0:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
 ac4:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
 ac8:	61652d65 	cmnvs	r5, r5, ror #26
 acc:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
 ad0:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
 ad4:	735c6564 	cmpvc	ip, #100, 10	; 0x19000000
 ad8:	63007379 	movwvs	r7, #889	; 0x379
 adc:	73635c3a 	cmnvc	r3, #14848	; 0x3a00
 ae0:	70706165 	rsbsvc	r6, r0, r5, ror #2
 ae4:	646f635c 	strbtvs	r6, [pc], #-860	; aec <startup-0x1ffff514>
 ae8:	74696c65 	strbtvc	r6, [r9], #-3173	; 0xfffff39b
 aec:	6f745c65 	svcvs	0x00745c65
 af0:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
 af4:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
 af8:	5c6d7261 	sfmpl	f7, 2, [sp], #-388	; 0xfffffe7c
 afc:	5c62696c 			; <UNDEFINED> instruction: 0x5c62696c
 b00:	5c636367 	stclpl	3, cr6, [r3], #-412	; 0xfffffe64
 b04:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
 b08:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
 b0c:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
 b10:	2e395c69 	cdpcs	12, 3, cr5, cr9, cr9, {3}
 b14:	5c312e32 	ldcpl	14, cr2, [r1], #-200	; 0xffffff38
 b18:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
 b1c:	00656475 	rsbeq	r6, r5, r5, ror r4
 b20:	65757100 	ldrbvs	r7, [r5, #-256]!	; 0xffffff00
 b24:	632e6575 			; <UNDEFINED> instruction: 0x632e6575
 b28:	00000100 	andeq	r0, r0, r0, lsl #2
 b2c:	6b636f6c 	blvs	18dc8e4 <startup-0x1e72371c>
 b30:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
 b34:	745f0000 	ldrbvc	r0, [pc], #-0	; b3c <startup-0x1ffff4c4>
 b38:	73657079 	cmnvc	r5, #121	; 0x79
 b3c:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
 b40:	74730000 	ldrbtvc	r0, [r3], #-0
 b44:	66656464 	strbtvs	r6, [r5], -r4, ror #8
 b48:	0300682e 	movweq	r6, #2094	; 0x82e
 b4c:	65720000 	ldrbvs	r0, [r2, #-0]!
 b50:	2e746e65 	cdpcs	14, 7, cr6, cr4, cr5, {3}
 b54:	00020068 	andeq	r0, r2, r8, rrx
 b58:	6f656700 	svcvs	0x00656700
 b5c:	7274656d 	rsbsvc	r6, r4, #457179136	; 0x1b400000
 b60:	626f6369 	rsbvs	r6, pc, #-1543503871	; 0xa4000001
 b64:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 b68:	0100682e 	tsteq	r0, lr, lsr #16
 b6c:	05000000 	streq	r0, [r0, #-0]
 b70:	02050012 	andeq	r0, r5, #18
 b74:	20000f6c 	andcs	r0, r0, ip, ror #30
 b78:	05010903 	streq	r0, [r1, #-2307]	; 0xfffff6fd
 b7c:	05053d0d 	streq	r3, [r5, #-3341]	; 0xfffff2f3
 b80:	0015052e 	andseq	r0, r5, lr, lsr #10
 b84:	21030402 	tstcs	r3, r2, lsl #8
 b88:	02001e05 	andeq	r1, r0, #5, 28	; 0x50
 b8c:	05570304 	ldrbeq	r0, [r7, #-772]	; 0xfffffcfc
 b90:	04020005 	streq	r0, [r2], #-5
 b94:	01053c01 	tsteq	r5, r1, lsl #24
 b98:	7710053e 			; <UNDEFINED> instruction: 0x7710053e
 b9c:	052f1305 	streq	r1, [pc, #-773]!	; 89f <startup-0x1ffff761>
 ba0:	10055901 	andne	r5, r5, r1, lsl #18
 ba4:	2f150577 	svccs	0x00150577
 ba8:	05590105 	ldrbeq	r0, [r9, #-261]	; 0xfffffefb
 bac:	15055b0f 	strne	r5, [r5, #-2831]	; 0xfffff4f1
 bb0:	6701052f 	strvs	r0, [r1, -pc, lsr #10]
 bb4:	05690c05 	strbeq	r0, [r9, #-3077]!	; 0xfffff3fb
 bb8:	01052f0b 	tsteq	r5, fp, lsl #30
 bbc:	691b052f 	ldmdbvs	fp, {r0, r1, r2, r3, r5, r8, sl}
 bc0:	054c0805 	strbeq	r0, [ip, #-2053]	; 0xfffff7fb
 bc4:	06054a07 	streq	r4, [r5], -r7, lsl #20
 bc8:	300f053c 	andcc	r0, pc, ip, lsr r5	; <UNPREDICTABLE>
 bcc:	052e0905 	streq	r0, [lr, #-2309]!	; 0xfffff6fb
 bd0:	10052f0f 	andne	r2, r5, pc, lsl #30
 bd4:	3c18054c 	cfldr32cc	mvfx0, [r8], {76}	; 0x4c
 bd8:	052e1005 	streq	r1, [lr, #-5]!
 bdc:	10052e18 	andne	r2, r5, r8, lsl lr
 be0:	5a01054b 	bpl	42114 <startup-0x1ffbdeec>
 be4:	05ae0e05 	streq	r0, [lr, #3589]!	; 0xe05
 be8:	0c053d21 	stceq	13, cr3, [r5], {33}	; 0x21
 bec:	4c0d0558 	cfstr32mi	mvfx0, [sp], {88}	; 0x58
 bf0:	052e0605 	streq	r0, [lr, #-1541]!	; 0xfffff9fb
 bf4:	053f2f0d 	ldreq	r2, [pc, #-3853]!	; fffffcef <rear+0xdfffc2d3>
 bf8:	0105590b 	tsteq	r5, fp, lsl #18
 bfc:	000b0221 	andeq	r0, fp, r1, lsr #4
 c00:	01bc0101 			; <UNDEFINED> instruction: 0x01bc0101
 c04:	00030000 	andeq	r0, r3, r0
 c08:	00000047 	andeq	r0, r0, r7, asr #32
 c0c:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
 c10:	0101000d 	tsteq	r1, sp
 c14:	00000101 	andeq	r0, r0, r1, lsl #2
 c18:	00000100 	andeq	r0, r0, r0, lsl #2
 c1c:	2f3a5a01 	svccs	0x003a5a01
 c20:	2f706f6d 	svccs	0x00706f6d
 c24:	2d504f4d 	ldclcs	15, cr4, [r0, #-308]	; 0xfffffecc
 c28:	6c657053 	stclvs	0, cr7, [r5], #-332	; 0xfffffeb4
 c2c:	2f293128 	svccs	0x00293128
 c30:	2d504f4d 	ldclcs	15, cr4, [r0, #-308]	; 0xfffffecc
 c34:	6c657053 	stclvs	0, cr7, [r5], #-332	; 0xfffffeb4
 c38:	616e532f 	cmnvs	lr, pc, lsr #6
 c3c:	0000656b 	andeq	r6, r0, fp, ror #10
 c40:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 c44:	73696469 	cmnvc	r9, #1761607680	; 0x69000000
 c48:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 c4c:	0100632e 	tsteq	r0, lr, lsr #6
 c50:	05000000 	streq	r0, [r0, #-0]
 c54:	02050016 	andeq	r0, r5, #22
 c58:	200010a8 	andcs	r1, r0, r8, lsr #1
 c5c:	30050516 	andcc	r0, r5, r6, lsl r5
 c60:	05313131 	ldreq	r3, [r1, #-305]!	; 0xfffffecf
 c64:	29052f01 	stmdbcs	r5, {r0, r8, r9, sl, fp, sp}
 c68:	6715053f 			; <UNDEFINED> instruction: 0x6715053f
 c6c:	05bb0105 	ldreq	r0, [fp, #261]!	; 0x105
 c70:	1505772b 	strne	r7, [r5, #-1835]	; 0xfffff8d5
 c74:	4a230567 	bmi	8c2218 <startup-0x1f73dde8>
 c78:	05821505 	streq	r1, [r2, #1285]	; 0x505
 c7c:	2c055a01 			; <UNDEFINED> instruction: 0x2c055a01
 c80:	67050576 	smlsdxvs	r5, r6, r5, r0
 c84:	01053d3d 	tsteq	r5, sp, lsr sp
 c88:	4c2a0559 	cfstr32mi	mvfx0, [sl], #-356	; 0xfffffe9c
 c8c:	3d670505 	cfstr64cc	mvdx0, [r7, #-20]!	; 0xffffffec
 c90:	5901053d 	stmdbpl	r1, {r0, r2, r3, r4, r5, r8, sl}
 c94:	054c3005 	strbeq	r3, [ip, #-5]
 c98:	053d6705 	ldreq	r6, [sp, #-1797]!	; 0xfffff8fb
 c9c:	05052016 	streq	r2, [r5, #-22]	; 0xffffffea
 ca0:	01052f3d 	tsteq	r5, sp, lsr pc
 ca4:	682a053d 	stmdavs	sl!, {r0, r2, r3, r4, r5, r8, sl}
 ca8:	3d3d0505 	cfldr32cc	mvfx0, [sp, #-20]!	; 0xffffffec
 cac:	2f13052f 	svccs	0x0013052f
 cb0:	05200a05 	streq	r0, [r0, #-2565]!	; 0xfffff5fb
 cb4:	0c053d05 	stceq	13, cr3, [r5], {5}
 cb8:	2f01053d 	svccs	0x0001053d
 cbc:	05762605 	ldrbeq	r2, [r6, #-1541]!	; 0xfffff9fb
 cc0:	1a053d05 	bne	1500dc <startup-0x1feaff24>
 cc4:	2f050520 	svccs	0x00050520
 cc8:	3d14053d 	cfldr32cc	mvfx0, [r4, #-244]	; 0xffffff0c
 ccc:	05590505 	ldrbeq	r0, [r9, #-1285]	; 0xfffffafb
 cd0:	0c05201a 	stceq	0, cr2, [r5], {26}
 cd4:	2f01052f 	svccs	0x0001052f
 cd8:	05842405 	streq	r2, [r4, #1029]	; 0x405
 cdc:	1a053d05 	bne	1500f8 <startup-0x1feaff08>
 ce0:	2f050520 	svccs	0x00050520
 ce4:	3d14053d 	cfldr32cc	mvfx0, [r4, #-244]	; 0xffffff0c
 ce8:	05590505 	ldrbeq	r0, [r9, #-1285]	; 0xfffffafb
 cec:	0c05201a 	stceq	0, cr2, [r5], {26}
 cf0:	2f01052f 	svccs	0x0001052f
 cf4:	05841505 	streq	r1, [r4, #1285]	; 0x505
 cf8:	0c052f0a 	stceq	15, cr2, [r5], {10}
 cfc:	01040200 	mrseq	r0, R12_usr
 d00:	00200520 	eoreq	r0, r0, r0, lsr #10
 d04:	3c010402 	cfstrscc	mvf0, [r1], {2}
 d08:	02000a05 	andeq	r0, r0, #20480	; 0x5000
 d0c:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 d10:	3d3d2f05 	ldccc	15, cr2, [sp, #-20]!	; 0xffffffec
 d14:	053d0105 	ldreq	r0, [sp, #-261]!	; 0xfffffefb
 d18:	0a053e13 	beq	15056c <startup-0x1feafa94>
 d1c:	000c052f 	andeq	r0, ip, pc, lsr #10
 d20:	20010402 	andcs	r0, r1, r2, lsl #8
 d24:	02002005 	andeq	r2, r0, #5
 d28:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 d2c:	0402000a 	streq	r0, [r2], #-10
 d30:	05053c01 	streq	r3, [r5, #-3073]	; 0xfffff3ff
 d34:	053d3d2f 	ldreq	r3, [sp, #-3375]!	; 0xfffff2d1
 d38:	17053d01 	strne	r3, [r5, -r1, lsl #26]
 d3c:	2f0a053e 	svccs	0x000a053e
 d40:	02000c05 	andeq	r0, r0, #1280	; 0x500
 d44:	05200104 	streq	r0, [r0, #-260]!	; 0xfffffefc
 d48:	04020020 	streq	r0, [r2], #-32	; 0xffffffe0
 d4c:	0a053c01 	beq	14fd58 <startup-0x1feb02a8>
 d50:	01040200 	mrseq	r0, R12_usr
 d54:	2f05053c 	svccs	0x0005053c
 d58:	01053d3d 	tsteq	r5, sp, lsr sp
 d5c:	3e16053d 	mrccc	5, 0, r0, cr6, cr13, {1}
 d60:	052f0a05 	streq	r0, [pc, #-2565]!	; 363 <startup-0x1ffffc9d>
 d64:	0402000c 	streq	r0, [r2], #-12
 d68:	20052001 	andcs	r2, r5, r1
 d6c:	01040200 	mrseq	r0, R12_usr
 d70:	000a053c 	andeq	r0, sl, ip, lsr r5
 d74:	3c010402 	cfstrscc	mvf0, [r1], {2}
 d78:	3d2f0505 	cfstr32cc	mvfx0, [pc, #-20]!	; d6c <startup-0x1ffff294>
 d7c:	3d01053d 	cfstr32cc	mvfx0, [r1, #-244]	; 0xffffff0c
 d80:	053e2705 	ldreq	r2, [lr, #-1797]!	; 0xfffff8fb
 d84:	593d6805 	ldmdbpl	sp!, {r0, r2, fp, sp, lr}
 d88:	053d0105 	ldreq	r0, [sp, #-261]!	; 0xfffffefb
 d8c:	07054c20 	streq	r4, [r5, -r0, lsr #24]
 d90:	3d18055a 	cfldr32cc	mvfx0, [r8, #-360]	; 0xfffffe98
 d94:	052e1105 	streq	r1, [lr, #-261]!	; 0xfffffefb
 d98:	11055913 	tstne	r5, r3, lsl r9
 d9c:	4c05052e 	cfstr32mi	mvfx0, [r5], {46}	; 0x2e
 da0:	3d01059f 	cfstr32cc	mvfx0, [r1, #-636]	; 0xfffffd84
 da4:	4b09054d 	blmi	2422e0 <startup-0x1fdbdd20>
 da8:	052f0b05 	streq	r0, [pc, #-2821]!	; 2ab <startup-0x1ffffd55>
 dac:	0905211e 	stmdbeq	r5, {r1, r2, r3, r4, r8, sp}
 db0:	4b0a053c 	blmi	2822a8 <startup-0x1fd7dd58>
 db4:	053a1005 	ldreq	r1, [sl, #-5]!
 db8:	01054a0b 	tsteq	r5, fp, lsl #20
 dbc:	00050232 	andeq	r0, r5, r2, lsr r2
 dc0:	00bf0101 	adcseq	r0, pc, r1, lsl #2
 dc4:	00030000 	andeq	r0, r3, r0
 dc8:	00000040 	andeq	r0, r0, r0, asr #32
 dcc:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
 dd0:	0101000d 	tsteq	r1, sp
 dd4:	00000101 	andeq	r0, r0, r1, lsl #2
 dd8:	00000100 	andeq	r0, r0, r0, lsl #2
 ddc:	2f3a5a01 	svccs	0x003a5a01
 de0:	2f706f6d 	svccs	0x00706f6d
 de4:	2d504f4d 	ldclcs	15, cr4, [r0, #-308]	; 0xfffffecc
 de8:	6c657053 	stclvs	0, cr7, [r5], #-332	; 0xfffffeb4
 dec:	2f293128 	svccs	0x00293128
 df0:	2d504f4d 	ldclcs	15, cr4, [r0, #-308]	; 0xfffffecc
 df4:	6c657053 	stclvs	0, cr7, [r5], #-332	; 0xfffffeb4
 df8:	616e532f 	cmnvs	lr, pc, lsr #6
 dfc:	0000656b 	andeq	r6, r0, fp, ror #10
 e00:	616c6564 	cmnvs	ip, r4, ror #10
 e04:	00632e79 	rsbeq	r2, r3, r9, ror lr
 e08:	00000001 	andeq	r0, r0, r1
 e0c:	05001905 	streq	r1, [r0, #-2309]	; 0xfffff6fb
 e10:	0013c802 	andseq	ip, r3, r2, lsl #16
 e14:	05051620 	streq	r1, [r5, #-1568]	; 0xfffff9e0
 e18:	200f0533 	andcs	r0, pc, r3, lsr r5	; <UNPREDICTABLE>
 e1c:	052f0505 	streq	r0, [pc, #-1285]!	; 91f <startup-0x1ffff6e1>
 e20:	0505200f 	streq	r2, [r5, #-15]
 e24:	200e052f 	andcs	r0, lr, pc, lsr #10
 e28:	052f0505 	streq	r0, [pc, #-1285]!	; 92b <startup-0x1ffff6d5>
 e2c:	0a05200f 	beq	148e70 <startup-0x1feb7190>
 e30:	000d052f 	andeq	r0, sp, pc, lsr #10
 e34:	20010402 	andcs	r0, r1, r2, lsl #8
 e38:	02001705 	andeq	r1, r0, #1310720	; 0x140000
 e3c:	052e0104 	streq	r0, [lr, #-260]!	; 0xfffffefc
 e40:	0402000a 	streq	r0, [r2], #-10
 e44:	05053c01 	streq	r3, [r5, #-3073]	; 0xfffff3ff
 e48:	200f0521 	andcs	r0, pc, r1, lsr #10
 e4c:	052f0105 	streq	r0, [pc, #-261]!	; d4f <startup-0x1ffff2b1>
 e50:	0505a017 	streq	sl, [r5, #-23]	; 0xffffffe9
 e54:	01052f32 	tsteq	r5, r2, lsr pc
 e58:	3e22052f 	cfsh64cc	mvdx0, mvdx2, #31
 e5c:	054e0a05 	strbeq	r0, [lr, #-2565]	; 0xfffff5fb
 e60:	2f2f2109 	svccs	0x002f2109
 e64:	2a0d052f 	bcs	342328 <startup-0x1fcbdcd8>
 e68:	053c0a05 	ldreq	r0, [ip, #-2565]!	; 0xfffff5fb
 e6c:	22053401 	andcs	r3, r5, #16777216	; 0x1000000
 e70:	500a055a 	andpl	r0, sl, sl, asr r5
 e74:	05210905 	streq	r0, [r1, #-2309]!	; 0xfffff6fb
 e78:	0a05570d 	beq	156ab4 <startup-0x1fea954c>
 e7c:	3101053c 	tstcc	r1, ip, lsr r5
 e80:	01000502 	tsteq	r0, r2, lsl #10
 e84:	0000d201 	andeq	sp, r0, r1, lsl #4
 e88:	3f000300 	svccc	0x00000300
 e8c:	02000000 	andeq	r0, r0, #0
 e90:	0d0efb01 	vstreq	d15, [lr, #-4]
 e94:	01010100 	mrseq	r0, (UNDEF: 17)
 e98:	00000001 	andeq	r0, r0, r1
 e9c:	01000001 	tsteq	r0, r1
 ea0:	6d2f3a5a 	vstmdbvs	pc!, {s6-s95}
 ea4:	4d2f706f 	stcmi	0, cr7, [pc, #-444]!	; cf0 <startup-0x1ffff310>
 ea8:	532d504f 			; <UNDEFINED> instruction: 0x532d504f
 eac:	286c6570 	stmdacs	ip!, {r4, r5, r6, r8, sl, sp, lr}^
 eb0:	4d2f2931 			; <UNDEFINED> instruction: 0x4d2f2931
 eb4:	532d504f 			; <UNDEFINED> instruction: 0x532d504f
 eb8:	2f6c6570 	svccs	0x006c6570
 ebc:	6b616e53 	blvs	185c810 <startup-0x1e7a37f0>
 ec0:	6b000065 	blvs	105c <startup-0x1fffefa4>
 ec4:	2e627965 	vnmulcs.f16	s15, s4, s11	; <UNPREDICTABLE>
 ec8:	00010063 	andeq	r0, r1, r3, rrx
 ecc:	19050000 	stmdbne	r5, {}	; <UNPREDICTABLE>
 ed0:	74020500 	strvc	r0, [r2], #-1280	; 0xfffffb00
 ed4:	15200014 	strne	r0, [r0, #-20]!	; 0xffffffec
 ed8:	054b1f05 	strbeq	r1, [fp, #-3845]	; 0xfffff0fb
 edc:	05052e1a 	streq	r2, [r5, #-3610]	; 0xfffff1e6
 ee0:	2016052e 	andscs	r0, r6, lr, lsr #10
 ee4:	052f0105 	streq	r0, [pc, #-261]!	; de7 <startup-0x1ffff219>
 ee8:	12057613 	andne	r7, r5, #19922944	; 0x1300000
 eec:	200a053e 	andcs	r0, sl, lr, lsr r5
 ef0:	053d0b05 	ldreq	r0, [sp, #-2821]!	; 0xfffff4fb
 ef4:	0d052e05 	stceq	14, cr2, [r5, #-20]	; 0xffffffec
 ef8:	740c0521 	strvc	r0, [ip], #-1313	; 0xfffffadf
 efc:	05211405 	streq	r1, [r1, #-1029]!	; 0xfffffbfb
 f00:	04020017 	streq	r0, [r2], #-23	; 0xffffffe9
 f04:	05052c02 	streq	r2, [r5, #-3074]	; 0xfffff3fe
 f08:	01040200 	mrseq	r0, R12_usr
 f0c:	410c053c 	tstmi	ip, ip, lsr r5
 f10:	052f0105 	streq	r0, [pc, #-261]!	; e13 <startup-0x1ffff1ed>
 f14:	13056919 	movwne	r6, #22809	; 0x5919
 f18:	0e05753d 	mcreq	5, 0, r7, cr5, cr13, {1}
 f1c:	2e05056a 	cfsh32cs	mvfx0, mvfx5, #58
 f20:	05210905 	streq	r0, [r1, #-2309]!	; 0xfffff6fb
 f24:	0c054b13 			; <UNDEFINED> instruction: 0x0c054b13
 f28:	3d26054b 	cfstr32cc	mvfx0, [r6, #-300]!	; 0xfffffed4
 f2c:	052e2205 	streq	r2, [lr, #-517]!	; 0xfffffdfb
 f30:	1f052e1a 	svcne	0x00052e1a
 f34:	02040200 	andeq	r0, r4, #0, 4
 f38:	00050538 	andeq	r0, r5, r8, lsr r5
 f3c:	3c010402 	cfstrscc	mvf0, [r1], {2}
 f40:	05430c05 	strbeq	r0, [r3, #-3077]	; 0xfffff3fb
 f44:	04020001 	streq	r0, [r2], #-1
 f48:	1e052101 	adfnes	f2, f5, f1
 f4c:	68050584 	stmdavs	r5, {r2, r7, r8, sl}
 f50:	05201505 	streq	r1, [r0, #-1285]!	; 0xfffffafb
 f54:	06023e01 	streq	r3, [r2], -r1, lsl #28
 f58:	Address 0x00000f58 is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	6f73645f 	svcvs	0x0073645f
   4:	6e61685f 	mcrvs	8, 3, r6, cr1, cr15, {2}
   8:	00656c64 	rsbeq	r6, r5, r4, ror #24
   c:	7a69735f 	bvc	1a5cd90 <startup-0x1e5a3270>
  10:	47740065 	ldrbmi	r0, [r4, -r5, rrx]!
  14:	656d6f65 	strbvs	r6, [sp, #-3941]!	; 0xfffff09b
  18:	00797274 	rsbseq	r7, r9, r4, ror r2
  1c:	6e61725f 	mcrvs	2, 3, r7, cr1, cr15, {2}
  20:	00383464 	eorseq	r3, r8, r4, ror #8
  24:	656d655f 	strbvs	r6, [sp, #-1375]!	; 0xfffffaa1
  28:	6e656772 	mcrvs	7, 3, r6, cr5, cr2, {3}
  2c:	64007963 	strvs	r7, [r0], #-2403	; 0xfffff69d
  30:	00787269 	rsbseq	r7, r8, r9, ror #4
  34:	69755f5f 	ldmdbvs	r5!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
  38:	5f38746e 	svcpl	0x0038746e
  3c:	69640074 	stmdbvs	r4!, {r2, r4, r5, r6}^
  40:	63007972 	movwvs	r7, #2418	; 0x972
  44:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
  48:	6a626f5f 	bvs	189bdcc <startup-0x1e764234>
  4c:	00746365 	rsbseq	r6, r4, r5, ror #6
  50:	6e727574 	mrcvs	5, 3, r7, cr2, cr4, {3}
  54:	63775f00 	cmnvs	r7, #0, 30
  58:	6d6f7472 	cfstrdvs	mvd7, [pc, #-456]!	; fffffe98 <rear+0xdfffc47c>
  5c:	74735f62 	ldrbtvc	r5, [r3], #-3938	; 0xfffff09e
  60:	00657461 	rsbeq	r7, r5, r1, ror #8
  64:	7363775f 	cmnvc	r3, #24903680	; 0x17c0000
  68:	6d6f7472 	cfstrdvs	mvd7, [pc, #-456]!	; fffffea8 <rear+0xdfffc48c>
  6c:	735f7362 	cmpvc	pc, #-2013265919	; 0x88000001
  70:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
  74:	6e6f6c00 	cdpvs	12, 6, cr6, cr15, cr0, {0}
  78:	6f6c2067 	svcvs	0x006c2067
  7c:	7520676e 	strvc	r6, [r0, #-1902]!	; 0xfffff892
  80:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
  84:	2064656e 	rsbcs	r6, r4, lr, ror #10
  88:	00746e69 	rsbseq	r6, r4, r9, ror #28
  8c:	5f746573 	svcpl	0x00746573
  90:	65657073 	strbvs	r7, [r5, #-115]!	; 0xffffff8d
  94:	6c5f0064 	mrrcvs	0, 6, r0, pc, cr4	; <UNPREDICTABLE>
  98:	69736662 	ldmdbvs	r3!, {r1, r5, r6, r9, sl, sp, lr}^
  9c:	7200657a 	andvc	r6, r0, #511705088	; 0x1e800000
  a0:	5f646e61 	svcpl	0x00646e61
  a4:	5f5f0079 	svcpl	0x005f0079
  a8:	61636f6c 	cmnvs	r3, ip, ror #30
  ac:	745f656c 	ldrbvc	r6, [pc], #-1388	; b4 <startup-0x1fffff4c>
  b0:	64697700 	strbtvs	r7, [r9], #-1792	; 0xfffff900
  b4:	695f6874 	ldmdbvs	pc, {r2, r4, r5, r6, fp, sp, lr}^	; <UNPREDICTABLE>
  b8:	79625f6e 	stmdbvc	r2!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
  bc:	00736574 	rsbseq	r6, r3, r4, ror r5
  c0:	646f6f66 	strbtvs	r6, [pc], #-3942	; c8 <startup-0x1fffff38>
  c4:	6f65675f 	svcvs	0x0065675f
  c8:	7274656d 	rsbsvc	r6, r4, #457179136	; 0x1b400000
  cc:	656e0079 	strbvs	r0, [lr, #-121]!	; 0xffffff87
  d0:	785f7478 	ldmdavc	pc, {r3, r4, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
  d4:	626d5f00 	rsbvs	r5, sp, #0, 30
  d8:	776f7472 			; <UNDEFINED> instruction: 0x776f7472
  dc:	74735f63 	ldrbtvc	r5, [r3], #-3939	; 0xfffff09d
  e0:	00657461 	rsbeq	r7, r5, r1, ror #8
  e4:	6d745f5f 	ldclvs	15, cr5, [r4, #-380]!	; 0xfffffe84
  e8:	6365735f 	cmnvs	r5, #2080374785	; 0x7c000001
  ec:	77656e00 	strbvc	r6, [r5, -r0, lsl #28]!
  f0:	736f705f 	cmnvc	pc, #95	; 0x5f
  f4:	6f6f665f 	svcvs	0x006f665f
  f8:	6f6c0064 	svcvs	0x006c0064
  fc:	6c20676e 	stcvs	7, cr6, [r0], #-440	; 0xfffffe48
 100:	20676e6f 	rsbcs	r6, r7, pc, ror #28
 104:	00746e69 	rsbseq	r6, r4, r9, ror #28
 108:	6b616e73 	blvs	185badc <startup-0x1e7a4524>
 10c:	61655f65 	cmnvs	r5, r5, ror #30
 110:	6f665f74 	svcvs	0x00665f74
 114:	6e00646f 	cdpvs	4, 0, cr6, cr0, cr15, {3}
 118:	6f706d75 	svcvs	0x00706d75
 11c:	73746e69 	cmnvc	r4, #1680	; 0x690
 120:	62755f00 	rsbsvs	r5, r5, #0, 30
 124:	5f006675 	svcpl	0x00006675
 128:	65736162 	ldrbvs	r6, [r3, #-354]!	; 0xfffffe9e
 12c:	61656400 	cmnvs	r5, r0, lsl #8
 130:	5f5f0064 	svcpl	0x005f0064
 134:	685f6d74 	ldmdavs	pc, {r2, r4, r5, r6, r8, sl, fp, sp, lr}^	; <UNPREDICTABLE>
 138:	0072756f 	rsbseq	r7, r2, pc, ror #10
 13c:	6b616e73 	blvs	185bb10 <startup-0x1e7a44f0>
 140:	646f6265 	strbtvs	r6, [pc], #-613	; 148 <startup-0x1ffffeb8>
 144:	65675f79 	strbvs	r5, [r7, #-3961]!	; 0xfffff087
 148:	74656d6f 	strbtvc	r6, [r5], #-3439	; 0xfffff291
 14c:	5f007972 	svcpl	0x00007972
 150:	0066735f 	rsbeq	r7, r6, pc, asr r3
 154:	5f6e6f5f 	svcpl	0x006e6f5f
 158:	74697865 	strbtvc	r7, [r9], #-2149	; 0xfffff79b
 15c:	6772615f 			; <UNDEFINED> instruction: 0x6772615f
 160:	635f0073 	cmpvs	pc, #115	; 0x73
 164:	696b6f6f 	stmdbvs	fp!, {r0, r1, r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
 168:	5f5f0065 	svcpl	0x005f0065
 16c:	756c6773 	strbvc	r6, [ip, #-1907]!	; 0xfffff88d
 170:	656e0065 	strbvs	r0, [lr, #-101]!	; 0xffffff9b
 174:	795f7478 	ldmdbvc	pc, {r3, r4, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
 178:	766f6d00 	strbtvc	r6, [pc], -r0, lsl #26
 17c:	626f5f65 	rsbvs	r5, pc, #404	; 0x194
 180:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 184:	6c665f00 	stclvs	15, cr5, [r6], #-0
 188:	00736761 	rsbseq	r6, r3, r1, ror #14
 18c:	5f73695f 	svcpl	0x0073695f
 190:	00617863 	rsbeq	r7, r1, r3, ror #16
 194:	6474735f 	ldrbtvs	r7, [r4], #-863	; 0xfffffca1
 198:	73006e69 	movwvc	r6, #3689	; 0xe69
 19c:	656b616e 	strbvs	r6, [fp, #-366]!	; 0xfffffe92
 1a0:	64616568 	strbtvs	r6, [r1], #-1384	; 0xfffffa98
 1a4:	6f65675f 	svcvs	0x0065675f
 1a8:	7274656d 	rsbsvc	r6, r4, #457179136	; 0x1b400000
 1ac:	50555f79 	subspl	r5, r5, r9, ror pc
 1b0:	6c625f00 	stclvs	15, cr5, [r2], #-0
 1b4:	7a69736b 	bvc	1a5cf68 <startup-0x1e5a3098>
 1b8:	61720065 	cmnvs	r2, r5, rrx
 1bc:	6e69646e 	cdpvs	4, 6, cr6, cr9, cr14, {3}
 1c0:	72700074 	rsbsvc	r0, r0, #116	; 0x74
 1c4:	5f746e69 	svcpl	0x00746e69
 1c8:	726f6373 	rsbvc	r6, pc, #-872415231	; 0xcc000001
 1cc:	6c615f65 	stclvs	15, cr5, [r1], #-404	; 0xfffffe6c
 1d0:	635f006c 	cmpvs	pc, #108	; 0x6c
 1d4:	75627476 	strbvc	r7, [r2, #-1142]!	; 0xfffffb8a
 1d8:	6f5f0066 	svcvs	0x005f0066
 1dc:	65736666 	ldrbvs	r6, [r3, #-1638]!	; 0xfffff99a
 1e0:	6d5f0074 	ldclvs	0, cr0, [pc, #-464]	; 18 <startup-0x1fffffe8>
 1e4:	74727362 	ldrbtvc	r7, [r2], #-866	; 0xfffffc9e
 1e8:	7363776f 	cmnvc	r3, #29097984	; 0x1bc0000
 1ec:	6174735f 	cmnvs	r4, pc, asr r3
 1f0:	50006574 	andpl	r6, r0, r4, ror r5
 1f4:	544e494f 	strbpl	r4, [lr], #-2383	; 0xfffff6b1
 1f8:	626d5f00 	rsbvs	r5, sp, #0, 30
 1fc:	6e656c72 	mcrvs	12, 3, r6, cr5, cr2, {3}
 200:	6174735f 	cmnvs	r4, pc, asr r3
 204:	5f006574 	svcpl	0x00006574
 208:	72616e66 	rsbvc	r6, r1, #1632	; 0x660
 20c:	62007367 	andvs	r7, r0, #-1677721599	; 0x9c000001
 210:	426b6361 	rsbmi	r6, fp, #-2080374783	; 0x84000001
 214:	65666675 	strbvs	r6, [r6, #-1653]!	; 0xfffff98b
 218:	79620072 	stmdbvc	r2!, {r1, r4, r5, r6}^
 21c:	5f006574 	svcpl	0x00006574
 220:	00736e66 	rsbseq	r6, r3, r6, ror #28
 224:	6d2f3a5a 	vstmdbvs	pc!, {s6-s95}
 228:	4d2f706f 	stcmi	0, cr7, [pc, #-444]!	; 74 <startup-0x1fffff8c>
 22c:	532d504f 			; <UNDEFINED> instruction: 0x532d504f
 230:	286c6570 	stmdacs	ip!, {r4, r5, r6, r8, sl, sp, lr}^
 234:	4d2f2931 			; <UNDEFINED> instruction: 0x4d2f2931
 238:	532d504f 			; <UNDEFINED> instruction: 0x532d504f
 23c:	2f6c6570 	svccs	0x006c6570
 240:	6b616e53 	blvs	185bb94 <startup-0x1e7a446c>
 244:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xfffff09b
 248:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
 24c:	00632e70 	rsbeq	r2, r3, r0, ror lr
 250:	6769735f 			; <UNDEFINED> instruction: 0x6769735f
 254:	665f006e 	ldrbvs	r0, [pc], -lr, rrx
 258:	6b636f6c 	blvs	18dc010 <startup-0x1e723ff0>
 25c:	5f00745f 	svcpl	0x0000745f
 260:	65647473 	strbvs	r7, [r4, #-1139]!	; 0xfffffb8d
 264:	5f007272 	svcpl	0x00007272
 268:	69676942 	stmdbvs	r7!, {r1, r6, r8, fp, sp, lr}^
 26c:	5f00746e 	svcpl	0x0000746e
 270:	6d6d6167 	stfvse	f6, [sp, #-412]!	; 0xfffffe64
 274:	69735f61 	ldmdbvs	r3!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
 278:	61676e67 	cmnvs	r7, r7, ror #28
 27c:	725f006d 	subsvc	r0, pc, #109	; 0x6d
 280:	6c757365 	ldclvs	3, cr7, [r5], #-404	; 0xfffffe6c
 284:	006b5f74 	rsbeq	r5, fp, r4, ror pc
 288:	6d745f5f 	ldclvs	15, cr5, [r4, #-380]!	; 0xfffffe84
 28c:	61726400 	cmnvs	r2, r0, lsl #8
 290:	626f5f77 	rsbvs	r5, pc, #476	; 0x1dc
 294:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 298:	6f6f6600 	svcvs	0x006f6600
 29c:	626f5f64 	rsbvs	r5, pc, #100, 30	; 0x190
 2a0:	5f5f006a 	svcpl	0x005f006a
 2a4:	62686377 	rsbvs	r6, r8, #-603979775	; 0xdc000001
 2a8:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
 2ac:	74756f64 	ldrbtvc	r6, [r5], #-3940	; 0xfffff09c
 2b0:	69656800 	stmdbvs	r5!, {fp, sp, lr}^
 2b4:	00746867 	rsbseq	r6, r4, r7, ror #16
 2b8:	7476635f 	ldrbtvc	r6, [r6], #-863	; 0xfffffca1
 2bc:	006e656c 	rsbeq	r6, lr, ip, ror #10
 2c0:	6c69665f 	stclvs	6, cr6, [r9], #-380	; 0xfffffe84
 2c4:	72640065 	rsbvc	r0, r4, #101	; 0x65
 2c8:	665f7761 	ldrbvs	r7, [pc], -r1, ror #14
 2cc:	00646f6f 	rsbeq	r6, r4, pc, ror #30
 2d0:	5f79656b 	svcpl	0x0079656b
 2d4:	6f727473 	svcvs	0x00727473
 2d8:	5f00656b 	svcpl	0x0000656b
 2dc:	626f696e 	rsbvs	r6, pc, #1802240	; 0x1b8000
 2e0:	69770073 	ldmdbvs	r7!, {r0, r1, r4, r5, r6}^
 2e4:	00687464 	rsbeq	r7, r8, r4, ror #8
 2e8:	646e6172 	strbtvs	r6, [lr], #-370	; 0xfffffe8e
 2ec:	7300785f 	movwvc	r7, #2143	; 0x85f
 2f0:	74726f68 	ldrbtvc	r6, [r2], #-3944	; 0xfffff098
 2f4:	736e7520 	cmnvc	lr, #32, 10	; 0x8000000
 2f8:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
 2fc:	6e692064 	cdpvs	0, 6, cr2, cr9, cr4, {3}
 300:	6e730074 	mrcvs	0, 3, r0, cr3, cr4, {3}
 304:	53656b61 	cmnpl	r5, #99328	; 0x18400
 308:	00657a69 	rsbeq	r7, r5, r9, ror #20
 30c:	77617264 	strbvc	r7, [r1, -r4, ror #4]!
 310:	616e735f 	cmnvs	lr, pc, asr r3
 314:	5f00656b 	svcpl	0x0000656b
 318:	78657461 	stmdavc	r5!, {r0, r5, r6, sl, ip, sp, lr}^
 31c:	00307469 	eorseq	r7, r0, r9, ror #8
 320:	6769735f 			; <UNDEFINED> instruction: 0x6769735f
 324:	5f6c616e 	svcpl	0x006c616e
 328:	00667562 	rsbeq	r7, r6, r2, ror #10
 32c:	6373615f 	cmnvs	r3, #-1073741801	; 0xc0000017
 330:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
 334:	6675625f 			; <UNDEFINED> instruction: 0x6675625f
 338:	65707300 	ldrbvs	r7, [r0, #-768]!	; 0xfffffd00
 33c:	00786465 	rsbseq	r6, r8, r5, ror #8
 340:	65657073 	strbvs	r7, [r5, #-115]!	; 0xffffff8d
 344:	5f007964 	svcpl	0x00007964
 348:	75736572 	ldrbvc	r6, [r3, #-1394]!	; 0xfffffa8e
 34c:	5f00746c 	svcpl	0x0000746c
 350:	6863775f 	stmdavs	r3!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 354:	4f4c5f00 	svcmi	0x004c5f00
 358:	545f4b43 	ldrbpl	r4, [pc], #-2883	; 360 <startup-0x1ffffca0>
 35c:	6e697700 	cdpvs	7, 6, cr7, cr9, cr0, {0}
 360:	00745f74 	rsbseq	r5, r4, r4, ror pc
 364:	616c665f 	cmnvs	ip, pc, asr r6
 368:	00327367 	eorseq	r7, r2, r7, ror #6
 36c:	6d745f5f 	ldclvs	15, cr5, [r4, #-380]!	; 0xfffffe84
 370:	6165795f 	cmnvs	r5, pc, asr r9
 374:	65720072 	ldrbvs	r0, [r2, #-114]!	; 0xffffff8e
 378:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 37c:	61675f74 	smcvs	30196	; 0x75f4
 380:	5f00656d 	svcpl	0x0000656d
 384:	6c616d6e 	stclvs	13, cr6, [r1], #-440	; 0xfffffe48
 388:	00636f6c 	rsbeq	r6, r3, ip, ror #30
 38c:	64616f6c 	strbtvs	r6, [r1], #-3948	; 0xfffff094
 390:	7270735f 	rsbsvc	r7, r0, #2080374785	; 0x7c000001
 394:	00657469 	rsbeq	r7, r5, r9, ror #8
 398:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
 39c:	616e735f 	cmnvs	lr, pc, asr r3
 3a0:	5000656b 	andpl	r6, r0, fp, ror #10
 3a4:	454a424f 	strbmi	r4, [sl, #-591]	; 0xfffffdb1
 3a8:	5f005443 	svcpl	0x00005443
 3ac:	7478656e 	ldrbtvc	r6, [r8], #-1390	; 0xfffffa92
 3b0:	5f5f0066 	svcpl	0x005f0066
 3b4:	6d5f6d74 	ldclvs	13, cr6, [pc, #-464]	; 1ec <startup-0x1ffffe14>
 3b8:	5f006e6f 	svcpl	0x00006e6f
 3bc:	78657461 	stmdavc	r5!, {r0, r5, r6, sl, ip, sp, lr}^
 3c0:	50007469 	andpl	r7, r0, r9, ror #8
 3c4:	4d4f4547 	cfstr64mi	mvdx4, [pc, #-284]	; 2b0 <startup-0x1ffffd50>
 3c8:	59525445 	ldmdbpl	r2, {r0, r2, r6, sl, ip, lr}^
 3cc:	735f5f00 	cmpvc	pc, #0, 30
 3d0:	69646964 	stmdbvs	r4!, {r2, r5, r6, r8, fp, sp, lr}^
 3d4:	0074696e 	rsbseq	r6, r4, lr, ror #18
 3d8:	66666f5f 	uqsaxvs	r6, r6, pc	; <UNPREDICTABLE>
 3dc:	6900745f 	stmdbvs	r0, {r0, r1, r2, r3, r4, r6, sl, ip, sp, lr}
 3e0:	5f74696e 	svcpl	0x0074696e
 3e4:	646f6f66 	strbtvs	r6, [pc], #-3942	; 3ec <startup-0x1ffffc14>
 3e8:	72665f00 	rsbvc	r5, r6, #0, 30
 3ec:	696c6565 	stmdbvs	ip!, {r0, r2, r5, r6, r8, sl, sp, lr}^
 3f0:	5f007473 	svcpl	0x00007473
 3f4:	6f746377 	svcvs	0x00746377
 3f8:	735f626d 	cmpvc	pc, #-805306362	; 0xd0000006
 3fc:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
 400:	63736100 	cmnvs	r3, #0, 2
 404:	705f6969 	subsvc	r6, pc, r9, ror #18
 408:	746e6972 	strbtvc	r6, [lr], #-2418	; 0xfffff68e
 40c:	5c3a5a00 			; <UNDEFINED> instruction: 0x5c3a5a00
 410:	5c706f6d 	ldclpl	15, cr6, [r0], #-436	; 0xfffffe4c
 414:	2d504f4d 	ldclcs	15, cr4, [r0, #-308]	; 0xfffffecc
 418:	6c657053 	stclvs	0, cr7, [r5], #-332	; 0xfffffeb4
 41c:	5c293128 	stfpls	f3, [r9], #-160	; 0xffffff60
 420:	2d504f4d 	ldclcs	15, cr4, [r0, #-308]	; 0xfffffecc
 424:	6c657053 	stclvs	0, cr7, [r5], #-332	; 0xfffffeb4
 428:	616e535c 	cmnvs	lr, ip, asr r3
 42c:	7500656b 	strvc	r6, [r0, #-1387]	; 0xfffffa95
 430:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
 434:	2064656e 	rsbcs	r6, r4, lr, ror #10
 438:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
 43c:	656e5f00 	strbvs	r5, [lr, #-3840]!	; 0xfffff100
 440:	6e730077 	mrcvs	0, 3, r0, cr3, cr7, {3}
 444:	68656b61 	stmdavs	r5!, {r0, r5, r6, r8, r9, fp, sp, lr}^
 448:	5f646165 	svcpl	0x00646165
 44c:	6d6f6567 	cfstr64vs	mvdx6, [pc, #-412]!	; 2b8 <startup-0x1ffffd48>
 450:	79727465 	ldmdbvc	r2!, {r0, r2, r5, r6, sl, ip, sp, lr}^
 454:	574f445f 	smlsldpl	r4, pc, pc, r4	; <UNPREDICTABLE>
 458:	6573004e 	ldrbvs	r0, [r3, #-78]!	; 0xffffffb2
 45c:	626f5f74 	rsbvs	r5, pc, #116, 30	; 0x1d0
 460:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 464:	6570735f 	ldrbvs	r7, [r0, #-863]!	; 0xfffffca1
 468:	5f006465 	svcpl	0x00006465
 46c:	72655f68 	rsbvc	r5, r5, #104, 30	; 0x1a0
 470:	006f6e72 	rsbeq	r6, pc, r2, ror lr	; <UNPREDICTABLE>
 474:	726f6873 	rsbvc	r6, pc, #7536640	; 0x730000
 478:	6e692074 	mcrvs	0, 3, r2, cr9, cr4, {3}
 47c:	5f5f0074 	svcpl	0x005f0074
 480:	795f6d74 	ldmdbvc	pc, {r2, r4, r5, r6, r8, sl, fp, sp, lr}^	; <UNPREDICTABLE>
 484:	00796164 	rsbseq	r6, r9, r4, ror #2
 488:	62735f5f 	rsbsvs	r5, r3, #380	; 0x17c
 48c:	5f006675 	svcpl	0x00006675
 490:	73626f69 	cmnvc	r2, #420	; 0x1a4
 494:	465f5f00 	ldrbmi	r5, [pc], -r0, lsl #30
 498:	00454c49 	subeq	r4, r5, r9, asr #24
 49c:	73626d5f 	cmnvc	r2, #6080	; 0x17c0
 4a0:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
 4a4:	5f00745f 	svcpl	0x0000745f
 4a8:	4946735f 	stmdbmi	r6, {r0, r1, r2, r3, r4, r6, r8, r9, ip, sp, lr}^
 4ac:	5f00454c 	svcpl	0x0000454c
 4b0:	7473626d 	ldrbtvc	r6, [r3], #-621	; 0xfffffd93
 4b4:	00657461 	rsbeq	r7, r5, r1, ror #8
 4b8:	6e61725f 	mcrvs	2, 3, r7, cr1, cr15, {2}
 4bc:	656e5f64 	strbvs	r5, [lr, #-3940]!	; 0xfffff09c
 4c0:	5f007478 	svcpl	0x00007478
 4c4:	656c626d 	strbvs	r6, [ip, #-621]!	; 0xfffffd93
 4c8:	74735f6e 	ldrbtvc	r5, [r3], #-3950	; 0xfffff092
 4cc:	00657461 	rsbeq	r7, r5, r1, ror #8
 4d0:	636e695f 	cmnvs	lr, #1556480	; 0x17c000
 4d4:	6e695f00 	cdpvs	15, 6, cr5, cr9, cr0, {0}
 4d8:	6f660064 	svcvs	0x00660064
 4dc:	776f6c6c 	strbvc	r6, [pc, -ip, ror #24]!
 4e0:	61656c5f 	cmnvs	r5, pc, asr ip
 4e4:	00726564 	rsbseq	r6, r2, r4, ror #10
 4e8:	636f6c5f 	cmnvs	pc, #24320	; 0x5f00
 4ec:	00656c61 	rsbeq	r6, r5, r1, ror #24
 4f0:	6c635f5f 	stclvs	15, cr5, [r3], #-380	; 0xfffffe84
 4f4:	756e6165 	strbvc	r6, [lr, #-357]!	; 0xfffffe9b
 4f8:	755f0070 	ldrbvc	r0, [pc, #-112]	; 490 <startup-0x1ffffb70>
 4fc:	6570736e 	ldrbvs	r7, [r0, #-878]!	; 0xfffffc92
 500:	69666963 	stmdbvs	r6!, {r0, r1, r5, r6, r8, fp, sp, lr}^
 504:	6c5f6465 	cfldrdvs	mvd6, [pc], {101}	; 0x65
 508:	6c61636f 	stclvs	3, cr6, [r1], #-444	; 0xfffffe44
 50c:	6e695f65 	cdpvs	15, 6, cr5, cr9, cr5, {3}
 510:	5f006f66 	svcpl	0x00006f66
 514:	7778616d 	ldrbvc	r6, [r8, -sp, ror #2]!
 518:	5f007364 	svcpl	0x00007364
 51c:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
 520:	735f0074 	cmpvc	pc, #116	; 0x74
 524:	00646565 	rsbeq	r6, r4, r5, ror #10
 528:	6b616e73 	blvs	185befc <startup-0x1e7a4104>
 52c:	61656865 	cmnvs	r5, r5, ror #16
 530:	65675f64 	strbvs	r5, [r7, #-3940]!	; 0xfffff09c
 534:	74656d6f 	strbtvc	r6, [r5], #-3439	; 0xfffff291
 538:	4c5f7972 	mrrcmi	9, 7, r7, pc, cr2	; <UNPREDICTABLE>
 53c:	00544645 	subseq	r4, r4, r5, asr #12
 540:	6f635f5f 	svcvs	0x00635f5f
 544:	00746e75 	rsbseq	r6, r4, r5, ror lr
 548:	6f6c5f5f 	svcvs	0x006c5f5f
 54c:	5f006b63 	svcpl	0x00006b63
 550:	6c61765f 	stclvs	6, cr7, [r1], #-380	; 0xfffffe84
 554:	5f006575 	svcpl	0x00006575
 558:	6b656573 	blvs	1959b2c <startup-0x1e6a64d4>
 55c:	70665f00 	rsbvc	r5, r6, r0, lsl #30
 560:	745f736f 	ldrbvc	r7, [pc], #-879	; 568 <startup-0x1ffffa98>
 564:	745f5f00 	ldrbvc	r5, [pc], #-3840	; 56c <startup-0x1ffffa94>
 568:	696d5f6d 	stmdbvs	sp!, {r0, r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
 56c:	7270006e 	rsbsvc	r0, r0, #110	; 0x6e
 570:	5f746e69 	svcpl	0x00746e69
 574:	726f6373 	rsbvc	r6, pc, #-872415231	; 0xcc000001
 578:	74730065 	ldrbtvc	r0, [r3], #-101	; 0xffffff9b
 57c:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
 580:	6e690070 	mcrvs	0, 3, r0, cr9, cr0, {3}
 584:	615f7469 	cmpvs	pc, r9, ror #8
 588:	5f007070 	svcpl	0x00007070
 58c:	746c756d 	strbtvc	r7, [ip], #-1389	; 0xfffffa93
 590:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
 594:	6b6f7472 	blvs	1bdd764 <startup-0x1e42289c>
 598:	73616c5f 	cmnvc	r1, #24320	; 0x5f00
 59c:	665f0074 			; <UNDEFINED> instruction: 0x665f0074
 5a0:	7079746e 	rsbsvc	r7, r9, lr, ror #8
 5a4:	64007365 	strvs	r7, [r0], #-869	; 0xfffffc9b
 5a8:	5f776172 	svcpl	0x00776172
 5ac:	69727073 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, ip, sp, lr}^
 5b0:	74006574 	strvc	r6, [r0], #-1396	; 0xfffffa8c
 5b4:	006a624f 	rsbeq	r6, sl, pc, asr #4
 5b8:	6464615f 	strbtvs	r6, [r4], #-351	; 0xfffffea1
 5bc:	616e7300 	cmnvs	lr, r0, lsl #6
 5c0:	6568656b 	strbvs	r6, [r8, #-1387]!	; 0xfffffa95
 5c4:	675f6461 	ldrbvs	r6, [pc, -r1, ror #8]
 5c8:	656d6f65 	strbvs	r6, [sp, #-3941]!	; 0xfffff09b
 5cc:	5f797274 	svcpl	0x00797274
 5d0:	48474952 	stmdami	r7, {r1, r4, r6, r8, fp, lr}^
 5d4:	5f5f0054 	svcpl	0x005f0054
 5d8:	6e6f4c55 	mcrvs	12, 3, r4, cr15, cr5, {2}
 5dc:	675f0067 	ldrbvs	r0, [pc, -r7, rrx]
 5e0:	61647465 	cmnvs	r4, r5, ror #8
 5e4:	655f6574 	ldrbvs	r6, [pc, #-1396]	; 78 <startup-0x1fffff88>
 5e8:	72007272 	andvc	r7, r0, #536870919	; 0x20000007
 5ec:	61747365 	cmnvs	r4, r5, ror #6
 5f0:	64007472 	strvs	r7, [r0], #-1138	; 0xfffffb8e
 5f4:	00776172 	rsbseq	r6, r7, r2, ror r1
 5f8:	6f6c675f 	svcvs	0x006c675f
 5fc:	5f6c6162 	svcpl	0x006c6162
 600:	75706d69 	ldrbvc	r6, [r0, #-3433]!	; 0xfffff297
 604:	705f6572 	subsvc	r6, pc, r2, ror r5	; <UNPREDICTABLE>
 608:	63007274 	movwvs	r7, #628	; 0x274
 60c:	65727275 	ldrbvs	r7, [r2, #-629]!	; 0xfffffd8b
 610:	6100746e 	tstvs	r0, lr, ror #8
 614:	00766772 	rsbseq	r6, r6, r2, ror r7
 618:	756e755f 	strbvc	r7, [lr, #-1375]!	; 0xfffffaa1
 61c:	5f646573 	svcpl	0x00646573
 620:	646e6172 	strbtvs	r6, [lr], #-370	; 0xfffffe8e
 624:	63736100 	cmnvs	r3, #0, 2
 628:	5f006969 	svcpl	0x00006969
 62c:	00736477 	rsbseq	r6, r3, r7, ror r4
 630:	6d745f5f 	ldclvs	15, cr5, [r4, #-380]!	; 0xfffffe84
 634:	6164775f 	cmnvs	r4, pc, asr r7
 638:	675f0079 			; <UNDEFINED> instruction: 0x675f0079
 63c:	0065756c 	rsbeq	r7, r5, ip, ror #10
 640:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0xfffff68d
 644:	50740078 	rsbspl	r0, r4, r8, ror r0
 648:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
 64c:	554e4700 	strbpl	r4, [lr, #-1792]	; 0xfffff900
 650:	39394320 	ldmdbcc	r9!, {r5, r8, r9, lr}
 654:	322e3920 	eorcc	r3, lr, #32, 18	; 0x80000
 658:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
 65c:	31393130 	teqcc	r9, r0, lsr r1
 660:	20353230 	eorscs	r3, r5, r0, lsr r2
 664:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
 668:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
 66c:	415b2029 	cmpmi	fp, r9, lsr #32
 670:	612f4d52 			; <UNDEFINED> instruction: 0x612f4d52
 674:	392d6d72 	pushcc	{r1, r4, r5, r6, r8, sl, fp, sp, lr}
 678:	6172622d 	cmnvs	r2, sp, lsr #4
 67c:	2068636e 	rsbcs	r6, r8, lr, ror #6
 680:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
 684:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
 688:	37373220 	ldrcc	r3, [r7, -r0, lsr #4]!
 68c:	5d393935 			; <UNDEFINED> instruction: 0x5d393935
 690:	746d2d20 	strbtvc	r2, [sp], #-3360	; 0xfffff2e0
 694:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
 698:	666d2d20 	strbtvs	r2, [sp], -r0, lsr #26
 69c:	74616f6c 	strbtvc	r6, [r1], #-3948	; 0xfffff094
 6a0:	6962612d 	stmdbvs	r2!, {r0, r2, r3, r5, r8, sp, lr}^
 6a4:	666f733d 			; <UNDEFINED> instruction: 0x666f733d
 6a8:	6d2d2074 	stcvs	0, cr2, [sp, #-464]!	; 0xfffffe30
 6ac:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
 6b0:	6d72613d 	ldfvse	f6, [r2, #-244]!	; 0xffffff0c
 6b4:	6d2d3676 	stcvs	6, cr3, [sp, #-472]!	; 0xfffffe28
 6b8:	20672d20 	rsbcs	r2, r7, r0, lsr #26
 6bc:	20304f2d 	eorscs	r4, r0, sp, lsr #30
 6c0:	6474732d 	ldrbtvs	r7, [r4], #-813	; 0xfffffcd3
 6c4:	3939633d 	ldmdbcc	r9!, {r0, r2, r3, r4, r5, r8, r9, sp, lr}
 6c8:	366c5f00 	strbtcc	r5, [ip], -r0, lsl #30
 6cc:	625f6134 	subsvs	r6, pc, #52, 2
 6d0:	5f006675 	svcpl	0x00006675
 6d4:	5f676973 	svcpl	0x00676973
 6d8:	636e7566 	cmnvs	lr, #427819008	; 0x19800000
 6dc:	736f7000 	cmnvc	pc, #0
 6e0:	6e5f0078 	mrcvs	0, 2, r0, cr15, cr8, {3}
 6e4:	00667562 	rsbeq	r7, r6, r2, ror #10
 6e8:	756e755f 	strbvc	r7, [lr, #-1375]!	; 0xfffffaa1
 6ec:	00646573 	rsbeq	r6, r4, r3, ror r5
 6f0:	79736f70 	ldmdbvc	r3!, {r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 6f4:	67726100 	ldrbvs	r6, [r2, -r0, lsl #2]!
 6f8:	5f5f0063 	svcpl	0x005f0063
 6fc:	695f6d74 	ldmdbvs	pc, {r2, r4, r5, r6, r8, sl, fp, sp, lr}^	; <UNPREDICTABLE>
 700:	74736473 	ldrbtvc	r6, [r3], #-1139	; 0xfffffb8d
 704:	6f6c5f00 	svcvs	0x006c5f00
 708:	746c6163 	strbtvc	r6, [ip], #-355	; 0xfffffe9d
 70c:	5f656d69 	svcpl	0x00656d69
 710:	00667562 	rsbeq	r7, r6, r2, ror #10
 714:	6f6c635f 	svcvs	0x006c635f
 718:	73006573 	movwvc	r6, #1395	; 0x573
 71c:	79657a69 	stmdbvc	r5!, {r0, r3, r5, r6, r9, fp, ip, sp, lr}^
 720:	34725f00 	ldrbtcc	r5, [r2], #-3840	; 0xfffff100
 724:	6d5f0038 	ldclvs	0, cr0, [pc, #-224]	; 64c <startup-0x1ffff9b4>
 728:	776f7462 	strbvc	r7, [pc, -r2, ror #8]!
 72c:	74735f63 	ldrbtvc	r5, [r3], #-3939	; 0xfffff09d
 730:	00657461 	rsbeq	r7, r5, r1, ror #8
 734:	7335705f 	teqvc	r5, #95	; 0x5f
 738:	616d6900 	cmnvs	sp, r0, lsl #18
 73c:	625f6567 	subsvs	r6, pc, #432013312	; 0x19c00000
 740:	00737469 	rsbseq	r7, r3, r9, ror #8
 744:	6e69616d 	powvsez	f6, f1, #5.0
 748:	636f6c00 	cmnvs	pc, #0, 24
 74c:	735f6c61 	cmpvc	pc, #24832	; 0x6100
 750:	65726f63 	ldrbvs	r6, [r2, #-3939]!	; 0xfffff09d
 754:	745f5f00 	ldrbvc	r5, [pc], #-3840	; 75c <startup-0x1ffff8a4>
 758:	646d5f6d 	strbtvs	r5, [sp], #-3949	; 0xfffff093
 75c:	64007961 	strvs	r7, [r0], #-2401	; 0xfffff69f
 760:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 764:	6b696d5f 	blvs	1a5bce8 <startup-0x1e5a4318>
 768:	67006f72 	smlsdxvs	r0, r2, pc, r6	; <UNPREDICTABLE>
 76c:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 770:	645f6369 	ldrbvs	r6, [pc], #-873	; 778 <startup-0x1ffff888>
 774:	5f776172 	svcpl	0x00776172
 778:	65726373 	ldrbvs	r6, [r2, #-883]!	; 0xfffffc8d
 77c:	67006e65 	strvs	r6, [r0, -r5, ror #28]
 780:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 784:	725f6369 	subsvc	r6, pc, #-1543503871	; 0xa4000001
 788:	5f646165 	svcpl	0x00646165
 78c:	61746164 	cmnvs	r4, r4, ror #2
 790:	61726700 	cmnvs	r2, r0, lsl #14
 794:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 798:	6165725f 	cmnvs	r5, pc, asr r2
 79c:	69700064 	ldmdbvs	r0!, {r2, r5, r6}^
 7a0:	006c6578 	rsbeq	r6, ip, r8, ror r5
 7a4:	70617267 	rsbvc	r7, r1, r7, ror #4
 7a8:	5f636968 	svcpl	0x00636968
 7ac:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
 7b0:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
 7b4:	7465735f 	strbtvc	r7, [r5], #-863	; 0xfffffca1
 7b8:	656c6300 	strbvs	r6, [ip, #-768]!	; 0xfffffd00
 7bc:	625f7261 	subsvs	r7, pc, #268435462	; 0x10000006
 7c0:	626b6361 	rsbvs	r6, fp, #-2080374783	; 0x84000001
 7c4:	65666675 	strbvs	r6, [r6, #-1653]!	; 0xfffff98b
 7c8:	65640072 	strbvs	r0, [r4, #-114]!	; 0xffffff8e
 7cc:	5f79616c 	svcpl	0x0079616c
 7d0:	6e303035 	mrcvs	0, 1, r3, cr0, cr5, {1}
 7d4:	72670073 	rsbvc	r0, r7, #115	; 0x73
 7d8:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 7dc:	61775f63 	cmnvs	r7, r3, ror #30
 7e0:	725f7469 	subsvc	r7, pc, #1761607680	; 0x69000000
 7e4:	79646165 	stmdbvc	r4!, {r0, r2, r5, r6, r8, sp, lr}^
 7e8:	73616d00 	cmnvc	r1, #0, 26
 7ec:	7267006b 	rsbvc	r0, r7, #107	; 0x6b
 7f0:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 7f4:	72775f63 	rsbsvc	r5, r7, #396	; 0x18c
 7f8:	00657469 	rsbeq	r7, r5, r9, ror #8
 7fc:	656c6573 	strbvs	r6, [ip, #-1395]!	; 0xfffffa8d
 800:	635f7463 	cmpvs	pc, #1660944384	; 0x63000000
 804:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
 808:	656c6c6f 	strbvs	r6, [ip, #-3183]!	; 0xfffff391
 80c:	6e690072 	mcrvs	0, 3, r0, cr9, cr2, {3}
 810:	00786564 	rsbseq	r6, r8, r4, ror #10
 814:	70617267 	rsbvc	r7, r1, r7, ror #4
 818:	5f636968 	svcpl	0x00636968
 81c:	61656c63 	cmnvs	r5, r3, ror #24
 820:	63735f72 	cmnvs	r3, #456	; 0x1c8
 824:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
 828:	61726700 	cmnvs	r2, r0, lsl #14
 82c:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 830:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 834:	645f6574 	ldrbvs	r6, [pc], #-1396	; 83c <startup-0x1ffff7c4>
 838:	00617461 	rsbeq	r7, r1, r1, ror #8
 83c:	70617267 	rsbvc	r7, r1, r7, ror #4
 840:	5f636968 	svcpl	0x00636968
 844:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
 848:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
 84c:	656c635f 	strbvs	r6, [ip, #-863]!	; 0xfffffca1
 850:	5a007261 	bpl	1d1dc <startup-0x1ffe2e24>
 854:	6f6d2f3a 	svcvs	0x006d2f3a
 858:	4f4d2f70 	svcmi	0x004d2f70
 85c:	70532d50 	subsvc	r2, r3, r0, asr sp
 860:	31286c65 			; <UNDEFINED> instruction: 0x31286c65
 864:	4f4d2f29 	svcmi	0x004d2f29
 868:	70532d50 	subsvc	r2, r3, r0, asr sp
 86c:	532f6c65 			; <UNDEFINED> instruction: 0x532f6c65
 870:	656b616e 	strbvs	r6, [fp, #-366]!	; 0xfffffe92
 874:	6172672f 	cmnvs	r2, pc, lsr #14
 878:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 87c:	70736964 	rsbsvc	r6, r3, r4, ror #18
 880:	2e79616c 	rpwcsez	f6, f1, #4.0
 884:	61700063 	cmnvs	r0, r3, rrx
 888:	67006567 	strvs	r6, [r0, -r7, ror #10]
 88c:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 890:	775f6369 	ldrbvc	r6, [pc, -r9, ror #6]
 894:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 898:	6d6f635f 	stclvs	3, cr6, [pc, #-380]!	; 724 <startup-0x1ffff8dc>
 89c:	646e616d 	strbtvs	r6, [lr], #-365	; 0xfffffe93
 8a0:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 8a4:	6d5f7961 	vldrvs.16	s15, [pc, #-194]	; 7ea <startup-0x1ffff816>	; <UNPREDICTABLE>
 8a8:	696c6c69 	stmdbvs	ip!, {r0, r3, r5, r6, sl, fp, sp, lr}^
 8ac:	61726700 	cmnvs	r2, r0, lsl #14
 8b0:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 8b4:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
 8b8:	65720074 	ldrbvs	r0, [r2, #-116]!	; 0xffffff8c
 8bc:	6c617674 	stclvs	6, cr7, [r1], #-464	; 0xfffffe30
 8c0:	2f3a5a00 	svccs	0x003a5a00
 8c4:	2f706f6d 	svccs	0x00706f6d
 8c8:	2d504f4d 	ldclcs	15, cr4, [r0, #-308]	; 0xfffffecc
 8cc:	6c657053 	stclvs	0, cr7, [r5], #-332	; 0xfffffeb4
 8d0:	2f293128 	svccs	0x00293128
 8d4:	2d504f4d 	ldclcs	15, cr4, [r0, #-308]	; 0xfffffecc
 8d8:	6c657053 	stclvs	0, cr7, [r5], #-332	; 0xfffffeb4
 8dc:	616e532f 	cmnvs	lr, pc, lsr #6
 8e0:	712f656b 			; <UNDEFINED> instruction: 0x712f656b
 8e4:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0xfffffa8b
 8e8:	6900632e 	stmdbvs	r0, {r1, r2, r3, r5, r8, r9, sp, lr}
 8ec:	6c754673 	ldclvs	6, cr4, [r5], #-460	; 0xfffffe34
 8f0:	6572006c 	ldrbvs	r0, [r2, #-108]!	; 0xffffff94
 8f4:	65766f6d 	ldrbvs	r6, [r6, #-3949]!	; 0xfffff093
 8f8:	45736900 	ldrbmi	r6, [r3, #-2304]!	; 0xfffff700
 8fc:	7974706d 	ldmdbvc	r4!, {r0, r2, r3, r5, r6, ip, sp, lr}^
 900:	65657000 	strbvs	r7, [r5, #-0]!
 904:	425f006b 	subsmi	r0, pc, #107	; 0x6b
 908:	006c6f6f 	rsbeq	r6, ip, pc, ror #30
 90c:	65736e69 	ldrbvs	r6, [r3, #-3689]!	; 0xfffff197
 910:	69007472 	stmdbvs	r0, {r1, r4, r5, r6, sl, ip, sp, lr}
 914:	5f74696e 	svcpl	0x0074696e
 918:	75657571 	strbvc	r7, [r5, #-1393]!	; 0xfffffa8f
 91c:	626f0065 	rsbvs	r0, pc, #101	; 0x65
 920:	7272416a 	rsbsvc	r4, r2, #-2147483622	; 0x8000001a
 924:	72007961 	andvc	r7, r0, #1589248	; 0x184000
 928:	00726165 	rsbseq	r6, r2, r5, ror #2
 92c:	6d657469 	cfstrdvs	mvd7, [r5, #-420]!	; 0xfffffe5c
 930:	6e756f43 	cdpvs	15, 7, cr6, cr5, cr3, {2}
 934:	72660074 	rsbvc	r0, r6, #116	; 0x74
 938:	00746e6f 	rsbseq	r6, r4, pc, ror #28
 93c:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 940:	6f675f69 	svcvs	0x00675f69
 944:	79786f74 	ldmdbvc	r8!, {r2, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 948:	63736100 	cmnvs	r3, #0, 2
 94c:	635f6969 	cmpvs	pc, #1720320	; 0x1a4000
 950:	5f6c7274 	svcpl	0x006c7274
 954:	5f746962 	svcpl	0x00746962
 958:	61656c63 	cmnvs	r5, r3, ror #24
 95c:	6c630072 	stclvs	0, cr0, [r3], #-456	; 0xfffffe38
 960:	5f726165 	svcpl	0x00726165
 964:	70736964 	rsbsvc	r6, r3, r4, ror #18
 968:	0079616c 	rsbseq	r6, r9, ip, ror #2
 96c:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 970:	72775f69 	rsbsvc	r5, r7, #420	; 0x1a4
 974:	5f657469 	svcpl	0x00657469
 978:	746e6f63 	strbtvc	r6, [lr], #-3939	; 0xfffff09d
 97c:	6c6c6f72 	stclvs	15, cr6, [ip], #-456	; 0xfffffe38
 980:	61007265 	tstvs	r0, r5, ror #4
 984:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 988:	6165725f 	cmnvs	r5, pc, asr r2
 98c:	74735f64 	ldrbtvc	r5, [r3], #-3940	; 0xfffff09c
 990:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
 994:	78657400 	stmdavc	r5!, {sl, ip, sp, lr}^
 998:	73610074 	cmnvc	r1, #116	; 0x74
 99c:	5f696963 	svcpl	0x00696963
 9a0:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 9a4:	61645f65 	cmnvs	r4, r5, ror #30
 9a8:	72006174 	andvc	r6, r0, #116, 2
 9ac:	61567465 	cmpvs	r6, r5, ror #8
 9b0:	6461006c 	strbtvs	r0, [r1], #-108	; 0xffffff94
 9b4:	73657264 	cmnvc	r5, #100, 4	; 0x40000006
 9b8:	73610073 	cmnvc	r1, #115	; 0x73
 9bc:	5f696963 	svcpl	0x00696963
 9c0:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
 9c4:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
 9c8:	6c6f7274 	sfmvs	f7, 2, [pc], #-464	; 800 <startup-0x1ffff800>
 9cc:	0072656c 	rsbseq	r6, r2, ip, ror #10
 9d0:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 9d4:	65725f69 	ldrbvs	r5, [r2, #-3945]!	; 0xfffff097
 9d8:	645f6461 	ldrbvs	r6, [pc], #-1121	; 9e0 <startup-0x1ffff620>
 9dc:	00617461 	rsbeq	r7, r1, r1, ror #8
 9e0:	70736964 	rsbsvc	r6, r3, r4, ror #18
 9e4:	5f79616c 	svcpl	0x0079616c
 9e8:	746e6f63 	strbtvc	r6, [lr], #-3939	; 0xfffff09d
 9ec:	006c6f72 	rsbeq	r6, ip, r2, ror pc
 9f0:	44746572 	ldrbtmi	r6, [r4], #-1394	; 0xfffffa8e
 9f4:	00617461 	rsbeq	r7, r1, r1, ror #8
 9f8:	746e7566 	strbtvc	r7, [lr], #-1382	; 0xfffffa9a
 9fc:	5f6e6f69 	svcpl	0x006e6f69
 a00:	00746573 	rsbseq	r6, r4, r3, ror r5
 a04:	6d2f3a5a 	vstmdbvs	pc!, {s6-s95}
 a08:	4d2f706f 	stcmi	0, cr7, [pc, #-444]!	; 854 <startup-0x1ffff7ac>
 a0c:	532d504f 			; <UNDEFINED> instruction: 0x532d504f
 a10:	286c6570 	stmdacs	ip!, {r4, r5, r6, r8, sl, sp, lr}^
 a14:	4d2f2931 			; <UNDEFINED> instruction: 0x4d2f2931
 a18:	532d504f 			; <UNDEFINED> instruction: 0x532d504f
 a1c:	2f6c6570 	svccs	0x006c6570
 a20:	6b616e53 	blvs	185c374 <startup-0x1e7a3c8c>
 a24:	73612f65 	cmnvc	r1, #404	; 0x194
 a28:	64696963 	strbtvs	r6, [r9], #-2403	; 0xfffff69d
 a2c:	6c707369 	ldclvs	3, cr7, [r0], #-420	; 0xfffffe5c
 a30:	632e7961 			; <UNDEFINED> instruction: 0x632e7961
 a34:	63736100 	cmnvs	r3, #0, 2
 a38:	775f6969 	ldrbvc	r6, [pc, -r9, ror #18]
 a3c:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 a40:	646d635f 	strbtvs	r6, [sp], #-863	; 0xfffffca1
 a44:	74657200 	strbtvc	r7, [r5], #-512	; 0xfffffe00
 a48:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
 a4c:	746e6500 	strbtvc	r6, [lr], #-1280	; 0xfffffb00
 a50:	6d5f7972 	vldrvs.16	s15, [pc, #-228]	; 974 <startup-0x1ffff68c>	; <UNPREDICTABLE>
 a54:	5f65646f 	svcpl	0x0065646f
 a58:	00746573 	rsbseq	r6, r4, r3, ror r5
 a5c:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 a60:	72775f69 	rsbsvc	r5, r7, #420	; 0x1a4
 a64:	5f657469 	svcpl	0x00657469
 a68:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
 a6c:	63736100 	cmnvs	r3, #0, 2
 a70:	635f6969 	cmpvs	pc, #1720320	; 0x1a4000
 a74:	5f6c7274 	svcpl	0x006c7274
 a78:	5f746962 	svcpl	0x00746962
 a7c:	00746573 	rsbseq	r6, r4, r3, ror r5
 a80:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 a84:	6e695f69 	cdpvs	15, 6, cr5, cr9, cr9, {3}
 a88:	5a007469 	bpl	1dc34 <startup-0x1ffe23cc>
 a8c:	6f6d2f3a 	svcvs	0x006d2f3a
 a90:	4f4d2f70 	svcmi	0x004d2f70
 a94:	70532d50 	subsvc	r2, r3, r0, asr sp
 a98:	31286c65 			; <UNDEFINED> instruction: 0x31286c65
 a9c:	4f4d2f29 	svcmi	0x004d2f29
 aa0:	70532d50 	subsvc	r2, r3, r0, asr sp
 aa4:	532f6c65 			; <UNDEFINED> instruction: 0x532f6c65
 aa8:	656b616e 	strbvs	r6, [fp, #-366]!	; 0xfffffe92
 aac:	6c65642f 	cfstrdvs	mvd6, [r5], #-188	; 0xffffff44
 ab0:	632e7961 			; <UNDEFINED> instruction: 0x632e7961
 ab4:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 ab8:	325f7961 	subscc	r7, pc, #1589248	; 0x184000
 abc:	736e3035 	cmnvc	lr, #53	; 0x35
 ac0:	2f3a5a00 	svccs	0x003a5a00
 ac4:	2f706f6d 	svccs	0x00706f6d
 ac8:	2d504f4d 	ldclcs	15, cr4, [r0, #-308]	; 0xfffffecc
 acc:	6c657053 	stclvs	0, cr7, [r5], #-332	; 0xfffffeb4
 ad0:	2f293128 	svccs	0x00293128
 ad4:	2d504f4d 	ldclcs	15, cr4, [r0, #-308]	; 0xfffffecc
 ad8:	6c657053 	stclvs	0, cr7, [r5], #-332	; 0xfffffeb4
 adc:	616e532f 	cmnvs	lr, pc, lsr #6
 ae0:	6b2f656b 	blvs	bda094 <startup-0x1f425f6c>
 ae4:	2e627965 	vnmulcs.f16	s15, s4, s11	; <UNPREDICTABLE>
 ae8:	656b0063 	strbvs	r0, [fp, #-99]!	; 0xffffff9d
 aec:	69006279 	stmdbvs	r0, {r0, r3, r4, r5, r6, r9, sp, lr}
 af0:	7475706e 	ldrbtvc	r7, [r5], #-110	; 0xffffff92
 af4:	79656b00 	stmdbvc	r5!, {r8, r9, fp, sp, lr}^
 af8:	006c6156 	rsbeq	r6, ip, r6, asr r1
 afc:	3774756f 	ldrbcc	r7, [r4, -pc, ror #10]!
 b00:	00676573 	rsbeq	r6, r7, r3, ror r5
 b04:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
 b08:	6c6f635f 	stclvs	3, cr6, [pc], #-380	; 994 <startup-0x1ffff66c>
 b0c:	6e6d756f 	cdpvs	5, 6, cr7, cr13, cr15, {3}
 b10:	74636100 	strbtvc	r6, [r3], #-256	; 0xffffff00
 b14:	74617669 	strbtvc	r7, [r1], #-1641	; 0xfffff997
 b18:	6f725f65 	svcvs	0x00725f65
 b1c:	656b0077 	strbvs	r0, [fp, #-119]!	; 0xffffff89
 b20:	61765f79 	cmnvs	r6, r9, ror pc
 b24:	0065756c 	rsbeq	r7, r5, ip, ror #10

Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	206d7241 	rsbcs	r7, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d39 	eorscc	r2, r2, r9, lsr sp
  30:	712d3931 			; <UNDEFINED> instruction: 0x712d3931
  34:	616d2d34 	cmnvs	sp, r4, lsr sp
  38:	29726f6a 	ldmdbcs	r2!, {r1, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
  3c:	322e3920 	eorcc	r3, lr, #32, 18	; 0x80000
  40:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  44:	31393130 	teqcc	r9, r0, lsr r1
  48:	20353230 	eorscs	r3, r5, r0, lsr r2
  4c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  50:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  54:	415b2029 	cmpmi	fp, r9, lsr #32
  58:	612f4d52 			; <UNDEFINED> instruction: 0x612f4d52
  5c:	392d6d72 	pushcc	{r1, r4, r5, r6, r8, sl, fp, sp, lr}
  60:	6172622d 	cmnvs	r2, sp, lsr #4
  64:	2068636e 	rsbcs	r6, r8, lr, ror #6
  68:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
  6c:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
  70:	37373220 	ldrcc	r3, [r7, -r0, lsr #4]!
  74:	5d393935 			; <UNDEFINED> instruction: 0x5d393935
	...

Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002b41 	andeq	r2, r0, r1, asr #22
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000021 	andeq	r0, r0, r1, lsr #32
  10:	2d533605 	ldclcs	6, cr3, [r3, #-20]	; 0xffffffec
  14:	0c06004d 	stceq	0, cr0, [r6], {77}	; 0x4d
  18:	01094d07 	tsteq	r9, r7, lsl #26
  1c:	01140412 	tsteq	r4, r2, lsl r4
  20:	03170115 	tsteq	r7, #1073741829	; 0x40000005
  24:	01190118 	tsteq	r9, r8, lsl r1
  28:	061e011a 			; <UNDEFINED> instruction: 0x061e011a

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000000c 	andeq	r0, r0, ip
  14:	00000000 	andeq	r0, r0, r0
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
  20:	0000001c 	andeq	r0, r0, ip, lsl r0
  24:	00000000 	andeq	r0, r0, r0
  28:	20000010 	andcs	r0, r0, r0, lsl r0
  2c:	00000020 	andeq	r0, r0, r0, lsr #32
  30:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  34:	41018e02 	tstmi	r1, r2, lsl #28
  38:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
  3c:	00000007 	andeq	r0, r0, r7
  40:	0000001c 	andeq	r0, r0, ip, lsl r0
  44:	00000000 	andeq	r0, r0, r0
  48:	20000030 	andcs	r0, r0, r0, lsr r0
  4c:	00000062 	andeq	r0, r0, r2, rrx
  50:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  54:	41018e02 	tstmi	r1, r2, lsl #28
  58:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
  5c:	00000007 	andeq	r0, r0, r7
  60:	0000001c 	andeq	r0, r0, ip, lsl r0
  64:	00000000 	andeq	r0, r0, r0
  68:	20000092 	mulcs	r0, r2, r0
  6c:	00000062 	andeq	r0, r0, r2, rrx
  70:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  74:	41018e02 	tstmi	r1, r2, lsl #28
  78:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
  7c:	00000007 	andeq	r0, r0, r7
  80:	0000001c 	andeq	r0, r0, ip, lsl r0
  84:	00000000 	andeq	r0, r0, r0
  88:	200000f4 	strdcs	r0, [r0], -r4
  8c:	00000070 	andeq	r0, r0, r0, ror r0
  90:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  94:	41018e02 	tstmi	r1, r2, lsl #28
  98:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
  9c:	00000007 	andeq	r0, r0, r7
  a0:	0000001c 	andeq	r0, r0, ip, lsl r0
  a4:	00000000 	andeq	r0, r0, r0
  a8:	20000164 	andcs	r0, r0, r4, ror #2
  ac:	0000002c 	andeq	r0, r0, ip, lsr #32
  b0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  b4:	41018e02 	tstmi	r1, r2, lsl #28
  b8:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
  bc:	00000007 	andeq	r0, r0, r7
  c0:	0000001c 	andeq	r0, r0, ip, lsl r0
  c4:	00000000 	andeq	r0, r0, r0
  c8:	20000190 	mulcs	r0, r0, r1
  cc:	000000c2 	andeq	r0, r0, r2, asr #1
  d0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  d4:	41018e02 	tstmi	r1, r2, lsl #28
  d8:	0d41300e 	stcleq	0, cr3, [r1, #-56]	; 0xffffffc8
  dc:	00000007 	andeq	r0, r0, r7
  e0:	0000001c 	andeq	r0, r0, ip, lsl r0
  e4:	00000000 	andeq	r0, r0, r0
  e8:	20000252 	andcs	r0, r0, r2, asr r2
  ec:	0000006a 	andeq	r0, r0, sl, rrx
  f0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  f4:	41018e02 	tstmi	r1, r2, lsl #28
  f8:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
  fc:	00000007 	andeq	r0, r0, r7
 100:	0000001c 	andeq	r0, r0, ip, lsl r0
 104:	00000000 	andeq	r0, r0, r0
 108:	200002bc 			; <UNDEFINED> instruction: 0x200002bc
 10c:	00000020 	andeq	r0, r0, r0, lsr #32
 110:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 114:	41018e02 	tstmi	r1, r2, lsl #28
 118:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 11c:	00000007 	andeq	r0, r0, r7
 120:	0000001c 	andeq	r0, r0, ip, lsl r0
 124:	00000000 	andeq	r0, r0, r0
 128:	200002dc 	ldrdcs	r0, [r0], -ip
 12c:	00000090 	muleq	r0, r0, r0
 130:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 134:	41018e02 	tstmi	r1, r2, lsl #28
 138:	0d41200e 	stcleq	0, cr2, [r1, #-56]	; 0xffffffc8
 13c:	00000007 	andeq	r0, r0, r7
 140:	0000001c 	andeq	r0, r0, ip, lsl r0
 144:	00000000 	andeq	r0, r0, r0
 148:	2000036c 	andcs	r0, r0, ip, ror #6
 14c:	000000d4 	ldrdeq	r0, [r0], -r4
 150:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 154:	41018e02 	tstmi	r1, r2, lsl #28
 158:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 15c:	00000007 	andeq	r0, r0, r7
 160:	0000001c 	andeq	r0, r0, ip, lsl r0
 164:	00000000 	andeq	r0, r0, r0
 168:	20000440 	andcs	r0, r0, r0, asr #8
 16c:	00000044 	andeq	r0, r0, r4, asr #32
 170:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 174:	41018e02 	tstmi	r1, r2, lsl #28
 178:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 17c:	00000007 	andeq	r0, r0, r7
 180:	0000001c 	andeq	r0, r0, ip, lsl r0
 184:	00000000 	andeq	r0, r0, r0
 188:	20000484 	andcs	r0, r0, r4, lsl #9
 18c:	000000b4 	strheq	r0, [r0], -r4
 190:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 194:	41018e02 	tstmi	r1, r2, lsl #28
 198:	0d41200e 	stcleq	0, cr2, [r1, #-56]	; 0xffffffc8
 19c:	00000007 	andeq	r0, r0, r7
 1a0:	0000001c 	andeq	r0, r0, ip, lsl r0
 1a4:	00000000 	andeq	r0, r0, r0
 1a8:	20000538 	andcs	r0, r0, r8, lsr r5
 1ac:	00000054 	andeq	r0, r0, r4, asr r0
 1b0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 1b4:	41018e02 	tstmi	r1, r2, lsl #28
 1b8:	0d41200e 	stcleq	0, cr2, [r1, #-56]	; 0xffffffc8
 1bc:	00000007 	andeq	r0, r0, r7
 1c0:	0000001c 	andeq	r0, r0, ip, lsl r0
 1c4:	00000000 	andeq	r0, r0, r0
 1c8:	2000058c 	andcs	r0, r0, ip, lsl #11
 1cc:	0000006c 	andeq	r0, r0, ip, rrx
 1d0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 1d4:	41018e02 	tstmi	r1, r2, lsl #28
 1d8:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 1dc:	00000007 	andeq	r0, r0, r7
 1e0:	00000018 	andeq	r0, r0, r8, lsl r0
 1e4:	00000000 	andeq	r0, r0, r0
 1e8:	200005f8 	strdcs	r0, [r0], -r8
 1ec:	0000005c 	andeq	r0, r0, ip, asr r0
 1f0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 1f4:	41018e02 	tstmi	r1, r2, lsl #28
 1f8:	0000070d 	andeq	r0, r0, sp, lsl #14
 1fc:	00000018 	andeq	r0, r0, r8, lsl r0
 200:	00000000 	andeq	r0, r0, r0
 204:	20000654 	andcs	r0, r0, r4, asr r6
 208:	00000070 	andeq	r0, r0, r0, ror r0
 20c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 210:	41018e02 	tstmi	r1, r2, lsl #28
 214:	0000070d 	andeq	r0, r0, sp, lsl #14
 218:	0000001c 	andeq	r0, r0, ip, lsl r0
 21c:	00000000 	andeq	r0, r0, r0
 220:	200006c4 	andcs	r0, r0, r4, asr #13
 224:	0000012c 	andeq	r0, r0, ip, lsr #2
 228:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 22c:	41018e02 	tstmi	r1, r2, lsl #28
 230:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 234:	00000007 	andeq	r0, r0, r7
 238:	0000001c 	andeq	r0, r0, ip, lsl r0
 23c:	00000000 	andeq	r0, r0, r0
 240:	200007f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 244:	00000044 	andeq	r0, r0, r4, asr #32
 248:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 24c:	41018e02 	tstmi	r1, r2, lsl #28
 250:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 254:	00000007 	andeq	r0, r0, r7
 258:	00000018 	andeq	r0, r0, r8, lsl r0
 25c:	00000000 	andeq	r0, r0, r0
 260:	20000834 	andcs	r0, r0, r4, lsr r8
 264:	00000040 	andeq	r0, r0, r0, asr #32
 268:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 26c:	41018e02 	tstmi	r1, r2, lsl #28
 270:	0000070d 	andeq	r0, r0, sp, lsl #14
 274:	0000001c 	andeq	r0, r0, ip, lsl r0
 278:	00000000 	andeq	r0, r0, r0
 27c:	20000874 	andcs	r0, r0, r4, ror r8
 280:	00000054 	andeq	r0, r0, r4, asr r0
 284:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
 288:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 28c:	280e4101 	stmdacs	lr, {r0, r8, lr}
 290:	00070d41 	andeq	r0, r7, r1, asr #26
 294:	00000020 	andeq	r0, r0, r0, lsr #32
 298:	00000000 	andeq	r0, r0, r0
 29c:	200008c8 	andcs	r0, r0, r8, asr #17
 2a0:	0000017c 	andeq	r0, r0, ip, ror r1
 2a4:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
 2a8:	87038504 	strhi	r8, [r3, -r4, lsl #10]
 2ac:	42018e02 	andmi	r8, r1, #2, 28
 2b0:	411cb80e 	tstmi	ip, lr, lsl #16
 2b4:	0000070d 	andeq	r0, r0, sp, lsl #14
 2b8:	0000000c 	andeq	r0, r0, ip
 2bc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 2c0:	7c020001 	stcvc	0, cr0, [r2], {1}
 2c4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 2c8:	00000018 	andeq	r0, r0, r8, lsl r0
 2cc:	000002b8 			; <UNDEFINED> instruction: 0x000002b8
 2d0:	20000a48 	andcs	r0, r0, r8, asr #20
 2d4:	0000005c 	andeq	r0, r0, ip, asr r0
 2d8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 2dc:	41018e02 	tstmi	r1, r2, lsl #28
 2e0:	0000070d 	andeq	r0, r0, sp, lsl #14
 2e4:	0000001c 	andeq	r0, r0, ip, lsl r0
 2e8:	000002b8 			; <UNDEFINED> instruction: 0x000002b8
 2ec:	20000aa4 	andcs	r0, r0, r4, lsr #21
 2f0:	00000050 	andeq	r0, r0, r0, asr r0
 2f4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 2f8:	41018e02 	tstmi	r1, r2, lsl #28
 2fc:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 300:	00000007 	andeq	r0, r0, r7
 304:	0000001c 	andeq	r0, r0, ip, lsl r0
 308:	000002b8 			; <UNDEFINED> instruction: 0x000002b8
 30c:	20000af4 	strdcs	r0, [r0], -r4
 310:	00000044 	andeq	r0, r0, r4, asr #32
 314:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 318:	41018e02 	tstmi	r1, r2, lsl #28
 31c:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 320:	00000007 	andeq	r0, r0, r7
 324:	0000001c 	andeq	r0, r0, ip, lsl r0
 328:	000002b8 			; <UNDEFINED> instruction: 0x000002b8
 32c:	20000b38 	andcs	r0, r0, r8, lsr fp
 330:	0000005a 	andeq	r0, r0, sl, asr r0
 334:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 338:	41018e02 	tstmi	r1, r2, lsl #28
 33c:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 340:	00000007 	andeq	r0, r0, r7
 344:	00000018 	andeq	r0, r0, r8, lsl r0
 348:	000002b8 			; <UNDEFINED> instruction: 0x000002b8
 34c:	20000b92 	mulcs	r0, r2, fp
 350:	0000003e 	andeq	r0, r0, lr, lsr r0
 354:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 358:	41018e02 	tstmi	r1, r2, lsl #28
 35c:	0000070d 	andeq	r0, r0, sp, lsl #14
 360:	0000001c 	andeq	r0, r0, ip, lsl r0
 364:	000002b8 			; <UNDEFINED> instruction: 0x000002b8
 368:	20000bd0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 36c:	0000008c 	andeq	r0, r0, ip, lsl #1
 370:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 374:	41018e02 	tstmi	r1, r2, lsl #28
 378:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 37c:	00000007 	andeq	r0, r0, r7
 380:	0000001c 	andeq	r0, r0, ip, lsl r0
 384:	000002b8 			; <UNDEFINED> instruction: 0x000002b8
 388:	20000c5c 	andcs	r0, r0, ip, asr ip
 38c:	0000002a 	andeq	r0, r0, sl, lsr #32
 390:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 394:	41018e02 	tstmi	r1, r2, lsl #28
 398:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 39c:	00000007 	andeq	r0, r0, r7
 3a0:	0000001c 	andeq	r0, r0, ip, lsl r0
 3a4:	000002b8 			; <UNDEFINED> instruction: 0x000002b8
 3a8:	20000c86 	andcs	r0, r0, r6, lsl #25
 3ac:	00000076 	andeq	r0, r0, r6, ror r0
 3b0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 3b4:	41018e02 	tstmi	r1, r2, lsl #28
 3b8:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 3bc:	00000007 	andeq	r0, r0, r7
 3c0:	0000001c 	andeq	r0, r0, ip, lsl r0
 3c4:	000002b8 			; <UNDEFINED> instruction: 0x000002b8
 3c8:	20000cfc 	strdcs	r0, [r0], -ip
 3cc:	00000046 	andeq	r0, r0, r6, asr #32
 3d0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 3d4:	41018e02 	tstmi	r1, r2, lsl #28
 3d8:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 3dc:	00000007 	andeq	r0, r0, r7
 3e0:	0000001c 	andeq	r0, r0, ip, lsl r0
 3e4:	000002b8 			; <UNDEFINED> instruction: 0x000002b8
 3e8:	20000d42 	andcs	r0, r0, r2, asr #26
 3ec:	00000046 	andeq	r0, r0, r6, asr #32
 3f0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 3f4:	41018e02 	tstmi	r1, r2, lsl #28
 3f8:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 3fc:	00000007 	andeq	r0, r0, r7
 400:	0000001c 	andeq	r0, r0, ip, lsl r0
 404:	000002b8 			; <UNDEFINED> instruction: 0x000002b8
 408:	20000d88 	andcs	r0, r0, r8, lsl #27
 40c:	0000005a 	andeq	r0, r0, sl, asr r0
 410:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 414:	41018e02 	tstmi	r1, r2, lsl #28
 418:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 41c:	00000007 	andeq	r0, r0, r7
 420:	0000001c 	andeq	r0, r0, ip, lsl r0
 424:	000002b8 			; <UNDEFINED> instruction: 0x000002b8
 428:	20000de2 	andcs	r0, r0, r2, ror #27
 42c:	00000036 	andeq	r0, r0, r6, lsr r0
 430:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 434:	41018e02 	tstmi	r1, r2, lsl #28
 438:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 43c:	00000007 	andeq	r0, r0, r7
 440:	0000001c 	andeq	r0, r0, ip, lsl r0
 444:	000002b8 			; <UNDEFINED> instruction: 0x000002b8
 448:	20000e18 	andcs	r0, r0, r8, lsl lr
 44c:	00000084 	andeq	r0, r0, r4, lsl #1
 450:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 454:	41018e02 	tstmi	r1, r2, lsl #28
 458:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 45c:	00000007 	andeq	r0, r0, r7
 460:	0000001c 	andeq	r0, r0, ip, lsl r0
 464:	000002b8 			; <UNDEFINED> instruction: 0x000002b8
 468:	20000e9c 	mulcs	r0, ip, lr
 46c:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 470:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 474:	41018e02 	tstmi	r1, r2, lsl #28
 478:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 47c:	00000007 	andeq	r0, r0, r7
 480:	0000000c 	andeq	r0, r0, ip
 484:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 488:	7c020001 	stcvc	0, cr0, [r2], {1}
 48c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 490:	0000001c 	andeq	r0, r0, ip, lsl r0
 494:	00000480 	andeq	r0, r0, r0, lsl #9
 498:	20000f6c 	andcs	r0, r0, ip, ror #30
 49c:	00000030 	andeq	r0, r0, r0, lsr r0
 4a0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 4a4:	41018e02 	tstmi	r1, r2, lsl #28
 4a8:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 4ac:	00000007 	andeq	r0, r0, r7
 4b0:	00000018 	andeq	r0, r0, r8, lsl r0
 4b4:	00000480 	andeq	r0, r0, r0, lsl #9
 4b8:	20000f9c 	mulcs	r0, ip, pc	; <UNPREDICTABLE>
 4bc:	0000001c 	andeq	r0, r0, ip, lsl r0
 4c0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 4c4:	41018e02 	tstmi	r1, r2, lsl #28
 4c8:	0000070d 	andeq	r0, r0, sp, lsl #14
 4cc:	00000018 	andeq	r0, r0, r8, lsl r0
 4d0:	00000480 	andeq	r0, r0, r0, lsl #9
 4d4:	20000fb8 			; <UNDEFINED> instruction: 0x20000fb8
 4d8:	00000018 	andeq	r0, r0, r8, lsl r0
 4dc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 4e0:	41018e02 	tstmi	r1, r2, lsl #28
 4e4:	0000070d 	andeq	r0, r0, sp, lsl #14
 4e8:	00000018 	andeq	r0, r0, r8, lsl r0
 4ec:	00000480 	andeq	r0, r0, r0, lsl #9
 4f0:	20000fd0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 4f4:	0000001c 	andeq	r0, r0, ip, lsl r0
 4f8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 4fc:	41018e02 	tstmi	r1, r2, lsl #28
 500:	0000070d 	andeq	r0, r0, sp, lsl #14
 504:	00000018 	andeq	r0, r0, r8, lsl r0
 508:	00000480 	andeq	r0, r0, r0, lsl #9
 50c:	20000fec 	andcs	r0, r0, ip, ror #31
 510:	00000014 	andeq	r0, r0, r4, lsl r0
 514:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 518:	41018e02 	tstmi	r1, r2, lsl #28
 51c:	0000070d 	andeq	r0, r0, sp, lsl #14
 520:	0000001c 	andeq	r0, r0, ip, lsl r0
 524:	00000480 	andeq	r0, r0, r0, lsl #9
 528:	20001000 	andcs	r1, r0, r0
 52c:	00000060 	andeq	r0, r0, r0, rrx
 530:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 534:	41018e02 	tstmi	r1, r2, lsl #28
 538:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 53c:	00000007 	andeq	r0, r0, r7
 540:	0000001c 	andeq	r0, r0, ip, lsl r0
 544:	00000480 	andeq	r0, r0, r0, lsl #9
 548:	20001060 	andcs	r1, r0, r0, rrx
 54c:	00000048 	andeq	r0, r0, r8, asr #32
 550:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 554:	41018e02 	tstmi	r1, r2, lsl #28
 558:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 55c:	00000007 	andeq	r0, r0, r7
 560:	0000000c 	andeq	r0, r0, ip
 564:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 568:	7c020001 	stcvc	0, cr0, [r2], {1}
 56c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 570:	00000018 	andeq	r0, r0, r8, lsl r0
 574:	00000560 	andeq	r0, r0, r0, ror #10
 578:	200010a8 	andcs	r1, r0, r8, lsr #1
 57c:	0000001a 	andeq	r0, r0, sl, lsl r0
 580:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 584:	41018e02 	tstmi	r1, r2, lsl #28
 588:	0000070d 	andeq	r0, r0, sp, lsl #14
 58c:	0000001c 	andeq	r0, r0, ip, lsl r0
 590:	00000560 	andeq	r0, r0, r0, ror #10
 594:	200010c2 	andcs	r1, r0, r2, asr #1
 598:	00000032 	andeq	r0, r0, r2, lsr r0
 59c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 5a0:	41018e02 	tstmi	r1, r2, lsl #28
 5a4:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 5a8:	00000007 	andeq	r0, r0, r7
 5ac:	0000001c 	andeq	r0, r0, ip, lsl r0
 5b0:	00000560 	andeq	r0, r0, r0, ror #10
 5b4:	200010f4 	strdcs	r1, [r0], -r4
 5b8:	0000003c 	andeq	r0, r0, ip, lsr r0
 5bc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 5c0:	41018e02 	tstmi	r1, r2, lsl #28
 5c4:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 5c8:	00000007 	andeq	r0, r0, r7
 5cc:	0000001c 	andeq	r0, r0, ip, lsl r0
 5d0:	00000560 	andeq	r0, r0, r0, ror #10
 5d4:	20001130 	andcs	r1, r0, r0, lsr r1
 5d8:	0000002a 	andeq	r0, r0, sl, lsr #32
 5dc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 5e0:	41018e02 	tstmi	r1, r2, lsl #28
 5e4:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 5e8:	00000007 	andeq	r0, r0, r7
 5ec:	0000001c 	andeq	r0, r0, ip, lsl r0
 5f0:	00000560 	andeq	r0, r0, r0, ror #10
 5f4:	2000115a 	andcs	r1, r0, sl, asr r1
 5f8:	0000002a 	andeq	r0, r0, sl, lsr #32
 5fc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 600:	41018e02 	tstmi	r1, r2, lsl #28
 604:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 608:	00000007 	andeq	r0, r0, r7
 60c:	0000001c 	andeq	r0, r0, ip, lsl r0
 610:	00000560 	andeq	r0, r0, r0, ror #10
 614:	20001184 	andcs	r1, r0, r4, lsl #3
 618:	00000030 	andeq	r0, r0, r0, lsr r0
 61c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 620:	41018e02 	tstmi	r1, r2, lsl #28
 624:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 628:	00000007 	andeq	r0, r0, r7
 62c:	0000001c 	andeq	r0, r0, ip, lsl r0
 630:	00000560 	andeq	r0, r0, r0, ror #10
 634:	200011b4 			; <UNDEFINED> instruction: 0x200011b4
 638:	00000034 	andeq	r0, r0, r4, lsr r0
 63c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 640:	41018e02 	tstmi	r1, r2, lsl #28
 644:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 648:	00000007 	andeq	r0, r0, r7
 64c:	0000001c 	andeq	r0, r0, ip, lsl r0
 650:	00000560 	andeq	r0, r0, r0, ror #10
 654:	200011e8 	andcs	r1, r0, r8, ror #3
 658:	0000003c 	andeq	r0, r0, ip, lsr r0
 65c:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
 660:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 664:	180e4101 	stmdane	lr, {r0, r8, lr}
 668:	00070d41 	andeq	r0, r7, r1, asr #26
 66c:	0000001c 	andeq	r0, r0, ip, lsl r0
 670:	00000560 	andeq	r0, r0, r0, ror #10
 674:	20001224 	andcs	r1, r0, r4, lsr #4
 678:	0000003c 	andeq	r0, r0, ip, lsr r0
 67c:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
 680:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 684:	180e4101 	stmdane	lr, {r0, r8, lr}
 688:	00070d41 	andeq	r0, r7, r1, asr #26
 68c:	00000018 	andeq	r0, r0, r8, lsl r0
 690:	00000560 	andeq	r0, r0, r0, ror #10
 694:	20001260 	andcs	r1, r0, r0, ror #4
 698:	0000002e 	andeq	r0, r0, lr, lsr #32
 69c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 6a0:	41018e02 	tstmi	r1, r2, lsl #28
 6a4:	0000070d 	andeq	r0, r0, sp, lsl #14
 6a8:	00000018 	andeq	r0, r0, r8, lsl r0
 6ac:	00000560 	andeq	r0, r0, r0, ror #10
 6b0:	2000128e 	andcs	r1, r0, lr, lsl #5
 6b4:	0000002e 	andeq	r0, r0, lr, lsr #32
 6b8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 6bc:	41018e02 	tstmi	r1, r2, lsl #28
 6c0:	0000070d 	andeq	r0, r0, sp, lsl #14
 6c4:	00000018 	andeq	r0, r0, r8, lsl r0
 6c8:	00000560 	andeq	r0, r0, r0, ror #10
 6cc:	200012bc 			; <UNDEFINED> instruction: 0x200012bc
 6d0:	0000002e 	andeq	r0, r0, lr, lsr #32
 6d4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 6d8:	41018e02 	tstmi	r1, r2, lsl #28
 6dc:	0000070d 	andeq	r0, r0, sp, lsl #14
 6e0:	00000018 	andeq	r0, r0, r8, lsl r0
 6e4:	00000560 	andeq	r0, r0, r0, ror #10
 6e8:	200012ea 	andcs	r1, r0, sl, ror #5
 6ec:	0000002e 	andeq	r0, r0, lr, lsr #32
 6f0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 6f4:	41018e02 	tstmi	r1, r2, lsl #28
 6f8:	0000070d 	andeq	r0, r0, sp, lsl #14
 6fc:	0000001c 	andeq	r0, r0, ip, lsl r0
 700:	00000560 	andeq	r0, r0, r0, ror #10
 704:	20001318 	andcs	r1, r0, r8, lsl r3
 708:	0000002a 	andeq	r0, r0, sl, lsr #32
 70c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 710:	41018e02 	tstmi	r1, r2, lsl #28
 714:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 718:	00000007 	andeq	r0, r0, r7
 71c:	0000001c 	andeq	r0, r0, ip, lsl r0
 720:	00000560 	andeq	r0, r0, r0, ror #10
 724:	20001342 	andcs	r1, r0, r2, asr #6
 728:	0000004c 	andeq	r0, r0, ip, asr #32
 72c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 730:	41018e02 	tstmi	r1, r2, lsl #28
 734:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 738:	00000007 	andeq	r0, r0, r7
 73c:	0000001c 	andeq	r0, r0, ip, lsl r0
 740:	00000560 	andeq	r0, r0, r0, ror #10
 744:	2000138e 	andcs	r1, r0, lr, lsl #7
 748:	00000038 	andeq	r0, r0, r8, lsr r0
 74c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 750:	41018e02 	tstmi	r1, r2, lsl #28
 754:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 758:	00000007 	andeq	r0, r0, r7
 75c:	0000000c 	andeq	r0, r0, ip
 760:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 764:	7c020001 	stcvc	0, cr0, [r2], {1}
 768:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 76c:	00000018 	andeq	r0, r0, r8, lsl r0
 770:	0000075c 	andeq	r0, r0, ip, asr r7
 774:	200013c8 	andcs	r1, r0, r8, asr #7
 778:	00000044 	andeq	r0, r0, r4, asr #32
 77c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 780:	41018e02 	tstmi	r1, r2, lsl #28
 784:	0000070d 	andeq	r0, r0, sp, lsl #14
 788:	00000018 	andeq	r0, r0, r8, lsl r0
 78c:	0000075c 	andeq	r0, r0, ip, asr r7
 790:	2000140c 	andcs	r1, r0, ip, lsl #8
 794:	00000012 	andeq	r0, r0, r2, lsl r0
 798:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 79c:	41018e02 	tstmi	r1, r2, lsl #28
 7a0:	0000070d 	andeq	r0, r0, sp, lsl #14
 7a4:	0000001c 	andeq	r0, r0, ip, lsl r0
 7a8:	0000075c 	andeq	r0, r0, ip, asr r7
 7ac:	2000141e 	andcs	r1, r0, lr, lsl r4
 7b0:	0000002e 	andeq	r0, r0, lr, lsr #32
 7b4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 7b8:	41018e02 	tstmi	r1, r2, lsl #28
 7bc:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 7c0:	00000007 	andeq	r0, r0, r7
 7c4:	0000001c 	andeq	r0, r0, ip, lsl r0
 7c8:	0000075c 	andeq	r0, r0, ip, asr r7
 7cc:	2000144c 	andcs	r1, r0, ip, asr #8
 7d0:	00000028 	andeq	r0, r0, r8, lsr #32
 7d4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 7d8:	41018e02 	tstmi	r1, r2, lsl #28
 7dc:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 7e0:	00000007 	andeq	r0, r0, r7
 7e4:	0000000c 	andeq	r0, r0, ip
 7e8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 7ec:	7c020001 	stcvc	0, cr0, [r2], {1}
 7f0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 7f4:	0000001c 	andeq	r0, r0, ip, lsl r0
 7f8:	000007e4 	andeq	r0, r0, r4, ror #15
 7fc:	20001474 	andcs	r1, r0, r4, ror r4
 800:	00000024 	andeq	r0, r0, r4, lsr #32
 804:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 808:	41018e02 	tstmi	r1, r2, lsl #28
 80c:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 810:	00000007 	andeq	r0, r0, r7
 814:	0000001c 	andeq	r0, r0, ip, lsl r0
 818:	000007e4 	andeq	r0, r0, r4, ror #15
 81c:	20001498 	mulcs	r0, r8, r4
 820:	00000044 	andeq	r0, r0, r4, asr #32
 824:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 828:	41018e02 	tstmi	r1, r2, lsl #28
 82c:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 830:	00000007 	andeq	r0, r0, r7
 834:	0000001c 	andeq	r0, r0, ip, lsl r0
 838:	000007e4 	andeq	r0, r0, r4, ror #15
 83c:	200014dc 	ldrdcs	r1, [r0], -ip
 840:	00000068 	andeq	r0, r0, r8, rrx
 844:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
 848:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 84c:	380e4101 	stmdacc	lr, {r0, r8, lr}
 850:	00070d41 	andeq	r0, r7, r1, asr #26
 854:	0000001c 	andeq	r0, r0, ip, lsl r0
 858:	000007e4 	andeq	r0, r0, r4, ror #15
 85c:	20001544 	andcs	r1, r0, r4, asr #10
 860:	00000020 	andeq	r0, r0, r0, lsr #32
 864:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 868:	41018e02 	tstmi	r1, r2, lsl #28
 86c:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 870:	00000007 	andeq	r0, r0, r7
 874:	0000000c 	andeq	r0, r0, ip
 878:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 87c:	7c010001 	stcvc	0, cr0, [r1], {1}
 880:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 884:	0000000c 	andeq	r0, r0, ip
 888:	00000874 	andeq	r0, r0, r4, ror r8
 88c:	20001565 	andcs	r1, r0, r5, ror #10
 890:	000001cc 	andeq	r0, r0, ip, asr #3
