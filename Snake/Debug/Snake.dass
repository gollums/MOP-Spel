
./Debug/Snake.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:
 #define RESTART 0xD
 
__attribute__((naked)) __attribute__((section (".start_section")) )
void startup ( void )
{
__asm__ volatile(" LDR R0,=0x2001C000\n");		/* set stack */
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <startup+0xc>)
__asm__ volatile(" MOV SP,R0\n");
20000002:	4685      	mov	sp, r0
__asm__ volatile(" BL main\n");					/* call main */
20000004:	f000 fb58 	bl	200006b8 <main>
__asm__ volatile(".L1: B .L1\n");				/* never return */
20000008:	e7fe      	b.n	20000008 <startup+0x8>
};
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <ascii_init>:
#include <defines.h>
#include <asciidisplay.h>

void ascii_init(void){ /**/
20000010:	b580      	push	{r7, lr}
20000012:	af00      	add	r7, sp, #0
    /*function set*/
    funtion_set();
20000014:	f000 f8ef 	bl	200001f6 <funtion_set>
    
    /*Display Control*/
    display_control();
20000018:	f000 f904 	bl	20000224 <display_control>
    
    /*Clear Display*/
    clear_display();
2000001c:	f000 f8d4 	bl	200001c8 <clear_display>
    
    /*Entry mode set*/
    entry_mode_set();
20000020:	f000 f917 	bl	20000252 <entry_mode_set>
}
20000024:	46c0      	nop			; (mov r8, r8)
20000026:	46bd      	mov	sp, r7
20000028:	bd80      	pop	{r7, pc}

2000002a <ascii_ctrl_bit_set>:

/*adressera ASCII-display, ettställ de bitar som är 1 i x*/
void ascii_ctrl_bit_set(unsigned char x){
2000002a:	b580      	push	{r7, lr}
2000002c:	b082      	sub	sp, #8
2000002e:	af00      	add	r7, sp, #0
20000030:	0002      	movs	r2, r0
20000032:	1dfb      	adds	r3, r7, #7
20000034:	701a      	strb	r2, [r3, #0]
    *GPIO_E_ODR_LOW |= ( B_SELECT | x );
20000036:	4b08      	ldr	r3, [pc, #32]	; (20000058 <ascii_ctrl_bit_set+0x2e>)
20000038:	781b      	ldrb	r3, [r3, #0]
2000003a:	b2da      	uxtb	r2, r3
2000003c:	1dfb      	adds	r3, r7, #7
2000003e:	781b      	ldrb	r3, [r3, #0]
20000040:	4313      	orrs	r3, r2
20000042:	b2db      	uxtb	r3, r3
20000044:	4a04      	ldr	r2, [pc, #16]	; (20000058 <ascii_ctrl_bit_set+0x2e>)
20000046:	2104      	movs	r1, #4
20000048:	430b      	orrs	r3, r1
2000004a:	b2db      	uxtb	r3, r3
2000004c:	7013      	strb	r3, [r2, #0]
}
2000004e:	46c0      	nop			; (mov r8, r8)
20000050:	46bd      	mov	sp, r7
20000052:	b002      	add	sp, #8
20000054:	bd80      	pop	{r7, pc}
20000056:	46c0      	nop			; (mov r8, r8)
20000058:	40021014 	andmi	r1, r2, r4, lsl r0

2000005c <ascii_ctrl_bit_clear>:

/*adressera ASCII-display, nollställ de bitar som är 1 i x*/
void ascii_ctrl_bit_clear(unsigned char x){
2000005c:	b580      	push	{r7, lr}
2000005e:	b082      	sub	sp, #8
20000060:	af00      	add	r7, sp, #0
20000062:	0002      	movs	r2, r0
20000064:	1dfb      	adds	r3, r7, #7
20000066:	701a      	strb	r2, [r3, #0]
    *GPIO_E_ODR_LOW &= ( B_SELECT | ~x);
20000068:	4b0a      	ldr	r3, [pc, #40]	; (20000094 <ascii_ctrl_bit_clear+0x38>)
2000006a:	781b      	ldrb	r3, [r3, #0]
2000006c:	b2db      	uxtb	r3, r3
2000006e:	b25b      	sxtb	r3, r3
20000070:	1dfa      	adds	r2, r7, #7
20000072:	7812      	ldrb	r2, [r2, #0]
20000074:	b252      	sxtb	r2, r2
20000076:	43d2      	mvns	r2, r2
20000078:	b252      	sxtb	r2, r2
2000007a:	2104      	movs	r1, #4
2000007c:	430a      	orrs	r2, r1
2000007e:	b252      	sxtb	r2, r2
20000080:	4013      	ands	r3, r2
20000082:	b25a      	sxtb	r2, r3
20000084:	4b03      	ldr	r3, [pc, #12]	; (20000094 <ascii_ctrl_bit_clear+0x38>)
20000086:	b2d2      	uxtb	r2, r2
20000088:	701a      	strb	r2, [r3, #0]
    
}
2000008a:	46c0      	nop			; (mov r8, r8)
2000008c:	46bd      	mov	sp, r7
2000008e:	b002      	add	sp, #8
20000090:	bd80      	pop	{r7, pc}
20000092:	46c0      	nop			; (mov r8, r8)
20000094:	40021014 	andmi	r1, r2, r4, lsl r0

20000098 <ascii_write_cmd>:

void ascii_write_cmd(unsigned char command){
20000098:	b580      	push	{r7, lr}
2000009a:	b082      	sub	sp, #8
2000009c:	af00      	add	r7, sp, #0
2000009e:	0002      	movs	r2, r0
200000a0:	1dfb      	adds	r3, r7, #7
200000a2:	701a      	strb	r2, [r3, #0]
    ascii_ctrl_bit_clear(B_RS);
200000a4:	2001      	movs	r0, #1
200000a6:	f7ff ffd9 	bl	2000005c <ascii_ctrl_bit_clear>
    ascii_ctrl_bit_clear(B_RW);
200000aa:	2002      	movs	r0, #2
200000ac:	f7ff ffd6 	bl	2000005c <ascii_ctrl_bit_clear>
    ascii_write_controller(command);
200000b0:	1dfb      	adds	r3, r7, #7
200000b2:	781b      	ldrb	r3, [r3, #0]
200000b4:	0018      	movs	r0, r3
200000b6:	f000 f819 	bl	200000ec <ascii_write_controller>
}
200000ba:	46c0      	nop			; (mov r8, r8)
200000bc:	46bd      	mov	sp, r7
200000be:	b002      	add	sp, #8
200000c0:	bd80      	pop	{r7, pc}

200000c2 <ascii_write_data>:

void ascii_write_data(unsigned char data){
200000c2:	b580      	push	{r7, lr}
200000c4:	b082      	sub	sp, #8
200000c6:	af00      	add	r7, sp, #0
200000c8:	0002      	movs	r2, r0
200000ca:	1dfb      	adds	r3, r7, #7
200000cc:	701a      	strb	r2, [r3, #0]
    ascii_ctrl_bit_set(B_RS);
200000ce:	2001      	movs	r0, #1
200000d0:	f7ff ffab 	bl	2000002a <ascii_ctrl_bit_set>
    ascii_ctrl_bit_clear(B_RW);
200000d4:	2002      	movs	r0, #2
200000d6:	f7ff ffc1 	bl	2000005c <ascii_ctrl_bit_clear>
    ascii_write_controller(data);
200000da:	1dfb      	adds	r3, r7, #7
200000dc:	781b      	ldrb	r3, [r3, #0]
200000de:	0018      	movs	r0, r3
200000e0:	f000 f804 	bl	200000ec <ascii_write_controller>
}
200000e4:	46c0      	nop			; (mov r8, r8)
200000e6:	46bd      	mov	sp, r7
200000e8:	b002      	add	sp, #8
200000ea:	bd80      	pop	{r7, pc}

200000ec <ascii_write_controller>:

void ascii_write_controller(unsigned char byte){
200000ec:	b580      	push	{r7, lr}
200000ee:	b082      	sub	sp, #8
200000f0:	af00      	add	r7, sp, #0
200000f2:	0002      	movs	r2, r0
200000f4:	1dfb      	adds	r3, r7, #7
200000f6:	701a      	strb	r2, [r3, #0]
    ascii_ctrl_bit_set(B_E);
200000f8:	2040      	movs	r0, #64	; 0x40
200000fa:	f7ff ff96 	bl	2000002a <ascii_ctrl_bit_set>
    *GPIO_E_ODR_HIGH = byte;
200000fe:	4a06      	ldr	r2, [pc, #24]	; (20000118 <ascii_write_controller+0x2c>)
20000100:	1dfb      	adds	r3, r7, #7
20000102:	781b      	ldrb	r3, [r3, #0]
20000104:	7013      	strb	r3, [r2, #0]
    delay_250ns();
20000106:	f000 fc4f 	bl	200009a8 <delay_250ns>
    ascii_ctrl_bit_clear(B_E);
2000010a:	2040      	movs	r0, #64	; 0x40
2000010c:	f7ff ffa6 	bl	2000005c <ascii_ctrl_bit_clear>
}
20000110:	46c0      	nop			; (mov r8, r8)
20000112:	46bd      	mov	sp, r7
20000114:	b002      	add	sp, #8
20000116:	bd80      	pop	{r7, pc}
20000118:	40021015 	andmi	r1, r2, r5, lsl r0

2000011c <ascii_read_controller>:

unsigned char ascii_read_controller(void){
2000011c:	b580      	push	{r7, lr}
2000011e:	b082      	sub	sp, #8
20000120:	af00      	add	r7, sp, #0
    ascii_ctrl_bit_set(B_E);
20000122:	2040      	movs	r0, #64	; 0x40
20000124:	f7ff ff81 	bl	2000002a <ascii_ctrl_bit_set>
    delay_250ns();
20000128:	f000 fc3e 	bl	200009a8 <delay_250ns>
    delay_250ns();
2000012c:	f000 fc3c 	bl	200009a8 <delay_250ns>
    char retVal = *GPIO_E_IDR_HIGH;
20000130:	4a06      	ldr	r2, [pc, #24]	; (2000014c <ascii_read_controller+0x30>)
20000132:	1dfb      	adds	r3, r7, #7
20000134:	7812      	ldrb	r2, [r2, #0]
20000136:	701a      	strb	r2, [r3, #0]
    ascii_ctrl_bit_clear(B_E);
20000138:	2040      	movs	r0, #64	; 0x40
2000013a:	f7ff ff8f 	bl	2000005c <ascii_ctrl_bit_clear>
    return retVal;
2000013e:	1dfb      	adds	r3, r7, #7
20000140:	781b      	ldrb	r3, [r3, #0]
}
20000142:	0018      	movs	r0, r3
20000144:	46bd      	mov	sp, r7
20000146:	b002      	add	sp, #8
20000148:	bd80      	pop	{r7, pc}
2000014a:	46c0      	nop			; (mov r8, r8)
2000014c:	40021011 	andmi	r1, r2, r1, lsl r0

20000150 <ascii_read_status>:

unsigned char ascii_read_status(void){
20000150:	b590      	push	{r4, r7, lr}
20000152:	b083      	sub	sp, #12
20000154:	af00      	add	r7, sp, #0
    *(GPIO_E_MODER+0x02) = 0x0000;
20000156:	4b0b      	ldr	r3, [pc, #44]	; (20000184 <ascii_read_status+0x34>)
20000158:	2200      	movs	r2, #0
2000015a:	601a      	str	r2, [r3, #0]
    ascii_ctrl_bit_clear(B_RS);
2000015c:	2001      	movs	r0, #1
2000015e:	f7ff ff7d 	bl	2000005c <ascii_ctrl_bit_clear>
    ascii_ctrl_bit_set(B_RW);
20000162:	2002      	movs	r0, #2
20000164:	f7ff ff61 	bl	2000002a <ascii_ctrl_bit_set>
    char retStat = ascii_read_controller(); 
20000168:	1dfc      	adds	r4, r7, #7
2000016a:	f7ff ffd7 	bl	2000011c <ascii_read_controller>
2000016e:	0003      	movs	r3, r0
20000170:	7023      	strb	r3, [r4, #0]
    *(GPIO_E_MODER+0x02) = 0x5555;
20000172:	4b04      	ldr	r3, [pc, #16]	; (20000184 <ascii_read_status+0x34>)
20000174:	4a04      	ldr	r2, [pc, #16]	; (20000188 <ascii_read_status+0x38>)
20000176:	601a      	str	r2, [r3, #0]
    return retStat;
20000178:	1dfb      	adds	r3, r7, #7
2000017a:	781b      	ldrb	r3, [r3, #0]
}
2000017c:	0018      	movs	r0, r3
2000017e:	46bd      	mov	sp, r7
20000180:	b003      	add	sp, #12
20000182:	bd90      	pop	{r4, r7, pc}
20000184:	40021008 	andmi	r1, r2, r8
20000188:	00005555 	andeq	r5, r0, r5, asr r5

2000018c <ascii_read_data>:

unsigned char ascii_read_data(void){
2000018c:	b590      	push	{r4, r7, lr}
2000018e:	b083      	sub	sp, #12
20000190:	af00      	add	r7, sp, #0
    *(GPIO_E_MODER+0x02) = 0x0000;
20000192:	4b0b      	ldr	r3, [pc, #44]	; (200001c0 <ascii_read_data+0x34>)
20000194:	2200      	movs	r2, #0
20000196:	601a      	str	r2, [r3, #0]
    ascii_ctrl_bit_set(B_RS);
20000198:	2001      	movs	r0, #1
2000019a:	f7ff ff46 	bl	2000002a <ascii_ctrl_bit_set>
    ascii_ctrl_bit_set(B_RW);
2000019e:	2002      	movs	r0, #2
200001a0:	f7ff ff43 	bl	2000002a <ascii_ctrl_bit_set>
    char retData = ascii_read_controller();
200001a4:	1dfc      	adds	r4, r7, #7
200001a6:	f7ff ffb9 	bl	2000011c <ascii_read_controller>
200001aa:	0003      	movs	r3, r0
200001ac:	7023      	strb	r3, [r4, #0]
    *(GPIO_E_MODER+0x02) = 0x5555;
200001ae:	4b04      	ldr	r3, [pc, #16]	; (200001c0 <ascii_read_data+0x34>)
200001b0:	4a04      	ldr	r2, [pc, #16]	; (200001c4 <ascii_read_data+0x38>)
200001b2:	601a      	str	r2, [r3, #0]
    return retData;
200001b4:	1dfb      	adds	r3, r7, #7
200001b6:	781b      	ldrb	r3, [r3, #0]
}
200001b8:	0018      	movs	r0, r3
200001ba:	46bd      	mov	sp, r7
200001bc:	b003      	add	sp, #12
200001be:	bd90      	pop	{r4, r7, pc}
200001c0:	40021008 	andmi	r1, r2, r8
200001c4:	00005555 	andeq	r5, r0, r5, asr r5

200001c8 <clear_display>:

void clear_display(){
200001c8:	b580      	push	{r7, lr}
200001ca:	af00      	add	r7, sp, #0
    while((ascii_read_status() & 0x80) == 0x80){}
200001cc:	46c0      	nop			; (mov r8, r8)
200001ce:	f7ff ffbf 	bl	20000150 <ascii_read_status>
200001d2:	0003      	movs	r3, r0
200001d4:	001a      	movs	r2, r3
200001d6:	2380      	movs	r3, #128	; 0x80
200001d8:	4013      	ands	r3, r2
200001da:	2b80      	cmp	r3, #128	; 0x80
200001dc:	d0f7      	beq.n	200001ce <clear_display+0x6>
    delay_mikro(8);
200001de:	2008      	movs	r0, #8
200001e0:	f000 fbec 	bl	200009bc <delay_mikro>
    ascii_write_cmd(1); /*clear display*/
200001e4:	2001      	movs	r0, #1
200001e6:	f7ff ff57 	bl	20000098 <ascii_write_cmd>
    delay_milli(2);
200001ea:	2002      	movs	r0, #2
200001ec:	f000 fbee 	bl	200009cc <delay_milli>
}
200001f0:	46c0      	nop			; (mov r8, r8)
200001f2:	46bd      	mov	sp, r7
200001f4:	bd80      	pop	{r7, pc}

200001f6 <funtion_set>:

void funtion_set(){
200001f6:	b580      	push	{r7, lr}
200001f8:	af00      	add	r7, sp, #0
    while((ascii_read_status() & 0x80) == 0x80){}
200001fa:	46c0      	nop			; (mov r8, r8)
200001fc:	f7ff ffa8 	bl	20000150 <ascii_read_status>
20000200:	0003      	movs	r3, r0
20000202:	001a      	movs	r2, r3
20000204:	2380      	movs	r3, #128	; 0x80
20000206:	4013      	ands	r3, r2
20000208:	2b80      	cmp	r3, #128	; 0x80
2000020a:	d0f7      	beq.n	200001fc <funtion_set+0x6>
    delay_mikro(8);
2000020c:	2008      	movs	r0, #8
2000020e:	f000 fbd5 	bl	200009bc <delay_mikro>
    ascii_write_cmd(0x38); //0b00111000
20000212:	2038      	movs	r0, #56	; 0x38
20000214:	f7ff ff40 	bl	20000098 <ascii_write_cmd>
    delay_mikro(40);
20000218:	2028      	movs	r0, #40	; 0x28
2000021a:	f000 fbcf 	bl	200009bc <delay_mikro>
}
2000021e:	46c0      	nop			; (mov r8, r8)
20000220:	46bd      	mov	sp, r7
20000222:	bd80      	pop	{r7, pc}

20000224 <display_control>:

void display_control(){
20000224:	b580      	push	{r7, lr}
20000226:	af00      	add	r7, sp, #0
    while((ascii_read_status() & 0x80) == 0x80){}
20000228:	46c0      	nop			; (mov r8, r8)
2000022a:	f7ff ff91 	bl	20000150 <ascii_read_status>
2000022e:	0003      	movs	r3, r0
20000230:	001a      	movs	r2, r3
20000232:	2380      	movs	r3, #128	; 0x80
20000234:	4013      	ands	r3, r2
20000236:	2b80      	cmp	r3, #128	; 0x80
20000238:	d0f7      	beq.n	2000022a <display_control+0x6>
    delay_mikro(8);
2000023a:	2008      	movs	r0, #8
2000023c:	f000 fbbe 	bl	200009bc <delay_mikro>
    ascii_write_cmd(0xE);
20000240:	200e      	movs	r0, #14
20000242:	f7ff ff29 	bl	20000098 <ascii_write_cmd>
    delay_mikro(40);
20000246:	2028      	movs	r0, #40	; 0x28
20000248:	f000 fbb8 	bl	200009bc <delay_mikro>
}
2000024c:	46c0      	nop			; (mov r8, r8)
2000024e:	46bd      	mov	sp, r7
20000250:	bd80      	pop	{r7, pc}

20000252 <entry_mode_set>:

void entry_mode_set(){
20000252:	b580      	push	{r7, lr}
20000254:	af00      	add	r7, sp, #0
    while((ascii_read_status() & 0x80) == 0x80){}
20000256:	46c0      	nop			; (mov r8, r8)
20000258:	f7ff ff7a 	bl	20000150 <ascii_read_status>
2000025c:	0003      	movs	r3, r0
2000025e:	001a      	movs	r2, r3
20000260:	2380      	movs	r3, #128	; 0x80
20000262:	4013      	ands	r3, r2
20000264:	2b80      	cmp	r3, #128	; 0x80
20000266:	d0f7      	beq.n	20000258 <entry_mode_set+0x6>
    delay_mikro(8);
20000268:	2008      	movs	r0, #8
2000026a:	f000 fba7 	bl	200009bc <delay_mikro>
    ascii_write_cmd(6);
2000026e:	2006      	movs	r0, #6
20000270:	f7ff ff12 	bl	20000098 <ascii_write_cmd>
    delay_mikro(40);
20000274:	2028      	movs	r0, #40	; 0x28
20000276:	f000 fba1 	bl	200009bc <delay_mikro>
}
2000027a:	46c0      	nop			; (mov r8, r8)
2000027c:	46bd      	mov	sp, r7
2000027e:	bd80      	pop	{r7, pc}

20000280 <ascii_write_char>:

void ascii_write_char(unsigned char c){
20000280:	b580      	push	{r7, lr}
20000282:	b082      	sub	sp, #8
20000284:	af00      	add	r7, sp, #0
20000286:	0002      	movs	r2, r0
20000288:	1dfb      	adds	r3, r7, #7
2000028a:	701a      	strb	r2, [r3, #0]
    //while((ascii_read_status() & 0x80) == 0x80){} //Kommentera bort om det ska fungera...
    delay_mikro(8);
2000028c:	2008      	movs	r0, #8
2000028e:	f000 fb95 	bl	200009bc <delay_mikro>
    ascii_write_data(c);
20000292:	1dfb      	adds	r3, r7, #7
20000294:	781b      	ldrb	r3, [r3, #0]
20000296:	0018      	movs	r0, r3
20000298:	f7ff ff13 	bl	200000c2 <ascii_write_data>
    delay_mikro(45);
2000029c:	202d      	movs	r0, #45	; 0x2d
2000029e:	f000 fb8d 	bl	200009bc <delay_mikro>
}
200002a2:	46c0      	nop			; (mov r8, r8)
200002a4:	46bd      	mov	sp, r7
200002a6:	b002      	add	sp, #8
200002a8:	bd80      	pop	{r7, pc}

200002aa <ascii_gotoxy>:

void ascii_gotoxy(int x, int y){ /**/
200002aa:	b580      	push	{r7, lr}
200002ac:	b084      	sub	sp, #16
200002ae:	af00      	add	r7, sp, #0
200002b0:	6078      	str	r0, [r7, #4]
200002b2:	6039      	str	r1, [r7, #0]
    unsigned char address;
    if(y!=1)
200002b4:	683b      	ldr	r3, [r7, #0]
200002b6:	2b01      	cmp	r3, #1
200002b8:	d006      	beq.n	200002c8 <ascii_gotoxy+0x1e>
        address = 0x40 + (x-1);
200002ba:	687b      	ldr	r3, [r7, #4]
200002bc:	b2da      	uxtb	r2, r3
200002be:	230f      	movs	r3, #15
200002c0:	18fb      	adds	r3, r7, r3
200002c2:	323f      	adds	r2, #63	; 0x3f
200002c4:	701a      	strb	r2, [r3, #0]
200002c6:	e005      	b.n	200002d4 <ascii_gotoxy+0x2a>
    else address=x-1;
200002c8:	687b      	ldr	r3, [r7, #4]
200002ca:	b2da      	uxtb	r2, r3
200002cc:	230f      	movs	r3, #15
200002ce:	18fb      	adds	r3, r7, r3
200002d0:	3a01      	subs	r2, #1
200002d2:	701a      	strb	r2, [r3, #0]
    
    ascii_write_cmd( 0x80 | address);
200002d4:	230f      	movs	r3, #15
200002d6:	18fb      	adds	r3, r7, r3
200002d8:	781b      	ldrb	r3, [r3, #0]
200002da:	2280      	movs	r2, #128	; 0x80
200002dc:	4252      	negs	r2, r2
200002de:	4313      	orrs	r3, r2
200002e0:	b2db      	uxtb	r3, r3
200002e2:	0018      	movs	r0, r3
200002e4:	f7ff fed8 	bl	20000098 <ascii_write_cmd>
    delay_mikro( 45 );
200002e8:	202d      	movs	r0, #45	; 0x2d
200002ea:	f000 fb67 	bl	200009bc <delay_mikro>
200002ee:	46c0      	nop			; (mov r8, r8)
200002f0:	46bd      	mov	sp, r7
200002f2:	b004      	add	sp, #16
200002f4:	bd80      	pop	{r7, pc}
200002f6:	46c0      	nop			; (mov r8, r8)

200002f8 <set_object_speed>:

void set_object_speed(POBJECT o, int speedx, int speedy){
200002f8:	b580      	push	{r7, lr}
200002fa:	b084      	sub	sp, #16
200002fc:	af00      	add	r7, sp, #0
200002fe:	60f8      	str	r0, [r7, #12]
20000300:	60b9      	str	r1, [r7, #8]
20000302:	607a      	str	r2, [r7, #4]
    o->dirx = speedx;
20000304:	68fb      	ldr	r3, [r7, #12]
20000306:	68ba      	ldr	r2, [r7, #8]
20000308:	605a      	str	r2, [r3, #4]
    o->diry = speedy;
2000030a:	68fb      	ldr	r3, [r7, #12]
2000030c:	687a      	ldr	r2, [r7, #4]
2000030e:	609a      	str	r2, [r3, #8]
}
20000310:	46c0      	nop			; (mov r8, r8)
20000312:	46bd      	mov	sp, r7
20000314:	b004      	add	sp, #16
20000316:	bd80      	pop	{r7, pc}

20000318 <draw_object>:

void draw_object(POBJECT o){
20000318:	b580      	push	{r7, lr}
2000031a:	b084      	sub	sp, #16
2000031c:	af00      	add	r7, sp, #0
2000031e:	6078      	str	r0, [r7, #4]
    for (int i = 0; i<o->geo->numpoints; i++)
20000320:	2300      	movs	r3, #0
20000322:	60fb      	str	r3, [r7, #12]
20000324:	e01e      	b.n	20000364 <draw_object+0x4c>
        pixel(o->geo->px[i].x+o->posx,o->geo->px[i].y+o->posy);
20000326:	687b      	ldr	r3, [r7, #4]
20000328:	681a      	ldr	r2, [r3, #0]
2000032a:	68fb      	ldr	r3, [r7, #12]
2000032c:	3304      	adds	r3, #4
2000032e:	005b      	lsls	r3, r3, #1
20000330:	18d3      	adds	r3, r2, r3
20000332:	3304      	adds	r3, #4
20000334:	781b      	ldrb	r3, [r3, #0]
20000336:	001a      	movs	r2, r3
20000338:	687b      	ldr	r3, [r7, #4]
2000033a:	68db      	ldr	r3, [r3, #12]
2000033c:	18d3      	adds	r3, r2, r3
2000033e:	0018      	movs	r0, r3
20000340:	687b      	ldr	r3, [r7, #4]
20000342:	681a      	ldr	r2, [r3, #0]
20000344:	68fb      	ldr	r3, [r7, #12]
20000346:	3304      	adds	r3, #4
20000348:	005b      	lsls	r3, r3, #1
2000034a:	18d3      	adds	r3, r2, r3
2000034c:	3305      	adds	r3, #5
2000034e:	781b      	ldrb	r3, [r3, #0]
20000350:	001a      	movs	r2, r3
20000352:	687b      	ldr	r3, [r7, #4]
20000354:	691b      	ldr	r3, [r3, #16]
20000356:	18d3      	adds	r3, r2, r3
20000358:	0019      	movs	r1, r3
2000035a:	f000 fd3f 	bl	20000ddc <pixel>
    for (int i = 0; i<o->geo->numpoints; i++)
2000035e:	68fb      	ldr	r3, [r7, #12]
20000360:	3301      	adds	r3, #1
20000362:	60fb      	str	r3, [r7, #12]
20000364:	687b      	ldr	r3, [r7, #4]
20000366:	681b      	ldr	r3, [r3, #0]
20000368:	681b      	ldr	r3, [r3, #0]
2000036a:	68fa      	ldr	r2, [r7, #12]
2000036c:	429a      	cmp	r2, r3
2000036e:	dbda      	blt.n	20000326 <draw_object+0xe>
        
}
20000370:	46c0      	nop			; (mov r8, r8)
20000372:	46c0      	nop			; (mov r8, r8)
20000374:	46bd      	mov	sp, r7
20000376:	b004      	add	sp, #16
20000378:	bd80      	pop	{r7, pc}

2000037a <clear_object>:

void clear_object(POBJECT o){
2000037a:	b580      	push	{r7, lr}
2000037c:	b084      	sub	sp, #16
2000037e:	af00      	add	r7, sp, #0
20000380:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < o->geo->numpoints; i++)
20000382:	2300      	movs	r3, #0
20000384:	60fb      	str	r3, [r7, #12]
20000386:	e01e      	b.n	200003c6 <clear_object+0x4c>
        pixel(o->geo->px[i].x+o->posx,o->geo->px[i].y+o->posy);
20000388:	687b      	ldr	r3, [r7, #4]
2000038a:	681a      	ldr	r2, [r3, #0]
2000038c:	68fb      	ldr	r3, [r7, #12]
2000038e:	3304      	adds	r3, #4
20000390:	005b      	lsls	r3, r3, #1
20000392:	18d3      	adds	r3, r2, r3
20000394:	3304      	adds	r3, #4
20000396:	781b      	ldrb	r3, [r3, #0]
20000398:	001a      	movs	r2, r3
2000039a:	687b      	ldr	r3, [r7, #4]
2000039c:	68db      	ldr	r3, [r3, #12]
2000039e:	18d3      	adds	r3, r2, r3
200003a0:	0018      	movs	r0, r3
200003a2:	687b      	ldr	r3, [r7, #4]
200003a4:	681a      	ldr	r2, [r3, #0]
200003a6:	68fb      	ldr	r3, [r7, #12]
200003a8:	3304      	adds	r3, #4
200003aa:	005b      	lsls	r3, r3, #1
200003ac:	18d3      	adds	r3, r2, r3
200003ae:	3305      	adds	r3, #5
200003b0:	781b      	ldrb	r3, [r3, #0]
200003b2:	001a      	movs	r2, r3
200003b4:	687b      	ldr	r3, [r7, #4]
200003b6:	691b      	ldr	r3, [r3, #16]
200003b8:	18d3      	adds	r3, r2, r3
200003ba:	0019      	movs	r1, r3
200003bc:	f000 fd0e 	bl	20000ddc <pixel>
    for (int i = 0; i < o->geo->numpoints; i++)
200003c0:	68fb      	ldr	r3, [r7, #12]
200003c2:	3301      	adds	r3, #1
200003c4:	60fb      	str	r3, [r7, #12]
200003c6:	687b      	ldr	r3, [r7, #4]
200003c8:	681b      	ldr	r3, [r3, #0]
200003ca:	681b      	ldr	r3, [r3, #0]
200003cc:	68fa      	ldr	r2, [r7, #12]
200003ce:	429a      	cmp	r2, r3
200003d0:	dbda      	blt.n	20000388 <clear_object+0xe>
        
}
200003d2:	46c0      	nop			; (mov r8, r8)
200003d4:	46c0      	nop			; (mov r8, r8)
200003d6:	46bd      	mov	sp, r7
200003d8:	b004      	add	sp, #16
200003da:	bd80      	pop	{r7, pc}

200003dc <move_object>:

void move_object(POBJECT o){
200003dc:	b580      	push	{r7, lr}
200003de:	b082      	sub	sp, #8
200003e0:	af00      	add	r7, sp, #0
200003e2:	6078      	str	r0, [r7, #4]
    //clear_object(o);
    
    o->posx = o->posx + o->dirx;
200003e4:	687b      	ldr	r3, [r7, #4]
200003e6:	68da      	ldr	r2, [r3, #12]
200003e8:	687b      	ldr	r3, [r7, #4]
200003ea:	685b      	ldr	r3, [r3, #4]
200003ec:	18d2      	adds	r2, r2, r3
200003ee:	687b      	ldr	r3, [r7, #4]
200003f0:	60da      	str	r2, [r3, #12]
    o->posy = o->posy + o->diry;
200003f2:	687b      	ldr	r3, [r7, #4]
200003f4:	691a      	ldr	r2, [r3, #16]
200003f6:	687b      	ldr	r3, [r7, #4]
200003f8:	689b      	ldr	r3, [r3, #8]
200003fa:	18d2      	adds	r2, r2, r3
200003fc:	687b      	ldr	r3, [r7, #4]
200003fe:	611a      	str	r2, [r3, #16]
    
    /*Position static if direction makes ball go out of bounds*/
    //Bounce left wall
    if((o->posx+o->dirx)<1){
20000400:	687b      	ldr	r3, [r7, #4]
20000402:	68da      	ldr	r2, [r3, #12]
20000404:	687b      	ldr	r3, [r7, #4]
20000406:	685b      	ldr	r3, [r3, #4]
20000408:	18d3      	adds	r3, r2, r3
2000040a:	2b00      	cmp	r3, #0
2000040c:	dc07      	bgt.n	2000041e <move_object+0x42>
        o->dirx *= -1;
2000040e:	687b      	ldr	r3, [r7, #4]
20000410:	685b      	ldr	r3, [r3, #4]
20000412:	425a      	negs	r2, r3
20000414:	687b      	ldr	r3, [r7, #4]
20000416:	605a      	str	r2, [r3, #4]
        o->posx = 1;
20000418:	687b      	ldr	r3, [r7, #4]
2000041a:	2201      	movs	r2, #1
2000041c:	60da      	str	r2, [r3, #12]
    }
    //Bounce right wall
    if((o->posx+o->dirx)>128){
2000041e:	687b      	ldr	r3, [r7, #4]
20000420:	68da      	ldr	r2, [r3, #12]
20000422:	687b      	ldr	r3, [r7, #4]
20000424:	685b      	ldr	r3, [r3, #4]
20000426:	18d3      	adds	r3, r2, r3
20000428:	2b80      	cmp	r3, #128	; 0x80
2000042a:	dd07      	ble.n	2000043c <move_object+0x60>
        o->dirx *= -1;
2000042c:	687b      	ldr	r3, [r7, #4]
2000042e:	685b      	ldr	r3, [r3, #4]
20000430:	425a      	negs	r2, r3
20000432:	687b      	ldr	r3, [r7, #4]
20000434:	605a      	str	r2, [r3, #4]
        o->posx=127;
20000436:	687b      	ldr	r3, [r7, #4]
20000438:	227f      	movs	r2, #127	; 0x7f
2000043a:	60da      	str	r2, [r3, #12]
    }
    //bounce upper wall
    if((o->posy+o->diry)<1){
2000043c:	687b      	ldr	r3, [r7, #4]
2000043e:	691a      	ldr	r2, [r3, #16]
20000440:	687b      	ldr	r3, [r7, #4]
20000442:	689b      	ldr	r3, [r3, #8]
20000444:	18d3      	adds	r3, r2, r3
20000446:	2b00      	cmp	r3, #0
20000448:	dc07      	bgt.n	2000045a <move_object+0x7e>
        o->diry *= -1;
2000044a:	687b      	ldr	r3, [r7, #4]
2000044c:	689b      	ldr	r3, [r3, #8]
2000044e:	425a      	negs	r2, r3
20000450:	687b      	ldr	r3, [r7, #4]
20000452:	609a      	str	r2, [r3, #8]
        o->posy = 1;
20000454:	687b      	ldr	r3, [r7, #4]
20000456:	2201      	movs	r2, #1
20000458:	611a      	str	r2, [r3, #16]
    }
    //bounce lower wall
    if((o->posy+o->diry)>64){
2000045a:	687b      	ldr	r3, [r7, #4]
2000045c:	691a      	ldr	r2, [r3, #16]
2000045e:	687b      	ldr	r3, [r7, #4]
20000460:	689b      	ldr	r3, [r3, #8]
20000462:	18d3      	adds	r3, r2, r3
20000464:	2b40      	cmp	r3, #64	; 0x40
20000466:	dd07      	ble.n	20000478 <move_object+0x9c>
        o->diry *= -1;
20000468:	687b      	ldr	r3, [r7, #4]
2000046a:	689b      	ldr	r3, [r3, #8]
2000046c:	425a      	negs	r2, r3
2000046e:	687b      	ldr	r3, [r7, #4]
20000470:	609a      	str	r2, [r3, #8]
        o->posy = 63;
20000472:	687b      	ldr	r3, [r7, #4]
20000474:	223f      	movs	r2, #63	; 0x3f
20000476:	611a      	str	r2, [r3, #16]
    }
    draw_object(o);
20000478:	687b      	ldr	r3, [r7, #4]
2000047a:	0018      	movs	r0, r3
2000047c:	f7ff ff4c 	bl	20000318 <draw_object>
}
20000480:	46c0      	nop			; (mov r8, r8)
20000482:	46bd      	mov	sp, r7
20000484:	b002      	add	sp, #8
20000486:	bd80      	pop	{r7, pc}

20000488 <load_sprite>:
    clear_object,
    move_object,
    set_object_speed
};

static void load_sprite(sprite* s, unsigned char* data, int width, int height){
20000488:	b580      	push	{r7, lr}
2000048a:	b084      	sub	sp, #16
2000048c:	af00      	add	r7, sp, #0
2000048e:	60f8      	str	r0, [r7, #12]
20000490:	60b9      	str	r1, [r7, #8]
20000492:	607a      	str	r2, [r7, #4]
20000494:	603b      	str	r3, [r7, #0]
    s->width = width;
20000496:	687b      	ldr	r3, [r7, #4]
20000498:	b2da      	uxtb	r2, r3
2000049a:	68fb      	ldr	r3, [r7, #12]
2000049c:	701a      	strb	r2, [r3, #0]
    s->height = height;
2000049e:	683b      	ldr	r3, [r7, #0]
200004a0:	b2da      	uxtb	r2, r3
200004a2:	68fb      	ldr	r3, [r7, #12]
200004a4:	705a      	strb	r2, [r3, #1]
    s->data = data;
200004a6:	68fb      	ldr	r3, [r7, #12]
200004a8:	68ba      	ldr	r2, [r7, #8]
200004aa:	605a      	str	r2, [r3, #4]
}
200004ac:	46c0      	nop			; (mov r8, r8)
200004ae:	46bd      	mov	sp, r7
200004b0:	b004      	add	sp, #16
200004b2:	bd80      	pop	{r7, pc}

200004b4 <draw_sprite>:

void draw_sprite(sprite* s, int x, int y){
200004b4:	b580      	push	{r7, lr}
200004b6:	b08a      	sub	sp, #40	; 0x28
200004b8:	af00      	add	r7, sp, #0
200004ba:	60f8      	str	r0, [r7, #12]
200004bc:	60b9      	str	r1, [r7, #8]
200004be:	607a      	str	r2, [r7, #4]
    int i,j,k, width_in_bytes;
    
    if(s->width % 8 == 0){
200004c0:	68fb      	ldr	r3, [r7, #12]
200004c2:	781b      	ldrb	r3, [r3, #0]
200004c4:	2207      	movs	r2, #7
200004c6:	4013      	ands	r3, r2
200004c8:	b2db      	uxtb	r3, r3
200004ca:	2b00      	cmp	r3, #0
200004cc:	d105      	bne.n	200004da <draw_sprite+0x26>
        width_in_bytes = s->width/8;
200004ce:	68fb      	ldr	r3, [r7, #12]
200004d0:	781b      	ldrb	r3, [r3, #0]
200004d2:	08db      	lsrs	r3, r3, #3
200004d4:	b2db      	uxtb	r3, r3
200004d6:	61bb      	str	r3, [r7, #24]
200004d8:	e005      	b.n	200004e6 <draw_sprite+0x32>
    }else{
        width_in_bytes = s->width/8 + 1;
200004da:	68fb      	ldr	r3, [r7, #12]
200004dc:	781b      	ldrb	r3, [r3, #0]
200004de:	08db      	lsrs	r3, r3, #3
200004e0:	b2db      	uxtb	r3, r3
200004e2:	3301      	adds	r3, #1
200004e4:	61bb      	str	r3, [r7, #24]
    }
    
    for (i = 0; i < s->height; i++){
200004e6:	2300      	movs	r3, #0
200004e8:	627b      	str	r3, [r7, #36]	; 0x24
200004ea:	e039      	b.n	20000560 <draw_sprite+0xac>
        for (j = 0; j < width_in_bytes; j++){
200004ec:	2300      	movs	r3, #0
200004ee:	623b      	str	r3, [r7, #32]
200004f0:	e02f      	b.n	20000552 <draw_sprite+0x9e>
            unsigned char byte = s->data[i*width_in_bytes +j];
200004f2:	68fb      	ldr	r3, [r7, #12]
200004f4:	685b      	ldr	r3, [r3, #4]
200004f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
200004f8:	69b9      	ldr	r1, [r7, #24]
200004fa:	4351      	muls	r1, r2
200004fc:	6a3a      	ldr	r2, [r7, #32]
200004fe:	188a      	adds	r2, r1, r2
20000500:	189a      	adds	r2, r3, r2
20000502:	2317      	movs	r3, #23
20000504:	18fb      	adds	r3, r7, r3
20000506:	7812      	ldrb	r2, [r2, #0]
20000508:	701a      	strb	r2, [r3, #0]
            for (k = 0; k < 8; k++){
2000050a:	2300      	movs	r3, #0
2000050c:	61fb      	str	r3, [r7, #28]
2000050e:	e01a      	b.n	20000546 <draw_sprite+0x92>
                if (byte & (1<<k))
20000510:	2317      	movs	r3, #23
20000512:	18fb      	adds	r3, r7, r3
20000514:	781a      	ldrb	r2, [r3, #0]
20000516:	69fb      	ldr	r3, [r7, #28]
20000518:	411a      	asrs	r2, r3
2000051a:	0013      	movs	r3, r2
2000051c:	2201      	movs	r2, #1
2000051e:	4013      	ands	r3, r2
20000520:	d00e      	beq.n	20000540 <draw_sprite+0x8c>
                    pixel(8 * j + k + x + 1, i + y + 1);
20000522:	6a3b      	ldr	r3, [r7, #32]
20000524:	00da      	lsls	r2, r3, #3
20000526:	69fb      	ldr	r3, [r7, #28]
20000528:	18d2      	adds	r2, r2, r3
2000052a:	68bb      	ldr	r3, [r7, #8]
2000052c:	18d3      	adds	r3, r2, r3
2000052e:	3301      	adds	r3, #1
20000530:	0018      	movs	r0, r3
20000532:	6a7a      	ldr	r2, [r7, #36]	; 0x24
20000534:	687b      	ldr	r3, [r7, #4]
20000536:	18d3      	adds	r3, r2, r3
20000538:	3301      	adds	r3, #1
2000053a:	0019      	movs	r1, r3
2000053c:	f000 fc4e 	bl	20000ddc <pixel>
            for (k = 0; k < 8; k++){
20000540:	69fb      	ldr	r3, [r7, #28]
20000542:	3301      	adds	r3, #1
20000544:	61fb      	str	r3, [r7, #28]
20000546:	69fb      	ldr	r3, [r7, #28]
20000548:	2b07      	cmp	r3, #7
2000054a:	dde1      	ble.n	20000510 <draw_sprite+0x5c>
        for (j = 0; j < width_in_bytes; j++){
2000054c:	6a3b      	ldr	r3, [r7, #32]
2000054e:	3301      	adds	r3, #1
20000550:	623b      	str	r3, [r7, #32]
20000552:	6a3a      	ldr	r2, [r7, #32]
20000554:	69bb      	ldr	r3, [r7, #24]
20000556:	429a      	cmp	r2, r3
20000558:	dbcb      	blt.n	200004f2 <draw_sprite+0x3e>
    for (i = 0; i < s->height; i++){
2000055a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2000055c:	3301      	adds	r3, #1
2000055e:	627b      	str	r3, [r7, #36]	; 0x24
20000560:	68fb      	ldr	r3, [r7, #12]
20000562:	785b      	ldrb	r3, [r3, #1]
20000564:	001a      	movs	r2, r3
20000566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20000568:	4293      	cmp	r3, r2
2000056a:	dbbf      	blt.n	200004ec <draw_sprite+0x38>
            }
        }
    }
}
2000056c:	46c0      	nop			; (mov r8, r8)
2000056e:	46c0      	nop			; (mov r8, r8)
20000570:	46bd      	mov	sp, r7
20000572:	b00a      	add	sp, #40	; 0x28
20000574:	bd80      	pop	{r7, pc}

20000576 <draw_snake>:

void draw_snake(POBJECT h, POBJECT *b){
20000576:	b580      	push	{r7, lr}
20000578:	b084      	sub	sp, #16
2000057a:	af00      	add	r7, sp, #0
2000057c:	6078      	str	r0, [r7, #4]
2000057e:	6039      	str	r1, [r7, #0]
    h->move(h);
20000580:	687b      	ldr	r3, [r7, #4]
20000582:	69db      	ldr	r3, [r3, #28]
20000584:	687a      	ldr	r2, [r7, #4]
20000586:	0010      	movs	r0, r2
20000588:	4798      	blx	r3
    for(int i = 0; i < size()-1; i++){ 
2000058a:	2300      	movs	r3, #0
2000058c:	60fb      	str	r3, [r7, #12]
2000058e:	e00a      	b.n	200005a6 <draw_snake+0x30>
        move_object(*b);
20000590:	683b      	ldr	r3, [r7, #0]
20000592:	681b      	ldr	r3, [r3, #0]
20000594:	0018      	movs	r0, r3
20000596:	f7ff ff21 	bl	200003dc <move_object>
        *b++;
2000059a:	683b      	ldr	r3, [r7, #0]
2000059c:	3304      	adds	r3, #4
2000059e:	603b      	str	r3, [r7, #0]
    for(int i = 0; i < size()-1; i++){ 
200005a0:	68fb      	ldr	r3, [r7, #12]
200005a2:	3301      	adds	r3, #1
200005a4:	60fb      	str	r3, [r7, #12]
200005a6:	f000 fcef 	bl	20000f88 <size>
200005aa:	0003      	movs	r3, r0
200005ac:	3b01      	subs	r3, #1
200005ae:	68fa      	ldr	r2, [r7, #12]
200005b0:	429a      	cmp	r2, r3
200005b2:	dbed      	blt.n	20000590 <draw_snake+0x1a>
    }
}
200005b4:	46c0      	nop			; (mov r8, r8)
200005b6:	46c0      	nop			; (mov r8, r8)
200005b8:	46bd      	mov	sp, r7
200005ba:	b004      	add	sp, #16
200005bc:	bd80      	pop	{r7, pc}

200005be <init_app>:

static volatile int points;

void init_app(void){/**/
200005be:	b580      	push	{r7, lr}
200005c0:	af00      	add	r7, sp, #0
        /*starta klockor på port D & E*/
        * ( (unsigned long *) 0x40023830) = 0x18;
        __asm volatile("  LDR R0,=0x08000209\n BLX R0 \n");
    #endif
    
    *GPIO_E_MODER = 0x55555555;
200005c2:	4b11      	ldr	r3, [pc, #68]	; (20000608 <init_app+0x4a>)
200005c4:	4a11      	ldr	r2, [pc, #68]	; (2000060c <init_app+0x4e>)
200005c6:	601a      	str	r2, [r3, #0]
    *GPIO_E_OTYPER = 0x00000000;
200005c8:	4b11      	ldr	r3, [pc, #68]	; (20000610 <init_app+0x52>)
200005ca:	2200      	movs	r2, #0
200005cc:	801a      	strh	r2, [r3, #0]
    *GPIO_E_OSPEEDR = 0x00000000;
200005ce:	4b11      	ldr	r3, [pc, #68]	; (20000614 <init_app+0x56>)
200005d0:	2200      	movs	r2, #0
200005d2:	601a      	str	r2, [r3, #0]
    
    *GPIO_D_MODER = 0;
200005d4:	4b10      	ldr	r3, [pc, #64]	; (20000618 <init_app+0x5a>)
200005d6:	2200      	movs	r2, #0
200005d8:	601a      	str	r2, [r3, #0]
    *GPIO_D_MODER = 0x55000000;
200005da:	4b0f      	ldr	r3, [pc, #60]	; (20000618 <init_app+0x5a>)
200005dc:	22aa      	movs	r2, #170	; 0xaa
200005de:	05d2      	lsls	r2, r2, #23
200005e0:	601a      	str	r2, [r3, #0]
    *GPIO_D_PUPDR = 0;
200005e2:	4b0e      	ldr	r3, [pc, #56]	; (2000061c <init_app+0x5e>)
200005e4:	2200      	movs	r2, #0
200005e6:	601a      	str	r2, [r3, #0]
    *GPIO_D_PUPDR |= 0xAA000000;
200005e8:	4b0c      	ldr	r3, [pc, #48]	; (2000061c <init_app+0x5e>)
200005ea:	681a      	ldr	r2, [r3, #0]
200005ec:	4b0b      	ldr	r3, [pc, #44]	; (2000061c <init_app+0x5e>)
200005ee:	21aa      	movs	r1, #170	; 0xaa
200005f0:	0609      	lsls	r1, r1, #24
200005f2:	430a      	orrs	r2, r1
200005f4:	601a      	str	r2, [r3, #0]
    *GPIO_D_OTYPER = 0;
200005f6:	4b0a      	ldr	r3, [pc, #40]	; (20000620 <init_app+0x62>)
200005f8:	2200      	movs	r2, #0
200005fa:	801a      	strh	r2, [r3, #0]
    
    points = 0;
200005fc:	4b09      	ldr	r3, [pc, #36]	; (20000624 <init_app+0x66>)
200005fe:	2200      	movs	r2, #0
20000600:	601a      	str	r2, [r3, #0]
}
20000602:	46c0      	nop			; (mov r8, r8)
20000604:	46bd      	mov	sp, r7
20000606:	bd80      	pop	{r7, pc}
20000608:	40021000 	andmi	r1, r2, r0
2000060c:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab
20000610:	40021004 	andmi	r1, r2, r4
20000614:	40021008 	andmi	r1, r2, r8
20000618:	40020c00 	andmi	r0, r2, r0, lsl #24
2000061c:	40020c0c 	andmi	r0, r2, ip, lsl #24
20000620:	40020c04 	andmi	r0, r2, r4, lsl #24
20000624:	20002174 	andcs	r2, r0, r4, ror r1

20000628 <init_snake>:

void init_snake(POBJECT h, POBJECT *b, OBJECT *s){
20000628:	b580      	push	{r7, lr}
2000062a:	b086      	sub	sp, #24
2000062c:	af00      	add	r7, sp, #0
2000062e:	60f8      	str	r0, [r7, #12]
20000630:	60b9      	str	r1, [r7, #8]
20000632:	607a      	str	r2, [r7, #4]
    h->posx = 16;
20000634:	68fb      	ldr	r3, [r7, #12]
20000636:	2210      	movs	r2, #16
20000638:	60da      	str	r2, [r3, #12]
    h->posy = 1;
2000063a:	68fb      	ldr	r3, [r7, #12]
2000063c:	2201      	movs	r2, #1
2000063e:	611a      	str	r2, [r3, #16]
    h->move(h);
20000640:	68fb      	ldr	r3, [r7, #12]
20000642:	69db      	ldr	r3, [r3, #28]
20000644:	68fa      	ldr	r2, [r7, #12]
20000646:	0010      	movs	r0, r2
20000648:	4798      	blx	r3
    for (int i = 0; i < 3; i++){
2000064a:	2300      	movs	r3, #0
2000064c:	617b      	str	r3, [r7, #20]
2000064e:	e01f      	b.n	20000690 <init_snake+0x68>
        *b = &(*s);
20000650:	68bb      	ldr	r3, [r7, #8]
20000652:	687a      	ldr	r2, [r7, #4]
20000654:	601a      	str	r2, [r3, #0]
        (*b)->posx = (i+1)*4;
20000656:	697b      	ldr	r3, [r7, #20]
20000658:	1c5a      	adds	r2, r3, #1
2000065a:	68bb      	ldr	r3, [r7, #8]
2000065c:	681b      	ldr	r3, [r3, #0]
2000065e:	0092      	lsls	r2, r2, #2
20000660:	60da      	str	r2, [r3, #12]
        (*b)->posy = 1;
20000662:	68bb      	ldr	r3, [r7, #8]
20000664:	681b      	ldr	r3, [r3, #0]
20000666:	2201      	movs	r2, #1
20000668:	611a      	str	r2, [r3, #16]
        move_object(*b);
2000066a:	68bb      	ldr	r3, [r7, #8]
2000066c:	681b      	ldr	r3, [r3, #0]
2000066e:	0018      	movs	r0, r3
20000670:	f7ff feb4 	bl	200003dc <move_object>
        insert(*b);
20000674:	68bb      	ldr	r3, [r7, #8]
20000676:	681b      	ldr	r3, [r3, #0]
20000678:	0018      	movs	r0, r3
2000067a:	f000 fc8f 	bl	20000f9c <insert>
        *b++;
2000067e:	68bb      	ldr	r3, [r7, #8]
20000680:	3304      	adds	r3, #4
20000682:	60bb      	str	r3, [r7, #8]
        *s++;
20000684:	687b      	ldr	r3, [r7, #4]
20000686:	3324      	adds	r3, #36	; 0x24
20000688:	607b      	str	r3, [r7, #4]
    for (int i = 0; i < 3; i++){
2000068a:	697b      	ldr	r3, [r7, #20]
2000068c:	3301      	adds	r3, #1
2000068e:	617b      	str	r3, [r7, #20]
20000690:	697b      	ldr	r3, [r7, #20]
20000692:	2b02      	cmp	r3, #2
20000694:	dddc      	ble.n	20000650 <init_snake+0x28>
    }
}
20000696:	46c0      	nop			; (mov r8, r8)
20000698:	46c0      	nop			; (mov r8, r8)
2000069a:	46bd      	mov	sp, r7
2000069c:	b006      	add	sp, #24
2000069e:	bd80      	pop	{r7, pc}

200006a0 <restart_game>:

void restart_game(POBJECT p){
200006a0:	b580      	push	{r7, lr}
200006a2:	b082      	sub	sp, #8
200006a4:	af00      	add	r7, sp, #0
200006a6:	6078      	str	r0, [r7, #4]
        clear_backbuffer();
200006a8:	f000 fb7d 	bl	20000da6 <clear_backbuffer>
        graphic_draw_screen();
200006ac:	f000 fbd8 	bl	20000e60 <graphic_draw_screen>
        /*p->set_speed(p,0,0);§
        p->posx = 0;
        p->posy = 0;
        */
}
200006b0:	46c0      	nop			; (mov r8, r8)
200006b2:	46bd      	mov	sp, r7
200006b4:	b002      	add	sp, #8
200006b6:	bd80      	pop	{r7, pc}

200006b8 <main>:

void main(int argc, char **argv){
200006b8:	b5b0      	push	{r4, r5, r7, lr}
200006ba:	4c4c      	ldr	r4, [pc, #304]	; (200007ec <main+0x134>)
200006bc:	44a5      	add	sp, r4
200006be:	af00      	add	r7, sp, #0
200006c0:	6078      	str	r0, [r7, #4]
200006c2:	6039      	str	r1, [r7, #0]
    int game = 1, restart = 2;
200006c4:	2301      	movs	r3, #1
200006c6:	4a4a      	ldr	r2, [pc, #296]	; (200007f0 <main+0x138>)
200006c8:	18ba      	adds	r2, r7, r2
200006ca:	6013      	str	r3, [r2, #0]
200006cc:	2302      	movs	r3, #2
200006ce:	2281      	movs	r2, #129	; 0x81
200006d0:	0112      	lsls	r2, r2, #4
200006d2:	18ba      	adds	r2, r7, r2
200006d4:	6013      	str	r3, [r2, #0]
    char key_stroke;
        
    POBJECT head = &snakehead, food = &food_obj;
200006d6:	4b47      	ldr	r3, [pc, #284]	; (200007f4 <main+0x13c>)
200006d8:	4a47      	ldr	r2, [pc, #284]	; (200007f8 <main+0x140>)
200006da:	18ba      	adds	r2, r7, r2
200006dc:	6013      	str	r3, [r2, #0]
200006de:	4b47      	ldr	r3, [pc, #284]	; (200007fc <main+0x144>)
200006e0:	4a47      	ldr	r2, [pc, #284]	; (20000800 <main+0x148>)
200006e2:	18ba      	adds	r2, r7, r2
200006e4:	6013      	str	r3, [r2, #0]
    POBJECT body[510];
    
    init_app();
200006e6:	f7ff ff6a 	bl	200005be <init_app>
    graphic_init();
200006ea:	f000 f98f 	bl	20000a0c <graphic_init>
    
    while(game){
200006ee:	e072      	b.n	200007d6 <main+0x11e>
        //load_sprite(&s , image_bits, image_width, image_height);
        //draw_sprite(&s, 20, 20);
        
        //if(keyb() == 5){}
        
        if(restart == 2){
200006f0:	2481      	movs	r4, #129	; 0x81
200006f2:	0124      	lsls	r4, r4, #4
200006f4:	193b      	adds	r3, r7, r4
200006f6:	681b      	ldr	r3, [r3, #0]
200006f8:	2b02      	cmp	r3, #2
200006fa:	d165      	bne.n	200007c8 <main+0x110>
            init_snake(head, body, snakebody);
200006fc:	4a41      	ldr	r2, [pc, #260]	; (20000804 <main+0x14c>)
200006fe:	230c      	movs	r3, #12
20000700:	18f9      	adds	r1, r7, r3
20000702:	4d3d      	ldr	r5, [pc, #244]	; (200007f8 <main+0x140>)
20000704:	197b      	adds	r3, r7, r5
20000706:	681b      	ldr	r3, [r3, #0]
20000708:	0018      	movs	r0, r3
2000070a:	f7ff ff8d 	bl	20000628 <init_snake>
            restart_game(head);
2000070e:	197b      	adds	r3, r7, r5
20000710:	681b      	ldr	r3, [r3, #0]
20000712:	0018      	movs	r0, r3
20000714:	f7ff ffc4 	bl	200006a0 <restart_game>
            restart = 1;
20000718:	2301      	movs	r3, #1
2000071a:	193a      	adds	r2, r7, r4
2000071c:	6013      	str	r3, [r2, #0]
        }

        while(restart == 1){
2000071e:	e053      	b.n	200007c8 <main+0x110>
            clear_backbuffer();
20000720:	f000 fb41 	bl	20000da6 <clear_backbuffer>
            //graphic_draw_screen();
            /*KOD HÄR*/
            
            draw_snake(head, body);
20000724:	230c      	movs	r3, #12
20000726:	18fa      	adds	r2, r7, r3
20000728:	4b33      	ldr	r3, [pc, #204]	; (200007f8 <main+0x140>)
2000072a:	18fb      	adds	r3, r7, r3
2000072c:	681b      	ldr	r3, [r3, #0]
2000072e:	0011      	movs	r1, r2
20000730:	0018      	movs	r0, r3
20000732:	f7ff ff20 	bl	20000576 <draw_snake>
                        
            graphic_draw_screen();
20000736:	f000 fb93 	bl	20000e60 <graphic_draw_screen>

            //delay_milli(40);
            key_stroke = keyb();
2000073a:	4d33      	ldr	r5, [pc, #204]	; (20000808 <main+0x150>)
2000073c:	197c      	adds	r4, r7, r5
2000073e:	f000 f8ef 	bl	20000920 <keyb>
20000742:	0003      	movs	r3, r0
20000744:	7023      	strb	r3, [r4, #0]
            switch(key_stroke){
20000746:	197b      	adds	r3, r7, r5
20000748:	781b      	ldrb	r3, [r3, #0]
2000074a:	2b0d      	cmp	r3, #13
2000074c:	d83d      	bhi.n	200007ca <main+0x112>
2000074e:	009a      	lsls	r2, r3, #2
20000750:	4b2e      	ldr	r3, [pc, #184]	; (2000080c <main+0x154>)
20000752:	18d3      	adds	r3, r2, r3
20000754:	681b      	ldr	r3, [r3, #0]
20000756:	469f      	mov	pc, r3
                case RIGHT: turn(RIGHT, head, body); break; /*dirx = +, diry = 0*/
20000758:	230c      	movs	r3, #12
2000075a:	18fa      	adds	r2, r7, r3
2000075c:	4b26      	ldr	r3, [pc, #152]	; (200007f8 <main+0x140>)
2000075e:	18fb      	adds	r3, r7, r3
20000760:	681b      	ldr	r3, [r3, #0]
20000762:	0019      	movs	r1, r3
20000764:	2006      	movs	r0, #6
20000766:	f000 f855 	bl	20000814 <turn>
2000076a:	e02e      	b.n	200007ca <main+0x112>
                case LEFT: turn(LEFT, head, body); break; /*dirx = -, diry = 0*/
2000076c:	230c      	movs	r3, #12
2000076e:	18fa      	adds	r2, r7, r3
20000770:	4b21      	ldr	r3, [pc, #132]	; (200007f8 <main+0x140>)
20000772:	18fb      	adds	r3, r7, r3
20000774:	681b      	ldr	r3, [r3, #0]
20000776:	0019      	movs	r1, r3
20000778:	2004      	movs	r0, #4
2000077a:	f000 f84b 	bl	20000814 <turn>
2000077e:	e024      	b.n	200007ca <main+0x112>
                case UP: turn(UP, head, body); break; /*dirx = 0, diry = -*/
20000780:	230c      	movs	r3, #12
20000782:	18fa      	adds	r2, r7, r3
20000784:	4b1c      	ldr	r3, [pc, #112]	; (200007f8 <main+0x140>)
20000786:	18fb      	adds	r3, r7, r3
20000788:	681b      	ldr	r3, [r3, #0]
2000078a:	0019      	movs	r1, r3
2000078c:	2002      	movs	r0, #2
2000078e:	f000 f841 	bl	20000814 <turn>
20000792:	e01a      	b.n	200007ca <main+0x112>
                case DOWN: turn(DOWN, head, body); break; /*dirx = 0, diry = +*/
20000794:	230c      	movs	r3, #12
20000796:	18fa      	adds	r2, r7, r3
20000798:	4b17      	ldr	r3, [pc, #92]	; (200007f8 <main+0x140>)
2000079a:	18fb      	adds	r3, r7, r3
2000079c:	681b      	ldr	r3, [r3, #0]
2000079e:	0019      	movs	r1, r3
200007a0:	2008      	movs	r0, #8
200007a2:	f000 f837 	bl	20000814 <turn>
200007a6:	e010      	b.n	200007ca <main+0x112>
                case QUIT: game = 0; restart = 0; break;
200007a8:	2300      	movs	r3, #0
200007aa:	4a11      	ldr	r2, [pc, #68]	; (200007f0 <main+0x138>)
200007ac:	18ba      	adds	r2, r7, r2
200007ae:	6013      	str	r3, [r2, #0]
200007b0:	2300      	movs	r3, #0
200007b2:	2281      	movs	r2, #129	; 0x81
200007b4:	0112      	lsls	r2, r2, #4
200007b6:	18ba      	adds	r2, r7, r2
200007b8:	6013      	str	r3, [r2, #0]
200007ba:	e006      	b.n	200007ca <main+0x112>
                case RESTART: restart = 2; break;
200007bc:	2302      	movs	r3, #2
200007be:	2281      	movs	r2, #129	; 0x81
200007c0:	0112      	lsls	r2, r2, #4
200007c2:	18ba      	adds	r2, r7, r2
200007c4:	6013      	str	r3, [r2, #0]
200007c6:	e000      	b.n	200007ca <main+0x112>
        while(restart == 1){
200007c8:	46c0      	nop			; (mov r8, r8)
200007ca:	2381      	movs	r3, #129	; 0x81
200007cc:	011b      	lsls	r3, r3, #4
200007ce:	18fb      	adds	r3, r7, r3
200007d0:	681b      	ldr	r3, [r3, #0]
200007d2:	2b01      	cmp	r3, #1
200007d4:	d0a4      	beq.n	20000720 <main+0x68>
    while(game){
200007d6:	4b06      	ldr	r3, [pc, #24]	; (200007f0 <main+0x138>)
200007d8:	18fb      	adds	r3, r7, r3
200007da:	681b      	ldr	r3, [r3, #0]
200007dc:	2b00      	cmp	r3, #0
200007de:	d187      	bne.n	200006f0 <main+0x38>
            }
        }
    }
}
200007e0:	46c0      	nop			; (mov r8, r8)
200007e2:	46c0      	nop			; (mov r8, r8)
200007e4:	46bd      	mov	sp, r7
200007e6:	4b0a      	ldr	r3, [pc, #40]	; (20000810 <main+0x158>)
200007e8:	449d      	add	sp, r3
200007ea:	bdb0      	pop	{r4, r5, r7, pc}
200007ec:	fffff7e8 			; <UNDEFINED> instruction: 0xfffff7e8
200007f0:	00000814 	andeq	r0, r0, r4, lsl r8
200007f4:	20003a28 	andcs	r3, r0, r8, lsr #20
200007f8:	0000080c 	andeq	r0, r0, ip, lsl #16
200007fc:	20008204 	andcs	r8, r0, r4, lsl #4
20000800:	00000808 	andeq	r0, r0, r8, lsl #16
20000804:	20003a4c 	andcs	r3, r0, ip, asr #20
20000808:	00000807 	andeq	r0, r0, r7, lsl #16
2000080c:	2000822c 	andcs	r8, r0, ip, lsr #4
20000810:	00000818 	andeq	r0, r0, r8, lsl r8

20000814 <turn>:

void turn(int dir, POBJECT h ,POBJECT *b){
20000814:	b580      	push	{r7, lr}
20000816:	b084      	sub	sp, #16
20000818:	af00      	add	r7, sp, #0
2000081a:	60f8      	str	r0, [r7, #12]
2000081c:	60b9      	str	r1, [r7, #8]
2000081e:	607a      	str	r2, [r7, #4]
    switch(dir){
20000820:	68fb      	ldr	r3, [r7, #12]
20000822:	2b08      	cmp	r3, #8
20000824:	d032      	beq.n	2000088c <turn+0x78>
20000826:	68fb      	ldr	r3, [r7, #12]
20000828:	2b08      	cmp	r3, #8
2000082a:	dc41      	bgt.n	200008b0 <turn+0x9c>
2000082c:	68fb      	ldr	r3, [r7, #12]
2000082e:	2b06      	cmp	r3, #6
20000830:	d009      	beq.n	20000846 <turn+0x32>
20000832:	68fb      	ldr	r3, [r7, #12]
20000834:	2b06      	cmp	r3, #6
20000836:	dc3b      	bgt.n	200008b0 <turn+0x9c>
20000838:	68fb      	ldr	r3, [r7, #12]
2000083a:	2b02      	cmp	r3, #2
2000083c:	d01a      	beq.n	20000874 <turn+0x60>
2000083e:	68fb      	ldr	r3, [r7, #12]
20000840:	2b04      	cmp	r3, #4
20000842:	d00b      	beq.n	2000085c <turn+0x48>
                h->set_speed(h,0,4);
                
            }
            break;
    }
}
20000844:	e034      	b.n	200008b0 <turn+0x9c>
            if(h->dirx == 0){
20000846:	68bb      	ldr	r3, [r7, #8]
20000848:	685b      	ldr	r3, [r3, #4]
2000084a:	2b00      	cmp	r3, #0
2000084c:	d129      	bne.n	200008a2 <turn+0x8e>
                h->set_speed(h,4,0);
2000084e:	68bb      	ldr	r3, [r7, #8]
20000850:	6a1b      	ldr	r3, [r3, #32]
20000852:	68b8      	ldr	r0, [r7, #8]
20000854:	2200      	movs	r2, #0
20000856:	2104      	movs	r1, #4
20000858:	4798      	blx	r3
            break;
2000085a:	e022      	b.n	200008a2 <turn+0x8e>
            if(h->dirx == 0){
2000085c:	68bb      	ldr	r3, [r7, #8]
2000085e:	685b      	ldr	r3, [r3, #4]
20000860:	2b00      	cmp	r3, #0
20000862:	d120      	bne.n	200008a6 <turn+0x92>
                h->set_speed(h,-4,0);
20000864:	68bb      	ldr	r3, [r7, #8]
20000866:	6a1b      	ldr	r3, [r3, #32]
20000868:	2204      	movs	r2, #4
2000086a:	4251      	negs	r1, r2
2000086c:	68b8      	ldr	r0, [r7, #8]
2000086e:	2200      	movs	r2, #0
20000870:	4798      	blx	r3
            break;
20000872:	e018      	b.n	200008a6 <turn+0x92>
            if(h->diry == 0){
20000874:	68bb      	ldr	r3, [r7, #8]
20000876:	689b      	ldr	r3, [r3, #8]
20000878:	2b00      	cmp	r3, #0
2000087a:	d116      	bne.n	200008aa <turn+0x96>
                h->set_speed(h,0,-4);
2000087c:	68bb      	ldr	r3, [r7, #8]
2000087e:	6a1b      	ldr	r3, [r3, #32]
20000880:	2204      	movs	r2, #4
20000882:	4252      	negs	r2, r2
20000884:	68b8      	ldr	r0, [r7, #8]
20000886:	2100      	movs	r1, #0
20000888:	4798      	blx	r3
            break;
2000088a:	e00e      	b.n	200008aa <turn+0x96>
            if(h->diry == 0){
2000088c:	68bb      	ldr	r3, [r7, #8]
2000088e:	689b      	ldr	r3, [r3, #8]
20000890:	2b00      	cmp	r3, #0
20000892:	d10c      	bne.n	200008ae <turn+0x9a>
                h->set_speed(h,0,4);
20000894:	68bb      	ldr	r3, [r7, #8]
20000896:	6a1b      	ldr	r3, [r3, #32]
20000898:	68b8      	ldr	r0, [r7, #8]
2000089a:	2204      	movs	r2, #4
2000089c:	2100      	movs	r1, #0
2000089e:	4798      	blx	r3
            break;
200008a0:	e005      	b.n	200008ae <turn+0x9a>
            break;
200008a2:	46c0      	nop			; (mov r8, r8)
200008a4:	e004      	b.n	200008b0 <turn+0x9c>
            break;
200008a6:	46c0      	nop			; (mov r8, r8)
200008a8:	e002      	b.n	200008b0 <turn+0x9c>
            break;
200008aa:	46c0      	nop			; (mov r8, r8)
200008ac:	e000      	b.n	200008b0 <turn+0x9c>
            break;
200008ae:	46c0      	nop			; (mov r8, r8)
}
200008b0:	46c0      	nop			; (mov r8, r8)
200008b2:	46bd      	mov	sp, r7
200008b4:	b004      	add	sp, #16
200008b6:	bd80      	pop	{r7, pc}

200008b8 <activate_row>:
#include <defines.h>
#include <keyb.h>

void activate_row(int i){
200008b8:	b580      	push	{r7, lr}
200008ba:	b082      	sub	sp, #8
200008bc:	af00      	add	r7, sp, #0
200008be:	6078      	str	r0, [r7, #4]
    *GPIO_D_ODR_HIGH = 1 << (i+4);
200008c0:	687b      	ldr	r3, [r7, #4]
200008c2:	3304      	adds	r3, #4
200008c4:	2201      	movs	r2, #1
200008c6:	409a      	lsls	r2, r3
200008c8:	4b03      	ldr	r3, [pc, #12]	; (200008d8 <activate_row+0x20>)
200008ca:	b2d2      	uxtb	r2, r2
200008cc:	701a      	strb	r2, [r3, #0]
}
200008ce:	46c0      	nop			; (mov r8, r8)
200008d0:	46bd      	mov	sp, r7
200008d2:	b002      	add	sp, #8
200008d4:	bd80      	pop	{r7, pc}
200008d6:	46c0      	nop			; (mov r8, r8)
200008d8:	40020c15 	andmi	r0, r2, r5, lsl ip

200008dc <read_coloumn>:

int read_coloumn(){
200008dc:	b580      	push	{r7, lr}
200008de:	b082      	sub	sp, #8
200008e0:	af00      	add	r7, sp, #0
    int j; 
    char input = *GPIO_D_IDR_HIGH;
200008e2:	4a0e      	ldr	r2, [pc, #56]	; (2000091c <read_coloumn+0x40>)
200008e4:	1cfb      	adds	r3, r7, #3
200008e6:	7812      	ldrb	r2, [r2, #0]
200008e8:	701a      	strb	r2, [r3, #0]
    for(j = 0; j<4 ; j++){
200008ea:	2300      	movs	r3, #0
200008ec:	607b      	str	r3, [r7, #4]
200008ee:	e00c      	b.n	2000090a <read_coloumn+0x2e>
        if (input&(1<<j)){
200008f0:	1cfb      	adds	r3, r7, #3
200008f2:	781a      	ldrb	r2, [r3, #0]
200008f4:	687b      	ldr	r3, [r7, #4]
200008f6:	411a      	asrs	r2, r3
200008f8:	0013      	movs	r3, r2
200008fa:	2201      	movs	r2, #1
200008fc:	4013      	ands	r3, r2
200008fe:	d001      	beq.n	20000904 <read_coloumn+0x28>
            return j;
20000900:	687b      	ldr	r3, [r7, #4]
20000902:	e007      	b.n	20000914 <read_coloumn+0x38>
    for(j = 0; j<4 ; j++){
20000904:	687b      	ldr	r3, [r7, #4]
20000906:	3301      	adds	r3, #1
20000908:	607b      	str	r3, [r7, #4]
2000090a:	687b      	ldr	r3, [r7, #4]
2000090c:	2b03      	cmp	r3, #3
2000090e:	ddef      	ble.n	200008f0 <read_coloumn+0x14>
        }
    }
    return -1;
20000910:	2301      	movs	r3, #1
20000912:	425b      	negs	r3, r3
}
20000914:	0018      	movs	r0, r3
20000916:	46bd      	mov	sp, r7
20000918:	b002      	add	sp, #8
2000091a:	bd80      	pop	{r7, pc}
2000091c:	40020c11 	andmi	r0, r2, r1, lsl ip

20000920 <keyb>:

/*rader in, kolumner ut*/
unsigned char keyb(void){
20000920:	b590      	push	{r4, r7, lr}
20000922:	b08b      	sub	sp, #44	; 0x2c
20000924:	af00      	add	r7, sp, #0
    unsigned char key_value[] = {0x06,0x5B,0x4F,0x77,0x66,0x6D,0x7D,0x7C,0x07,0x7F,0x6F,0x39,0x79,0x3F,0x71,0xBF};
20000926:	2310      	movs	r3, #16
20000928:	18fb      	adds	r3, r7, r3
2000092a:	4a15      	ldr	r2, [pc, #84]	; (20000980 <keyb+0x60>)
2000092c:	ca13      	ldmia	r2!, {r0, r1, r4}
2000092e:	c313      	stmia	r3!, {r0, r1, r4}
20000930:	6812      	ldr	r2, [r2, #0]
20000932:	601a      	str	r2, [r3, #0]
    unsigned char keyVal[] = {1,2,3,0xA,4,5,6,0xB,7,8,9,0xC,0xE,0,0xF,0xD};
20000934:	003b      	movs	r3, r7
20000936:	4a13      	ldr	r2, [pc, #76]	; (20000984 <keyb+0x64>)
20000938:	ca13      	ldmia	r2!, {r0, r1, r4}
2000093a:	c313      	stmia	r3!, {r0, r1, r4}
2000093c:	6812      	ldr	r2, [r2, #0]
2000093e:	601a      	str	r2, [r3, #0]
    
        
    int row, coloumn;
    for (row = 0; row < 4; row++){
20000940:	2300      	movs	r3, #0
20000942:	627b      	str	r3, [r7, #36]	; 0x24
20000944:	e014      	b.n	20000970 <keyb+0x50>
        activate_row(row);
20000946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20000948:	0018      	movs	r0, r3
2000094a:	f7ff ffb5 	bl	200008b8 <activate_row>
        coloumn = read_coloumn();
2000094e:	f7ff ffc5 	bl	200008dc <read_coloumn>
20000952:	0003      	movs	r3, r0
20000954:	623b      	str	r3, [r7, #32]
        if (coloumn != -1){
20000956:	6a3b      	ldr	r3, [r7, #32]
20000958:	3301      	adds	r3, #1
2000095a:	d006      	beq.n	2000096a <keyb+0x4a>
            return keyVal[coloumn+row*4];
2000095c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2000095e:	009a      	lsls	r2, r3, #2
20000960:	6a3b      	ldr	r3, [r7, #32]
20000962:	18d3      	adds	r3, r2, r3
20000964:	003a      	movs	r2, r7
20000966:	5cd3      	ldrb	r3, [r2, r3]
20000968:	e006      	b.n	20000978 <keyb+0x58>
    for (row = 0; row < 4; row++){
2000096a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2000096c:	3301      	adds	r3, #1
2000096e:	627b      	str	r3, [r7, #36]	; 0x24
20000970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20000972:	2b03      	cmp	r3, #3
20000974:	dde7      	ble.n	20000946 <keyb+0x26>
        }
    }
    return 0x00;
20000976:	2300      	movs	r3, #0
}
20000978:	0018      	movs	r0, r3
2000097a:	46bd      	mov	sp, r7
2000097c:	b00b      	add	sp, #44	; 0x2c
2000097e:	bd90      	pop	{r4, r7, pc}
20000980:	20008264 	andcs	r8, r0, r4, ror #4
20000984:	20008274 	andcs	r8, r0, r4, ror r2

20000988 <out7seg>:

void out7seg(unsigned char c){
20000988:	b580      	push	{r7, lr}
2000098a:	b082      	sub	sp, #8
2000098c:	af00      	add	r7, sp, #0
2000098e:	0002      	movs	r2, r0
20000990:	1dfb      	adds	r3, r7, #7
20000992:	701a      	strb	r2, [r3, #0]
    
    *GPIO_D_ODR_LOW = c; //0x00 -> 0xFF
20000994:	4a03      	ldr	r2, [pc, #12]	; (200009a4 <out7seg+0x1c>)
20000996:	1dfb      	adds	r3, r7, #7
20000998:	781b      	ldrb	r3, [r3, #0]
2000099a:	7013      	strb	r3, [r2, #0]
    
2000099c:	46c0      	nop			; (mov r8, r8)
2000099e:	46bd      	mov	sp, r7
200009a0:	b002      	add	sp, #8
200009a2:	bd80      	pop	{r7, pc}
200009a4:	40020c14 	andmi	r0, r2, r4, lsl ip

200009a8 <delay_250ns>:
#include <defines.h>
#include <delay.h>


void delay_250ns ( void){
200009a8:	b580      	push	{r7, lr}
200009aa:	af00      	add	r7, sp, #0
    #ifdef SIMULATOR
        return;
200009ac:	46c0      	nop			; (mov r8, r8)
    *STK_LOAD = ( (168/4) -1 );
    *STK_VAL = 0;
    *STK_CTRL = 5;
    while( (*STK_CTRL & 0x10000 )== 0 ) {} 
    *STK_CTRL = 0;
}
200009ae:	46bd      	mov	sp, r7
200009b0:	bd80      	pop	{r7, pc}

200009b2 <delay_500ns>:

void delay_500ns(void){
200009b2:	b580      	push	{r7, lr}
200009b4:	af00      	add	r7, sp, #0
    #ifdef SIMULATOR
        return;
200009b6:	46c0      	nop			; (mov r8, r8)
    #endif
    delay_250ns();
    delay_250ns();
}
200009b8:	46bd      	mov	sp, r7
200009ba:	bd80      	pop	{r7, pc}

200009bc <delay_mikro>:

void delay_mikro(unsigned int us){
200009bc:	b580      	push	{r7, lr}
200009be:	b082      	sub	sp, #8
200009c0:	af00      	add	r7, sp, #0
200009c2:	6078      	str	r0, [r7, #4]
    #ifdef SIMULATOR
        return;
200009c4:	46c0      	nop			; (mov r8, r8)
        delay_250ns();
        delay_250ns();
        delay_250ns();
        delay_250ns();
    }
}
200009c6:	46bd      	mov	sp, r7
200009c8:	b002      	add	sp, #8
200009ca:	bd80      	pop	{r7, pc}

200009cc <delay_milli>:

void delay_milli(unsigned int ms){
200009cc:	b580      	push	{r7, lr}
200009ce:	b082      	sub	sp, #8
200009d0:	af00      	add	r7, sp, #0
200009d2:	6078      	str	r0, [r7, #4]
    #ifdef SIMULATOR
        ms = ms / 1000;
200009d4:	687b      	ldr	r3, [r7, #4]
200009d6:	22fa      	movs	r2, #250	; 0xfa
200009d8:	0091      	lsls	r1, r2, #2
200009da:	0018      	movs	r0, r3
200009dc:	f000 fb3e 	bl	2000105c <__udivsi3>
200009e0:	0003      	movs	r3, r0
200009e2:	607b      	str	r3, [r7, #4]
        ms++;
200009e4:	687b      	ldr	r3, [r7, #4]
200009e6:	3301      	adds	r3, #1
200009e8:	607b      	str	r3, [r7, #4]
    #endif
    
    while(ms--){
200009ea:	e004      	b.n	200009f6 <delay_milli+0x2a>
        delay_mikro(1000);
200009ec:	23fa      	movs	r3, #250	; 0xfa
200009ee:	009b      	lsls	r3, r3, #2
200009f0:	0018      	movs	r0, r3
200009f2:	f7ff ffe3 	bl	200009bc <delay_mikro>
    while(ms--){
200009f6:	687b      	ldr	r3, [r7, #4]
200009f8:	1e5a      	subs	r2, r3, #1
200009fa:	607a      	str	r2, [r7, #4]
200009fc:	2b00      	cmp	r3, #0
200009fe:	d1f5      	bne.n	200009ec <delay_milli+0x20>
    }
20000a00:	46c0      	nop			; (mov r8, r8)
20000a02:	46c0      	nop			; (mov r8, r8)
20000a04:	46bd      	mov	sp, r7
20000a06:	b002      	add	sp, #8
20000a08:	bd80      	pop	{r7, pc}
	...

20000a0c <graphic_init>:
#include <defines.h>
#include <asciidisplay.h>
#include <graphicdisplay.h>


void graphic_init(void){
20000a0c:	b580      	push	{r7, lr}
20000a0e:	af00      	add	r7, sp, #0
    graphic_ctrl_bit_set(B_E);
20000a10:	2040      	movs	r0, #64	; 0x40
20000a12:	f000 f851 	bl	20000ab8 <graphic_ctrl_bit_set>
    delay_mikro(10);
20000a16:	200a      	movs	r0, #10
20000a18:	f7ff ffd0 	bl	200009bc <delay_mikro>
    graphic_ctrl_bit_clear(B_CS1|B_CS2|B_RST|B_E);
20000a1c:	2078      	movs	r0, #120	; 0x78
20000a1e:	f000 f823 	bl	20000a68 <graphic_ctrl_bit_clear>
    delay_milli(30);
20000a22:	201e      	movs	r0, #30
20000a24:	f7ff ffd2 	bl	200009cc <delay_milli>
    graphic_ctrl_bit_set(B_RST);
20000a28:	2020      	movs	r0, #32
20000a2a:	f000 f845 	bl	20000ab8 <graphic_ctrl_bit_set>
    delay_milli(100);
20000a2e:	2064      	movs	r0, #100	; 0x64
20000a30:	f7ff ffcc 	bl	200009cc <delay_milli>
    graphic_write_command(LCD_OFF, B_CS1|B_CS2);
20000a34:	2118      	movs	r1, #24
20000a36:	203e      	movs	r0, #62	; 0x3e
20000a38:	f000 f942 	bl	20000cc0 <graphic_write_command>
    graphic_write_command(LCD_ON, B_CS1|B_CS2);
20000a3c:	2118      	movs	r1, #24
20000a3e:	203f      	movs	r0, #63	; 0x3f
20000a40:	f000 f93e 	bl	20000cc0 <graphic_write_command>
    graphic_write_command(LCD_DISP_START, B_CS1|B_CS2);
20000a44:	2118      	movs	r1, #24
20000a46:	20c0      	movs	r0, #192	; 0xc0
20000a48:	f000 f93a 	bl	20000cc0 <graphic_write_command>
    graphic_write_command(LCD_SET_ADD, B_CS1|B_CS2);
20000a4c:	2118      	movs	r1, #24
20000a4e:	2040      	movs	r0, #64	; 0x40
20000a50:	f000 f936 	bl	20000cc0 <graphic_write_command>
    graphic_write_command(LCD_SET_PAGE, B_CS1|B_CS2);
20000a54:	2118      	movs	r1, #24
20000a56:	20b8      	movs	r0, #184	; 0xb8
20000a58:	f000 f932 	bl	20000cc0 <graphic_write_command>
    select_controller(0);
20000a5c:	2000      	movs	r0, #0
20000a5e:	f000 f84d 	bl	20000afc <select_controller>
}
20000a62:	46c0      	nop			; (mov r8, r8)
20000a64:	46bd      	mov	sp, r7
20000a66:	bd80      	pop	{r7, pc}

20000a68 <graphic_ctrl_bit_clear>:

void graphic_ctrl_bit_clear(uint8_t x){
20000a68:	b580      	push	{r7, lr}
20000a6a:	b084      	sub	sp, #16
20000a6c:	af00      	add	r7, sp, #0
20000a6e:	0002      	movs	r2, r0
20000a70:	1dfb      	adds	r3, r7, #7
20000a72:	701a      	strb	r2, [r3, #0]
    //*GPIO_E_ODR_LOW &= ( B_SELECT | ~x);
    //ascii_ctrl_bit_clear(x);
    uint8_t c;
    c =*GPIO_E_ODR_LOW;
20000a74:	4a0f      	ldr	r2, [pc, #60]	; (20000ab4 <graphic_ctrl_bit_clear+0x4c>)
20000a76:	210f      	movs	r1, #15
20000a78:	187b      	adds	r3, r7, r1
20000a7a:	7812      	ldrb	r2, [r2, #0]
20000a7c:	701a      	strb	r2, [r3, #0]
    c &= ~x;
20000a7e:	1dfb      	adds	r3, r7, #7
20000a80:	781b      	ldrb	r3, [r3, #0]
20000a82:	b25b      	sxtb	r3, r3
20000a84:	43db      	mvns	r3, r3
20000a86:	b25b      	sxtb	r3, r3
20000a88:	187a      	adds	r2, r7, r1
20000a8a:	7812      	ldrb	r2, [r2, #0]
20000a8c:	b252      	sxtb	r2, r2
20000a8e:	4013      	ands	r3, r2
20000a90:	b25a      	sxtb	r2, r3
20000a92:	187b      	adds	r3, r7, r1
20000a94:	701a      	strb	r2, [r3, #0]
    c &= ~B_SELECT;
20000a96:	187b      	adds	r3, r7, r1
20000a98:	0008      	movs	r0, r1
20000a9a:	187a      	adds	r2, r7, r1
20000a9c:	7812      	ldrb	r2, [r2, #0]
20000a9e:	2104      	movs	r1, #4
20000aa0:	438a      	bics	r2, r1
20000aa2:	701a      	strb	r2, [r3, #0]
    *GPIO_E_ODR_LOW=c;
20000aa4:	4a03      	ldr	r2, [pc, #12]	; (20000ab4 <graphic_ctrl_bit_clear+0x4c>)
20000aa6:	183b      	adds	r3, r7, r0
20000aa8:	781b      	ldrb	r3, [r3, #0]
20000aaa:	7013      	strb	r3, [r2, #0]

}
20000aac:	46c0      	nop			; (mov r8, r8)
20000aae:	46bd      	mov	sp, r7
20000ab0:	b004      	add	sp, #16
20000ab2:	bd80      	pop	{r7, pc}
20000ab4:	40021014 	andmi	r1, r2, r4, lsl r0

20000ab8 <graphic_ctrl_bit_set>:

void graphic_ctrl_bit_set(uint8_t x){
20000ab8:	b580      	push	{r7, lr}
20000aba:	b084      	sub	sp, #16
20000abc:	af00      	add	r7, sp, #0
20000abe:	0002      	movs	r2, r0
20000ac0:	1dfb      	adds	r3, r7, #7
20000ac2:	701a      	strb	r2, [r3, #0]
    //*GPIO_E_ODR_LOW |= (B_SELECT | x );
    //ascii_ctrl_bit_set(x);
    uint8_t c;
    c =*GPIO_E_ODR_LOW;
20000ac4:	4a0c      	ldr	r2, [pc, #48]	; (20000af8 <graphic_ctrl_bit_set+0x40>)
20000ac6:	200f      	movs	r0, #15
20000ac8:	183b      	adds	r3, r7, r0
20000aca:	7812      	ldrb	r2, [r2, #0]
20000acc:	701a      	strb	r2, [r3, #0]
    c |= x; 
20000ace:	183b      	adds	r3, r7, r0
20000ad0:	1839      	adds	r1, r7, r0
20000ad2:	1dfa      	adds	r2, r7, #7
20000ad4:	7809      	ldrb	r1, [r1, #0]
20000ad6:	7812      	ldrb	r2, [r2, #0]
20000ad8:	430a      	orrs	r2, r1
20000ada:	701a      	strb	r2, [r3, #0]
    c &=(~B_SELECT);
20000adc:	183b      	adds	r3, r7, r0
20000ade:	183a      	adds	r2, r7, r0
20000ae0:	7812      	ldrb	r2, [r2, #0]
20000ae2:	2104      	movs	r1, #4
20000ae4:	438a      	bics	r2, r1
20000ae6:	701a      	strb	r2, [r3, #0]
    *GPIO_E_ODR_LOW= c;
20000ae8:	4a03      	ldr	r2, [pc, #12]	; (20000af8 <graphic_ctrl_bit_set+0x40>)
20000aea:	183b      	adds	r3, r7, r0
20000aec:	781b      	ldrb	r3, [r3, #0]
20000aee:	7013      	strb	r3, [r2, #0]
}
20000af0:	46c0      	nop			; (mov r8, r8)
20000af2:	46bd      	mov	sp, r7
20000af4:	b004      	add	sp, #16
20000af6:	bd80      	pop	{r7, pc}
20000af8:	40021014 	andmi	r1, r2, r4, lsl r0

20000afc <select_controller>:

void select_controller(uint8_t controller){
20000afc:	b580      	push	{r7, lr}
20000afe:	b082      	sub	sp, #8
20000b00:	af00      	add	r7, sp, #0
20000b02:	0002      	movs	r2, r0
20000b04:	1dfb      	adds	r3, r7, #7
20000b06:	701a      	strb	r2, [r3, #0]
    switch(controller){
20000b08:	1dfb      	adds	r3, r7, #7
20000b0a:	781b      	ldrb	r3, [r3, #0]
20000b0c:	2b18      	cmp	r3, #24
20000b0e:	d01a      	beq.n	20000b46 <select_controller+0x4a>
20000b10:	dc1d      	bgt.n	20000b4e <select_controller+0x52>
20000b12:	2b10      	cmp	r3, #16
20000b14:	d010      	beq.n	20000b38 <select_controller+0x3c>
20000b16:	dc1a      	bgt.n	20000b4e <select_controller+0x52>
20000b18:	2b00      	cmp	r3, #0
20000b1a:	d002      	beq.n	20000b22 <select_controller+0x26>
20000b1c:	2b08      	cmp	r3, #8
20000b1e:	d004      	beq.n	20000b2a <select_controller+0x2e>
            
        case B_CS1 | B_CS2:
            graphic_ctrl_bit_set(B_CS1|B_CS2);
            break;
    }
}
20000b20:	e015      	b.n	20000b4e <select_controller+0x52>
            graphic_ctrl_bit_clear(B_CS1|B_CS2);
20000b22:	2018      	movs	r0, #24
20000b24:	f7ff ffa0 	bl	20000a68 <graphic_ctrl_bit_clear>
            break;
20000b28:	e011      	b.n	20000b4e <select_controller+0x52>
            graphic_ctrl_bit_set(B_CS1);
20000b2a:	2008      	movs	r0, #8
20000b2c:	f7ff ffc4 	bl	20000ab8 <graphic_ctrl_bit_set>
            graphic_ctrl_bit_clear(B_CS2);
20000b30:	2010      	movs	r0, #16
20000b32:	f7ff ff99 	bl	20000a68 <graphic_ctrl_bit_clear>
            break;
20000b36:	e00a      	b.n	20000b4e <select_controller+0x52>
            graphic_ctrl_bit_clear(B_CS1);
20000b38:	2008      	movs	r0, #8
20000b3a:	f7ff ff95 	bl	20000a68 <graphic_ctrl_bit_clear>
            graphic_ctrl_bit_set(B_CS2);
20000b3e:	2010      	movs	r0, #16
20000b40:	f7ff ffba 	bl	20000ab8 <graphic_ctrl_bit_set>
            break;
20000b44:	e003      	b.n	20000b4e <select_controller+0x52>
            graphic_ctrl_bit_set(B_CS1|B_CS2);
20000b46:	2018      	movs	r0, #24
20000b48:	f7ff ffb6 	bl	20000ab8 <graphic_ctrl_bit_set>
            break;
20000b4c:	46c0      	nop			; (mov r8, r8)
}
20000b4e:	46c0      	nop			; (mov r8, r8)
20000b50:	46bd      	mov	sp, r7
20000b52:	b002      	add	sp, #8
20000b54:	bd80      	pop	{r7, pc}

20000b56 <graphic_wait_ready>:

void graphic_wait_ready(void){
20000b56:	b580      	push	{r7, lr}
20000b58:	af00      	add	r7, sp, #0
    graphic_ctrl_bit_clear(B_E);
20000b5a:	2040      	movs	r0, #64	; 0x40
20000b5c:	f7ff ff84 	bl	20000a68 <graphic_ctrl_bit_clear>
    *GPIO_E_MODER = 0x00005555;
20000b60:	4b0a      	ldr	r3, [pc, #40]	; (20000b8c <graphic_wait_ready+0x36>)
20000b62:	4a0b      	ldr	r2, [pc, #44]	; (20000b90 <graphic_wait_ready+0x3a>)
20000b64:	601a      	str	r2, [r3, #0]
    graphic_ctrl_bit_clear(B_RS);
20000b66:	2001      	movs	r0, #1
20000b68:	f7ff ff7e 	bl	20000a68 <graphic_ctrl_bit_clear>
    graphic_ctrl_bit_set(B_RW);
20000b6c:	2002      	movs	r0, #2
20000b6e:	f7ff ffa3 	bl	20000ab8 <graphic_ctrl_bit_set>
    delay_500ns();
20000b72:	f7ff ff1e 	bl	200009b2 <delay_500ns>
    while(1){
        graphic_ctrl_bit_set(B_E);
20000b76:	2040      	movs	r0, #64	; 0x40
20000b78:	f7ff ff9e 	bl	20000ab8 <graphic_ctrl_bit_set>
        delay_500ns();
20000b7c:	f7ff ff19 	bl	200009b2 <delay_500ns>
        graphic_ctrl_bit_clear(B_E);
20000b80:	2040      	movs	r0, #64	; 0x40
20000b82:	f7ff ff71 	bl	20000a68 <graphic_ctrl_bit_clear>
        delay_500ns();
20000b86:	f7ff ff14 	bl	200009b2 <delay_500ns>
        graphic_ctrl_bit_set(B_E);
20000b8a:	e7f4      	b.n	20000b76 <graphic_wait_ready+0x20>
20000b8c:	40021000 	andmi	r1, r2, r0
20000b90:	00005555 	andeq	r5, r0, r5, asr r5

20000b94 <graphic_read>:
    //graphic_ctrl_bit_set(B_E); // Ej på föreläsning
    *GPIO_E_MODER = 0x55555555;
    
}

unsigned char graphic_read(unsigned char controller){
20000b94:	b580      	push	{r7, lr}
20000b96:	b084      	sub	sp, #16
20000b98:	af00      	add	r7, sp, #0
20000b9a:	0002      	movs	r2, r0
20000b9c:	1dfb      	adds	r3, r7, #7
20000b9e:	701a      	strb	r2, [r3, #0]
    graphic_ctrl_bit_clear(B_E);
20000ba0:	2040      	movs	r0, #64	; 0x40
20000ba2:	f7ff ff61 	bl	20000a68 <graphic_ctrl_bit_clear>
    *GPIO_E_MODER = 0x00005555;
20000ba6:	4b1a      	ldr	r3, [pc, #104]	; (20000c10 <graphic_read+0x7c>)
20000ba8:	4a1a      	ldr	r2, [pc, #104]	; (20000c14 <graphic_read+0x80>)
20000baa:	601a      	str	r2, [r3, #0]
    graphic_ctrl_bit_set(B_RS|B_RW);
20000bac:	2003      	movs	r0, #3
20000bae:	f7ff ff83 	bl	20000ab8 <graphic_ctrl_bit_set>
    select_controller(controller);              //EJ i Boken
20000bb2:	1dfb      	adds	r3, r7, #7
20000bb4:	781b      	ldrb	r3, [r3, #0]
20000bb6:	0018      	movs	r0, r3
20000bb8:	f7ff ffa0 	bl	20000afc <select_controller>
    delay_500ns();
20000bbc:	f7ff fef9 	bl	200009b2 <delay_500ns>
    graphic_ctrl_bit_set(B_E);
20000bc0:	2040      	movs	r0, #64	; 0x40
20000bc2:	f7ff ff79 	bl	20000ab8 <graphic_ctrl_bit_set>
    delay_500ns();
20000bc6:	f7ff fef4 	bl	200009b2 <delay_500ns>
    unsigned char retval = *GPIO_E_IDR_HIGH;
20000bca:	4a13      	ldr	r2, [pc, #76]	; (20000c18 <graphic_read+0x84>)
20000bcc:	230f      	movs	r3, #15
20000bce:	18fb      	adds	r3, r7, r3
20000bd0:	7812      	ldrb	r2, [r2, #0]
20000bd2:	701a      	strb	r2, [r3, #0]
    graphic_ctrl_bit_clear(B_E);
20000bd4:	2040      	movs	r0, #64	; 0x40
20000bd6:	f7ff ff47 	bl	20000a68 <graphic_ctrl_bit_clear>
    *GPIO_E_MODER = 0x55555555;
20000bda:	4b0d      	ldr	r3, [pc, #52]	; (20000c10 <graphic_read+0x7c>)
20000bdc:	4a0f      	ldr	r2, [pc, #60]	; (20000c1c <graphic_read+0x88>)
20000bde:	601a      	str	r2, [r3, #0]
    
    if (controller & B_CS1){
20000be0:	1dfb      	adds	r3, r7, #7
20000be2:	781b      	ldrb	r3, [r3, #0]
20000be4:	2208      	movs	r2, #8
20000be6:	4013      	ands	r3, r2
20000be8:	d002      	beq.n	20000bf0 <graphic_read+0x5c>
        select_controller(B_CS1);
20000bea:	2008      	movs	r0, #8
20000bec:	f7ff ff86 	bl	20000afc <select_controller>
        //graphic_wait_ready();
    }
    if (controller & B_CS2){
20000bf0:	1dfb      	adds	r3, r7, #7
20000bf2:	781b      	ldrb	r3, [r3, #0]
20000bf4:	2210      	movs	r2, #16
20000bf6:	4013      	ands	r3, r2
20000bf8:	d002      	beq.n	20000c00 <graphic_read+0x6c>
        select_controller(B_CS2);
20000bfa:	2010      	movs	r0, #16
20000bfc:	f7ff ff7e 	bl	20000afc <select_controller>
        //graphic_wait_ready();
    }
    return retval;
20000c00:	230f      	movs	r3, #15
20000c02:	18fb      	adds	r3, r7, r3
20000c04:	781b      	ldrb	r3, [r3, #0]
}
20000c06:	0018      	movs	r0, r3
20000c08:	46bd      	mov	sp, r7
20000c0a:	b004      	add	sp, #16
20000c0c:	bd80      	pop	{r7, pc}
20000c0e:	46c0      	nop			; (mov r8, r8)
20000c10:	40021000 	andmi	r1, r2, r0
20000c14:	00005555 	andeq	r5, r0, r5, asr r5
20000c18:	40021011 	andmi	r1, r2, r1, lsl r0
20000c1c:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000c20 <graphic_read_data>:

uint8_t graphic_read_data(uint8_t controller){
20000c20:	b580      	push	{r7, lr}
20000c22:	b082      	sub	sp, #8
20000c24:	af00      	add	r7, sp, #0
20000c26:	0002      	movs	r2, r0
20000c28:	1dfb      	adds	r3, r7, #7
20000c2a:	701a      	strb	r2, [r3, #0]
    (void) graphic_read(controller);
20000c2c:	1dfb      	adds	r3, r7, #7
20000c2e:	781b      	ldrb	r3, [r3, #0]
20000c30:	0018      	movs	r0, r3
20000c32:	f7ff ffaf 	bl	20000b94 <graphic_read>
    return graphic_read(controller);
20000c36:	1dfb      	adds	r3, r7, #7
20000c38:	781b      	ldrb	r3, [r3, #0]
20000c3a:	0018      	movs	r0, r3
20000c3c:	f7ff ffaa 	bl	20000b94 <graphic_read>
20000c40:	0003      	movs	r3, r0
}
20000c42:	0018      	movs	r0, r3
20000c44:	46bd      	mov	sp, r7
20000c46:	b002      	add	sp, #8
20000c48:	bd80      	pop	{r7, pc}

20000c4a <graphic_write>:

void graphic_write(uint8_t value, uint8_t controller){
20000c4a:	b580      	push	{r7, lr}
20000c4c:	b082      	sub	sp, #8
20000c4e:	af00      	add	r7, sp, #0
20000c50:	0002      	movs	r2, r0
20000c52:	1dfb      	adds	r3, r7, #7
20000c54:	701a      	strb	r2, [r3, #0]
20000c56:	1dbb      	adds	r3, r7, #6
20000c58:	1c0a      	adds	r2, r1, #0
20000c5a:	701a      	strb	r2, [r3, #0]
    *GPIO_E_ODR_HIGH = value;
20000c5c:	4a17      	ldr	r2, [pc, #92]	; (20000cbc <graphic_write+0x72>)
20000c5e:	1dfb      	adds	r3, r7, #7
20000c60:	781b      	ldrb	r3, [r3, #0]
20000c62:	7013      	strb	r3, [r2, #0]
    select_controller(controller);
20000c64:	1dbb      	adds	r3, r7, #6
20000c66:	781b      	ldrb	r3, [r3, #0]
20000c68:	0018      	movs	r0, r3
20000c6a:	f7ff ff47 	bl	20000afc <select_controller>
    delay_500ns();
20000c6e:	f7ff fea0 	bl	200009b2 <delay_500ns>
    graphic_ctrl_bit_set(B_E);
20000c72:	2040      	movs	r0, #64	; 0x40
20000c74:	f7ff ff20 	bl	20000ab8 <graphic_ctrl_bit_set>
    delay_500ns();
20000c78:	f7ff fe9b 	bl	200009b2 <delay_500ns>
    graphic_ctrl_bit_clear(B_E);
20000c7c:	2040      	movs	r0, #64	; 0x40
20000c7e:	f7ff fef3 	bl	20000a68 <graphic_ctrl_bit_clear>
    
    if(controller & B_CS1){
20000c82:	1dbb      	adds	r3, r7, #6
20000c84:	781b      	ldrb	r3, [r3, #0]
20000c86:	2208      	movs	r2, #8
20000c88:	4013      	ands	r3, r2
20000c8a:	d002      	beq.n	20000c92 <graphic_write+0x48>
        select_controller(B_CS1);
20000c8c:	2008      	movs	r0, #8
20000c8e:	f7ff ff35 	bl	20000afc <select_controller>
        //graphic_wait_ready();
    }
    if(controller & B_CS2){
20000c92:	1dbb      	adds	r3, r7, #6
20000c94:	781b      	ldrb	r3, [r3, #0]
20000c96:	2210      	movs	r2, #16
20000c98:	4013      	ands	r3, r2
20000c9a:	d002      	beq.n	20000ca2 <graphic_write+0x58>
        select_controller(B_CS2);
20000c9c:	2010      	movs	r0, #16
20000c9e:	f7ff ff2d 	bl	20000afc <select_controller>
        //graphic_wait_ready();
    }
    
    /* INTE på föreläsning*/
    *GPIO_E_ODR_HIGH = 0;
20000ca2:	4b06      	ldr	r3, [pc, #24]	; (20000cbc <graphic_write+0x72>)
20000ca4:	2200      	movs	r2, #0
20000ca6:	701a      	strb	r2, [r3, #0]
    graphic_ctrl_bit_set(B_E);
20000ca8:	2040      	movs	r0, #64	; 0x40
20000caa:	f7ff ff05 	bl	20000ab8 <graphic_ctrl_bit_set>
    select_controller(0);
20000cae:	2000      	movs	r0, #0
20000cb0:	f7ff ff24 	bl	20000afc <select_controller>
      
}
20000cb4:	46c0      	nop			; (mov r8, r8)
20000cb6:	46bd      	mov	sp, r7
20000cb8:	b002      	add	sp, #8
20000cba:	bd80      	pop	{r7, pc}
20000cbc:	40021015 	andmi	r1, r2, r5, lsl r0

20000cc0 <graphic_write_command>:

void graphic_write_command(uint8_t cmd, uint8_t controller){
20000cc0:	b580      	push	{r7, lr}
20000cc2:	b082      	sub	sp, #8
20000cc4:	af00      	add	r7, sp, #0
20000cc6:	0002      	movs	r2, r0
20000cc8:	1dfb      	adds	r3, r7, #7
20000cca:	701a      	strb	r2, [r3, #0]
20000ccc:	1dbb      	adds	r3, r7, #6
20000cce:	1c0a      	adds	r2, r1, #0
20000cd0:	701a      	strb	r2, [r3, #0]
    graphic_ctrl_bit_clear(B_E);
20000cd2:	2040      	movs	r0, #64	; 0x40
20000cd4:	f7ff fec8 	bl	20000a68 <graphic_ctrl_bit_clear>
    select_controller(controller);
20000cd8:	1dbb      	adds	r3, r7, #6
20000cda:	781b      	ldrb	r3, [r3, #0]
20000cdc:	0018      	movs	r0, r3
20000cde:	f7ff ff0d 	bl	20000afc <select_controller>
    graphic_ctrl_bit_clear(B_RS);
20000ce2:	2001      	movs	r0, #1
20000ce4:	f7ff fec0 	bl	20000a68 <graphic_ctrl_bit_clear>
    graphic_ctrl_bit_clear(B_RW);
20000ce8:	2002      	movs	r0, #2
20000cea:	f7ff febd 	bl	20000a68 <graphic_ctrl_bit_clear>
    graphic_write(cmd, controller);
20000cee:	1dbb      	adds	r3, r7, #6
20000cf0:	781a      	ldrb	r2, [r3, #0]
20000cf2:	1dfb      	adds	r3, r7, #7
20000cf4:	781b      	ldrb	r3, [r3, #0]
20000cf6:	0011      	movs	r1, r2
20000cf8:	0018      	movs	r0, r3
20000cfa:	f7ff ffa6 	bl	20000c4a <graphic_write>
}
20000cfe:	46c0      	nop			; (mov r8, r8)
20000d00:	46bd      	mov	sp, r7
20000d02:	b002      	add	sp, #8
20000d04:	bd80      	pop	{r7, pc}

20000d06 <graphic_write_data>:

void graphic_write_data(uint8_t data, uint8_t controller){
20000d06:	b580      	push	{r7, lr}
20000d08:	b082      	sub	sp, #8
20000d0a:	af00      	add	r7, sp, #0
20000d0c:	0002      	movs	r2, r0
20000d0e:	1dfb      	adds	r3, r7, #7
20000d10:	701a      	strb	r2, [r3, #0]
20000d12:	1dbb      	adds	r3, r7, #6
20000d14:	1c0a      	adds	r2, r1, #0
20000d16:	701a      	strb	r2, [r3, #0]
    graphic_ctrl_bit_clear(B_E);
20000d18:	2040      	movs	r0, #64	; 0x40
20000d1a:	f7ff fea5 	bl	20000a68 <graphic_ctrl_bit_clear>
    select_controller(controller);
20000d1e:	1dbb      	adds	r3, r7, #6
20000d20:	781b      	ldrb	r3, [r3, #0]
20000d22:	0018      	movs	r0, r3
20000d24:	f7ff feea 	bl	20000afc <select_controller>
    graphic_ctrl_bit_set(B_RS);
20000d28:	2001      	movs	r0, #1
20000d2a:	f7ff fec5 	bl	20000ab8 <graphic_ctrl_bit_set>
    graphic_ctrl_bit_clear(B_RW);
20000d2e:	2002      	movs	r0, #2
20000d30:	f7ff fe9a 	bl	20000a68 <graphic_ctrl_bit_clear>
    graphic_write(data, controller);
20000d34:	1dbb      	adds	r3, r7, #6
20000d36:	781a      	ldrb	r2, [r3, #0]
20000d38:	1dfb      	adds	r3, r7, #7
20000d3a:	781b      	ldrb	r3, [r3, #0]
20000d3c:	0011      	movs	r1, r2
20000d3e:	0018      	movs	r0, r3
20000d40:	f7ff ff83 	bl	20000c4a <graphic_write>
}
20000d44:	46c0      	nop			; (mov r8, r8)
20000d46:	46bd      	mov	sp, r7
20000d48:	b002      	add	sp, #8
20000d4a:	bd80      	pop	{r7, pc}

20000d4c <graphic_clear_screen>:

void graphic_clear_screen(void){
20000d4c:	b580      	push	{r7, lr}
20000d4e:	b082      	sub	sp, #8
20000d50:	af00      	add	r7, sp, #0
    for (int page = 0; page < 8; page++){
20000d52:	2300      	movs	r3, #0
20000d54:	607b      	str	r3, [r7, #4]
20000d56:	e01e      	b.n	20000d96 <graphic_clear_screen+0x4a>
        graphic_write_command(LCD_SET_PAGE | page, B_CS1|B_CS2);
20000d58:	687b      	ldr	r3, [r7, #4]
20000d5a:	b25b      	sxtb	r3, r3
20000d5c:	2248      	movs	r2, #72	; 0x48
20000d5e:	4252      	negs	r2, r2
20000d60:	4313      	orrs	r3, r2
20000d62:	b25b      	sxtb	r3, r3
20000d64:	b2db      	uxtb	r3, r3
20000d66:	2118      	movs	r1, #24
20000d68:	0018      	movs	r0, r3
20000d6a:	f7ff ffa9 	bl	20000cc0 <graphic_write_command>
        graphic_write_command(LCD_SET_ADD | 0, B_CS1|B_CS2);
20000d6e:	2118      	movs	r1, #24
20000d70:	2040      	movs	r0, #64	; 0x40
20000d72:	f7ff ffa5 	bl	20000cc0 <graphic_write_command>
        for (int add = 0; add < 63; add++){
20000d76:	2300      	movs	r3, #0
20000d78:	603b      	str	r3, [r7, #0]
20000d7a:	e006      	b.n	20000d8a <graphic_clear_screen+0x3e>
            graphic_write_data(0, B_CS1|B_CS2);
20000d7c:	2118      	movs	r1, #24
20000d7e:	2000      	movs	r0, #0
20000d80:	f7ff ffc1 	bl	20000d06 <graphic_write_data>
        for (int add = 0; add < 63; add++){
20000d84:	683b      	ldr	r3, [r7, #0]
20000d86:	3301      	adds	r3, #1
20000d88:	603b      	str	r3, [r7, #0]
20000d8a:	683b      	ldr	r3, [r7, #0]
20000d8c:	2b3e      	cmp	r3, #62	; 0x3e
20000d8e:	ddf5      	ble.n	20000d7c <graphic_clear_screen+0x30>
    for (int page = 0; page < 8; page++){
20000d90:	687b      	ldr	r3, [r7, #4]
20000d92:	3301      	adds	r3, #1
20000d94:	607b      	str	r3, [r7, #4]
20000d96:	687b      	ldr	r3, [r7, #4]
20000d98:	2b07      	cmp	r3, #7
20000d9a:	dddd      	ble.n	20000d58 <graphic_clear_screen+0xc>
        }
    }
}
20000d9c:	46c0      	nop			; (mov r8, r8)
20000d9e:	46c0      	nop			; (mov r8, r8)
20000da0:	46bd      	mov	sp, r7
20000da2:	b002      	add	sp, #8
20000da4:	bd80      	pop	{r7, pc}

20000da6 <clear_backbuffer>:

void clear_backbuffer(){
20000da6:	b580      	push	{r7, lr}
20000da8:	b082      	sub	sp, #8
20000daa:	af00      	add	r7, sp, #0
    int i;
    for (i = 0; i < 1024; i++)
20000dac:	2300      	movs	r3, #0
20000dae:	607b      	str	r3, [r7, #4]
20000db0:	e007      	b.n	20000dc2 <clear_backbuffer+0x1c>
        backBuffer[i] = 0;
20000db2:	4b09      	ldr	r3, [pc, #36]	; (20000dd8 <clear_backbuffer+0x32>)
20000db4:	687a      	ldr	r2, [r7, #4]
20000db6:	0092      	lsls	r2, r2, #2
20000db8:	2100      	movs	r1, #0
20000dba:	50d1      	str	r1, [r2, r3]
    for (i = 0; i < 1024; i++)
20000dbc:	687b      	ldr	r3, [r7, #4]
20000dbe:	3301      	adds	r3, #1
20000dc0:	607b      	str	r3, [r7, #4]
20000dc2:	687a      	ldr	r2, [r7, #4]
20000dc4:	2380      	movs	r3, #128	; 0x80
20000dc6:	00db      	lsls	r3, r3, #3
20000dc8:	429a      	cmp	r2, r3
20000dca:	dbf2      	blt.n	20000db2 <clear_backbuffer+0xc>
}
20000dcc:	46c0      	nop			; (mov r8, r8)
20000dce:	46c0      	nop			; (mov r8, r8)
20000dd0:	46bd      	mov	sp, r7
20000dd2:	b002      	add	sp, #8
20000dd4:	bd80      	pop	{r7, pc}
20000dd6:	46c0      	nop			; (mov r8, r8)
20000dd8:	20002178 	andcs	r2, r0, r8, ror r1

20000ddc <pixel>:

void pixel(unsigned x, unsigned y){
20000ddc:	b580      	push	{r7, lr}
20000dde:	b084      	sub	sp, #16
20000de0:	af00      	add	r7, sp, #0
20000de2:	6078      	str	r0, [r7, #4]
20000de4:	6039      	str	r1, [r7, #0]
    uint8_t mask;
    int index = 0;
20000de6:	2300      	movs	r3, #0
20000de8:	60fb      	str	r3, [r7, #12]
    if ((x >128)||(x <1)||(y >64)||(y <1)) return;
20000dea:	687b      	ldr	r3, [r7, #4]
20000dec:	2b80      	cmp	r3, #128	; 0x80
20000dee:	d831      	bhi.n	20000e54 <pixel+0x78>
20000df0:	687b      	ldr	r3, [r7, #4]
20000df2:	2b00      	cmp	r3, #0
20000df4:	d02e      	beq.n	20000e54 <pixel+0x78>
20000df6:	683b      	ldr	r3, [r7, #0]
20000df8:	2b40      	cmp	r3, #64	; 0x40
20000dfa:	d82b      	bhi.n	20000e54 <pixel+0x78>
20000dfc:	683b      	ldr	r3, [r7, #0]
20000dfe:	2b00      	cmp	r3, #0
20000e00:	d028      	beq.n	20000e54 <pixel+0x78>

    mask = 1 << ((y-1)%8);
20000e02:	683b      	ldr	r3, [r7, #0]
20000e04:	3b01      	subs	r3, #1
20000e06:	2207      	movs	r2, #7
20000e08:	4013      	ands	r3, r2
20000e0a:	2201      	movs	r2, #1
20000e0c:	409a      	lsls	r2, r3
20000e0e:	230b      	movs	r3, #11
20000e10:	18fb      	adds	r3, r7, r3
20000e12:	701a      	strb	r2, [r3, #0]
    
    if(x > 64){
20000e14:	687b      	ldr	r3, [r7, #4]
20000e16:	2b40      	cmp	r3, #64	; 0x40
20000e18:	d905      	bls.n	20000e26 <pixel+0x4a>
        x -= 65;
20000e1a:	687b      	ldr	r3, [r7, #4]
20000e1c:	3b41      	subs	r3, #65	; 0x41
20000e1e:	607b      	str	r3, [r7, #4]
        index = 512;
20000e20:	2380      	movs	r3, #128	; 0x80
20000e22:	009b      	lsls	r3, r3, #2
20000e24:	60fb      	str	r3, [r7, #12]
    }
    
    index += x + ((y-1)/8)*64;
20000e26:	683b      	ldr	r3, [r7, #0]
20000e28:	3b01      	subs	r3, #1
20000e2a:	08db      	lsrs	r3, r3, #3
20000e2c:	019a      	lsls	r2, r3, #6
20000e2e:	687b      	ldr	r3, [r7, #4]
20000e30:	18d2      	adds	r2, r2, r3
20000e32:	68fb      	ldr	r3, [r7, #12]
20000e34:	18d3      	adds	r3, r2, r3
20000e36:	60fb      	str	r3, [r7, #12]
    
    backBuffer[index] |= mask;
20000e38:	4b08      	ldr	r3, [pc, #32]	; (20000e5c <pixel+0x80>)
20000e3a:	68fa      	ldr	r2, [r7, #12]
20000e3c:	0092      	lsls	r2, r2, #2
20000e3e:	58d2      	ldr	r2, [r2, r3]
20000e40:	230b      	movs	r3, #11
20000e42:	18fb      	adds	r3, r7, r3
20000e44:	781b      	ldrb	r3, [r3, #0]
20000e46:	431a      	orrs	r2, r3
20000e48:	0011      	movs	r1, r2
20000e4a:	4b04      	ldr	r3, [pc, #16]	; (20000e5c <pixel+0x80>)
20000e4c:	68fa      	ldr	r2, [r7, #12]
20000e4e:	0092      	lsls	r2, r2, #2
20000e50:	50d1      	str	r1, [r2, r3]
20000e52:	e000      	b.n	20000e56 <pixel+0x7a>
    if ((x >128)||(x <1)||(y >64)||(y <1)) return;
20000e54:	46c0      	nop			; (mov r8, r8)
}
20000e56:	46bd      	mov	sp, r7
20000e58:	b004      	add	sp, #16
20000e5a:	bd80      	pop	{r7, pc}
20000e5c:	20002178 	andcs	r2, r0, r8, ror r1

20000e60 <graphic_draw_screen>:

void graphic_draw_screen(void){
20000e60:	b580      	push	{r7, lr}
20000e62:	b084      	sub	sp, #16
20000e64:	af00      	add	r7, sp, #0
    uint8_t i,  j, controller, c;
    unsigned int k = 0;
20000e66:	2300      	movs	r3, #0
20000e68:	60bb      	str	r3, [r7, #8]
    
    for (c = 0; c < 2; c++){
20000e6a:	230d      	movs	r3, #13
20000e6c:	18fb      	adds	r3, r7, r3
20000e6e:	2200      	movs	r2, #0
20000e70:	701a      	strb	r2, [r3, #0]
20000e72:	e050      	b.n	20000f16 <graphic_draw_screen+0xb6>
        controller = (c==0) ? B_CS1 : B_CS2;
20000e74:	230d      	movs	r3, #13
20000e76:	18fb      	adds	r3, r7, r3
20000e78:	781b      	ldrb	r3, [r3, #0]
20000e7a:	2b00      	cmp	r3, #0
20000e7c:	d101      	bne.n	20000e82 <graphic_draw_screen+0x22>
20000e7e:	2208      	movs	r2, #8
20000e80:	e000      	b.n	20000e84 <graphic_draw_screen+0x24>
20000e82:	2210      	movs	r2, #16
20000e84:	1dfb      	adds	r3, r7, #7
20000e86:	701a      	strb	r2, [r3, #0]
        for (j = 0; j < 8; j++){
20000e88:	230e      	movs	r3, #14
20000e8a:	18fb      	adds	r3, r7, r3
20000e8c:	2200      	movs	r2, #0
20000e8e:	701a      	strb	r2, [r3, #0]
20000e90:	e036      	b.n	20000f00 <graphic_draw_screen+0xa0>
            graphic_write_command(LCD_SET_PAGE | j, controller);
20000e92:	230e      	movs	r3, #14
20000e94:	18fb      	adds	r3, r7, r3
20000e96:	781b      	ldrb	r3, [r3, #0]
20000e98:	2248      	movs	r2, #72	; 0x48
20000e9a:	4252      	negs	r2, r2
20000e9c:	4313      	orrs	r3, r2
20000e9e:	b2da      	uxtb	r2, r3
20000ea0:	1dfb      	adds	r3, r7, #7
20000ea2:	781b      	ldrb	r3, [r3, #0]
20000ea4:	0019      	movs	r1, r3
20000ea6:	0010      	movs	r0, r2
20000ea8:	f7ff ff0a 	bl	20000cc0 <graphic_write_command>
            graphic_write_command(LCD_SET_ADD | 0, controller);
20000eac:	1dfb      	adds	r3, r7, #7
20000eae:	781b      	ldrb	r3, [r3, #0]
20000eb0:	0019      	movs	r1, r3
20000eb2:	2040      	movs	r0, #64	; 0x40
20000eb4:	f7ff ff04 	bl	20000cc0 <graphic_write_command>
            for(i = 0; i <= 63; i++, k++){
20000eb8:	230f      	movs	r3, #15
20000eba:	18fb      	adds	r3, r7, r3
20000ebc:	2200      	movs	r2, #0
20000ebe:	701a      	strb	r2, [r3, #0]
20000ec0:	e013      	b.n	20000eea <graphic_draw_screen+0x8a>
                graphic_write_data(backBuffer[k],controller);  
20000ec2:	4b1a      	ldr	r3, [pc, #104]	; (20000f2c <graphic_draw_screen+0xcc>)
20000ec4:	68ba      	ldr	r2, [r7, #8]
20000ec6:	0092      	lsls	r2, r2, #2
20000ec8:	58d3      	ldr	r3, [r2, r3]
20000eca:	b2da      	uxtb	r2, r3
20000ecc:	1dfb      	adds	r3, r7, #7
20000ece:	781b      	ldrb	r3, [r3, #0]
20000ed0:	0019      	movs	r1, r3
20000ed2:	0010      	movs	r0, r2
20000ed4:	f7ff ff17 	bl	20000d06 <graphic_write_data>
            for(i = 0; i <= 63; i++, k++){
20000ed8:	210f      	movs	r1, #15
20000eda:	187b      	adds	r3, r7, r1
20000edc:	781a      	ldrb	r2, [r3, #0]
20000ede:	187b      	adds	r3, r7, r1
20000ee0:	3201      	adds	r2, #1
20000ee2:	701a      	strb	r2, [r3, #0]
20000ee4:	68bb      	ldr	r3, [r7, #8]
20000ee6:	3301      	adds	r3, #1
20000ee8:	60bb      	str	r3, [r7, #8]
20000eea:	230f      	movs	r3, #15
20000eec:	18fb      	adds	r3, r7, r3
20000eee:	781b      	ldrb	r3, [r3, #0]
20000ef0:	2b3f      	cmp	r3, #63	; 0x3f
20000ef2:	d9e6      	bls.n	20000ec2 <graphic_draw_screen+0x62>
        for (j = 0; j < 8; j++){
20000ef4:	210e      	movs	r1, #14
20000ef6:	187b      	adds	r3, r7, r1
20000ef8:	781a      	ldrb	r2, [r3, #0]
20000efa:	187b      	adds	r3, r7, r1
20000efc:	3201      	adds	r2, #1
20000efe:	701a      	strb	r2, [r3, #0]
20000f00:	230e      	movs	r3, #14
20000f02:	18fb      	adds	r3, r7, r3
20000f04:	781b      	ldrb	r3, [r3, #0]
20000f06:	2b07      	cmp	r3, #7
20000f08:	d9c3      	bls.n	20000e92 <graphic_draw_screen+0x32>
    for (c = 0; c < 2; c++){
20000f0a:	210d      	movs	r1, #13
20000f0c:	187b      	adds	r3, r7, r1
20000f0e:	781a      	ldrb	r2, [r3, #0]
20000f10:	187b      	adds	r3, r7, r1
20000f12:	3201      	adds	r2, #1
20000f14:	701a      	strb	r2, [r3, #0]
20000f16:	230d      	movs	r3, #13
20000f18:	18fb      	adds	r3, r7, r3
20000f1a:	781b      	ldrb	r3, [r3, #0]
20000f1c:	2b01      	cmp	r3, #1
20000f1e:	d9a9      	bls.n	20000e74 <graphic_draw_screen+0x14>
            }
        }
    }
}
20000f20:	46c0      	nop			; (mov r8, r8)
20000f22:	46c0      	nop			; (mov r8, r8)
20000f24:	46bd      	mov	sp, r7
20000f26:	b004      	add	sp, #16
20000f28:	bd80      	pop	{r7, pc}
20000f2a:	46c0      	nop			; (mov r8, r8)
20000f2c:	20002178 	andcs	r2, r0, r8, ror r1

20000f30 <peek>:
int front = 0;
int rear = -1;
int itemCount = 0;

/*returns the head*/
int peek() {
20000f30:	b580      	push	{r7, lr}
20000f32:	af00      	add	r7, sp, #0
   return objArray[front];
20000f34:	4b03      	ldr	r3, [pc, #12]	; (20000f44 <peek+0x14>)
20000f36:	681a      	ldr	r2, [r3, #0]
20000f38:	4b03      	ldr	r3, [pc, #12]	; (20000f48 <peek+0x18>)
20000f3a:	0092      	lsls	r2, r2, #2
20000f3c:	58d3      	ldr	r3, [r2, r3]
}
20000f3e:	0018      	movs	r0, r3
20000f40:	46bd      	mov	sp, r7
20000f42:	bd80      	pop	{r7, pc}
20000f44:	20003178 	andcs	r3, r0, r8, ror r1
20000f48:	20003180 	andcs	r3, r0, r0, lsl #3

20000f4c <isEmpty>:

/*returns true if itemCount == 0*/
bool isEmpty() {
20000f4c:	b580      	push	{r7, lr}
20000f4e:	af00      	add	r7, sp, #0
   return itemCount == 0;
20000f50:	4b03      	ldr	r3, [pc, #12]	; (20000f60 <isEmpty+0x14>)
20000f52:	681b      	ldr	r3, [r3, #0]
20000f54:	425a      	negs	r2, r3
20000f56:	4153      	adcs	r3, r2
20000f58:	b2db      	uxtb	r3, r3
}
20000f5a:	0018      	movs	r0, r3
20000f5c:	46bd      	mov	sp, r7
20000f5e:	bd80      	pop	{r7, pc}
20000f60:	2000317c 	andcs	r3, r0, ip, ror r1

20000f64 <isFull>:

/*returns true if itemCount == MAX (512)*/
bool isFull() {
20000f64:	b580      	push	{r7, lr}
20000f66:	af00      	add	r7, sp, #0
   return itemCount == MAX;
20000f68:	4b05      	ldr	r3, [pc, #20]	; (20000f80 <isFull+0x1c>)
20000f6a:	681b      	ldr	r3, [r3, #0]
20000f6c:	4a05      	ldr	r2, [pc, #20]	; (20000f84 <isFull+0x20>)
20000f6e:	4694      	mov	ip, r2
20000f70:	4463      	add	r3, ip
20000f72:	425a      	negs	r2, r3
20000f74:	4153      	adcs	r3, r2
20000f76:	b2db      	uxtb	r3, r3
}
20000f78:	0018      	movs	r0, r3
20000f7a:	46bd      	mov	sp, r7
20000f7c:	bd80      	pop	{r7, pc}
20000f7e:	46c0      	nop			; (mov r8, r8)
20000f80:	2000317c 	andcs	r3, r0, ip, ror r1
20000f84:	fffffe00 			; <UNDEFINED> instruction: 0xfffffe00

20000f88 <size>:

/*Returns itemCount*/
int size() {
20000f88:	b580      	push	{r7, lr}
20000f8a:	af00      	add	r7, sp, #0
   return itemCount;
20000f8c:	4b02      	ldr	r3, [pc, #8]	; (20000f98 <size+0x10>)
20000f8e:	681b      	ldr	r3, [r3, #0]
}  
20000f90:	0018      	movs	r0, r3
20000f92:	46bd      	mov	sp, r7
20000f94:	bd80      	pop	{r7, pc}
20000f96:	46c0      	nop			; (mov r8, r8)
20000f98:	2000317c 	andcs	r3, r0, ip, ror r1

20000f9c <insert>:

/*Adds a node in the end of the queue*/
void insert(POBJECT data) {
20000f9c:	b580      	push	{r7, lr}
20000f9e:	b082      	sub	sp, #8
20000fa0:	af00      	add	r7, sp, #0
20000fa2:	6078      	str	r0, [r7, #4]

   if(!isFull()) {
20000fa4:	f7ff ffde 	bl	20000f64 <isFull>
20000fa8:	0003      	movs	r3, r0
20000faa:	001a      	movs	r2, r3
20000fac:	2301      	movs	r3, #1
20000fae:	4053      	eors	r3, r2
20000fb0:	b2db      	uxtb	r3, r3
20000fb2:	2b00      	cmp	r3, #0
20000fb4:	d018      	beq.n	20000fe8 <insert+0x4c>
	
      if(rear == MAX-1) {
20000fb6:	4b0e      	ldr	r3, [pc, #56]	; (20000ff0 <insert+0x54>)
20000fb8:	681b      	ldr	r3, [r3, #0]
20000fba:	4a0e      	ldr	r2, [pc, #56]	; (20000ff4 <insert+0x58>)
20000fbc:	4293      	cmp	r3, r2
20000fbe:	d103      	bne.n	20000fc8 <insert+0x2c>
         rear = -1;            
20000fc0:	4b0b      	ldr	r3, [pc, #44]	; (20000ff0 <insert+0x54>)
20000fc2:	2201      	movs	r2, #1
20000fc4:	4252      	negs	r2, r2
20000fc6:	601a      	str	r2, [r3, #0]
      }       
      objArray[++rear] = data;
20000fc8:	4b09      	ldr	r3, [pc, #36]	; (20000ff0 <insert+0x54>)
20000fca:	681b      	ldr	r3, [r3, #0]
20000fcc:	1c5a      	adds	r2, r3, #1
20000fce:	4b08      	ldr	r3, [pc, #32]	; (20000ff0 <insert+0x54>)
20000fd0:	601a      	str	r2, [r3, #0]
20000fd2:	4b07      	ldr	r3, [pc, #28]	; (20000ff0 <insert+0x54>)
20000fd4:	681a      	ldr	r2, [r3, #0]
20000fd6:	4b08      	ldr	r3, [pc, #32]	; (20000ff8 <insert+0x5c>)
20000fd8:	0092      	lsls	r2, r2, #2
20000fda:	6879      	ldr	r1, [r7, #4]
20000fdc:	50d1      	str	r1, [r2, r3]
      itemCount++;
20000fde:	4b07      	ldr	r3, [pc, #28]	; (20000ffc <insert+0x60>)
20000fe0:	681b      	ldr	r3, [r3, #0]
20000fe2:	1c5a      	adds	r2, r3, #1
20000fe4:	4b05      	ldr	r3, [pc, #20]	; (20000ffc <insert+0x60>)
20000fe6:	601a      	str	r2, [r3, #0]
   }
}
20000fe8:	46c0      	nop			; (mov r8, r8)
20000fea:	46bd      	mov	sp, r7
20000fec:	b002      	add	sp, #8
20000fee:	bd80      	pop	{r7, pc}
20000ff0:	20008228 	andcs	r8, r0, r8, lsr #4
20000ff4:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20000ff8:	20003180 	andcs	r3, r0, r0, lsl #3
20000ffc:	2000317c 	andcs	r3, r0, ip, ror r1

20001000 <remove>:

int remove() {
20001000:	b580      	push	{r7, lr}
20001002:	b082      	sub	sp, #8
20001004:	af00      	add	r7, sp, #0
   POBJECT data = objArray[front++];
20001006:	4b0e      	ldr	r3, [pc, #56]	; (20001040 <remove+0x40>)
20001008:	681b      	ldr	r3, [r3, #0]
2000100a:	1c59      	adds	r1, r3, #1
2000100c:	4a0c      	ldr	r2, [pc, #48]	; (20001040 <remove+0x40>)
2000100e:	6011      	str	r1, [r2, #0]
20001010:	4a0c      	ldr	r2, [pc, #48]	; (20001044 <remove+0x44>)
20001012:	009b      	lsls	r3, r3, #2
20001014:	589b      	ldr	r3, [r3, r2]
20001016:	607b      	str	r3, [r7, #4]
	
   if(front == MAX) {
20001018:	4b09      	ldr	r3, [pc, #36]	; (20001040 <remove+0x40>)
2000101a:	681a      	ldr	r2, [r3, #0]
2000101c:	2380      	movs	r3, #128	; 0x80
2000101e:	009b      	lsls	r3, r3, #2
20001020:	429a      	cmp	r2, r3
20001022:	d102      	bne.n	2000102a <remove+0x2a>
      front = 0;
20001024:	4b06      	ldr	r3, [pc, #24]	; (20001040 <remove+0x40>)
20001026:	2200      	movs	r2, #0
20001028:	601a      	str	r2, [r3, #0]
   }
	
   itemCount--;
2000102a:	4b07      	ldr	r3, [pc, #28]	; (20001048 <remove+0x48>)
2000102c:	681b      	ldr	r3, [r3, #0]
2000102e:	1e5a      	subs	r2, r3, #1
20001030:	4b05      	ldr	r3, [pc, #20]	; (20001048 <remove+0x48>)
20001032:	601a      	str	r2, [r3, #0]
   return (int)data;  
20001034:	687b      	ldr	r3, [r7, #4]
}
20001036:	0018      	movs	r0, r3
20001038:	46bd      	mov	sp, r7
2000103a:	b002      	add	sp, #8
2000103c:	bd80      	pop	{r7, pc}
2000103e:	46c0      	nop			; (mov r8, r8)
20001040:	20003178 	andcs	r3, r0, r8, ror r1
20001044:	20003180 	andcs	r3, r0, r0, lsl #3
20001048:	2000317c 	andcs	r3, r0, ip, ror r1

2000104c <queue>:

POBJECT queue(){
2000104c:	b580      	push	{r7, lr}
2000104e:	af00      	add	r7, sp, #0
    return objArray;
20001050:	4b01      	ldr	r3, [pc, #4]	; (20001058 <queue+0xc>)
}
20001052:	0018      	movs	r0, r3
20001054:	46bd      	mov	sp, r7
20001056:	bd80      	pop	{r7, pc}
20001058:	20003180 	andcs	r3, r0, r0, lsl #3

2000105c <__udivsi3>:
2000105c:	2200      	movs	r2, #0
2000105e:	0843      	lsrs	r3, r0, #1
20001060:	428b      	cmp	r3, r1
20001062:	d374      	bcc.n	2000114e <__udivsi3+0xf2>
20001064:	0903      	lsrs	r3, r0, #4
20001066:	428b      	cmp	r3, r1
20001068:	d35f      	bcc.n	2000112a <__udivsi3+0xce>
2000106a:	0a03      	lsrs	r3, r0, #8
2000106c:	428b      	cmp	r3, r1
2000106e:	d344      	bcc.n	200010fa <__udivsi3+0x9e>
20001070:	0b03      	lsrs	r3, r0, #12
20001072:	428b      	cmp	r3, r1
20001074:	d328      	bcc.n	200010c8 <__udivsi3+0x6c>
20001076:	0c03      	lsrs	r3, r0, #16
20001078:	428b      	cmp	r3, r1
2000107a:	d30d      	bcc.n	20001098 <__udivsi3+0x3c>
2000107c:	22ff      	movs	r2, #255	; 0xff
2000107e:	0209      	lsls	r1, r1, #8
20001080:	ba12      	rev	r2, r2
20001082:	0c03      	lsrs	r3, r0, #16
20001084:	428b      	cmp	r3, r1
20001086:	d302      	bcc.n	2000108e <__udivsi3+0x32>
20001088:	1212      	asrs	r2, r2, #8
2000108a:	0209      	lsls	r1, r1, #8
2000108c:	d065      	beq.n	2000115a <__udivsi3+0xfe>
2000108e:	0b03      	lsrs	r3, r0, #12
20001090:	428b      	cmp	r3, r1
20001092:	d319      	bcc.n	200010c8 <__udivsi3+0x6c>
20001094:	e000      	b.n	20001098 <__udivsi3+0x3c>
20001096:	0a09      	lsrs	r1, r1, #8
20001098:	0bc3      	lsrs	r3, r0, #15
2000109a:	428b      	cmp	r3, r1
2000109c:	d301      	bcc.n	200010a2 <__udivsi3+0x46>
2000109e:	03cb      	lsls	r3, r1, #15
200010a0:	1ac0      	subs	r0, r0, r3
200010a2:	4152      	adcs	r2, r2
200010a4:	0b83      	lsrs	r3, r0, #14
200010a6:	428b      	cmp	r3, r1
200010a8:	d301      	bcc.n	200010ae <__udivsi3+0x52>
200010aa:	038b      	lsls	r3, r1, #14
200010ac:	1ac0      	subs	r0, r0, r3
200010ae:	4152      	adcs	r2, r2
200010b0:	0b43      	lsrs	r3, r0, #13
200010b2:	428b      	cmp	r3, r1
200010b4:	d301      	bcc.n	200010ba <__udivsi3+0x5e>
200010b6:	034b      	lsls	r3, r1, #13
200010b8:	1ac0      	subs	r0, r0, r3
200010ba:	4152      	adcs	r2, r2
200010bc:	0b03      	lsrs	r3, r0, #12
200010be:	428b      	cmp	r3, r1
200010c0:	d301      	bcc.n	200010c6 <__udivsi3+0x6a>
200010c2:	030b      	lsls	r3, r1, #12
200010c4:	1ac0      	subs	r0, r0, r3
200010c6:	4152      	adcs	r2, r2
200010c8:	0ac3      	lsrs	r3, r0, #11
200010ca:	428b      	cmp	r3, r1
200010cc:	d301      	bcc.n	200010d2 <__udivsi3+0x76>
200010ce:	02cb      	lsls	r3, r1, #11
200010d0:	1ac0      	subs	r0, r0, r3
200010d2:	4152      	adcs	r2, r2
200010d4:	0a83      	lsrs	r3, r0, #10
200010d6:	428b      	cmp	r3, r1
200010d8:	d301      	bcc.n	200010de <__udivsi3+0x82>
200010da:	028b      	lsls	r3, r1, #10
200010dc:	1ac0      	subs	r0, r0, r3
200010de:	4152      	adcs	r2, r2
200010e0:	0a43      	lsrs	r3, r0, #9
200010e2:	428b      	cmp	r3, r1
200010e4:	d301      	bcc.n	200010ea <__udivsi3+0x8e>
200010e6:	024b      	lsls	r3, r1, #9
200010e8:	1ac0      	subs	r0, r0, r3
200010ea:	4152      	adcs	r2, r2
200010ec:	0a03      	lsrs	r3, r0, #8
200010ee:	428b      	cmp	r3, r1
200010f0:	d301      	bcc.n	200010f6 <__udivsi3+0x9a>
200010f2:	020b      	lsls	r3, r1, #8
200010f4:	1ac0      	subs	r0, r0, r3
200010f6:	4152      	adcs	r2, r2
200010f8:	d2cd      	bcs.n	20001096 <__udivsi3+0x3a>
200010fa:	09c3      	lsrs	r3, r0, #7
200010fc:	428b      	cmp	r3, r1
200010fe:	d301      	bcc.n	20001104 <__udivsi3+0xa8>
20001100:	01cb      	lsls	r3, r1, #7
20001102:	1ac0      	subs	r0, r0, r3
20001104:	4152      	adcs	r2, r2
20001106:	0983      	lsrs	r3, r0, #6
20001108:	428b      	cmp	r3, r1
2000110a:	d301      	bcc.n	20001110 <__udivsi3+0xb4>
2000110c:	018b      	lsls	r3, r1, #6
2000110e:	1ac0      	subs	r0, r0, r3
20001110:	4152      	adcs	r2, r2
20001112:	0943      	lsrs	r3, r0, #5
20001114:	428b      	cmp	r3, r1
20001116:	d301      	bcc.n	2000111c <__udivsi3+0xc0>
20001118:	014b      	lsls	r3, r1, #5
2000111a:	1ac0      	subs	r0, r0, r3
2000111c:	4152      	adcs	r2, r2
2000111e:	0903      	lsrs	r3, r0, #4
20001120:	428b      	cmp	r3, r1
20001122:	d301      	bcc.n	20001128 <__udivsi3+0xcc>
20001124:	010b      	lsls	r3, r1, #4
20001126:	1ac0      	subs	r0, r0, r3
20001128:	4152      	adcs	r2, r2
2000112a:	08c3      	lsrs	r3, r0, #3
2000112c:	428b      	cmp	r3, r1
2000112e:	d301      	bcc.n	20001134 <__udivsi3+0xd8>
20001130:	00cb      	lsls	r3, r1, #3
20001132:	1ac0      	subs	r0, r0, r3
20001134:	4152      	adcs	r2, r2
20001136:	0883      	lsrs	r3, r0, #2
20001138:	428b      	cmp	r3, r1
2000113a:	d301      	bcc.n	20001140 <__udivsi3+0xe4>
2000113c:	008b      	lsls	r3, r1, #2
2000113e:	1ac0      	subs	r0, r0, r3
20001140:	4152      	adcs	r2, r2
20001142:	0843      	lsrs	r3, r0, #1
20001144:	428b      	cmp	r3, r1
20001146:	d301      	bcc.n	2000114c <__udivsi3+0xf0>
20001148:	004b      	lsls	r3, r1, #1
2000114a:	1ac0      	subs	r0, r0, r3
2000114c:	4152      	adcs	r2, r2
2000114e:	1a41      	subs	r1, r0, r1
20001150:	d200      	bcs.n	20001154 <__udivsi3+0xf8>
20001152:	4601      	mov	r1, r0
20001154:	4152      	adcs	r2, r2
20001156:	4610      	mov	r0, r2
20001158:	4770      	bx	lr
2000115a:	e7ff      	b.n	2000115c <__udivsi3+0x100>
2000115c:	b501      	push	{r0, lr}
2000115e:	2000      	movs	r0, #0
20001160:	f000 f806 	bl	20001170 <__aeabi_idiv0>
20001164:	bd02      	pop	{r1, pc}
20001166:	46c0      	nop			; (mov r8, r8)

20001168 <__aeabi_uidivmod>:
20001168:	2900      	cmp	r1, #0
2000116a:	d0f7      	beq.n	2000115c <__udivsi3+0x100>
2000116c:	e776      	b.n	2000105c <__udivsi3>
2000116e:	4770      	bx	lr

20001170 <__aeabi_idiv0>:
20001170:	4770      	bx	lr
20001172:	46c0      	nop			; (mov r8, r8)

20001174 <backBuffer>:
	...

20002174 <points>:
20002174:	00000000 	andeq	r0, r0, r0

20002178 <backBuffer>:
	...

20003178 <front>:
20003178:	00000000 	andeq	r0, r0, r0

2000317c <itemCount>:
2000317c:	00000000 	andeq	r0, r0, r0

20003180 <objArray>:
	...

20003980 <image_bits>:
20003980:	aa889494 	bge	1e228bd8 <startup-0x1dd7428>
20003984:	beebffeb 	cdplt	15, 14, cr15, cr11, cr11, {7}
20003988:	0000009c 	muleq	r0, ip, r0

2000398c <snakehead_geometry>:
2000398c:	0000000a 	andeq	r0, r0, sl
20003990:	00000004 	andeq	r0, r0, r4
20003994:	00000004 	andeq	r0, r0, r4
20003998:	02000100 	andeq	r0, r0, #0
2000399c:	02010101 	andeq	r0, r1, #1073741824	; 0x40000000
200039a0:	03020002 	movweq	r0, #8194	; 0x2002
200039a4:	01030003 	tsteq	r3, r3
200039a8:	03030203 	movweq	r0, #12803	; 0x3203
	...

200039c0 <snakebody_geometry>:
200039c0:	00000010 	andeq	r0, r0, r0, lsl r0
200039c4:	00000004 	andeq	r0, r0, r4
200039c8:	00000004 	andeq	r0, r0, r4
200039cc:	01000000 	mrseq	r0, (UNDEF: 0)
200039d0:	03000200 	movweq	r0, #512	; 0x200
200039d4:	01010001 	tsteq	r1, r1
200039d8:	03010201 	movweq	r0, #4609	; 0x1201
200039dc:	01020002 	tsteq	r2, r2
200039e0:	03020202 	movweq	r0, #8706	; 0x2202
200039e4:	01030003 	tsteq	r3, r3
200039e8:	03030203 	movweq	r0, #12803	; 0x3203
	...

200039f4 <food_geometry>:
200039f4:	0000000c 	andeq	r0, r0, ip
200039f8:	00000004 	andeq	r0, r0, r4
200039fc:	00000004 	andeq	r0, r0, r4
20003a00:	01000000 	mrseq	r0, (UNDEF: 0)
20003a04:	03000200 	movweq	r0, #512	; 0x200
20003a08:	03010001 	movweq	r0, #4097	; 0x1001
20003a0c:	03020002 	movweq	r0, #8194	; 0x2002
20003a10:	01030003 	tsteq	r3, r3
20003a14:	03030203 	movweq	r0, #12803	; 0x3203
	...

20003a28 <snakehead>:
20003a28:	2000398c 	andcs	r3, r0, ip, lsl #19
	...
20003a34:	00000001 	andeq	r0, r0, r1
20003a38:	00000001 	andeq	r0, r0, r1
20003a3c:	20000319 	andcs	r0, r0, r9, lsl r3
20003a40:	2000037b 	andcs	r0, r0, fp, ror r3
20003a44:	200003dd 	ldrdcs	r0, [r0], -sp
20003a48:	200002f9 	strdcs	r0, [r0], -r9

20003a4c <snakebody>:
20003a4c:	200039c0 	andcs	r3, r0, r0, asr #19
	...
20003a58:	00000001 	andeq	r0, r0, r1
20003a5c:	00000001 	andeq	r0, r0, r1
20003a60:	20000319 	andcs	r0, r0, r9, lsl r3
20003a64:	2000037b 	andcs	r0, r0, fp, ror r3
20003a68:	200003dd 	ldrdcs	r0, [r0], -sp
20003a6c:	200002f9 	strdcs	r0, [r0], -r9
	...

20008204 <food_obj>:
20008204:	200039f4 	strdcs	r3, [r0], -r4
	...
20008210:	00000001 	andeq	r0, r0, r1
20008214:	00000001 	andeq	r0, r0, r1
20008218:	20000319 	andcs	r0, r0, r9, lsl r3
2000821c:	2000037b 	andcs	r0, r0, fp, ror r3
20008220:	200003dd 	ldrdcs	r0, [r0], -sp
20008224:	200002f9 	strdcs	r0, [r0], -r9

20008228 <rear>:
20008228:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000822c:	200007ca 	andcs	r0, r0, sl, asr #15
20008230:	200007ca 	andcs	r0, r0, sl, asr #15
20008234:	20000780 	andcs	r0, r0, r0, lsl #15
20008238:	200007ca 	andcs	r0, r0, sl, asr #15
2000823c:	2000076c 	andcs	r0, r0, ip, ror #14
20008240:	200007ca 	andcs	r0, r0, sl, asr #15
20008244:	20000758 	andcs	r0, r0, r8, asr r7
20008248:	200007ca 	andcs	r0, r0, sl, asr #15
2000824c:	20000794 	mulcs	r0, r4, r7
20008250:	200007ca 	andcs	r0, r0, sl, asr #15
20008254:	200007a8 	andcs	r0, r0, r8, lsr #15
20008258:	200007ca 	andcs	r0, r0, sl, asr #15
2000825c:	200007ca 	andcs	r0, r0, sl, asr #15
20008260:	200007bc 			; <UNDEFINED> instruction: 0x200007bc
20008264:	774f5b06 	strbvc	r5, [pc, -r6, lsl #22]
20008268:	7c7d6d66 	ldclvc	13, cr6, [sp], #-408	; 0xfffffe68
2000826c:	396f7f07 	stmdbcc	pc!, {r0, r1, r2, r8, r9, sl, fp, ip, sp, lr}^	; <UNPREDICTABLE>
20008270:	bf713f79 	svclt	0x00713f79
20008274:	0a030201 	beq	200c8a80 <rear+0xc0858>
20008278:	0b060504 	bleq	20189690 <rear+0x181468>
2000827c:	0c090807 	stceq	8, cr0, [r9], {7}
20008280:	0d0f000e 	stceq	0, cr0, [pc, #-56]	; 20008250 <rear+0x28>

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	000002c7 	andeq	r0, r0, r7, asr #5
       4:	00000004 	andeq	r0, r0, r4
       8:	01040000 	mrseq	r0, (UNDEF: 4)
       c:	00000051 	andeq	r0, r0, r1, asr r0
      10:	0001f80c 	andeq	pc, r1, ip, lsl #16
      14:	00015d00 	andeq	r5, r1, r0, lsl #26
      18:	00001000 	andeq	r1, r0, r0
      1c:	0002e620 	andeq	lr, r2, r0, lsr #12
      20:	00000000 	andeq	r0, r0, r0
      24:	08010200 	stmdaeq	r1, {r9}
      28:	0000014f 	andeq	r0, r0, pc, asr #2
      2c:	00000c03 	andeq	r0, r0, r3, lsl #24
      30:	066e0100 	strbteq	r0, [lr], -r0, lsl #2
      34:	200002aa 	andcs	r0, r0, sl, lsr #5
      38:	0000004c 	andeq	r0, r0, ip, asr #32
      3c:	007a9c01 	rsbseq	r9, sl, r1, lsl #24
      40:	78040000 	stmdavc	r4, {}	; <UNPREDICTABLE>
      44:	176e0100 	strbne	r0, [lr, -r0, lsl #2]!
      48:	0000007a 	andeq	r0, r0, sl, ror r0
      4c:	046c9102 	strbteq	r9, [ip], #-258	; 0xfffffefe
      50:	6e010079 	mcrvs	0, 0, r0, cr1, cr9, {3}
      54:	00007a1e 	andeq	r7, r0, lr, lsl sl
      58:	68910200 	ldmvs	r1, {r9}
      5c:	00011105 	andeq	r1, r1, r5, lsl #2
      60:	136f0100 	cmnne	pc, #0
      64:	00000025 	andeq	r0, r0, r5, lsr #32
      68:	06779102 	ldrbteq	r9, [r7], -r2, lsl #2
      6c:	0000002e 	andeq	r0, r0, lr, lsr #32
      70:	7a054d01 	bvc	15347c <startup-0x1feacb84>
      74:	07000000 	streq	r0, [r0, -r0]
      78:	04080000 	streq	r0, [r8], #-0
      7c:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
      80:	01d40300 	bicseq	r0, r4, r0, lsl #6
      84:	67010000 	strvs	r0, [r1, -r0]
      88:	00028006 	andeq	r8, r2, r6
      8c:	00002a20 	andeq	r2, r0, r0, lsr #20
      90:	b39c0100 	orrslt	r0, ip, #0
      94:	04000000 	streq	r0, [r0], #-0
      98:	67010063 	strvs	r0, [r1, -r3, rrx]
      9c:	00002525 	andeq	r2, r0, r5, lsr #10
      a0:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
      a4:	00002e06 	andeq	r2, r0, r6, lsl #28
      a8:	054d0100 	strbeq	r0, [sp, #-256]	; 0xffffff00
      ac:	0000007a 	andeq	r0, r0, sl, ror r0
      b0:	09000007 	stmdbeq	r0, {r0, r1, r2}
      b4:	000001c5 	andeq	r0, r0, r5, asr #3
      b8:	52066001 	andpl	r6, r6, #1, 0
      bc:	2e200002 	cdpcs	0, 2, cr0, cr0, cr2, {0}
      c0:	01000000 	mrseq	r0, (UNDEF: 0)
      c4:	0000d89c 	muleq	r0, ip, r8
      c8:	002e0600 	eoreq	r0, lr, r0, lsl #12
      cc:	4d010000 	stcmi	0, cr0, [r1, #-0]
      d0:	00007a05 	andeq	r7, r0, r5, lsl #20
      d4:	00000700 	andeq	r0, r0, r0, lsl #14
      d8:	00013f09 	andeq	r3, r1, r9, lsl #30
      dc:	06590100 	ldrbeq	r0, [r9], -r0, lsl #2
      e0:	20000224 	andcs	r0, r0, r4, lsr #4
      e4:	0000002e 	andeq	r0, r0, lr, lsr #32
      e8:	00fd9c01 	rscseq	r9, sp, r1, lsl #24
      ec:	2e060000 	cdpcs	0, 0, cr0, cr6, cr0, {0}
      f0:	01000000 	mrseq	r0, (UNDEF: 0)
      f4:	007a054d 	rsbseq	r0, sl, sp, asr #10
      f8:	00070000 	andeq	r0, r7, r0
      fc:	019c0900 	orrseq	r0, ip, r0, lsl #18
     100:	52010000 	andpl	r0, r1, #0, 0
     104:	0001f606 	andeq	pc, r1, r6, lsl #12
     108:	00002e20 	andeq	r2, r0, r0, lsr #28
     10c:	229c0100 	addscs	r0, ip, #0
     110:	06000001 	streq	r0, [r0], -r1
     114:	0000002e 	andeq	r0, r0, lr, lsr #32
     118:	7a054d01 	bvc	153524 <startup-0x1feacadc>
     11c:	07000000 	streq	r0, [r0, -r0]
     120:	df090000 	svcle	0x00090000
     124:	01000000 	mrseq	r0, (UNDEF: 0)
     128:	01c8064b 	biceq	r0, r8, fp, asr #12
     12c:	002e2000 	eoreq	r2, lr, r0
     130:	9c010000 	stcls	0, cr0, [r1], {-0}
     134:	00000159 	andeq	r0, r0, r9, asr r1
     138:	00002e0a 	andeq	r2, r0, sl, lsl #28
     13c:	054d0100 	strbeq	r0, [sp, #-256]	; 0xffffff00
     140:	0000007a 	andeq	r0, r0, sl, ror r0
     144:	0000014a 	andeq	r0, r0, sl, asr #2
     148:	00060007 	andeq	r0, r6, r7
     14c:	01000000 	mrseq	r0, (UNDEF: 0)
     150:	007a054f 	rsbseq	r0, sl, pc, asr #10
     154:	00070000 	andeq	r0, r7, r0
     158:	012f0b00 			; <UNDEFINED> instruction: 0x012f0b00
     15c:	42010000 	andmi	r0, r1, #0, 0
     160:	0000250f 	andeq	r2, r0, pc, lsl #10
     164:	00018c00 	andeq	r8, r1, r0, lsl #24
     168:	00003c20 	andeq	r3, r0, r0, lsr #24
     16c:	839c0100 	orrshi	r0, ip, #0
     170:	05000001 	streq	r0, [r0, #-1]
     174:	00000194 	muleq	r0, r4, r1
     178:	830a4601 	movwhi	r4, #42497	; 0xa601
     17c:	02000001 	andeq	r0, r0, #1, 0
     180:	02006f91 	andeq	r6, r0, #580	; 0x244
     184:	01580801 	cmpeq	r8, r1, lsl #16
     188:	cd0b0000 	stcgt	0, cr0, [fp, #-0]
     18c:	01000000 	mrseq	r0, (UNDEF: 0)
     190:	00250f39 	eoreq	r0, r5, r9, lsr pc
     194:	01500000 	cmpeq	r0, r0
     198:	003c2000 	eorseq	r2, ip, r0
     19c:	9c010000 	stcls	0, cr0, [r1], {-0}
     1a0:	000001b4 			; <UNDEFINED> instruction: 0x000001b4
     1a4:	0001bd05 	andeq	fp, r1, r5, lsl #26
     1a8:	0a3d0100 	beq	f405b0 <startup-0x1f0bfa50>
     1ac:	00000183 	andeq	r0, r0, r3, lsl #3
     1b0:	006f9102 	rsbeq	r9, pc, r2, lsl #2
     1b4:	0001190b 	andeq	r1, r1, fp, lsl #18
     1b8:	0f300100 	svceq	0x00300100
     1bc:	00000025 	andeq	r0, r0, r5, lsr #32
     1c0:	2000011c 	andcs	r0, r0, ip, lsl r1
     1c4:	00000034 	andeq	r0, r0, r4, lsr r0
     1c8:	01f09c01 	mvnseq	r9, r1, lsl #24
     1cc:	fe0a0000 	cdp2	0, 0, cr0, cr10, cr0, {0}
     1d0:	01000000 	mrseq	r0, (UNDEF: 0)
     1d4:	007a052c 	rsbseq	r0, sl, ip, lsr #10
     1d8:	01e00000 	mvneq	r0, r0
     1dc:	00070000 	andeq	r0, r7, r0
     1e0:	00010a05 	andeq	r0, r1, r5, lsl #20
     1e4:	0a340100 	beq	d005ec <startup-0x1f2ffa14>
     1e8:	00000183 	andeq	r0, r0, r3, lsl #3
     1ec:	00779102 	rsbseq	r9, r7, r2, lsl #2
     1f0:	00003a03 	andeq	r3, r0, r3, lsl #20
     1f4:	06290100 	strteq	r0, [r9], -r0, lsl #2
     1f8:	200000ec 	andcs	r0, r0, ip, ror #1
     1fc:	00000030 	andeq	r0, r0, r0, lsr r0
     200:	02249c01 	eoreq	r9, r4, #256	; 0x100
     204:	a80c0000 	stmdage	ip, {}	; <UNPREDICTABLE>
     208:	01000001 	tsteq	r0, r1
     20c:	00252b29 	eoreq	r2, r5, r9, lsr #22
     210:	91020000 	mrsls	r0, (UNDEF: 2)
     214:	00fe0677 	rscseq	r0, lr, r7, ror r6
     218:	2c010000 	stccs	0, cr0, [r1], {-0}
     21c:	00007a05 	andeq	r7, r0, r5, lsl #20
     220:	00000700 	andeq	r0, r0, r0, lsl #14
     224:	0000ed03 	andeq	lr, r0, r3, lsl #26
     228:	06230100 	strteq	r0, [r3], -r0, lsl #2
     22c:	200000c2 	andcs	r0, r0, r2, asr #1
     230:	0000002a 	andeq	r0, r0, sl, lsr #32
     234:	024a9c01 	subeq	r9, sl, #256	; 0x100
     238:	760c0000 	strvc	r0, [ip], -r0
     23c:	01000005 	tsteq	r0, r5
     240:	00252523 	eoreq	r2, r5, r3, lsr #10
     244:	91020000 	mrsls	r0, (UNDEF: 2)
     248:	ad030077 	stcge	0, cr0, [r3, #-476]	; 0xfffffe24
     24c:	01000001 	tsteq	r0, r1
     250:	0098061d 	addseq	r0, r8, sp, lsl r6
     254:	002a2000 	eoreq	r2, sl, r0
     258:	9c010000 	stcls	0, cr0, [r1], {-0}
     25c:	00000270 	andeq	r0, r0, r0, ror r2
     260:	0005050c 	andeq	r0, r5, ip, lsl #10
     264:	241d0100 	ldrcs	r0, [sp], #-256	; 0xffffff00
     268:	00000025 	andeq	r0, r0, r5, lsr #32
     26c:	00779102 	rsbseq	r9, r7, r2, lsl #2
     270:	0000190d 	andeq	r1, r0, sp, lsl #18
     274:	06180100 	ldreq	r0, [r8], -r0, lsl #2
     278:	2000005c 	andcs	r0, r0, ip, asr r0
     27c:	0000003c 	andeq	r0, r0, ip, lsr r0
     280:	02949c01 	addseq	r9, r4, #256	; 0x100
     284:	78040000 	stmdavc	r4, {}	; <UNPREDICTABLE>
     288:	29180100 	ldmdbcs	r8, {r8}
     28c:	00000025 	andeq	r0, r0, r5, lsr #32
     290:	00779102 	rsbseq	r9, r7, r2, lsl #2
     294:	0001e50d 	andeq	lr, r1, sp, lsl #10
     298:	06130100 	ldreq	r0, [r3], -r0, lsl #2
     29c:	2000002a 	andcs	r0, r0, sl, lsr #32
     2a0:	00000032 	andeq	r0, r0, r2, lsr r0
     2a4:	02b89c01 	adcseq	r9, r8, #256	; 0x100
     2a8:	78040000 	stmdavc	r4, {}	; <UNPREDICTABLE>
     2ac:	27130100 	ldrcs	r0, [r3, -r0, lsl #2]
     2b0:	00000025 	andeq	r0, r0, r5, lsr #32
     2b4:	00779102 	rsbseq	r9, r7, r2, lsl #2
     2b8:	00023e0e 	andeq	r3, r2, lr, lsl #28
     2bc:	06040100 	streq	r0, [r4], -r0, lsl #2
     2c0:	20000010 	andcs	r0, r0, r0, lsl r0
     2c4:	0000001a 	andeq	r0, r0, sl, lsl r0
     2c8:	8d009c01 	stchi	12, cr9, [r0, #-4]
     2cc:	04000006 	streq	r0, [r0], #-6
     2d0:	00011400 	andeq	r1, r1, r0, lsl #8
     2d4:	51010400 	tstpl	r1, r0, lsl #8
     2d8:	0c000000 	stceq	0, cr0, [r0], {-0}
     2dc:	00000262 	andeq	r0, r0, r2, ror #4
     2e0:	0000015d 	andeq	r0, r0, sp, asr r1
	...
     2ec:	000001bc 			; <UNDEFINED> instruction: 0x000001bc
     2f0:	4f080102 	svcmi	0x00080102
     2f4:	03000001 	movweq	r0, #1
     2f8:	00000049 	andeq	r0, r0, r9, asr #32
     2fc:	0000003d 	andeq	r0, r0, sp, lsr r0
     300:	00004204 	andeq	r4, r0, r4, lsl #4
     304:	0003ff00 	andeq	pc, r3, r0, lsl #30
     308:	00002c05 	andeq	r2, r0, r5, lsl #24
     30c:	07040200 	streq	r0, [r4, -r0, lsl #4]
     310:	000006a8 	andeq	r0, r0, r8, lsr #13
     314:	00004205 	andeq	r4, r0, r5, lsl #4
     318:	03910600 	orrseq	r0, r1, #0, 12
     31c:	0f030000 	svceq	0x00030000
     320:	00003d1e 	andeq	r3, r0, lr, lsl sp
     324:	74030500 	strvc	r0, [r3], #-1280	; 0xfffffb00
     328:	07200011 			; <UNDEFINED> instruction: 0x07200011
     32c:	000002c4 	andeq	r0, r0, r4, asr #5
     330:	10010202 	andne	r0, r1, r2, lsl #4
     334:	00000084 	andeq	r0, r0, r4, lsl #1
     338:	02007808 	andeq	r7, r0, #8, 16	; 0x80000
     33c:	00251302 	eoreq	r1, r5, r2, lsl #6
     340:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     344:	03020079 	movweq	r0, #8313	; 0x2079
     348:	00002513 	andeq	r2, r0, r3, lsl r5
     34c:	09000100 	stmdbeq	r0, {r8}
     350:	000002de 	ldrdeq	r0, [r0], -lr
     354:	60020402 	andvs	r0, r2, r2, lsl #8
     358:	07000000 	streq	r0, [r0, -r0]
     35c:	0000033d 	andeq	r0, r0, sp, lsr r3
     360:	10080234 	andne	r0, r8, r4, lsr r2
     364:	000000d1 	ldrdeq	r0, [r0], -r1
     368:	0003f30a 	andeq	pc, r3, sl, lsl #6
     36c:	09090200 	stmdbeq	r9, {r9}
     370:	000000d1 	ldrdeq	r0, [r0], -r1
     374:	03590a00 	cmpeq	r9, #0, 20
     378:	0a020000 	beq	80380 <startup-0x1ff7fc80>
     37c:	0000d109 	andeq	sp, r0, r9, lsl #2
     380:	5f0a0400 	svcpl	0x000a0400
     384:	02000003 	andeq	r0, r0, #3, 0
     388:	00d1090b 	sbcseq	r0, r1, fp, lsl #18
     38c:	08080000 	stmdaeq	r8, {}	; <UNPREDICTABLE>
     390:	02007870 	andeq	r7, r0, #112, 16	; 0x700000
     394:	00dd0b0c 	sbcseq	r0, sp, ip, lsl #22
     398:	000c0000 	andeq	r0, ip, r0
     39c:	6905040b 	stmdbvs	r5, {r0, r1, r3, sl}
     3a0:	0500746e 	streq	r7, [r0, #-1134]	; 0xfffffb92
     3a4:	000000d1 	ldrdeq	r0, [r0], -r1
     3a8:	00008403 	andeq	r8, r0, r3, lsl #8
     3ac:	0000ed00 	andeq	lr, r0, r0, lsl #26
     3b0:	00420c00 	subeq	r0, r2, r0, lsl #24
     3b4:	00130000 	andseq	r0, r3, r0
     3b8:	00024a09 	andeq	r4, r2, r9, lsl #20
     3bc:	030d0200 	movweq	r0, #53760	; 0xd200
     3c0:	00000090 	muleq	r0, r0, r0
     3c4:	00024909 	andeq	r4, r2, r9, lsl #18
     3c8:	0e0d0200 	cdpeq	2, 0, cr0, cr13, cr0, {0}
     3cc:	00000105 	andeq	r0, r0, r5, lsl #2
     3d0:	0090040d 	addseq	r0, r0, sp, lsl #8
     3d4:	d5070000 	strle	r0, [r7, #-0]
     3d8:	24000003 	strcs	r0, [r0], #-3
     3dc:	8e100f02 	cdphi	15, 1, cr0, cr0, cr2, {0}
     3e0:	08000001 	stmdaeq	r0, {r0}
     3e4:	006f6567 	rsbeq	r6, pc, r7, ror #10
     3e8:	f90f1002 			; <UNDEFINED> instruction: 0xf90f1002
     3ec:	00000000 	andeq	r0, r0, r0
     3f0:	0002580a 	andeq	r5, r2, sl, lsl #16
     3f4:	09110200 	ldmdbeq	r1, {r9}
     3f8:	000000d1 	ldrdeq	r0, [r0], -r1
     3fc:	025d0a04 	subseq	r0, sp, #4, 20	; 0x4000
     400:	11020000 	mrsne	r0, (UNDEF: 2)
     404:	0000d10e 	andeq	sp, r0, lr, lsl #2
     408:	ee0a0800 	cdp	8, 0, cr0, cr10, cr0, {0}
     40c:	02000002 	andeq	r0, r0, #2, 0
     410:	00d10912 	sbcseq	r0, r1, r2, lsl r9
     414:	0a0c0000 	beq	30041c <startup-0x1fcffbe4>
     418:	000002f3 	strdeq	r0, [r0], -r3
     41c:	d10e1202 	tstle	lr, r2, lsl #4
     420:	10000000 	andne	r0, r0, r0
     424:	0003720a 	andeq	r7, r3, sl, lsl #4
     428:	0d130200 	lfmeq	f0, 4, [r3, #-0]
     42c:	0000019f 	muleq	r0, pc, r1	; <UNPREDICTABLE>
     430:	06330a14 			; <UNDEFINED> instruction: 0x06330a14
     434:	14020000 	strne	r0, [r2], #-0
     438:	00019f0d 	andeq	r9, r1, sp, lsl #30
     43c:	c00a1800 	andgt	r1, sl, r0, lsl #16
     440:	02000006 	andeq	r0, r0, #6, 0
     444:	019f0d15 	orrseq	r0, pc, r5, lsl sp	; <UNPREDICTABLE>
     448:	0a1c0000 	beq	700450 <startup-0x1f8ffbb0>
     44c:	000002e4 	andeq	r0, r0, r4, ror #5
     450:	ba0d1602 	blt	345c60 <startup-0x1fcba3a0>
     454:	20000001 	andcs	r0, r0, r1
     458:	01990e00 	orrseq	r0, r9, r0, lsl #28
     45c:	990f0000 	stmdbls	pc, {}	; <UNPREDICTABLE>
     460:	00000001 	andeq	r0, r0, r1
     464:	010b040d 	tsteq	fp, sp, lsl #8
     468:	040d0000 	streq	r0, [sp], #-0
     46c:	0000018e 	andeq	r0, r0, lr, lsl #3
     470:	0001ba0e 	andeq	fp, r1, lr, lsl #20
     474:	01990f00 	orrseq	r0, r9, r0, lsl #30
     478:	d10f0000 	mrsle	r0, CPSR
     47c:	0f000000 	svceq	0x00000000
     480:	000000d1 	ldrdeq	r0, [r0], -r1
     484:	a5040d00 	strge	r0, [r4, #-3328]	; 0xfffff300
     488:	09000001 	stmdbeq	r0, {r0}
     48c:	00000429 	andeq	r0, r0, r9, lsr #8
     490:	0b031702 	bleq	c60a0 <startup-0x1ff39f60>
     494:	09000001 	stmdbeq	r0, {r0}
     498:	00000428 	andeq	r0, r0, r8, lsr #8
     49c:	990c1702 	stmdbls	ip, {r1, r8, r9, sl, ip}
     4a0:	10000001 	andne	r0, r0, r1
     4a4:	09190208 	ldmdbeq	r9, {r3, r9}
     4a8:	00000209 	andeq	r0, r0, r9, lsl #4
     4ac:	00038b0a 	andeq	r8, r3, sl, lsl #22
     4b0:	131a0200 	tstne	sl, #0, 4
     4b4:	00000025 	andeq	r0, r0, r5, lsr #32
     4b8:	02f80a00 	rscseq	r0, r8, #0, 20
     4bc:	1b020000 	blne	804c4 <startup-0x1ff7fb3c>
     4c0:	00002513 	andeq	r2, r0, r3, lsl r5
     4c4:	760a0100 	strvc	r0, [sl], -r0, lsl #2
     4c8:	02000005 	andeq	r0, r0, #5, 0
     4cc:	0209141c 	andeq	r1, r9, #28, 8	; 0x1c000000
     4d0:	00040000 	andeq	r0, r4, r0
     4d4:	0025040d 	eoreq	r0, r5, sp, lsl #8
     4d8:	c1090000 	mrsgt	r0, (UNDEF: 9)
     4dc:	02000003 	andeq	r0, r0, #3, 0
     4e0:	01d8021d 	bicseq	r0, r8, sp, lsl r2
     4e4:	25030000 	strcs	r0, [r3, #-0]
     4e8:	2b000000 	blcs	4f0 <startup-0x1ffffb10>
     4ec:	0c000002 	stceq	0, cr0, [r0], {2}
     4f0:	00000042 	andeq	r0, r0, r2, asr #32
     4f4:	ae060008 	cdpge	0, 0, cr0, cr6, cr8, {0}
     4f8:	04000002 	streq	r0, [r0], #-2
     4fc:	021b1603 	andseq	r1, fp, #3145728	; 0x300000
     500:	03050000 	movweq	r0, #20480	; 0x5000
     504:	20003980 	andcs	r3, r0, r0, lsl #19
     508:	0002cb11 	andeq	ip, r2, r1, lsl fp
     50c:	0a4f0100 	beq	13c0914 <startup-0x1ec3f6ec>
     510:	000000ed 	andeq	r0, r0, sp, ror #1
     514:	398c0305 	stmibcc	ip, {r0, r2, r8, r9}
     518:	ff112000 			; <UNDEFINED> instruction: 0xff112000
     51c:	01000002 	tsteq	r0, r2
     520:	00ed0a5b 	rsceq	r0, sp, fp, asr sl
     524:	03050000 	movweq	r0, #20480	; 0x5000
     528:	200039c0 	andcs	r3, r0, r0, asr #19
     52c:	00031211 	andeq	r1, r3, r1, lsl r2
     530:	0a660100 	beq	1980938 <startup-0x1e67f6c8>
     534:	000000ed 	andeq	r0, r0, sp, ror #1
     538:	39f40305 	ldmibcc	r4!, {r0, r2, r8, r9}^
     53c:	47062000 	strmi	r2, [r6, -r0]
     540:	01000003 	tsteq	r0, r3
     544:	01c00f71 	biceq	r0, r0, r1, ror pc
     548:	03050000 	movweq	r0, #20480	; 0x5000
     54c:	20003a28 	andcs	r3, r0, r8, lsr #20
     550:	0001c003 	andeq	ip, r1, r3
     554:	00029600 	andeq	r9, r2, r0, lsl #12
     558:	00420400 	subeq	r0, r2, r0, lsl #8
     55c:	01fd0000 	mvnseq	r0, r0
     560:	03330600 	teqeq	r3, #0, 12
     564:	7c010000 	stcvc	0, cr0, [r1], {-0}
     568:	0002850f 	andeq	r8, r2, pc, lsl #10
     56c:	4c030500 	cfstr32mi	mvfx0, [r3], {-0}
     570:	0620003a 			; <UNDEFINED> instruction: 0x0620003a
     574:	00000377 	andeq	r0, r0, r7, ror r3
     578:	c00f8701 	andgt	r8, pc, r1, lsl #14
     57c:	05000001 	streq	r0, [r0, #-1]
     580:	00820403 	addeq	r0, r2, r3, lsl #8
     584:	03f60620 	mvnseq	r0, #32, 12	; 0x2000000
     588:	b4010000 	strlt	r0, [r1], #-0
     58c:	0000d815 	andeq	sp, r0, r5, lsl r8
     590:	74030500 	strvc	r0, [r3], #-1280	; 0xfffffb00
     594:	12200021 	eorne	r0, r0, #33, 0	; 0x21
     598:	0000032e 	andeq	r0, r0, lr, lsr #6
     59c:	06011301 	streq	r1, [r1], -r1, lsl #6
     5a0:	20000814 	andcs	r0, r0, r4, lsl r8
     5a4:	000000a4 	andeq	r0, r0, r4, lsr #1
     5a8:	03109c01 	tsteq	r0, #256	; 0x100
     5ac:	64130000 	ldrvs	r0, [r3], #-0
     5b0:	01007269 	tsteq	r0, r9, ror #4
     5b4:	d10f0113 	tstle	pc, r3, lsl r1	; <UNPREDICTABLE>
     5b8:	02000000 	andeq	r0, r0, #0, 0
     5bc:	68137491 	ldmdavs	r3, {r0, r4, r7, sl, ip, sp, lr}
     5c0:	01130100 	tsteq	r3, r0, lsl #2
     5c4:	0001cc1c 	andeq	ip, r1, ip, lsl ip
     5c8:	70910200 	addsvc	r0, r1, r0, lsl #4
     5cc:	01006213 	tsteq	r0, r3, lsl r2
     5d0:	10280113 	eorne	r0, r8, r3, lsl r1
     5d4:	02000003 	andeq	r0, r0, #3, 0
     5d8:	0d006c91 	stceq	12, cr6, [r0, #-580]	; 0xfffffdbc
     5dc:	0001cc04 	andeq	ip, r1, r4, lsl #24
     5e0:	03201400 	nopeq	{0}	; <UNPREDICTABLE>
     5e4:	e2010000 	and	r0, r1, #0, 0
     5e8:	0006b806 	andeq	fp, r6, r6, lsl #16
     5ec:	00015c20 	andeq	r5, r1, r0, lsr #24
     5f0:	c19c0100 	orrsgt	r0, ip, r0, lsl #2
     5f4:	15000003 	strne	r0, [r0, #-3]
     5f8:	00000365 	andeq	r0, r0, r5, ror #6
     5fc:	d10fe201 	tstle	pc, r1, lsl #4
     600:	03000000 	movweq	r0, #0
     604:	156fdc91 	strbne	sp, [pc, #-3217]!	; fffff97b <rear+0xdfff7753>
     608:	00000253 	andeq	r0, r0, r3, asr r2
     60c:	c11ce201 	tstgt	ip, r1, lsl #4
     610:	03000003 	movweq	r0, #3
     614:	066fd891 			; <UNDEFINED> instruction: 0x066fd891
     618:	000003ee 	andeq	r0, r0, lr, ror #7
     61c:	d109e301 	tstle	r9, r1, lsl #6
     620:	02000000 	andeq	r0, r0, #0, 0
     624:	51066c91 			; <UNDEFINED> instruction: 0x51066c91
     628:	01000003 	tsteq	r0, r3
     62c:	00d113e3 	sbcseq	r1, r1, r3, ror #7
     630:	91020000 	mrsls	r0, (UNDEF: 2)
     634:	03800668 	orreq	r0, r0, #104, 12	; 0x6800000
     638:	e4010000 	str	r0, [r1], #-0
     63c:	0003cd0a 	andeq	ip, r3, sl, lsl #26
     640:	5f910200 	svcpl	0x00910200
     644:	00034c06 	andeq	r4, r3, r6, lsl #24
     648:	0de60100 	stfeqe	f0, [r6]
     64c:	000001cc 	andeq	r0, r0, ip, asr #3
     650:	06649102 	strbteq	r9, [r4], -r2, lsl #2
     654:	00000415 	andeq	r0, r0, r5, lsl r4
     658:	cc20e601 	stcgt	6, cr14, [r0], #-4
     65c:	02000001 	andeq	r0, r0, #1, 0
     660:	38066091 	stmdacc	r6, {r0, r4, r7, sp, lr}
     664:	01000003 	tsteq	r0, r3
     668:	03d40de7 	bicseq	r0, r4, #14784	; 0x39c0
     66c:	91030000 	mrsls	r0, (UNDEF: 3)
     670:	58166fe4 	ldmdapl	r6, {r2, r5, r6, r7, r8, r9, sl, fp, sp, lr}
     674:	70200007 	eorvc	r0, r0, r7
     678:	17000000 	strne	r0, [r0, -r0]
     67c:	0000032e 	andeq	r0, r0, lr, lsr #6
     680:	1d010801 	stcne	8, cr0, [r1, #-4]
     684:	000000d1 	ldrdeq	r0, [r0], -r1
     688:	00000018 	andeq	r0, r0, r8, lsl r0
     68c:	03c7040d 	biceq	r0, r7, #218103808	; 0xd000000
     690:	040d0000 	streq	r0, [sp], #-0
     694:	000003cd 	andeq	r0, r0, sp, asr #7
     698:	58080102 	stmdapl	r8, {r1, r8}
     69c:	03000001 	movweq	r0, #1
     6a0:	000001cc 	andeq	r0, r0, ip, asr #3
     6a4:	000003e5 	andeq	r0, r0, r5, ror #7
     6a8:	00004204 	andeq	r4, r0, r4, lsl #4
     6ac:	0001fd00 	andeq	pc, r1, r0, lsl #26
     6b0:	0003e614 	andeq	lr, r3, r4, lsl r6
     6b4:	06d90100 	ldrbeq	r0, [r9], r0, lsl #2
     6b8:	200006a0 	andcs	r0, r0, r0, lsr #13
     6bc:	00000018 	andeq	r0, r0, r8, lsl r0
     6c0:	04099c01 	streq	r9, [r9], #-3073	; 0xfffff3ff
     6c4:	70190000 	andsvc	r0, r9, r0
     6c8:	1bd90100 	blne	ff640ad0 <rear+0xdf6388a8>
     6cc:	000001cc 	andeq	r0, r0, ip, asr #3
     6d0:	00749102 	rsbseq	r9, r4, r2, lsl #2
     6d4:	0002b914 	andeq	fp, r2, r4, lsl r9
     6d8:	06ca0100 	strbeq	r0, [sl], r0, lsl #2
     6dc:	20000628 	andcs	r0, r0, r8, lsr #12
     6e0:	00000078 	andeq	r0, r0, r8, ror r0
     6e4:	045e9c01 	ldrbeq	r9, [lr], #-3073	; 0xfffff3ff
     6e8:	68190000 	ldmdavs	r9, {}	; <UNPREDICTABLE>
     6ec:	19ca0100 	stmibne	sl, {r8}^
     6f0:	000001cc 	andeq	r0, r0, ip, asr #3
     6f4:	196c9102 	stmdbne	ip!, {r1, r8, ip, pc}^
     6f8:	ca010062 	bgt	40888 <startup-0x1ffbf778>
     6fc:	00031025 	andeq	r1, r3, r5, lsr #32
     700:	68910200 	ldmvs	r1, {r9}
     704:	01007319 	tsteq	r0, r9, lsl r3
     708:	045e30ca 	ldrbeq	r3, [lr], #-202	; 0xffffff36
     70c:	91020000 	mrsls	r0, (UNDEF: 2)
     710:	064a1664 	strbeq	r1, [sl], -r4, ror #12
     714:	004c2000 	subeq	r2, ip, r0
     718:	691a0000 	ldmdbvs	sl, {}	; <UNPREDICTABLE>
     71c:	0ece0100 	poleqe	f0, f6, f0
     720:	000000d1 	ldrdeq	r0, [r0], -r1
     724:	00749102 	rsbseq	r9, r4, r2, lsl #2
     728:	c0040d00 	andgt	r0, r4, r0, lsl #26
     72c:	1b000001 	blne	738 <startup-0x1ffff8c8>
     730:	00000325 	andeq	r0, r0, r5, lsr #6
     734:	be06b601 	cfmadd32lt	mvax0, mvfx11, mvfx6, mvfx1
     738:	6a200005 	bvs	800754 <startup-0x1f7ff8ac>
     73c:	01000000 	mrseq	r0, (UNDEF: 0)
     740:	02a3149c 	adceq	r1, r3, #156, 8	; 0x9c000000
     744:	ac010000 	stcge	0, cr0, [r1], {-0}
     748:	00057606 	andeq	r7, r5, r6, lsl #12
     74c:	00004820 	andeq	r4, r0, r0, lsr #16
     750:	be9c0100 	fmllte	f0, f4, f0
     754:	19000004 	stmdbne	r0, {r2}
     758:	ac010068 	stcge	0, cr0, [r1], {104}	; 0x68
     75c:	0001cc19 	andeq	ip, r1, r9, lsl ip
     760:	6c910200 	lfmvs	f0, 4, [r1], {0}
     764:	01006219 	tsteq	r0, r9, lsl r2
     768:	031025ac 	tsteq	r0, #172, 10	; 0x2b000000
     76c:	91020000 	mrsls	r0, (UNDEF: 2)
     770:	058a1668 	streq	r1, [sl, #1640]	; 0x668
     774:	002a2000 	eoreq	r2, sl, r0
     778:	691a0000 	ldmdbvs	sl, {}	; <UNPREDICTABLE>
     77c:	0dae0100 	stfeqs	f0, [lr]
     780:	000000d1 	ldrdeq	r0, [r0], -r1
     784:	00749102 	rsbseq	r9, r4, r2, lsl #2
     788:	03fd1400 	mvnseq	r1, #0, 8
     78c:	98010000 	stmdals	r1, {}	; <UNPREDICTABLE>
     790:	0004b406 	andeq	fp, r4, r6, lsl #8
     794:	0000c220 	andeq	ip, r0, r0, lsr #4
     798:	4b9c0100 	blmi	fe700ba0 <rear+0xde6f8978>
     79c:	19000005 	stmdbne	r0, {r0, r2}
     7a0:	98010073 	stmdals	r1, {r0, r1, r4, r5, r6}
     7a4:	00054b1a 	andeq	r4, r5, sl, lsl fp
     7a8:	5c910200 	lfmpl	f0, 4, [r1], {0}
     7ac:	01007819 	tsteq	r0, r9, lsl r8
     7b0:	00d12198 	smullseq	r2, r1, r8, r1
     7b4:	91020000 	mrsls	r0, (UNDEF: 2)
     7b8:	00791958 	rsbseq	r1, r9, r8, asr r9
     7bc:	d1289801 			; <UNDEFINED> instruction: 0xd1289801
     7c0:	02000000 	andeq	r0, r0, #0, 0
     7c4:	691a5491 	ldmdbvs	sl, {r0, r4, r7, sl, ip, lr}
     7c8:	09990100 	ldmibeq	r9, {r8}
     7cc:	000000d1 	ldrdeq	r0, [r0], -r1
     7d0:	1a749102 	bne	1d24be0 <startup-0x1e2db420>
     7d4:	9901006a 	stmdbls	r1, {r1, r3, r5, r6}
     7d8:	0000d10b 	andeq	sp, r0, fp, lsl #2
     7dc:	70910200 	addsvc	r0, r1, r0, lsl #4
     7e0:	01006b1a 	tsteq	r0, sl, lsl fp
     7e4:	00d10d99 	smullseq	r0, r1, r9, sp
     7e8:	91020000 	mrsls	r0, (UNDEF: 2)
     7ec:	03ad066c 			; <UNDEFINED> instruction: 0x03ad066c
     7f0:	99010000 	stmdbls	r1, {}	; <UNPREDICTABLE>
     7f4:	0000d110 	andeq	sp, r0, r0, lsl r1
     7f8:	68910200 	ldmvs	r1, {r9}
     7fc:	0004f216 	andeq	pc, r4, r6, lsl r2	; <UNPREDICTABLE>
     800:	00005a20 	andeq	r5, r0, r0, lsr #20
     804:	01a80600 			; <UNDEFINED> instruction: 0x01a80600
     808:	a3010000 	movwge	r0, #4096	; 0x1000
     80c:	0000251b 	andeq	r2, r0, fp, lsl r5
     810:	67910200 	ldrvs	r0, [r1, r0, lsl #4]
     814:	040d0000 	streq	r0, [sp], #-0
     818:	0000020f 	andeq	r0, r0, pc, lsl #4
     81c:	0003bc1c 	andeq	fp, r3, ip, lsl ip
     820:	0d920100 	ldfeqs	f0, [r2]
     824:	20000488 	andcs	r0, r0, r8, lsl #9
     828:	0000002c 	andeq	r0, r0, ip, lsr #32
     82c:	05a29c01 	streq	r9, [r2, #3073]!	; 0xc01
     830:	73190000 	tstvc	r9, #0, 0
     834:	21920100 	orrscs	r0, r2, r0, lsl #2
     838:	0000054b 	andeq	r0, r0, fp, asr #10
     83c:	15749102 	ldrbne	r9, [r4, #-258]!	; 0xfffffefe
     840:	00000576 	andeq	r0, r0, r6, ror r5
     844:	09339201 	ldmdbeq	r3!, {r0, r9, ip, pc}
     848:	02000002 	andeq	r0, r0, #2, 0
     84c:	8b157091 	blhi	55ca98 <startup-0x1faa3568>
     850:	01000003 	tsteq	r0, r3
     854:	00d13d92 	smullseq	r3, r1, r2, sp
     858:	91020000 	mrsls	r0, (UNDEF: 2)
     85c:	02f8156c 	rscseq	r1, r8, #108, 10	; 0x1b000000
     860:	92010000 	andls	r0, r1, #0, 0
     864:	0000d148 	andeq	sp, r0, r8, asr #2
     868:	68910200 	ldmvs	r1, {r9}
     86c:	04091400 	streq	r1, [r9], #-1024	; 0xfffffc00
     870:	31010000 	mrscc	r0, (UNDEF: 1)
     874:	0003dc06 	andeq	sp, r3, r6, lsl #24
     878:	0000ac20 	andeq	sl, r0, r0, lsr #24
     87c:	c69c0100 	ldrgt	r0, [ip], r0, lsl #2
     880:	19000005 	stmdbne	r0, {r0, r2}
     884:	3101006f 	tstcc	r1, pc, rrx
     888:	0001cc1a 	andeq	ip, r1, sl, lsl ip
     88c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     890:	03c81400 	biceq	r1, r8, #0, 8
     894:	2b010000 	blcs	4089c <startup-0x1ffbf764>
     898:	00037a06 	andeq	r7, r3, r6, lsl #20
     89c:	00006220 	andeq	r6, r0, r0, lsr #4
     8a0:	019c0100 	orrseq	r0, ip, r0, lsl #2
     8a4:	19000006 	stmdbne	r0, {r1, r2}
     8a8:	2b01006f 	blcs	40a6c <startup-0x1ffbf594>
     8ac:	0001cc1b 	andeq	ip, r1, fp, lsl ip
     8b0:	6c910200 	lfmvs	f0, 4, [r1], {0}
     8b4:	00038216 	andeq	r8, r3, r6, lsl r2
     8b8:	00005020 	andeq	r5, r0, r0, lsr #32
     8bc:	00691a00 	rsbeq	r1, r9, r0, lsl #20
     8c0:	d10e2c01 	tstle	lr, r1, lsl #24
     8c4:	02000000 	andeq	r0, r0, #0, 0
     8c8:	00007491 	muleq	r0, r1, r4
     8cc:	0003da14 	andeq	sp, r3, r4, lsl sl
     8d0:	06250100 	strteq	r0, [r5], -r0, lsl #2
     8d4:	20000318 	andcs	r0, r0, r8, lsl r3
     8d8:	00000062 	andeq	r0, r0, r2, rrx
     8dc:	063c9c01 	ldrteq	r9, [ip], -r1, lsl #24
     8e0:	6f190000 	svcvs	0x00190000
     8e4:	1a250100 	bne	940cec <startup-0x1f6bf314>
     8e8:	000001cc 	andeq	r0, r0, ip, asr #3
     8ec:	166c9102 	strbtne	r9, [ip], -r2, lsl #2
     8f0:	20000320 	andcs	r0, r0, r0, lsr #6
     8f4:	00000050 	andeq	r0, r0, r0, asr r0
     8f8:	0100691a 	tsteq	r0, sl, lsl r9
     8fc:	00d10e26 	sbcseq	r0, r1, r6, lsr #28
     900:	91020000 	mrsls	r0, (UNDEF: 2)
     904:	1d000074 	stcne	0, cr0, [r0, #-464]	; 0xfffffe30
     908:	0000039c 	muleq	r0, ip, r3
     90c:	f8062001 			; <UNDEFINED> instruction: 0xf8062001
     910:	20200002 	eorcs	r0, r0, r2
     914:	01000000 	mrseq	r0, (UNDEF: 0)
     918:	00067e9c 	muleq	r6, ip, lr
     91c:	006f1900 	rsbeq	r1, pc, r0, lsl #18
     920:	cc1f2001 	ldcgt	0, cr2, [pc], {1}
     924:	02000001 	andeq	r0, r0, #1, 0
     928:	1a157491 	bne	55db74 <startup-0x1faa248c>
     92c:	01000004 	tsteq	r0, r4
     930:	00d12620 	sbcseq	r2, r1, r0, lsr #12
     934:	91020000 	mrsls	r0, (UNDEF: 2)
     938:	04211570 	strteq	r1, [r1], #-1392	; 0xfffffa90
     93c:	20010000 	andcs	r0, r1, r0
     940:	0000d132 	andeq	sp, r0, r2, lsr r1
     944:	6c910200 	lfmvs	f0, 4, [r1], {0}
     948:	036a1b00 	cmneq	sl, #0, 22
     94c:	18010000 	stmdane	r1, {}	; <UNPREDICTABLE>
     950:	00000006 	andeq	r0, r0, r6
     954:	00000c20 	andeq	r0, r0, r0, lsr #24
     958:	009c0100 	addseq	r0, ip, r0, lsl #2
     95c:	00000120 	andeq	r0, r0, r0, lsr #2
     960:	02db0004 	sbcseq	r0, fp, #4, 0
     964:	01040000 	mrseq	r0, (UNDEF: 4)
     968:	00000051 	andeq	r0, r0, r1, asr r0
     96c:	00046e0c 	andeq	r6, r4, ip, lsl #28
     970:	00015d00 	andeq	r5, r1, r0, lsl #26
     974:	0008b800 	andeq	fp, r8, r0, lsl #16
     978:	0000f020 	andeq	pc, r0, r0, lsr #32
     97c:	00060b00 	andeq	r0, r6, r0, lsl #22
     980:	08010200 	stmdaeq	r1, {r9}
     984:	0000014f 	andeq	r0, r0, pc, asr #2
     988:	00044203 	andeq	r4, r4, r3, lsl #4
     98c:	06240100 	strteq	r0, [r4], -r0, lsl #2
     990:	20000988 	andcs	r0, r0, r8, lsl #19
     994:	00000020 	andeq	r0, r0, r0, lsr #32
     998:	00509c01 	subseq	r9, r0, r1, lsl #24
     99c:	63040000 	movwvs	r0, #16384	; 0x4000
     9a0:	1c240100 	stfnes	f0, [r4], #-0
     9a4:	00000025 	andeq	r0, r0, r5, lsr #32
     9a8:	00779102 	rsbseq	r9, r7, r2, lsl #2
     9ac:	00043d05 	andeq	r3, r4, r5, lsl #26
     9b0:	0f140100 	svceq	0x00140100
     9b4:	00000025 	andeq	r0, r0, r5, lsr #32
     9b8:	20000920 	andcs	r0, r0, r0, lsr #18
     9bc:	00000068 	andeq	r0, r0, r8, rrx
     9c0:	00a79c01 	adceq	r9, r7, r1, lsl #24
     9c4:	57060000 	strpl	r0, [r6, -r0]
     9c8:	01000004 	tsteq	r0, r4
     9cc:	00a71315 	adceq	r1, r7, r5, lsl r3
     9d0:	91020000 	mrsls	r0, (UNDEF: 2)
     9d4:	04360658 	ldrteq	r0, [r6], #-1624	; 0xfffff9a8
     9d8:	16010000 	strne	r0, [r1], -r0
     9dc:	0000a713 	andeq	sl, r0, r3, lsl r7
     9e0:	48910200 	ldmmi	r1, {r9}
     9e4:	776f7207 	strbvc	r7, [pc, -r7, lsl #4]!
     9e8:	09190100 	ldmdbeq	r9, {r8}
     9ec:	000000be 	strheq	r0, [r0], -lr
     9f0:	066c9102 	strbteq	r9, [ip], -r2, lsl #2
     9f4:	0000044f 	andeq	r0, r0, pc, asr #8
     9f8:	be0e1901 	vmlalt.f16	s2, s28, s2	; <UNPREDICTABLE>
     9fc:	02000000 	andeq	r0, r0, #0, 0
     a00:	08006891 	stmdaeq	r0, {r0, r4, r7, fp, sp, lr}
     a04:	00000025 	andeq	r0, r0, r5, lsr #32
     a08:	000000b7 	strheq	r0, [r0], -r7
     a0c:	0000b709 	andeq	fp, r0, r9, lsl #14
     a10:	02000f00 	andeq	r0, r0, #0, 30
     a14:	06a80704 	strteq	r0, [r8], r4, lsl #14
     a18:	040a0000 	streq	r0, [sl], #-0
     a1c:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
     a20:	044a0b00 	strbeq	r0, [sl], #-2816	; 0xfffff500
     a24:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
     a28:	0000be05 	andeq	fp, r0, r5, lsl #28
     a2c:	0008dc00 	andeq	sp, r8, r0, lsl #24
     a30:	00004420 	andeq	r4, r0, r0, lsr #8
     a34:	fc9c0100 	ldc2	1, cr0, [ip], {0}
     a38:	07000000 	streq	r0, [r0, -r0]
     a3c:	0901006a 	stmdbeq	r1, {r1, r3, r5, r6}
     a40:	0000be09 	andeq	fp, r0, r9, lsl #28
     a44:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     a48:	00043006 	andeq	r3, r4, r6
     a4c:	0a0a0100 	beq	280e54 <startup-0x1fd7f1ac>
     a50:	000000fc 	strdeq	r0, [r0], -ip
     a54:	00739102 	rsbseq	r9, r3, r2, lsl #2
     a58:	58080102 	stmdapl	r8, {r1, r8}
     a5c:	0c000001 	stceq	0, cr0, [r0], {1}
     a60:	00000461 	andeq	r0, r0, r1, ror #8
     a64:	b8060401 	stmdalt	r6, {r0, sl}
     a68:	24200008 	strtcs	r0, [r0], #-8
     a6c:	01000000 	mrseq	r0, (UNDEF: 0)
     a70:	0069049c 	mlseq	r9, ip, r4, r0
     a74:	be170401 	cfmulslt	mvf0, mvf7, mvf1
     a78:	02000000 	andeq	r0, r0, #0, 0
     a7c:	00007491 	muleq	r0, r1, r4
     a80:	0000009e 	muleq	r0, lr, r0
     a84:	03ba0004 			; <UNDEFINED> instruction: 0x03ba0004
     a88:	01040000 	mrseq	r0, (UNDEF: 4)
     a8c:	00000051 	andeq	r0, r0, r1, asr r0
     a90:	0004b80c 	andeq	fp, r4, ip, lsl #16
     a94:	00015d00 	andeq	r5, r1, r0, lsl #26
     a98:	0009a800 	andeq	sl, r9, r0, lsl #16
     a9c:	00006220 	andeq	r6, r0, r0, lsr #4
     aa0:	0006f600 	andeq	pc, r6, r0, lsl #12
     aa4:	08010200 	stmdaeq	r1, {r9}
     aa8:	0000014f 	andeq	r0, r0, pc, asr #2
     aac:	00000003 	andeq	r0, r0, r3
     ab0:	06260100 	strteq	r0, [r6], -r0, lsl #2
     ab4:	200009cc 	andcs	r0, r0, ip, asr #19
     ab8:	0000003e 	andeq	r0, r0, lr, lsr r0
     abc:	00519c01 	subseq	r9, r1, r1, lsl #24
     ac0:	6d040000 	stcvs	0, cr0, [r4, #-0]
     ac4:	26010073 			; <UNDEFINED> instruction: 0x26010073
     ac8:	0000511f 	andeq	r5, r0, pc, lsl r1
     acc:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     ad0:	07040200 	streq	r0, [r4, -r0, lsl #4]
     ad4:	000006a8 	andeq	r0, r0, r8, lsr #13
     ad8:	00002e05 	andeq	r2, r0, r5, lsl #28
     adc:	061a0100 	ldreq	r0, [sl], -r0, lsl #2
     ae0:	200009bc 			; <UNDEFINED> instruction: 0x200009bc
     ae4:	00000010 	andeq	r0, r0, r0, lsl r0
     ae8:	007d9c01 	rsbseq	r9, sp, r1, lsl #24
     aec:	75040000 	strvc	r0, [r4, #-0]
     af0:	1a010073 	bne	40cc4 <startup-0x1ffbf33c>
     af4:	0000511f 	andeq	r5, r0, pc, lsl r1
     af8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     afc:	04ac0600 	strteq	r0, [ip], #1536	; 0x600
     b00:	12010000 	andne	r0, r1, #0, 0
     b04:	0009b206 	andeq	fp, r9, r6, lsl #4
     b08:	00000a20 	andeq	r0, r0, r0, lsr #20
     b0c:	069c0100 	ldreq	r0, [ip], r0, lsl #2
     b10:	000000fe 	strdeq	r0, [r0], -lr
     b14:	a8060501 	stmdage	r6, {r0, r8, sl}
     b18:	0a200009 	beq	800b44 <startup-0x1f7ff4bc>
     b1c:	01000000 	mrseq	r0, (UNDEF: 0)
     b20:	0388009c 	orreq	r0, r8, #156, 0	; 0x9c
     b24:	00040000 	andeq	r0, r4, r0
     b28:	0000043c 	andeq	r0, r0, ip, lsr r4
     b2c:	00510104 	subseq	r0, r1, r4, lsl #2
     b30:	210c0000 	mrscs	r0, (UNDEF: 12)
     b34:	5d000005 	stcpl	0, cr0, [r0, #-20]	; 0xffffffec
     b38:	0c000001 	stceq	0, cr0, [r0], {1}
     b3c:	2420000a 	strtcs	r0, [r0], #-10
     b40:	96000005 	strls	r0, [r0], -r5
     b44:	02000007 	andeq	r0, r0, #7, 0
     b48:	000005cc 	andeq	r0, r0, ip, asr #11
     b4c:	31170103 	tstcc	r7, r3, lsl #2
     b50:	03000000 	movweq	r0, #0
     b54:	014f0801 	cmpeq	pc, r1, lsl #16
     b58:	55040000 	strpl	r0, [r4, #-0]
     b5c:	49000000 	stmdbmi	r0, {}	; <UNPREDICTABLE>
     b60:	05000000 	streq	r0, [r0, #-0]
     b64:	0000004e 	andeq	r0, r0, lr, asr #32
     b68:	060003ff 			; <UNDEFINED> instruction: 0x060003ff
     b6c:	00000038 	andeq	r0, r0, r8, lsr r0
     b70:	a8070403 	stmdage	r7, {r0, r1, sl}
     b74:	06000006 	streq	r0, [r0], -r6
     b78:	0000004e 	andeq	r0, r0, lr, asr #32
     b7c:	00039107 	andeq	r9, r3, r7, lsl #2
     b80:	1e0f0200 	cdpne	2, 0, cr0, cr15, cr0, {0}
     b84:	00000049 	andeq	r0, r0, r9, asr #32
     b88:	21780305 	cmncs	r8, r5, lsl #6
     b8c:	0d082000 	stceq	0, cr2, [r8, #-0]
     b90:	01000005 	tsteq	r0, r5
     b94:	0e6006b7 	mcreq	6, 3, r0, cr0, cr7, {5}
     b98:	00d02000 	sbcseq	r2, r0, r0
     b9c:	9c010000 	stcls	0, cr0, [r1], {-0}
     ba0:	000000c6 	andeq	r0, r0, r6, asr #1
     ba4:	01006909 	tsteq	r0, r9, lsl #18
     ba8:	00250db8 	strhteq	r0, [r5], -r8
     bac:	91020000 	mrsls	r0, (UNDEF: 2)
     bb0:	006a0977 	rsbeq	r0, sl, r7, ror r9
     bb4:	2511b801 	ldrcs	fp, [r1, #-2049]	; 0xfffff7ff
     bb8:	02000000 	andeq	r0, r0, #0, 0
     bbc:	24077691 	strcs	r7, [r7], #-1681	; 0xfffff96f
     bc0:	01000001 	tsteq	r0, r1
     bc4:	002514b8 	strhteq	r1, [r5], -r8
     bc8:	91020000 	mrsls	r0, (UNDEF: 2)
     bcc:	0063096f 	rsbeq	r0, r3, pc, ror #18
     bd0:	2520b801 	strcs	fp, [r0, #-2049]!	; 0xfffff7ff
     bd4:	02000000 	andeq	r0, r0, #0, 0
     bd8:	6b097591 	blvs	25e224 <startup-0x1fda1ddc>
     bdc:	12b90100 	adcsne	r0, r9, #0
     be0:	0000004e 	andeq	r0, r0, lr, asr #32
     be4:	00709102 	rsbseq	r9, r0, r2, lsl #2
     be8:	0005880a 	andeq	r8, r5, sl, lsl #16
     bec:	06a60100 	strteq	r0, [r6], r0, lsl #2
     bf0:	20000ddc 	ldrdcs	r0, [r0], -ip
     bf4:	00000084 	andeq	r0, r0, r4, lsl #1
     bf8:	01159c01 	tsteq	r5, r1, lsl #24
     bfc:	780b0000 	stmdavc	fp, {}	; <UNPREDICTABLE>
     c00:	15a60100 	strne	r0, [r6, #256]!	; 0x100
     c04:	0000004e 	andeq	r0, r0, lr, asr #32
     c08:	0b6c9102 	bleq	1b25018 <startup-0x1e4dafe8>
     c0c:	a6010079 			; <UNDEFINED> instruction: 0xa6010079
     c10:	00004e21 	andeq	r4, r0, r1, lsr #28
     c14:	68910200 	ldmvs	r1, {r9}
     c18:	0005c707 	andeq	ip, r5, r7, lsl #14
     c1c:	0da70100 	stfeqs	f0, [r7]
     c20:	00000025 	andeq	r0, r0, r5, lsr #32
     c24:	07739102 	ldrbeq	r9, [r3, -r2, lsl #2]!
     c28:	000005f4 	strdeq	r0, [r0], -r4
     c2c:	1509a801 	strne	sl, [r9, #-2049]	; 0xfffff7ff
     c30:	02000001 	andeq	r0, r0, #1, 0
     c34:	0c007491 	cfstrseq	mvf7, [r0], {145}	; 0x91
     c38:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
     c3c:	a30d0074 	movwge	r0, #53364	; 0xd074
     c40:	01000005 	tsteq	r0, r5
     c44:	0da606a0 	stceq	6, cr0, [r6, #640]!	; 0x280
     c48:	00362000 	eorseq	r2, r6, r0
     c4c:	9c010000 	stcls	0, cr0, [r1], {-0}
     c50:	00000140 	andeq	r0, r0, r0, asr #2
     c54:	01006909 	tsteq	r0, r9, lsl #18
     c58:	011509a1 	tsteq	r5, r1, lsr #19
     c5c:	91020000 	mrsls	r0, (UNDEF: 2)
     c60:	fa080074 	blx	200e38 <startup-0x1fdff1c8>
     c64:	01000005 	tsteq	r0, r5
     c68:	0d4c0696 	stcleq	6, cr0, [ip, #-600]	; 0xfffffda8
     c6c:	005a2000 	subseq	r2, sl, r0
     c70:	9c010000 	stcls	0, cr0, [r1], {-0}
     c74:	00000189 	andeq	r0, r0, r9, lsl #3
     c78:	000d520e 	andeq	r5, sp, lr, lsl #4
     c7c:	00004a20 	andeq	r4, r0, r0, lsr #20
     c80:	06390700 	ldrteq	r0, [r9], -r0, lsl #14
     c84:	97010000 	strls	r0, [r1, -r0]
     c88:	0001150e 	andeq	r1, r1, lr, lsl #10
     c8c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     c90:	000d760e 	andeq	r7, sp, lr, lsl #12
     c94:	00001a20 	andeq	r1, r0, r0, lsr #20
     c98:	64610900 	strbtvs	r0, [r1], #-2304	; 0xfffff700
     c9c:	9a010064 	bls	40e34 <startup-0x1ffbf1cc>
     ca0:	00011512 	andeq	r1, r1, r2, lsl r5
     ca4:	70910200 	addsvc	r0, r1, r0, lsl #4
     ca8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     cac:	0000060f 	andeq	r0, r0, pc, lsl #12
     cb0:	06068e01 	streq	r8, [r6], -r1, lsl #28
     cb4:	4620000d 	strtmi	r0, [r0], -sp
     cb8:	01000000 	mrseq	r0, (UNDEF: 0)
     cbc:	0001be9c 	muleq	r1, ip, lr
     cc0:	05760f00 	ldrbeq	r0, [r6, #-3840]!	; 0xfffff100
     cc4:	8e010000 	cdphi	0, 0, cr0, cr1, cr0, {0}
     cc8:	00002521 	andeq	r2, r0, r1, lsr #10
     ccc:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
     cd0:	0001240f 	andeq	r2, r1, pc, lsl #8
     cd4:	2f8e0100 	svccs	0x008e0100
     cd8:	00000025 	andeq	r0, r0, r5, lsr #32
     cdc:	00769102 	rsbseq	r9, r6, r2, lsl #2
     ce0:	0004f708 	andeq	pc, r4, r8, lsl #14
     ce4:	06860100 	streq	r0, [r6], r0, lsl #2
     ce8:	20000cc0 	andcs	r0, r0, r0, asr #25
     cec:	00000046 	andeq	r0, r0, r6, asr #32
     cf0:	01f39c01 	mvnseq	r9, r1, lsl #24
     cf4:	630b0000 	movwvs	r0, #45056	; 0xb000
     cf8:	0100646d 	tsteq	r0, sp, ror #8
     cfc:	00252486 	eoreq	r2, r5, r6, lsl #9
     d00:	91020000 	mrsls	r0, (UNDEF: 2)
     d04:	01240f77 			; <UNDEFINED> instruction: 0x01240f77
     d08:	86010000 	strhi	r0, [r1], -r0
     d0c:	00002531 	andeq	r2, r0, r1, lsr r5
     d10:	76910200 	ldrvc	r0, [r1], r0, lsl #4
     d14:	05d40800 	ldrbeq	r0, [r4, #2048]	; 0x800
     d18:	6e010000 	cdpvs	0, 0, cr0, cr1, cr0, {0}
     d1c:	000c4a06 	andeq	r4, ip, r6, lsl #20
     d20:	00007620 	andeq	r7, r0, r0, lsr #12
     d24:	369c0100 	ldrcc	r0, [ip], r0, lsl #2
     d28:	0f000002 	svceq	0x00000002
     d2c:	0000097f 	andeq	r0, r0, pc, ror r9
     d30:	251c6e01 	ldrcs	r6, [ip, #-3585]	; 0xfffff1ff
     d34:	02000000 	andeq	r0, r0, #0, 0
     d38:	240f7791 	strcs	r7, [pc], #-1937	; d40 <startup-0x1ffff2c0>
     d3c:	01000001 	tsteq	r0, r1
     d40:	00252b6e 	eoreq	r2, r5, lr, ror #22
     d44:	91020000 	mrsls	r0, (UNDEF: 2)
     d48:	04ac1076 	strteq	r1, [ip], #118	; 0x76
     d4c:	45010000 	strmi	r0, [r1, #-0]
     d50:	00011505 	andeq	r1, r1, r5, lsl #10
     d54:	00001100 	andeq	r1, r0, r0, lsl #2
     d58:	00056912 	andeq	r6, r5, r2, lsl r9
     d5c:	09690100 	stmdbeq	r9!, {r8}^
     d60:	00000025 	andeq	r0, r0, r5, lsr #32
     d64:	20000c20 	andcs	r0, r0, r0, lsr #24
     d68:	0000002a 	andeq	r0, r0, sl, lsr #32
     d6c:	02609c01 	rsbeq	r9, r0, #256	; 0x100
     d70:	240f0000 	strcs	r0, [pc], #-0	; d78 <startup-0x1ffff288>
     d74:	01000001 	tsteq	r0, r1
     d78:	00252369 	eoreq	r2, r5, r9, ror #6
     d7c:	91020000 	mrsls	r0, (UNDEF: 2)
     d80:	7b120077 	blvc	480f64 <startup-0x1fb7f09c>
     d84:	01000005 	tsteq	r0, r5
     d88:	00310f52 	eorseq	r0, r1, r2, asr pc
     d8c:	0b940000 	bleq	fe500d94 <rear+0xde4f8b6c>
     d90:	008c2000 	addeq	r2, ip, r0
     d94:	9c010000 	stcls	0, cr0, [r1], {-0}
     d98:	000002ab 	andeq	r0, r0, fp, lsr #5
     d9c:	0001240f 	andeq	r2, r1, pc, lsl #8
     da0:	2a520100 	bcs	14811a8 <startup-0x1eb7ee58>
     da4:	00000031 	andeq	r0, r0, r1, lsr r0
     da8:	136f9102 	cmnne	pc, #-2147483648	; 0x80000000
     dac:	000004ac 	andeq	r0, r0, ip, lsr #9
     db0:	15054501 	strne	r4, [r5, #-1281]	; 0xfffffaff
     db4:	9b000001 	blls	dc0 <startup-0x1ffff240>
     db8:	11000002 	tstne	r0, r2
     dbc:	064b0700 	strbeq	r0, [fp], -r0, lsl #14
     dc0:	5a010000 	bpl	40dc8 <startup-0x1ffbf238>
     dc4:	00003113 	andeq	r3, r0, r3, lsl r1
     dc8:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
     dcc:	05b40800 	ldreq	r0, [r4, #2048]!	; 0x800
     dd0:	40010000 	andmi	r0, r1, r0
     dd4:	000b5606 	andeq	r5, fp, r6, lsl #12
     dd8:	00003e20 	andeq	r3, r0, r0, lsr #28
     ddc:	d09c0100 	addsle	r0, ip, r0, lsl #2
     de0:	10000002 	andne	r0, r0, r2
     de4:	000004ac 	andeq	r0, r0, ip, lsr #9
     de8:	15054501 	strne	r4, [r5, #-1281]	; 0xfffffaff
     dec:	11000001 	tstne	r0, r1
     df0:	e2080000 	and	r0, r8, #0, 0
     df4:	01000005 	tsteq	r0, r5
     df8:	0afc062a 	beq	fff026a8 <rear+0xdfefa480>
     dfc:	005a2000 	subseq	r2, sl, r0
     e00:	9c010000 	stcls	0, cr0, [r1], {-0}
     e04:	000002f6 	strdeq	r0, [r0], -r6
     e08:	0001240f 	andeq	r2, r1, pc, lsl #8
     e0c:	202a0100 	eorcs	r0, sl, r0, lsl #2
     e10:	00000025 	andeq	r0, r0, r5, lsr #32
     e14:	00779102 	rsbseq	r9, r7, r2, lsl #2
     e18:	00058e0a 	andeq	r8, r5, sl, lsl #28
     e1c:	06200100 	strteq	r0, [r0], -r0, lsl #2
     e20:	20000ab8 			; <UNDEFINED> instruction: 0x20000ab8
     e24:	00000044 	andeq	r0, r0, r4, asr #32
     e28:	03279c01 			; <UNDEFINED> instruction: 0x03279c01
     e2c:	780b0000 	stmdavc	fp, {}	; <UNPREDICTABLE>
     e30:	23200100 	nopcs	{0}	; <UNPREDICTABLE>
     e34:	00000025 	andeq	r0, r0, r5, lsr #32
     e38:	096f9102 	stmdbeq	pc!, {r1, r8, ip, pc}^	; <UNPREDICTABLE>
     e3c:	23010063 	movwcs	r0, #4195	; 0x1063
     e40:	0000250d 	andeq	r2, r0, sp, lsl #10
     e44:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
     e48:	06220a00 	strteq	r0, [r2], -r0, lsl #20
     e4c:	15010000 	strne	r0, [r1, #-0]
     e50:	000a6806 	andeq	r6, sl, r6, lsl #16
     e54:	00005020 	andeq	r5, r0, r0, lsr #32
     e58:	589c0100 	ldmpl	ip, {r8}
     e5c:	0b000003 	bleq	e70 <startup-0x1ffff190>
     e60:	15010078 	strne	r0, [r1, #-120]	; 0xffffff88
     e64:	00002525 	andeq	r2, r0, r5, lsr #10
     e68:	6f910200 	svcvs	0x00910200
     e6c:	01006309 	tsteq	r0, r9, lsl #6
     e70:	00250d18 	eoreq	r0, r5, r8, lsl sp
     e74:	91020000 	mrsls	r0, (UNDEF: 2)
     e78:	3e140077 	mrccc	0, 0, r0, cr4, cr7, {3}
     e7c:	01000006 	tsteq	r0, r6
     e80:	0a0c0606 	beq	3026a0 <startup-0x1fcfd960>
     e84:	005c2000 	subseq	r2, ip, r0
     e88:	9c010000 	stcls	0, cr0, [r1], {-0}
     e8c:	00002e13 	andeq	r2, r0, r3, lsl lr
     e90:	05080100 	streq	r0, [r8, #-256]	; 0xffffff00
     e94:	00000115 	andeq	r0, r0, r5, lsl r1
     e98:	0000037c 	andeq	r0, r0, ip, ror r3
     e9c:	00100011 	andseq	r0, r0, r1, lsl r0
     ea0:	01000000 	mrseq	r0, (UNDEF: 0)
     ea4:	0115050a 	tsteq	r5, sl, lsl #10
     ea8:	00110000 	andseq	r0, r1, r0
     eac:	0b7c0000 	bleq	1f00eb4 <startup-0x1e0ff14c>
     eb0:	00040000 	andeq	r0, r4, r0
     eb4:	00000592 	muleq	r0, r2, r5
     eb8:	00510104 	subseq	r0, r1, r4, lsl #2
     ebc:	100c0000 	andne	r0, ip, r0
     ec0:	5d00000a 	stcpl	0, cr0, [r0, #-40]	; 0xffffffd8
     ec4:	30000001 	andcc	r0, r0, r1
     ec8:	2c20000f 	stccs	0, cr0, [r0], #-60	; 0xffffffc4
     ecc:	62000001 	andvs	r0, r0, #1, 0
     ed0:	0200000a 	andeq	r0, r0, #10, 0
     ed4:	06a80704 	strteq	r0, [r8], r4, lsl #14
     ed8:	04030000 	streq	r0, [r3], #-0
     edc:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
     ee0:	06010200 	streq	r0, [r1], -r0, lsl #4
     ee4:	00000151 	andeq	r0, r0, r1, asr r1
     ee8:	4f080102 	svcmi	0x00080102
     eec:	02000001 	andeq	r0, r0, #1, 0
     ef0:	08c10502 	stmiaeq	r1, {r1, r8, sl}^
     ef4:	02020000 	andeq	r0, r2, #0, 0
     ef8:	0007fe07 	andeq	pc, r7, r7, lsl #28
     efc:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
     f00:	000006ed 	andeq	r0, r0, sp, ror #13
     f04:	a3070402 	movwge	r0, #29698	; 0x7402
     f08:	02000006 	andeq	r0, r0, #6, 0
     f0c:	06e80508 	strbteq	r0, [r8], r8, lsl #10
     f10:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
     f14:	00069e07 	andeq	r9, r6, r7, lsl #28
     f18:	08410400 	stmdaeq	r1, {sl}^
     f1c:	22020000 	andcs	r0, r2, #0, 0
     f20:	00007719 	andeq	r7, r0, r9, lsl r7
     f24:	7d040500 	cfstr32vc	mvfx0, [r4, #-0]
     f28:	06000000 	streq	r0, [r0], -r0
     f2c:	00000976 	andeq	r0, r0, r6, ror r9
     f30:	00088e04 	andeq	r8, r8, r4, lsl #28
     f34:	0e2c0300 	cdpeq	3, 2, cr0, cr12, cr0, {0}
     f38:	0000004f 	andeq	r0, r0, pc, asr #32
     f3c:	00098b04 	andeq	r8, r9, r4, lsl #22
     f40:	0e720300 	cdpeq	3, 7, cr0, cr2, cr0, {0}
     f44:	0000004f 	andeq	r0, r0, pc, asr #32
     f48:	00084907 	andeq	r4, r8, r7, lsl #18
     f4c:	015e0400 	cmpeq	lr, r0, lsl #8
     f50:	00002517 	andeq	r2, r0, r7, lsl r5
     f54:	03040800 	movweq	r0, #18432	; 0x4800
     f58:	00c903a6 	sbceq	r0, r9, r6, lsr #7
     f5c:	3b090000 	blcc	240f64 <startup-0x1fdbf09c>
     f60:	03000008 	movweq	r0, #8
     f64:	009a0ca8 	addseq	r0, sl, r8, lsr #25
     f68:	d5090000 	strle	r0, [r9, #-0]
     f6c:	03000007 	movweq	r0, #7
     f70:	00c913a9 	sbceq	r1, r9, r9, lsr #7
     f74:	0a000000 	beq	f7c <startup-0x1ffff084>
     f78:	0000003a 	andeq	r0, r0, sl, lsr r0
     f7c:	000000d9 	ldrdeq	r0, [r0], -r9
     f80:	0000250b 	andeq	r2, r0, fp, lsl #10
     f84:	0c000300 	stceq	3, cr0, [r0], {-0}
     f88:	09a30308 	stmibeq	r3!, {r3, r8, r9}
     f8c:	000000fd 	strdeq	r0, [r0], -sp
     f90:	00096e0d 	andeq	r6, r9, sp, lsl #28
     f94:	07a50300 	streq	r0, [r5, r0, lsl #6]!
     f98:	0000002c 	andeq	r0, r0, ip, lsr #32
     f9c:	097d0d00 	ldmdbeq	sp!, {r8, sl, fp}^
     fa0:	aa030000 	bge	c0fa8 <startup-0x1ff3f058>
     fa4:	0000a705 	andeq	sl, r0, r5, lsl #14
     fa8:	04000400 	streq	r0, [r0], #-1024	; 0xfffffc00
     fac:	000008e9 	andeq	r0, r0, r9, ror #17
     fb0:	d903ab03 	stmdble	r3, {r0, r1, r8, r9, fp, sp, pc}
     fb4:	04000000 	streq	r0, [r0], #-0
     fb8:	0000079e 	muleq	r0, lr, r7
     fbc:	6b1baf03 	blvs	6ecbd0 <startup-0x1f913430>
     fc0:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
     fc4:	1d040504 	cfstr32ne	mvfx0, [r4, #-16]
     fc8:	02000001 	andeq	r0, r0, #1, 0
     fcc:	01580801 	cmpeq	r8, r1, lsl #16
     fd0:	1d0f0000 	stcne	0, cr0, [pc, #-0]	; fd8 <startup-0x1ffff028>
     fd4:	04000001 	streq	r0, [r0], #-1
     fd8:	000009d5 	ldrdeq	r0, [r0], -r5
     fdc:	56191605 	ldrpl	r1, [r9], -r5, lsl #12
     fe0:	10000000 	andne	r0, r0, r0
     fe4:	000007af 	andeq	r0, r0, pc, lsr #15
     fe8:	082f0518 	stmdaeq	pc!, {r3, r4, r8, sl}	; <UNPREDICTABLE>
     fec:	0000018f 	andeq	r0, r0, pc, lsl #3
     ff0:	00090a0d 	andeq	r0, r9, sp, lsl #20
     ff4:	13310500 	teqne	r1, #0, 10
     ff8:	0000018f 	andeq	r0, r0, pc, lsl #3
     ffc:	6b5f1100 	blvs	17c5404 <startup-0x1e83abfc>
    1000:	07320500 	ldreq	r0, [r2, -r0, lsl #10]!
    1004:	0000002c 	andeq	r0, r0, ip, lsr #32
    1008:	09590d04 	ldmdbeq	r9, {r2, r8, sl, fp}^
    100c:	32050000 	andcc	r0, r5, #0, 0
    1010:	00002c0b 	andeq	r2, r0, fp, lsl #24
    1014:	980d0800 	stmdals	sp, {fp}
    1018:	05000007 	streq	r0, [r0, #-7]
    101c:	002c1432 	eoreq	r1, ip, r2, lsr r4
    1020:	0d0c0000 	stceq	0, cr0, [ip, #-0]
    1024:	00000a4f 	andeq	r0, r0, pc, asr #20
    1028:	2c1b3205 	lfmcs	f3, 4, [fp], {5}
    102c:	10000000 	andne	r0, r0, r0
    1030:	00785f11 	rsbseq	r5, r8, r1, lsl pc
    1034:	950b3305 	strls	r3, [fp, #-773]	; 0xfffffcfb
    1038:	14000001 	strne	r0, [r0], #-1
    103c:	35040500 	strcc	r0, [r4, #-1280]	; 0xfffffb00
    1040:	0a000001 	beq	104c <startup-0x1fffefb4>
    1044:	00000129 	andeq	r0, r0, r9, lsr #2
    1048:	000001a5 	andeq	r0, r0, r5, lsr #3
    104c:	0000250b 	andeq	r2, r0, fp, lsl #10
    1050:	10000000 	andne	r0, r0, r0
    1054:	000007d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1058:	08370524 	ldmdaeq	r7!, {r2, r5, r8, sl}
    105c:	00000228 	andeq	r0, r0, r8, lsr #4
    1060:	0006df0d 	andeq	sp, r6, sp, lsl #30
    1064:	09390500 	ldmdbeq	r9!, {r8, sl}
    1068:	0000002c 	andeq	r0, r0, ip, lsr #32
    106c:	09930d00 	ldmibeq	r3, {r8, sl, fp}
    1070:	3a050000 	bcc	141078 <startup-0x1febef88>
    1074:	00002c09 	andeq	r2, r0, r9, lsl #24
    1078:	020d0400 	andeq	r0, sp, #0, 8
    107c:	05000007 	streq	r0, [r0, #-7]
    1080:	002c093b 	eoreq	r0, ip, fp, lsr r9
    1084:	0d080000 	stceq	0, cr0, [r8, #-0]
    1088:	00000abf 			; <UNDEFINED> instruction: 0x00000abf
    108c:	2c093c05 	stccs	12, cr3, [r9], {5}
    1090:	0c000000 	stceq	0, cr0, [r0], {-0}
    1094:	0008720d 	andeq	r7, r8, sp, lsl #4
    1098:	093d0500 	ldmdbeq	sp!, {r8, sl}
    109c:	0000002c 	andeq	r0, r0, ip, lsr #32
    10a0:	08580d10 	ldmdaeq	r8, {r4, r8, sl, fp}^
    10a4:	3e050000 	cdpcc	0, 0, cr0, cr5, cr0, {0}
    10a8:	00002c09 	andeq	r2, r0, r9, lsl #24
    10ac:	540d1400 	strpl	r1, [sp], #-1024	; 0xfffffc00
    10b0:	0500000a 	streq	r0, [r0, #-10]
    10b4:	002c093f 	eoreq	r0, ip, pc, lsr r9
    10b8:	0d180000 	ldceq	0, cr0, [r8, #-0]
    10bc:	000008cb 	andeq	r0, r0, fp, asr #17
    10c0:	2c094005 	stccs	0, cr4, [r9], {5}
    10c4:	1c000000 	stcne	0, cr0, [r0], {-0}
    10c8:	000a860d 	andeq	r8, sl, sp, lsl #12
    10cc:	09410500 	stmdbeq	r1, {r8, sl}^
    10d0:	0000002c 	andeq	r0, r0, ip, lsr #32
    10d4:	11120020 	tstne	r2, r0, lsr #32
    10d8:	08000007 	stmdaeq	r0, {r0, r1, r2}
    10dc:	084a0501 	stmdaeq	sl, {r0, r8, sl}^
    10e0:	0000026d 	andeq	r0, r0, sp, ror #4
    10e4:	00078b0d 	andeq	r8, r7, sp, lsl #22
    10e8:	0a4b0500 	beq	12c24f0 <startup-0x1ed3db10>
    10ec:	0000026d 	andeq	r0, r0, sp, ror #4
    10f0:	06520d00 	ldrbeq	r0, [r2], -r0, lsl #26
    10f4:	4c050000 	stcmi	0, cr0, [r5], {-0}
    10f8:	00026d09 	andeq	r6, r2, r9, lsl #26
    10fc:	c7138000 	ldrgt	r8, [r3, -r0]
    1100:	05000009 	streq	r0, [r0, #-9]
    1104:	01290a4e 			; <UNDEFINED> instruction: 0x01290a4e
    1108:	01000000 	mrseq	r0, (UNDEF: 0)
    110c:	00073e13 	andeq	r3, r7, r3, lsl lr
    1110:	0a510500 	beq	1442518 <startup-0x1ebbdae8>
    1114:	00000129 	andeq	r0, r0, r9, lsr #2
    1118:	0a000104 	beq	1530 <startup-0x1fffead0>
    111c:	00000115 	andeq	r0, r0, r5, lsl r1
    1120:	0000027d 	andeq	r0, r0, sp, ror r2
    1124:	0000250b 	andeq	r2, r0, fp, lsl #10
    1128:	12001f00 	andne	r1, r0, #0, 30
    112c:	0000087b 	andeq	r0, r0, fp, ror r8
    1130:	5d050190 	stfpls	f0, [r5, #-576]	; 0xfffffdc0
    1134:	0002c008 	andeq	ip, r2, r8
    1138:	090a0d00 	stmdbeq	sl, {r8, sl, fp}
    113c:	5e050000 	cdppl	0, 0, cr0, cr5, cr0, {0}
    1140:	0002c012 	andeq	ip, r2, r2, lsl r0
    1144:	290d0000 	stmdbcs	sp, {}	; <UNPREDICTABLE>
    1148:	05000009 	streq	r0, [r0, #-9]
    114c:	002c065f 	eoreq	r0, ip, pc, asr r6
    1150:	0d040000 	stceq	0, cr0, [r4, #-0]
    1154:	00000793 	muleq	r0, r3, r7
    1158:	c6096105 	strgt	r6, [r9], -r5, lsl #2
    115c:	08000002 	stmdaeq	r0, {r1}
    1160:	0007110d 	andeq	r1, r7, sp, lsl #2
    1164:	1e620500 	cdpne	5, 6, cr0, cr2, cr0, {0}
    1168:	00000228 	andeq	r0, r0, r8, lsr #4
    116c:	04050088 	streq	r0, [r5], #-136	; 0xffffff78
    1170:	0000027d 	andeq	r0, r0, sp, ror r2
    1174:	0002d60a 	andeq	sp, r2, sl, lsl #12
    1178:	0002d600 	andeq	sp, r2, r0, lsl #12
    117c:	00250b00 	eoreq	r0, r5, r0, lsl #22
    1180:	001f0000 	andseq	r0, pc, r0
    1184:	02dc0405 	sbcseq	r0, ip, #83886080	; 0x5000000
    1188:	10140000 	andsne	r0, r4, r0
    118c:	000008d5 	ldrdeq	r0, [r0], -r5
    1190:	08750508 	ldmdaeq	r5!, {r3, r8, sl}^
    1194:	00000305 	andeq	r0, r0, r5, lsl #6
    1198:	0006fc0d 	andeq	pc, r6, sp, lsl #24
    119c:	11760500 	cmnne	r6, r0, lsl #10
    11a0:	00000305 	andeq	r0, r0, r5, lsl #6
    11a4:	06650d00 	strbteq	r0, [r5], -r0, lsl #26
    11a8:	77050000 	strvc	r0, [r5, -r0]
    11ac:	00002c06 	andeq	r2, r0, r6, lsl #24
    11b0:	05000400 	streq	r0, [r0, #-1024]	; 0xfffffc00
    11b4:	00003a04 	andeq	r3, r0, r4, lsl #20
    11b8:	08f41000 	ldmeq	r4!, {ip}^
    11bc:	05680000 	strbeq	r0, [r8, #-0]!
    11c0:	044e08b5 	strbeq	r0, [lr], #-2229	; 0xfffff74b
    11c4:	5f110000 	svcpl	0x00110000
    11c8:	b6050070 			; <UNDEFINED> instruction: 0xb6050070
    11cc:	00030512 	andeq	r0, r3, r2, lsl r5
    11d0:	5f110000 	svcpl	0x00110000
    11d4:	b7050072 	smlsdxlt	r5, r2, r0, r0
    11d8:	00002c07 	andeq	r2, r0, r7, lsl #24
    11dc:	5f110400 	svcpl	0x00110400
    11e0:	b8050077 	stmdalt	r5, {r0, r1, r2, r4, r5, r6}
    11e4:	00002c07 	andeq	r2, r0, r7, lsl #24
    11e8:	370d0800 	strcc	r0, [sp, -r0, lsl #16]
    11ec:	05000007 	streq	r0, [r0, #-7]
    11f0:	004109b9 	strheq	r0, [r1], #-153	; 0xffffff67
    11f4:	0d0c0000 	stceq	0, cr0, [ip, #-0]
    11f8:	000007ec 	andeq	r0, r0, ip, ror #15
    11fc:	4109ba05 	tstmi	r9, r5, lsl #20
    1200:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    1204:	66625f11 	uqadd16vs	r5, r2, r1
    1208:	11bb0500 			; <UNDEFINED> instruction: 0x11bb0500
    120c:	000002dd 	ldrdeq	r0, [r0], -sp
    1210:	06b50d10 	ssateq	r0, #22, r0, lsl #26
    1214:	bc050000 	stclt	0, cr0, [r5], {-0}
    1218:	00002c07 	andeq	r2, r0, r7, lsl #24
    121c:	1f0d1800 	svcne	0x000d1800
    1220:	05000007 	streq	r0, [r0, #-7]
    1224:	01150ac3 	tsteq	r5, r3, asr #21
    1228:	0d1c0000 	ldceq	0, cr0, [ip, #-0]
    122c:	00000582 	andeq	r0, r0, r2, lsl #11
    1230:	c01dc505 	andsgt	ip, sp, r5, lsl #10
    1234:	20000005 	andcs	r0, r0, r5
    1238:	0005db0d 	andeq	sp, r5, sp, lsl #22
    123c:	1dc70500 	cfstr64ne	mvdx0, [r7]
    1240:	000005ea 	andeq	r0, r0, sl, ror #11
    1244:	09850d24 	stmibeq	r5, {r2, r5, r8, sl, fp}
    1248:	ca050000 	bgt	141250 <startup-0x1febedb0>
    124c:	00060e0d 	andeq	r0, r6, sp, lsl #28
    1250:	a00d2800 	andge	r2, sp, r0, lsl #16
    1254:	0500000a 	streq	r0, [r0, #-10]
    1258:	062809cb 	strteq	r0, [r8], -fp, asr #19
    125c:	112c0000 			; <UNDEFINED> instruction: 0x112c0000
    1260:	0062755f 	rsbeq	r7, r2, pc, asr r5
    1264:	dd11ce05 	ldcle	14, cr12, [r1, #-20]	; 0xffffffec
    1268:	30000002 	andcc	r0, r0, r2
    126c:	70755f11 	rsbsvc	r5, r5, r1, lsl pc
    1270:	12cf0500 	sbcne	r0, pc, #0, 10
    1274:	00000305 	andeq	r0, r0, r5, lsl #6
    1278:	755f1138 	ldrbvc	r1, [pc, #-312]	; 1148 <startup-0x1fffeeb8>
    127c:	d0050072 	andle	r0, r5, r2, ror r0
    1280:	00002c07 	andeq	r2, r0, r7, lsl #24
    1284:	f60d3c00 			; <UNDEFINED> instruction: 0xf60d3c00
    1288:	05000006 	streq	r0, [r0, #-6]
    128c:	062e11d3 			; <UNDEFINED> instruction: 0x062e11d3
    1290:	0d400000 	stcleq	0, cr0, [r0, #-0]
    1294:	00000a78 	andeq	r0, r0, r8, ror sl
    1298:	3e11d405 	cfmulscc	mvf13, mvf1, mvf5
    129c:	43000006 	movwmi	r0, #6
    12a0:	626c5f11 	rsbvs	r5, ip, #68	; 0x44
    12a4:	11d70500 	bicsne	r0, r7, r0, lsl #10
    12a8:	000002dd 	ldrdeq	r0, [r0], -sp
    12ac:	074d0d44 	strbeq	r0, [sp, -r4, asr #26]
    12b0:	da050000 	ble	1412b8 <startup-0x1febed48>
    12b4:	00002c07 	andeq	r2, r0, r7, lsl #24
    12b8:	640d4c00 	strvs	r4, [sp], #-3072	; 0xfffff400
    12bc:	05000007 	streq	r0, [r0, #-7]
    12c0:	00820adb 	ldrdeq	r0, [r2], fp
    12c4:	0d500000 	ldcleq	0, cr0, [r0, #-0]
    12c8:	00000575 	andeq	r0, r0, r5, ror r5
    12cc:	6c12de05 	ldcvs	14, cr13, [r2], {5}
    12d0:	54000004 	strpl	r0, [r0], #-4
    12d4:	0009770d 	andeq	r7, r9, sp, lsl #14
    12d8:	0ce20500 	cfstr64eq	mvdx0, [r2]
    12dc:	00000109 	andeq	r0, r0, r9, lsl #2
    12e0:	08fc0d58 	ldmeq	ip!, {r3, r4, r6, r8, sl, fp}^
    12e4:	e4050000 	str	r0, [r5], #-0
    12e8:	0000fd0e 	andeq	pc, r0, lr, lsl #26
    12ec:	500d5c00 	andpl	r5, sp, r0, lsl #24
    12f0:	05000008 	streq	r0, [r0, #-8]
    12f4:	002c09e5 	eoreq	r0, ip, r5, ror #19
    12f8:	00640000 	rsbeq	r0, r4, r0
    12fc:	00002c15 	andeq	r2, r0, r5, lsl ip
    1300:	00046c00 	andeq	r6, r4, r0, lsl #24
    1304:	046c1600 	strbteq	r1, [ip], #-1536	; 0xfffffa00
    1308:	15160000 	ldrne	r0, [r6, #-0]
    130c:	16000001 	strne	r0, [r0], -r1
    1310:	00000117 	andeq	r0, r0, r7, lsl r1
    1314:	00002c16 	andeq	r2, r0, r6, lsl ip
    1318:	04050000 	streq	r0, [r5], #-0
    131c:	00000477 	andeq	r0, r0, r7, ror r4
    1320:	00046c0f 	andeq	r6, r4, pc, lsl #24
    1324:	09611700 	stmdbeq	r1!, {r8, r9, sl, ip}^
    1328:	04280000 	strteq	r0, [r8], #-0
    132c:	08026005 	stmdaeq	r2, {r0, r2, sp, lr}
    1330:	000005c0 	andeq	r0, r0, r0, asr #11
    1334:	0008ba18 	andeq	fp, r8, r8, lsl sl
    1338:	02620500 	rsbeq	r0, r2, #0, 10
    133c:	00002c07 	andeq	r2, r0, r7, lsl #24
    1340:	46180000 	ldrmi	r0, [r8], -r0
    1344:	05000007 	streq	r0, [r0, #-7]
    1348:	9a0b0267 	bls	2c1cec <startup-0x1fd3e314>
    134c:	04000006 	streq	r0, [r0], #-6
    1350:	0007dc18 	andeq	sp, r7, r8, lsl ip
    1354:	02670500 	rsbeq	r0, r7, #0, 10
    1358:	00069a14 	andeq	r9, r6, r4, lsl sl
    135c:	a7180800 	ldrge	r0, [r8, -r0, lsl #16]
    1360:	05000007 	streq	r0, [r0, #-7]
    1364:	9a1e0267 	bls	781d08 <startup-0x1f87e2f8>
    1368:	0c000006 	stceq	0, cr0, [r0], {6}
    136c:	00092418 	andeq	r2, r9, r8, lsl r4
    1370:	02690500 	rsbeq	r0, r9, #0, 10
    1374:	00002c08 	andeq	r2, r0, r8, lsl #24
    1378:	73181000 	tstvc	r8, #0, 0
    137c:	05000006 	streq	r0, [r0, #-6]
    1380:	9a08026a 	bls	201d30 <startup-0x1fdfe2d0>
    1384:	14000008 	strne	r0, [r0], #-8
    1388:	00094018 	andeq	r4, r9, r8, lsl r0
    138c:	026d0500 	rsbeq	r0, sp, #0, 10
    1390:	00002c07 	andeq	r2, r0, r7, lsl #24
    1394:	2e183000 	cdpcs	0, 1, cr3, cr8, cr0, {0}
    1398:	05000009 	streq	r0, [r0, #-9]
    139c:	af16026e 	svcge	0x0016026e
    13a0:	34000008 	strcc	r0, [r0], #-8
    13a4:	00088318 	andeq	r8, r8, r8, lsl r3
    13a8:	02700500 	rsbseq	r0, r0, #0, 10
    13ac:	00002c07 	andeq	r2, r0, r7, lsl #24
    13b0:	36183800 	ldrcc	r3, [r8], -r0, lsl #16
    13b4:	05000009 	streq	r0, [r0, #-9]
    13b8:	c00a0272 	andgt	r0, sl, r2, ror r2
    13bc:	3c000008 	stccc	0, cr0, [r0], {8}
    13c0:	00083318 	andeq	r3, r8, r8, lsl r3
    13c4:	02750500 	rsbseq	r0, r5, #0, 10
    13c8:	00018f13 	andeq	r8, r1, r3, lsl pc
    13cc:	c6184000 	ldrgt	r4, [r8], -r0
    13d0:	05000007 	streq	r0, [r0, #-7]
    13d4:	2c070276 	sfmcs	f0, 4, [r7], {118}	; 0x76
    13d8:	44000000 	strmi	r0, [r0], #-0
    13dc:	000aba18 	andeq	fp, sl, r8, lsl sl
    13e0:	02770500 	rsbseq	r0, r7, #0, 10
    13e4:	00018f13 	andeq	r8, r1, r3, lsl pc
    13e8:	95184800 	ldrls	r4, [r8, #-2048]	; 0xfffff800
    13ec:	05000008 	streq	r0, [r0, #-8]
    13f0:	c6140278 			; <UNDEFINED> instruction: 0xc6140278
    13f4:	4c000008 	stcmi	0, cr0, [r0], {8}
    13f8:	0007e418 	andeq	lr, r7, r8, lsl r4
    13fc:	027b0500 	rsbseq	r0, fp, #0, 10
    1400:	00002c07 	andeq	r2, r0, r7, lsl #24
    1404:	5c185000 	ldcpl	0, cr5, [r8], {-0}
    1408:	05000007 	streq	r0, [r0, #-7]
    140c:	1709027c 	smlsdxne	r9, ip, r2, r0
    1410:	54000001 	strpl	r0, [r0], #-1
    1414:	0008b318 	andeq	fp, r8, r8, lsl r3
    1418:	029f0500 	addseq	r0, pc, #0, 10
    141c:	00087507 	andeq	r7, r8, r7, lsl #10
    1420:	7b195800 	blvc	657428 <startup-0x1f9a8bd8>
    1424:	05000008 	streq	r0, [r0, #-8]
    1428:	c01302a3 	andsgt	r0, r3, r3, lsr #5
    142c:	48000002 	stmdami	r0, {r1}
    1430:	08111901 	ldmdaeq	r1, {r0, r8, fp, ip}
    1434:	a4050000 	strge	r0, [r5], #-0
    1438:	027d1202 	rsbseq	r1, sp, #536870912	; 0x20000000
    143c:	014c0000 	mrseq	r0, (UNDEF: 76)
    1440:	000a6e19 	andeq	r6, sl, r9, lsl lr
    1444:	02a80500 	adceq	r0, r8, #0, 10
    1448:	0008d70c 	andeq	sp, r8, ip, lsl #14
    144c:	1902dc00 	stmdbne	r2, {sl, fp, ip, lr, pc}
    1450:	00000727 	andeq	r0, r0, r7, lsr #14
    1454:	1002ad05 	andne	sl, r2, r5, lsl #26
    1458:	0000065b 	andeq	r0, r0, fp, asr r6
    145c:	0c1902e0 	lfmeq	f0, 4, [r9], {224}	; 0xe0
    1460:	05000007 	streq	r0, [r0, #-7]
    1464:	e30a02af 	movw	r0, #41647	; 0xa2af
    1468:	ec000008 	stc	0, cr0, [r0], {8}
    146c:	04050002 	streq	r0, [r5], #-2
    1470:	0000044e 	andeq	r0, r0, lr, asr #8
    1474:	00002c15 	andeq	r2, r0, r5, lsl ip
    1478:	0005e400 	andeq	lr, r5, r0, lsl #8
    147c:	046c1600 	strbteq	r1, [ip], #-1536	; 0xfffffa00
    1480:	15160000 	ldrne	r0, [r6, #-0]
    1484:	16000001 	strne	r0, [r0], -r1
    1488:	000005e4 	andeq	r0, r0, r4, ror #11
    148c:	00002c16 	andeq	r2, r0, r6, lsl ip
    1490:	04050000 	streq	r0, [r5], #-0
    1494:	00000124 	andeq	r0, r0, r4, lsr #2
    1498:	05c60405 	strbeq	r0, [r6, #1029]	; 0x405
    149c:	8e150000 	cdphi	0, 1, cr0, cr5, cr0, {0}
    14a0:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    14a4:	16000006 	strne	r0, [r0], -r6
    14a8:	0000046c 	andeq	r0, r0, ip, ror #8
    14ac:	00011516 	andeq	r1, r1, r6, lsl r5
    14b0:	008e1600 	addeq	r1, lr, r0, lsl #12
    14b4:	2c160000 	ldccs	0, cr0, [r6], {-0}
    14b8:	00000000 	andeq	r0, r0, r0
    14bc:	05f00405 	ldrbeq	r0, [r0, #1029]!	; 0x405
    14c0:	2c150000 	ldccs	0, cr0, [r5], {-0}
    14c4:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    14c8:	16000006 	strne	r0, [r0], -r6
    14cc:	0000046c 	andeq	r0, r0, ip, ror #8
    14d0:	00011516 	andeq	r1, r1, r6, lsl r5
    14d4:	04050000 	streq	r0, [r5], #-0
    14d8:	00000614 	andeq	r0, r0, r4, lsl r6
    14dc:	00003a0a 	andeq	r3, r0, sl, lsl #20
    14e0:	00063e00 	andeq	r3, r6, r0, lsl #28
    14e4:	00250b00 	eoreq	r0, r5, r0, lsl #22
    14e8:	00020000 	andeq	r0, r2, r0
    14ec:	00003a0a 	andeq	r3, r0, sl, lsl #20
    14f0:	00064e00 	andeq	r4, r6, r0, lsl #28
    14f4:	00250b00 	eoreq	r0, r5, r0, lsl #22
    14f8:	00000000 	andeq	r0, r0, r0
    14fc:	0008e207 	andeq	lr, r8, r7, lsl #4
    1500:	011f0500 	tsteq	pc, r0, lsl #10
    1504:	00030b1a 	andeq	r0, r3, sl, lsl fp
    1508:	0a5e1a00 	beq	1787d10 <startup-0x1e8782f0>
    150c:	050c0000 	streq	r0, [ip, #-0]
    1510:	94080123 	strls	r0, [r8], #-291	; 0xfffffedd
    1514:	18000006 	stmdane	r0, {r1, r2}
    1518:	0000090a 	andeq	r0, r0, sl, lsl #18
    151c:	11012505 	tstne	r1, r5, lsl #10
    1520:	00000694 	muleq	r0, r4, r6
    1524:	07f21800 	ldrbeq	r1, [r2, r0, lsl #16]!
    1528:	26050000 	strcs	r0, [r5], -r0
    152c:	002c0701 	eoreq	r0, ip, r1, lsl #14
    1530:	18040000 	stmdane	r4, {}	; <UNPREDICTABLE>
    1534:	000008dc 	ldrdeq	r0, [r0], -ip
    1538:	0b012705 	bleq	4b154 <startup-0x1ffb4eac>
    153c:	0000069a 	muleq	r0, sl, r6
    1540:	04050008 	streq	r0, [r5], #-8
    1544:	0000065b 	andeq	r0, r0, fp, asr r6
    1548:	064e0405 	strbeq	r0, [lr], -r5, lsl #8
    154c:	6b1a0000 	blvs	681554 <startup-0x1f97eaac>
    1550:	0e000006 	cdpeq	0, 0, cr0, cr0, cr6, {0}
    1554:	08013f05 	stmdaeq	r1, {r0, r2, r8, r9, sl, fp, ip, sp}
    1558:	000006d9 	ldrdeq	r0, [r0], -r9
    155c:	00096818 	andeq	r6, r9, r8, lsl r8
    1560:	01400500 	cmpeq	r0, r0, lsl #10
    1564:	0006d912 	andeq	sp, r6, r2, lsl r9
    1568:	a5180000 	ldrge	r0, [r8, #-0]
    156c:	05000009 	streq	r0, [r0, #-9]
    1570:	d9120141 	ldmdble	r2, {r0, r6, r8}
    1574:	06000006 	streq	r0, [r0], -r6
    1578:	0009d018 	andeq	sp, r9, r8, lsl r0
    157c:	01420500 	cmpeq	r2, r0, lsl #10
    1580:	00004812 	andeq	r4, r0, r2, lsl r8
    1584:	0a000c00 	beq	458c <startup-0x1fffba74>
    1588:	00000048 	andeq	r0, r0, r8, asr #32
    158c:	000006e9 	andeq	r0, r0, r9, ror #13
    1590:	0000250b 	andeq	r2, r0, fp, lsl #10
    1594:	1b000200 	blne	1d9c <startup-0x1fffe264>
    1598:	028005d0 	addeq	r0, r0, #208, 10	; 0x34000000
    159c:	0007fe07 	andeq	pc, r7, r7, lsl #28
    15a0:	0a031800 	beq	c75a8 <startup-0x1ff38a58>
    15a4:	82050000 	andhi	r0, r5, #0, 0
    15a8:	00251802 	eoreq	r1, r5, r2, lsl #16
    15ac:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    15b0:	000009ab 	andeq	r0, r0, fp, lsr #19
    15b4:	12028305 	andne	r8, r2, #335544320	; 0x14000000
    15b8:	00000117 	andeq	r0, r0, r7, lsl r1
    15bc:	08261804 	stmdaeq	r6!, {r2, fp, ip}
    15c0:	84050000 	strhi	r0, [r5], #-0
    15c4:	07fe1002 	ldrbeq	r1, [lr, r2]!
    15c8:	18080000 	stmdane	r8, {}	; <UNPREDICTABLE>
    15cc:	00000a91 	muleq	r0, r1, sl
    15d0:	17028505 	strne	r8, [r2, -r5, lsl #10]
    15d4:	000001a5 	andeq	r0, r0, r5, lsr #3
    15d8:	07b71824 	ldreq	r1, [r7, r4, lsr #16]!
    15dc:	86050000 	strhi	r0, [r5], -r0
    15e0:	002c0f02 	eoreq	r0, ip, r2, lsl #30
    15e4:	18480000 	stmdane	r8, {}^	; <UNPREDICTABLE>
    15e8:	00000905 	andeq	r0, r0, r5, lsl #18
    15ec:	2c028705 	stccs	7, cr8, [r2], {5}
    15f0:	00000064 	andeq	r0, r0, r4, rrx
    15f4:	0aa71850 	beq	fe9c773c <rear+0xde9bf514>
    15f8:	88050000 	stmdahi	r5, {}	; <UNPREDICTABLE>
    15fc:	06a01a02 	strteq	r1, [r0], r2, lsl #20
    1600:	18580000 	ldmdane	r8, {}^	; <UNPREDICTABLE>
    1604:	00000917 	andeq	r0, r0, r7, lsl r9
    1608:	16028905 	strne	r8, [r2], -r5, lsl #18
    160c:	000000fd 	strdeq	r0, [r0], -sp
    1610:	0aac1868 	beq	feb077b8 <rear+0xdeaff590>
    1614:	8a050000 	bhi	14161c <startup-0x1febe9e4>
    1618:	00fd1602 	rscseq	r1, sp, r2, lsl #12
    161c:	18700000 	ldmdane	r0!, {}^	; <UNPREDICTABLE>
    1620:	0000089f 	muleq	r0, pc, r8	; <UNPREDICTABLE>
    1624:	16028b05 	strne	r8, [r2], -r5, lsl #22
    1628:	000000fd 	strdeq	r0, [r0], -sp
    162c:	0a641878 	beq	1907814 <startup-0x1e6f87ec>
    1630:	8c050000 	stchi	0, cr0, [r5], {-0}
    1634:	080e1002 	stmdaeq	lr, {r1, ip}
    1638:	18800000 	stmne	r0, {}	; <UNPREDICTABLE>
    163c:	0000081a 	andeq	r0, r0, sl, lsl r8
    1640:	10028d05 	andne	r8, r2, r5, lsl #26
    1644:	0000081e 	andeq	r0, r0, lr, lsl r8
    1648:	09dd1888 	ldmibeq	sp, {r3, r7, fp, ip}^
    164c:	8e050000 	cdphi	0, 0, cr0, cr5, cr0, {0}
    1650:	002c0f02 	eoreq	r0, ip, r2, lsl #30
    1654:	18a00000 	stmiane	r0!, {}	; <UNPREDICTABLE>
    1658:	0000077d 	andeq	r0, r0, sp, ror r7
    165c:	16028f05 	strne	r8, [r2], -r5, lsl #30
    1660:	000000fd 	strdeq	r0, [r0], -sp
    1664:	06d018a4 	ldrbeq	r1, [r0], r4, lsr #17
    1668:	90050000 	andls	r0, r5, r0
    166c:	00fd1602 	rscseq	r1, sp, r2, lsl #12
    1670:	18ac0000 	stmiane	ip!, {}	; <UNPREDICTABLE>
    1674:	0000076c 	andeq	r0, r0, ip, ror #14
    1678:	16029105 	strne	r9, [r2], -r5, lsl #2
    167c:	000000fd 	strdeq	r0, [r0], -sp
    1680:	067e18b4 			; <UNDEFINED> instruction: 0x067e18b4
    1684:	92050000 	andls	r0, r5, #0, 0
    1688:	00fd1602 	rscseq	r1, sp, r2, lsl #12
    168c:	18bc0000 	ldmne	ip!, {}	; <UNPREDICTABLE>
    1690:	0000068d 	andeq	r0, r0, sp, lsl #13
    1694:	16029305 	strne	r9, [r2], -r5, lsl #6
    1698:	000000fd 	strdeq	r0, [r0], -sp
    169c:	08b818c4 	ldmeq	r8!, {r2, r6, r7, fp, ip}
    16a0:	94050000 	strls	r0, [r5], #-0
    16a4:	002c0802 	eoreq	r0, ip, r2, lsl #16
    16a8:	00cc0000 	sbceq	r0, ip, r0
    16ac:	00011d0a 	andeq	r1, r1, sl, lsl #26
    16b0:	00080e00 	andeq	r0, r8, r0, lsl #28
    16b4:	00250b00 	eoreq	r0, r5, r0, lsl #22
    16b8:	00190000 	andseq	r0, r9, r0
    16bc:	00011d0a 	andeq	r1, r1, sl, lsl #26
    16c0:	00081e00 	andeq	r1, r8, r0, lsl #28
    16c4:	00250b00 	eoreq	r0, r5, r0, lsl #22
    16c8:	00070000 	andeq	r0, r7, r0
    16cc:	00011d0a 	andeq	r1, r1, sl, lsl #26
    16d0:	00082e00 	andeq	r2, r8, r0, lsl #28
    16d4:	00250b00 	eoreq	r0, r5, r0, lsl #22
    16d8:	00170000 	andseq	r0, r7, r0
    16dc:	9905f01b 	stmdbls	r5, {r0, r1, r3, r4, ip, sp, lr, pc}
    16e0:	08550702 	ldmdaeq	r5, {r1, r8, r9, sl}^
    16e4:	6b180000 	blvs	6016ec <startup-0x1f9fe914>
    16e8:	05000008 	streq	r0, [r0, #-8]
    16ec:	551b029c 	ldrpl	r0, [fp, #-668]	; 0xfffffd64
    16f0:	00000008 	andeq	r0, r0, r8
    16f4:	00086218 	andeq	r6, r8, r8, lsl r2
    16f8:	029d0500 	addseq	r0, sp, #0, 10
    16fc:	00086518 	andeq	r6, r8, r8, lsl r5
    1700:	0a007800 	beq	1f708 <startup-0x1ffe08f8>
    1704:	00000305 	andeq	r0, r0, r5, lsl #6
    1708:	00000865 	andeq	r0, r0, r5, ror #16
    170c:	0000250b 	andeq	r2, r0, fp, lsl #10
    1710:	0a001d00 	beq	8b18 <startup-0x1fff74e8>
    1714:	00000025 	andeq	r0, r0, r5, lsr #32
    1718:	00000875 	andeq	r0, r0, r5, ror r8
    171c:	0000250b 	andeq	r2, r0, fp, lsl #10
    1720:	1c001d00 	stcne	13, cr1, [r0], {-0}
    1724:	027e05f0 	rsbseq	r0, lr, #240, 10	; 0x3c000000
    1728:	00089a03 	andeq	r9, r8, r3, lsl #20
    172c:	09611d00 	stmdbeq	r1!, {r8, sl, fp, ip}^
    1730:	95050000 	strls	r0, [r5, #-0]
    1734:	06e90b02 	strbteq	r0, [r9], r2, lsl #22
    1738:	7e1d0000 	cdpvc	0, 1, cr0, cr13, cr0, {0}
    173c:	0500000a 	streq	r0, [r0, #-10]
    1740:	2e0b029e 	mcrcs	2, 0, r0, cr11, cr14, {4}
    1744:	00000008 	andeq	r0, r0, r8
    1748:	00011d0a 	andeq	r1, r1, sl, lsl #26
    174c:	0008aa00 	andeq	sl, r8, r0, lsl #20
    1750:	00250b00 	eoreq	r0, r5, r0, lsl #22
    1754:	00180000 	andseq	r0, r8, r0
    1758:	0006c506 	andeq	ip, r6, r6, lsl #10
    175c:	aa040500 	bge	102b64 <startup-0x1fefd49c>
    1760:	1e000008 	cdpne	0, 0, cr0, cr0, cr8, {0}
    1764:	000008c0 	andeq	r0, r0, r0, asr #17
    1768:	00046c16 	andeq	r6, r4, r6, lsl ip
    176c:	04050000 	streq	r0, [r5], #-0
    1770:	000008b5 			; <UNDEFINED> instruction: 0x000008b5
    1774:	018f0405 	orreq	r0, pc, r5, lsl #8
    1778:	d71e0000 	ldrle	r0, [lr, -r0]
    177c:	16000008 	strne	r0, [r0], -r8
    1780:	0000002c 	andeq	r0, r0, ip, lsr #32
    1784:	dd040500 	cfstr32le	mvfx0, [r4, #-0]
    1788:	05000008 	streq	r0, [r0, #-8]
    178c:	0008cc04 	andeq	ip, r8, r4, lsl #24
    1790:	064e0a00 	strbeq	r0, [lr], -r0, lsl #20
    1794:	08f30000 	ldmeq	r3!, {}^	; <UNPREDICTABLE>
    1798:	250b0000 	strcs	r0, [fp, #-0]
    179c:	02000000 	andeq	r0, r0, #0, 0
    17a0:	09f71f00 	ldmibeq	r7!, {r8, r9, sl, fp, ip}^
    17a4:	2e050000 	cdpcs	0, 0, cr0, cr5, cr0, {0}
    17a8:	046c1703 	strbteq	r1, [ip], #-1795	; 0xfffff8fd
    17ac:	f01f0000 			; <UNDEFINED> instruction: 0xf01f0000
    17b0:	05000009 	streq	r0, [r0, #-9]
    17b4:	721d032f 	andsvc	r0, sp, #-1140850688	; 0xbc000000
    17b8:	10000004 	andne	r0, r0, r4
    17bc:	000002c4 	andeq	r0, r0, r4, asr #5
    17c0:	10010602 	andne	r0, r1, r2, lsl #12
    17c4:	00000931 	andeq	r0, r0, r1, lsr r9
    17c8:	06007811 			; <UNDEFINED> instruction: 0x06007811
    17cc:	003a1302 	eorseq	r1, sl, r2, lsl #6
    17d0:	11000000 	mrsne	r0, (UNDEF: 0)
    17d4:	03060079 	movweq	r0, #24697	; 0x6079
    17d8:	00003a13 	andeq	r3, r0, r3, lsl sl
    17dc:	04000100 	streq	r0, [r0], #-256	; 0xffffff00
    17e0:	000002de 	ldrdeq	r0, [r0], -lr
    17e4:	0d020406 	cfstrseq	mvf0, [r2, #-24]	; 0xffffffe8
    17e8:	10000009 	andne	r0, r0, r9
    17ec:	0000033d 	andeq	r0, r0, sp, lsr r3
    17f0:	10080634 	andne	r0, r8, r4, lsr r6
    17f4:	0000097e 	andeq	r0, r0, lr, ror r9
    17f8:	0003f30d 	andeq	pc, r3, sp, lsl #6
    17fc:	09090600 	stmdbeq	r9, {r9, sl}
    1800:	0000002c 	andeq	r0, r0, ip, lsr #32
    1804:	03590d00 	cmpeq	r9, #0, 26
    1808:	0a060000 	beq	181810 <startup-0x1fe7e7f0>
    180c:	00002c09 	andeq	r2, r0, r9, lsl #24
    1810:	5f0d0400 	svcpl	0x000d0400
    1814:	06000003 	streq	r0, [r0], -r3
    1818:	002c090b 	eoreq	r0, ip, fp, lsl #18
    181c:	11080000 	mrsne	r0, (UNDEF: 8)
    1820:	06007870 			; <UNDEFINED> instruction: 0x06007870
    1824:	097e0b0c 	ldmdbeq	lr!, {r2, r3, r8, r9, fp}^
    1828:	000c0000 	andeq	r0, ip, r0
    182c:	0009310a 	andeq	r3, r9, sl, lsl #2
    1830:	00098e00 	andeq	r8, r9, r0, lsl #28
    1834:	00250b00 	eoreq	r0, r5, r0, lsl #22
    1838:	00130000 	andseq	r0, r3, r0
    183c:	00024904 	andeq	r4, r2, r4, lsl #18
    1840:	0e0d0600 	cfmadd32eq	mvax0, mvfx0, mvfx13, mvfx0
    1844:	0000099a 	muleq	r0, sl, r9
    1848:	093d0405 	ldmdbeq	sp!, {r0, r2, sl}
    184c:	d5100000 	ldrle	r0, [r0, #-0]
    1850:	24000003 	strcs	r0, [r0], #-3
    1854:	23100f06 	tstcs	r0, #6, 30
    1858:	1100000a 	tstne	r0, sl
    185c:	006f6567 	rsbeq	r6, pc, r7, ror #10
    1860:	8e0f1006 	cdphi	0, 0, cr1, cr15, cr6, {0}
    1864:	00000009 	andeq	r0, r0, r9
    1868:	0002580d 	andeq	r5, r2, sp, lsl #16
    186c:	09110600 	ldmdbeq	r1, {r9, sl}
    1870:	0000002c 	andeq	r0, r0, ip, lsr #32
    1874:	025d0d04 	subseq	r0, sp, #4, 26	; 0x100
    1878:	11060000 	mrsne	r0, (UNDEF: 6)
    187c:	00002c0e 	andeq	r2, r0, lr, lsl #24
    1880:	ee0d0800 	cdp	8, 0, cr0, cr13, cr0, {0}
    1884:	06000002 	streq	r0, [r0], -r2
    1888:	002c0912 	eoreq	r0, ip, r2, lsl r9
    188c:	0d0c0000 	stceq	0, cr0, [ip, #-0]
    1890:	000002f3 	strdeq	r0, [r0], -r3
    1894:	2c0e1206 	sfmcs	f1, 4, [lr], {6}
    1898:	10000000 	andne	r0, r0, r0
    189c:	0003720d 	andeq	r7, r3, sp, lsl #4
    18a0:	0d130600 	ldceq	6, cr0, [r3, #-0]
    18a4:	00000a34 	andeq	r0, r0, r4, lsr sl
    18a8:	06330d14 			; <UNDEFINED> instruction: 0x06330d14
    18ac:	14060000 	strne	r0, [r6], #-0
    18b0:	000a340d 	andeq	r3, sl, sp, lsl #8
    18b4:	c00d1800 	andgt	r1, sp, r0, lsl #16
    18b8:	06000006 	streq	r0, [r0], -r6
    18bc:	0a340d15 	beq	d04d18 <startup-0x1f2fb2e8>
    18c0:	0d1c0000 	ldceq	0, cr0, [ip, #-0]
    18c4:	000002e4 	andeq	r0, r0, r4, ror #5
    18c8:	4f0d1606 	svcmi	0x000d1606
    18cc:	2000000a 	andcs	r0, r0, sl
    18d0:	0a2e1e00 	beq	b890d8 <startup-0x1f476f28>
    18d4:	2e160000 	cdpcs	0, 1, cr0, cr6, cr0, {0}
    18d8:	0000000a 	andeq	r0, r0, sl
    18dc:	09a00405 	stmibeq	r0!, {r0, r2, sl}
    18e0:	04050000 	streq	r0, [r5], #-0
    18e4:	00000a23 	andeq	r0, r0, r3, lsr #20
    18e8:	000a4f1e 	andeq	r4, sl, lr, lsl pc
    18ec:	0a2e1600 	beq	b870f4 <startup-0x1f478f0c>
    18f0:	2c160000 	ldccs	0, cr0, [r6], {-0}
    18f4:	16000000 	strne	r0, [r0], -r0
    18f8:	0000002c 	andeq	r0, r0, ip, lsr #32
    18fc:	3a040500 	bcc	102d04 <startup-0x1fefd2fc>
    1900:	0400000a 	streq	r0, [r0], #-10
    1904:	00000428 	andeq	r0, r0, r8, lsr #8
    1908:	2e0c1706 	cdpcs	7, 0, cr1, cr12, cr6, {0}
    190c:	0a00000a 	beq	193c <startup-0x1fffe6c4>
    1910:	00000a55 	andeq	r0, r0, r5, asr sl
    1914:	00000a72 	andeq	r0, r0, r2, ror sl
    1918:	00002520 	andeq	r2, r0, r0, lsr #10
    191c:	0001ff00 	andeq	pc, r1, r0, lsl #30
    1920:	00099c21 	andeq	r9, r9, r1, lsr #24
    1924:	09050100 	stmdbeq	r5, {r8}
    1928:	00000a61 	andeq	r0, r0, r1, ror #20
    192c:	31800305 	orrcc	r0, r0, r5, lsl #6
    1930:	ea212000 	b	849938 <startup-0x1f7b66c8>
    1934:	01000009 	tsteq	r0, r9
    1938:	002c0506 	eoreq	r0, ip, r6, lsl #10
    193c:	03050000 	movweq	r0, #20480	; 0x5000
    1940:	20003178 	andcs	r3, r0, r8, ror r1
    1944:	0009b821 	andeq	fp, r9, r1, lsr #16
    1948:	05070100 	streq	r0, [r7, #-256]	; 0xffffff00
    194c:	0000002c 	andeq	r0, r0, ip, lsr #32
    1950:	82280305 	eorhi	r0, r8, #335544320	; 0x14000000
    1954:	bd212000 	stclt	0, cr2, [r1, #-0]
    1958:	01000009 	tsteq	r0, r9
    195c:	002c0508 	eoreq	r0, ip, r8, lsl #10
    1960:	03050000 	movweq	r0, #20480	; 0x5000
    1964:	2000317c 	andcs	r3, r0, ip, ror r1
    1968:	00075622 	andeq	r5, r7, r2, lsr #12
    196c:	09360100 	ldmdbeq	r6!, {r8}
    1970:	00000a55 	andeq	r0, r0, r5, asr sl
    1974:	2000104c 	andcs	r1, r0, ip, asr #32
    1978:	00000010 	andeq	r0, r0, r0, lsl r0
    197c:	be239c01 	cdplt	12, 2, cr9, cr3, cr1, {0}
    1980:	01000006 	tsteq	r0, r6
    1984:	002c052b 	eoreq	r0, ip, fp, lsr #10
    1988:	10000000 	andne	r0, r0, r0
    198c:	004c2000 	subeq	r2, ip, r0
    1990:	9c010000 	stcls	0, cr0, [r1], {-0}
    1994:	00000afa 	strdeq	r0, [r0], -sl
    1998:	00057624 	andeq	r7, r5, r4, lsr #12
    199c:	0c2c0100 	stfeqs	f0, [ip], #-0
    19a0:	00000a55 	andeq	r0, r0, r5, asr sl
    19a4:	00749102 	rsbseq	r9, r4, r2, lsl #2
    19a8:	00091025 	andeq	r1, r9, r5, lsr #32
    19ac:	061f0100 	ldreq	r0, [pc], -r0, lsl #2
    19b0:	20000f9c 	mulcs	r0, ip, pc	; <UNPREDICTABLE>
    19b4:	00000064 	andeq	r0, r0, r4, rrx
    19b8:	0b209c01 	bleq	8289c4 <startup-0x1f7d763c>
    19bc:	76260000 	strtvc	r0, [r6], -r0
    19c0:	01000005 	tsteq	r0, r5
    19c4:	0a55151f 	beq	1546e48 <startup-0x1eab91b8>
    19c8:	91020000 	mrsls	r0, (UNDEF: 2)
    19cc:	66220074 			; <UNDEFINED> instruction: 0x66220074
    19d0:	01000006 	tsteq	r0, r6
    19d4:	002c051a 	eoreq	r0, ip, sl, lsl r5
    19d8:	0f880000 	svceq	0x00880000
    19dc:	00142000 	andseq	r2, r4, r0
    19e0:	9c010000 	stcls	0, cr0, [r1], {-0}
    19e4:	00065e22 	andeq	r5, r6, r2, lsr #28
    19e8:	06150100 	ldreq	r0, [r5], -r0, lsl #2
    19ec:	00000b4c 	andeq	r0, r0, ip, asr #22
    19f0:	20000f64 	andcs	r0, r0, r4, ror #30
    19f4:	00000024 	andeq	r0, r0, r4, lsr #32
    19f8:	01029c01 	tsteq	r2, r1, lsl #24
    19fc:	0008ad02 	andeq	sl, r8, r2, lsl #26
    1a00:	072f2200 	streq	r2, [pc, -r0, lsl #4]!
    1a04:	10010000 	andne	r0, r1, r0
    1a08:	000b4c06 	andeq	r4, fp, r6, lsl #24
    1a0c:	000f4c00 	andeq	r4, pc, r0, lsl #24
    1a10:	00001820 	andeq	r1, r0, r0, lsr #16
    1a14:	229c0100 	addscs	r0, ip, #0
    1a18:	000007f9 	strdeq	r0, [r0], -r9
    1a1c:	2c050b01 			; <UNDEFINED> instruction: 0x2c050b01
    1a20:	30000000 	andcc	r0, r0, r0
    1a24:	1c20000f 	stcne	0, cr0, [r0], #-60	; 0xffffffc4
    1a28:	01000000 	mrseq	r0, (UNDEF: 0)
    1a2c:	Address 0x0000000000001a2c is out of bounds.


Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	110e1b0e 	tstne	lr, lr, lsl #22
   c:	10061201 	andne	r1, r6, r1, lsl #4
  10:	02000017 	andeq	r0, r0, #23, 0
  14:	0b0b0024 	bleq	2c00ac <startup-0x1fd3ff54>
  18:	0e030b3e 	vmoveq.16	d3[0], r0
  1c:	2e030000 	cdpcs	0, 0, cr0, cr3, cr0, {0}
  20:	03193f01 	tsteq	r9, #1, 30
  24:	3b0b3a0e 	blcc	2ce864 <startup-0x1fd3179c>
  28:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
  2c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
  30:	96184006 	ldrls	r4, [r8], -r6
  34:	13011942 	movwne	r1, #6466	; 0x1942
  38:	05040000 	streq	r0, [r4, #-0]
  3c:	3a080300 	bcc	200c44 <startup-0x1fdff3bc>
  40:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  44:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
  48:	05000018 	streq	r0, [r0, #-24]	; 0xffffffe8
  4c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
  50:	0b3b0b3a 	bleq	ec2d40 <startup-0x1f13d2c0>
  54:	13490b39 	movtne	r0, #39737	; 0x9b39
  58:	00001802 	andeq	r1, r0, r2, lsl #16
  5c:	3f012e06 	svccc	0x00012e06
  60:	3a0e0319 	bcc	380ccc <startup-0x1fc7f334>
  64:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  68:	3c13490b 			; <UNDEFINED> instruction: 0x3c13490b
  6c:	07000019 	smladeq	r0, r9, r0, r0
  70:	00000018 	andeq	r0, r0, r8, lsl r0
  74:	0b002408 	bleq	909c <startup-0x1fff6f64>
  78:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
  7c:	09000008 	stmdbeq	r0, {r3}
  80:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
  84:	0b3a0e03 	bleq	e83898 <startup-0x1f17c768>
  88:	0b390b3b 	bleq	e42d7c <startup-0x1f1bd284>
  8c:	06120111 			; <UNDEFINED> instruction: 0x06120111
  90:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
  94:	00130119 	andseq	r0, r3, r9, lsl r1
  98:	012e0a00 			; <UNDEFINED> instruction: 0x012e0a00
  9c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
  a0:	0b3b0b3a 	bleq	ec2d90 <startup-0x1f13d270>
  a4:	13490b39 	movtne	r0, #39737	; 0x9b39
  a8:	1301193c 	movwne	r1, #6460	; 0x193c
  ac:	2e0b0000 	cdpcs	0, 0, cr0, cr11, cr0, {0}
  b0:	03193f01 	tsteq	r9, #1, 30
  b4:	3b0b3a0e 	blcc	2ce8f4 <startup-0x1fd3170c>
  b8:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
  bc:	11134919 	tstne	r3, r9, lsl r9
  c0:	40061201 	andmi	r1, r6, r1, lsl #4
  c4:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
  c8:	00001301 	andeq	r1, r0, r1, lsl #6
  cc:	0300050c 	movweq	r0, #1292	; 0x50c
  d0:	3b0b3a0e 	blcc	2ce910 <startup-0x1fd316f0>
  d4:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
  d8:	00180213 	andseq	r0, r8, r3, lsl r2
  dc:	012e0d00 			; <UNDEFINED> instruction: 0x012e0d00
  e0:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
  e4:	0b3b0b3a 	bleq	ec2dd4 <startup-0x1f13d22c>
  e8:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
  ec:	06120111 			; <UNDEFINED> instruction: 0x06120111
  f0:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
  f4:	00130119 	andseq	r0, r3, r9, lsl r1
  f8:	002e0e00 	eoreq	r0, lr, r0, lsl #28
  fc:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 100:	0b3b0b3a 	bleq	ec2df0 <startup-0x1f13d210>
 104:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 108:	06120111 			; <UNDEFINED> instruction: 0x06120111
 10c:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 110:	00000019 	andeq	r0, r0, r9, lsl r0
 114:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
 118:	030b130e 	movweq	r1, #45838	; 0xb30e
 11c:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
 120:	10011117 	andne	r1, r1, r7, lsl r1
 124:	02000017 	andeq	r0, r0, #23, 0
 128:	0b0b0024 	bleq	2c01c0 <startup-0x1fd3fe40>
 12c:	0e030b3e 	vmoveq.16	d3[0], r0
 130:	01030000 	mrseq	r0, (UNDEF: 3)
 134:	01134901 	tsteq	r3, r1, lsl #18
 138:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
 13c:	13490021 	movtne	r0, #36897	; 0x9021
 140:	0000052f 	andeq	r0, r0, pc, lsr #10
 144:	49003505 	stmdbmi	r0, {r0, r2, r8, sl, ip, sp}
 148:	06000013 			; <UNDEFINED> instruction: 0x06000013
 14c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 150:	0b3b0b3a 	bleq	ec2e40 <startup-0x1f13d1c0>
 154:	13490b39 	movtne	r0, #39737	; 0x9b39
 158:	00001802 	andeq	r1, r0, r2, lsl #16
 15c:	03011307 	movweq	r1, #4871	; 0x1307
 160:	3a0b0b0e 	bcc	2c2da0 <startup-0x1fd3d260>
 164:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 168:	0013010b 	andseq	r0, r3, fp, lsl #2
 16c:	000d0800 	andeq	r0, sp, r0, lsl #16
 170:	0b3a0803 	bleq	e82184 <startup-0x1f17de7c>
 174:	0b390b3b 	bleq	e42e68 <startup-0x1f1bd198>
 178:	0b381349 	bleq	e04ea4 <startup-0x1f1fb15c>
 17c:	16090000 	strne	r0, [r9], -r0
 180:	3a0e0300 	bcc	380d88 <startup-0x1fc7f278>
 184:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 188:	0013490b 	andseq	r4, r3, fp, lsl #18
 18c:	000d0a00 	andeq	r0, sp, r0, lsl #20
 190:	0b3a0e03 	bleq	e839a4 <startup-0x1f17c65c>
 194:	0b390b3b 	bleq	e42e88 <startup-0x1f1bd178>
 198:	0b381349 	bleq	e04ec4 <startup-0x1f1fb13c>
 19c:	240b0000 	strcs	r0, [fp], #-0
 1a0:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 1a4:	0008030b 	andeq	r0, r8, fp, lsl #6
 1a8:	00210c00 	eoreq	r0, r1, r0, lsl #24
 1ac:	0b2f1349 	bleq	bc4ed8 <startup-0x1f43b128>
 1b0:	0f0d0000 	svceq	0x000d0000
 1b4:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
 1b8:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
 1bc:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
 1c0:	00001301 	andeq	r1, r0, r1, lsl #6
 1c4:	4900050f 	stmdbmi	r0, {r0, r1, r2, r3, r8, sl}
 1c8:	10000013 	andne	r0, r0, r3, lsl r0
 1cc:	0b0b0113 	bleq	2c0620 <startup-0x1fd3f9e0>
 1d0:	0b3b0b3a 	bleq	ec2ec0 <startup-0x1f13d140>
 1d4:	13010b39 	movwne	r0, #6969	; 0x1b39
 1d8:	34110000 	ldrcc	r0, [r1], #-0
 1dc:	3a0e0300 	bcc	380de4 <startup-0x1fc7f21c>
 1e0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 1e4:	3f13490b 	svccc	0x0013490b
 1e8:	00180219 	andseq	r0, r8, r9, lsl r2
 1ec:	012e1200 			; <UNDEFINED> instruction: 0x012e1200
 1f0:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 1f4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 1f8:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 1fc:	06120111 			; <UNDEFINED> instruction: 0x06120111
 200:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 204:	00130119 	andseq	r0, r3, r9, lsl r1
 208:	00051300 	andeq	r1, r5, r0, lsl #6
 20c:	0b3a0803 	bleq	e82220 <startup-0x1f17dde0>
 210:	0b39053b 	bleq	e41704 <startup-0x1f1be8fc>
 214:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 218:	2e140000 	cdpcs	0, 1, cr0, cr4, cr0, {0}
 21c:	03193f01 	tsteq	r9, #1, 30
 220:	3b0b3a0e 	blcc	2cea60 <startup-0x1fd315a0>
 224:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
 228:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 22c:	96184006 	ldrls	r4, [r8], -r6
 230:	13011942 	movwne	r1, #6466	; 0x1942
 234:	05150000 	ldreq	r0, [r5, #-0]
 238:	3a0e0300 	bcc	380e40 <startup-0x1fc7f1c0>
 23c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 240:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 244:	16000018 			; <UNDEFINED> instruction: 0x16000018
 248:	0111010b 	tsteq	r1, fp, lsl #2
 24c:	00000612 	andeq	r0, r0, r2, lsl r6
 250:	3f012e17 	svccc	0x00012e17
 254:	3a0e0319 	bcc	380ec0 <startup-0x1fc7f140>
 258:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 25c:	3c13490b 			; <UNDEFINED> instruction: 0x3c13490b
 260:	18000019 	stmdane	r0, {r0, r3, r4}
 264:	00000018 	andeq	r0, r0, r8, lsl r0
 268:	03000519 	movweq	r0, #1305	; 0x519
 26c:	3b0b3a08 	blcc	2cea94 <startup-0x1fd3156c>
 270:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 274:	00180213 	andseq	r0, r8, r3, lsl r2
 278:	00341a00 	eorseq	r1, r4, r0, lsl #20
 27c:	0b3a0803 	bleq	e82290 <startup-0x1f17dd70>
 280:	0b390b3b 	bleq	e42f74 <startup-0x1f1bd08c>
 284:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 288:	2e1b0000 	cdpcs	0, 1, cr0, cr11, cr0, {0}
 28c:	03193f00 	tsteq	r9, #0, 30
 290:	3b0b3a0e 	blcc	2cead0 <startup-0x1fd31530>
 294:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
 298:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 29c:	97184006 	ldrls	r4, [r8, -r6]
 2a0:	00001942 	andeq	r1, r0, r2, asr #18
 2a4:	03012e1c 	movweq	r2, #7708	; 0x1e1c
 2a8:	3b0b3a0e 	blcc	2ceae8 <startup-0x1fd31518>
 2ac:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
 2b0:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 2b4:	97184006 	ldrls	r4, [r8, -r6]
 2b8:	13011942 	movwne	r1, #6466	; 0x1942
 2bc:	2e1d0000 	cdpcs	0, 1, cr0, cr13, cr0, {0}
 2c0:	03193f01 	tsteq	r9, #1, 30
 2c4:	3b0b3a0e 	blcc	2ceb04 <startup-0x1fd314fc>
 2c8:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
 2cc:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 2d0:	97184006 	ldrls	r4, [r8, -r6]
 2d4:	13011942 	movwne	r1, #6466	; 0x1942
 2d8:	01000000 	mrseq	r0, (UNDEF: 0)
 2dc:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 2e0:	0e030b13 	vmoveq.32	d3[0], r0
 2e4:	01110e1b 	tsteq	r1, fp, lsl lr
 2e8:	17100612 			; <UNDEFINED> instruction: 0x17100612
 2ec:	24020000 	strcs	r0, [r2], #-0
 2f0:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 2f4:	000e030b 	andeq	r0, lr, fp, lsl #6
 2f8:	012e0300 			; <UNDEFINED> instruction: 0x012e0300
 2fc:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 300:	0b3b0b3a 	bleq	ec2ff0 <startup-0x1f13d010>
 304:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 308:	06120111 			; <UNDEFINED> instruction: 0x06120111
 30c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 310:	00130119 	andseq	r0, r3, r9, lsl r1
 314:	00050400 	andeq	r0, r5, r0, lsl #8
 318:	0b3a0803 	bleq	e8232c <startup-0x1f17dcd4>
 31c:	0b390b3b 	bleq	e43010 <startup-0x1f1bcff0>
 320:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 324:	2e050000 	cdpcs	0, 0, cr0, cr5, cr0, {0}
 328:	03193f01 	tsteq	r9, #1, 30
 32c:	3b0b3a0e 	blcc	2ceb6c <startup-0x1fd31494>
 330:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
 334:	11134919 	tstne	r3, r9, lsl r9
 338:	40061201 	andmi	r1, r6, r1, lsl #4
 33c:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 340:	00001301 	andeq	r1, r0, r1, lsl #6
 344:	03003406 	movweq	r3, #1030	; 0x406
 348:	3b0b3a0e 	blcc	2ceb88 <startup-0x1fd31478>
 34c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 350:	00180213 	andseq	r0, r8, r3, lsl r2
 354:	00340700 	eorseq	r0, r4, r0, lsl #14
 358:	0b3a0803 	bleq	e8236c <startup-0x1f17dc94>
 35c:	0b390b3b 	bleq	e43050 <startup-0x1f1bcfb0>
 360:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 364:	01080000 	mrseq	r0, (UNDEF: 8)
 368:	01134901 	tsteq	r3, r1, lsl #18
 36c:	09000013 	stmdbeq	r0, {r0, r1, r4}
 370:	13490021 	movtne	r0, #36897	; 0x9021
 374:	00000b2f 	andeq	r0, r0, pc, lsr #22
 378:	0b00240a 	bleq	93a8 <startup-0x1fff6c58>
 37c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 380:	0b000008 	bleq	3a8 <startup-0x1ffffc58>
 384:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 388:	0b3a0e03 	bleq	e83b9c <startup-0x1f17c464>
 38c:	0b390b3b 	bleq	e43080 <startup-0x1f1bcf80>
 390:	01111349 	tsteq	r1, r9, asr #6
 394:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 398:	01194297 			; <UNDEFINED> instruction: 0x01194297
 39c:	0c000013 	stceq	0, cr0, [r0], {19}
 3a0:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 3a4:	0b3a0e03 	bleq	e83bb8 <startup-0x1f17c448>
 3a8:	0b390b3b 	bleq	e4309c <startup-0x1f1bcf64>
 3ac:	01111927 	tsteq	r1, r7, lsr #18
 3b0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 3b4:	00194297 	mulseq	r9, r7, r2
 3b8:	11010000 	mrsne	r0, (UNDEF: 1)
 3bc:	130e2501 	movwne	r2, #58625	; 0xe501
 3c0:	1b0e030b 	blne	380ff4 <startup-0x1fc7f00c>
 3c4:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
 3c8:	00171006 	andseq	r1, r7, r6
 3cc:	00240200 	eoreq	r0, r4, r0, lsl #4
 3d0:	0b3e0b0b 	bleq	f83004 <startup-0x1f07cffc>
 3d4:	00000e03 	andeq	r0, r0, r3, lsl #28
 3d8:	3f012e03 	svccc	0x00012e03
 3dc:	3a0e0319 	bcc	381048 <startup-0x1fc7efb8>
 3e0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 3e4:	1119270b 	tstne	r9, fp, lsl #14
 3e8:	40061201 	andmi	r1, r6, r1, lsl #4
 3ec:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 3f0:	00001301 	andeq	r1, r0, r1, lsl #6
 3f4:	03000504 	movweq	r0, #1284	; 0x504
 3f8:	3b0b3a08 	blcc	2cec20 <startup-0x1fd313e0>
 3fc:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 400:	00180213 	andseq	r0, r8, r3, lsl r2
 404:	012e0500 			; <UNDEFINED> instruction: 0x012e0500
 408:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 40c:	0b3b0b3a 	bleq	ec30fc <startup-0x1f13cf04>
 410:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 414:	06120111 			; <UNDEFINED> instruction: 0x06120111
 418:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 41c:	00130119 	andseq	r0, r3, r9, lsl r1
 420:	002e0600 	eoreq	r0, lr, r0, lsl #12
 424:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 428:	0b3b0b3a 	bleq	ec3118 <startup-0x1f13cee8>
 42c:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 430:	06120111 			; <UNDEFINED> instruction: 0x06120111
 434:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 438:	00000019 	andeq	r0, r0, r9, lsl r0
 43c:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
 440:	030b130e 	movweq	r1, #45838	; 0xb30e
 444:	110e1b0e 	tstne	lr, lr, lsl #22
 448:	10061201 	andne	r1, r6, r1, lsl #4
 44c:	02000017 	andeq	r0, r0, #23, 0
 450:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
 454:	0b3b0b3a 	bleq	ec3144 <startup-0x1f13cebc>
 458:	13490b39 	movtne	r0, #39737	; 0x9b39
 45c:	24030000 	strcs	r0, [r3], #-0
 460:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 464:	000e030b 	andeq	r0, lr, fp, lsl #6
 468:	01010400 	tsteq	r1, r0, lsl #8
 46c:	13011349 	movwne	r1, #4937	; 0x1349
 470:	21050000 	mrscs	r0, (UNDEF: 5)
 474:	2f134900 	svccs	0x00134900
 478:	06000005 	streq	r0, [r0], -r5
 47c:	13490035 	movtne	r0, #36917	; 0x9035
 480:	34070000 	strcc	r0, [r7], #-0
 484:	3a0e0300 	bcc	38108c <startup-0x1fc7ef74>
 488:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 48c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 490:	08000018 	stmdaeq	r0, {r3, r4}
 494:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 498:	0b3a0e03 	bleq	e83cac <startup-0x1f17c354>
 49c:	0b390b3b 	bleq	e43190 <startup-0x1f1bce70>
 4a0:	01111927 	tsteq	r1, r7, lsr #18
 4a4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 4a8:	01194296 			; <UNDEFINED> instruction: 0x01194296
 4ac:	09000013 	stmdbeq	r0, {r0, r1, r4}
 4b0:	08030034 	stmdaeq	r3, {r2, r4, r5}
 4b4:	0b3b0b3a 	bleq	ec31a4 <startup-0x1f13ce5c>
 4b8:	13490b39 	movtne	r0, #39737	; 0x9b39
 4bc:	00001802 	andeq	r1, r0, r2, lsl #16
 4c0:	3f012e0a 	svccc	0x00012e0a
 4c4:	3a0e0319 	bcc	381130 <startup-0x1fc7eed0>
 4c8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 4cc:	1119270b 	tstne	r9, fp, lsl #14
 4d0:	40061201 	andmi	r1, r6, r1, lsl #4
 4d4:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 4d8:	00001301 	andeq	r1, r0, r1, lsl #6
 4dc:	0300050b 	movweq	r0, #1291	; 0x50b
 4e0:	3b0b3a08 	blcc	2ced08 <startup-0x1fd312f8>
 4e4:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 4e8:	00180213 	andseq	r0, r8, r3, lsl r2
 4ec:	00240c00 	eoreq	r0, r4, r0, lsl #24
 4f0:	0b3e0b0b 	bleq	f83124 <startup-0x1f07cedc>
 4f4:	00000803 	andeq	r0, r0, r3, lsl #16
 4f8:	3f012e0d 	svccc	0x00012e0d
 4fc:	3a0e0319 	bcc	381168 <startup-0x1fc7ee98>
 500:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 504:	1201110b 	andne	r1, r1, #-1073741822	; 0xc0000002
 508:	97184006 	ldrls	r4, [r8, -r6]
 50c:	13011942 	movwne	r1, #6466	; 0x1942
 510:	0b0e0000 	bleq	380518 <startup-0x1fc7fae8>
 514:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
 518:	0f000006 	svceq	0x00000006
 51c:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 520:	0b3b0b3a 	bleq	ec3210 <startup-0x1f13cdf0>
 524:	13490b39 	movtne	r0, #39737	; 0x9b39
 528:	00001802 	andeq	r1, r0, r2, lsl #16
 52c:	3f012e10 	svccc	0x00012e10
 530:	3a0e0319 	bcc	38119c <startup-0x1fc7ee64>
 534:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 538:	3c13490b 			; <UNDEFINED> instruction: 0x3c13490b
 53c:	11000019 	tstne	r0, r9, lsl r0
 540:	00000018 	andeq	r0, r0, r8, lsl r0
 544:	3f012e12 	svccc	0x00012e12
 548:	3a0e0319 	bcc	3811b4 <startup-0x1fc7ee4c>
 54c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 550:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 554:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 558:	96184006 	ldrls	r4, [r8], -r6
 55c:	13011942 	movwne	r1, #6466	; 0x1942
 560:	2e130000 	cdpcs	0, 1, cr0, cr3, cr0, {0}
 564:	03193f01 	tsteq	r9, #1, 30
 568:	3b0b3a0e 	blcc	2ceda8 <startup-0x1fd31258>
 56c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 570:	01193c13 	tsteq	r9, r3, lsl ip
 574:	14000013 	strne	r0, [r0], #-19	; 0xffffffed
 578:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 57c:	0b3a0e03 	bleq	e83d90 <startup-0x1f17c270>
 580:	0b390b3b 	bleq	e43274 <startup-0x1f1bcd8c>
 584:	01111927 	tsteq	r1, r7, lsr #18
 588:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 58c:	00194296 	mulseq	r9, r6, r2
 590:	11010000 	mrsne	r0, (UNDEF: 1)
 594:	130e2501 	movwne	r2, #58625	; 0xe501
 598:	1b0e030b 	blne	3811cc <startup-0x1fc7ee34>
 59c:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
 5a0:	00171006 	andseq	r1, r7, r6
 5a4:	00240200 	eoreq	r0, r4, r0, lsl #4
 5a8:	0b3e0b0b 	bleq	f831dc <startup-0x1f07ce24>
 5ac:	00000e03 	andeq	r0, r0, r3, lsl #28
 5b0:	0b002403 	bleq	95c4 <startup-0x1fff6a3c>
 5b4:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 5b8:	04000008 	streq	r0, [r0], #-8
 5bc:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
 5c0:	0b3b0b3a 	bleq	ec32b0 <startup-0x1f13cd50>
 5c4:	13490b39 	movtne	r0, #39737	; 0x9b39
 5c8:	0f050000 	svceq	0x00050000
 5cc:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
 5d0:	06000013 			; <UNDEFINED> instruction: 0x06000013
 5d4:	0e030013 	mcreq	0, 0, r0, cr3, cr3, {0}
 5d8:	0000193c 	andeq	r1, r0, ip, lsr r9
 5dc:	03001607 	movweq	r1, #1543	; 0x607
 5e0:	3b0b3a0e 	blcc	2cee20 <startup-0x1fd311e0>
 5e4:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
 5e8:	08000013 	stmdaeq	r0, {r0, r1, r4}
 5ec:	0b0b0117 	bleq	2c0a50 <startup-0x1fd3f5b0>
 5f0:	0b3b0b3a 	bleq	ec32e0 <startup-0x1f13cd20>
 5f4:	13010b39 	movwne	r0, #6969	; 0x1b39
 5f8:	0d090000 	stceq	0, cr0, [r9, #-0]
 5fc:	3a0e0300 	bcc	381204 <startup-0x1fc7edfc>
 600:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 604:	0013490b 	andseq	r4, r3, fp, lsl #18
 608:	01010a00 	tsteq	r1, r0, lsl #20
 60c:	13011349 	movwne	r1, #4937	; 0x1349
 610:	210b0000 	mrscs	r0, (UNDEF: 11)
 614:	2f134900 	svccs	0x00134900
 618:	0c00000b 	stceq	0, cr0, [r0], {11}
 61c:	0b0b0113 	bleq	2c0a70 <startup-0x1fd3f590>
 620:	0b3b0b3a 	bleq	ec3310 <startup-0x1f13ccf0>
 624:	13010b39 	movwne	r0, #6969	; 0x1b39
 628:	0d0d0000 	stceq	0, cr0, [sp, #-0]
 62c:	3a0e0300 	bcc	381234 <startup-0x1fc7edcc>
 630:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 634:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 638:	0e00000b 	cdpeq	0, 0, cr0, cr0, cr11, {0}
 63c:	0b0b000f 	bleq	2c0680 <startup-0x1fd3f980>
 640:	260f0000 	strcs	r0, [pc], -r0
 644:	00134900 	andseq	r4, r3, r0, lsl #18
 648:	01131000 	tsteq	r3, r0
 64c:	0b0b0e03 	bleq	2c3e60 <startup-0x1fd3c1a0>
 650:	0b3b0b3a 	bleq	ec3340 <startup-0x1f13ccc0>
 654:	13010b39 	movwne	r0, #6969	; 0x1b39
 658:	0d110000 	ldceq	0, cr0, [r1, #-0]
 65c:	3a080300 	bcc	201264 <startup-0x1fdfed9c>
 660:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 664:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 668:	1200000b 	andne	r0, r0, #11, 0
 66c:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
 670:	0b3a050b 	bleq	e81aa4 <startup-0x1f17e55c>
 674:	0b390b3b 	bleq	e43368 <startup-0x1f1bcc98>
 678:	00001301 	andeq	r1, r0, r1, lsl #6
 67c:	03000d13 	movweq	r0, #3347	; 0xd13
 680:	3b0b3a0e 	blcc	2ceec0 <startup-0x1fd31140>
 684:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 688:	00053813 	andeq	r3, r5, r3, lsl r8
 68c:	00151400 	andseq	r1, r5, r0, lsl #8
 690:	00001927 	andeq	r1, r0, r7, lsr #18
 694:	27011515 	smladcs	r1, r5, r5, r1
 698:	01134919 	tsteq	r3, r9, lsl r9
 69c:	16000013 			; <UNDEFINED> instruction: 0x16000013
 6a0:	13490005 	movtne	r0, #36869	; 0x9005
 6a4:	13170000 	tstne	r7, #0, 0
 6a8:	0b0e0301 	bleq	3812b4 <startup-0x1fc7ed4c>
 6ac:	3b0b3a05 	blcc	2ceec8 <startup-0x1fd31138>
 6b0:	010b3905 	tsteq	fp, r5, lsl #18
 6b4:	18000013 	stmdane	r0, {r0, r1, r4}
 6b8:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 6bc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 6c0:	13490b39 	movtne	r0, #39737	; 0x9b39
 6c4:	00000b38 	andeq	r0, r0, r8, lsr fp
 6c8:	03000d19 	movweq	r0, #3353	; 0xd19
 6cc:	3b0b3a0e 	blcc	2cef0c <startup-0x1fd310f4>
 6d0:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
 6d4:	00053813 	andeq	r3, r5, r3, lsl r8
 6d8:	01131a00 	tsteq	r3, r0, lsl #20
 6dc:	0b0b0e03 	bleq	2c3ef0 <startup-0x1fd3c110>
 6e0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 6e4:	13010b39 	movwne	r0, #6969	; 0x1b39
 6e8:	131b0000 	tstne	fp, #0, 0
 6ec:	3a0b0b01 	bcc	2c32f8 <startup-0x1fd3cd08>
 6f0:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 6f4:	0013010b 	andseq	r0, r3, fp, lsl #2
 6f8:	01171c00 	tsteq	r7, r0, lsl #24
 6fc:	0b3a0b0b 	bleq	e83330 <startup-0x1f17ccd0>
 700:	0b39053b 	bleq	e41bf4 <startup-0x1f1be40c>
 704:	00001301 	andeq	r1, r0, r1, lsl #6
 708:	03000d1d 	movweq	r0, #3357	; 0xd1d
 70c:	3b0b3a0e 	blcc	2cef4c <startup-0x1fd310b4>
 710:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
 714:	1e000013 	mcrne	0, 0, r0, cr0, cr3, {0}
 718:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
 71c:	00001301 	andeq	r1, r0, r1, lsl #6
 720:	0300341f 	movweq	r3, #1055	; 0x41f
 724:	3b0b3a0e 	blcc	2cef64 <startup-0x1fd3109c>
 728:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
 72c:	3c193f13 	ldccc	15, cr3, [r9], {19}
 730:	20000019 	andcs	r0, r0, r9, lsl r0
 734:	13490021 	movtne	r0, #36897	; 0x9021
 738:	0000052f 	andeq	r0, r0, pc, lsr #10
 73c:	03003421 	movweq	r3, #1057	; 0x421
 740:	3b0b3a0e 	blcc	2cef80 <startup-0x1fd31080>
 744:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 748:	02193f13 	andseq	r3, r9, #76	; 0x4c
 74c:	22000018 	andcs	r0, r0, #24, 0
 750:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 754:	0b3a0e03 	bleq	e83f68 <startup-0x1f17c098>
 758:	0b390b3b 	bleq	e4344c <startup-0x1f1bcbb4>
 75c:	01111349 	tsteq	r1, r9, asr #6
 760:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 764:	00194297 	mulseq	r9, r7, r2
 768:	012e2300 			; <UNDEFINED> instruction: 0x012e2300
 76c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 770:	0b3b0b3a 	bleq	ec3460 <startup-0x1f13cba0>
 774:	13490b39 	movtne	r0, #39737	; 0x9b39
 778:	06120111 			; <UNDEFINED> instruction: 0x06120111
 77c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 780:	00130119 	andseq	r0, r3, r9, lsl r1
 784:	00342400 	eorseq	r2, r4, r0, lsl #8
 788:	0b3a0e03 	bleq	e83f9c <startup-0x1f17c064>
 78c:	0b390b3b 	bleq	e43480 <startup-0x1f1bcb80>
 790:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 794:	2e250000 	cdpcs	0, 2, cr0, cr5, cr0, {0}
 798:	03193f01 	tsteq	r9, #1, 30
 79c:	3b0b3a0e 	blcc	2cefdc <startup-0x1fd31024>
 7a0:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
 7a4:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 7a8:	96184006 	ldrls	r4, [r8], -r6
 7ac:	13011942 	movwne	r1, #6466	; 0x1942
 7b0:	05260000 	streq	r0, [r6, #-0]!
 7b4:	3a0e0300 	bcc	3813bc <startup-0x1fc7ec44>
 7b8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 7bc:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 7c0:	00000018 	andeq	r0, r0, r8, lsl r0

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	0000001c 	andeq	r0, r0, ip, lsl r0
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	000002e6 	andeq	r0, r0, r6, ror #5
	...
  20:	00000024 	andeq	r0, r0, r4, lsr #32
  24:	02cb0002 	sbceq	r0, fp, #2, 0
  28:	00040000 	andeq	r0, r4, r0
  2c:	00000000 	andeq	r0, r0, r0
  30:	200002f8 	strdcs	r0, [r0], -r8
  34:	000005c0 	andeq	r0, r0, r0, asr #11
  38:	20000000 	andcs	r0, r0, r0
  3c:	0000000c 	andeq	r0, r0, ip
	...
  48:	0000001c 	andeq	r0, r0, ip, lsl r0
  4c:	095c0002 	ldmdbeq	ip, {r1}^
  50:	00040000 	andeq	r0, r4, r0
  54:	00000000 	andeq	r0, r0, r0
  58:	200008b8 			; <UNDEFINED> instruction: 0x200008b8
  5c:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
	...
  68:	0000001c 	andeq	r0, r0, ip, lsl r0
  6c:	0a800002 	beq	fe00007c <rear+0xddff7e54>
  70:	00040000 	andeq	r0, r4, r0
  74:	00000000 	andeq	r0, r0, r0
  78:	200009a8 	andcs	r0, r0, r8, lsr #19
  7c:	00000062 	andeq	r0, r0, r2, rrx
	...
  88:	0000001c 	andeq	r0, r0, ip, lsl r0
  8c:	0b220002 	bleq	88009c <startup-0x1f77ff64>
  90:	00040000 	andeq	r0, r4, r0
  94:	00000000 	andeq	r0, r0, r0
  98:	20000a0c 	andcs	r0, r0, ip, lsl #20
  9c:	00000524 	andeq	r0, r0, r4, lsr #10
	...
  a8:	0000001c 	andeq	r0, r0, ip, lsl r0
  ac:	0eae0002 	cdpeq	0, 10, cr0, cr14, cr2, {0}
  b0:	00040000 	andeq	r0, r4, r0
  b4:	00000000 	andeq	r0, r0, r0
  b8:	20000f30 	andcs	r0, r0, r0, lsr pc
  bc:	0000012c 	andeq	r0, r0, ip, lsr #2
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
   4:	005c0003 	subseq	r0, ip, r3
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	2f010000 	svccs	0x00010000
  1c:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
  20:	6f672f73 	svcvs	0x00672f73
  24:	6d756c6c 	ldclvs	12, cr6, [r5, #-432]!	; 0xfffffe50
  28:	636f442f 	cmnvs	pc, #788529152	; 0x2f000000
  2c:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
  30:	6d2f7374 	stcvs	3, cr7, [pc, #-464]!	; fffffe68 <rear+0xdfff7c40>
  34:	616c706f 	cmnvs	ip, pc, rrx
  38:	61726f62 	cmnvs	r2, r2, ror #30
  3c:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
  40:	4d2f7265 	sfmmi	f7, 4, [pc, #-404]!	; fffffeb4 <rear+0xdfff7c8c>
  44:	532d504f 			; <UNDEFINED> instruction: 0x532d504f
  48:	2f6c6570 	svccs	0x006c6570
  4c:	6b616e53 	blvs	185b9a0 <startup-0x1e7a4660>
  50:	61000065 	tstvs	r0, r5, rrx
  54:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
  58:	70736964 	rsbsvc	r6, r3, r4, ror #18
  5c:	2e79616c 	rpwcsez	f6, f1, #4.0
  60:	00010063 	andeq	r0, r1, r3, rrx
  64:	16050000 	strne	r0, [r5], -r0
  68:	10020500 	andne	r0, r2, r0, lsl #10
  6c:	15200000 	strne	r0, [r0, #-0]!
  70:	31300505 	teqcc	r0, r5, lsl #10
  74:	01053131 	tsteq	r5, r1, lsr r1
  78:	3f29052f 	svccc	0x0029052f
  7c:	05671505 	strbeq	r1, [r7, #-1285]!	; 0xfffffafb
  80:	2b05bb01 	blcs	16ec8c <startup-0x1fe91374>
  84:	67150577 			; <UNDEFINED> instruction: 0x67150577
  88:	054a2305 	strbeq	r2, [sl, #-773]	; 0xfffffcfb
  8c:	01058215 	tsteq	r5, r5, lsl r2
  90:	762c055a 			; <UNDEFINED> instruction: 0x762c055a
  94:	3d670505 	cfstr64cc	mvdx0, [r7, #-20]!	; 0xffffffec
  98:	5901053d 	stmdbpl	r1, {r0, r2, r3, r4, r5, r8, sl}
  9c:	054c2a05 	strbeq	r2, [ip, #-2565]	; 0xfffff5fb
  a0:	3d3d6705 	ldccc	7, cr6, [sp, #-20]!	; 0xffffffec
  a4:	05590105 	ldrbeq	r0, [r9, #-261]	; 0xfffffefb
  a8:	05054c30 	streq	r4, [r5, #-3120]	; 0xfffff3d0
  ac:	16053d67 	strne	r3, [r5], -r7, ror #26
  b0:	3d050520 	cfstr32cc	mvfx0, [r5, #-128]	; 0xffffff80
  b4:	3d01052f 	cfstr32cc	mvfx0, [r1, #-188]	; 0xffffff44
  b8:	05682a05 	strbeq	r2, [r8, #-2565]!	; 0xfffff5fb
  bc:	2f3d3d05 	svccs	0x003d3d05
  c0:	052f1305 	streq	r1, [pc, #-773]!	; fffffdc3 <rear+0xdfff7b9b>
  c4:	0505200a 	streq	r2, [r5, #-10]
  c8:	3d0c053d 	cfstr32cc	mvfx0, [ip, #-244]	; 0xffffff0c
  cc:	052f0105 	streq	r0, [pc, #-261]!	; ffffffcf <rear+0xdfff7da7>
  d0:	05057626 	streq	r7, [r5, #-1574]	; 0xfffff9da
  d4:	201a053d 	andscs	r0, sl, sp, lsr r5
  d8:	3d2f0505 	cfstr32cc	mvfx0, [pc, #-20]!	; cc <startup-0x1fffff34>
  dc:	053d1405 	ldreq	r1, [sp, #-1029]!	; 0xfffffbfb
  e0:	1a055905 	bne	1564fc <startup-0x1fea9b04>
  e4:	2f0c0520 	svccs	0x000c0520
  e8:	052f0105 	streq	r0, [pc, #-261]!	; ffffffeb <rear+0xdfff7dc3>
  ec:	05058424 	streq	r8, [r5, #-1060]	; 0xfffffbdc
  f0:	201a053d 	andscs	r0, sl, sp, lsr r5
  f4:	3d2f0505 	cfstr32cc	mvfx0, [pc, #-20]!	; e8 <startup-0x1fffff18>
  f8:	053d1405 	ldreq	r1, [sp, #-1029]!	; 0xfffffbfb
  fc:	1a055905 	bne	156518 <startup-0x1fea9ae8>
 100:	2f0c0520 	svccs	0x000c0520
 104:	052f0105 	streq	r0, [pc, #-261]!	; 7 <startup-0x1ffffff9>
 108:	0a058415 	beq	161164 <startup-0x1fe9ee9c>
 10c:	000c052f 	andeq	r0, ip, pc, lsr #10
 110:	20010402 	andcs	r0, r1, r2, lsl #8
 114:	02002005 	andeq	r2, r0, #5, 0
 118:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 11c:	0402000a 	streq	r0, [r2], #-10
 120:	05053c01 	streq	r3, [r5, #-3073]	; 0xfffff3ff
 124:	053d3d2f 	ldreq	r3, [sp, #-3375]!	; 0xfffff2d1
 128:	13053d01 	movwne	r3, #23809	; 0x5d01
 12c:	2f0a053e 	svccs	0x000a053e
 130:	02000c05 	andeq	r0, r0, #1280	; 0x500
 134:	05200104 	streq	r0, [r0, #-260]!	; 0xfffffefc
 138:	04020020 	streq	r0, [r2], #-32	; 0xffffffe0
 13c:	0a053c01 	beq	14f148 <startup-0x1feb0eb8>
 140:	01040200 	mrseq	r0, R12_usr
 144:	2f05053c 	svccs	0x0005053c
 148:	01053d3d 	tsteq	r5, sp, lsr sp
 14c:	3e17053d 	mrccc	5, 0, r0, cr7, cr13, {1}
 150:	052f0a05 	streq	r0, [pc, #-2565]!	; fffff753 <rear+0xdfff752b>
 154:	0402000c 	streq	r0, [r2], #-12
 158:	20052001 	andcs	r2, r5, r1
 15c:	01040200 	mrseq	r0, R12_usr
 160:	000a053c 	andeq	r0, sl, ip, lsr r5
 164:	3c010402 	cfstrscc	mvf0, [r1], {2}
 168:	3d2f0505 	cfstr32cc	mvfx0, [pc, #-20]!	; 15c <startup-0x1ffffea4>
 16c:	3d01053d 	cfstr32cc	mvfx0, [r1, #-244]	; 0xffffff0c
 170:	053e1605 	ldreq	r1, [lr, #-1541]!	; 0xfffff9fb
 174:	0c052f0a 	stceq	15, cr2, [r5], {10}
 178:	01040200 	mrseq	r0, R12_usr
 17c:	00200520 	eoreq	r0, r0, r0, lsr #10
 180:	3c010402 	cfstrscc	mvf0, [r1], {2}
 184:	02000a05 	andeq	r0, r0, #20480	; 0x5000
 188:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 18c:	3d3d2f05 	ldccc	15, cr2, [sp, #-20]!	; 0xffffffec
 190:	053d0105 	ldreq	r0, [sp, #-261]!	; 0xfffffefb
 194:	05053e27 	streq	r3, [r5, #-3623]	; 0xfffff1d9
 198:	05593d68 	ldrbeq	r3, [r9, #-3432]	; 0xfffff298
 19c:	20053d01 	andcs	r3, r5, r1, lsl #26
 1a0:	5a07054c 	bpl	1c16d8 <startup-0x1fe3e928>
 1a4:	053d1805 	ldreq	r1, [sp, #-2053]!	; 0xfffff7fb
 1a8:	13052e11 	movwne	r2, #24081	; 0x5e11
 1ac:	2e110559 	mrccs	5, 0, r0, cr1, cr9, {2}
 1b0:	9f4c0505 	svcls	0x004c0505
 1b4:	023d0105 	eorseq	r0, sp, #1073741825	; 0x40000001
 1b8:	01010004 	tsteq	r1, r4
 1bc:	0000044b 	andeq	r0, r0, fp, asr #8
 1c0:	008d0003 	addeq	r0, sp, r3
 1c4:	01020000 	mrseq	r0, (UNDEF: 2)
 1c8:	000d0efb 	strdeq	r0, [sp], -fp
 1cc:	01010101 	tsteq	r1, r1, lsl #2
 1d0:	01000000 	mrseq	r0, (UNDEF: 0)
 1d4:	2f010000 	svccs	0x00010000
 1d8:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
 1dc:	6f672f73 	svcvs	0x00672f73
 1e0:	6d756c6c 	ldclvs	12, cr6, [r5, #-432]!	; 0xfffffe50
 1e4:	636f442f 	cmnvs	pc, #788529152	; 0x2f000000
 1e8:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
 1ec:	6d2f7374 	stcvs	3, cr7, [pc, #-464]!	; 24 <startup-0x1fffffdc>
 1f0:	616c706f 	cmnvs	ip, pc, rrx
 1f4:	61726f62 	cmnvs	r2, r2, ror #30
 1f8:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 1fc:	4d2f7265 	sfmmi	f7, 4, [pc, #-404]!	; 70 <startup-0x1fffff90>
 200:	532d504f 			; <UNDEFINED> instruction: 0x532d504f
 204:	2f6c6570 	svccs	0x006c6570
 208:	6b616e53 	blvs	185bb5c <startup-0x1e7a44a4>
 20c:	73000065 	movwvc	r0, #101	; 0x65
 210:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
 214:	632e7075 			; <UNDEFINED> instruction: 0x632e7075
 218:	00000100 	andeq	r0, r0, r0, lsl #2
 21c:	6d6f6567 	cfstr64vs	mvdx6, [pc, #-412]!	; 88 <startup-0x1fffff78>
 220:	69727465 	ldmdbvs	r2!, {r0, r2, r5, r6, sl, ip, sp, lr}^
 224:	6a626f63 	bvs	189bfb8 <startup-0x1e764048>
 228:	2e746365 	cdpcs	3, 7, cr6, cr4, cr5, {3}
 22c:	00010068 	andeq	r0, r1, r8, rrx
 230:	61726700 	cmnvs	r2, r0, lsl #14
 234:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 238:	70736964 	rsbsvc	r6, r3, r4, ror #18
 23c:	2e79616c 	rpwcsez	f6, f1, #4.0
 240:	00010068 	andeq	r0, r1, r8, rrx
 244:	616d6900 	cmnvs	sp, r0, lsl #18
 248:	782e6567 	stmdavc	lr!, {r0, r1, r2, r5, r6, r8, sl, sp, lr}
 24c:	01006d62 	tsteq	r0, r2, ror #26
 250:	05000000 	streq	r0, [r0, #-0]
 254:	02050001 	andeq	r0, r5, #1, 0
 258:	20000000 	andcs	r0, r0, r0
 25c:	13011803 	movwne	r1, #6147	; 0x1803
 260:	212f2121 			; <UNDEFINED> instruction: 0x212f2121
 264:	01000302 	tsteq	r0, r2, lsl #6
 268:	00390501 	eorseq	r0, r9, r1, lsl #10
 26c:	02f80205 	rscseq	r0, r8, #1342177280	; 0x50000000
 270:	1f032000 	svcne	0x00032000
 274:	670d0501 	strvs	r0, [sp, -r1, lsl #10]
 278:	3d01053d 	cfstr32cc	mvfx0, [r1, #-244]	; 0xffffff0c
 27c:	054c1c05 	strbeq	r1, [ip, #-3077]	; 0xfffff3fb
 280:	05054b0e 	streq	r4, [r5, #-2830]	; 0xfffff4f2
 284:	0010052e 	andseq	r0, r0, lr, lsr #10
 288:	21030402 	tstcs	r3, r2, lsl #8
 28c:	02001c05 	andeq	r1, r0, #1280	; 0x500
 290:	052e0304 	streq	r0, [lr, #-772]!	; 0xfffffcfc
 294:	04020020 	streq	r0, [r2], #-32	; 0xffffffe0
 298:	1e057403 	cdpne	4, 0, cr7, cr5, cr3, {0}
 29c:	03040200 	movweq	r0, #16896	; 0x4200
 2a0:	0009052e 	andeq	r0, r9, lr, lsr #10
 2a4:	20030402 	andcs	r0, r3, r2, lsl #8
 2a8:	02002805 	andeq	r2, r0, #327680	; 0x50000
 2ac:	05200304 	streq	r0, [r0, #-772]!	; 0xfffffcfc
 2b0:	04020034 	streq	r0, [r2], #-52	; 0xffffffcc
 2b4:	38052e03 	stmdacc	r5, {r0, r1, r9, sl, fp, sp}
 2b8:	03040200 	movweq	r0, #16896	; 0x4200
 2bc:	00360574 	eorseq	r0, r6, r4, ror r5
 2c0:	2e030402 	cdpcs	4, 0, cr0, cr3, cr2, {0}
 2c4:	02000905 	andeq	r0, r0, #81920	; 0x14000
 2c8:	05200304 	streq	r0, [r0, #-772]!	; 0xfffffcfc
 2cc:	0402002b 	streq	r0, [r2], #-43	; 0xffffffd5
 2d0:	18053b03 	stmdane	r5, {r0, r1, r8, r9, fp, ip, sp}
 2d4:	01040200 	mrseq	r0, R12_usr
 2d8:	001d053c 	andseq	r0, sp, ip, lsr r5
 2dc:	2e010402 	cdpcs	4, 0, cr0, cr1, cr2, {0}
 2e0:	02000505 	andeq	r0, r0, #20971520	; 0x1400000
 2e4:	05200104 	streq	r0, [r0, #-260]!	; 0xfffffefc
 2e8:	1d053f01 	stcne	15, cr3, [r5, #-4]
 2ec:	4b0e055a 	blmi	38185c <startup-0x1fc7e7a4>
 2f0:	052e0505 	streq	r0, [lr, #-1285]!	; 0xfffffafb
 2f4:	04020010 	streq	r0, [r2], #-16
 2f8:	1c052103 	stfnes	f2, [r5], {3}
 2fc:	03040200 	movweq	r0, #16896	; 0x4200
 300:	0020052e 	eoreq	r0, r0, lr, lsr #10
 304:	74030402 	strvc	r0, [r3], #-1026	; 0xfffffbfe
 308:	02001e05 	andeq	r1, r0, #80	; 0x50
 30c:	052e0304 	streq	r0, [lr, #-772]!	; 0xfffffcfc
 310:	04020009 	streq	r0, [r2], #-9
 314:	28052003 	stmdacs	r5, {r0, r1, sp}
 318:	03040200 	movweq	r0, #16896	; 0x4200
 31c:	00340520 	eorseq	r0, r4, r0, lsr #10
 320:	2e030402 	cdpcs	4, 0, cr0, cr3, cr2, {0}
 324:	02003805 	andeq	r3, r0, #327680	; 0x50000
 328:	05740304 	ldrbeq	r0, [r4, #-772]!	; 0xfffffcfc
 32c:	04020036 	streq	r0, [r2], #-54	; 0xffffffca
 330:	09052e03 	stmdbeq	r5, {r0, r1, r9, sl, fp, sp}
 334:	03040200 	movweq	r0, #16896	; 0x4200
 338:	002d0520 	eoreq	r0, sp, r0, lsr #10
 33c:	3b030402 	blcc	c134c <startup-0x1ff3ecb4>
 340:	02001a05 	andeq	r1, r0, #20480	; 0x5000
 344:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 348:	0402001f 	streq	r0, [r2], #-31	; 0xffffffe1
 34c:	05052e01 	streq	r2, [r5, #-3585]	; 0xfffff1ff
 350:	01040200 	mrseq	r0, R12_usr
 354:	3f010520 	svccc	0x00010520
 358:	055a1c05 	ldrbeq	r1, [sl, #-3077]	; 0xfffff3fb
 35c:	1a054d10 	bne	1537a4 <startup-0x1feac85c>
 360:	2e17052e 	cfmul64cs	mvdx0, mvdx7, mvdx14
 364:	05200d05 	streq	r0, [r0, #-3333]!	; 0xfffff2fb
 368:	1a052f10 	bne	14bfb0 <startup-0x1feb4050>
 36c:	2e17052e 	cfmul64cs	mvdx0, mvdx7, mvdx14
 370:	05200d05 	streq	r0, [r0, #-3333]!	; 0xfffff2fb
 374:	1205320a 	andne	r3, r5, #-1610612736	; 0xa0000000
 378:	2e10052e 	cfmul64cs	mvdx0, mvdx0, mvdx14
 37c:	05200705 	streq	r0, [r0, #-1797]!	; 0xfffff8fb
 380:	05592f11 	ldrbeq	r2, [r9, #-3857]	; 0xfffff0ef
 384:	12053f0a 	andne	r3, r5, #10, 30	; 0x28
 388:	2e10052e 	cfmul64cs	mvdx0, mvdx0, mvdx14
 38c:	05200705 	streq	r0, [r0, #-1797]!	; 0xfffff8fb
 390:	10052f11 	andne	r2, r5, r1, lsl pc
 394:	3f0a0559 	svccc	0x000a0559
 398:	052e1205 	streq	r1, [lr, #-517]!	; 0xfffffdfb
 39c:	07052e10 	smladeq	r5, r0, lr, r2
 3a0:	2f110520 	svccs	0x00110520
 3a4:	3f0a0559 	svccc	0x000a0559
 3a8:	052e1205 	streq	r1, [lr, #-517]!	; 0xfffffdfb
 3ac:	07052e10 	smladeq	r5, r0, lr, r2
 3b0:	2f110520 	svccs	0x00110520
 3b4:	3e050559 	cfrshl32cc	mvfx5, mvfx9, r0
 3b8:	054b0105 	strbeq	r0, [fp, #-261]	; 0xfffffefb
 3bc:	00c5034f 	sbceq	r0, r5, pc, asr #6
 3c0:	750e054a 	strvc	r0, [lr, #-1354]	; 0xfffffab6
 3c4:	054b0f05 	strbeq	r0, [fp, #-3845]	; 0xfffff0fb
 3c8:	01054b0d 	tsteq	r5, sp, lsl #22
 3cc:	4c2a053d 	cfstr32mi	mvfx0, [sl], #-244	; 0xffffff0c
 3d0:	05690905 	strbeq	r0, [r9, #-2309]!	; 0xfffff6fb
 3d4:	07052e15 	smladeq	r5, r5, lr, r2
 3d8:	2f1b053c 	svccs	0x001b053c
 3dc:	052e2205 	streq	r2, [lr, #-517]!	; 0xfffffdfb
 3e0:	1b052e18 	blne	14bc48 <startup-0x1feb43b8>
 3e4:	2e220530 	mcrcs	5, 1, r0, cr2, cr0, {1}
 3e8:	052e1805 	streq	r1, [lr, #-2053]!	; 0xfffff7fb
 3ec:	0505310c 	streq	r3, [r5, #-268]	; 0xfffffef4
 3f0:	2110052e 	tstcs	r0, lr, lsr #10
 3f4:	052e0905 	streq	r0, [lr, #-2309]!	; 0xfffff6fb
 3f8:	2b052123 	blcs	14888c <startup-0x1feb7774>
 3fc:	3c3b052e 	cfldr32cc	mvfx0, [fp], #-184	; 0xffffff48
 400:	052e2905 	streq	r2, [lr, #-2309]!	; 0xfffff6fb
 404:	1405201b 	strne	r2, [r5], #-27	; 0xffffffe5
 408:	2e0d054b 	cfsh32cs	mvfx0, mvfx13, #43
 40c:	05211505 	streq	r1, [r1, #-1285]!	; 0xfffffafb
 410:	1d058214 	sfmne	f0, 1, [r5, #-80]	; 0xffffffb0
 414:	2e210521 	cfsh64cs	mvdx0, mvdx1, #17
 418:	052e2505 	streq	r2, [lr, #-1285]!	; 0xfffffafb
 41c:	15052e29 	strne	r2, [r5, #-3625]	; 0xfffff1d7
 420:	20300520 	eorscs	r0, r0, r0, lsr #10
 424:	053c3405 	ldreq	r3, [ip, #-1029]!	; 0xfffffbfb
 428:	21052015 	tstcs	r5, r5, lsl r0
 42c:	02040200 	andeq	r0, r4, #0, 4
 430:	000d053a 	andeq	r0, sp, sl, lsr r5
 434:	3c010402 	cfstrscc	mvf0, [r1], {2}
 438:	02002a05 	andeq	r2, r0, #20480	; 0x5000
 43c:	053a0204 	ldreq	r0, [sl, #-516]!	; 0xfffffdfc
 440:	04020009 	streq	r0, [r2], #-9
 444:	21053c01 	tstcs	r5, r1, lsl #24
 448:	02040200 	andeq	r0, r4, #0, 4
 44c:	00160549 	andseq	r0, r6, r9, asr #10
 450:	3c010402 	cfstrscc	mvf0, [r1], {2}
 454:	02000505 	andeq	r0, r0, #20971520	; 0x1400000
 458:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 45c:	3c090301 	stccc	3, cr0, [r9], {1}
 460:	055a2705 	ldrbeq	r2, [sl, #-1797]	; 0xfffff8fb
 464:	05055906 	streq	r5, [r5, #-2310]	; 0xfffff6fa
 468:	3d0d052e 	cfstr32cc	mvfx0, [sp, #-184]	; 0xffffff48
 46c:	052e0505 	streq	r0, [lr, #-1285]!	; 0xfffffafb
 470:	04020009 	streq	r0, [r2], #-9
 474:	0b052103 	bleq	148888 <startup-0x1feb7778>
 478:	03040200 	movweq	r0, #16896	; 0x4200
 47c:	00230559 	eoreq	r0, r3, r9, asr r5
 480:	3a030402 	bcc	c1490 <startup-0x1ff3eb70>
 484:	02001805 	andeq	r1, r0, #327680	; 0x50000
 488:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 48c:	0402001e 	streq	r0, [r2], #-30	; 0xffffffe2
 490:	05053c01 	streq	r3, [r5, #-3073]	; 0xfffff3ff
 494:	01040200 	mrseq	r0, R12_usr
 498:	40010520 	andmi	r0, r1, r0, lsr #10
 49c:	055c1405 	ldrbeq	r1, [ip, #-1029]	; 0xfffffbfb
 4a0:	13053505 	movwne	r3, #21765	; 0x5505
 4a4:	2f050520 	svccs	0x00050520
 4a8:	05201405 	streq	r1, [r0, #-1029]!	; 0xfffffbfb
 4ac:	15052f05 	strne	r2, [r5, #-3845]	; 0xfffff0fb
 4b0:	30050520 	andcc	r0, r5, r0, lsr #10
 4b4:	05201305 	streq	r1, [r0, #-773]!	; 0xfffffcfb
 4b8:	13052f05 	movwne	r2, #24325	; 0x5f05
 4bc:	3d050520 	cfstr32cc	mvfx0, [r5, #-128]	; 0xffffff80
 4c0:	2f201305 	svccs	0x00201305
 4c4:	05750505 	ldrbeq	r0, [r5, #-1285]!	; 0xfffffafb
 4c8:	0c052014 	stceq	0, cr2, [r5], {20}
 4cc:	3d010530 	cfstr32cc	mvfx0, [r1, #-192]	; 0xffffff40
 4d0:	30083205 	andcc	r3, r8, r5, lsl #4
 4d4:	3d670d05 	stclcc	13, cr0, [r7, #-20]!	; 0xffffffec
 4d8:	053d0605 	ldreq	r0, [sp, #-1541]!	; 0xfffff9fb
 4dc:	0e052e05 	cdpeq	14, 0, cr2, cr5, cr5, {0}
 4e0:	2e05053d 	mcrcs	5, 0, r0, cr5, cr13, {1}
 4e4:	02000c05 	andeq	r0, r0, #1280	; 0x500
 4e8:	05210304 	streq	r0, [r1, #-772]!	; 0xfffffcfc
 4ec:	04020018 	streq	r0, [r2], #-24	; 0xffffffe8
 4f0:	0a053d03 	beq	14f904 <startup-0x1feb06fc>
 4f4:	03040200 	movweq	r0, #16896	; 0x4200
 4f8:	001b052e 	andseq	r0, fp, lr, lsr #10
 4fc:	2e030402 	cdpcs	4, 0, cr0, cr3, cr2, {0}
 500:	02001405 	andeq	r1, r0, #83886080	; 0x5000000
 504:	05200304 	streq	r0, [r0, #-772]!	; 0xfffffcfc
 508:	0402000a 	streq	r0, [r2], #-10
 50c:	14052103 	strne	r2, [r5], #-259	; 0xfffffefd
 510:	03040200 	movweq	r0, #16896	; 0x4200
 514:	0009052e 	andeq	r0, r9, lr, lsr #10
 518:	2f030402 	svccs	0x00030402
 51c:	03040200 	movweq	r0, #16896	; 0x4200
 520:	000b0559 	andeq	r0, fp, r9, asr r5
 524:	59030402 	stmdbpl	r3, {r1, sl}
 528:	03040200 	movweq	r0, #16896	; 0x4200
 52c:	001d053d 	andseq	r0, sp, sp, lsr r5
 530:	03030402 	movweq	r0, #13314	; 0x3402
 534:	05053c79 	streq	r3, [r5, #-3193]	; 0xfffff387
 538:	01040200 	mrseq	r0, R12_usr
 53c:	0301053c 	movweq	r0, #5436	; 0x153c
 540:	1d053c09 	stcne	12, cr3, [r5, #-36]	; 0xffffffdc
 544:	4b09055a 	blmi	241ab4 <startup-0x1fdbe54c>
 548:	3301052f 	movwcc	r0, #5423	; 0x152f
 54c:	054c2105 	strbeq	r2, [ip, #-261]	; 0xfffffefb
 550:	13056709 	movwne	r6, #22281	; 0x5709
 554:	5b0d054a 	blpl	341a84 <startup-0x1fcbe57c>
 558:	054a2005 	strbeq	r2, [sl, #-5]
 55c:	052f4d05 	streq	r4, [pc, #-3333]!	; fffff85f <rear+0xdfff7637>
 560:	0b05300a 	bleq	14c590 <startup-0x1feb3a70>
 564:	05200a03 	streq	r0, [r0, #-2563]!	; 0xfffff5fd
 568:	0591670d 	ldreq	r6, [r1, #1805]	; 0x70d
 56c:	0e055915 			; <UNDEFINED> instruction: 0x0e055915
 570:	210d053f 	tstcs	sp, pc, lsr r5
 574:	1a059232 	bne	164e44 <startup-0x1fe9b1bc>
 578:	670d0531 	smladxvs	sp, r1, r5, r0
 57c:	05911d05 	ldreq	r1, [r1, #3333]	; 0xd05
 580:	1c059011 	stcne	0, cr9, [r5], {17}
 584:	90110521 	andsls	r0, r1, r1, lsr #10
 588:	05211a05 	streq	r1, [r1, #-2565]!	; 0xfffff5fb
 58c:	1c059011 	stcne	0, cr9, [r5], {17}
 590:	90110521 	andsls	r0, r1, r1, lsr #10
 594:	05212105 	streq	r2, [r1, #-261]!	; 0xfffffefb
 598:	11054a2e 	tstne	r5, lr, lsr #20
 59c:	21270558 			; <UNDEFINED> instruction: 0x21270558
 5a0:	05581105 	ldrbeq	r1, [r8, #-261]	; 0xfffffefb
 5a4:	206f030e 	rsbcs	r0, pc, lr, lsl #6
 5a8:	70030a05 	andvc	r0, r3, r5, lsl #20
 5ac:	03010574 	movweq	r0, #5492	; 0x1574
 5b0:	2a055825 	bcs	15664c <startup-0x1fea99b4>
 5b4:	05059208 	streq	r9, [r5, #-520]	; 0xfffffdf8
 5b8:	03010567 	movweq	r0, #5479	; 0x1567
 5bc:	0520081c 	streq	r0, [r0, #-2076]!	; 0xfffff7e4
 5c0:	20660311 	rsbcs	r0, r6, r1, lsl r3
 5c4:	052e0f05 	streq	r0, [lr, #-3845]!	; 0xfffff0fb
 5c8:	11052f12 	tstne	r5, r2, lsl pc
 5cc:	500d052e 	andpl	r0, sp, lr, lsr #10
 5d0:	05221105 	streq	r1, [r2, #-261]!	; 0xfffffefb
 5d4:	12052e0f 	andne	r2, r5, #240	; 0xf0
 5d8:	2e11052f 	cfmul64cs	mvdx0, mvdx1, mvdx15
 5dc:	055b0d05 	ldrbeq	r0, [fp, #-3333]	; 0xfffff2fb
 5e0:	0f052211 	svceq	0x00052211
 5e4:	2f12052e 	svccs	0x0012052e
 5e8:	052e1105 	streq	r1, [lr, #-261]!	; 0xfffffefb
 5ec:	11055a0d 	tstne	r5, sp, lsl #20
 5f0:	2e0f0522 	cfsh32cs	mvfx0, mvfx15, #18
 5f4:	052f1205 	streq	r1, [pc, #-517]!	; 3f7 <startup-0x1ffffc09>
 5f8:	0d052e11 	stceq	14, cr2, [r5, #-68]	; 0xffffffbc
 5fc:	206f034d 	rsbcs	r0, pc, sp, asr #6
 600:	05343334 	ldreq	r3, [r4, #-820]!	; 0xfffffccc
 604:	04022201 	streq	r2, [r2], #-513	; 0xfffffdff
 608:	e7010100 	str	r0, [r1, -r0, lsl #2]
 60c:	03000000 	movweq	r0, #0
 610:	00005400 	andeq	r5, r0, r0, lsl #8
 614:	fb010200 	blx	40e1e <startup-0x1ffbf1e2>
 618:	01000d0e 	tsteq	r0, lr, lsl #26
 61c:	00010101 	andeq	r0, r1, r1, lsl #2
 620:	00010000 	andeq	r0, r1, r0
 624:	552f0100 	strpl	r0, [pc, #-256]!	; 52c <startup-0x1ffffad4>
 628:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 62c:	6c6f672f 	stclvs	7, cr6, [pc], #-188	; 578 <startup-0x1ffffa88>
 630:	2f6d756c 	svccs	0x006d756c
 634:	75636f44 	strbvc	r6, [r3, #-3908]!	; 0xfffff0bc
 638:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
 63c:	6f6d2f73 	svcvs	0x006d2f73
 640:	62616c70 	rsbvs	r6, r1, #112, 24	; 0x7000
 644:	7461726f 	strbtvc	r7, [r1], #-623	; 0xfffffd91
 648:	656e6f69 	strbvs	r6, [lr, #-3945]!	; 0xfffff097
 64c:	4f4d2f72 	svcmi	0x004d2f72
 650:	70532d50 	subsvc	r2, r3, r0, asr sp
 654:	532f6c65 			; <UNDEFINED> instruction: 0x532f6c65
 658:	656b616e 	strbvs	r6, [fp, #-366]!	; 0xfffffe92
 65c:	656b0000 	strbvs	r0, [fp, #-0]!
 660:	632e6279 			; <UNDEFINED> instruction: 0x632e6279
 664:	00000100 	andeq	r0, r0, r0, lsl #2
 668:	00190500 	andseq	r0, r9, r0, lsl #10
 66c:	08b80205 	ldmeq	r8!, {r0, r2, r9}
 670:	05152000 	ldreq	r2, [r5, #-0]
 674:	1a054b1f 	bne	1532f8 <startup-0x1feacd08>
 678:	2e05052e 	cfsh32cs	mvfx0, mvfx5, #30
 67c:	05201605 	streq	r1, [r0, #-1541]!	; 0xfffff9fb
 680:	13052f01 	movwne	r2, #24321	; 0x5f01
 684:	3e120576 	mrccc	5, 0, r0, cr2, cr6, {3}
 688:	05200a05 	streq	r0, [r0, #-2565]!	; 0xfffff5fb
 68c:	05053d0b 	streq	r3, [r5, #-3339]	; 0xfffff2f5
 690:	210d052e 	tstcs	sp, lr, lsr #10
 694:	05740c05 	ldrbeq	r0, [r4, #-3077]!	; 0xfffff3fb
 698:	17052114 	smladne	r5, r4, r1, r2
 69c:	02040200 	andeq	r0, r4, #0, 4
 6a0:	0005052c 	andeq	r0, r5, ip, lsr #10
 6a4:	3c010402 	cfstrscc	mvf0, [r1], {2}
 6a8:	05410c05 	strbeq	r0, [r1, #-3077]	; 0xfffff3fb
 6ac:	19052f01 	stmdbne	r5, {r0, r8, r9, sl, fp, sp}
 6b0:	3d130569 	cfldr32cc	mvfx0, [r3, #-420]	; 0xfffffe5c
 6b4:	6a0e0575 	bvs	381c90 <startup-0x1fc7e370>
 6b8:	052e0505 	streq	r0, [lr, #-1285]!	; 0xfffffafb
 6bc:	13052109 	movwne	r2, #20745	; 0x5109
 6c0:	4b0c054b 	blmi	301bf4 <startup-0x1fcfe40c>
 6c4:	053d2605 	ldreq	r2, [sp, #-1541]!	; 0xfffff9fb
 6c8:	1a052e22 	bne	14bf58 <startup-0x1feb40a8>
 6cc:	001f052e 	andseq	r0, pc, lr, lsr #10
 6d0:	38020402 	stmdacc	r2, {r1, sl}
 6d4:	02000505 	andeq	r0, r0, #20971520	; 0x1400000
 6d8:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 6dc:	0105430c 	tsteq	r5, ip, lsl #6
 6e0:	01040200 	mrseq	r0, R12_usr
 6e4:	841e0521 	ldrhi	r0, [lr], #-1313	; 0xfffffadf
 6e8:	05680505 	strbeq	r0, [r8, #-1285]!	; 0xfffffafb
 6ec:	01052015 	tsteq	r5, r5, lsl r0
 6f0:	0006023e 	andeq	r0, r6, lr, lsr r2
 6f4:	009c0101 	addseq	r0, ip, r1, lsl #2
 6f8:	00030000 	andeq	r0, r3, r0
 6fc:	00000055 	andeq	r0, r0, r5, asr r0
 700:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
 704:	0101000d 	tsteq	r1, sp
 708:	00000101 	andeq	r0, r0, r1, lsl #2
 70c:	00000100 	andeq	r0, r0, r0, lsl #2
 710:	73552f01 	cmpvc	r5, #1, 30
 714:	2f737265 	svccs	0x00737265
 718:	6c6c6f67 	stclvs	15, cr6, [ip], #-412	; 0xfffffe64
 71c:	442f6d75 	strtmi	r6, [pc], #-3445	; 724 <startup-0x1ffff8dc>
 720:	6d75636f 	ldclvs	3, cr6, [r5, #-444]!	; 0xfffffe44
 724:	73746e65 	cmnvc	r4, #1616	; 0x650
 728:	706f6d2f 	rsbvc	r6, pc, pc, lsr #26
 72c:	6f62616c 	svcvs	0x0062616c
 730:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
 734:	72656e6f 	rsbvc	r6, r5, #1776	; 0x6f0
 738:	504f4d2f 	subpl	r4, pc, pc, lsr #26
 73c:	6570532d 	ldrbvs	r5, [r0, #-813]!	; 0xfffffcd3
 740:	6e532f6c 	cdpvs	15, 5, cr2, cr3, cr12, {3}
 744:	00656b61 	rsbeq	r6, r5, r1, ror #22
 748:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 74c:	632e7961 			; <UNDEFINED> instruction: 0x632e7961
 750:	00000100 	andeq	r0, r0, r0, lsl #2
 754:	00190500 	andseq	r0, r9, r0, lsl #10
 758:	09a80205 	stmibeq	r8!, {r0, r2, r9}
 75c:	05162000 	ldreq	r2, [r6, #-0]
 760:	01053009 	tsteq	r5, r9
 764:	05200903 	streq	r0, [r0, #-2307]!	; 0xfffff6fd
 768:	09053017 	stmdbeq	r5, {r0, r1, r2, r4, ip, sp}
 76c:	24010530 	strcs	r0, [r1], #-1328	; 0xfffffad0
 770:	05302205 	ldreq	r2, [r0, #-517]!	; 0xfffffdfb
 774:	01054c09 	tsteq	r5, r9, lsl #24
 778:	3e220528 	cfsh64cc	mvdx0, mvdx2, #24
 77c:	054c0c05 	strbeq	r0, [ip, #-3077]	; 0xfffff3fb
 780:	0a05830b 	beq	1613b4 <startup-0x1fe9ec4c>
 784:	2109053f 	tstcs	r9, pc, lsr r5
 788:	05570d05 	ldrbeq	r0, [r7, #-3333]	; 0xfffff2fb
 78c:	01053c0a 	tsteq	r5, sl, lsl #24
 790:	00050231 	andeq	r0, r5, r1, lsr r2
 794:	02c80101 	sbceq	r0, r8, #1073741824	; 0x40000000
 798:	00030000 	andeq	r0, r3, r0
 79c:	00000081 	andeq	r0, r0, r1, lsl #1
 7a0:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
 7a4:	0101000d 	tsteq	r1, sp
 7a8:	00000101 	andeq	r0, r0, r1, lsl #2
 7ac:	00000100 	andeq	r0, r0, r0, lsl #2
 7b0:	73552f01 	cmpvc	r5, #1, 30
 7b4:	2f737265 	svccs	0x00737265
 7b8:	6c6c6f67 	stclvs	15, cr6, [ip], #-412	; 0xfffffe64
 7bc:	442f6d75 	strtmi	r6, [pc], #-3445	; 7c4 <startup-0x1ffff83c>
 7c0:	6d75636f 	ldclvs	3, cr6, [r5, #-444]!	; 0xfffffe44
 7c4:	73746e65 	cmnvc	r4, #1616	; 0x650
 7c8:	706f6d2f 	rsbvc	r6, pc, pc, lsr #26
 7cc:	6f62616c 	svcvs	0x0062616c
 7d0:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
 7d4:	72656e6f 	rsbvc	r6, r5, #1776	; 0x6f0
 7d8:	504f4d2f 	subpl	r4, pc, pc, lsr #26
 7dc:	6570532d 	ldrbvs	r5, [r0, #-813]!	; 0xfffffcd3
 7e0:	6e532f6c 	cdpvs	15, 5, cr2, cr3, cr12, {3}
 7e4:	00656b61 	rsbeq	r6, r5, r1, ror #22
 7e8:	6700002e 	strvs	r0, [r0, -lr, lsr #32]
 7ec:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 7f0:	69646369 	stmdbvs	r4!, {r0, r3, r5, r6, r8, r9, sp, lr}^
 7f4:	616c7073 	smcvs	50947	; 0xc703
 7f8:	00632e79 	rsbeq	r2, r3, r9, ror lr
 7fc:	67000001 	strvs	r0, [r0, -r1]
 800:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 804:	69646369 	stmdbvs	r4!, {r0, r3, r5, r6, r8, r9, sp, lr}^
 808:	616c7073 	smcvs	50947	; 0xc703
 80c:	00682e79 	rsbeq	r2, r8, r9, ror lr
 810:	64000002 	strvs	r0, [r0], #-2
 814:	6e696665 	cdpvs	6, 6, cr6, cr9, cr5, {3}
 818:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
 81c:	00000200 	andeq	r0, r0, r0, lsl #4
 820:	00180500 	andseq	r0, r8, r0, lsl #10
 824:	0a0c0205 	beq	301040 <startup-0x1fcfefc0>
 828:	05172000 	ldreq	r2, [r7, #-0]
 82c:	3d3d2f05 	ldccc	15, cr2, [sp, #-20]!	; 0xffffffec
 830:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
 834:	4b4b4b4b 	blmi	12d3568 <startup-0x1ed2ca98>
 838:	3d01054b 	cfstr32cc	mvfx0, [r1, #-300]	; 0xfffffed4
 83c:	053e2705 	ldreq	r2, [lr, #-1797]!	; 0xfffff8fb
 840:	07056a08 	streq	r6, [r5, -r8, lsl #20]
 844:	05bb4b20 	ldreq	r4, [fp, #2848]!	; 0xb20
 848:	14057505 	strne	r7, [r5], #-1285	; 0xfffffafb
 84c:	3e010520 	cfsh32cc	mvfx0, mvfx1, #16
 850:	05682505 	strbeq	r2, [r8, #-1285]!	; 0xfffffafb
 854:	07056a08 	streq	r6, [r5, -r8, lsl #20]
 858:	05754b20 	ldrbeq	r4, [r5, #-2848]!	; 0xfffff4e0
 85c:	14056705 	strne	r6, [r5], #-1797	; 0xfffff8fb
 860:	3d010520 	cfstr32cc	mvfx0, [r1, #-128]	; 0xffffff80
 864:	05682b05 	strbeq	r2, [r8, #-2821]!	; 0xfffff4fb
 868:	01056705 	tsteq	r5, r5, lsl #14
 86c:	05ba1303 	ldreq	r1, [sl, #771]!	; 0x303
 870:	206f030d 	rsbcs	r0, pc, sp, lsl #6
 874:	3d3d233d 	ldccc	3, cr2, [sp, #-244]!	; 0xffffff0c
 878:	233d3d23 	teqcs	sp, #2240	; 0x8c0
 87c:	2201053d 	andcs	r0, r1, #255852544	; 0xf400000
 880:	054c1e05 	strbeq	r1, [ip, #-3589]	; 0xfffff1fb
 884:	053d2f05 	ldreq	r2, [sp, #-3845]!	; 0xfffff0fb
 888:	05052013 	streq	r2, [r5, #-19]	; 0xffffffed
 88c:	053d3d2f 	ldreq	r3, [sp, #-3375]!	; 0xfffff2d1
 890:	04020009 	streq	r0, [r2], #-9
 894:	02003001 	andeq	r3, r0, #1, 0
 898:	003d0104 	eorseq	r0, sp, r4, lsl #2
 89c:	2f010402 	svccs	0x00010402
 8a0:	01040200 	mrseq	r0, R12_usr
 8a4:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
 8a8:	35052b01 	strcc	r2, [r5, #-2817]	; 0xfffff4ff
 8ac:	05580b03 	ldrbeq	r0, [r8, #-2819]	; 0xfffff4fd
 8b0:	053d6705 	ldreq	r6, [sp, #-1797]!	; 0xfffff8fb
 8b4:	05052013 	streq	r2, [r5, #-19]	; 0xffffffed
 8b8:	2f593d2f 	svccs	0x00593d2f
 8bc:	2f1c053d 	svccs	0x001c053d
 8c0:	05201305 	streq	r1, [r0, #-773]!	; 0xfffffcfb
 8c4:	053d4b05 	ldreq	r4, [sp, #-2821]!	; 0xfffff4fb
 8c8:	14052013 	strne	r2, [r5], #-19	; 0xffffffed
 8cc:	4a080530 	bmi	201d94 <startup-0x1fdfe26c>
 8d0:	05210905 	streq	r0, [r1, #-2309]!	; 0xfffff6fb
 8d4:	08053f14 	stmdaeq	r5, {r2, r4, r8, r9, sl, fp, ip, sp}
 8d8:	2109054a 	tstcs	r9, sl, asr #10
 8dc:	053f0c05 	ldreq	r0, [pc, #-3077]!	; fffffcdf <rear+0xdfff7ab7>
 8e0:	2e053d01 	cdpcs	13, 0, cr3, cr5, cr1, {0}
 8e4:	670c05ca 	strvs	r0, [ip, -sl, asr #11]
 8e8:	67010559 	smlsdvs	r1, r9, r5, r0
 8ec:	054c3605 	strbeq	r3, [ip, #-1541]	; 0xfffff9fb
 8f0:	16059105 	strne	r9, [r5], -r5, lsl #2
 8f4:	3d050520 	cfstr32cc	mvfx0, [r5, #-128]	; 0xffffff80
 8f8:	2f3d2f59 	svccs	0x003d2f59
 8fc:	053e1305 	ldreq	r1, [lr, #-773]!	; 0xfffffcfb
 900:	09054a07 	stmdbeq	r5, {r0, r1, r2, r9, fp, lr}
 904:	3f130521 	svccc	0x00130521
 908:	054a0705 	strbeq	r0, [sl, #-1797]	; 0xfffff8fb
 90c:	05052109 	streq	r2, [r5, #-265]	; 0xfffffef7
 910:	20160541 	andscs	r0, r6, r1, asr #10
 914:	3d2f0505 	cfstr32cc	mvfx0, [pc, #-20]!	; 908 <startup-0x1ffff6f8>
 918:	053e0105 	ldreq	r0, [lr, #-261]!	; 0xfffffefb
 91c:	0505683c 	streq	r6, [r5, #-2108]	; 0xfffff7c4
 920:	3d593d91 	ldclcc	13, cr3, [r9, #-580]	; 0xfffffdbc
 924:	8301053d 	movwhi	r0, #5437	; 0x153d
 928:	054c3a05 	strbeq	r3, [ip, #-2565]	; 0xfffff5fb
 92c:	593d9105 	ldmdbpl	sp!, {r0, r2, r8, ip, pc}
 930:	01053d3d 	tsteq	r5, sp, lsr sp
 934:	4c200583 	cfstr32mi	mvfx0, [r0], #-524	; 0xfffffdf4
 938:	053d0e05 	ldreq	r0, [sp, #-3589]!	; 0xfffff1fb
 93c:	2c052e05 	stccs	14, cr2, [r5], {5}
 940:	66090521 	strvs	r0, [r9], -r1, lsr #10
 944:	4b120559 	blmi	481eb0 <startup-0x1fb7e150>
 948:	052e0905 	streq	r0, [lr, #-2309]!	; 0xfffff6fb
 94c:	0402000d 	streq	r0, [r2], #-13
 950:	28052103 	stmdacs	r5, {r0, r1, r8, sp}
 954:	03040200 	movweq	r0, #16896	; 0x4200
 958:	00090549 	andeq	r0, r9, r9, asr #10
 95c:	3c010402 	cfstrscc	mvf0, [r1], {2}
 960:	02002605 	andeq	r2, r0, #5242880	; 0x500000
 964:	05390204 	ldreq	r0, [r9, #-516]!	; 0xfffffdfc
 968:	04020005 	streq	r0, [r2], #-5
 96c:	01053c01 	tsteq	r5, r1, lsl #24
 970:	5a180543 	bpl	601e84 <startup-0x1f9fe17c>
 974:	053e0c05 	ldreq	r0, [lr, #-3077]!	; 0xfffff3fb
 978:	17052e05 	strne	r2, [r5, -r5, lsl #28]
 97c:	03040200 	movweq	r0, #16896	; 0x4200
 980:	001c0521 	andseq	r0, ip, r1, lsr #10
 984:	57030402 	strpl	r0, [r3, -r2, lsl #8]
 988:	02000505 	andeq	r0, r0, #20971520	; 0x1400000
 98c:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 990:	23055a01 	movwcs	r5, #23041	; 0x5a01
 994:	5a090584 	bpl	241fac <startup-0x1fdbe054>
 998:	052f0805 	streq	r0, [pc, #-2053]!	; 19b <startup-0x1ffffe65>
 99c:	04020011 	streq	r0, [r2], #-17	; 0xffffffef
 9a0:	19053c02 	stmdbne	r5, {r1, sl, fp, ip, sp}
 9a4:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
 9a8:	0022053c 	eoreq	r0, r2, ip, lsr r5
 9ac:	3c060402 	cfstrscc	mvf0, [r6], {2}
 9b0:	053e1405 	ldreq	r1, [lr, #-1029]!	; 0xfffffbfb
 9b4:	0e052e17 	mcreq	14, 0, r2, cr5, cr7, {0}
 9b8:	2e0a052e 	cfsh32cs	mvfx0, mvfx10, #30
 9bc:	053e0705 	ldreq	r0, [lr, #-1797]!	; 0xfffff8fb
 9c0:	0f053d0b 	svceq	0x00053d0b
 9c4:	3f15053d 	svccc	0x0015053d
 9c8:	052e1805 	streq	r1, [lr, #-2053]!	; 0xfffff7fb
 9cc:	1005201b 	andne	r2, r5, fp, lsl r0
 9d0:	2e0b0520 	cfsh32cs	mvfx0, mvfx11, #16
 9d4:	053e1705 	ldreq	r1, [lr, #-1797]!	; 0xfffff8fb
 9d8:	d675032c 	ldrbtle	r0, [r5], -ip, lsr #6
 9dc:	0c030105 	stfeqs	f0, [r3], {5}
 9e0:	5a1f0520 	bpl	7c1e68 <startup-0x1f83e198>
 9e4:	053e1205 	ldreq	r1, [lr, #-517]!	; 0xfffffdfb
 9e8:	0505300c 	streq	r3, [r5, #-12]
 9ec:	2114054a 	tstcs	r4, sl, asr #10
 9f0:	01040200 	mrseq	r0, R12_usr
 9f4:	02005806 	andeq	r5, r0, #393216	; 0x60000
 9f8:	002e0204 	eoreq	r0, lr, r4, lsl #4
 9fc:	20040402 	andcs	r0, r4, r2, lsl #8
 a00:	02001005 	andeq	r1, r0, #5, 0
 a04:	2f060404 	svccs	0x00060404
 a08:	02000905 	andeq	r0, r0, #81920	; 0x14000
 a0c:	054a0404 	strbeq	r0, [sl, #-1028]	; 0xfffffbfc
 a10:	05c9210d 	strbeq	r2, [r9, #269]	; 0x10d
 a14:	0d056713 	stceq	7, cr6, [r5, #-76]	; 0xffffffb4
 a18:	002e054a 	eoreq	r0, lr, sl, asr #10
 a1c:	21030402 	tstcs	r3, r2, lsl #8
 a20:	02001105 	andeq	r1, r0, #1073741825	; 0x40000001
 a24:	054a0304 	strbeq	r0, [sl, #-772]	; 0xfffffcfc
 a28:	04020022 	streq	r0, [r2], #-34	; 0xffffffde
 a2c:	27057303 	strcs	r7, [r5, -r3, lsl #6]
 a30:	03040200 	movweq	r0, #16896	; 0x4200
 a34:	000d0566 	andeq	r0, sp, r6, ror #10
 a38:	3c010402 	cfstrscc	mvf0, [r1], {2}
 a3c:	02001d05 	andeq	r1, r0, #320	; 0x140
 a40:	05550204 	ldrbeq	r0, [r5, #-516]	; 0xfffffdfc
 a44:	04020009 	streq	r0, [r2], #-9
 a48:	19056601 	stmdbne	r5, {r0, r9, sl, sp, lr}
 a4c:	02040200 	andeq	r0, r4, #0, 4
 a50:	00050556 	andeq	r0, r5, r6, asr r5
 a54:	66010402 	strvs	r0, [r1], -r2, lsl #8
 a58:	0a030105 	beq	c0e74 <startup-0x1ff3f18c>
 a5c:	00080258 	andeq	r0, r8, r8, asr r2
 a60:	01d60101 	bicseq	r0, r6, r1, lsl #2
 a64:	00030000 	andeq	r0, r3, r0
 a68:	00000155 	andeq	r0, r0, r5, asr r1
 a6c:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
 a70:	0101000d 	tsteq	r1, sp
 a74:	00000101 	andeq	r0, r0, r1, lsl #2
 a78:	00000100 	andeq	r0, r0, r0, lsl #2
 a7c:	73552f01 	cmpvc	r5, #1, 30
 a80:	2f737265 	svccs	0x00737265
 a84:	6c6c6f67 	stclvs	15, cr6, [ip], #-412	; 0xfffffe64
 a88:	442f6d75 	strtmi	r6, [pc], #-3445	; a90 <startup-0x1ffff570>
 a8c:	6d75636f 	ldclvs	3, cr6, [r5, #-444]!	; 0xfffffe44
 a90:	73746e65 	cmnvc	r4, #1616	; 0x650
 a94:	706f6d2f 	rsbvc	r6, pc, pc, lsr #26
 a98:	6f62616c 	svcvs	0x0062616c
 a9c:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
 aa0:	72656e6f 	rsbvc	r6, r5, #1776	; 0x6f0
 aa4:	504f4d2f 	subpl	r4, pc, pc, lsr #26
 aa8:	6570532d 	ldrbvs	r5, [r0, #-813]!	; 0xfffffcd3
 aac:	6e532f6c 	cdpvs	15, 5, cr2, cr3, cr12, {3}
 ab0:	00656b61 	rsbeq	r6, r5, r1, ror #22
 ab4:	7070412f 	rsbsvc	r4, r0, pc, lsr #2
 ab8:	6163696c 	cmnvs	r3, ip, ror #18
 abc:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 ac0:	6f632f73 	svcvs	0x00632f73
 ac4:	696c6564 	stmdbvs	ip!, {r2, r5, r6, r8, sl, sp, lr}^
 ac8:	612e6574 			; <UNDEFINED> instruction: 0x612e6574
 acc:	432f7070 			; <UNDEFINED> instruction: 0x432f7070
 ad0:	65746e6f 	ldrbvs	r6, [r4, #-3695]!	; 0xfffff191
 ad4:	2f73746e 	svccs	0x0073746e
 ad8:	72616853 	rsbvc	r6, r1, #5439488	; 0x530000
 adc:	75536465 	ldrbvc	r6, [r3, #-1125]	; 0xfffffb9b
 ae0:	726f7070 	rsbvc	r7, pc, #112, 0	; 0x70
 ae4:	6f742f74 	svcvs	0x00742f74
 ae8:	2f736c6f 	svccs	0x00736c6f
 aec:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
 af0:	2f6d7261 	svccs	0x006d7261
 af4:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
 af8:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
 afc:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
 b00:	6e692f69 	cdpvs	15, 6, cr2, cr9, cr9, {3}
 b04:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
 b08:	79732f65 	ldmdbvc	r3!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
 b0c:	412f0073 			; <UNDEFINED> instruction: 0x412f0073
 b10:	696c7070 	stmdbvs	ip!, {r4, r5, r6, ip, sp, lr}^
 b14:	69746163 	ldmdbvs	r4!, {r0, r1, r5, r6, r8, sp, lr}^
 b18:	2f736e6f 	svccs	0x00736e6f
 b1c:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
 b20:	6574696c 	ldrbvs	r6, [r4, #-2412]!	; 0xfffff694
 b24:	7070612e 	rsbsvc	r6, r0, lr, lsr #2
 b28:	6e6f432f 	cdpvs	3, 6, cr4, cr15, cr15, {1}
 b2c:	746e6574 	strbtvc	r6, [lr], #-1396	; 0xfffffa8c
 b30:	68532f73 	ldmdavs	r3, {r0, r1, r4, r5, r6, r8, r9, sl, fp, sp}^
 b34:	64657261 	strbtvs	r7, [r5], #-609	; 0xfffffd9f
 b38:	70707553 	rsbsvc	r7, r0, r3, asr r5
 b3c:	2f74726f 	svccs	0x0074726f
 b40:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 978 <startup-0x1ffff688>
 b44:	63672f73 	cmnvs	r7, #460	; 0x1cc
 b48:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
 b4c:	696c2f6d 	stmdbvs	ip!, {r0, r2, r3, r5, r6, r8, r9, sl, fp, sp}^
 b50:	63672f62 	cmnvs	r7, #392	; 0x188
 b54:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
 b58:	6f6e2d6d 	svcvs	0x006e2d6d
 b5c:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
 b60:	2f696261 	svccs	0x00696261
 b64:	2e322e39 	mrccs	14, 1, r2, cr2, cr9, {1}
 b68:	6e692f31 	mcrvs	15, 3, r2, cr9, cr1, {1}
 b6c:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
 b70:	71000065 	tstvc	r0, r5, rrx
 b74:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0xfffffa8b
 b78:	0100632e 	tsteq	r0, lr, lsr #6
 b7c:	6f6c0000 	svcvs	0x006c0000
 b80:	682e6b63 	stmdavs	lr!, {r0, r1, r5, r6, r8, r9, fp, sp, lr}
 b84:	00000200 	andeq	r0, r0, r0, lsl #4
 b88:	7079745f 	rsbsvc	r7, r9, pc, asr r4
 b8c:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
 b90:	00000200 	andeq	r0, r0, r0, lsl #4
 b94:	64647473 	strbtvs	r7, [r4], #-1139	; 0xfffffb8d
 b98:	682e6665 	stmdavs	lr!, {r0, r2, r5, r6, r9, sl, sp, lr}
 b9c:	00000300 	andeq	r0, r0, r0, lsl #6
 ba0:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
 ba4:	00682e74 	rsbeq	r2, r8, r4, ror lr
 ba8:	67000002 	strvs	r0, [r0, -r2]
 bac:	656d6f65 	strbvs	r6, [sp, #-3941]!	; 0xfffff09b
 bb0:	63697274 	cmnvs	r9, #116, 4	; 0x40000007
 bb4:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
 bb8:	682e7463 	stmdavs	lr!, {r0, r1, r5, r6, sl, ip, sp, lr}
 bbc:	00000100 	andeq	r0, r0, r0, lsl #2
 bc0:	000c0500 	andeq	r0, ip, r0, lsl #10
 bc4:	0f300205 	svceq	0x00300205
 bc8:	0a032000 	beq	c8bd0 <startup-0x1ff37430>
 bcc:	2f130501 	svccs	0x00130501
 bd0:	05590105 	ldrbeq	r0, [r9, #-261]	; 0xfffffefb
 bd4:	15057710 	strne	r7, [r5, #-1808]	; 0xfffff8f0
 bd8:	5901052f 	stmdbpl	r1, {r0, r1, r2, r3, r5, r8, sl}
 bdc:	055b0f05 	ldrbeq	r0, [fp, #-3845]	; 0xfffff0fb
 be0:	01052f15 	tsteq	r5, r5, lsl pc
 be4:	850c0583 	strhi	r0, [ip, #-1411]	; 0xfffffa7d
 be8:	052f0b05 	streq	r0, [pc, #-2821]!	; eb <startup-0x1fffff15>
 bec:	1b052f01 	blne	14c7f8 <startup-0x1feb3808>
 bf0:	4c080569 	cfstr32mi	mvfx0, [r8], {105}	; 0x69
 bf4:	054a0705 	strbeq	r0, [sl, #-1797]	; 0xfffff8fb
 bf8:	0f053c06 	svceq	0x00053c06
 bfc:	2e090530 	cfmv64hrcs	mvdx9, r0
 c00:	053d0f05 	ldreq	r0, [sp, #-3845]!	; 0xfffff0fb
 c04:	18054c10 	stmdane	r5, {r4, sl, fp, lr}
 c08:	2e10053c 	mrccs	5, 0, r0, cr0, cr12, {1}
 c0c:	052e1805 	streq	r1, [lr, #-2053]!	; 0xfffff7fb
 c10:	01054b10 	tsteq	r5, r0, lsl fp
 c14:	bc0e055a 	cfstr32lt	mvfx0, [lr], {90}	; 0x5a
 c18:	053d2105 	ldreq	r2, [sp, #-261]!	; 0xfffffefb
 c1c:	0d05580c 	stceq	8, cr5, [r5, #-48]	; 0xffffffd0
 c20:	2e06054c 	cfsh32cs	mvfx0, mvfx6, #44
 c24:	3f4b0d05 	svccc	0x004b0d05
 c28:	05590b05 	ldrbeq	r0, [r9, #-2821]	; 0xfffff4fb
 c2c:	10052101 	andne	r2, r5, r1, lsl #2
 c30:	2f0c05ae 	svccs	0x000c05ae
 c34:	02210105 	eoreq	r0, r1, #1073741825	; 0x40000001
 c38:	01010005 	tsteq	r1, r5

Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	616c6564 	cmnvs	ip, r4, ror #10
   4:	696d5f79 	stmdbvs	sp!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
   8:	00696c6c 	rsbeq	r6, r9, ip, ror #24
   c:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
  10:	6f675f69 	svcvs	0x00675f69
  14:	79786f74 	ldmdbvc	r8!, {r2, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
  18:	63736100 	cmnvs	r3, #0
  1c:	635f6969 	cmpvs	pc, #1720320	; 0x1a4000
  20:	5f6c7274 	svcpl	0x006c7274
  24:	5f746962 	svcpl	0x00746962
  28:	61656c63 	cmnvs	r5, r3, ror #24
  2c:	65640072 	strbvs	r0, [r4, #-114]!	; 0xffffff8e
  30:	5f79616c 	svcpl	0x0079616c
  34:	726b696d 	rsbvc	r6, fp, #1785856	; 0x1b4000
  38:	7361006f 	cmnvc	r1, #111, 0	; 0x6f
  3c:	5f696963 	svcpl	0x00696963
  40:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
  44:	6f635f65 	svcvs	0x00635f65
  48:	6f72746e 	svcvs	0x0072746e
  4c:	72656c6c 	rsbvc	r6, r5, #108, 24	; 0x6c00
  50:	554e4700 	strbpl	r4, [lr, #-1792]	; 0xfffff900
  54:	39394320 	ldmdbcc	r9!, {r5, r8, r9, lr}
  58:	322e3920 	eorcc	r3, lr, #32, 18	; 0x80000
  5c:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  60:	31393130 	teqcc	r9, r0, lsr r1
  64:	20353230 	eorscs	r3, r5, r0, lsr r2
  68:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  6c:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  70:	415b2029 	cmpmi	fp, r9, lsr #32
  74:	612f4d52 			; <UNDEFINED> instruction: 0x612f4d52
  78:	392d6d72 	pushcc	{r1, r4, r5, r6, r8, sl, fp, sp, lr}
  7c:	6172622d 	cmnvs	r2, sp, lsr #4
  80:	2068636e 	rsbcs	r6, r8, lr, ror #6
  84:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
  88:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
  8c:	37373220 	ldrcc	r3, [r7, -r0, lsr #4]!
  90:	5d393935 			; <UNDEFINED> instruction: 0x5d393935
  94:	746d2d20 	strbtvc	r2, [sp], #-3360	; 0xfffff2e0
  98:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
  9c:	666d2d20 	strbtvs	r2, [sp], -r0, lsr #26
  a0:	74616f6c 	strbtvc	r6, [r1], #-3948	; 0xfffff094
  a4:	6962612d 	stmdbvs	r2!, {r0, r2, r3, r5, r8, sp, lr}^
  a8:	666f733d 			; <UNDEFINED> instruction: 0x666f733d
  ac:	6d2d2074 	stcvs	0, cr2, [sp, #-464]!	; 0xfffffe30
  b0:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
  b4:	6d72613d 	ldfvse	f6, [r2, #-244]!	; 0xffffff0c
  b8:	6d2d3676 	stcvs	6, cr3, [sp, #-472]!	; 0xfffffe28
  bc:	20672d20 	rsbcs	r2, r7, r0, lsr #26
  c0:	20304f2d 	eorscs	r4, r0, sp, lsr #30
  c4:	6474732d 	ldrbtvs	r7, [r4], #-813	; 0xfffffcd3
  c8:	3939633d 	ldmdbcc	r9!, {r0, r2, r3, r4, r5, r8, r9, sp, lr}
  cc:	63736100 	cmnvs	r3, #0
  d0:	725f6969 	subsvc	r6, pc, #1720320	; 0x1a4000
  d4:	5f646165 	svcpl	0x00646165
  d8:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
  dc:	63007375 	movwvs	r7, #885	; 0x375
  e0:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
  e4:	7369645f 	cmnvc	r9, #1593835520	; 0x5f000000
  e8:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
  ec:	63736100 	cmnvs	r3, #0
  f0:	775f6969 	ldrbvc	r6, [pc, -r9, ror #18]
  f4:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
  f8:	7461645f 	strbtvc	r6, [r1], #-1119	; 0xfffffba1
  fc:	65640061 	strbvs	r0, [r4, #-97]!	; 0xffffff9f
 100:	5f79616c 	svcpl	0x0079616c
 104:	6e303532 	mrcvs	5, 1, r3, cr0, cr2, {1}
 108:	65720073 	ldrbvs	r0, [r2, #-115]!	; 0xffffff8d
 10c:	6c615674 	stclvs	6, cr5, [r1], #-464	; 0xfffffe30
 110:	64646100 	strbtvs	r6, [r4], #-256	; 0xffffff00
 114:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
 118:	63736100 	cmnvs	r3, #0
 11c:	725f6969 	subsvc	r6, pc, #1720320	; 0x1a4000
 120:	5f646165 	svcpl	0x00646165
 124:	746e6f63 	strbtvc	r6, [lr], #-3939	; 0xfffff09d
 128:	6c6c6f72 	stclvs	15, cr6, [ip], #-456	; 0xfffffe38
 12c:	61007265 	tstvs	r0, r5, ror #4
 130:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 134:	6165725f 	cmnvs	r5, pc, asr r2
 138:	61645f64 	cmnvs	r4, r4, ror #30
 13c:	64006174 	strvs	r6, [r0], #-372	; 0xfffffe8c
 140:	6c707369 	ldclvs	3, cr7, [r0], #-420	; 0xfffffe5c
 144:	635f7961 	cmpvs	pc, #1589248	; 0x184000
 148:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
 14c:	75006c6f 	strvc	r6, [r0, #-3183]	; 0xfffff391
 150:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
 154:	2064656e 	rsbcs	r6, r4, lr, ror #10
 158:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
 15c:	73552f00 	cmpvc	r5, #0, 30
 160:	2f737265 	svccs	0x00737265
 164:	6c6c6f67 	stclvs	15, cr6, [ip], #-412	; 0xfffffe64
 168:	442f6d75 	strtmi	r6, [pc], #-3445	; 170 <startup-0x1ffffe90>
 16c:	6d75636f 	ldclvs	3, cr6, [r5, #-444]!	; 0xfffffe44
 170:	73746e65 	cmnvc	r4, #1616	; 0x650
 174:	706f6d2f 	rsbvc	r6, pc, pc, lsr #26
 178:	6f62616c 	svcvs	0x0062616c
 17c:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
 180:	72656e6f 	rsbvc	r6, r5, #1776	; 0x6f0
 184:	504f4d2f 	subpl	r4, pc, pc, lsr #26
 188:	6570532d 	ldrbvs	r5, [r0, #-813]!	; 0xfffffcd3
 18c:	6e532f6c 	cdpvs	15, 5, cr2, cr3, cr12, {3}
 190:	00656b61 	rsbeq	r6, r5, r1, ror #22
 194:	44746572 	ldrbtmi	r6, [r4], #-1394	; 0xfffffa8e
 198:	00617461 	rsbeq	r7, r1, r1, ror #8
 19c:	746e7566 	strbtvc	r7, [lr], #-1382	; 0xfffffa9a
 1a0:	5f6e6f69 	svcpl	0x006e6f69
 1a4:	00746573 	rsbseq	r6, r4, r3, ror r5
 1a8:	65747962 	ldrbvs	r7, [r4, #-2402]!	; 0xfffff69e
 1ac:	63736100 	cmnvs	r3, #0
 1b0:	775f6969 	ldrbvc	r6, [pc, -r9, ror #18]
 1b4:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 1b8:	646d635f 	strbtvs	r6, [sp], #-863	; 0xfffffca1
 1bc:	74657200 	strbtvc	r7, [r5], #-512	; 0xfffffe00
 1c0:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
 1c4:	746e6500 	strbtvc	r6, [lr], #-1280	; 0xfffffb00
 1c8:	6d5f7972 	vldrvs.16	s15, [pc, #-228]	; ec <startup-0x1fffff14>	; <UNPREDICTABLE>
 1cc:	5f65646f 	svcpl	0x0065646f
 1d0:	00746573 	rsbseq	r6, r4, r3, ror r5
 1d4:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 1d8:	72775f69 	rsbsvc	r5, r7, #420	; 0x1a4
 1dc:	5f657469 	svcpl	0x00657469
 1e0:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
 1e4:	63736100 	cmnvs	r3, #0
 1e8:	635f6969 	cmpvs	pc, #1720320	; 0x1a4000
 1ec:	5f6c7274 	svcpl	0x006c7274
 1f0:	5f746962 	svcpl	0x00746962
 1f4:	00746573 	rsbseq	r6, r4, r3, ror r5
 1f8:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
 1fc:	672f7372 			; <UNDEFINED> instruction: 0x672f7372
 200:	756c6c6f 	strbvc	r6, [ip, #-3183]!	; 0xfffff391
 204:	6f442f6d 	svcvs	0x00442f6d
 208:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0xfffffa9d
 20c:	2f73746e 	svccs	0x0073746e
 210:	6c706f6d 	ldclvs	15, cr6, [r0], #-436	; 0xfffffe4c
 214:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
 218:	6f697461 	svcvs	0x00697461
 21c:	2f72656e 	svccs	0x0072656e
 220:	2d504f4d 	ldclcs	15, cr4, [r0, #-308]	; 0xfffffecc
 224:	6c657053 	stclvs	0, cr7, [r5], #-332	; 0xfffffeb4
 228:	616e532f 	cmnvs	lr, pc, lsr #6
 22c:	612f656b 			; <UNDEFINED> instruction: 0x612f656b
 230:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 234:	70736964 	rsbsvc	r6, r3, r4, ror #18
 238:	2e79616c 	rpwcsez	f6, f1, #4.0
 23c:	73610063 	cmnvc	r1, #99, 0	; 0x63
 240:	5f696963 	svcpl	0x00696963
 244:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
 248:	45475000 	strbmi	r5, [r7, #-0]
 24c:	54454d4f 	strbpl	r4, [r5], #-3407	; 0xfffff2b1
 250:	61005952 	tstvs	r0, r2, asr r9
 254:	00766772 	rsbseq	r6, r6, r2, ror r7
 258:	78726964 	ldmdavc	r2!, {r2, r5, r6, r8, fp, sp, lr}^
 25c:	72696400 	rsbvc	r6, r9, #0, 8
 260:	552f0079 	strpl	r0, [pc, #-121]!	; 1ef <startup-0x1ffffe11>
 264:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 268:	6c6f672f 	stclvs	7, cr6, [pc], #-188	; 1b4 <startup-0x1ffffe4c>
 26c:	2f6d756c 	svccs	0x006d756c
 270:	75636f44 	strbvc	r6, [r3, #-3908]!	; 0xfffff0bc
 274:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
 278:	6f6d2f73 	svcvs	0x006d2f73
 27c:	62616c70 	rsbvs	r6, r1, #112, 24	; 0x7000
 280:	7461726f 	strbtvc	r7, [r1], #-623	; 0xfffffd91
 284:	656e6f69 	strbvs	r6, [lr, #-3945]!	; 0xfffff097
 288:	4f4d2f72 	svcmi	0x004d2f72
 28c:	70532d50 	subsvc	r2, r3, r0, asr sp
 290:	532f6c65 			; <UNDEFINED> instruction: 0x532f6c65
 294:	656b616e 	strbvs	r6, [fp, #-366]!	; 0xfffffe92
 298:	6174732f 	cmnvs	r4, pc, lsr #6
 29c:	70757472 	rsbsvc	r7, r5, r2, ror r4
 2a0:	6400632e 	strvs	r6, [r0], #-814	; 0xfffffcd2
 2a4:	5f776172 	svcpl	0x00776172
 2a8:	6b616e73 	blvs	185bc7c <startup-0x1e7a4384>
 2ac:	6d690065 	stclvs	0, cr0, [r9, #-404]!	; 0xfffffe6c
 2b0:	5f656761 	svcpl	0x00656761
 2b4:	73746962 	cmnvc	r4, #1605632	; 0x188000
 2b8:	696e6900 	stmdbvs	lr!, {r8, fp, sp, lr}^
 2bc:	6e735f74 	mrcvs	15, 3, r5, cr3, cr4, {3}
 2c0:	00656b61 	rsbeq	r6, r5, r1, ror #22
 2c4:	696f5074 	stmdbvs	pc!, {r2, r4, r5, r6, ip, lr}^	; <UNPREDICTABLE>
 2c8:	7300746e 	movwvc	r7, #1134	; 0x46e
 2cc:	656b616e 	strbvs	r6, [fp, #-366]!	; 0xfffffe92
 2d0:	64616568 	strbtvs	r6, [r1], #-1384	; 0xfffffa98
 2d4:	6f65675f 	svcvs	0x0065675f
 2d8:	7274656d 	rsbsvc	r6, r4, #457179136	; 0x1b400000
 2dc:	4f500079 	svcmi	0x00500079
 2e0:	00544e49 	subseq	r4, r4, r9, asr #28
 2e4:	5f746573 	svcpl	0x00746573
 2e8:	65657073 	strbvs	r7, [r5, #-115]!	; 0xffffff8d
 2ec:	6f700064 	svcvs	0x00700064
 2f0:	70007873 	andvc	r7, r0, r3, ror r8
 2f4:	0079736f 	rsbseq	r7, r9, pc, ror #6
 2f8:	67696568 	strbvs	r6, [r9, -r8, ror #10]!
 2fc:	73007468 	movwvc	r7, #1128	; 0x468
 300:	656b616e 	strbvs	r6, [fp, #-366]!	; 0xfffffe92
 304:	79646f62 	stmdbvc	r4!, {r1, r5, r6, r8, r9, sl, fp, sp, lr}^
 308:	6f65675f 	svcvs	0x0065675f
 30c:	7274656d 	rsbsvc	r6, r4, #457179136	; 0x1b400000
 310:	6f660079 	svcvs	0x00660079
 314:	675f646f 	ldrbvs	r6, [pc, -pc, ror #8]
 318:	656d6f65 	strbvs	r6, [sp, #-3941]!	; 0xfffff09b
 31c:	00797274 	rsbseq	r7, r9, r4, ror r2
 320:	6e69616d 	powvsez	f6, f1, #5.0
 324:	696e6900 	stmdbvs	lr!, {r8, fp, sp, lr}^
 328:	70615f74 	rsbvc	r5, r1, r4, ror pc
 32c:	75740070 	ldrbvc	r0, [r4, #-112]!	; 0xffffff90
 330:	73006e72 	movwvc	r6, #3698	; 0xe72
 334:	656b616e 	strbvs	r6, [fp, #-366]!	; 0xfffffe92
 338:	79646f62 	stmdbvc	r4!, {r1, r5, r6, r8, r9, sl, fp, sp, lr}^
 33c:	65477400 	strbvs	r7, [r7, #-1024]	; 0xfffffc00
 340:	74656d6f 	strbtvc	r6, [r5], #-3439	; 0xfffff291
 344:	73007972 	movwvc	r7, #2418	; 0x972
 348:	656b616e 	strbvs	r6, [fp, #-366]!	; 0xfffffe92
 34c:	64616568 	strbtvs	r6, [r1], #-1384	; 0xfffffa98
 350:	73657200 	cmnvc	r5, #0, 4
 354:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
 358:	7a697300 	bvc	1a5cf60 <startup-0x1e5a30a0>
 35c:	73007865 	movwvc	r7, #2149	; 0x865
 360:	79657a69 	stmdbvc	r5!, {r0, r3, r5, r6, r9, fp, ip, sp, lr}^
 364:	67726100 	ldrbvs	r6, [r2, -r0, lsl #2]!
 368:	74730063 	ldrbtvc	r0, [r3], #-99	; 0xffffff9d
 36c:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
 370:	72640070 	rsbvc	r0, r4, #112, 0	; 0x70
 374:	66007761 	strvs	r7, [r0], -r1, ror #14
 378:	5f646f6f 	svcpl	0x00646f6f
 37c:	006a626f 	rsbeq	r6, sl, pc, ror #4
 380:	5f79656b 	svcpl	0x0079656b
 384:	6f727473 	svcvs	0x00727473
 388:	7700656b 	strvc	r6, [r0, -fp, ror #10]
 38c:	68746469 	ldmdavs	r4!, {r0, r3, r5, r6, sl, sp, lr}^
 390:	63616200 	cmnvs	r1, #0, 4
 394:	6675426b 	ldrbtvs	r4, [r5], -fp, ror #4
 398:	00726566 	rsbseq	r6, r2, r6, ror #10
 39c:	5f746573 	svcpl	0x00746573
 3a0:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
 3a4:	735f7463 	cmpvc	pc, #1660944384	; 0x63000000
 3a8:	64656570 	strbtvs	r6, [r5], #-1392	; 0xfffffa90
 3ac:	64697700 	strbtvs	r7, [r9], #-1792	; 0xfffff900
 3b0:	695f6874 	ldmdbvs	pc, {r2, r4, r5, r6, fp, sp, lr}^	; <UNPREDICTABLE>
 3b4:	79625f6e 	stmdbvc	r2!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
 3b8:	00736574 	rsbseq	r6, r3, r4, ror r5
 3bc:	64616f6c 	strbtvs	r6, [r1], #-3948	; 0xfffff094
 3c0:	7270735f 	rsbsvc	r7, r0, #2080374785	; 0x7c000001
 3c4:	00657469 	rsbeq	r7, r5, r9, ror #8
 3c8:	61656c63 	cmnvs	r5, r3, ror #24
 3cc:	626f5f72 	rsbvs	r5, pc, #456	; 0x1c8
 3d0:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 3d4:	624f7400 	subvs	r7, pc, #0, 8
 3d8:	7264006a 	rsbvc	r0, r4, #106, 0	; 0x6a
 3dc:	6f5f7761 	svcvs	0x005f7761
 3e0:	63656a62 	cmnvs	r5, #401408	; 0x62000
 3e4:	65720074 	ldrbvs	r0, [r2, #-116]!	; 0xffffff8c
 3e8:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 3ec:	61675f74 	smcvs	30196	; 0x75f4
 3f0:	6e00656d 	cfsh32vs	mvfx6, mvfx0, #61
 3f4:	6f706d75 	svcvs	0x00706d75
 3f8:	73746e69 	cmnvc	r4, #1680	; 0x690
 3fc:	61726400 	cmnvs	r2, r0, lsl #8
 400:	70735f77 	rsbsvc	r5, r3, r7, ror pc
 404:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 408:	766f6d00 	strbtvc	r6, [pc], -r0, lsl #26
 40c:	626f5f65 	rsbvs	r5, pc, #404	; 0x194
 410:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 414:	6f6f6600 	svcvs	0x006f6600
 418:	70730064 	rsbsvc	r0, r3, r4, rrx
 41c:	78646565 	stmdavc	r4!, {r0, r2, r5, r6, r8, sl, sp, lr}^
 420:	65707300 	ldrbvs	r7, [r0, #-768]!	; 0xfffffd00
 424:	00796465 	rsbseq	r6, r9, r5, ror #8
 428:	4a424f50 	bmi	1094170 <startup-0x1ef6be90>
 42c:	00544345 	subseq	r4, r4, r5, asr #6
 430:	75706e69 	ldrbvc	r6, [r0, #-3689]!	; 0xfffff197
 434:	656b0074 	strbvs	r0, [fp, #-116]!	; 0xffffff8c
 438:	6c615679 	stclvs	6, cr5, [r1], #-484	; 0xfffffe1c
 43c:	79656b00 	stmdbvc	r5!, {r8, r9, fp, sp, lr}^
 440:	756f0062 	strbvc	r0, [pc, #-98]!	; 3e6 <startup-0x1ffffc1a>
 444:	65733774 	ldrbvs	r3, [r3, #-1908]!	; 0xfffff88c
 448:	65720067 	ldrbvs	r0, [r2, #-103]!	; 0xffffff99
 44c:	635f6461 	cmpvs	pc, #1627389952	; 0x61000000
 450:	756f6c6f 	strbvc	r6, [pc, #-3183]!	; fffff7e9 <rear+0xdfff75c1>
 454:	6b006e6d 	blvs	1be10 <startup-0x1ffe41f0>
 458:	765f7965 	ldrbvc	r7, [pc], -r5, ror #18
 45c:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
 460:	74636100 	strbtvc	r6, [r3], #-256	; 0xffffff00
 464:	74617669 	strbtvc	r7, [r1], #-1641	; 0xfffff997
 468:	6f725f65 	svcvs	0x00725f65
 46c:	552f0077 	strpl	r0, [pc, #-119]!	; 3fd <startup-0x1ffffc03>
 470:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 474:	6c6f672f 	stclvs	7, cr6, [pc], #-188	; 3c0 <startup-0x1ffffc40>
 478:	2f6d756c 	svccs	0x006d756c
 47c:	75636f44 	strbvc	r6, [r3, #-3908]!	; 0xfffff0bc
 480:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
 484:	6f6d2f73 	svcvs	0x006d2f73
 488:	62616c70 	rsbvs	r6, r1, #112, 24	; 0x7000
 48c:	7461726f 	strbtvc	r7, [r1], #-623	; 0xfffffd91
 490:	656e6f69 	strbvs	r6, [lr, #-3945]!	; 0xfffff097
 494:	4f4d2f72 	svcmi	0x004d2f72
 498:	70532d50 	subsvc	r2, r3, r0, asr sp
 49c:	532f6c65 			; <UNDEFINED> instruction: 0x532f6c65
 4a0:	656b616e 	strbvs	r6, [fp, #-366]!	; 0xfffffe92
 4a4:	79656b2f 	stmdbvc	r5!, {r0, r1, r2, r3, r5, r8, r9, fp, sp, lr}^
 4a8:	00632e62 	rsbeq	r2, r3, r2, ror #28
 4ac:	616c6564 	cmnvs	ip, r4, ror #10
 4b0:	30355f79 	eorscc	r5, r5, r9, ror pc
 4b4:	00736e30 	rsbseq	r6, r3, r0, lsr lr
 4b8:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
 4bc:	672f7372 			; <UNDEFINED> instruction: 0x672f7372
 4c0:	756c6c6f 	strbvc	r6, [ip, #-3183]!	; 0xfffff391
 4c4:	6f442f6d 	svcvs	0x00442f6d
 4c8:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0xfffffa9d
 4cc:	2f73746e 	svccs	0x0073746e
 4d0:	6c706f6d 	ldclvs	15, cr6, [r0], #-436	; 0xfffffe4c
 4d4:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
 4d8:	6f697461 	svcvs	0x00697461
 4dc:	2f72656e 	svccs	0x0072656e
 4e0:	2d504f4d 	ldclcs	15, cr4, [r0, #-308]	; 0xfffffecc
 4e4:	6c657053 	stclvs	0, cr7, [r5], #-332	; 0xfffffeb4
 4e8:	616e532f 	cmnvs	lr, pc, lsr #6
 4ec:	642f656b 	strtvs	r6, [pc], #-1387	; 4f4 <startup-0x1ffffb0c>
 4f0:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 4f4:	6700632e 	strvs	r6, [r0, -lr, lsr #6]
 4f8:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 4fc:	775f6369 	ldrbvc	r6, [pc, -r9, ror #6]
 500:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 504:	6d6f635f 	stclvs	3, cr6, [pc, #-380]!	; 390 <startup-0x1ffffc70>
 508:	646e616d 	strbtvs	r6, [lr], #-365	; 0xfffffe93
 50c:	61726700 	cmnvs	r2, r0, lsl #14
 510:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 514:	6172645f 	cmnvs	r2, pc, asr r4
 518:	63735f77 	cmnvs	r3, #476	; 0x1dc
 51c:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
 520:	73552f00 	cmpvc	r5, #0, 30
 524:	2f737265 	svccs	0x00737265
 528:	6c6c6f67 	stclvs	15, cr6, [ip], #-412	; 0xfffffe64
 52c:	442f6d75 	strtmi	r6, [pc], #-3445	; 534 <startup-0x1ffffacc>
 530:	6d75636f 	ldclvs	3, cr6, [r5, #-444]!	; 0xfffffe44
 534:	73746e65 	cmnvc	r4, #1616	; 0x650
 538:	706f6d2f 	rsbvc	r6, pc, pc, lsr #26
 53c:	6f62616c 	svcvs	0x0062616c
 540:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
 544:	72656e6f 	rsbvc	r6, r5, #1776	; 0x6f0
 548:	504f4d2f 	subpl	r4, pc, pc, lsr #26
 54c:	6570532d 	ldrbvs	r5, [r0, #-813]!	; 0xfffffcd3
 550:	6e532f6c 	cdpvs	15, 5, cr2, cr3, cr12, {3}
 554:	2f656b61 	svccs	0x00656b61
 558:	70617267 	rsbvc	r7, r1, r7, ror #4
 55c:	64636968 	strbtvs	r6, [r3], #-2408	; 0xfffff698
 560:	6c707369 	ldclvs	3, cr7, [r0], #-420	; 0xfffffe5c
 564:	632e7961 			; <UNDEFINED> instruction: 0x632e7961
 568:	61726700 	cmnvs	r2, r0, lsl #14
 56c:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 570:	6165725f 	cmnvs	r5, pc, asr r2
 574:	61645f64 	cmnvs	r4, r4, ror #30
 578:	67006174 	smlsdxvs	r0, r4, r1, r6
 57c:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 580:	725f6369 	subsvc	r6, pc, #-1543503871	; 0xa4000001
 584:	00646165 	rsbeq	r6, r4, r5, ror #2
 588:	65786970 	ldrbvs	r6, [r8, #-2416]!	; 0xfffff690
 58c:	7267006c 	rsbvc	r0, r7, #108, 0	; 0x6c
 590:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 594:	74635f63 	strbtvc	r5, [r3], #-3939	; 0xfffff09d
 598:	625f6c72 	subsvs	r6, pc, #29184	; 0x7200
 59c:	735f7469 	cmpvc	pc, #1761607680	; 0x69000000
 5a0:	63007465 	movwvs	r7, #1125	; 0x465
 5a4:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
 5a8:	6361625f 	cmnvs	r1, #-268435451	; 0xf0000005
 5ac:	6675626b 	ldrbtvs	r6, [r5], -fp, ror #4
 5b0:	00726566 	rsbseq	r6, r2, r6, ror #10
 5b4:	70617267 	rsbvc	r7, r1, r7, ror #4
 5b8:	5f636968 	svcpl	0x00636968
 5bc:	74696177 	strbtvc	r6, [r9], #-375	; 0xfffffe89
 5c0:	6165725f 	cmnvs	r5, pc, asr r2
 5c4:	6d007964 	vstrvs.16	s14, [r0, #-200]	; 0xffffff38	; <UNPREDICTABLE>
 5c8:	006b7361 	rsbeq	r7, fp, r1, ror #6
 5cc:	746e6975 	strbtvc	r6, [lr], #-2421	; 0xfffff68b
 5d0:	00745f38 	rsbseq	r5, r4, r8, lsr pc
 5d4:	70617267 	rsbvc	r7, r1, r7, ror #4
 5d8:	5f636968 	svcpl	0x00636968
 5dc:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 5e0:	65730065 	ldrbvs	r0, [r3, #-101]!	; 0xffffff9b
 5e4:	7463656c 	strbtvc	r6, [r3], #-1388	; 0xfffffa94
 5e8:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
 5ec:	6c6f7274 	sfmvs	f7, 2, [pc], #-464	; 424 <startup-0x1ffffbdc>
 5f0:	0072656c 	rsbseq	r6, r2, ip, ror #10
 5f4:	65646e69 	strbvs	r6, [r4, #-3689]!	; 0xfffff197
 5f8:	72670078 	rsbvc	r0, r7, #120, 0	; 0x78
 5fc:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 600:	6c635f63 	stclvs	15, cr5, [r3], #-396	; 0xfffffe74
 604:	5f726165 	svcpl	0x00726165
 608:	65726373 	ldrbvs	r6, [r2, #-883]!	; 0xfffffc8d
 60c:	67006e65 	strvs	r6, [r0, -r5, ror #28]
 610:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 614:	775f6369 	ldrbvc	r6, [pc, -r9, ror #6]
 618:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 61c:	7461645f 	strbtvc	r6, [r1], #-1119	; 0xfffffba1
 620:	72670061 	rsbvc	r0, r7, #97, 0	; 0x61
 624:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 628:	74635f63 	strbtvc	r5, [r3], #-3939	; 0xfffff09d
 62c:	625f6c72 	subsvs	r6, pc, #29184	; 0x7200
 630:	635f7469 	cmpvs	pc, #1761607680	; 0x69000000
 634:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
 638:	67617000 	strbvs	r7, [r1, -r0]!
 63c:	72670065 	rsbvc	r0, r7, #101, 0	; 0x65
 640:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 644:	6e695f63 	cdpvs	15, 6, cr5, cr9, cr3, {3}
 648:	72007469 	andvc	r7, r0, #1761607680	; 0x69000000
 64c:	61767465 	cmnvs	r6, r5, ror #8
 650:	645f006c 	ldrbvs	r0, [pc], #-108	; 658 <startup-0x1ffff9a8>
 654:	685f6f73 	ldmdavs	pc, {r0, r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^	; <UNPREDICTABLE>
 658:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
 65c:	73690065 	cmnvc	r9, #101, 0	; 0x65
 660:	6c6c7546 	cfstr64vs	mvdx7, [ip], #-280	; 0xfffffee8
 664:	69735f00 	ldmdbvs	r3!, {r8, r9, sl, fp, ip, lr}^
 668:	5f00657a 	svcpl	0x0000657a
 66c:	646e6172 	strbtvs	r6, [lr], #-370	; 0xfffffe8e
 670:	5f003834 	svcpl	0x00003834
 674:	72656d65 	rsbvc	r6, r5, #6464	; 0x1940
 678:	636e6567 	cmnvs	lr, #432013312	; 0x19c00000
 67c:	775f0079 			; <UNDEFINED> instruction: 0x775f0079
 680:	6f747263 	svcvs	0x00747263
 684:	735f626d 	cmpvc	pc, #-805306362	; 0xd0000006
 688:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
 68c:	63775f00 	cmnvs	r7, #0, 30
 690:	6f747273 	svcvs	0x00747273
 694:	5f73626d 	svcpl	0x0073626d
 698:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
 69c:	6f6c0065 	svcvs	0x006c0065
 6a0:	6c20676e 	stcvs	7, cr6, [r0], #-440	; 0xfffffe48
 6a4:	20676e6f 	rsbcs	r6, r7, pc, ror #28
 6a8:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
 6ac:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
 6b0:	746e6920 	strbtvc	r6, [lr], #-2336	; 0xfffff6e0
 6b4:	626c5f00 	rsbvs	r5, ip, #0, 30
 6b8:	7a697366 	bvc	1a5d458 <startup-0x1e5a2ba8>
 6bc:	65720065 	ldrbvs	r0, [r2, #-101]!	; 0xffffff9b
 6c0:	65766f6d 	ldrbvs	r6, [r6, #-3949]!	; 0xfffff093
 6c4:	6c5f5f00 	mrrcvs	15, 0, r5, pc, cr0	; <UNPREDICTABLE>
 6c8:	6c61636f 	stclvs	3, cr6, [r1], #-444	; 0xfffffe44
 6cc:	00745f65 	rsbseq	r5, r4, r5, ror #30
 6d0:	72626d5f 	rsbvc	r6, r2, #6080	; 0x17c0
 6d4:	63776f74 	cmnvs	r7, #116, 30	; 0x1d0
 6d8:	6174735f 	cmnvs	r4, pc, asr r3
 6dc:	5f006574 	svcpl	0x00006574
 6e0:	5f6d745f 	svcpl	0x006d745f
 6e4:	00636573 	rsbeq	r6, r3, r3, ror r5
 6e8:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
 6ec:	6e6f6c20 	cdpvs	12, 6, cr6, cr15, cr0, {1}
 6f0:	6e692067 	cdpvs	0, 6, cr2, cr9, cr7, {3}
 6f4:	755f0074 	ldrbvc	r0, [pc, #-116]	; 688 <startup-0x1ffff978>
 6f8:	00667562 	rsbeq	r7, r6, r2, ror #10
 6fc:	7361625f 	cmnvc	r1, #-268435451	; 0xf0000005
 700:	5f5f0065 	svcpl	0x005f0065
 704:	685f6d74 	ldmdavs	pc, {r2, r4, r5, r6, r8, sl, fp, sp, lr}^	; <UNPREDICTABLE>
 708:	0072756f 	rsbseq	r7, r2, pc, ror #10
 70c:	66735f5f 	uhsaxvs	r5, r3, pc	; <UNPREDICTABLE>
 710:	6e6f5f00 	cdpvs	15, 6, cr5, cr15, cr0, {0}
 714:	6978655f 	ldmdbvs	r8!, {r0, r1, r2, r3, r4, r6, r8, sl, sp, lr}^
 718:	72615f74 	rsbvc	r5, r1, #116, 30	; 0x1d0
 71c:	5f007367 	svcpl	0x00007367
 720:	6b6f6f63 	blvs	1bdc4b4 <startup-0x1e423b4c>
 724:	5f006569 	svcpl	0x00006569
 728:	6c67735f 	stclvs	3, cr7, [r7], #-380	; 0xfffffe84
 72c:	69006575 	stmdbvs	r0, {r0, r2, r4, r5, r6, r8, sl, sp, lr}
 730:	706d4573 	rsbvc	r4, sp, r3, ror r5
 734:	5f007974 	svcpl	0x00007974
 738:	67616c66 	strbvs	r6, [r1, -r6, ror #24]!
 73c:	695f0073 	ldmdbvs	pc, {r0, r1, r4, r5, r6}^	; <UNPREDICTABLE>
 740:	78635f73 	stmdavc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 744:	735f0061 	cmpvc	pc, #97, 0	; 0x61
 748:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
 74c:	6c625f00 	stclvs	15, cr5, [r2], #-0
 750:	7a69736b 	bvc	1a5d504 <startup-0x1e5a2afc>
 754:	75710065 	ldrbvc	r0, [r1, #-101]!	; 0xffffff9b
 758:	00657565 	rsbeq	r7, r5, r5, ror #10
 75c:	7476635f 	ldrbtvc	r6, [r6], #-863	; 0xfffffca1
 760:	00667562 	rsbeq	r7, r6, r2, ror #10
 764:	66666f5f 	uqsaxvs	r6, r6, pc	; <UNPREDICTABLE>
 768:	00746573 	rsbseq	r6, r4, r3, ror r5
 76c:	73626d5f 	cmnvc	r2, #6080	; 0x17c0
 770:	776f7472 			; <UNDEFINED> instruction: 0x776f7472
 774:	735f7363 	cmpvc	pc, #-1946157055	; 0x8c000001
 778:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
 77c:	626d5f00 	rsbvs	r5, sp, #0, 30
 780:	6e656c72 	mcrvs	12, 3, r6, cr5, cr2, {3}
 784:	6174735f 	cmnvs	r4, pc, asr r3
 788:	5f006574 	svcpl	0x00006574
 78c:	72616e66 	rsbvc	r6, r1, #1632	; 0x660
 790:	5f007367 	svcpl	0x00007367
 794:	00736e66 	rsbseq	r6, r3, r6, ror #28
 798:	6769735f 			; <UNDEFINED> instruction: 0x6769735f
 79c:	665f006e 	ldrbvs	r0, [pc], -lr, rrx
 7a0:	6b636f6c 	blvs	18dc558 <startup-0x1e723aa8>
 7a4:	5f00745f 	svcpl	0x0000745f
 7a8:	65647473 	strbvs	r7, [r4, #-1139]!	; 0xfffffb8d
 7ac:	5f007272 	svcpl	0x00007272
 7b0:	69676942 	stmdbvs	r7!, {r1, r6, r8, fp, sp, lr}^
 7b4:	5f00746e 	svcpl	0x0000746e
 7b8:	6d6d6167 	stfvse	f6, [sp, #-412]!	; 0xfffffe64
 7bc:	69735f61 	ldmdbvs	r3!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
 7c0:	61676e67 	cmnvs	r7, r7, ror #28
 7c4:	725f006d 	subsvc	r0, pc, #109, 0	; 0x6d
 7c8:	6c757365 	ldclvs	3, cr7, [r5], #-404	; 0xfffffe6c
 7cc:	006b5f74 	rsbeq	r5, fp, r4, ror pc
 7d0:	6d745f5f 	ldclvs	15, cr5, [r4, #-380]!	; 0xfffffe84
 7d4:	775f5f00 	ldrbvc	r5, [pc, -r0, lsl #30]
 7d8:	00626863 	rsbeq	r6, r2, r3, ror #16
 7dc:	6474735f 	ldrbtvs	r7, [r4], #-863	; 0xfffffca1
 7e0:	0074756f 	rsbseq	r7, r4, pc, ror #10
 7e4:	7476635f 	ldrbtvc	r6, [r6], #-863	; 0xfffffca1
 7e8:	006e656c 	rsbeq	r6, lr, ip, ror #10
 7ec:	6c69665f 	stclvs	6, cr6, [r9], #-380	; 0xfffffe84
 7f0:	6e5f0065 	cdpvs	0, 5, cr0, cr15, cr5, {3}
 7f4:	73626f69 	cmnvc	r2, #420	; 0x1a4
 7f8:	65657000 	strbvs	r7, [r5, #-0]!
 7fc:	6873006b 	ldmdavs	r3!, {r0, r1, r3, r5, r6}^
 800:	2074726f 	rsbscs	r7, r4, pc, ror #4
 804:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
 808:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
 80c:	746e6920 	strbtvc	r6, [lr], #-2336	; 0xfffff6e0
 810:	74615f00 	strbtvc	r5, [r1], #-3840	; 0xfffff100
 814:	74697865 	strbtvc	r7, [r9], #-2149	; 0xfffff79b
 818:	735f0030 	cmpvc	pc, #48, 0	; 0x30
 81c:	616e6769 	cmnvs	lr, r9, ror #14
 820:	75625f6c 	strbvc	r5, [r2, #-3948]!	; 0xfffff094
 824:	615f0066 	cmpvs	pc, r6, rrx
 828:	69746373 	ldmdbvs	r4!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 82c:	625f656d 	subsvs	r6, pc, #457179136	; 0x1b400000
 830:	5f006675 	svcpl	0x00006675
 834:	75736572 	ldrbvc	r6, [r3, #-1394]!	; 0xfffffa8e
 838:	5f00746c 	svcpl	0x0000746c
 83c:	6863775f 	stmdavs	r3!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 840:	4f4c5f00 	svcmi	0x004c5f00
 844:	545f4b43 	ldrbpl	r4, [pc], #-2883	; 84c <startup-0x1ffff7b4>
 848:	6e697700 	cdpvs	7, 6, cr7, cr9, cr0, {0}
 84c:	00745f74 	rsbseq	r5, r4, r4, ror pc
 850:	616c665f 	cmnvs	ip, pc, asr r6
 854:	00327367 	eorseq	r7, r2, r7, ror #6
 858:	6d745f5f 	ldclvs	15, cr5, [r4, #-380]!	; 0xfffffe84
 85c:	6165795f 	cmnvs	r5, pc, asr r9
 860:	6e5f0072 	mrcvs	0, 2, r0, cr15, cr2, {3}
 864:	6c6c616d 	stfvse	f6, [ip], #-436	; 0xfffffe4c
 868:	5f00636f 	svcpl	0x0000636f
 86c:	7478656e 	ldrbtvc	r6, [r8], #-1390	; 0xfffffa92
 870:	5f5f0066 	svcpl	0x005f0066
 874:	6d5f6d74 	ldclvs	13, cr6, [pc, #-464]	; 6ac <startup-0x1ffff954>
 878:	5f006e6f 	svcpl	0x00006e6f
 87c:	78657461 	stmdavc	r5!, {r0, r5, r6, sl, ip, sp, lr}^
 880:	5f007469 	svcpl	0x00007469
 884:	6964735f 	stmdbvs	r4!, {r0, r1, r2, r3, r4, r6, r8, r9, ip, sp, lr}^
 888:	696e6964 	stmdbvs	lr!, {r2, r5, r6, r8, fp, sp, lr}^
 88c:	6f5f0074 	svcvs	0x005f0074
 890:	745f6666 	ldrbvc	r6, [pc], #-1638	; 898 <startup-0x1ffff768>
 894:	72665f00 	rsbvc	r5, r6, #0, 30
 898:	696c6565 	stmdbvs	ip!, {r0, r2, r5, r6, r8, sl, sp, lr}^
 89c:	5f007473 	svcpl	0x00007473
 8a0:	6f746377 	svcvs	0x00746377
 8a4:	735f626d 	cmpvc	pc, #-805306362	; 0xd0000006
 8a8:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
 8ac:	6f425f00 	svcvs	0x00425f00
 8b0:	5f006c6f 	svcpl	0x00006c6f
 8b4:	0077656e 	rsbseq	r6, r7, lr, ror #10
 8b8:	655f685f 	ldrbvs	r6, [pc, #-2143]	; 61 <startup-0x1fffff9f>
 8bc:	6f6e7272 	svcvs	0x006e7272
 8c0:	6f687300 	svcvs	0x00687300
 8c4:	69207472 	stmdbvs	r0!, {r1, r4, r5, r6, sl, ip, sp, lr}
 8c8:	5f00746e 	svcpl	0x0000746e
 8cc:	5f6d745f 	svcpl	0x006d745f
 8d0:	79616479 	stmdbvc	r1!, {r0, r3, r4, r5, r6, sl, sp, lr}^
 8d4:	735f5f00 	cmpvc	pc, #0, 30
 8d8:	00667562 	rsbeq	r7, r6, r2, ror #10
 8dc:	626f695f 	rsbvs	r6, pc, #1556480	; 0x17c000
 8e0:	5f5f0073 	svcpl	0x005f0073
 8e4:	454c4946 	strbmi	r4, [ip, #-2374]	; 0xfffff6ba
 8e8:	626d5f00 	rsbvs	r5, sp, #0, 30
 8ec:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
 8f0:	00745f65 	rsbseq	r5, r4, r5, ror #30
 8f4:	46735f5f 	uhsaxmi	r5, r3, pc	; <UNPREDICTABLE>
 8f8:	00454c49 	subeq	r4, r5, r9, asr #24
 8fc:	73626d5f 	cmnvc	r2, #6080	; 0x17c0
 900:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
 904:	61725f00 	cmnvs	r2, r0, lsl #30
 908:	6e5f646e 	cdpvs	4, 5, cr6, cr15, cr14, {3}
 90c:	00747865 	rsbseq	r7, r4, r5, ror #16
 910:	65736e69 	ldrbvs	r6, [r3, #-3689]!	; 0xfffff197
 914:	5f007472 	svcpl	0x00007472
 918:	656c626d 	strbvs	r6, [ip, #-621]!	; 0xfffffd93
 91c:	74735f6e 	ldrbtvc	r5, [r3], #-3950	; 0xfffff092
 920:	00657461 	rsbeq	r7, r5, r1, ror #8
 924:	636e695f 	cmnvs	lr, #1556480	; 0x17c000
 928:	6e695f00 	cdpvs	15, 6, cr5, cr9, cr0, {0}
 92c:	6c5f0064 	mrrcvs	0, 6, r0, pc, cr4	; <UNPREDICTABLE>
 930:	6c61636f 	stclvs	3, cr6, [r1], #-444	; 0xfffffe44
 934:	5f5f0065 	svcpl	0x005f0065
 938:	61656c63 	cmnvs	r5, r3, ror #24
 93c:	0070756e 	rsbseq	r7, r0, lr, ror #10
 940:	736e755f 	cmnvc	lr, #398458880	; 0x17c00000
 944:	69636570 	stmdbvs	r3!, {r4, r5, r6, r8, sl, sp, lr}^
 948:	64656966 	strbtvs	r6, [r5], #-2406	; 0xfffff69a
 94c:	636f6c5f 	cmnvs	pc, #24320	; 0x5f00
 950:	5f656c61 	svcpl	0x00656c61
 954:	6f666e69 	svcvs	0x00666e69
 958:	616d5f00 	cmnvs	sp, r0, lsl #30
 95c:	73647778 	cmnvc	r4, #120, 14	; 0x1e00000
 960:	65725f00 	ldrbvs	r5, [r2, #-3840]!	; 0xfffff100
 964:	00746e65 	rsbseq	r6, r4, r5, ror #28
 968:	6565735f 	strbvs	r7, [r5, #-863]!	; 0xfffffca1
 96c:	5f5f0064 	svcpl	0x005f0064
 970:	6e756f63 	cdpvs	15, 7, cr6, cr5, cr3, {3}
 974:	5f5f0074 	svcpl	0x005f0074
 978:	6b636f6c 	blvs	18dc730 <startup-0x1e7238d0>
 97c:	765f5f00 	ldrbvc	r5, [pc], -r0, lsl #30
 980:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
 984:	65735f00 	ldrbvs	r5, [r3, #-3840]!	; 0xfffff100
 988:	5f006b65 	svcpl	0x00006b65
 98c:	736f7066 	cmnvc	pc, #102, 0	; 0x66
 990:	5f00745f 	svcpl	0x0000745f
 994:	5f6d745f 	svcpl	0x006d745f
 998:	006e696d 	rsbeq	r6, lr, sp, ror #18
 99c:	416a626f 	cmnmi	sl, pc, ror #4
 9a0:	79617272 	stmdbvc	r1!, {r1, r4, r5, r6, r9, ip, sp, lr}^
 9a4:	756d5f00 	strbvc	r5, [sp, #-3840]!	; 0xfffff100
 9a8:	5f00746c 	svcpl	0x0000746c
 9ac:	74727473 	ldrbtvc	r7, [r2], #-1139	; 0xfffffb8d
 9b0:	6c5f6b6f 	mrrcvs	11, 6, r6, pc, cr15	; <UNPREDICTABLE>
 9b4:	00747361 	rsbseq	r7, r4, r1, ror #6
 9b8:	72616572 	rsbvc	r6, r1, #478150656	; 0x1c800000
 9bc:	65746900 	ldrbvs	r6, [r4, #-2304]!	; 0xfffff700
 9c0:	756f436d 	strbvc	r4, [pc, #-877]!	; 65b <startup-0x1ffff9a5>
 9c4:	5f00746e 	svcpl	0x0000746e
 9c8:	79746e66 	ldmdbvc	r4!, {r1, r2, r5, r6, r9, sl, fp, sp, lr}^
 9cc:	00736570 	rsbseq	r6, r3, r0, ror r5
 9d0:	6464615f 	strbtvs	r6, [r4], #-351	; 0xfffffea1
 9d4:	555f5f00 	ldrbpl	r5, [pc, #-3840]	; fffffadc <rear+0xdfff78b4>
 9d8:	676e6f4c 	strbvs	r6, [lr, -ip, asr #30]!
 9dc:	65675f00 	strbvs	r5, [r7, #-3840]!	; 0xfffff100
 9e0:	74616474 	strbtvc	r6, [r1], #-1140	; 0xfffffb8c
 9e4:	72655f65 	rsbvc	r5, r5, #404	; 0x194
 9e8:	72660072 	rsbvc	r0, r6, #114, 0	; 0x72
 9ec:	00746e6f 	rsbseq	r6, r4, pc, ror #28
 9f0:	6f6c675f 	svcvs	0x006c675f
 9f4:	5f6c6162 	svcpl	0x006c6162
 9f8:	75706d69 	ldrbvc	r6, [r0, #-3433]!	; 0xfffff297
 9fc:	705f6572 	subsvc	r6, pc, r2, ror r5	; <UNPREDICTABLE>
 a00:	5f007274 	svcpl	0x00007274
 a04:	73756e75 	cmnvc	r5, #1872	; 0x750
 a08:	725f6465 	subsvc	r6, pc, #1694498816	; 0x65000000
 a0c:	00646e61 	rsbeq	r6, r4, r1, ror #28
 a10:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
 a14:	672f7372 			; <UNDEFINED> instruction: 0x672f7372
 a18:	756c6c6f 	strbvc	r6, [ip, #-3183]!	; 0xfffff391
 a1c:	6f442f6d 	svcvs	0x00442f6d
 a20:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0xfffffa9d
 a24:	2f73746e 	svccs	0x0073746e
 a28:	6c706f6d 	ldclvs	15, cr6, [r0], #-436	; 0xfffffe4c
 a2c:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
 a30:	6f697461 	svcvs	0x00697461
 a34:	2f72656e 	svccs	0x0072656e
 a38:	2d504f4d 	ldclcs	15, cr4, [r0, #-308]	; 0xfffffecc
 a3c:	6c657053 	stclvs	0, cr7, [r5], #-332	; 0xfffffeb4
 a40:	616e532f 	cmnvs	lr, pc, lsr #6
 a44:	712f656b 			; <UNDEFINED> instruction: 0x712f656b
 a48:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0xfffffa8b
 a4c:	5f00632e 	svcpl	0x0000632e
 a50:	00736477 	rsbseq	r6, r3, r7, ror r4
 a54:	6d745f5f 	ldclvs	15, cr5, [r4, #-380]!	; 0xfffffe84
 a58:	6164775f 	cmnvs	r4, pc, asr r7
 a5c:	675f0079 			; <UNDEFINED> instruction: 0x675f0079
 a60:	0065756c 	rsbeq	r7, r5, ip, ror #10
 a64:	34366c5f 	ldrtcc	r6, [r6], #-3167	; 0xfffff3a1
 a68:	75625f61 	strbvc	r5, [r2, #-3937]!	; 0xfffff09f
 a6c:	735f0066 	cmpvc	pc, #102, 0	; 0x66
 a70:	665f6769 	ldrbvs	r6, [pc], -r9, ror #14
 a74:	00636e75 	rsbeq	r6, r3, r5, ror lr
 a78:	75626e5f 	strbvc	r6, [r2, #-3679]!	; 0xfffff1a1
 a7c:	755f0066 	ldrbvc	r0, [pc, #-102]	; a1e <startup-0x1ffff5e2>
 a80:	6573756e 	ldrbvs	r7, [r3, #-1390]!	; 0xfffffa92
 a84:	5f5f0064 	svcpl	0x005f0064
 a88:	695f6d74 	ldmdbvs	pc, {r2, r4, r5, r6, r8, sl, fp, sp, lr}^	; <UNPREDICTABLE>
 a8c:	74736473 	ldrbtvc	r6, [r3], #-1139	; 0xfffffb8d
 a90:	6f6c5f00 	svcvs	0x006c5f00
 a94:	746c6163 	strbtvc	r6, [ip], #-355	; 0xfffffe9d
 a98:	5f656d69 	svcpl	0x00656d69
 a9c:	00667562 	rsbeq	r7, r6, r2, ror #10
 aa0:	6f6c635f 	svcvs	0x006c635f
 aa4:	5f006573 	svcpl	0x00006573
 aa8:	00383472 	eorseq	r3, r8, r2, ror r4
 aac:	74626d5f 	strbtvc	r6, [r2], #-3423	; 0xfffff2a1
 ab0:	5f63776f 	svcpl	0x0063776f
 ab4:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
 ab8:	705f0065 	subsvc	r0, pc, r5, rrx
 abc:	5f007335 	svcpl	0x00007335
 ac0:	5f6d745f 	svcpl	0x006d745f
 ac4:	7961646d 	stmdbvc	r1!, {r0, r2, r3, r5, r6, sl, sp, lr}^
	...

Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	206d7241 	rsbcs	r7, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d39 	eorscc	r2, r2, r9, lsr sp
  30:	712d3931 			; <UNDEFINED> instruction: 0x712d3931
  34:	616d2d34 	cmnvs	sp, r4, lsr sp
  38:	29726f6a 	ldmdbcs	r2!, {r1, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
  3c:	322e3920 	eorcc	r3, lr, #32, 18	; 0x80000
  40:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  44:	31393130 	teqcc	r9, r0, lsr r1
  48:	20353230 	eorscs	r3, r5, r0, lsr r2
  4c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  50:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  54:	415b2029 	cmpmi	fp, r9, lsr #32
  58:	612f4d52 			; <UNDEFINED> instruction: 0x612f4d52
  5c:	392d6d72 	pushcc	{r1, r4, r5, r6, r8, sl, fp, sp, lr}
  60:	6172622d 	cmnvs	r2, sp, lsr #4
  64:	2068636e 	rsbcs	r6, r8, lr, ror #6
  68:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
  6c:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
  70:	37373220 	ldrcc	r3, [r7, -r0, lsr #4]!
  74:	5d393935 			; <UNDEFINED> instruction: 0x5d393935
	...

Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002b41 	andeq	r2, r0, r1, asr #22
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000021 	andeq	r0, r0, r1, lsr #32
  10:	2d533605 	ldclcs	6, cr3, [r3, #-20]	; 0xffffffec
  14:	0c06004d 	stceq	0, cr0, [r6], {77}	; 0x4d
  18:	01094d07 	tsteq	r9, r7, lsl #26
  1c:	01140412 	tsteq	r4, r2, lsl r4
  20:	03170115 	tsteq	r7, #1073741829	; 0x40000005
  24:	01190118 	tsteq	r9, r8, lsl r1
  28:	061e011a 			; <UNDEFINED> instruction: 0x061e011a

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	00000018 	andeq	r0, r0, r8, lsl r0
  14:	00000000 	andeq	r0, r0, r0
  18:	20000010 	andcs	r0, r0, r0, lsl r0
  1c:	0000001a 	andeq	r0, r0, sl, lsl r0
  20:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  24:	41018e02 	tstmi	r1, r2, lsl #28
  28:	0000070d 	andeq	r0, r0, sp, lsl #14
  2c:	0000001c 	andeq	r0, r0, ip, lsl r0
  30:	00000000 	andeq	r0, r0, r0
  34:	2000002a 	andcs	r0, r0, sl, lsr #32
  38:	00000032 	andeq	r0, r0, r2, lsr r0
  3c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  40:	41018e02 	tstmi	r1, r2, lsl #28
  44:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
  48:	00000007 	andeq	r0, r0, r7
  4c:	0000001c 	andeq	r0, r0, ip, lsl r0
  50:	00000000 	andeq	r0, r0, r0
  54:	2000005c 	andcs	r0, r0, ip, asr r0
  58:	0000003c 	andeq	r0, r0, ip, lsr r0
  5c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  60:	41018e02 	tstmi	r1, r2, lsl #28
  64:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
  68:	00000007 	andeq	r0, r0, r7
  6c:	0000001c 	andeq	r0, r0, ip, lsl r0
  70:	00000000 	andeq	r0, r0, r0
  74:	20000098 	mulcs	r0, r8, r0
  78:	0000002a 	andeq	r0, r0, sl, lsr #32
  7c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  80:	41018e02 	tstmi	r1, r2, lsl #28
  84:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
  88:	00000007 	andeq	r0, r0, r7
  8c:	0000001c 	andeq	r0, r0, ip, lsl r0
  90:	00000000 	andeq	r0, r0, r0
  94:	200000c2 	andcs	r0, r0, r2, asr #1
  98:	0000002a 	andeq	r0, r0, sl, lsr #32
  9c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  a0:	41018e02 	tstmi	r1, r2, lsl #28
  a4:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
  a8:	00000007 	andeq	r0, r0, r7
  ac:	0000001c 	andeq	r0, r0, ip, lsl r0
  b0:	00000000 	andeq	r0, r0, r0
  b4:	200000ec 	andcs	r0, r0, ip, ror #1
  b8:	00000030 	andeq	r0, r0, r0, lsr r0
  bc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  c0:	41018e02 	tstmi	r1, r2, lsl #28
  c4:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
  c8:	00000007 	andeq	r0, r0, r7
  cc:	0000001c 	andeq	r0, r0, ip, lsl r0
  d0:	00000000 	andeq	r0, r0, r0
  d4:	2000011c 	andcs	r0, r0, ip, lsl r1
  d8:	00000034 	andeq	r0, r0, r4, lsr r0
  dc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  e0:	41018e02 	tstmi	r1, r2, lsl #28
  e4:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
  e8:	00000007 	andeq	r0, r0, r7
  ec:	0000001c 	andeq	r0, r0, ip, lsl r0
  f0:	00000000 	andeq	r0, r0, r0
  f4:	20000150 	andcs	r0, r0, r0, asr r1
  f8:	0000003c 	andeq	r0, r0, ip, lsr r0
  fc:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
 100:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 104:	180e4101 	stmdane	lr, {r0, r8, lr}
 108:	00070d41 	andeq	r0, r7, r1, asr #26
 10c:	0000001c 	andeq	r0, r0, ip, lsl r0
 110:	00000000 	andeq	r0, r0, r0
 114:	2000018c 	andcs	r0, r0, ip, lsl #3
 118:	0000003c 	andeq	r0, r0, ip, lsr r0
 11c:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
 120:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 124:	180e4101 	stmdane	lr, {r0, r8, lr}
 128:	00070d41 	andeq	r0, r7, r1, asr #26
 12c:	00000018 	andeq	r0, r0, r8, lsl r0
 130:	00000000 	andeq	r0, r0, r0
 134:	200001c8 	andcs	r0, r0, r8, asr #3
 138:	0000002e 	andeq	r0, r0, lr, lsr #32
 13c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 140:	41018e02 	tstmi	r1, r2, lsl #28
 144:	0000070d 	andeq	r0, r0, sp, lsl #14
 148:	00000018 	andeq	r0, r0, r8, lsl r0
 14c:	00000000 	andeq	r0, r0, r0
 150:	200001f6 	strdcs	r0, [r0], -r6
 154:	0000002e 	andeq	r0, r0, lr, lsr #32
 158:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 15c:	41018e02 	tstmi	r1, r2, lsl #28
 160:	0000070d 	andeq	r0, r0, sp, lsl #14
 164:	00000018 	andeq	r0, r0, r8, lsl r0
 168:	00000000 	andeq	r0, r0, r0
 16c:	20000224 	andcs	r0, r0, r4, lsr #4
 170:	0000002e 	andeq	r0, r0, lr, lsr #32
 174:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 178:	41018e02 	tstmi	r1, r2, lsl #28
 17c:	0000070d 	andeq	r0, r0, sp, lsl #14
 180:	00000018 	andeq	r0, r0, r8, lsl r0
 184:	00000000 	andeq	r0, r0, r0
 188:	20000252 	andcs	r0, r0, r2, asr r2
 18c:	0000002e 	andeq	r0, r0, lr, lsr #32
 190:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 194:	41018e02 	tstmi	r1, r2, lsl #28
 198:	0000070d 	andeq	r0, r0, sp, lsl #14
 19c:	0000001c 	andeq	r0, r0, ip, lsl r0
 1a0:	00000000 	andeq	r0, r0, r0
 1a4:	20000280 	andcs	r0, r0, r0, lsl #5
 1a8:	0000002a 	andeq	r0, r0, sl, lsr #32
 1ac:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 1b0:	41018e02 	tstmi	r1, r2, lsl #28
 1b4:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 1b8:	00000007 	andeq	r0, r0, r7
 1bc:	0000001c 	andeq	r0, r0, ip, lsl r0
 1c0:	00000000 	andeq	r0, r0, r0
 1c4:	200002aa 	andcs	r0, r0, sl, lsr #5
 1c8:	0000004c 	andeq	r0, r0, ip, asr #32
 1cc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 1d0:	41018e02 	tstmi	r1, r2, lsl #28
 1d4:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 1d8:	00000007 	andeq	r0, r0, r7
 1dc:	0000000c 	andeq	r0, r0, ip
 1e0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 1e4:	7c020001 	stcvc	0, cr0, [r2], {1}
 1e8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 1ec:	0000000c 	andeq	r0, r0, ip
 1f0:	000001dc 	ldrdeq	r0, [r0], -ip
 1f4:	20000000 	andcs	r0, r0, r0
 1f8:	0000000c 	andeq	r0, r0, ip
 1fc:	0000001c 	andeq	r0, r0, ip, lsl r0
 200:	000001dc 	ldrdeq	r0, [r0], -ip
 204:	200002f8 	strdcs	r0, [r0], -r8
 208:	00000020 	andeq	r0, r0, r0, lsr #32
 20c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 210:	41018e02 	tstmi	r1, r2, lsl #28
 214:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 218:	00000007 	andeq	r0, r0, r7
 21c:	0000001c 	andeq	r0, r0, ip, lsl r0
 220:	000001dc 	ldrdeq	r0, [r0], -ip
 224:	20000318 	andcs	r0, r0, r8, lsl r3
 228:	00000062 	andeq	r0, r0, r2, rrx
 22c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 230:	41018e02 	tstmi	r1, r2, lsl #28
 234:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 238:	00000007 	andeq	r0, r0, r7
 23c:	0000001c 	andeq	r0, r0, ip, lsl r0
 240:	000001dc 	ldrdeq	r0, [r0], -ip
 244:	2000037a 	andcs	r0, r0, sl, ror r3
 248:	00000062 	andeq	r0, r0, r2, rrx
 24c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 250:	41018e02 	tstmi	r1, r2, lsl #28
 254:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 258:	00000007 	andeq	r0, r0, r7
 25c:	0000001c 	andeq	r0, r0, ip, lsl r0
 260:	000001dc 	ldrdeq	r0, [r0], -ip
 264:	200003dc 	ldrdcs	r0, [r0], -ip
 268:	000000ac 	andeq	r0, r0, ip, lsr #1
 26c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 270:	41018e02 	tstmi	r1, r2, lsl #28
 274:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 278:	00000007 	andeq	r0, r0, r7
 27c:	0000001c 	andeq	r0, r0, ip, lsl r0
 280:	000001dc 	ldrdeq	r0, [r0], -ip
 284:	20000488 	andcs	r0, r0, r8, lsl #9
 288:	0000002c 	andeq	r0, r0, ip, lsr #32
 28c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 290:	41018e02 	tstmi	r1, r2, lsl #28
 294:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 298:	00000007 	andeq	r0, r0, r7
 29c:	0000001c 	andeq	r0, r0, ip, lsl r0
 2a0:	000001dc 	ldrdeq	r0, [r0], -ip
 2a4:	200004b4 			; <UNDEFINED> instruction: 0x200004b4
 2a8:	000000c2 	andeq	r0, r0, r2, asr #1
 2ac:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 2b0:	41018e02 	tstmi	r1, r2, lsl #28
 2b4:	0d41300e 	stcleq	0, cr3, [r1, #-56]	; 0xffffffc8
 2b8:	00000007 	andeq	r0, r0, r7
 2bc:	0000001c 	andeq	r0, r0, ip, lsl r0
 2c0:	000001dc 	ldrdeq	r0, [r0], -ip
 2c4:	20000576 	andcs	r0, r0, r6, ror r5
 2c8:	00000048 	andeq	r0, r0, r8, asr #32
 2cc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 2d0:	41018e02 	tstmi	r1, r2, lsl #28
 2d4:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 2d8:	00000007 	andeq	r0, r0, r7
 2dc:	00000018 	andeq	r0, r0, r8, lsl r0
 2e0:	000001dc 	ldrdeq	r0, [r0], -ip
 2e4:	200005be 			; <UNDEFINED> instruction: 0x200005be
 2e8:	0000006a 	andeq	r0, r0, sl, rrx
 2ec:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 2f0:	41018e02 	tstmi	r1, r2, lsl #28
 2f4:	0000070d 	andeq	r0, r0, sp, lsl #14
 2f8:	0000001c 	andeq	r0, r0, ip, lsl r0
 2fc:	000001dc 	ldrdeq	r0, [r0], -ip
 300:	20000628 	andcs	r0, r0, r8, lsr #12
 304:	00000078 	andeq	r0, r0, r8, ror r0
 308:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 30c:	41018e02 	tstmi	r1, r2, lsl #28
 310:	0d41200e 	stcleq	0, cr2, [r1, #-56]	; 0xffffffc8
 314:	00000007 	andeq	r0, r0, r7
 318:	0000001c 	andeq	r0, r0, ip, lsl r0
 31c:	000001dc 	ldrdeq	r0, [r0], -ip
 320:	200006a0 	andcs	r0, r0, r0, lsr #13
 324:	00000018 	andeq	r0, r0, r8, lsl r0
 328:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 32c:	41018e02 	tstmi	r1, r2, lsl #28
 330:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 334:	00000007 	andeq	r0, r0, r7
 338:	00000020 	andeq	r0, r0, r0, lsr #32
 33c:	000001dc 	ldrdeq	r0, [r0], -ip
 340:	200006b8 			; <UNDEFINED> instruction: 0x200006b8
 344:	0000015c 	andeq	r0, r0, ip, asr r1
 348:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
 34c:	87038504 	strhi	r8, [r3, -r4, lsl #10]
 350:	42018e02 	andmi	r8, r1, #2, 28
 354:	4110a80e 	tstmi	r0, lr, lsl #16
 358:	0000070d 	andeq	r0, r0, sp, lsl #14
 35c:	0000001c 	andeq	r0, r0, ip, lsl r0
 360:	000001dc 	ldrdeq	r0, [r0], -ip
 364:	20000814 	andcs	r0, r0, r4, lsl r8
 368:	000000a4 	andeq	r0, r0, r4, lsr #1
 36c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 370:	41018e02 	tstmi	r1, r2, lsl #28
 374:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 378:	00000007 	andeq	r0, r0, r7
 37c:	0000000c 	andeq	r0, r0, ip
 380:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 384:	7c020001 	stcvc	0, cr0, [r2], {1}
 388:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 38c:	0000001c 	andeq	r0, r0, ip, lsl r0
 390:	0000037c 	andeq	r0, r0, ip, ror r3
 394:	200008b8 			; <UNDEFINED> instruction: 0x200008b8
 398:	00000024 	andeq	r0, r0, r4, lsr #32
 39c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 3a0:	41018e02 	tstmi	r1, r2, lsl #28
 3a4:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 3a8:	00000007 	andeq	r0, r0, r7
 3ac:	0000001c 	andeq	r0, r0, ip, lsl r0
 3b0:	0000037c 	andeq	r0, r0, ip, ror r3
 3b4:	200008dc 	ldrdcs	r0, [r0], -ip
 3b8:	00000044 	andeq	r0, r0, r4, asr #32
 3bc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 3c0:	41018e02 	tstmi	r1, r2, lsl #28
 3c4:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 3c8:	00000007 	andeq	r0, r0, r7
 3cc:	0000001c 	andeq	r0, r0, ip, lsl r0
 3d0:	0000037c 	andeq	r0, r0, ip, ror r3
 3d4:	20000920 	andcs	r0, r0, r0, lsr #18
 3d8:	00000068 	andeq	r0, r0, r8, rrx
 3dc:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
 3e0:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 3e4:	380e4101 	stmdacc	lr, {r0, r8, lr}
 3e8:	00070d41 	andeq	r0, r7, r1, asr #26
 3ec:	0000001c 	andeq	r0, r0, ip, lsl r0
 3f0:	0000037c 	andeq	r0, r0, ip, ror r3
 3f4:	20000988 	andcs	r0, r0, r8, lsl #19
 3f8:	00000020 	andeq	r0, r0, r0, lsr #32
 3fc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 400:	41018e02 	tstmi	r1, r2, lsl #28
 404:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 408:	00000007 	andeq	r0, r0, r7
 40c:	0000000c 	andeq	r0, r0, ip
 410:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 414:	7c020001 	stcvc	0, cr0, [r2], {1}
 418:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 41c:	00000018 	andeq	r0, r0, r8, lsl r0
 420:	0000040c 	andeq	r0, r0, ip, lsl #8
 424:	200009a8 	andcs	r0, r0, r8, lsr #19
 428:	0000000a 	andeq	r0, r0, sl
 42c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 430:	41018e02 	tstmi	r1, r2, lsl #28
 434:	0000070d 	andeq	r0, r0, sp, lsl #14
 438:	00000018 	andeq	r0, r0, r8, lsl r0
 43c:	0000040c 	andeq	r0, r0, ip, lsl #8
 440:	200009b2 			; <UNDEFINED> instruction: 0x200009b2
 444:	0000000a 	andeq	r0, r0, sl
 448:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 44c:	41018e02 	tstmi	r1, r2, lsl #28
 450:	0000070d 	andeq	r0, r0, sp, lsl #14
 454:	0000001c 	andeq	r0, r0, ip, lsl r0
 458:	0000040c 	andeq	r0, r0, ip, lsl #8
 45c:	200009bc 			; <UNDEFINED> instruction: 0x200009bc
 460:	00000010 	andeq	r0, r0, r0, lsl r0
 464:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 468:	41018e02 	tstmi	r1, r2, lsl #28
 46c:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 470:	00000007 	andeq	r0, r0, r7
 474:	0000001c 	andeq	r0, r0, ip, lsl r0
 478:	0000040c 	andeq	r0, r0, ip, lsl #8
 47c:	200009cc 	andcs	r0, r0, ip, asr #19
 480:	0000003e 	andeq	r0, r0, lr, lsr r0
 484:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 488:	41018e02 	tstmi	r1, r2, lsl #28
 48c:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 490:	00000007 	andeq	r0, r0, r7
 494:	0000000c 	andeq	r0, r0, ip
 498:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 49c:	7c020001 	stcvc	0, cr0, [r2], {1}
 4a0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 4a4:	00000018 	andeq	r0, r0, r8, lsl r0
 4a8:	00000494 	muleq	r0, r4, r4
 4ac:	20000a0c 	andcs	r0, r0, ip, lsl #20
 4b0:	0000005c 	andeq	r0, r0, ip, asr r0
 4b4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 4b8:	41018e02 	tstmi	r1, r2, lsl #28
 4bc:	0000070d 	andeq	r0, r0, sp, lsl #14
 4c0:	0000001c 	andeq	r0, r0, ip, lsl r0
 4c4:	00000494 	muleq	r0, r4, r4
 4c8:	20000a68 	andcs	r0, r0, r8, ror #20
 4cc:	00000050 	andeq	r0, r0, r0, asr r0
 4d0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 4d4:	41018e02 	tstmi	r1, r2, lsl #28
 4d8:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 4dc:	00000007 	andeq	r0, r0, r7
 4e0:	0000001c 	andeq	r0, r0, ip, lsl r0
 4e4:	00000494 	muleq	r0, r4, r4
 4e8:	20000ab8 			; <UNDEFINED> instruction: 0x20000ab8
 4ec:	00000044 	andeq	r0, r0, r4, asr #32
 4f0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 4f4:	41018e02 	tstmi	r1, r2, lsl #28
 4f8:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 4fc:	00000007 	andeq	r0, r0, r7
 500:	0000001c 	andeq	r0, r0, ip, lsl r0
 504:	00000494 	muleq	r0, r4, r4
 508:	20000afc 	strdcs	r0, [r0], -ip
 50c:	0000005a 	andeq	r0, r0, sl, asr r0
 510:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 514:	41018e02 	tstmi	r1, r2, lsl #28
 518:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 51c:	00000007 	andeq	r0, r0, r7
 520:	00000018 	andeq	r0, r0, r8, lsl r0
 524:	00000494 	muleq	r0, r4, r4
 528:	20000b56 	andcs	r0, r0, r6, asr fp
 52c:	0000003e 	andeq	r0, r0, lr, lsr r0
 530:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 534:	41018e02 	tstmi	r1, r2, lsl #28
 538:	0000070d 	andeq	r0, r0, sp, lsl #14
 53c:	0000001c 	andeq	r0, r0, ip, lsl r0
 540:	00000494 	muleq	r0, r4, r4
 544:	20000b94 	mulcs	r0, r4, fp
 548:	0000008c 	andeq	r0, r0, ip, lsl #1
 54c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 550:	41018e02 	tstmi	r1, r2, lsl #28
 554:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 558:	00000007 	andeq	r0, r0, r7
 55c:	0000001c 	andeq	r0, r0, ip, lsl r0
 560:	00000494 	muleq	r0, r4, r4
 564:	20000c20 	andcs	r0, r0, r0, lsr #24
 568:	0000002a 	andeq	r0, r0, sl, lsr #32
 56c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 570:	41018e02 	tstmi	r1, r2, lsl #28
 574:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 578:	00000007 	andeq	r0, r0, r7
 57c:	0000001c 	andeq	r0, r0, ip, lsl r0
 580:	00000494 	muleq	r0, r4, r4
 584:	20000c4a 	andcs	r0, r0, sl, asr #24
 588:	00000076 	andeq	r0, r0, r6, ror r0
 58c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 590:	41018e02 	tstmi	r1, r2, lsl #28
 594:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 598:	00000007 	andeq	r0, r0, r7
 59c:	0000001c 	andeq	r0, r0, ip, lsl r0
 5a0:	00000494 	muleq	r0, r4, r4
 5a4:	20000cc0 	andcs	r0, r0, r0, asr #25
 5a8:	00000046 	andeq	r0, r0, r6, asr #32
 5ac:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 5b0:	41018e02 	tstmi	r1, r2, lsl #28
 5b4:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 5b8:	00000007 	andeq	r0, r0, r7
 5bc:	0000001c 	andeq	r0, r0, ip, lsl r0
 5c0:	00000494 	muleq	r0, r4, r4
 5c4:	20000d06 	andcs	r0, r0, r6, lsl #26
 5c8:	00000046 	andeq	r0, r0, r6, asr #32
 5cc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 5d0:	41018e02 	tstmi	r1, r2, lsl #28
 5d4:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 5d8:	00000007 	andeq	r0, r0, r7
 5dc:	0000001c 	andeq	r0, r0, ip, lsl r0
 5e0:	00000494 	muleq	r0, r4, r4
 5e4:	20000d4c 	andcs	r0, r0, ip, asr #26
 5e8:	0000005a 	andeq	r0, r0, sl, asr r0
 5ec:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 5f0:	41018e02 	tstmi	r1, r2, lsl #28
 5f4:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 5f8:	00000007 	andeq	r0, r0, r7
 5fc:	0000001c 	andeq	r0, r0, ip, lsl r0
 600:	00000494 	muleq	r0, r4, r4
 604:	20000da6 	andcs	r0, r0, r6, lsr #27
 608:	00000036 	andeq	r0, r0, r6, lsr r0
 60c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 610:	41018e02 	tstmi	r1, r2, lsl #28
 614:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 618:	00000007 	andeq	r0, r0, r7
 61c:	0000001c 	andeq	r0, r0, ip, lsl r0
 620:	00000494 	muleq	r0, r4, r4
 624:	20000ddc 	ldrdcs	r0, [r0], -ip
 628:	00000084 	andeq	r0, r0, r4, lsl #1
 62c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 630:	41018e02 	tstmi	r1, r2, lsl #28
 634:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 638:	00000007 	andeq	r0, r0, r7
 63c:	0000001c 	andeq	r0, r0, ip, lsl r0
 640:	00000494 	muleq	r0, r4, r4
 644:	20000e60 	andcs	r0, r0, r0, ror #28
 648:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 64c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 650:	41018e02 	tstmi	r1, r2, lsl #28
 654:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 658:	00000007 	andeq	r0, r0, r7
 65c:	0000000c 	andeq	r0, r0, ip
 660:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 664:	7c020001 	stcvc	0, cr0, [r2], {1}
 668:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 66c:	00000018 	andeq	r0, r0, r8, lsl r0
 670:	0000065c 	andeq	r0, r0, ip, asr r6
 674:	20000f30 	andcs	r0, r0, r0, lsr pc
 678:	0000001c 	andeq	r0, r0, ip, lsl r0
 67c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 680:	41018e02 	tstmi	r1, r2, lsl #28
 684:	0000070d 	andeq	r0, r0, sp, lsl #14
 688:	00000018 	andeq	r0, r0, r8, lsl r0
 68c:	0000065c 	andeq	r0, r0, ip, asr r6
 690:	20000f4c 	andcs	r0, r0, ip, asr #30
 694:	00000018 	andeq	r0, r0, r8, lsl r0
 698:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 69c:	41018e02 	tstmi	r1, r2, lsl #28
 6a0:	0000070d 	andeq	r0, r0, sp, lsl #14
 6a4:	00000018 	andeq	r0, r0, r8, lsl r0
 6a8:	0000065c 	andeq	r0, r0, ip, asr r6
 6ac:	20000f64 	andcs	r0, r0, r4, ror #30
 6b0:	00000024 	andeq	r0, r0, r4, lsr #32
 6b4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 6b8:	41018e02 	tstmi	r1, r2, lsl #28
 6bc:	0000070d 	andeq	r0, r0, sp, lsl #14
 6c0:	00000018 	andeq	r0, r0, r8, lsl r0
 6c4:	0000065c 	andeq	r0, r0, ip, asr r6
 6c8:	20000f88 	andcs	r0, r0, r8, lsl #31
 6cc:	00000014 	andeq	r0, r0, r4, lsl r0
 6d0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 6d4:	41018e02 	tstmi	r1, r2, lsl #28
 6d8:	0000070d 	andeq	r0, r0, sp, lsl #14
 6dc:	0000001c 	andeq	r0, r0, ip, lsl r0
 6e0:	0000065c 	andeq	r0, r0, ip, asr r6
 6e4:	20000f9c 	mulcs	r0, ip, pc	; <UNPREDICTABLE>
 6e8:	00000064 	andeq	r0, r0, r4, rrx
 6ec:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 6f0:	41018e02 	tstmi	r1, r2, lsl #28
 6f4:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 6f8:	00000007 	andeq	r0, r0, r7
 6fc:	0000001c 	andeq	r0, r0, ip, lsl r0
 700:	0000065c 	andeq	r0, r0, ip, asr r6
 704:	20001000 	andcs	r1, r0, r0
 708:	0000004c 	andeq	r0, r0, ip, asr #32
 70c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 710:	41018e02 	tstmi	r1, r2, lsl #28
 714:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 718:	00000007 	andeq	r0, r0, r7
 71c:	00000018 	andeq	r0, r0, r8, lsl r0
 720:	0000065c 	andeq	r0, r0, ip, asr r6
 724:	2000104c 	andcs	r1, r0, ip, asr #32
 728:	00000010 	andeq	r0, r0, r0, lsl r0
 72c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 730:	41018e02 	tstmi	r1, r2, lsl #28
 734:	0000070d 	andeq	r0, r0, sp, lsl #14
 738:	0000000c 	andeq	r0, r0, ip
 73c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 740:	7c010001 	stcvc	0, cr0, [r1], {1}
 744:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 748:	0000000c 	andeq	r0, r0, ip
 74c:	00000738 	andeq	r0, r0, r8, lsr r7
 750:	2000105d 	andcs	r1, r0, sp, asr r0
 754:	0000010a 	andeq	r0, r0, sl, lsl #2

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	200002f8 	strdcs	r0, [r0], -r8
   4:	200008b8 			; <UNDEFINED> instruction: 0x200008b8
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...
