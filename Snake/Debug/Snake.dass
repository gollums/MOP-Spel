
./Debug/Snake.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:
 #define RESTART 0xD
 
__attribute__((naked)) __attribute__((section (".start_section")) )
void startup ( void )
{
__asm__ volatile(" LDR R0,=0x2001C000\n");		/* set stack */
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <startup+0xc>)
__asm__ volatile(" MOV SP,R0\n");
20000002:	4685      	mov	sp, r0
__asm__ volatile(" BL main\n");					/* call main */
20000004:	f000 fb58 	bl	200006b8 <main>
__asm__ volatile(".L1: B .L1\n");				/* never return */
20000008:	e7fe      	b.n	20000008 <startup+0x8>
};
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <ascii_init>:
#include <defines.h>
#include <asciidisplay.h>

void ascii_init(void){ /**/
20000010:	b580      	push	{r7, lr}
20000012:	af00      	add	r7, sp, #0
    /*function set*/
    funtion_set();
20000014:	f000 f8ef 	bl	200001f6 <funtion_set>
    
    /*Display Control*/
    display_control();
20000018:	f000 f904 	bl	20000224 <display_control>
    
    /*Clear Display*/
    clear_display();
2000001c:	f000 f8d4 	bl	200001c8 <clear_display>
    
    /*Entry mode set*/
    entry_mode_set();
20000020:	f000 f917 	bl	20000252 <entry_mode_set>
}
20000024:	46c0      	nop			; (mov r8, r8)
20000026:	46bd      	mov	sp, r7
20000028:	bd80      	pop	{r7, pc}

2000002a <ascii_ctrl_bit_set>:

/*adressera ASCII-display, ettställ de bitar som är 1 i x*/
void ascii_ctrl_bit_set(unsigned char x){
2000002a:	b580      	push	{r7, lr}
2000002c:	b082      	sub	sp, #8
2000002e:	af00      	add	r7, sp, #0
20000030:	0002      	movs	r2, r0
20000032:	1dfb      	adds	r3, r7, #7
20000034:	701a      	strb	r2, [r3, #0]
    *GPIO_E_ODR_LOW |= ( B_SELECT | x );
20000036:	4b08      	ldr	r3, [pc, #32]	; (20000058 <ascii_ctrl_bit_set+0x2e>)
20000038:	781b      	ldrb	r3, [r3, #0]
2000003a:	b2da      	uxtb	r2, r3
2000003c:	1dfb      	adds	r3, r7, #7
2000003e:	781b      	ldrb	r3, [r3, #0]
20000040:	4313      	orrs	r3, r2
20000042:	b2db      	uxtb	r3, r3
20000044:	4a04      	ldr	r2, [pc, #16]	; (20000058 <ascii_ctrl_bit_set+0x2e>)
20000046:	2104      	movs	r1, #4
20000048:	430b      	orrs	r3, r1
2000004a:	b2db      	uxtb	r3, r3
2000004c:	7013      	strb	r3, [r2, #0]
}
2000004e:	46c0      	nop			; (mov r8, r8)
20000050:	46bd      	mov	sp, r7
20000052:	b002      	add	sp, #8
20000054:	bd80      	pop	{r7, pc}
20000056:	46c0      	nop			; (mov r8, r8)
20000058:	40021014 	andmi	r1, r2, r4, lsl r0

2000005c <ascii_ctrl_bit_clear>:

/*adressera ASCII-display, nollställ de bitar som är 1 i x*/
void ascii_ctrl_bit_clear(unsigned char x){
2000005c:	b580      	push	{r7, lr}
2000005e:	b082      	sub	sp, #8
20000060:	af00      	add	r7, sp, #0
20000062:	0002      	movs	r2, r0
20000064:	1dfb      	adds	r3, r7, #7
20000066:	701a      	strb	r2, [r3, #0]
    *GPIO_E_ODR_LOW &= ( B_SELECT | ~x);
20000068:	4b0a      	ldr	r3, [pc, #40]	; (20000094 <ascii_ctrl_bit_clear+0x38>)
2000006a:	781b      	ldrb	r3, [r3, #0]
2000006c:	b2db      	uxtb	r3, r3
2000006e:	b25b      	sxtb	r3, r3
20000070:	1dfa      	adds	r2, r7, #7
20000072:	7812      	ldrb	r2, [r2, #0]
20000074:	b252      	sxtb	r2, r2
20000076:	43d2      	mvns	r2, r2
20000078:	b252      	sxtb	r2, r2
2000007a:	2104      	movs	r1, #4
2000007c:	430a      	orrs	r2, r1
2000007e:	b252      	sxtb	r2, r2
20000080:	4013      	ands	r3, r2
20000082:	b25a      	sxtb	r2, r3
20000084:	4b03      	ldr	r3, [pc, #12]	; (20000094 <ascii_ctrl_bit_clear+0x38>)
20000086:	b2d2      	uxtb	r2, r2
20000088:	701a      	strb	r2, [r3, #0]
    
}
2000008a:	46c0      	nop			; (mov r8, r8)
2000008c:	46bd      	mov	sp, r7
2000008e:	b002      	add	sp, #8
20000090:	bd80      	pop	{r7, pc}
20000092:	46c0      	nop			; (mov r8, r8)
20000094:	40021014 	andmi	r1, r2, r4, lsl r0

20000098 <ascii_write_cmd>:

void ascii_write_cmd(unsigned char command){
20000098:	b580      	push	{r7, lr}
2000009a:	b082      	sub	sp, #8
2000009c:	af00      	add	r7, sp, #0
2000009e:	0002      	movs	r2, r0
200000a0:	1dfb      	adds	r3, r7, #7
200000a2:	701a      	strb	r2, [r3, #0]
    ascii_ctrl_bit_clear(B_RS);
200000a4:	2001      	movs	r0, #1
200000a6:	f7ff ffd9 	bl	2000005c <ascii_ctrl_bit_clear>
    ascii_ctrl_bit_clear(B_RW);
200000aa:	2002      	movs	r0, #2
200000ac:	f7ff ffd6 	bl	2000005c <ascii_ctrl_bit_clear>
    ascii_write_controller(command);
200000b0:	1dfb      	adds	r3, r7, #7
200000b2:	781b      	ldrb	r3, [r3, #0]
200000b4:	0018      	movs	r0, r3
200000b6:	f000 f819 	bl	200000ec <ascii_write_controller>
}
200000ba:	46c0      	nop			; (mov r8, r8)
200000bc:	46bd      	mov	sp, r7
200000be:	b002      	add	sp, #8
200000c0:	bd80      	pop	{r7, pc}

200000c2 <ascii_write_data>:

void ascii_write_data(unsigned char data){
200000c2:	b580      	push	{r7, lr}
200000c4:	b082      	sub	sp, #8
200000c6:	af00      	add	r7, sp, #0
200000c8:	0002      	movs	r2, r0
200000ca:	1dfb      	adds	r3, r7, #7
200000cc:	701a      	strb	r2, [r3, #0]
    ascii_ctrl_bit_set(B_RS);
200000ce:	2001      	movs	r0, #1
200000d0:	f7ff ffab 	bl	2000002a <ascii_ctrl_bit_set>
    ascii_ctrl_bit_clear(B_RW);
200000d4:	2002      	movs	r0, #2
200000d6:	f7ff ffc1 	bl	2000005c <ascii_ctrl_bit_clear>
    ascii_write_controller(data);
200000da:	1dfb      	adds	r3, r7, #7
200000dc:	781b      	ldrb	r3, [r3, #0]
200000de:	0018      	movs	r0, r3
200000e0:	f000 f804 	bl	200000ec <ascii_write_controller>
}
200000e4:	46c0      	nop			; (mov r8, r8)
200000e6:	46bd      	mov	sp, r7
200000e8:	b002      	add	sp, #8
200000ea:	bd80      	pop	{r7, pc}

200000ec <ascii_write_controller>:

void ascii_write_controller(unsigned char byte){
200000ec:	b580      	push	{r7, lr}
200000ee:	b082      	sub	sp, #8
200000f0:	af00      	add	r7, sp, #0
200000f2:	0002      	movs	r2, r0
200000f4:	1dfb      	adds	r3, r7, #7
200000f6:	701a      	strb	r2, [r3, #0]
    ascii_ctrl_bit_set(B_E);
200000f8:	2040      	movs	r0, #64	; 0x40
200000fa:	f7ff ff96 	bl	2000002a <ascii_ctrl_bit_set>
    *GPIO_E_ODR_HIGH = byte;
200000fe:	4a06      	ldr	r2, [pc, #24]	; (20000118 <ascii_write_controller+0x2c>)
20000100:	1dfb      	adds	r3, r7, #7
20000102:	781b      	ldrb	r3, [r3, #0]
20000104:	7013      	strb	r3, [r2, #0]
    delay_250ns();
20000106:	f000 fc73 	bl	200009f0 <delay_250ns>
    ascii_ctrl_bit_clear(B_E);
2000010a:	2040      	movs	r0, #64	; 0x40
2000010c:	f7ff ffa6 	bl	2000005c <ascii_ctrl_bit_clear>
}
20000110:	46c0      	nop			; (mov r8, r8)
20000112:	46bd      	mov	sp, r7
20000114:	b002      	add	sp, #8
20000116:	bd80      	pop	{r7, pc}
20000118:	40021015 	andmi	r1, r2, r5, lsl r0

2000011c <ascii_read_controller>:

unsigned char ascii_read_controller(void){
2000011c:	b580      	push	{r7, lr}
2000011e:	b082      	sub	sp, #8
20000120:	af00      	add	r7, sp, #0
    ascii_ctrl_bit_set(B_E);
20000122:	2040      	movs	r0, #64	; 0x40
20000124:	f7ff ff81 	bl	2000002a <ascii_ctrl_bit_set>
    delay_250ns();
20000128:	f000 fc62 	bl	200009f0 <delay_250ns>
    delay_250ns();
2000012c:	f000 fc60 	bl	200009f0 <delay_250ns>
    char retVal = *GPIO_E_IDR_HIGH;
20000130:	4a06      	ldr	r2, [pc, #24]	; (2000014c <ascii_read_controller+0x30>)
20000132:	1dfb      	adds	r3, r7, #7
20000134:	7812      	ldrb	r2, [r2, #0]
20000136:	701a      	strb	r2, [r3, #0]
    ascii_ctrl_bit_clear(B_E);
20000138:	2040      	movs	r0, #64	; 0x40
2000013a:	f7ff ff8f 	bl	2000005c <ascii_ctrl_bit_clear>
    return retVal;
2000013e:	1dfb      	adds	r3, r7, #7
20000140:	781b      	ldrb	r3, [r3, #0]
}
20000142:	0018      	movs	r0, r3
20000144:	46bd      	mov	sp, r7
20000146:	b002      	add	sp, #8
20000148:	bd80      	pop	{r7, pc}
2000014a:	46c0      	nop			; (mov r8, r8)
2000014c:	40021011 	andmi	r1, r2, r1, lsl r0

20000150 <ascii_read_status>:

unsigned char ascii_read_status(void){
20000150:	b590      	push	{r4, r7, lr}
20000152:	b083      	sub	sp, #12
20000154:	af00      	add	r7, sp, #0
    *(GPIO_E_MODER+0x02) = 0x0000;
20000156:	4b0b      	ldr	r3, [pc, #44]	; (20000184 <ascii_read_status+0x34>)
20000158:	2200      	movs	r2, #0
2000015a:	601a      	str	r2, [r3, #0]
    ascii_ctrl_bit_clear(B_RS);
2000015c:	2001      	movs	r0, #1
2000015e:	f7ff ff7d 	bl	2000005c <ascii_ctrl_bit_clear>
    ascii_ctrl_bit_set(B_RW);
20000162:	2002      	movs	r0, #2
20000164:	f7ff ff61 	bl	2000002a <ascii_ctrl_bit_set>
    char retStat = ascii_read_controller(); 
20000168:	1dfc      	adds	r4, r7, #7
2000016a:	f7ff ffd7 	bl	2000011c <ascii_read_controller>
2000016e:	0003      	movs	r3, r0
20000170:	7023      	strb	r3, [r4, #0]
    *(GPIO_E_MODER+0x02) = 0x5555;
20000172:	4b04      	ldr	r3, [pc, #16]	; (20000184 <ascii_read_status+0x34>)
20000174:	4a04      	ldr	r2, [pc, #16]	; (20000188 <ascii_read_status+0x38>)
20000176:	601a      	str	r2, [r3, #0]
    return retStat;
20000178:	1dfb      	adds	r3, r7, #7
2000017a:	781b      	ldrb	r3, [r3, #0]
}
2000017c:	0018      	movs	r0, r3
2000017e:	46bd      	mov	sp, r7
20000180:	b003      	add	sp, #12
20000182:	bd90      	pop	{r4, r7, pc}
20000184:	40021008 	andmi	r1, r2, r8
20000188:	00005555 	andeq	r5, r0, r5, asr r5

2000018c <ascii_read_data>:

unsigned char ascii_read_data(void){
2000018c:	b590      	push	{r4, r7, lr}
2000018e:	b083      	sub	sp, #12
20000190:	af00      	add	r7, sp, #0
    *(GPIO_E_MODER+0x02) = 0x0000;
20000192:	4b0b      	ldr	r3, [pc, #44]	; (200001c0 <ascii_read_data+0x34>)
20000194:	2200      	movs	r2, #0
20000196:	601a      	str	r2, [r3, #0]
    ascii_ctrl_bit_set(B_RS);
20000198:	2001      	movs	r0, #1
2000019a:	f7ff ff46 	bl	2000002a <ascii_ctrl_bit_set>
    ascii_ctrl_bit_set(B_RW);
2000019e:	2002      	movs	r0, #2
200001a0:	f7ff ff43 	bl	2000002a <ascii_ctrl_bit_set>
    char retData = ascii_read_controller();
200001a4:	1dfc      	adds	r4, r7, #7
200001a6:	f7ff ffb9 	bl	2000011c <ascii_read_controller>
200001aa:	0003      	movs	r3, r0
200001ac:	7023      	strb	r3, [r4, #0]
    *(GPIO_E_MODER+0x02) = 0x5555;
200001ae:	4b04      	ldr	r3, [pc, #16]	; (200001c0 <ascii_read_data+0x34>)
200001b0:	4a04      	ldr	r2, [pc, #16]	; (200001c4 <ascii_read_data+0x38>)
200001b2:	601a      	str	r2, [r3, #0]
    return retData;
200001b4:	1dfb      	adds	r3, r7, #7
200001b6:	781b      	ldrb	r3, [r3, #0]
}
200001b8:	0018      	movs	r0, r3
200001ba:	46bd      	mov	sp, r7
200001bc:	b003      	add	sp, #12
200001be:	bd90      	pop	{r4, r7, pc}
200001c0:	40021008 	andmi	r1, r2, r8
200001c4:	00005555 	andeq	r5, r0, r5, asr r5

200001c8 <clear_display>:

void clear_display(){
200001c8:	b580      	push	{r7, lr}
200001ca:	af00      	add	r7, sp, #0
    while((ascii_read_status() & 0x80) == 0x80){}
200001cc:	46c0      	nop			; (mov r8, r8)
200001ce:	f7ff ffbf 	bl	20000150 <ascii_read_status>
200001d2:	0003      	movs	r3, r0
200001d4:	001a      	movs	r2, r3
200001d6:	2380      	movs	r3, #128	; 0x80
200001d8:	4013      	ands	r3, r2
200001da:	2b80      	cmp	r3, #128	; 0x80
200001dc:	d0f7      	beq.n	200001ce <clear_display+0x6>
    delay_mikro(8);
200001de:	2008      	movs	r0, #8
200001e0:	f000 fc10 	bl	20000a04 <delay_mikro>
    ascii_write_cmd(1); /*clear display*/
200001e4:	2001      	movs	r0, #1
200001e6:	f7ff ff57 	bl	20000098 <ascii_write_cmd>
    delay_milli(2);
200001ea:	2002      	movs	r0, #2
200001ec:	f000 fc12 	bl	20000a14 <delay_milli>
}
200001f0:	46c0      	nop			; (mov r8, r8)
200001f2:	46bd      	mov	sp, r7
200001f4:	bd80      	pop	{r7, pc}

200001f6 <funtion_set>:

void funtion_set(){
200001f6:	b580      	push	{r7, lr}
200001f8:	af00      	add	r7, sp, #0
    while((ascii_read_status() & 0x80) == 0x80){}
200001fa:	46c0      	nop			; (mov r8, r8)
200001fc:	f7ff ffa8 	bl	20000150 <ascii_read_status>
20000200:	0003      	movs	r3, r0
20000202:	001a      	movs	r2, r3
20000204:	2380      	movs	r3, #128	; 0x80
20000206:	4013      	ands	r3, r2
20000208:	2b80      	cmp	r3, #128	; 0x80
2000020a:	d0f7      	beq.n	200001fc <funtion_set+0x6>
    delay_mikro(8);
2000020c:	2008      	movs	r0, #8
2000020e:	f000 fbf9 	bl	20000a04 <delay_mikro>
    ascii_write_cmd(0x38); //0b00111000
20000212:	2038      	movs	r0, #56	; 0x38
20000214:	f7ff ff40 	bl	20000098 <ascii_write_cmd>
    delay_mikro(40);
20000218:	2028      	movs	r0, #40	; 0x28
2000021a:	f000 fbf3 	bl	20000a04 <delay_mikro>
}
2000021e:	46c0      	nop			; (mov r8, r8)
20000220:	46bd      	mov	sp, r7
20000222:	bd80      	pop	{r7, pc}

20000224 <display_control>:

void display_control(){
20000224:	b580      	push	{r7, lr}
20000226:	af00      	add	r7, sp, #0
    while((ascii_read_status() & 0x80) == 0x80){}
20000228:	46c0      	nop			; (mov r8, r8)
2000022a:	f7ff ff91 	bl	20000150 <ascii_read_status>
2000022e:	0003      	movs	r3, r0
20000230:	001a      	movs	r2, r3
20000232:	2380      	movs	r3, #128	; 0x80
20000234:	4013      	ands	r3, r2
20000236:	2b80      	cmp	r3, #128	; 0x80
20000238:	d0f7      	beq.n	2000022a <display_control+0x6>
    delay_mikro(8);
2000023a:	2008      	movs	r0, #8
2000023c:	f000 fbe2 	bl	20000a04 <delay_mikro>
    ascii_write_cmd(0xE);
20000240:	200e      	movs	r0, #14
20000242:	f7ff ff29 	bl	20000098 <ascii_write_cmd>
    delay_mikro(40);
20000246:	2028      	movs	r0, #40	; 0x28
20000248:	f000 fbdc 	bl	20000a04 <delay_mikro>
}
2000024c:	46c0      	nop			; (mov r8, r8)
2000024e:	46bd      	mov	sp, r7
20000250:	bd80      	pop	{r7, pc}

20000252 <entry_mode_set>:

void entry_mode_set(){
20000252:	b580      	push	{r7, lr}
20000254:	af00      	add	r7, sp, #0
    while((ascii_read_status() & 0x80) == 0x80){}
20000256:	46c0      	nop			; (mov r8, r8)
20000258:	f7ff ff7a 	bl	20000150 <ascii_read_status>
2000025c:	0003      	movs	r3, r0
2000025e:	001a      	movs	r2, r3
20000260:	2380      	movs	r3, #128	; 0x80
20000262:	4013      	ands	r3, r2
20000264:	2b80      	cmp	r3, #128	; 0x80
20000266:	d0f7      	beq.n	20000258 <entry_mode_set+0x6>
    delay_mikro(8);
20000268:	2008      	movs	r0, #8
2000026a:	f000 fbcb 	bl	20000a04 <delay_mikro>
    ascii_write_cmd(6);
2000026e:	2006      	movs	r0, #6
20000270:	f7ff ff12 	bl	20000098 <ascii_write_cmd>
    delay_mikro(40);
20000274:	2028      	movs	r0, #40	; 0x28
20000276:	f000 fbc5 	bl	20000a04 <delay_mikro>
}
2000027a:	46c0      	nop			; (mov r8, r8)
2000027c:	46bd      	mov	sp, r7
2000027e:	bd80      	pop	{r7, pc}

20000280 <ascii_write_char>:

void ascii_write_char(unsigned char c){
20000280:	b580      	push	{r7, lr}
20000282:	b082      	sub	sp, #8
20000284:	af00      	add	r7, sp, #0
20000286:	0002      	movs	r2, r0
20000288:	1dfb      	adds	r3, r7, #7
2000028a:	701a      	strb	r2, [r3, #0]
    //while((ascii_read_status() & 0x80) == 0x80){} //Kommentera bort om det ska fungera...
    delay_mikro(8);
2000028c:	2008      	movs	r0, #8
2000028e:	f000 fbb9 	bl	20000a04 <delay_mikro>
    ascii_write_data(c);
20000292:	1dfb      	adds	r3, r7, #7
20000294:	781b      	ldrb	r3, [r3, #0]
20000296:	0018      	movs	r0, r3
20000298:	f7ff ff13 	bl	200000c2 <ascii_write_data>
    delay_mikro(45);
2000029c:	202d      	movs	r0, #45	; 0x2d
2000029e:	f000 fbb1 	bl	20000a04 <delay_mikro>
}
200002a2:	46c0      	nop			; (mov r8, r8)
200002a4:	46bd      	mov	sp, r7
200002a6:	b002      	add	sp, #8
200002a8:	bd80      	pop	{r7, pc}

200002aa <ascii_gotoxy>:

void ascii_gotoxy(int x, int y){ /**/
200002aa:	b580      	push	{r7, lr}
200002ac:	b084      	sub	sp, #16
200002ae:	af00      	add	r7, sp, #0
200002b0:	6078      	str	r0, [r7, #4]
200002b2:	6039      	str	r1, [r7, #0]
    unsigned char address;
    if(y!=1)
200002b4:	683b      	ldr	r3, [r7, #0]
200002b6:	2b01      	cmp	r3, #1
200002b8:	d006      	beq.n	200002c8 <ascii_gotoxy+0x1e>
        address = 0x40 + (x-1);
200002ba:	687b      	ldr	r3, [r7, #4]
200002bc:	b2da      	uxtb	r2, r3
200002be:	230f      	movs	r3, #15
200002c0:	18fb      	adds	r3, r7, r3
200002c2:	323f      	adds	r2, #63	; 0x3f
200002c4:	701a      	strb	r2, [r3, #0]
200002c6:	e005      	b.n	200002d4 <ascii_gotoxy+0x2a>
    else address=x-1;
200002c8:	687b      	ldr	r3, [r7, #4]
200002ca:	b2da      	uxtb	r2, r3
200002cc:	230f      	movs	r3, #15
200002ce:	18fb      	adds	r3, r7, r3
200002d0:	3a01      	subs	r2, #1
200002d2:	701a      	strb	r2, [r3, #0]
    
    ascii_write_cmd( 0x80 | address);
200002d4:	230f      	movs	r3, #15
200002d6:	18fb      	adds	r3, r7, r3
200002d8:	781b      	ldrb	r3, [r3, #0]
200002da:	2280      	movs	r2, #128	; 0x80
200002dc:	4252      	negs	r2, r2
200002de:	4313      	orrs	r3, r2
200002e0:	b2db      	uxtb	r3, r3
200002e2:	0018      	movs	r0, r3
200002e4:	f7ff fed8 	bl	20000098 <ascii_write_cmd>
    delay_mikro( 45 );
200002e8:	202d      	movs	r0, #45	; 0x2d
200002ea:	f000 fb8b 	bl	20000a04 <delay_mikro>
200002ee:	46c0      	nop			; (mov r8, r8)
200002f0:	46bd      	mov	sp, r7
200002f2:	b004      	add	sp, #16
200002f4:	bd80      	pop	{r7, pc}
200002f6:	46c0      	nop			; (mov r8, r8)

200002f8 <set_object_speed>:

void set_object_speed(POBJECT o, int speedx, int speedy){
200002f8:	b580      	push	{r7, lr}
200002fa:	b084      	sub	sp, #16
200002fc:	af00      	add	r7, sp, #0
200002fe:	60f8      	str	r0, [r7, #12]
20000300:	60b9      	str	r1, [r7, #8]
20000302:	607a      	str	r2, [r7, #4]
    o->dirx = speedx;
20000304:	68fb      	ldr	r3, [r7, #12]
20000306:	68ba      	ldr	r2, [r7, #8]
20000308:	605a      	str	r2, [r3, #4]
    o->diry = speedy;
2000030a:	68fb      	ldr	r3, [r7, #12]
2000030c:	687a      	ldr	r2, [r7, #4]
2000030e:	609a      	str	r2, [r3, #8]
}
20000310:	46c0      	nop			; (mov r8, r8)
20000312:	46bd      	mov	sp, r7
20000314:	b004      	add	sp, #16
20000316:	bd80      	pop	{r7, pc}

20000318 <draw_object>:

void draw_object(POBJECT o){
20000318:	b580      	push	{r7, lr}
2000031a:	b084      	sub	sp, #16
2000031c:	af00      	add	r7, sp, #0
2000031e:	6078      	str	r0, [r7, #4]
    for (int i = 0; i<o->geo->numpoints; i++)
20000320:	2300      	movs	r3, #0
20000322:	60fb      	str	r3, [r7, #12]
20000324:	e01e      	b.n	20000364 <draw_object+0x4c>
        pixel(o->geo->px[i].x+o->posx,o->geo->px[i].y+o->posy);
20000326:	687b      	ldr	r3, [r7, #4]
20000328:	681a      	ldr	r2, [r3, #0]
2000032a:	68fb      	ldr	r3, [r7, #12]
2000032c:	3304      	adds	r3, #4
2000032e:	005b      	lsls	r3, r3, #1
20000330:	18d3      	adds	r3, r2, r3
20000332:	3304      	adds	r3, #4
20000334:	781b      	ldrb	r3, [r3, #0]
20000336:	001a      	movs	r2, r3
20000338:	687b      	ldr	r3, [r7, #4]
2000033a:	68db      	ldr	r3, [r3, #12]
2000033c:	18d3      	adds	r3, r2, r3
2000033e:	0018      	movs	r0, r3
20000340:	687b      	ldr	r3, [r7, #4]
20000342:	681a      	ldr	r2, [r3, #0]
20000344:	68fb      	ldr	r3, [r7, #12]
20000346:	3304      	adds	r3, #4
20000348:	005b      	lsls	r3, r3, #1
2000034a:	18d3      	adds	r3, r2, r3
2000034c:	3305      	adds	r3, #5
2000034e:	781b      	ldrb	r3, [r3, #0]
20000350:	001a      	movs	r2, r3
20000352:	687b      	ldr	r3, [r7, #4]
20000354:	691b      	ldr	r3, [r3, #16]
20000356:	18d3      	adds	r3, r2, r3
20000358:	0019      	movs	r1, r3
2000035a:	f000 fd63 	bl	20000e24 <pixel>
    for (int i = 0; i<o->geo->numpoints; i++)
2000035e:	68fb      	ldr	r3, [r7, #12]
20000360:	3301      	adds	r3, #1
20000362:	60fb      	str	r3, [r7, #12]
20000364:	687b      	ldr	r3, [r7, #4]
20000366:	681b      	ldr	r3, [r3, #0]
20000368:	681b      	ldr	r3, [r3, #0]
2000036a:	68fa      	ldr	r2, [r7, #12]
2000036c:	429a      	cmp	r2, r3
2000036e:	dbda      	blt.n	20000326 <draw_object+0xe>
        
}
20000370:	46c0      	nop			; (mov r8, r8)
20000372:	46c0      	nop			; (mov r8, r8)
20000374:	46bd      	mov	sp, r7
20000376:	b004      	add	sp, #16
20000378:	bd80      	pop	{r7, pc}

2000037a <clear_object>:

void clear_object(POBJECT o){
2000037a:	b580      	push	{r7, lr}
2000037c:	b084      	sub	sp, #16
2000037e:	af00      	add	r7, sp, #0
20000380:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < o->geo->numpoints; i++)
20000382:	2300      	movs	r3, #0
20000384:	60fb      	str	r3, [r7, #12]
20000386:	e01e      	b.n	200003c6 <clear_object+0x4c>
        pixel(o->geo->px[i].x+o->posx,o->geo->px[i].y+o->posy);
20000388:	687b      	ldr	r3, [r7, #4]
2000038a:	681a      	ldr	r2, [r3, #0]
2000038c:	68fb      	ldr	r3, [r7, #12]
2000038e:	3304      	adds	r3, #4
20000390:	005b      	lsls	r3, r3, #1
20000392:	18d3      	adds	r3, r2, r3
20000394:	3304      	adds	r3, #4
20000396:	781b      	ldrb	r3, [r3, #0]
20000398:	001a      	movs	r2, r3
2000039a:	687b      	ldr	r3, [r7, #4]
2000039c:	68db      	ldr	r3, [r3, #12]
2000039e:	18d3      	adds	r3, r2, r3
200003a0:	0018      	movs	r0, r3
200003a2:	687b      	ldr	r3, [r7, #4]
200003a4:	681a      	ldr	r2, [r3, #0]
200003a6:	68fb      	ldr	r3, [r7, #12]
200003a8:	3304      	adds	r3, #4
200003aa:	005b      	lsls	r3, r3, #1
200003ac:	18d3      	adds	r3, r2, r3
200003ae:	3305      	adds	r3, #5
200003b0:	781b      	ldrb	r3, [r3, #0]
200003b2:	001a      	movs	r2, r3
200003b4:	687b      	ldr	r3, [r7, #4]
200003b6:	691b      	ldr	r3, [r3, #16]
200003b8:	18d3      	adds	r3, r2, r3
200003ba:	0019      	movs	r1, r3
200003bc:	f000 fd32 	bl	20000e24 <pixel>
    for (int i = 0; i < o->geo->numpoints; i++)
200003c0:	68fb      	ldr	r3, [r7, #12]
200003c2:	3301      	adds	r3, #1
200003c4:	60fb      	str	r3, [r7, #12]
200003c6:	687b      	ldr	r3, [r7, #4]
200003c8:	681b      	ldr	r3, [r3, #0]
200003ca:	681b      	ldr	r3, [r3, #0]
200003cc:	68fa      	ldr	r2, [r7, #12]
200003ce:	429a      	cmp	r2, r3
200003d0:	dbda      	blt.n	20000388 <clear_object+0xe>
        
}
200003d2:	46c0      	nop			; (mov r8, r8)
200003d4:	46c0      	nop			; (mov r8, r8)
200003d6:	46bd      	mov	sp, r7
200003d8:	b004      	add	sp, #16
200003da:	bd80      	pop	{r7, pc}

200003dc <move_object>:

void move_object(POBJECT o){
200003dc:	b580      	push	{r7, lr}
200003de:	b082      	sub	sp, #8
200003e0:	af00      	add	r7, sp, #0
200003e2:	6078      	str	r0, [r7, #4]
    //clear_object(o);
    
    o->posx = o->posx + o->dirx;
200003e4:	687b      	ldr	r3, [r7, #4]
200003e6:	68da      	ldr	r2, [r3, #12]
200003e8:	687b      	ldr	r3, [r7, #4]
200003ea:	685b      	ldr	r3, [r3, #4]
200003ec:	18d2      	adds	r2, r2, r3
200003ee:	687b      	ldr	r3, [r7, #4]
200003f0:	60da      	str	r2, [r3, #12]
    o->posy = o->posy + o->diry;
200003f2:	687b      	ldr	r3, [r7, #4]
200003f4:	691a      	ldr	r2, [r3, #16]
200003f6:	687b      	ldr	r3, [r7, #4]
200003f8:	689b      	ldr	r3, [r3, #8]
200003fa:	18d2      	adds	r2, r2, r3
200003fc:	687b      	ldr	r3, [r7, #4]
200003fe:	611a      	str	r2, [r3, #16]
    
    /*Position static if direction makes ball go out of bounds*/
    //Bounce left wall
    if((o->posx+o->dirx)<1){
20000400:	687b      	ldr	r3, [r7, #4]
20000402:	68da      	ldr	r2, [r3, #12]
20000404:	687b      	ldr	r3, [r7, #4]
20000406:	685b      	ldr	r3, [r3, #4]
20000408:	18d3      	adds	r3, r2, r3
2000040a:	2b00      	cmp	r3, #0
2000040c:	dc07      	bgt.n	2000041e <move_object+0x42>
        o->dirx *= -1;
2000040e:	687b      	ldr	r3, [r7, #4]
20000410:	685b      	ldr	r3, [r3, #4]
20000412:	425a      	negs	r2, r3
20000414:	687b      	ldr	r3, [r7, #4]
20000416:	605a      	str	r2, [r3, #4]
        o->posx = 1;
20000418:	687b      	ldr	r3, [r7, #4]
2000041a:	2201      	movs	r2, #1
2000041c:	60da      	str	r2, [r3, #12]
    }
    //Bounce right wall
    if((o->posx+o->dirx)>128){
2000041e:	687b      	ldr	r3, [r7, #4]
20000420:	68da      	ldr	r2, [r3, #12]
20000422:	687b      	ldr	r3, [r7, #4]
20000424:	685b      	ldr	r3, [r3, #4]
20000426:	18d3      	adds	r3, r2, r3
20000428:	2b80      	cmp	r3, #128	; 0x80
2000042a:	dd07      	ble.n	2000043c <move_object+0x60>
        o->dirx *= -1;
2000042c:	687b      	ldr	r3, [r7, #4]
2000042e:	685b      	ldr	r3, [r3, #4]
20000430:	425a      	negs	r2, r3
20000432:	687b      	ldr	r3, [r7, #4]
20000434:	605a      	str	r2, [r3, #4]
        o->posx=127;
20000436:	687b      	ldr	r3, [r7, #4]
20000438:	227f      	movs	r2, #127	; 0x7f
2000043a:	60da      	str	r2, [r3, #12]
    }
    //bounce upper wall
    if((o->posy+o->diry)<1){
2000043c:	687b      	ldr	r3, [r7, #4]
2000043e:	691a      	ldr	r2, [r3, #16]
20000440:	687b      	ldr	r3, [r7, #4]
20000442:	689b      	ldr	r3, [r3, #8]
20000444:	18d3      	adds	r3, r2, r3
20000446:	2b00      	cmp	r3, #0
20000448:	dc07      	bgt.n	2000045a <move_object+0x7e>
        o->diry *= -1;
2000044a:	687b      	ldr	r3, [r7, #4]
2000044c:	689b      	ldr	r3, [r3, #8]
2000044e:	425a      	negs	r2, r3
20000450:	687b      	ldr	r3, [r7, #4]
20000452:	609a      	str	r2, [r3, #8]
        o->posy = 1;
20000454:	687b      	ldr	r3, [r7, #4]
20000456:	2201      	movs	r2, #1
20000458:	611a      	str	r2, [r3, #16]
    }
    //bounce lower wall
    if((o->posy+o->diry)>64){
2000045a:	687b      	ldr	r3, [r7, #4]
2000045c:	691a      	ldr	r2, [r3, #16]
2000045e:	687b      	ldr	r3, [r7, #4]
20000460:	689b      	ldr	r3, [r3, #8]
20000462:	18d3      	adds	r3, r2, r3
20000464:	2b40      	cmp	r3, #64	; 0x40
20000466:	dd07      	ble.n	20000478 <move_object+0x9c>
        o->diry *= -1;
20000468:	687b      	ldr	r3, [r7, #4]
2000046a:	689b      	ldr	r3, [r3, #8]
2000046c:	425a      	negs	r2, r3
2000046e:	687b      	ldr	r3, [r7, #4]
20000470:	609a      	str	r2, [r3, #8]
        o->posy = 63;
20000472:	687b      	ldr	r3, [r7, #4]
20000474:	223f      	movs	r2, #63	; 0x3f
20000476:	611a      	str	r2, [r3, #16]
    }
    draw_object(o);
20000478:	687b      	ldr	r3, [r7, #4]
2000047a:	0018      	movs	r0, r3
2000047c:	f7ff ff4c 	bl	20000318 <draw_object>
}
20000480:	46c0      	nop			; (mov r8, r8)
20000482:	46bd      	mov	sp, r7
20000484:	b002      	add	sp, #8
20000486:	bd80      	pop	{r7, pc}

20000488 <load_sprite>:
    clear_object,
    move_object,
    set_object_speed
};

static void load_sprite(sprite* s, unsigned char* data, int width, int height){
20000488:	b580      	push	{r7, lr}
2000048a:	b084      	sub	sp, #16
2000048c:	af00      	add	r7, sp, #0
2000048e:	60f8      	str	r0, [r7, #12]
20000490:	60b9      	str	r1, [r7, #8]
20000492:	607a      	str	r2, [r7, #4]
20000494:	603b      	str	r3, [r7, #0]
    s->width = width;
20000496:	687b      	ldr	r3, [r7, #4]
20000498:	b2da      	uxtb	r2, r3
2000049a:	68fb      	ldr	r3, [r7, #12]
2000049c:	701a      	strb	r2, [r3, #0]
    s->height = height;
2000049e:	683b      	ldr	r3, [r7, #0]
200004a0:	b2da      	uxtb	r2, r3
200004a2:	68fb      	ldr	r3, [r7, #12]
200004a4:	705a      	strb	r2, [r3, #1]
    s->data = data;
200004a6:	68fb      	ldr	r3, [r7, #12]
200004a8:	68ba      	ldr	r2, [r7, #8]
200004aa:	605a      	str	r2, [r3, #4]
}
200004ac:	46c0      	nop			; (mov r8, r8)
200004ae:	46bd      	mov	sp, r7
200004b0:	b004      	add	sp, #16
200004b2:	bd80      	pop	{r7, pc}

200004b4 <draw_sprite>:

void draw_sprite(sprite* s, int x, int y){
200004b4:	b580      	push	{r7, lr}
200004b6:	b08a      	sub	sp, #40	; 0x28
200004b8:	af00      	add	r7, sp, #0
200004ba:	60f8      	str	r0, [r7, #12]
200004bc:	60b9      	str	r1, [r7, #8]
200004be:	607a      	str	r2, [r7, #4]
    int i,j,k, width_in_bytes;
    
    if(s->width % 8 == 0){
200004c0:	68fb      	ldr	r3, [r7, #12]
200004c2:	781b      	ldrb	r3, [r3, #0]
200004c4:	2207      	movs	r2, #7
200004c6:	4013      	ands	r3, r2
200004c8:	b2db      	uxtb	r3, r3
200004ca:	2b00      	cmp	r3, #0
200004cc:	d105      	bne.n	200004da <draw_sprite+0x26>
        width_in_bytes = s->width/8;
200004ce:	68fb      	ldr	r3, [r7, #12]
200004d0:	781b      	ldrb	r3, [r3, #0]
200004d2:	08db      	lsrs	r3, r3, #3
200004d4:	b2db      	uxtb	r3, r3
200004d6:	61bb      	str	r3, [r7, #24]
200004d8:	e005      	b.n	200004e6 <draw_sprite+0x32>
    }else{
        width_in_bytes = s->width/8 + 1;
200004da:	68fb      	ldr	r3, [r7, #12]
200004dc:	781b      	ldrb	r3, [r3, #0]
200004de:	08db      	lsrs	r3, r3, #3
200004e0:	b2db      	uxtb	r3, r3
200004e2:	3301      	adds	r3, #1
200004e4:	61bb      	str	r3, [r7, #24]
    }
    
    for (i = 0; i < s->height; i++){
200004e6:	2300      	movs	r3, #0
200004e8:	627b      	str	r3, [r7, #36]	; 0x24
200004ea:	e039      	b.n	20000560 <draw_sprite+0xac>
        for (j = 0; j < width_in_bytes; j++){
200004ec:	2300      	movs	r3, #0
200004ee:	623b      	str	r3, [r7, #32]
200004f0:	e02f      	b.n	20000552 <draw_sprite+0x9e>
            unsigned char byte = s->data[i*width_in_bytes +j];
200004f2:	68fb      	ldr	r3, [r7, #12]
200004f4:	685b      	ldr	r3, [r3, #4]
200004f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
200004f8:	69b9      	ldr	r1, [r7, #24]
200004fa:	4351      	muls	r1, r2
200004fc:	6a3a      	ldr	r2, [r7, #32]
200004fe:	188a      	adds	r2, r1, r2
20000500:	189a      	adds	r2, r3, r2
20000502:	2317      	movs	r3, #23
20000504:	18fb      	adds	r3, r7, r3
20000506:	7812      	ldrb	r2, [r2, #0]
20000508:	701a      	strb	r2, [r3, #0]
            for (k = 0; k < 8; k++){
2000050a:	2300      	movs	r3, #0
2000050c:	61fb      	str	r3, [r7, #28]
2000050e:	e01a      	b.n	20000546 <draw_sprite+0x92>
                if (byte & (1<<k))
20000510:	2317      	movs	r3, #23
20000512:	18fb      	adds	r3, r7, r3
20000514:	781a      	ldrb	r2, [r3, #0]
20000516:	69fb      	ldr	r3, [r7, #28]
20000518:	411a      	asrs	r2, r3
2000051a:	0013      	movs	r3, r2
2000051c:	2201      	movs	r2, #1
2000051e:	4013      	ands	r3, r2
20000520:	d00e      	beq.n	20000540 <draw_sprite+0x8c>
                    pixel(8 * j + k + x + 1, i + y + 1);
20000522:	6a3b      	ldr	r3, [r7, #32]
20000524:	00da      	lsls	r2, r3, #3
20000526:	69fb      	ldr	r3, [r7, #28]
20000528:	18d2      	adds	r2, r2, r3
2000052a:	68bb      	ldr	r3, [r7, #8]
2000052c:	18d3      	adds	r3, r2, r3
2000052e:	3301      	adds	r3, #1
20000530:	0018      	movs	r0, r3
20000532:	6a7a      	ldr	r2, [r7, #36]	; 0x24
20000534:	687b      	ldr	r3, [r7, #4]
20000536:	18d3      	adds	r3, r2, r3
20000538:	3301      	adds	r3, #1
2000053a:	0019      	movs	r1, r3
2000053c:	f000 fc72 	bl	20000e24 <pixel>
            for (k = 0; k < 8; k++){
20000540:	69fb      	ldr	r3, [r7, #28]
20000542:	3301      	adds	r3, #1
20000544:	61fb      	str	r3, [r7, #28]
20000546:	69fb      	ldr	r3, [r7, #28]
20000548:	2b07      	cmp	r3, #7
2000054a:	dde1      	ble.n	20000510 <draw_sprite+0x5c>
        for (j = 0; j < width_in_bytes; j++){
2000054c:	6a3b      	ldr	r3, [r7, #32]
2000054e:	3301      	adds	r3, #1
20000550:	623b      	str	r3, [r7, #32]
20000552:	6a3a      	ldr	r2, [r7, #32]
20000554:	69bb      	ldr	r3, [r7, #24]
20000556:	429a      	cmp	r2, r3
20000558:	dbcb      	blt.n	200004f2 <draw_sprite+0x3e>
    for (i = 0; i < s->height; i++){
2000055a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2000055c:	3301      	adds	r3, #1
2000055e:	627b      	str	r3, [r7, #36]	; 0x24
20000560:	68fb      	ldr	r3, [r7, #12]
20000562:	785b      	ldrb	r3, [r3, #1]
20000564:	001a      	movs	r2, r3
20000566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20000568:	4293      	cmp	r3, r2
2000056a:	dbbf      	blt.n	200004ec <draw_sprite+0x38>
            }
        }
    }
}
2000056c:	46c0      	nop			; (mov r8, r8)
2000056e:	46c0      	nop			; (mov r8, r8)
20000570:	46bd      	mov	sp, r7
20000572:	b00a      	add	sp, #40	; 0x28
20000574:	bd80      	pop	{r7, pc}

20000576 <draw_snake>:

void draw_snake(POBJECT h, POBJECT *b){
20000576:	b580      	push	{r7, lr}
20000578:	b084      	sub	sp, #16
2000057a:	af00      	add	r7, sp, #0
2000057c:	6078      	str	r0, [r7, #4]
2000057e:	6039      	str	r1, [r7, #0]
    h->move(h);
20000580:	687b      	ldr	r3, [r7, #4]
20000582:	69db      	ldr	r3, [r3, #28]
20000584:	687a      	ldr	r2, [r7, #4]
20000586:	0010      	movs	r0, r2
20000588:	4798      	blx	r3
    move_object(*b);
2000058a:	683b      	ldr	r3, [r7, #0]
2000058c:	681b      	ldr	r3, [r3, #0]
2000058e:	0018      	movs	r0, r3
20000590:	f7ff ff24 	bl	200003dc <move_object>
    for(int i = 0; i < size()-1; i++){ 
20000594:	2300      	movs	r3, #0
20000596:	60fb      	str	r3, [r7, #12]
20000598:	e00a      	b.n	200005b0 <draw_snake+0x3a>
        move_object(*b);
2000059a:	683b      	ldr	r3, [r7, #0]
2000059c:	681b      	ldr	r3, [r3, #0]
2000059e:	0018      	movs	r0, r3
200005a0:	f7ff ff1c 	bl	200003dc <move_object>
        *b++;
200005a4:	683b      	ldr	r3, [r7, #0]
200005a6:	3304      	adds	r3, #4
200005a8:	603b      	str	r3, [r7, #0]
    for(int i = 0; i < size()-1; i++){ 
200005aa:	68fb      	ldr	r3, [r7, #12]
200005ac:	3301      	adds	r3, #1
200005ae:	60fb      	str	r3, [r7, #12]
200005b0:	f000 fd22 	bl	20000ff8 <size>
200005b4:	0003      	movs	r3, r0
200005b6:	3b01      	subs	r3, #1
200005b8:	68fa      	ldr	r2, [r7, #12]
200005ba:	429a      	cmp	r2, r3
200005bc:	dbed      	blt.n	2000059a <draw_snake+0x24>
    }
    move_object(*b);
200005be:	683b      	ldr	r3, [r7, #0]
200005c0:	681b      	ldr	r3, [r3, #0]
200005c2:	0018      	movs	r0, r3
200005c4:	f7ff ff0a 	bl	200003dc <move_object>

}
200005c8:	46c0      	nop			; (mov r8, r8)
200005ca:	46bd      	mov	sp, r7
200005cc:	b004      	add	sp, #16
200005ce:	bd80      	pop	{r7, pc}

200005d0 <init_app>:

static volatile int points;

void init_app(void){/**/
200005d0:	b580      	push	{r7, lr}
200005d2:	af00      	add	r7, sp, #0
        /*starta klockor på port D & E*/
        * ( (unsigned long *) 0x40023830) = 0x18;
        __asm volatile("  LDR R0,=0x08000209\n BLX R0 \n");
    #endif
    
    *GPIO_E_MODER = 0x55555555;
200005d4:	4b11      	ldr	r3, [pc, #68]	; (2000061c <init_app+0x4c>)
200005d6:	4a12      	ldr	r2, [pc, #72]	; (20000620 <init_app+0x50>)
200005d8:	601a      	str	r2, [r3, #0]
    *GPIO_E_OTYPER = 0x00000000;
200005da:	4b12      	ldr	r3, [pc, #72]	; (20000624 <init_app+0x54>)
200005dc:	2200      	movs	r2, #0
200005de:	801a      	strh	r2, [r3, #0]
    *GPIO_E_OSPEEDR = 0x00000000;
200005e0:	4b11      	ldr	r3, [pc, #68]	; (20000628 <init_app+0x58>)
200005e2:	2200      	movs	r2, #0
200005e4:	601a      	str	r2, [r3, #0]
    
    *GPIO_D_MODER = 0;
200005e6:	4b11      	ldr	r3, [pc, #68]	; (2000062c <init_app+0x5c>)
200005e8:	2200      	movs	r2, #0
200005ea:	601a      	str	r2, [r3, #0]
    *GPIO_D_MODER = 0x55000000;
200005ec:	4b0f      	ldr	r3, [pc, #60]	; (2000062c <init_app+0x5c>)
200005ee:	22aa      	movs	r2, #170	; 0xaa
200005f0:	05d2      	lsls	r2, r2, #23
200005f2:	601a      	str	r2, [r3, #0]
    *GPIO_D_PUPDR = 0;
200005f4:	4b0e      	ldr	r3, [pc, #56]	; (20000630 <init_app+0x60>)
200005f6:	2200      	movs	r2, #0
200005f8:	601a      	str	r2, [r3, #0]
    *GPIO_D_PUPDR |= 0xAA000000;
200005fa:	4b0d      	ldr	r3, [pc, #52]	; (20000630 <init_app+0x60>)
200005fc:	681a      	ldr	r2, [r3, #0]
200005fe:	4b0c      	ldr	r3, [pc, #48]	; (20000630 <init_app+0x60>)
20000600:	21aa      	movs	r1, #170	; 0xaa
20000602:	0609      	lsls	r1, r1, #24
20000604:	430a      	orrs	r2, r1
20000606:	601a      	str	r2, [r3, #0]
    *GPIO_D_OTYPER = 0;
20000608:	4b0a      	ldr	r3, [pc, #40]	; (20000634 <init_app+0x64>)
2000060a:	2200      	movs	r2, #0
2000060c:	801a      	strh	r2, [r3, #0]
    
    points = 0;
2000060e:	4b0a      	ldr	r3, [pc, #40]	; (20000638 <init_app+0x68>)
20000610:	2200      	movs	r2, #0
20000612:	601a      	str	r2, [r3, #0]
}
20000614:	46c0      	nop			; (mov r8, r8)
20000616:	46bd      	mov	sp, r7
20000618:	bd80      	pop	{r7, pc}
2000061a:	46c0      	nop			; (mov r8, r8)
2000061c:	40021000 	andmi	r1, r2, r0
20000620:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab
20000624:	40021004 	andmi	r1, r2, r4
20000628:	40021008 	andmi	r1, r2, r8
2000062c:	40020c00 	andmi	r0, r2, r0, lsl #24
20000630:	40020c0c 	andmi	r0, r2, ip, lsl #24
20000634:	40020c04 	andmi	r0, r2, r4, lsl #24
20000638:	200021cc 	andcs	r2, r0, ip, asr #3

2000063c <init_snake>:

void init_snake(POBJECT h, POBJECT *b, OBJECT *s){
2000063c:	b580      	push	{r7, lr}
2000063e:	b086      	sub	sp, #24
20000640:	af00      	add	r7, sp, #0
20000642:	60f8      	str	r0, [r7, #12]
20000644:	60b9      	str	r1, [r7, #8]
20000646:	607a      	str	r2, [r7, #4]
    h->posx = 16;
20000648:	68fb      	ldr	r3, [r7, #12]
2000064a:	2210      	movs	r2, #16
2000064c:	60da      	str	r2, [r3, #12]
    h->posy = 1;
2000064e:	68fb      	ldr	r3, [r7, #12]
20000650:	2201      	movs	r2, #1
20000652:	611a      	str	r2, [r3, #16]
    for (int i = 0; i < 3; i++){
20000654:	2300      	movs	r3, #0
20000656:	617b      	str	r3, [r7, #20]
20000658:	e01a      	b.n	20000690 <init_snake+0x54>
        *b = &(*s);
2000065a:	68bb      	ldr	r3, [r7, #8]
2000065c:	687a      	ldr	r2, [r7, #4]
2000065e:	601a      	str	r2, [r3, #0]
        (*b)->posx = (i+1)*4;
20000660:	697b      	ldr	r3, [r7, #20]
20000662:	1c5a      	adds	r2, r3, #1
20000664:	68bb      	ldr	r3, [r7, #8]
20000666:	681b      	ldr	r3, [r3, #0]
20000668:	0092      	lsls	r2, r2, #2
2000066a:	60da      	str	r2, [r3, #12]
        (*b)->posy = 1;
2000066c:	68bb      	ldr	r3, [r7, #8]
2000066e:	681b      	ldr	r3, [r3, #0]
20000670:	2201      	movs	r2, #1
20000672:	611a      	str	r2, [r3, #16]
        insert(*b);
20000674:	68bb      	ldr	r3, [r7, #8]
20000676:	681b      	ldr	r3, [r3, #0]
20000678:	0018      	movs	r0, r3
2000067a:	f000 fcc7 	bl	2000100c <insert>
        *b++;
2000067e:	68bb      	ldr	r3, [r7, #8]
20000680:	3304      	adds	r3, #4
20000682:	60bb      	str	r3, [r7, #8]
        *s++;
20000684:	687b      	ldr	r3, [r7, #4]
20000686:	3324      	adds	r3, #36	; 0x24
20000688:	607b      	str	r3, [r7, #4]
    for (int i = 0; i < 3; i++){
2000068a:	697b      	ldr	r3, [r7, #20]
2000068c:	3301      	adds	r3, #1
2000068e:	617b      	str	r3, [r7, #20]
20000690:	697b      	ldr	r3, [r7, #20]
20000692:	2b02      	cmp	r3, #2
20000694:	dde1      	ble.n	2000065a <init_snake+0x1e>
    }
}
20000696:	46c0      	nop			; (mov r8, r8)
20000698:	46c0      	nop			; (mov r8, r8)
2000069a:	46bd      	mov	sp, r7
2000069c:	b006      	add	sp, #24
2000069e:	bd80      	pop	{r7, pc}

200006a0 <restart_game>:

void restart_game(POBJECT p){
200006a0:	b580      	push	{r7, lr}
200006a2:	b082      	sub	sp, #8
200006a4:	af00      	add	r7, sp, #0
200006a6:	6078      	str	r0, [r7, #4]
        clear_backbuffer();
200006a8:	f000 fba1 	bl	20000dee <clear_backbuffer>
        graphic_draw_screen();
200006ac:	f000 fbfc 	bl	20000ea8 <graphic_draw_screen>
        /*p->set_speed(p,0,0);§
        p->posx = 0;
        p->posy = 0;
        */
}
200006b0:	46c0      	nop			; (mov r8, r8)
200006b2:	46bd      	mov	sp, r7
200006b4:	b002      	add	sp, #8
200006b6:	bd80      	pop	{r7, pc}

200006b8 <main>:

void main(int argc, char **argv){
200006b8:	b5b0      	push	{r4, r5, r7, lr}
200006ba:	b0ec      	sub	sp, #432	; 0x1b0
200006bc:	af00      	add	r7, sp, #0
200006be:	6078      	str	r0, [r7, #4]
200006c0:	6039      	str	r1, [r7, #0]
    int game = 1, restart = 2;
200006c2:	2301      	movs	r3, #1
200006c4:	22d6      	movs	r2, #214	; 0xd6
200006c6:	0052      	lsls	r2, r2, #1
200006c8:	18ba      	adds	r2, r7, r2
200006ca:	6013      	str	r3, [r2, #0]
200006cc:	2302      	movs	r3, #2
200006ce:	22d4      	movs	r2, #212	; 0xd4
200006d0:	0052      	lsls	r2, r2, #1
200006d2:	18ba      	adds	r2, r7, r2
200006d4:	6013      	str	r3, [r2, #0]
    char key_stroke;
        
    POBJECT head = &snakehead, food = &food_obj;
200006d6:	4b5b      	ldr	r3, [pc, #364]	; (20000844 <main+0x18c>)
200006d8:	22d0      	movs	r2, #208	; 0xd0
200006da:	0052      	lsls	r2, r2, #1
200006dc:	18ba      	adds	r2, r7, r2
200006de:	6013      	str	r3, [r2, #0]
200006e0:	4b59      	ldr	r3, [pc, #356]	; (20000848 <main+0x190>)
200006e2:	22ce      	movs	r2, #206	; 0xce
200006e4:	0052      	lsls	r2, r2, #1
200006e6:	18ba      	adds	r2, r7, r2
200006e8:	6013      	str	r3, [r2, #0]
    POBJECT body[100];
    for(int i = 0; i < 100 ; i++) body[i]="\0";
200006ea:	2300      	movs	r3, #0
200006ec:	22d2      	movs	r2, #210	; 0xd2
200006ee:	0052      	lsls	r2, r2, #1
200006f0:	18ba      	adds	r2, r7, r2
200006f2:	6013      	str	r3, [r2, #0]
200006f4:	e012      	b.n	2000071c <main+0x64>
200006f6:	4b55      	ldr	r3, [pc, #340]	; (2000084c <main+0x194>)
200006f8:	22d8      	movs	r2, #216	; 0xd8
200006fa:	0052      	lsls	r2, r2, #1
200006fc:	4694      	mov	ip, r2
200006fe:	44bc      	add	ip, r7
20000700:	4463      	add	r3, ip
20000702:	20d2      	movs	r0, #210	; 0xd2
20000704:	0040      	lsls	r0, r0, #1
20000706:	183a      	adds	r2, r7, r0
20000708:	6812      	ldr	r2, [r2, #0]
2000070a:	0092      	lsls	r2, r2, #2
2000070c:	4950      	ldr	r1, [pc, #320]	; (20000850 <main+0x198>)
2000070e:	50d1      	str	r1, [r2, r3]
20000710:	0002      	movs	r2, r0
20000712:	18bb      	adds	r3, r7, r2
20000714:	681b      	ldr	r3, [r3, #0]
20000716:	3301      	adds	r3, #1
20000718:	18ba      	adds	r2, r7, r2
2000071a:	6013      	str	r3, [r2, #0]
2000071c:	23d2      	movs	r3, #210	; 0xd2
2000071e:	005b      	lsls	r3, r3, #1
20000720:	18fb      	adds	r3, r7, r3
20000722:	681b      	ldr	r3, [r3, #0]
20000724:	2b63      	cmp	r3, #99	; 0x63
20000726:	dde6      	ble.n	200006f6 <main+0x3e>
    
    init_app();
20000728:	f7ff ff52 	bl	200005d0 <init_app>
    graphic_init();
2000072c:	f000 f992 	bl	20000a54 <graphic_init>
    init_queue();
20000730:	f000 fc22 	bl	20000f78 <init_queue>
    
    while(game){
20000734:	e07a      	b.n	2000082c <main+0x174>
        //load_sprite(&s , image_bits, image_width, image_height);
        //draw_sprite(&s, 20, 20);
        
        //while(keyb() != 5){}
        
        if(restart == 2){
20000736:	24d4      	movs	r4, #212	; 0xd4
20000738:	0064      	lsls	r4, r4, #1
2000073a:	193b      	adds	r3, r7, r4
2000073c:	681b      	ldr	r3, [r3, #0]
2000073e:	2b02      	cmp	r3, #2
20000740:	d16d      	bne.n	2000081e <main+0x166>
            init_snake(head, body, snakebody);
20000742:	4a44      	ldr	r2, [pc, #272]	; (20000854 <main+0x19c>)
20000744:	2308      	movs	r3, #8
20000746:	18f9      	adds	r1, r7, r3
20000748:	25d0      	movs	r5, #208	; 0xd0
2000074a:	006d      	lsls	r5, r5, #1
2000074c:	197b      	adds	r3, r7, r5
2000074e:	681b      	ldr	r3, [r3, #0]
20000750:	0018      	movs	r0, r3
20000752:	f7ff ff73 	bl	2000063c <init_snake>
            restart_game(head);
20000756:	197b      	adds	r3, r7, r5
20000758:	681b      	ldr	r3, [r3, #0]
2000075a:	0018      	movs	r0, r3
2000075c:	f7ff ffa0 	bl	200006a0 <restart_game>
            restart = 1;
20000760:	2301      	movs	r3, #1
20000762:	193a      	adds	r2, r7, r4
20000764:	6013      	str	r3, [r2, #0]
        }

        while(restart == 1){
20000766:	e05a      	b.n	2000081e <main+0x166>
            clear_backbuffer();
20000768:	f000 fb41 	bl	20000dee <clear_backbuffer>
            //graphic_draw_screen();
            /*KOD HÄR*/
            
            draw_snake(head, body);
2000076c:	2308      	movs	r3, #8
2000076e:	18fa      	adds	r2, r7, r3
20000770:	23d0      	movs	r3, #208	; 0xd0
20000772:	005b      	lsls	r3, r3, #1
20000774:	18fb      	adds	r3, r7, r3
20000776:	681b      	ldr	r3, [r3, #0]
20000778:	0011      	movs	r1, r2
2000077a:	0018      	movs	r0, r3
2000077c:	f7ff fefb 	bl	20000576 <draw_snake>
                        
            graphic_draw_screen();
20000780:	f000 fb92 	bl	20000ea8 <graphic_draw_screen>

            //delay_milli(40);
            key_stroke = keyb();
20000784:	259c      	movs	r5, #156	; 0x9c
20000786:	35ff      	adds	r5, #255	; 0xff
20000788:	197c      	adds	r4, r7, r5
2000078a:	f000 f8ed 	bl	20000968 <keyb>
2000078e:	0003      	movs	r3, r0
20000790:	7023      	strb	r3, [r4, #0]
            switch(key_stroke){
20000792:	197b      	adds	r3, r7, r5
20000794:	781b      	ldrb	r3, [r3, #0]
20000796:	2b0d      	cmp	r3, #13
20000798:	d842      	bhi.n	20000820 <main+0x168>
2000079a:	009a      	lsls	r2, r3, #2
2000079c:	4b2e      	ldr	r3, [pc, #184]	; (20000858 <main+0x1a0>)
2000079e:	18d3      	adds	r3, r2, r3
200007a0:	681b      	ldr	r3, [r3, #0]
200007a2:	469f      	mov	pc, r3
                case RIGHT: turn(RIGHT, head, body); break; /*dirx = +, diry = 0*/
200007a4:	2308      	movs	r3, #8
200007a6:	18fa      	adds	r2, r7, r3
200007a8:	23d0      	movs	r3, #208	; 0xd0
200007aa:	005b      	lsls	r3, r3, #1
200007ac:	18fb      	adds	r3, r7, r3
200007ae:	681b      	ldr	r3, [r3, #0]
200007b0:	0019      	movs	r1, r3
200007b2:	2006      	movs	r0, #6
200007b4:	f000 f852 	bl	2000085c <turn>
200007b8:	e032      	b.n	20000820 <main+0x168>
                case LEFT: turn(LEFT, head, body); break; /*dirx = -, diry = 0*/
200007ba:	2308      	movs	r3, #8
200007bc:	18fa      	adds	r2, r7, r3
200007be:	23d0      	movs	r3, #208	; 0xd0
200007c0:	005b      	lsls	r3, r3, #1
200007c2:	18fb      	adds	r3, r7, r3
200007c4:	681b      	ldr	r3, [r3, #0]
200007c6:	0019      	movs	r1, r3
200007c8:	2004      	movs	r0, #4
200007ca:	f000 f847 	bl	2000085c <turn>
200007ce:	e027      	b.n	20000820 <main+0x168>
                case UP: turn(UP, head, body); break; /*dirx = 0, diry = -*/
200007d0:	2308      	movs	r3, #8
200007d2:	18fa      	adds	r2, r7, r3
200007d4:	23d0      	movs	r3, #208	; 0xd0
200007d6:	005b      	lsls	r3, r3, #1
200007d8:	18fb      	adds	r3, r7, r3
200007da:	681b      	ldr	r3, [r3, #0]
200007dc:	0019      	movs	r1, r3
200007de:	2002      	movs	r0, #2
200007e0:	f000 f83c 	bl	2000085c <turn>
200007e4:	e01c      	b.n	20000820 <main+0x168>
                case DOWN: turn(DOWN, head, body); break; /*dirx = 0, diry = +*/
200007e6:	2308      	movs	r3, #8
200007e8:	18fa      	adds	r2, r7, r3
200007ea:	23d0      	movs	r3, #208	; 0xd0
200007ec:	005b      	lsls	r3, r3, #1
200007ee:	18fb      	adds	r3, r7, r3
200007f0:	681b      	ldr	r3, [r3, #0]
200007f2:	0019      	movs	r1, r3
200007f4:	2008      	movs	r0, #8
200007f6:	f000 f831 	bl	2000085c <turn>
200007fa:	e011      	b.n	20000820 <main+0x168>
                case QUIT: game = 0; restart = 0; break;
200007fc:	2300      	movs	r3, #0
200007fe:	22d6      	movs	r2, #214	; 0xd6
20000800:	0052      	lsls	r2, r2, #1
20000802:	18ba      	adds	r2, r7, r2
20000804:	6013      	str	r3, [r2, #0]
20000806:	2300      	movs	r3, #0
20000808:	22d4      	movs	r2, #212	; 0xd4
2000080a:	0052      	lsls	r2, r2, #1
2000080c:	18ba      	adds	r2, r7, r2
2000080e:	6013      	str	r3, [r2, #0]
20000810:	e006      	b.n	20000820 <main+0x168>
                case RESTART: restart = 2; break;
20000812:	2302      	movs	r3, #2
20000814:	22d4      	movs	r2, #212	; 0xd4
20000816:	0052      	lsls	r2, r2, #1
20000818:	18ba      	adds	r2, r7, r2
2000081a:	6013      	str	r3, [r2, #0]
2000081c:	e000      	b.n	20000820 <main+0x168>
        while(restart == 1){
2000081e:	46c0      	nop			; (mov r8, r8)
20000820:	23d4      	movs	r3, #212	; 0xd4
20000822:	005b      	lsls	r3, r3, #1
20000824:	18fb      	adds	r3, r7, r3
20000826:	681b      	ldr	r3, [r3, #0]
20000828:	2b01      	cmp	r3, #1
2000082a:	d09d      	beq.n	20000768 <main+0xb0>
    while(game){
2000082c:	23d6      	movs	r3, #214	; 0xd6
2000082e:	005b      	lsls	r3, r3, #1
20000830:	18fb      	adds	r3, r7, r3
20000832:	681b      	ldr	r3, [r3, #0]
20000834:	2b00      	cmp	r3, #0
20000836:	d000      	beq.n	2000083a <main+0x182>
20000838:	e77d      	b.n	20000736 <main+0x7e>
            }
        }
    }
}
2000083a:	46c0      	nop			; (mov r8, r8)
2000083c:	46c0      	nop			; (mov r8, r8)
2000083e:	46bd      	mov	sp, r7
20000840:	b06c      	add	sp, #432	; 0x1b0
20000842:	bdb0      	pop	{r4, r5, r7, pc}
20000844:	200033f8 	strdcs	r3, [r0], -r8
20000848:	2000422c 	andcs	r4, r0, ip, lsr #4
2000084c:	fffffe58 			; <UNDEFINED> instruction: 0xfffffe58
20000850:	20004254 	andcs	r4, r0, r4, asr r2
20000854:	2000341c 	andcs	r3, r0, ip, lsl r4
20000858:	20004258 	andcs	r4, r0, r8, asr r2

2000085c <turn>:

void turn(int dir, POBJECT h ,POBJECT *b){
2000085c:	b580      	push	{r7, lr}
2000085e:	b084      	sub	sp, #16
20000860:	af00      	add	r7, sp, #0
20000862:	60f8      	str	r0, [r7, #12]
20000864:	60b9      	str	r1, [r7, #8]
20000866:	607a      	str	r2, [r7, #4]
    switch(dir){
20000868:	68fb      	ldr	r3, [r7, #12]
2000086a:	2b08      	cmp	r3, #8
2000086c:	d032      	beq.n	200008d4 <turn+0x78>
2000086e:	68fb      	ldr	r3, [r7, #12]
20000870:	2b08      	cmp	r3, #8
20000872:	dc41      	bgt.n	200008f8 <turn+0x9c>
20000874:	68fb      	ldr	r3, [r7, #12]
20000876:	2b06      	cmp	r3, #6
20000878:	d009      	beq.n	2000088e <turn+0x32>
2000087a:	68fb      	ldr	r3, [r7, #12]
2000087c:	2b06      	cmp	r3, #6
2000087e:	dc3b      	bgt.n	200008f8 <turn+0x9c>
20000880:	68fb      	ldr	r3, [r7, #12]
20000882:	2b02      	cmp	r3, #2
20000884:	d01a      	beq.n	200008bc <turn+0x60>
20000886:	68fb      	ldr	r3, [r7, #12]
20000888:	2b04      	cmp	r3, #4
2000088a:	d00b      	beq.n	200008a4 <turn+0x48>
                h->set_speed(h,0,4);
                
            }
            break;
    }
}
2000088c:	e034      	b.n	200008f8 <turn+0x9c>
            if(h->dirx == 0){
2000088e:	68bb      	ldr	r3, [r7, #8]
20000890:	685b      	ldr	r3, [r3, #4]
20000892:	2b00      	cmp	r3, #0
20000894:	d129      	bne.n	200008ea <turn+0x8e>
                h->set_speed(h,4,0);
20000896:	68bb      	ldr	r3, [r7, #8]
20000898:	6a1b      	ldr	r3, [r3, #32]
2000089a:	68b8      	ldr	r0, [r7, #8]
2000089c:	2200      	movs	r2, #0
2000089e:	2104      	movs	r1, #4
200008a0:	4798      	blx	r3
            break;
200008a2:	e022      	b.n	200008ea <turn+0x8e>
            if(h->dirx == 0){
200008a4:	68bb      	ldr	r3, [r7, #8]
200008a6:	685b      	ldr	r3, [r3, #4]
200008a8:	2b00      	cmp	r3, #0
200008aa:	d120      	bne.n	200008ee <turn+0x92>
                h->set_speed(h,-4,0);
200008ac:	68bb      	ldr	r3, [r7, #8]
200008ae:	6a1b      	ldr	r3, [r3, #32]
200008b0:	2204      	movs	r2, #4
200008b2:	4251      	negs	r1, r2
200008b4:	68b8      	ldr	r0, [r7, #8]
200008b6:	2200      	movs	r2, #0
200008b8:	4798      	blx	r3
            break;
200008ba:	e018      	b.n	200008ee <turn+0x92>
            if(h->diry == 0){
200008bc:	68bb      	ldr	r3, [r7, #8]
200008be:	689b      	ldr	r3, [r3, #8]
200008c0:	2b00      	cmp	r3, #0
200008c2:	d116      	bne.n	200008f2 <turn+0x96>
                h->set_speed(h,0,-4);
200008c4:	68bb      	ldr	r3, [r7, #8]
200008c6:	6a1b      	ldr	r3, [r3, #32]
200008c8:	2204      	movs	r2, #4
200008ca:	4252      	negs	r2, r2
200008cc:	68b8      	ldr	r0, [r7, #8]
200008ce:	2100      	movs	r1, #0
200008d0:	4798      	blx	r3
            break;
200008d2:	e00e      	b.n	200008f2 <turn+0x96>
            if(h->diry == 0){
200008d4:	68bb      	ldr	r3, [r7, #8]
200008d6:	689b      	ldr	r3, [r3, #8]
200008d8:	2b00      	cmp	r3, #0
200008da:	d10c      	bne.n	200008f6 <turn+0x9a>
                h->set_speed(h,0,4);
200008dc:	68bb      	ldr	r3, [r7, #8]
200008de:	6a1b      	ldr	r3, [r3, #32]
200008e0:	68b8      	ldr	r0, [r7, #8]
200008e2:	2204      	movs	r2, #4
200008e4:	2100      	movs	r1, #0
200008e6:	4798      	blx	r3
            break;
200008e8:	e005      	b.n	200008f6 <turn+0x9a>
            break;
200008ea:	46c0      	nop			; (mov r8, r8)
200008ec:	e004      	b.n	200008f8 <turn+0x9c>
            break;
200008ee:	46c0      	nop			; (mov r8, r8)
200008f0:	e002      	b.n	200008f8 <turn+0x9c>
            break;
200008f2:	46c0      	nop			; (mov r8, r8)
200008f4:	e000      	b.n	200008f8 <turn+0x9c>
            break;
200008f6:	46c0      	nop			; (mov r8, r8)
}
200008f8:	46c0      	nop			; (mov r8, r8)
200008fa:	46bd      	mov	sp, r7
200008fc:	b004      	add	sp, #16
200008fe:	bd80      	pop	{r7, pc}

20000900 <activate_row>:
#include <defines.h>
#include <keyb.h>

void activate_row(int i){
20000900:	b580      	push	{r7, lr}
20000902:	b082      	sub	sp, #8
20000904:	af00      	add	r7, sp, #0
20000906:	6078      	str	r0, [r7, #4]
    *GPIO_D_ODR_HIGH = 1 << (i+4);
20000908:	687b      	ldr	r3, [r7, #4]
2000090a:	3304      	adds	r3, #4
2000090c:	2201      	movs	r2, #1
2000090e:	409a      	lsls	r2, r3
20000910:	4b03      	ldr	r3, [pc, #12]	; (20000920 <activate_row+0x20>)
20000912:	b2d2      	uxtb	r2, r2
20000914:	701a      	strb	r2, [r3, #0]
}
20000916:	46c0      	nop			; (mov r8, r8)
20000918:	46bd      	mov	sp, r7
2000091a:	b002      	add	sp, #8
2000091c:	bd80      	pop	{r7, pc}
2000091e:	46c0      	nop			; (mov r8, r8)
20000920:	40020c15 	andmi	r0, r2, r5, lsl ip

20000924 <read_coloumn>:

int read_coloumn(){
20000924:	b580      	push	{r7, lr}
20000926:	b082      	sub	sp, #8
20000928:	af00      	add	r7, sp, #0
    int j; 
    char input = *GPIO_D_IDR_HIGH;
2000092a:	4a0e      	ldr	r2, [pc, #56]	; (20000964 <read_coloumn+0x40>)
2000092c:	1cfb      	adds	r3, r7, #3
2000092e:	7812      	ldrb	r2, [r2, #0]
20000930:	701a      	strb	r2, [r3, #0]
    for(j = 0; j<4 ; j++){
20000932:	2300      	movs	r3, #0
20000934:	607b      	str	r3, [r7, #4]
20000936:	e00c      	b.n	20000952 <read_coloumn+0x2e>
        if (input&(1<<j)){
20000938:	1cfb      	adds	r3, r7, #3
2000093a:	781a      	ldrb	r2, [r3, #0]
2000093c:	687b      	ldr	r3, [r7, #4]
2000093e:	411a      	asrs	r2, r3
20000940:	0013      	movs	r3, r2
20000942:	2201      	movs	r2, #1
20000944:	4013      	ands	r3, r2
20000946:	d001      	beq.n	2000094c <read_coloumn+0x28>
            return j;
20000948:	687b      	ldr	r3, [r7, #4]
2000094a:	e007      	b.n	2000095c <read_coloumn+0x38>
    for(j = 0; j<4 ; j++){
2000094c:	687b      	ldr	r3, [r7, #4]
2000094e:	3301      	adds	r3, #1
20000950:	607b      	str	r3, [r7, #4]
20000952:	687b      	ldr	r3, [r7, #4]
20000954:	2b03      	cmp	r3, #3
20000956:	ddef      	ble.n	20000938 <read_coloumn+0x14>
        }
    }
    return -1;
20000958:	2301      	movs	r3, #1
2000095a:	425b      	negs	r3, r3
}
2000095c:	0018      	movs	r0, r3
2000095e:	46bd      	mov	sp, r7
20000960:	b002      	add	sp, #8
20000962:	bd80      	pop	{r7, pc}
20000964:	40020c11 	andmi	r0, r2, r1, lsl ip

20000968 <keyb>:

/*rader in, kolumner ut*/
unsigned char keyb(void){
20000968:	b590      	push	{r4, r7, lr}
2000096a:	b08b      	sub	sp, #44	; 0x2c
2000096c:	af00      	add	r7, sp, #0
    unsigned char key_value[] = {0x06,0x5B,0x4F,0x77,0x66,0x6D,0x7D,0x7C,0x07,0x7F,0x6F,0x39,0x79,0x3F,0x71,0xBF};
2000096e:	2310      	movs	r3, #16
20000970:	18fb      	adds	r3, r7, r3
20000972:	4a15      	ldr	r2, [pc, #84]	; (200009c8 <keyb+0x60>)
20000974:	ca13      	ldmia	r2!, {r0, r1, r4}
20000976:	c313      	stmia	r3!, {r0, r1, r4}
20000978:	6812      	ldr	r2, [r2, #0]
2000097a:	601a      	str	r2, [r3, #0]
    unsigned char keyVal[] = {1,2,3,0xA,4,5,6,0xB,7,8,9,0xC,0xE,0,0xF,0xD};
2000097c:	003b      	movs	r3, r7
2000097e:	4a13      	ldr	r2, [pc, #76]	; (200009cc <keyb+0x64>)
20000980:	ca13      	ldmia	r2!, {r0, r1, r4}
20000982:	c313      	stmia	r3!, {r0, r1, r4}
20000984:	6812      	ldr	r2, [r2, #0]
20000986:	601a      	str	r2, [r3, #0]
    
        
    int row, coloumn;
    for (row = 0; row < 4; row++){
20000988:	2300      	movs	r3, #0
2000098a:	627b      	str	r3, [r7, #36]	; 0x24
2000098c:	e014      	b.n	200009b8 <keyb+0x50>
        activate_row(row);
2000098e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20000990:	0018      	movs	r0, r3
20000992:	f7ff ffb5 	bl	20000900 <activate_row>
        coloumn = read_coloumn();
20000996:	f7ff ffc5 	bl	20000924 <read_coloumn>
2000099a:	0003      	movs	r3, r0
2000099c:	623b      	str	r3, [r7, #32]
        if (coloumn != -1){
2000099e:	6a3b      	ldr	r3, [r7, #32]
200009a0:	3301      	adds	r3, #1
200009a2:	d006      	beq.n	200009b2 <keyb+0x4a>
            return keyVal[coloumn+row*4];
200009a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200009a6:	009a      	lsls	r2, r3, #2
200009a8:	6a3b      	ldr	r3, [r7, #32]
200009aa:	18d3      	adds	r3, r2, r3
200009ac:	003a      	movs	r2, r7
200009ae:	5cd3      	ldrb	r3, [r2, r3]
200009b0:	e006      	b.n	200009c0 <keyb+0x58>
    for (row = 0; row < 4; row++){
200009b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200009b4:	3301      	adds	r3, #1
200009b6:	627b      	str	r3, [r7, #36]	; 0x24
200009b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200009ba:	2b03      	cmp	r3, #3
200009bc:	dde7      	ble.n	2000098e <keyb+0x26>
        }
    }
    return 0x00;
200009be:	2300      	movs	r3, #0
}
200009c0:	0018      	movs	r0, r3
200009c2:	46bd      	mov	sp, r7
200009c4:	b00b      	add	sp, #44	; 0x2c
200009c6:	bd90      	pop	{r4, r7, pc}
200009c8:	20004290 	mulcs	r0, r0, r2
200009cc:	200042a0 	andcs	r4, r0, r0, lsr #5

200009d0 <out7seg>:

void out7seg(unsigned char c){
200009d0:	b580      	push	{r7, lr}
200009d2:	b082      	sub	sp, #8
200009d4:	af00      	add	r7, sp, #0
200009d6:	0002      	movs	r2, r0
200009d8:	1dfb      	adds	r3, r7, #7
200009da:	701a      	strb	r2, [r3, #0]
    
    *GPIO_D_ODR_LOW = c; //0x00 -> 0xFF
200009dc:	4a03      	ldr	r2, [pc, #12]	; (200009ec <out7seg+0x1c>)
200009de:	1dfb      	adds	r3, r7, #7
200009e0:	781b      	ldrb	r3, [r3, #0]
200009e2:	7013      	strb	r3, [r2, #0]
    
200009e4:	46c0      	nop			; (mov r8, r8)
200009e6:	46bd      	mov	sp, r7
200009e8:	b002      	add	sp, #8
200009ea:	bd80      	pop	{r7, pc}
200009ec:	40020c14 	andmi	r0, r2, r4, lsl ip

200009f0 <delay_250ns>:
#include <defines.h>
#include <delay.h>


void delay_250ns ( void){
200009f0:	b580      	push	{r7, lr}
200009f2:	af00      	add	r7, sp, #0
    #ifdef SIMULATOR
        return;
200009f4:	46c0      	nop			; (mov r8, r8)
    *STK_LOAD = ( (168/4) -1 );
    *STK_VAL = 0;
    *STK_CTRL = 5;
    while( (*STK_CTRL & 0x10000 )== 0 ) {} 
    *STK_CTRL = 0;
}
200009f6:	46bd      	mov	sp, r7
200009f8:	bd80      	pop	{r7, pc}

200009fa <delay_500ns>:

void delay_500ns(void){
200009fa:	b580      	push	{r7, lr}
200009fc:	af00      	add	r7, sp, #0
    #ifdef SIMULATOR
        return;
200009fe:	46c0      	nop			; (mov r8, r8)
    #endif
    delay_250ns();
    delay_250ns();
}
20000a00:	46bd      	mov	sp, r7
20000a02:	bd80      	pop	{r7, pc}

20000a04 <delay_mikro>:

void delay_mikro(unsigned int us){
20000a04:	b580      	push	{r7, lr}
20000a06:	b082      	sub	sp, #8
20000a08:	af00      	add	r7, sp, #0
20000a0a:	6078      	str	r0, [r7, #4]
    #ifdef SIMULATOR
        return;
20000a0c:	46c0      	nop			; (mov r8, r8)
        delay_250ns();
        delay_250ns();
        delay_250ns();
        delay_250ns();
    }
}
20000a0e:	46bd      	mov	sp, r7
20000a10:	b002      	add	sp, #8
20000a12:	bd80      	pop	{r7, pc}

20000a14 <delay_milli>:

void delay_milli(unsigned int ms){
20000a14:	b580      	push	{r7, lr}
20000a16:	b082      	sub	sp, #8
20000a18:	af00      	add	r7, sp, #0
20000a1a:	6078      	str	r0, [r7, #4]
    #ifdef SIMULATOR
        ms = ms / 1000;
20000a1c:	687b      	ldr	r3, [r7, #4]
20000a1e:	22fa      	movs	r2, #250	; 0xfa
20000a20:	0091      	lsls	r1, r2, #2
20000a22:	0018      	movs	r0, r3
20000a24:	f000 fb46 	bl	200010b4 <__udivsi3>
20000a28:	0003      	movs	r3, r0
20000a2a:	607b      	str	r3, [r7, #4]
        ms++;
20000a2c:	687b      	ldr	r3, [r7, #4]
20000a2e:	3301      	adds	r3, #1
20000a30:	607b      	str	r3, [r7, #4]
    #endif
    
    while(ms--){
20000a32:	e004      	b.n	20000a3e <delay_milli+0x2a>
        delay_mikro(1000);
20000a34:	23fa      	movs	r3, #250	; 0xfa
20000a36:	009b      	lsls	r3, r3, #2
20000a38:	0018      	movs	r0, r3
20000a3a:	f7ff ffe3 	bl	20000a04 <delay_mikro>
    while(ms--){
20000a3e:	687b      	ldr	r3, [r7, #4]
20000a40:	1e5a      	subs	r2, r3, #1
20000a42:	607a      	str	r2, [r7, #4]
20000a44:	2b00      	cmp	r3, #0
20000a46:	d1f5      	bne.n	20000a34 <delay_milli+0x20>
    }
20000a48:	46c0      	nop			; (mov r8, r8)
20000a4a:	46c0      	nop			; (mov r8, r8)
20000a4c:	46bd      	mov	sp, r7
20000a4e:	b002      	add	sp, #8
20000a50:	bd80      	pop	{r7, pc}
	...

20000a54 <graphic_init>:
#include <defines.h>
#include <asciidisplay.h>
#include <graphicdisplay.h>


void graphic_init(void){
20000a54:	b580      	push	{r7, lr}
20000a56:	af00      	add	r7, sp, #0
    graphic_ctrl_bit_set(B_E);
20000a58:	2040      	movs	r0, #64	; 0x40
20000a5a:	f000 f851 	bl	20000b00 <graphic_ctrl_bit_set>
    delay_mikro(10);
20000a5e:	200a      	movs	r0, #10
20000a60:	f7ff ffd0 	bl	20000a04 <delay_mikro>
    graphic_ctrl_bit_clear(B_CS1|B_CS2|B_RST|B_E);
20000a64:	2078      	movs	r0, #120	; 0x78
20000a66:	f000 f823 	bl	20000ab0 <graphic_ctrl_bit_clear>
    delay_milli(30);
20000a6a:	201e      	movs	r0, #30
20000a6c:	f7ff ffd2 	bl	20000a14 <delay_milli>
    graphic_ctrl_bit_set(B_RST);
20000a70:	2020      	movs	r0, #32
20000a72:	f000 f845 	bl	20000b00 <graphic_ctrl_bit_set>
    delay_milli(100);
20000a76:	2064      	movs	r0, #100	; 0x64
20000a78:	f7ff ffcc 	bl	20000a14 <delay_milli>
    graphic_write_command(LCD_OFF, B_CS1|B_CS2);
20000a7c:	2118      	movs	r1, #24
20000a7e:	203e      	movs	r0, #62	; 0x3e
20000a80:	f000 f942 	bl	20000d08 <graphic_write_command>
    graphic_write_command(LCD_ON, B_CS1|B_CS2);
20000a84:	2118      	movs	r1, #24
20000a86:	203f      	movs	r0, #63	; 0x3f
20000a88:	f000 f93e 	bl	20000d08 <graphic_write_command>
    graphic_write_command(LCD_DISP_START, B_CS1|B_CS2);
20000a8c:	2118      	movs	r1, #24
20000a8e:	20c0      	movs	r0, #192	; 0xc0
20000a90:	f000 f93a 	bl	20000d08 <graphic_write_command>
    graphic_write_command(LCD_SET_ADD, B_CS1|B_CS2);
20000a94:	2118      	movs	r1, #24
20000a96:	2040      	movs	r0, #64	; 0x40
20000a98:	f000 f936 	bl	20000d08 <graphic_write_command>
    graphic_write_command(LCD_SET_PAGE, B_CS1|B_CS2);
20000a9c:	2118      	movs	r1, #24
20000a9e:	20b8      	movs	r0, #184	; 0xb8
20000aa0:	f000 f932 	bl	20000d08 <graphic_write_command>
    select_controller(0);
20000aa4:	2000      	movs	r0, #0
20000aa6:	f000 f84d 	bl	20000b44 <select_controller>
}
20000aaa:	46c0      	nop			; (mov r8, r8)
20000aac:	46bd      	mov	sp, r7
20000aae:	bd80      	pop	{r7, pc}

20000ab0 <graphic_ctrl_bit_clear>:

void graphic_ctrl_bit_clear(uint8_t x){
20000ab0:	b580      	push	{r7, lr}
20000ab2:	b084      	sub	sp, #16
20000ab4:	af00      	add	r7, sp, #0
20000ab6:	0002      	movs	r2, r0
20000ab8:	1dfb      	adds	r3, r7, #7
20000aba:	701a      	strb	r2, [r3, #0]
    //*GPIO_E_ODR_LOW &= ( B_SELECT | ~x);
    //ascii_ctrl_bit_clear(x);
    uint8_t c;
    c =*GPIO_E_ODR_LOW;
20000abc:	4a0f      	ldr	r2, [pc, #60]	; (20000afc <graphic_ctrl_bit_clear+0x4c>)
20000abe:	210f      	movs	r1, #15
20000ac0:	187b      	adds	r3, r7, r1
20000ac2:	7812      	ldrb	r2, [r2, #0]
20000ac4:	701a      	strb	r2, [r3, #0]
    c &= ~x;
20000ac6:	1dfb      	adds	r3, r7, #7
20000ac8:	781b      	ldrb	r3, [r3, #0]
20000aca:	b25b      	sxtb	r3, r3
20000acc:	43db      	mvns	r3, r3
20000ace:	b25b      	sxtb	r3, r3
20000ad0:	187a      	adds	r2, r7, r1
20000ad2:	7812      	ldrb	r2, [r2, #0]
20000ad4:	b252      	sxtb	r2, r2
20000ad6:	4013      	ands	r3, r2
20000ad8:	b25a      	sxtb	r2, r3
20000ada:	187b      	adds	r3, r7, r1
20000adc:	701a      	strb	r2, [r3, #0]
    c &= ~B_SELECT;
20000ade:	187b      	adds	r3, r7, r1
20000ae0:	0008      	movs	r0, r1
20000ae2:	187a      	adds	r2, r7, r1
20000ae4:	7812      	ldrb	r2, [r2, #0]
20000ae6:	2104      	movs	r1, #4
20000ae8:	438a      	bics	r2, r1
20000aea:	701a      	strb	r2, [r3, #0]
    *GPIO_E_ODR_LOW=c;
20000aec:	4a03      	ldr	r2, [pc, #12]	; (20000afc <graphic_ctrl_bit_clear+0x4c>)
20000aee:	183b      	adds	r3, r7, r0
20000af0:	781b      	ldrb	r3, [r3, #0]
20000af2:	7013      	strb	r3, [r2, #0]

}
20000af4:	46c0      	nop			; (mov r8, r8)
20000af6:	46bd      	mov	sp, r7
20000af8:	b004      	add	sp, #16
20000afa:	bd80      	pop	{r7, pc}
20000afc:	40021014 	andmi	r1, r2, r4, lsl r0

20000b00 <graphic_ctrl_bit_set>:

void graphic_ctrl_bit_set(uint8_t x){
20000b00:	b580      	push	{r7, lr}
20000b02:	b084      	sub	sp, #16
20000b04:	af00      	add	r7, sp, #0
20000b06:	0002      	movs	r2, r0
20000b08:	1dfb      	adds	r3, r7, #7
20000b0a:	701a      	strb	r2, [r3, #0]
    //*GPIO_E_ODR_LOW |= (B_SELECT | x );
    //ascii_ctrl_bit_set(x);
    uint8_t c;
    c =*GPIO_E_ODR_LOW;
20000b0c:	4a0c      	ldr	r2, [pc, #48]	; (20000b40 <graphic_ctrl_bit_set+0x40>)
20000b0e:	200f      	movs	r0, #15
20000b10:	183b      	adds	r3, r7, r0
20000b12:	7812      	ldrb	r2, [r2, #0]
20000b14:	701a      	strb	r2, [r3, #0]
    c |= x; 
20000b16:	183b      	adds	r3, r7, r0
20000b18:	1839      	adds	r1, r7, r0
20000b1a:	1dfa      	adds	r2, r7, #7
20000b1c:	7809      	ldrb	r1, [r1, #0]
20000b1e:	7812      	ldrb	r2, [r2, #0]
20000b20:	430a      	orrs	r2, r1
20000b22:	701a      	strb	r2, [r3, #0]
    c &=(~B_SELECT);
20000b24:	183b      	adds	r3, r7, r0
20000b26:	183a      	adds	r2, r7, r0
20000b28:	7812      	ldrb	r2, [r2, #0]
20000b2a:	2104      	movs	r1, #4
20000b2c:	438a      	bics	r2, r1
20000b2e:	701a      	strb	r2, [r3, #0]
    *GPIO_E_ODR_LOW= c;
20000b30:	4a03      	ldr	r2, [pc, #12]	; (20000b40 <graphic_ctrl_bit_set+0x40>)
20000b32:	183b      	adds	r3, r7, r0
20000b34:	781b      	ldrb	r3, [r3, #0]
20000b36:	7013      	strb	r3, [r2, #0]
}
20000b38:	46c0      	nop			; (mov r8, r8)
20000b3a:	46bd      	mov	sp, r7
20000b3c:	b004      	add	sp, #16
20000b3e:	bd80      	pop	{r7, pc}
20000b40:	40021014 	andmi	r1, r2, r4, lsl r0

20000b44 <select_controller>:

void select_controller(uint8_t controller){
20000b44:	b580      	push	{r7, lr}
20000b46:	b082      	sub	sp, #8
20000b48:	af00      	add	r7, sp, #0
20000b4a:	0002      	movs	r2, r0
20000b4c:	1dfb      	adds	r3, r7, #7
20000b4e:	701a      	strb	r2, [r3, #0]
    switch(controller){
20000b50:	1dfb      	adds	r3, r7, #7
20000b52:	781b      	ldrb	r3, [r3, #0]
20000b54:	2b18      	cmp	r3, #24
20000b56:	d01a      	beq.n	20000b8e <select_controller+0x4a>
20000b58:	dc1d      	bgt.n	20000b96 <select_controller+0x52>
20000b5a:	2b10      	cmp	r3, #16
20000b5c:	d010      	beq.n	20000b80 <select_controller+0x3c>
20000b5e:	dc1a      	bgt.n	20000b96 <select_controller+0x52>
20000b60:	2b00      	cmp	r3, #0
20000b62:	d002      	beq.n	20000b6a <select_controller+0x26>
20000b64:	2b08      	cmp	r3, #8
20000b66:	d004      	beq.n	20000b72 <select_controller+0x2e>
            
        case B_CS1 | B_CS2:
            graphic_ctrl_bit_set(B_CS1|B_CS2);
            break;
    }
}
20000b68:	e015      	b.n	20000b96 <select_controller+0x52>
            graphic_ctrl_bit_clear(B_CS1|B_CS2);
20000b6a:	2018      	movs	r0, #24
20000b6c:	f7ff ffa0 	bl	20000ab0 <graphic_ctrl_bit_clear>
            break;
20000b70:	e011      	b.n	20000b96 <select_controller+0x52>
            graphic_ctrl_bit_set(B_CS1);
20000b72:	2008      	movs	r0, #8
20000b74:	f7ff ffc4 	bl	20000b00 <graphic_ctrl_bit_set>
            graphic_ctrl_bit_clear(B_CS2);
20000b78:	2010      	movs	r0, #16
20000b7a:	f7ff ff99 	bl	20000ab0 <graphic_ctrl_bit_clear>
            break;
20000b7e:	e00a      	b.n	20000b96 <select_controller+0x52>
            graphic_ctrl_bit_clear(B_CS1);
20000b80:	2008      	movs	r0, #8
20000b82:	f7ff ff95 	bl	20000ab0 <graphic_ctrl_bit_clear>
            graphic_ctrl_bit_set(B_CS2);
20000b86:	2010      	movs	r0, #16
20000b88:	f7ff ffba 	bl	20000b00 <graphic_ctrl_bit_set>
            break;
20000b8c:	e003      	b.n	20000b96 <select_controller+0x52>
            graphic_ctrl_bit_set(B_CS1|B_CS2);
20000b8e:	2018      	movs	r0, #24
20000b90:	f7ff ffb6 	bl	20000b00 <graphic_ctrl_bit_set>
            break;
20000b94:	46c0      	nop			; (mov r8, r8)
}
20000b96:	46c0      	nop			; (mov r8, r8)
20000b98:	46bd      	mov	sp, r7
20000b9a:	b002      	add	sp, #8
20000b9c:	bd80      	pop	{r7, pc}

20000b9e <graphic_wait_ready>:

void graphic_wait_ready(void){
20000b9e:	b580      	push	{r7, lr}
20000ba0:	af00      	add	r7, sp, #0
    graphic_ctrl_bit_clear(B_E);
20000ba2:	2040      	movs	r0, #64	; 0x40
20000ba4:	f7ff ff84 	bl	20000ab0 <graphic_ctrl_bit_clear>
    *GPIO_E_MODER = 0x00005555;
20000ba8:	4b0a      	ldr	r3, [pc, #40]	; (20000bd4 <graphic_wait_ready+0x36>)
20000baa:	4a0b      	ldr	r2, [pc, #44]	; (20000bd8 <graphic_wait_ready+0x3a>)
20000bac:	601a      	str	r2, [r3, #0]
    graphic_ctrl_bit_clear(B_RS);
20000bae:	2001      	movs	r0, #1
20000bb0:	f7ff ff7e 	bl	20000ab0 <graphic_ctrl_bit_clear>
    graphic_ctrl_bit_set(B_RW);
20000bb4:	2002      	movs	r0, #2
20000bb6:	f7ff ffa3 	bl	20000b00 <graphic_ctrl_bit_set>
    delay_500ns();
20000bba:	f7ff ff1e 	bl	200009fa <delay_500ns>
    while(1){
        graphic_ctrl_bit_set(B_E);
20000bbe:	2040      	movs	r0, #64	; 0x40
20000bc0:	f7ff ff9e 	bl	20000b00 <graphic_ctrl_bit_set>
        delay_500ns();
20000bc4:	f7ff ff19 	bl	200009fa <delay_500ns>
        graphic_ctrl_bit_clear(B_E);
20000bc8:	2040      	movs	r0, #64	; 0x40
20000bca:	f7ff ff71 	bl	20000ab0 <graphic_ctrl_bit_clear>
        delay_500ns();
20000bce:	f7ff ff14 	bl	200009fa <delay_500ns>
        graphic_ctrl_bit_set(B_E);
20000bd2:	e7f4      	b.n	20000bbe <graphic_wait_ready+0x20>
20000bd4:	40021000 	andmi	r1, r2, r0
20000bd8:	00005555 	andeq	r5, r0, r5, asr r5

20000bdc <graphic_read>:
    //graphic_ctrl_bit_set(B_E); // Ej på föreläsning
    *GPIO_E_MODER = 0x55555555;
    
}

unsigned char graphic_read(unsigned char controller){
20000bdc:	b580      	push	{r7, lr}
20000bde:	b084      	sub	sp, #16
20000be0:	af00      	add	r7, sp, #0
20000be2:	0002      	movs	r2, r0
20000be4:	1dfb      	adds	r3, r7, #7
20000be6:	701a      	strb	r2, [r3, #0]
    graphic_ctrl_bit_clear(B_E);
20000be8:	2040      	movs	r0, #64	; 0x40
20000bea:	f7ff ff61 	bl	20000ab0 <graphic_ctrl_bit_clear>
    *GPIO_E_MODER = 0x00005555;
20000bee:	4b1a      	ldr	r3, [pc, #104]	; (20000c58 <graphic_read+0x7c>)
20000bf0:	4a1a      	ldr	r2, [pc, #104]	; (20000c5c <graphic_read+0x80>)
20000bf2:	601a      	str	r2, [r3, #0]
    graphic_ctrl_bit_set(B_RS|B_RW);
20000bf4:	2003      	movs	r0, #3
20000bf6:	f7ff ff83 	bl	20000b00 <graphic_ctrl_bit_set>
    select_controller(controller);              //EJ i Boken
20000bfa:	1dfb      	adds	r3, r7, #7
20000bfc:	781b      	ldrb	r3, [r3, #0]
20000bfe:	0018      	movs	r0, r3
20000c00:	f7ff ffa0 	bl	20000b44 <select_controller>
    delay_500ns();
20000c04:	f7ff fef9 	bl	200009fa <delay_500ns>
    graphic_ctrl_bit_set(B_E);
20000c08:	2040      	movs	r0, #64	; 0x40
20000c0a:	f7ff ff79 	bl	20000b00 <graphic_ctrl_bit_set>
    delay_500ns();
20000c0e:	f7ff fef4 	bl	200009fa <delay_500ns>
    unsigned char retval = *GPIO_E_IDR_HIGH;
20000c12:	4a13      	ldr	r2, [pc, #76]	; (20000c60 <graphic_read+0x84>)
20000c14:	230f      	movs	r3, #15
20000c16:	18fb      	adds	r3, r7, r3
20000c18:	7812      	ldrb	r2, [r2, #0]
20000c1a:	701a      	strb	r2, [r3, #0]
    graphic_ctrl_bit_clear(B_E);
20000c1c:	2040      	movs	r0, #64	; 0x40
20000c1e:	f7ff ff47 	bl	20000ab0 <graphic_ctrl_bit_clear>
    *GPIO_E_MODER = 0x55555555;
20000c22:	4b0d      	ldr	r3, [pc, #52]	; (20000c58 <graphic_read+0x7c>)
20000c24:	4a0f      	ldr	r2, [pc, #60]	; (20000c64 <graphic_read+0x88>)
20000c26:	601a      	str	r2, [r3, #0]
    
    if (controller & B_CS1){
20000c28:	1dfb      	adds	r3, r7, #7
20000c2a:	781b      	ldrb	r3, [r3, #0]
20000c2c:	2208      	movs	r2, #8
20000c2e:	4013      	ands	r3, r2
20000c30:	d002      	beq.n	20000c38 <graphic_read+0x5c>
        select_controller(B_CS1);
20000c32:	2008      	movs	r0, #8
20000c34:	f7ff ff86 	bl	20000b44 <select_controller>
        //graphic_wait_ready();
    }
    if (controller & B_CS2){
20000c38:	1dfb      	adds	r3, r7, #7
20000c3a:	781b      	ldrb	r3, [r3, #0]
20000c3c:	2210      	movs	r2, #16
20000c3e:	4013      	ands	r3, r2
20000c40:	d002      	beq.n	20000c48 <graphic_read+0x6c>
        select_controller(B_CS2);
20000c42:	2010      	movs	r0, #16
20000c44:	f7ff ff7e 	bl	20000b44 <select_controller>
        //graphic_wait_ready();
    }
    return retval;
20000c48:	230f      	movs	r3, #15
20000c4a:	18fb      	adds	r3, r7, r3
20000c4c:	781b      	ldrb	r3, [r3, #0]
}
20000c4e:	0018      	movs	r0, r3
20000c50:	46bd      	mov	sp, r7
20000c52:	b004      	add	sp, #16
20000c54:	bd80      	pop	{r7, pc}
20000c56:	46c0      	nop			; (mov r8, r8)
20000c58:	40021000 	andmi	r1, r2, r0
20000c5c:	00005555 	andeq	r5, r0, r5, asr r5
20000c60:	40021011 	andmi	r1, r2, r1, lsl r0
20000c64:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000c68 <graphic_read_data>:

uint8_t graphic_read_data(uint8_t controller){
20000c68:	b580      	push	{r7, lr}
20000c6a:	b082      	sub	sp, #8
20000c6c:	af00      	add	r7, sp, #0
20000c6e:	0002      	movs	r2, r0
20000c70:	1dfb      	adds	r3, r7, #7
20000c72:	701a      	strb	r2, [r3, #0]
    (void) graphic_read(controller);
20000c74:	1dfb      	adds	r3, r7, #7
20000c76:	781b      	ldrb	r3, [r3, #0]
20000c78:	0018      	movs	r0, r3
20000c7a:	f7ff ffaf 	bl	20000bdc <graphic_read>
    return graphic_read(controller);
20000c7e:	1dfb      	adds	r3, r7, #7
20000c80:	781b      	ldrb	r3, [r3, #0]
20000c82:	0018      	movs	r0, r3
20000c84:	f7ff ffaa 	bl	20000bdc <graphic_read>
20000c88:	0003      	movs	r3, r0
}
20000c8a:	0018      	movs	r0, r3
20000c8c:	46bd      	mov	sp, r7
20000c8e:	b002      	add	sp, #8
20000c90:	bd80      	pop	{r7, pc}

20000c92 <graphic_write>:

void graphic_write(uint8_t value, uint8_t controller){
20000c92:	b580      	push	{r7, lr}
20000c94:	b082      	sub	sp, #8
20000c96:	af00      	add	r7, sp, #0
20000c98:	0002      	movs	r2, r0
20000c9a:	1dfb      	adds	r3, r7, #7
20000c9c:	701a      	strb	r2, [r3, #0]
20000c9e:	1dbb      	adds	r3, r7, #6
20000ca0:	1c0a      	adds	r2, r1, #0
20000ca2:	701a      	strb	r2, [r3, #0]
    *GPIO_E_ODR_HIGH = value;
20000ca4:	4a17      	ldr	r2, [pc, #92]	; (20000d04 <graphic_write+0x72>)
20000ca6:	1dfb      	adds	r3, r7, #7
20000ca8:	781b      	ldrb	r3, [r3, #0]
20000caa:	7013      	strb	r3, [r2, #0]
    select_controller(controller);
20000cac:	1dbb      	adds	r3, r7, #6
20000cae:	781b      	ldrb	r3, [r3, #0]
20000cb0:	0018      	movs	r0, r3
20000cb2:	f7ff ff47 	bl	20000b44 <select_controller>
    delay_500ns();
20000cb6:	f7ff fea0 	bl	200009fa <delay_500ns>
    graphic_ctrl_bit_set(B_E);
20000cba:	2040      	movs	r0, #64	; 0x40
20000cbc:	f7ff ff20 	bl	20000b00 <graphic_ctrl_bit_set>
    delay_500ns();
20000cc0:	f7ff fe9b 	bl	200009fa <delay_500ns>
    graphic_ctrl_bit_clear(B_E);
20000cc4:	2040      	movs	r0, #64	; 0x40
20000cc6:	f7ff fef3 	bl	20000ab0 <graphic_ctrl_bit_clear>
    
    if(controller & B_CS1){
20000cca:	1dbb      	adds	r3, r7, #6
20000ccc:	781b      	ldrb	r3, [r3, #0]
20000cce:	2208      	movs	r2, #8
20000cd0:	4013      	ands	r3, r2
20000cd2:	d002      	beq.n	20000cda <graphic_write+0x48>
        select_controller(B_CS1);
20000cd4:	2008      	movs	r0, #8
20000cd6:	f7ff ff35 	bl	20000b44 <select_controller>
        //graphic_wait_ready();
    }
    if(controller & B_CS2){
20000cda:	1dbb      	adds	r3, r7, #6
20000cdc:	781b      	ldrb	r3, [r3, #0]
20000cde:	2210      	movs	r2, #16
20000ce0:	4013      	ands	r3, r2
20000ce2:	d002      	beq.n	20000cea <graphic_write+0x58>
        select_controller(B_CS2);
20000ce4:	2010      	movs	r0, #16
20000ce6:	f7ff ff2d 	bl	20000b44 <select_controller>
        //graphic_wait_ready();
    }
    
    /* INTE på föreläsning*/
    *GPIO_E_ODR_HIGH = 0;
20000cea:	4b06      	ldr	r3, [pc, #24]	; (20000d04 <graphic_write+0x72>)
20000cec:	2200      	movs	r2, #0
20000cee:	701a      	strb	r2, [r3, #0]
    graphic_ctrl_bit_set(B_E);
20000cf0:	2040      	movs	r0, #64	; 0x40
20000cf2:	f7ff ff05 	bl	20000b00 <graphic_ctrl_bit_set>
    select_controller(0);
20000cf6:	2000      	movs	r0, #0
20000cf8:	f7ff ff24 	bl	20000b44 <select_controller>
      
}
20000cfc:	46c0      	nop			; (mov r8, r8)
20000cfe:	46bd      	mov	sp, r7
20000d00:	b002      	add	sp, #8
20000d02:	bd80      	pop	{r7, pc}
20000d04:	40021015 	andmi	r1, r2, r5, lsl r0

20000d08 <graphic_write_command>:

void graphic_write_command(uint8_t cmd, uint8_t controller){
20000d08:	b580      	push	{r7, lr}
20000d0a:	b082      	sub	sp, #8
20000d0c:	af00      	add	r7, sp, #0
20000d0e:	0002      	movs	r2, r0
20000d10:	1dfb      	adds	r3, r7, #7
20000d12:	701a      	strb	r2, [r3, #0]
20000d14:	1dbb      	adds	r3, r7, #6
20000d16:	1c0a      	adds	r2, r1, #0
20000d18:	701a      	strb	r2, [r3, #0]
    graphic_ctrl_bit_clear(B_E);
20000d1a:	2040      	movs	r0, #64	; 0x40
20000d1c:	f7ff fec8 	bl	20000ab0 <graphic_ctrl_bit_clear>
    select_controller(controller);
20000d20:	1dbb      	adds	r3, r7, #6
20000d22:	781b      	ldrb	r3, [r3, #0]
20000d24:	0018      	movs	r0, r3
20000d26:	f7ff ff0d 	bl	20000b44 <select_controller>
    graphic_ctrl_bit_clear(B_RS);
20000d2a:	2001      	movs	r0, #1
20000d2c:	f7ff fec0 	bl	20000ab0 <graphic_ctrl_bit_clear>
    graphic_ctrl_bit_clear(B_RW);
20000d30:	2002      	movs	r0, #2
20000d32:	f7ff febd 	bl	20000ab0 <graphic_ctrl_bit_clear>
    graphic_write(cmd, controller);
20000d36:	1dbb      	adds	r3, r7, #6
20000d38:	781a      	ldrb	r2, [r3, #0]
20000d3a:	1dfb      	adds	r3, r7, #7
20000d3c:	781b      	ldrb	r3, [r3, #0]
20000d3e:	0011      	movs	r1, r2
20000d40:	0018      	movs	r0, r3
20000d42:	f7ff ffa6 	bl	20000c92 <graphic_write>
}
20000d46:	46c0      	nop			; (mov r8, r8)
20000d48:	46bd      	mov	sp, r7
20000d4a:	b002      	add	sp, #8
20000d4c:	bd80      	pop	{r7, pc}

20000d4e <graphic_write_data>:

void graphic_write_data(uint8_t data, uint8_t controller){
20000d4e:	b580      	push	{r7, lr}
20000d50:	b082      	sub	sp, #8
20000d52:	af00      	add	r7, sp, #0
20000d54:	0002      	movs	r2, r0
20000d56:	1dfb      	adds	r3, r7, #7
20000d58:	701a      	strb	r2, [r3, #0]
20000d5a:	1dbb      	adds	r3, r7, #6
20000d5c:	1c0a      	adds	r2, r1, #0
20000d5e:	701a      	strb	r2, [r3, #0]
    graphic_ctrl_bit_clear(B_E);
20000d60:	2040      	movs	r0, #64	; 0x40
20000d62:	f7ff fea5 	bl	20000ab0 <graphic_ctrl_bit_clear>
    select_controller(controller);
20000d66:	1dbb      	adds	r3, r7, #6
20000d68:	781b      	ldrb	r3, [r3, #0]
20000d6a:	0018      	movs	r0, r3
20000d6c:	f7ff feea 	bl	20000b44 <select_controller>
    graphic_ctrl_bit_set(B_RS);
20000d70:	2001      	movs	r0, #1
20000d72:	f7ff fec5 	bl	20000b00 <graphic_ctrl_bit_set>
    graphic_ctrl_bit_clear(B_RW);
20000d76:	2002      	movs	r0, #2
20000d78:	f7ff fe9a 	bl	20000ab0 <graphic_ctrl_bit_clear>
    graphic_write(data, controller);
20000d7c:	1dbb      	adds	r3, r7, #6
20000d7e:	781a      	ldrb	r2, [r3, #0]
20000d80:	1dfb      	adds	r3, r7, #7
20000d82:	781b      	ldrb	r3, [r3, #0]
20000d84:	0011      	movs	r1, r2
20000d86:	0018      	movs	r0, r3
20000d88:	f7ff ff83 	bl	20000c92 <graphic_write>
}
20000d8c:	46c0      	nop			; (mov r8, r8)
20000d8e:	46bd      	mov	sp, r7
20000d90:	b002      	add	sp, #8
20000d92:	bd80      	pop	{r7, pc}

20000d94 <graphic_clear_screen>:

void graphic_clear_screen(void){
20000d94:	b580      	push	{r7, lr}
20000d96:	b082      	sub	sp, #8
20000d98:	af00      	add	r7, sp, #0
    for (int page = 0; page < 8; page++){
20000d9a:	2300      	movs	r3, #0
20000d9c:	607b      	str	r3, [r7, #4]
20000d9e:	e01e      	b.n	20000dde <graphic_clear_screen+0x4a>
        graphic_write_command(LCD_SET_PAGE | page, B_CS1|B_CS2);
20000da0:	687b      	ldr	r3, [r7, #4]
20000da2:	b25b      	sxtb	r3, r3
20000da4:	2248      	movs	r2, #72	; 0x48
20000da6:	4252      	negs	r2, r2
20000da8:	4313      	orrs	r3, r2
20000daa:	b25b      	sxtb	r3, r3
20000dac:	b2db      	uxtb	r3, r3
20000dae:	2118      	movs	r1, #24
20000db0:	0018      	movs	r0, r3
20000db2:	f7ff ffa9 	bl	20000d08 <graphic_write_command>
        graphic_write_command(LCD_SET_ADD | 0, B_CS1|B_CS2);
20000db6:	2118      	movs	r1, #24
20000db8:	2040      	movs	r0, #64	; 0x40
20000dba:	f7ff ffa5 	bl	20000d08 <graphic_write_command>
        for (int add = 0; add < 63; add++){
20000dbe:	2300      	movs	r3, #0
20000dc0:	603b      	str	r3, [r7, #0]
20000dc2:	e006      	b.n	20000dd2 <graphic_clear_screen+0x3e>
            graphic_write_data(0, B_CS1|B_CS2);
20000dc4:	2118      	movs	r1, #24
20000dc6:	2000      	movs	r0, #0
20000dc8:	f7ff ffc1 	bl	20000d4e <graphic_write_data>
        for (int add = 0; add < 63; add++){
20000dcc:	683b      	ldr	r3, [r7, #0]
20000dce:	3301      	adds	r3, #1
20000dd0:	603b      	str	r3, [r7, #0]
20000dd2:	683b      	ldr	r3, [r7, #0]
20000dd4:	2b3e      	cmp	r3, #62	; 0x3e
20000dd6:	ddf5      	ble.n	20000dc4 <graphic_clear_screen+0x30>
    for (int page = 0; page < 8; page++){
20000dd8:	687b      	ldr	r3, [r7, #4]
20000dda:	3301      	adds	r3, #1
20000ddc:	607b      	str	r3, [r7, #4]
20000dde:	687b      	ldr	r3, [r7, #4]
20000de0:	2b07      	cmp	r3, #7
20000de2:	dddd      	ble.n	20000da0 <graphic_clear_screen+0xc>
        }
    }
}
20000de4:	46c0      	nop			; (mov r8, r8)
20000de6:	46c0      	nop			; (mov r8, r8)
20000de8:	46bd      	mov	sp, r7
20000dea:	b002      	add	sp, #8
20000dec:	bd80      	pop	{r7, pc}

20000dee <clear_backbuffer>:

void clear_backbuffer(){
20000dee:	b580      	push	{r7, lr}
20000df0:	b082      	sub	sp, #8
20000df2:	af00      	add	r7, sp, #0
    int i;
    for (i = 0; i < 1024; i++)
20000df4:	2300      	movs	r3, #0
20000df6:	607b      	str	r3, [r7, #4]
20000df8:	e007      	b.n	20000e0a <clear_backbuffer+0x1c>
        backBuffer[i] = 0;
20000dfa:	4b09      	ldr	r3, [pc, #36]	; (20000e20 <clear_backbuffer+0x32>)
20000dfc:	687a      	ldr	r2, [r7, #4]
20000dfe:	0092      	lsls	r2, r2, #2
20000e00:	2100      	movs	r1, #0
20000e02:	50d1      	str	r1, [r2, r3]
    for (i = 0; i < 1024; i++)
20000e04:	687b      	ldr	r3, [r7, #4]
20000e06:	3301      	adds	r3, #1
20000e08:	607b      	str	r3, [r7, #4]
20000e0a:	687a      	ldr	r2, [r7, #4]
20000e0c:	2380      	movs	r3, #128	; 0x80
20000e0e:	00db      	lsls	r3, r3, #3
20000e10:	429a      	cmp	r2, r3
20000e12:	dbf2      	blt.n	20000dfa <clear_backbuffer+0xc>
}
20000e14:	46c0      	nop			; (mov r8, r8)
20000e16:	46c0      	nop			; (mov r8, r8)
20000e18:	46bd      	mov	sp, r7
20000e1a:	b002      	add	sp, #8
20000e1c:	bd80      	pop	{r7, pc}
20000e1e:	46c0      	nop			; (mov r8, r8)
20000e20:	200021d0 	ldrdcs	r2, [r0], -r0

20000e24 <pixel>:

void pixel(unsigned x, unsigned y){
20000e24:	b580      	push	{r7, lr}
20000e26:	b084      	sub	sp, #16
20000e28:	af00      	add	r7, sp, #0
20000e2a:	6078      	str	r0, [r7, #4]
20000e2c:	6039      	str	r1, [r7, #0]
    uint8_t mask;
    int index = 0;
20000e2e:	2300      	movs	r3, #0
20000e30:	60fb      	str	r3, [r7, #12]
    if ((x >128)||(x <1)||(y >64)||(y <1)) return;
20000e32:	687b      	ldr	r3, [r7, #4]
20000e34:	2b80      	cmp	r3, #128	; 0x80
20000e36:	d831      	bhi.n	20000e9c <pixel+0x78>
20000e38:	687b      	ldr	r3, [r7, #4]
20000e3a:	2b00      	cmp	r3, #0
20000e3c:	d02e      	beq.n	20000e9c <pixel+0x78>
20000e3e:	683b      	ldr	r3, [r7, #0]
20000e40:	2b40      	cmp	r3, #64	; 0x40
20000e42:	d82b      	bhi.n	20000e9c <pixel+0x78>
20000e44:	683b      	ldr	r3, [r7, #0]
20000e46:	2b00      	cmp	r3, #0
20000e48:	d028      	beq.n	20000e9c <pixel+0x78>

    mask = 1 << ((y-1)%8);
20000e4a:	683b      	ldr	r3, [r7, #0]
20000e4c:	3b01      	subs	r3, #1
20000e4e:	2207      	movs	r2, #7
20000e50:	4013      	ands	r3, r2
20000e52:	2201      	movs	r2, #1
20000e54:	409a      	lsls	r2, r3
20000e56:	230b      	movs	r3, #11
20000e58:	18fb      	adds	r3, r7, r3
20000e5a:	701a      	strb	r2, [r3, #0]
    
    if(x > 64){
20000e5c:	687b      	ldr	r3, [r7, #4]
20000e5e:	2b40      	cmp	r3, #64	; 0x40
20000e60:	d905      	bls.n	20000e6e <pixel+0x4a>
        x -= 65;
20000e62:	687b      	ldr	r3, [r7, #4]
20000e64:	3b41      	subs	r3, #65	; 0x41
20000e66:	607b      	str	r3, [r7, #4]
        index = 512;
20000e68:	2380      	movs	r3, #128	; 0x80
20000e6a:	009b      	lsls	r3, r3, #2
20000e6c:	60fb      	str	r3, [r7, #12]
    }
    
    index += x + ((y-1)/8)*64;
20000e6e:	683b      	ldr	r3, [r7, #0]
20000e70:	3b01      	subs	r3, #1
20000e72:	08db      	lsrs	r3, r3, #3
20000e74:	019a      	lsls	r2, r3, #6
20000e76:	687b      	ldr	r3, [r7, #4]
20000e78:	18d2      	adds	r2, r2, r3
20000e7a:	68fb      	ldr	r3, [r7, #12]
20000e7c:	18d3      	adds	r3, r2, r3
20000e7e:	60fb      	str	r3, [r7, #12]
    
    backBuffer[index] |= mask;
20000e80:	4b08      	ldr	r3, [pc, #32]	; (20000ea4 <pixel+0x80>)
20000e82:	68fa      	ldr	r2, [r7, #12]
20000e84:	0092      	lsls	r2, r2, #2
20000e86:	58d2      	ldr	r2, [r2, r3]
20000e88:	230b      	movs	r3, #11
20000e8a:	18fb      	adds	r3, r7, r3
20000e8c:	781b      	ldrb	r3, [r3, #0]
20000e8e:	431a      	orrs	r2, r3
20000e90:	0011      	movs	r1, r2
20000e92:	4b04      	ldr	r3, [pc, #16]	; (20000ea4 <pixel+0x80>)
20000e94:	68fa      	ldr	r2, [r7, #12]
20000e96:	0092      	lsls	r2, r2, #2
20000e98:	50d1      	str	r1, [r2, r3]
20000e9a:	e000      	b.n	20000e9e <pixel+0x7a>
    if ((x >128)||(x <1)||(y >64)||(y <1)) return;
20000e9c:	46c0      	nop			; (mov r8, r8)
}
20000e9e:	46bd      	mov	sp, r7
20000ea0:	b004      	add	sp, #16
20000ea2:	bd80      	pop	{r7, pc}
20000ea4:	200021d0 	ldrdcs	r2, [r0], -r0

20000ea8 <graphic_draw_screen>:

void graphic_draw_screen(void){
20000ea8:	b580      	push	{r7, lr}
20000eaa:	b084      	sub	sp, #16
20000eac:	af00      	add	r7, sp, #0
    uint8_t i,  j, controller, c;
    unsigned int k = 0;
20000eae:	2300      	movs	r3, #0
20000eb0:	60bb      	str	r3, [r7, #8]
    
    for (c = 0; c < 2; c++){
20000eb2:	230d      	movs	r3, #13
20000eb4:	18fb      	adds	r3, r7, r3
20000eb6:	2200      	movs	r2, #0
20000eb8:	701a      	strb	r2, [r3, #0]
20000eba:	e050      	b.n	20000f5e <graphic_draw_screen+0xb6>
        controller = (c==0) ? B_CS1 : B_CS2;
20000ebc:	230d      	movs	r3, #13
20000ebe:	18fb      	adds	r3, r7, r3
20000ec0:	781b      	ldrb	r3, [r3, #0]
20000ec2:	2b00      	cmp	r3, #0
20000ec4:	d101      	bne.n	20000eca <graphic_draw_screen+0x22>
20000ec6:	2208      	movs	r2, #8
20000ec8:	e000      	b.n	20000ecc <graphic_draw_screen+0x24>
20000eca:	2210      	movs	r2, #16
20000ecc:	1dfb      	adds	r3, r7, #7
20000ece:	701a      	strb	r2, [r3, #0]
        for (j = 0; j < 8; j++){
20000ed0:	230e      	movs	r3, #14
20000ed2:	18fb      	adds	r3, r7, r3
20000ed4:	2200      	movs	r2, #0
20000ed6:	701a      	strb	r2, [r3, #0]
20000ed8:	e036      	b.n	20000f48 <graphic_draw_screen+0xa0>
            graphic_write_command(LCD_SET_PAGE | j, controller);
20000eda:	230e      	movs	r3, #14
20000edc:	18fb      	adds	r3, r7, r3
20000ede:	781b      	ldrb	r3, [r3, #0]
20000ee0:	2248      	movs	r2, #72	; 0x48
20000ee2:	4252      	negs	r2, r2
20000ee4:	4313      	orrs	r3, r2
20000ee6:	b2da      	uxtb	r2, r3
20000ee8:	1dfb      	adds	r3, r7, #7
20000eea:	781b      	ldrb	r3, [r3, #0]
20000eec:	0019      	movs	r1, r3
20000eee:	0010      	movs	r0, r2
20000ef0:	f7ff ff0a 	bl	20000d08 <graphic_write_command>
            graphic_write_command(LCD_SET_ADD | 0, controller);
20000ef4:	1dfb      	adds	r3, r7, #7
20000ef6:	781b      	ldrb	r3, [r3, #0]
20000ef8:	0019      	movs	r1, r3
20000efa:	2040      	movs	r0, #64	; 0x40
20000efc:	f7ff ff04 	bl	20000d08 <graphic_write_command>
            for(i = 0; i <= 63; i++, k++){
20000f00:	230f      	movs	r3, #15
20000f02:	18fb      	adds	r3, r7, r3
20000f04:	2200      	movs	r2, #0
20000f06:	701a      	strb	r2, [r3, #0]
20000f08:	e013      	b.n	20000f32 <graphic_draw_screen+0x8a>
                graphic_write_data(backBuffer[k],controller);  
20000f0a:	4b1a      	ldr	r3, [pc, #104]	; (20000f74 <graphic_draw_screen+0xcc>)
20000f0c:	68ba      	ldr	r2, [r7, #8]
20000f0e:	0092      	lsls	r2, r2, #2
20000f10:	58d3      	ldr	r3, [r2, r3]
20000f12:	b2da      	uxtb	r2, r3
20000f14:	1dfb      	adds	r3, r7, #7
20000f16:	781b      	ldrb	r3, [r3, #0]
20000f18:	0019      	movs	r1, r3
20000f1a:	0010      	movs	r0, r2
20000f1c:	f7ff ff17 	bl	20000d4e <graphic_write_data>
            for(i = 0; i <= 63; i++, k++){
20000f20:	210f      	movs	r1, #15
20000f22:	187b      	adds	r3, r7, r1
20000f24:	781a      	ldrb	r2, [r3, #0]
20000f26:	187b      	adds	r3, r7, r1
20000f28:	3201      	adds	r2, #1
20000f2a:	701a      	strb	r2, [r3, #0]
20000f2c:	68bb      	ldr	r3, [r7, #8]
20000f2e:	3301      	adds	r3, #1
20000f30:	60bb      	str	r3, [r7, #8]
20000f32:	230f      	movs	r3, #15
20000f34:	18fb      	adds	r3, r7, r3
20000f36:	781b      	ldrb	r3, [r3, #0]
20000f38:	2b3f      	cmp	r3, #63	; 0x3f
20000f3a:	d9e6      	bls.n	20000f0a <graphic_draw_screen+0x62>
        for (j = 0; j < 8; j++){
20000f3c:	210e      	movs	r1, #14
20000f3e:	187b      	adds	r3, r7, r1
20000f40:	781a      	ldrb	r2, [r3, #0]
20000f42:	187b      	adds	r3, r7, r1
20000f44:	3201      	adds	r2, #1
20000f46:	701a      	strb	r2, [r3, #0]
20000f48:	230e      	movs	r3, #14
20000f4a:	18fb      	adds	r3, r7, r3
20000f4c:	781b      	ldrb	r3, [r3, #0]
20000f4e:	2b07      	cmp	r3, #7
20000f50:	d9c3      	bls.n	20000eda <graphic_draw_screen+0x32>
    for (c = 0; c < 2; c++){
20000f52:	210d      	movs	r1, #13
20000f54:	187b      	adds	r3, r7, r1
20000f56:	781a      	ldrb	r2, [r3, #0]
20000f58:	187b      	adds	r3, r7, r1
20000f5a:	3201      	adds	r2, #1
20000f5c:	701a      	strb	r2, [r3, #0]
20000f5e:	230d      	movs	r3, #13
20000f60:	18fb      	adds	r3, r7, r3
20000f62:	781b      	ldrb	r3, [r3, #0]
20000f64:	2b01      	cmp	r3, #1
20000f66:	d9a9      	bls.n	20000ebc <graphic_draw_screen+0x14>
            }
        }
    }
}
20000f68:	46c0      	nop			; (mov r8, r8)
20000f6a:	46c0      	nop			; (mov r8, r8)
20000f6c:	46bd      	mov	sp, r7
20000f6e:	b004      	add	sp, #16
20000f70:	bd80      	pop	{r7, pc}
20000f72:	46c0      	nop			; (mov r8, r8)
20000f74:	200021d0 	ldrdcs	r2, [r0], -r0

20000f78 <init_queue>:
POBJECT objArray[MAX];
int front = 0;
int rear = -1;
int itemCount = 0;

void init_queue(){
20000f78:	b580      	push	{r7, lr}
20000f7a:	b082      	sub	sp, #8
20000f7c:	af00      	add	r7, sp, #0
    for(int i = 0; i < MAX; i++)
20000f7e:	2300      	movs	r3, #0
20000f80:	607b      	str	r3, [r7, #4]
20000f82:	e007      	b.n	20000f94 <init_queue+0x1c>
        objArray[i] = NULL;
20000f84:	4b07      	ldr	r3, [pc, #28]	; (20000fa4 <init_queue+0x2c>)
20000f86:	687a      	ldr	r2, [r7, #4]
20000f88:	0092      	lsls	r2, r2, #2
20000f8a:	2100      	movs	r1, #0
20000f8c:	50d1      	str	r1, [r2, r3]
    for(int i = 0; i < MAX; i++)
20000f8e:	687b      	ldr	r3, [r7, #4]
20000f90:	3301      	adds	r3, #1
20000f92:	607b      	str	r3, [r7, #4]
20000f94:	687b      	ldr	r3, [r7, #4]
20000f96:	2b63      	cmp	r3, #99	; 0x63
20000f98:	ddf4      	ble.n	20000f84 <init_queue+0xc>
}
20000f9a:	46c0      	nop			; (mov r8, r8)
20000f9c:	46c0      	nop			; (mov r8, r8)
20000f9e:	46bd      	mov	sp, r7
20000fa0:	b002      	add	sp, #8
20000fa2:	bd80      	pop	{r7, pc}
20000fa4:	200031d8 	ldrdcs	r3, [r0], -r8

20000fa8 <peek>:

/*returns the head*/
POBJECT peek() {
20000fa8:	b580      	push	{r7, lr}
20000faa:	af00      	add	r7, sp, #0
   return objArray[front];
20000fac:	4b03      	ldr	r3, [pc, #12]	; (20000fbc <peek+0x14>)
20000fae:	681a      	ldr	r2, [r3, #0]
20000fb0:	4b03      	ldr	r3, [pc, #12]	; (20000fc0 <peek+0x18>)
20000fb2:	0092      	lsls	r2, r2, #2
20000fb4:	58d3      	ldr	r3, [r2, r3]
}
20000fb6:	0018      	movs	r0, r3
20000fb8:	46bd      	mov	sp, r7
20000fba:	bd80      	pop	{r7, pc}
20000fbc:	200031d0 	ldrdcs	r3, [r0], -r0
20000fc0:	200031d8 	ldrdcs	r3, [r0], -r8

20000fc4 <isEmpty>:

/*returns true if itemCount == 0*/
bool isEmpty() {
20000fc4:	b580      	push	{r7, lr}
20000fc6:	af00      	add	r7, sp, #0
   return itemCount == 0;
20000fc8:	4b03      	ldr	r3, [pc, #12]	; (20000fd8 <isEmpty+0x14>)
20000fca:	681b      	ldr	r3, [r3, #0]
20000fcc:	425a      	negs	r2, r3
20000fce:	4153      	adcs	r3, r2
20000fd0:	b2db      	uxtb	r3, r3
}
20000fd2:	0018      	movs	r0, r3
20000fd4:	46bd      	mov	sp, r7
20000fd6:	bd80      	pop	{r7, pc}
20000fd8:	200031d4 	ldrdcs	r3, [r0], -r4

20000fdc <isFull>:

/*returns true if itemCount == MAX (512)*/
bool isFull() {
20000fdc:	b580      	push	{r7, lr}
20000fde:	af00      	add	r7, sp, #0
   return itemCount == MAX;
20000fe0:	4b04      	ldr	r3, [pc, #16]	; (20000ff4 <isFull+0x18>)
20000fe2:	681b      	ldr	r3, [r3, #0]
20000fe4:	3b64      	subs	r3, #100	; 0x64
20000fe6:	425a      	negs	r2, r3
20000fe8:	4153      	adcs	r3, r2
20000fea:	b2db      	uxtb	r3, r3
}
20000fec:	0018      	movs	r0, r3
20000fee:	46bd      	mov	sp, r7
20000ff0:	bd80      	pop	{r7, pc}
20000ff2:	46c0      	nop			; (mov r8, r8)
20000ff4:	200031d4 	ldrdcs	r3, [r0], -r4

20000ff8 <size>:

/*Returns itemCount*/
int size() {
20000ff8:	b580      	push	{r7, lr}
20000ffa:	af00      	add	r7, sp, #0
   return itemCount;
20000ffc:	4b02      	ldr	r3, [pc, #8]	; (20001008 <size+0x10>)
20000ffe:	681b      	ldr	r3, [r3, #0]
}  
20001000:	0018      	movs	r0, r3
20001002:	46bd      	mov	sp, r7
20001004:	bd80      	pop	{r7, pc}
20001006:	46c0      	nop			; (mov r8, r8)
20001008:	200031d4 	ldrdcs	r3, [r0], -r4

2000100c <insert>:

/*Adds a node in the end of the queue*/
void insert(POBJECT data) {
2000100c:	b580      	push	{r7, lr}
2000100e:	b082      	sub	sp, #8
20001010:	af00      	add	r7, sp, #0
20001012:	6078      	str	r0, [r7, #4]

   if(!isFull()) {
20001014:	f7ff ffe2 	bl	20000fdc <isFull>
20001018:	0003      	movs	r3, r0
2000101a:	001a      	movs	r2, r3
2000101c:	2301      	movs	r3, #1
2000101e:	4053      	eors	r3, r2
20001020:	b2db      	uxtb	r3, r3
20001022:	2b00      	cmp	r3, #0
20001024:	d017      	beq.n	20001056 <insert+0x4a>
	
      if(rear == MAX-1) {
20001026:	4b0e      	ldr	r3, [pc, #56]	; (20001060 <insert+0x54>)
20001028:	681b      	ldr	r3, [r3, #0]
2000102a:	2b63      	cmp	r3, #99	; 0x63
2000102c:	d103      	bne.n	20001036 <insert+0x2a>
         rear = -1;            
2000102e:	4b0c      	ldr	r3, [pc, #48]	; (20001060 <insert+0x54>)
20001030:	2201      	movs	r2, #1
20001032:	4252      	negs	r2, r2
20001034:	601a      	str	r2, [r3, #0]
      }       
      objArray[++rear] = data;
20001036:	4b0a      	ldr	r3, [pc, #40]	; (20001060 <insert+0x54>)
20001038:	681b      	ldr	r3, [r3, #0]
2000103a:	1c5a      	adds	r2, r3, #1
2000103c:	4b08      	ldr	r3, [pc, #32]	; (20001060 <insert+0x54>)
2000103e:	601a      	str	r2, [r3, #0]
20001040:	4b07      	ldr	r3, [pc, #28]	; (20001060 <insert+0x54>)
20001042:	681a      	ldr	r2, [r3, #0]
20001044:	4b07      	ldr	r3, [pc, #28]	; (20001064 <insert+0x58>)
20001046:	0092      	lsls	r2, r2, #2
20001048:	6879      	ldr	r1, [r7, #4]
2000104a:	50d1      	str	r1, [r2, r3]
      itemCount++;
2000104c:	4b06      	ldr	r3, [pc, #24]	; (20001068 <insert+0x5c>)
2000104e:	681b      	ldr	r3, [r3, #0]
20001050:	1c5a      	adds	r2, r3, #1
20001052:	4b05      	ldr	r3, [pc, #20]	; (20001068 <insert+0x5c>)
20001054:	601a      	str	r2, [r3, #0]
   }
}
20001056:	46c0      	nop			; (mov r8, r8)
20001058:	46bd      	mov	sp, r7
2000105a:	b002      	add	sp, #8
2000105c:	bd80      	pop	{r7, pc}
2000105e:	46c0      	nop			; (mov r8, r8)
20001060:	20004250 	andcs	r4, r0, r0, asr r2
20001064:	200031d8 	ldrdcs	r3, [r0], -r8
20001068:	200031d4 	ldrdcs	r3, [r0], -r4

2000106c <remove>:

int remove() {
2000106c:	b580      	push	{r7, lr}
2000106e:	b082      	sub	sp, #8
20001070:	af00      	add	r7, sp, #0
   POBJECT data = objArray[front++];
20001072:	4b0d      	ldr	r3, [pc, #52]	; (200010a8 <remove+0x3c>)
20001074:	681b      	ldr	r3, [r3, #0]
20001076:	1c59      	adds	r1, r3, #1
20001078:	4a0b      	ldr	r2, [pc, #44]	; (200010a8 <remove+0x3c>)
2000107a:	6011      	str	r1, [r2, #0]
2000107c:	4a0b      	ldr	r2, [pc, #44]	; (200010ac <remove+0x40>)
2000107e:	009b      	lsls	r3, r3, #2
20001080:	589b      	ldr	r3, [r3, r2]
20001082:	607b      	str	r3, [r7, #4]
	
   if(front == MAX) {
20001084:	4b08      	ldr	r3, [pc, #32]	; (200010a8 <remove+0x3c>)
20001086:	681b      	ldr	r3, [r3, #0]
20001088:	2b64      	cmp	r3, #100	; 0x64
2000108a:	d102      	bne.n	20001092 <remove+0x26>
      front = 0;
2000108c:	4b06      	ldr	r3, [pc, #24]	; (200010a8 <remove+0x3c>)
2000108e:	2200      	movs	r2, #0
20001090:	601a      	str	r2, [r3, #0]
   }
	
   itemCount--;
20001092:	4b07      	ldr	r3, [pc, #28]	; (200010b0 <remove+0x44>)
20001094:	681b      	ldr	r3, [r3, #0]
20001096:	1e5a      	subs	r2, r3, #1
20001098:	4b05      	ldr	r3, [pc, #20]	; (200010b0 <remove+0x44>)
2000109a:	601a      	str	r2, [r3, #0]
   return (int)data;  
2000109c:	687b      	ldr	r3, [r7, #4]
}
2000109e:	0018      	movs	r0, r3
200010a0:	46bd      	mov	sp, r7
200010a2:	b002      	add	sp, #8
200010a4:	bd80      	pop	{r7, pc}
200010a6:	46c0      	nop			; (mov r8, r8)
200010a8:	200031d0 	ldrdcs	r3, [r0], -r0
200010ac:	200031d8 	ldrdcs	r3, [r0], -r8
200010b0:	200031d4 	ldrdcs	r3, [r0], -r4

200010b4 <__udivsi3>:
200010b4:	2200      	movs	r2, #0
200010b6:	0843      	lsrs	r3, r0, #1
200010b8:	428b      	cmp	r3, r1
200010ba:	d374      	bcc.n	200011a6 <__udivsi3+0xf2>
200010bc:	0903      	lsrs	r3, r0, #4
200010be:	428b      	cmp	r3, r1
200010c0:	d35f      	bcc.n	20001182 <__udivsi3+0xce>
200010c2:	0a03      	lsrs	r3, r0, #8
200010c4:	428b      	cmp	r3, r1
200010c6:	d344      	bcc.n	20001152 <__udivsi3+0x9e>
200010c8:	0b03      	lsrs	r3, r0, #12
200010ca:	428b      	cmp	r3, r1
200010cc:	d328      	bcc.n	20001120 <__udivsi3+0x6c>
200010ce:	0c03      	lsrs	r3, r0, #16
200010d0:	428b      	cmp	r3, r1
200010d2:	d30d      	bcc.n	200010f0 <__udivsi3+0x3c>
200010d4:	22ff      	movs	r2, #255	; 0xff
200010d6:	0209      	lsls	r1, r1, #8
200010d8:	ba12      	rev	r2, r2
200010da:	0c03      	lsrs	r3, r0, #16
200010dc:	428b      	cmp	r3, r1
200010de:	d302      	bcc.n	200010e6 <__udivsi3+0x32>
200010e0:	1212      	asrs	r2, r2, #8
200010e2:	0209      	lsls	r1, r1, #8
200010e4:	d065      	beq.n	200011b2 <__udivsi3+0xfe>
200010e6:	0b03      	lsrs	r3, r0, #12
200010e8:	428b      	cmp	r3, r1
200010ea:	d319      	bcc.n	20001120 <__udivsi3+0x6c>
200010ec:	e000      	b.n	200010f0 <__udivsi3+0x3c>
200010ee:	0a09      	lsrs	r1, r1, #8
200010f0:	0bc3      	lsrs	r3, r0, #15
200010f2:	428b      	cmp	r3, r1
200010f4:	d301      	bcc.n	200010fa <__udivsi3+0x46>
200010f6:	03cb      	lsls	r3, r1, #15
200010f8:	1ac0      	subs	r0, r0, r3
200010fa:	4152      	adcs	r2, r2
200010fc:	0b83      	lsrs	r3, r0, #14
200010fe:	428b      	cmp	r3, r1
20001100:	d301      	bcc.n	20001106 <__udivsi3+0x52>
20001102:	038b      	lsls	r3, r1, #14
20001104:	1ac0      	subs	r0, r0, r3
20001106:	4152      	adcs	r2, r2
20001108:	0b43      	lsrs	r3, r0, #13
2000110a:	428b      	cmp	r3, r1
2000110c:	d301      	bcc.n	20001112 <__udivsi3+0x5e>
2000110e:	034b      	lsls	r3, r1, #13
20001110:	1ac0      	subs	r0, r0, r3
20001112:	4152      	adcs	r2, r2
20001114:	0b03      	lsrs	r3, r0, #12
20001116:	428b      	cmp	r3, r1
20001118:	d301      	bcc.n	2000111e <__udivsi3+0x6a>
2000111a:	030b      	lsls	r3, r1, #12
2000111c:	1ac0      	subs	r0, r0, r3
2000111e:	4152      	adcs	r2, r2
20001120:	0ac3      	lsrs	r3, r0, #11
20001122:	428b      	cmp	r3, r1
20001124:	d301      	bcc.n	2000112a <__udivsi3+0x76>
20001126:	02cb      	lsls	r3, r1, #11
20001128:	1ac0      	subs	r0, r0, r3
2000112a:	4152      	adcs	r2, r2
2000112c:	0a83      	lsrs	r3, r0, #10
2000112e:	428b      	cmp	r3, r1
20001130:	d301      	bcc.n	20001136 <__udivsi3+0x82>
20001132:	028b      	lsls	r3, r1, #10
20001134:	1ac0      	subs	r0, r0, r3
20001136:	4152      	adcs	r2, r2
20001138:	0a43      	lsrs	r3, r0, #9
2000113a:	428b      	cmp	r3, r1
2000113c:	d301      	bcc.n	20001142 <__udivsi3+0x8e>
2000113e:	024b      	lsls	r3, r1, #9
20001140:	1ac0      	subs	r0, r0, r3
20001142:	4152      	adcs	r2, r2
20001144:	0a03      	lsrs	r3, r0, #8
20001146:	428b      	cmp	r3, r1
20001148:	d301      	bcc.n	2000114e <__udivsi3+0x9a>
2000114a:	020b      	lsls	r3, r1, #8
2000114c:	1ac0      	subs	r0, r0, r3
2000114e:	4152      	adcs	r2, r2
20001150:	d2cd      	bcs.n	200010ee <__udivsi3+0x3a>
20001152:	09c3      	lsrs	r3, r0, #7
20001154:	428b      	cmp	r3, r1
20001156:	d301      	bcc.n	2000115c <__udivsi3+0xa8>
20001158:	01cb      	lsls	r3, r1, #7
2000115a:	1ac0      	subs	r0, r0, r3
2000115c:	4152      	adcs	r2, r2
2000115e:	0983      	lsrs	r3, r0, #6
20001160:	428b      	cmp	r3, r1
20001162:	d301      	bcc.n	20001168 <__udivsi3+0xb4>
20001164:	018b      	lsls	r3, r1, #6
20001166:	1ac0      	subs	r0, r0, r3
20001168:	4152      	adcs	r2, r2
2000116a:	0943      	lsrs	r3, r0, #5
2000116c:	428b      	cmp	r3, r1
2000116e:	d301      	bcc.n	20001174 <__udivsi3+0xc0>
20001170:	014b      	lsls	r3, r1, #5
20001172:	1ac0      	subs	r0, r0, r3
20001174:	4152      	adcs	r2, r2
20001176:	0903      	lsrs	r3, r0, #4
20001178:	428b      	cmp	r3, r1
2000117a:	d301      	bcc.n	20001180 <__udivsi3+0xcc>
2000117c:	010b      	lsls	r3, r1, #4
2000117e:	1ac0      	subs	r0, r0, r3
20001180:	4152      	adcs	r2, r2
20001182:	08c3      	lsrs	r3, r0, #3
20001184:	428b      	cmp	r3, r1
20001186:	d301      	bcc.n	2000118c <__udivsi3+0xd8>
20001188:	00cb      	lsls	r3, r1, #3
2000118a:	1ac0      	subs	r0, r0, r3
2000118c:	4152      	adcs	r2, r2
2000118e:	0883      	lsrs	r3, r0, #2
20001190:	428b      	cmp	r3, r1
20001192:	d301      	bcc.n	20001198 <__udivsi3+0xe4>
20001194:	008b      	lsls	r3, r1, #2
20001196:	1ac0      	subs	r0, r0, r3
20001198:	4152      	adcs	r2, r2
2000119a:	0843      	lsrs	r3, r0, #1
2000119c:	428b      	cmp	r3, r1
2000119e:	d301      	bcc.n	200011a4 <__udivsi3+0xf0>
200011a0:	004b      	lsls	r3, r1, #1
200011a2:	1ac0      	subs	r0, r0, r3
200011a4:	4152      	adcs	r2, r2
200011a6:	1a41      	subs	r1, r0, r1
200011a8:	d200      	bcs.n	200011ac <__udivsi3+0xf8>
200011aa:	4601      	mov	r1, r0
200011ac:	4152      	adcs	r2, r2
200011ae:	4610      	mov	r0, r2
200011b0:	4770      	bx	lr
200011b2:	e7ff      	b.n	200011b4 <__udivsi3+0x100>
200011b4:	b501      	push	{r0, lr}
200011b6:	2000      	movs	r0, #0
200011b8:	f000 f806 	bl	200011c8 <__aeabi_idiv0>
200011bc:	bd02      	pop	{r1, pc}
200011be:	46c0      	nop			; (mov r8, r8)

200011c0 <__aeabi_uidivmod>:
200011c0:	2900      	cmp	r1, #0
200011c2:	d0f7      	beq.n	200011b4 <__udivsi3+0x100>
200011c4:	e776      	b.n	200010b4 <__udivsi3>
200011c6:	4770      	bx	lr

200011c8 <__aeabi_idiv0>:
200011c8:	4770      	bx	lr
200011ca:	46c0      	nop			; (mov r8, r8)

200011cc <backBuffer>:
	...

200021cc <points>:
200021cc:	00000000 	andeq	r0, r0, r0

200021d0 <backBuffer>:
	...

200031d0 <front>:
200031d0:	00000000 	andeq	r0, r0, r0

200031d4 <itemCount>:
200031d4:	00000000 	andeq	r0, r0, r0

200031d8 <objArray>:
	...

20003368 <image_bits>:
20003368:	aa889494 	bge	1e2285c0 <startup-0x1dd7a40>
2000336c:	beebffeb 	cdplt	15, 14, cr15, cr11, cr11, {7}
20003370:	0000009c 	muleq	r0, ip, r0

20003374 <snakehead_geometry>:
20003374:	0000000a 	andeq	r0, r0, sl
20003378:	00000004 	andeq	r0, r0, r4
2000337c:	00000004 	andeq	r0, r0, r4
20003380:	02000100 	andeq	r0, r0, #0
20003384:	02010101 	andeq	r0, r1, #1073741824	; 0x40000000
20003388:	03020002 	movweq	r0, #8194	; 0x2002
2000338c:	01030003 	tsteq	r3, r3
20003390:	03030203 	movweq	r0, #12803	; 0x3203
	...

200033a0 <snakebody_geometry>:
200033a0:	00000010 	andeq	r0, r0, r0, lsl r0
200033a4:	00000004 	andeq	r0, r0, r4
200033a8:	00000004 	andeq	r0, r0, r4
200033ac:	01000000 	mrseq	r0, (UNDEF: 0)
200033b0:	03000200 	movweq	r0, #512	; 0x200
200033b4:	01010001 	tsteq	r1, r1
200033b8:	03010201 	movweq	r0, #4609	; 0x1201
200033bc:	01020002 	tsteq	r2, r2
200033c0:	03020202 	movweq	r0, #8706	; 0x2202
200033c4:	01030003 	tsteq	r3, r3
200033c8:	03030203 	movweq	r0, #12803	; 0x3203

200033cc <food_geometry>:
200033cc:	0000000c 	andeq	r0, r0, ip
200033d0:	00000004 	andeq	r0, r0, r4
200033d4:	00000004 	andeq	r0, r0, r4
200033d8:	01000000 	mrseq	r0, (UNDEF: 0)
200033dc:	03000200 	movweq	r0, #512	; 0x200
200033e0:	03010001 	movweq	r0, #4097	; 0x1001
200033e4:	03020002 	movweq	r0, #8194	; 0x2002
200033e8:	01030003 	tsteq	r3, r3
200033ec:	03030203 	movweq	r0, #12803	; 0x3203
	...

200033f8 <snakehead>:
200033f8:	20003374 	andcs	r3, r0, r4, ror r3
	...
20003404:	00000001 	andeq	r0, r0, r1
20003408:	00000001 	andeq	r0, r0, r1
2000340c:	20000319 	andcs	r0, r0, r9, lsl r3
20003410:	2000037b 	andcs	r0, r0, fp, ror r3
20003414:	200003dd 	ldrdcs	r0, [r0], -sp
20003418:	200002f9 	strdcs	r0, [r0], -r9

2000341c <snakebody>:
2000341c:	200033a0 	andcs	r3, r0, r0, lsr #7
	...
20003428:	00000001 	andeq	r0, r0, r1
2000342c:	00000001 	andeq	r0, r0, r1
20003430:	20000319 	andcs	r0, r0, r9, lsl r3
20003434:	2000037b 	andcs	r0, r0, fp, ror r3
20003438:	200003dd 	ldrdcs	r0, [r0], -sp
2000343c:	200002f9 	strdcs	r0, [r0], -r9
	...

2000422c <food_obj>:
2000422c:	200033cc 	andcs	r3, r0, ip, asr #7
	...
20004238:	00000001 	andeq	r0, r0, r1
2000423c:	00000001 	andeq	r0, r0, r1
20004240:	20000319 	andcs	r0, r0, r9, lsl r3
20004244:	2000037b 	andcs	r0, r0, fp, ror r3
20004248:	200003dd 	ldrdcs	r0, [r0], -sp
2000424c:	200002f9 	strdcs	r0, [r0], -r9

20004250 <rear>:
20004250:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004254:	00000000 	andeq	r0, r0, r0
20004258:	20000820 	andcs	r0, r0, r0, lsr #16
2000425c:	20000820 	andcs	r0, r0, r0, lsr #16
20004260:	200007d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
20004264:	20000820 	andcs	r0, r0, r0, lsr #16
20004268:	200007ba 			; <UNDEFINED> instruction: 0x200007ba
2000426c:	20000820 	andcs	r0, r0, r0, lsr #16
20004270:	200007a4 	andcs	r0, r0, r4, lsr #15
20004274:	20000820 	andcs	r0, r0, r0, lsr #16
20004278:	200007e6 	andcs	r0, r0, r6, ror #15
2000427c:	20000820 	andcs	r0, r0, r0, lsr #16
20004280:	200007fc 	strdcs	r0, [r0], -ip
20004284:	20000820 	andcs	r0, r0, r0, lsr #16
20004288:	20000820 	andcs	r0, r0, r0, lsr #16
2000428c:	20000812 	andcs	r0, r0, r2, lsl r8
20004290:	774f5b06 	strbvc	r5, [pc, -r6, lsl #22]
20004294:	7c7d6d66 	ldclvc	13, cr6, [sp], #-408	; 0xfffffe68
20004298:	396f7f07 	stmdbcc	pc!, {r0, r1, r2, r8, r9, sl, fp, ip, sp, lr}^	; <UNPREDICTABLE>
2000429c:	bf713f79 	svclt	0x00713f79
200042a0:	0a030201 	beq	200c4aac <rear+0xc085c>
200042a4:	0b060504 	bleq	201856bc <rear+0x18146c>
200042a8:	0c090807 	stceq	8, cr0, [r9], {7}
200042ac:	0d0f000e 	stceq	0, cr0, [pc, #-56]	; 2000427c <rear+0x2c>

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	000002c7 	andeq	r0, r0, r7, asr #5
       4:	00000004 	andeq	r0, r0, r4
       8:	01040000 	mrseq	r0, (UNDEF: 4)
       c:	00000051 	andeq	r0, r0, r1, asr r0
      10:	0001f80c 	andeq	pc, r1, ip, lsl #16
      14:	00015d00 	andeq	r5, r1, r0, lsl #26
      18:	00001000 	andeq	r1, r0, r0
      1c:	0002e620 	andeq	lr, r2, r0, lsr #12
      20:	00000000 	andeq	r0, r0, r0
      24:	08010200 	stmdaeq	r1, {r9}
      28:	0000014f 	andeq	r0, r0, pc, asr #2
      2c:	00000c03 	andeq	r0, r0, r3, lsl #24
      30:	066e0100 	strbteq	r0, [lr], -r0, lsl #2
      34:	200002aa 	andcs	r0, r0, sl, lsr #5
      38:	0000004c 	andeq	r0, r0, ip, asr #32
      3c:	007a9c01 	rsbseq	r9, sl, r1, lsl #24
      40:	78040000 	stmdavc	r4, {}	; <UNPREDICTABLE>
      44:	176e0100 	strbne	r0, [lr, -r0, lsl #2]!
      48:	0000007a 	andeq	r0, r0, sl, ror r0
      4c:	046c9102 	strbteq	r9, [ip], #-258	; 0xfffffefe
      50:	6e010079 	mcrvs	0, 0, r0, cr1, cr9, {3}
      54:	00007a1e 	andeq	r7, r0, lr, lsl sl
      58:	68910200 	ldmvs	r1, {r9}
      5c:	00011105 	andeq	r1, r1, r5, lsl #2
      60:	136f0100 	cmnne	pc, #0
      64:	00000025 	andeq	r0, r0, r5, lsr #32
      68:	06779102 	ldrbteq	r9, [r7], -r2, lsl #2
      6c:	0000002e 	andeq	r0, r0, lr, lsr #32
      70:	7a054d01 	bvc	15347c <startup-0x1feacb84>
      74:	07000000 	streq	r0, [r0, -r0]
      78:	04080000 	streq	r0, [r8], #-0
      7c:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
      80:	01d40300 	bicseq	r0, r4, r0, lsl #6
      84:	67010000 	strvs	r0, [r1, -r0]
      88:	00028006 	andeq	r8, r2, r6
      8c:	00002a20 	andeq	r2, r0, r0, lsr #20
      90:	b39c0100 	orrslt	r0, ip, #0
      94:	04000000 	streq	r0, [r0], #-0
      98:	67010063 	strvs	r0, [r1, -r3, rrx]
      9c:	00002525 	andeq	r2, r0, r5, lsr #10
      a0:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
      a4:	00002e06 	andeq	r2, r0, r6, lsl #28
      a8:	054d0100 	strbeq	r0, [sp, #-256]	; 0xffffff00
      ac:	0000007a 	andeq	r0, r0, sl, ror r0
      b0:	09000007 	stmdbeq	r0, {r0, r1, r2}
      b4:	000001c5 	andeq	r0, r0, r5, asr #3
      b8:	52066001 	andpl	r6, r6, #1, 0
      bc:	2e200002 	cdpcs	0, 2, cr0, cr0, cr2, {0}
      c0:	01000000 	mrseq	r0, (UNDEF: 0)
      c4:	0000d89c 	muleq	r0, ip, r8
      c8:	002e0600 	eoreq	r0, lr, r0, lsl #12
      cc:	4d010000 	stcmi	0, cr0, [r1, #-0]
      d0:	00007a05 	andeq	r7, r0, r5, lsl #20
      d4:	00000700 	andeq	r0, r0, r0, lsl #14
      d8:	00013f09 	andeq	r3, r1, r9, lsl #30
      dc:	06590100 	ldrbeq	r0, [r9], -r0, lsl #2
      e0:	20000224 	andcs	r0, r0, r4, lsr #4
      e4:	0000002e 	andeq	r0, r0, lr, lsr #32
      e8:	00fd9c01 	rscseq	r9, sp, r1, lsl #24
      ec:	2e060000 	cdpcs	0, 0, cr0, cr6, cr0, {0}
      f0:	01000000 	mrseq	r0, (UNDEF: 0)
      f4:	007a054d 	rsbseq	r0, sl, sp, asr #10
      f8:	00070000 	andeq	r0, r7, r0
      fc:	019c0900 	orrseq	r0, ip, r0, lsl #18
     100:	52010000 	andpl	r0, r1, #0, 0
     104:	0001f606 	andeq	pc, r1, r6, lsl #12
     108:	00002e20 	andeq	r2, r0, r0, lsr #28
     10c:	229c0100 	addscs	r0, ip, #0
     110:	06000001 	streq	r0, [r0], -r1
     114:	0000002e 	andeq	r0, r0, lr, lsr #32
     118:	7a054d01 	bvc	153524 <startup-0x1feacadc>
     11c:	07000000 	streq	r0, [r0, -r0]
     120:	df090000 	svcle	0x00090000
     124:	01000000 	mrseq	r0, (UNDEF: 0)
     128:	01c8064b 	biceq	r0, r8, fp, asr #12
     12c:	002e2000 	eoreq	r2, lr, r0
     130:	9c010000 	stcls	0, cr0, [r1], {-0}
     134:	00000159 	andeq	r0, r0, r9, asr r1
     138:	00002e0a 	andeq	r2, r0, sl, lsl #28
     13c:	054d0100 	strbeq	r0, [sp, #-256]	; 0xffffff00
     140:	0000007a 	andeq	r0, r0, sl, ror r0
     144:	0000014a 	andeq	r0, r0, sl, asr #2
     148:	00060007 	andeq	r0, r6, r7
     14c:	01000000 	mrseq	r0, (UNDEF: 0)
     150:	007a054f 	rsbseq	r0, sl, pc, asr #10
     154:	00070000 	andeq	r0, r7, r0
     158:	012f0b00 			; <UNDEFINED> instruction: 0x012f0b00
     15c:	42010000 	andmi	r0, r1, #0, 0
     160:	0000250f 	andeq	r2, r0, pc, lsl #10
     164:	00018c00 	andeq	r8, r1, r0, lsl #24
     168:	00003c20 	andeq	r3, r0, r0, lsr #24
     16c:	839c0100 	orrshi	r0, ip, #0
     170:	05000001 	streq	r0, [r0, #-1]
     174:	00000194 	muleq	r0, r4, r1
     178:	830a4601 	movwhi	r4, #42497	; 0xa601
     17c:	02000001 	andeq	r0, r0, #1, 0
     180:	02006f91 	andeq	r6, r0, #580	; 0x244
     184:	01580801 	cmpeq	r8, r1, lsl #16
     188:	cd0b0000 	stcgt	0, cr0, [fp, #-0]
     18c:	01000000 	mrseq	r0, (UNDEF: 0)
     190:	00250f39 	eoreq	r0, r5, r9, lsr pc
     194:	01500000 	cmpeq	r0, r0
     198:	003c2000 	eorseq	r2, ip, r0
     19c:	9c010000 	stcls	0, cr0, [r1], {-0}
     1a0:	000001b4 			; <UNDEFINED> instruction: 0x000001b4
     1a4:	0001bd05 	andeq	fp, r1, r5, lsl #26
     1a8:	0a3d0100 	beq	f405b0 <startup-0x1f0bfa50>
     1ac:	00000183 	andeq	r0, r0, r3, lsl #3
     1b0:	006f9102 	rsbeq	r9, pc, r2, lsl #2
     1b4:	0001190b 	andeq	r1, r1, fp, lsl #18
     1b8:	0f300100 	svceq	0x00300100
     1bc:	00000025 	andeq	r0, r0, r5, lsr #32
     1c0:	2000011c 	andcs	r0, r0, ip, lsl r1
     1c4:	00000034 	andeq	r0, r0, r4, lsr r0
     1c8:	01f09c01 	mvnseq	r9, r1, lsl #24
     1cc:	fe0a0000 	cdp2	0, 0, cr0, cr10, cr0, {0}
     1d0:	01000000 	mrseq	r0, (UNDEF: 0)
     1d4:	007a052c 	rsbseq	r0, sl, ip, lsr #10
     1d8:	01e00000 	mvneq	r0, r0
     1dc:	00070000 	andeq	r0, r7, r0
     1e0:	00010a05 	andeq	r0, r1, r5, lsl #20
     1e4:	0a340100 	beq	d005ec <startup-0x1f2ffa14>
     1e8:	00000183 	andeq	r0, r0, r3, lsl #3
     1ec:	00779102 	rsbseq	r9, r7, r2, lsl #2
     1f0:	00003a03 	andeq	r3, r0, r3, lsl #20
     1f4:	06290100 	strteq	r0, [r9], -r0, lsl #2
     1f8:	200000ec 	andcs	r0, r0, ip, ror #1
     1fc:	00000030 	andeq	r0, r0, r0, lsr r0
     200:	02249c01 	eoreq	r9, r4, #256	; 0x100
     204:	a80c0000 	stmdage	ip, {}	; <UNPREDICTABLE>
     208:	01000001 	tsteq	r0, r1
     20c:	00252b29 	eoreq	r2, r5, r9, lsr #22
     210:	91020000 	mrsls	r0, (UNDEF: 2)
     214:	00fe0677 	rscseq	r0, lr, r7, ror r6
     218:	2c010000 	stccs	0, cr0, [r1], {-0}
     21c:	00007a05 	andeq	r7, r0, r5, lsl #20
     220:	00000700 	andeq	r0, r0, r0, lsl #14
     224:	0000ed03 	andeq	lr, r0, r3, lsl #26
     228:	06230100 	strteq	r0, [r3], -r0, lsl #2
     22c:	200000c2 	andcs	r0, r0, r2, asr #1
     230:	0000002a 	andeq	r0, r0, sl, lsr #32
     234:	024a9c01 	subeq	r9, sl, #256	; 0x100
     238:	810c0000 	mrshi	r0, (UNDEF: 12)
     23c:	01000005 	tsteq	r0, r5
     240:	00252523 	eoreq	r2, r5, r3, lsr #10
     244:	91020000 	mrsls	r0, (UNDEF: 2)
     248:	ad030077 	stcge	0, cr0, [r3, #-476]	; 0xfffffe24
     24c:	01000001 	tsteq	r0, r1
     250:	0098061d 	addseq	r0, r8, sp, lsl r6
     254:	002a2000 	eoreq	r2, sl, r0
     258:	9c010000 	stcls	0, cr0, [r1], {-0}
     25c:	00000270 	andeq	r0, r0, r0, ror r2
     260:	0005100c 	andeq	r1, r5, ip
     264:	241d0100 	ldrcs	r0, [sp], #-256	; 0xffffff00
     268:	00000025 	andeq	r0, r0, r5, lsr #32
     26c:	00779102 	rsbseq	r9, r7, r2, lsl #2
     270:	0000190d 	andeq	r1, r0, sp, lsl #18
     274:	06180100 	ldreq	r0, [r8], -r0, lsl #2
     278:	2000005c 	andcs	r0, r0, ip, asr r0
     27c:	0000003c 	andeq	r0, r0, ip, lsr r0
     280:	02949c01 	addseq	r9, r4, #256	; 0x100
     284:	78040000 	stmdavc	r4, {}	; <UNPREDICTABLE>
     288:	29180100 	ldmdbcs	r8, {r8}
     28c:	00000025 	andeq	r0, r0, r5, lsr #32
     290:	00779102 	rsbseq	r9, r7, r2, lsl #2
     294:	0001e50d 	andeq	lr, r1, sp, lsl #10
     298:	06130100 	ldreq	r0, [r3], -r0, lsl #2
     29c:	2000002a 	andcs	r0, r0, sl, lsr #32
     2a0:	00000032 	andeq	r0, r0, r2, lsr r0
     2a4:	02b89c01 	adcseq	r9, r8, #256	; 0x100
     2a8:	78040000 	stmdavc	r4, {}	; <UNPREDICTABLE>
     2ac:	27130100 	ldrcs	r0, [r3, -r0, lsl #2]
     2b0:	00000025 	andeq	r0, r0, r5, lsr #32
     2b4:	00779102 	rsbseq	r9, r7, r2, lsl #2
     2b8:	00023e0e 	andeq	r3, r2, lr, lsl #28
     2bc:	06040100 	streq	r0, [r4], -r0, lsl #2
     2c0:	20000010 	andcs	r0, r0, r0, lsl r0
     2c4:	0000001a 	andeq	r0, r0, sl, lsl r0
     2c8:	b8009c01 	stmdalt	r0, {r0, sl, fp, ip, pc}
     2cc:	04000006 	streq	r0, [r0], #-6
     2d0:	00011400 	andeq	r1, r1, r0, lsl #8
     2d4:	51010400 	tstpl	r1, r0, lsl #8
     2d8:	0c000000 	stceq	0, cr0, [r0], {-0}
     2dc:	00000262 	andeq	r0, r0, r2, ror #4
     2e0:	0000015d 	andeq	r0, r0, sp, asr r1
	...
     2ec:	000001bc 			; <UNDEFINED> instruction: 0x000001bc
     2f0:	4f080102 	svcmi	0x00080102
     2f4:	03000001 	movweq	r0, #1
     2f8:	00000049 	andeq	r0, r0, r9, asr #32
     2fc:	0000003d 	andeq	r0, r0, sp, lsr r0
     300:	00004204 	andeq	r4, r0, r4, lsl #4
     304:	0003ff00 	andeq	pc, r3, r0, lsl #30
     308:	00002c05 	andeq	r2, r0, r5, lsl #24
     30c:	07040200 	streq	r0, [r4, -r0, lsl #4]
     310:	000006b3 			; <UNDEFINED> instruction: 0x000006b3
     314:	00004205 	andeq	r4, r0, r5, lsl #4
     318:	039c0600 	orrseq	r0, ip, #0, 12
     31c:	0f030000 	svceq	0x00030000
     320:	00003d1e 	andeq	r3, r0, lr, lsl sp
     324:	cc030500 	cfstr32gt	mvfx0, [r3], {-0}
     328:	07200011 			; <UNDEFINED> instruction: 0x07200011
     32c:	000002c4 	andeq	r0, r0, r4, asr #5
     330:	10010202 	andne	r0, r1, r2, lsl #4
     334:	00000084 	andeq	r0, r0, r4, lsl #1
     338:	02007808 	andeq	r7, r0, #8, 16	; 0x80000
     33c:	00251302 	eoreq	r1, r5, r2, lsl #6
     340:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     344:	03020079 	movweq	r0, #8313	; 0x2079
     348:	00002513 	andeq	r2, r0, r3, lsl r5
     34c:	09000100 	stmdbeq	r0, {r8}
     350:	000002de 	ldrdeq	r0, [r0], -lr
     354:	60020402 	andvs	r0, r2, r2, lsl #8
     358:	07000000 	streq	r0, [r0, -r0]
     35c:	00000348 	andeq	r0, r0, r8, asr #6
     360:	1008022c 	andne	r0, r8, ip, lsr #4
     364:	000000d1 	ldrdeq	r0, [r0], -r1
     368:	0003fe0a 	andeq	pc, r3, sl, lsl #28
     36c:	09090200 	stmdbeq	r9, {r9}
     370:	000000d1 	ldrdeq	r0, [r0], -r1
     374:	03640a00 	cmneq	r4, #0, 20
     378:	0a020000 	beq	80380 <startup-0x1ff7fc80>
     37c:	0000d109 	andeq	sp, r0, r9, lsl #2
     380:	6a0a0400 	bvs	281388 <startup-0x1fd7ec78>
     384:	02000003 	andeq	r0, r0, #3, 0
     388:	00d1090b 	sbcseq	r0, r1, fp, lsl #18
     38c:	08080000 	stmdaeq	r8, {}	; <UNPREDICTABLE>
     390:	02007870 	andeq	r7, r0, #112, 16	; 0x700000
     394:	00dd0b0c 	sbcseq	r0, sp, ip, lsl #22
     398:	000c0000 	andeq	r0, ip, r0
     39c:	6905040b 	stmdbvs	r5, {r0, r1, r3, sl}
     3a0:	0500746e 	streq	r7, [r0, #-1134]	; 0xfffffb92
     3a4:	000000d1 	ldrdeq	r0, [r0], -r1
     3a8:	00008403 	andeq	r8, r0, r3, lsl #8
     3ac:	0000ed00 	andeq	lr, r0, r0, lsl #26
     3b0:	00420c00 	subeq	r0, r2, r0, lsl #24
     3b4:	000f0000 	andeq	r0, pc, r0
     3b8:	00024a09 	andeq	r4, r2, r9, lsl #20
     3bc:	030d0200 	movweq	r0, #53760	; 0xd200
     3c0:	00000090 	muleq	r0, r0, r0
     3c4:	00024909 	andeq	r4, r2, r9, lsl #18
     3c8:	0e0d0200 	cdpeq	2, 0, cr0, cr13, cr0, {0}
     3cc:	00000105 	andeq	r0, r0, r5, lsl #2
     3d0:	0090040d 	addseq	r0, r0, sp, lsl #8
     3d4:	e0070000 	and	r0, r7, r0
     3d8:	24000003 	strcs	r0, [r0], #-3
     3dc:	8e100f02 	cdphi	15, 1, cr0, cr0, cr2, {0}
     3e0:	08000001 	stmdaeq	r0, {r0}
     3e4:	006f6567 	rsbeq	r6, pc, r7, ror #10
     3e8:	f90f1002 			; <UNDEFINED> instruction: 0xf90f1002
     3ec:	00000000 	andeq	r0, r0, r0
     3f0:	0002580a 	andeq	r5, r2, sl, lsl #16
     3f4:	09110200 	ldmdbeq	r1, {r9}
     3f8:	000000d1 	ldrdeq	r0, [r0], -r1
     3fc:	025d0a04 	subseq	r0, sp, #4, 20	; 0x4000
     400:	11020000 	mrsne	r0, (UNDEF: 2)
     404:	0000d10e 	andeq	sp, r0, lr, lsl #2
     408:	ee0a0800 	cdp	8, 0, cr0, cr10, cr0, {0}
     40c:	02000002 	andeq	r0, r0, #2, 0
     410:	00d10912 	sbcseq	r0, r1, r2, lsl r9
     414:	0a0c0000 	beq	30041c <startup-0x1fcffbe4>
     418:	000002f3 	strdeq	r0, [r0], -r3
     41c:	d10e1202 	tstle	lr, r2, lsl #4
     420:	10000000 	andne	r0, r0, r0
     424:	00037d0a 	andeq	r7, r3, sl, lsl #26
     428:	0d130200 	lfmeq	f0, 4, [r3, #-0]
     42c:	0000019f 	muleq	r0, pc, r1	; <UNPREDICTABLE>
     430:	063e0a14 			; <UNDEFINED> instruction: 0x063e0a14
     434:	14020000 	strne	r0, [r2], #-0
     438:	00019f0d 	andeq	r9, r1, sp, lsl #30
     43c:	cb0a1800 	blgt	286444 <startup-0x1fd79bbc>
     440:	02000006 	andeq	r0, r0, #6, 0
     444:	019f0d15 	orrseq	r0, pc, r5, lsl sp	; <UNPREDICTABLE>
     448:	0a1c0000 	beq	700450 <startup-0x1f8ffbb0>
     44c:	000002e4 	andeq	r0, r0, r4, ror #5
     450:	ba0d1602 	blt	345c60 <startup-0x1fcba3a0>
     454:	20000001 	andcs	r0, r0, r1
     458:	01990e00 	orrseq	r0, r9, r0, lsl #28
     45c:	990f0000 	stmdbls	pc, {}	; <UNPREDICTABLE>
     460:	00000001 	andeq	r0, r0, r1
     464:	010b040d 	tsteq	fp, sp, lsl #8
     468:	040d0000 	streq	r0, [sp], #-0
     46c:	0000018e 	andeq	r0, r0, lr, lsl #3
     470:	0001ba0e 	andeq	fp, r1, lr, lsl #20
     474:	01990f00 	orrseq	r0, r9, r0, lsl #30
     478:	d10f0000 	mrsle	r0, CPSR
     47c:	0f000000 	svceq	0x00000000
     480:	000000d1 	ldrdeq	r0, [r0], -r1
     484:	a5040d00 	strge	r0, [r4, #-3328]	; 0xfffff300
     488:	09000001 	stmdbeq	r0, {r0}
     48c:	00000434 	andeq	r0, r0, r4, lsr r4
     490:	0b031702 	bleq	c60a0 <startup-0x1ff39f60>
     494:	09000001 	stmdbeq	r0, {r0}
     498:	00000433 	andeq	r0, r0, r3, lsr r4
     49c:	990c1702 	stmdbls	ip, {r1, r8, r9, sl, ip}
     4a0:	10000001 	andne	r0, r0, r1
     4a4:	09190208 	ldmdbeq	r9, {r3, r9}
     4a8:	00000209 	andeq	r0, r0, r9, lsl #4
     4ac:	0003960a 	andeq	r9, r3, sl, lsl #12
     4b0:	131a0200 	tstne	sl, #0, 4
     4b4:	00000025 	andeq	r0, r0, r5, lsr #32
     4b8:	02f80a00 	rscseq	r0, r8, #0, 20
     4bc:	1b020000 	blne	804c4 <startup-0x1ff7fb3c>
     4c0:	00002513 	andeq	r2, r0, r3, lsl r5
     4c4:	810a0100 	mrshi	r0, (UNDEF: 26)
     4c8:	02000005 	andeq	r0, r0, #5, 0
     4cc:	0209141c 	andeq	r1, r9, #28, 8	; 0x1c000000
     4d0:	00040000 	andeq	r0, r4, r0
     4d4:	0025040d 	eoreq	r0, r5, sp, lsl #8
     4d8:	cc090000 	stcgt	0, cr0, [r9], {-0}
     4dc:	02000003 	andeq	r0, r0, #3, 0
     4e0:	01d8021d 	bicseq	r0, r8, sp, lsl r2
     4e4:	25030000 	strcs	r0, [r3, #-0]
     4e8:	2b000000 	blcs	4f0 <startup-0x1ffffb10>
     4ec:	0c000002 	stceq	0, cr0, [r0], {2}
     4f0:	00000042 	andeq	r0, r0, r2, asr #32
     4f4:	ae060008 	cdpge	0, 0, cr0, cr6, cr8, {0}
     4f8:	04000002 	streq	r0, [r0], #-2
     4fc:	021b1603 	andseq	r1, fp, #3145728	; 0x300000
     500:	03050000 	movweq	r0, #20480	; 0x5000
     504:	20003368 	andcs	r3, r0, r8, ror #6
     508:	0002cb11 	andeq	ip, r2, r1, lsl fp
     50c:	0a4f0100 	beq	13c0914 <startup-0x1ec3f6ec>
     510:	000000ed 	andeq	r0, r0, sp, ror #1
     514:	33740305 	cmncc	r4, #335544320	; 0x14000000
     518:	08112000 	ldmdaeq	r1, {sp}
     51c:	01000003 	tsteq	r0, r3
     520:	00ed0a5b 	rsceq	r0, sp, fp, asr sl
     524:	03050000 	movweq	r0, #20480	; 0x5000
     528:	200033a0 	andcs	r3, r0, r0, lsr #7
     52c:	00031b11 	andeq	r1, r3, r1, lsl fp
     530:	0a660100 	beq	1980938 <startup-0x1e67f6c8>
     534:	000000ed 	andeq	r0, r0, sp, ror #1
     538:	33cc0305 	biccc	r0, ip, #335544320	; 0x14000000
     53c:	52062000 	andpl	r2, r6, #0, 0
     540:	01000003 	tsteq	r0, r3
     544:	01c00f71 	biceq	r0, r0, r1, ror pc
     548:	03050000 	movweq	r0, #20480	; 0x5000
     54c:	200033f8 	strdcs	r3, [r0], -r8
     550:	0001c003 	andeq	ip, r1, r3
     554:	00029500 	andeq	r9, r2, r0, lsl #10
     558:	00420c00 	subeq	r0, r2, r0, lsl #24
     55c:	00630000 	rsbeq	r0, r3, r0
     560:	00033e06 	andeq	r3, r3, r6, lsl #28
     564:	0f7c0100 	svceq	0x007c0100
     568:	00000285 	andeq	r0, r0, r5, lsl #5
     56c:	341c0305 	ldrcc	r0, [ip], #-773	; 0xfffffcfb
     570:	82062000 	andhi	r2, r6, #0, 0
     574:	01000003 	tsteq	r0, r3
     578:	01c00f87 	biceq	r0, r0, r7, lsl #31
     57c:	03050000 	movweq	r0, #20480	; 0x5000
     580:	2000422c 	andcs	r4, r0, ip, lsr #4
     584:	00040106 	andeq	r0, r4, r6, lsl #2
     588:	15b70100 	ldrne	r0, [r7, #256]!	; 0x100
     58c:	000000d8 	ldrdeq	r0, [r0], -r8
     590:	21cc0305 	biccs	r0, ip, r5, lsl #6
     594:	39122000 	ldmdbcc	r2, {sp}
     598:	01000003 	tsteq	r0, r3
     59c:	5c060116 	stfpls	f0, [r6], {22}
     5a0:	a4200008 	strtge	r0, [r0], #-8
     5a4:	01000000 	mrseq	r0, (UNDEF: 0)
     5a8:	00030f9c 	muleq	r3, ip, pc	; <UNPREDICTABLE>
     5ac:	69641300 	stmdbvs	r4!, {r8, r9, ip}^
     5b0:	16010072 			; <UNDEFINED> instruction: 0x16010072
     5b4:	00d10f01 	sbcseq	r0, r1, r1, lsl #30
     5b8:	91020000 	mrsls	r0, (UNDEF: 2)
     5bc:	00681374 	rsbeq	r1, r8, r4, ror r3
     5c0:	1c011601 	stcne	6, cr1, [r1], {1}
     5c4:	000001cc 	andeq	r0, r0, ip, asr #3
     5c8:	13709102 	cmnne	r0, #-2147483648	; 0x80000000
     5cc:	16010062 	strne	r0, [r1], -r2, rrx
     5d0:	030f2801 	movweq	r2, #63489	; 0xf801
     5d4:	91020000 	mrsls	r0, (UNDEF: 2)
     5d8:	040d006c 	streq	r0, [sp], #-108	; 0xffffff94
     5dc:	000001cc 	andeq	r0, r0, ip, asr #3
     5e0:	00032914 	andeq	r2, r3, r4, lsl r9
     5e4:	06e30100 	strbteq	r0, [r3], r0, lsl #2
     5e8:	200006b8 			; <UNDEFINED> instruction: 0x200006b8
     5ec:	000001a4 	andeq	r0, r0, r4, lsr #3
     5f0:	03ed9c01 	mvneq	r9, #256	; 0x100
     5f4:	70150000 	andsvc	r0, r5, r0
     5f8:	01000003 	tsteq	r0, r3
     5fc:	00d10fe3 	sbcseq	r0, r1, r3, ror #31
     600:	91030000 	mrsls	r0, (UNDEF: 3)
     604:	53157cc4 	tstpl	r5, #196, 24	; 0xc400
     608:	01000002 	tsteq	r0, r2
     60c:	03ed1ce3 	mvneq	r1, #58112	; 0xe300
     610:	91030000 	mrsls	r0, (UNDEF: 3)
     614:	f9067cc0 			; <UNDEFINED> instruction: 0xf9067cc0
     618:	01000003 	tsteq	r0, r3
     61c:	00d109e4 	sbcseq	r0, r1, r4, ror #19
     620:	91020000 	mrsls	r0, (UNDEF: 2)
     624:	035c066c 	cmpeq	ip, #108, 12	; 0x6c00000
     628:	e4010000 	str	r0, [r1], #-0
     62c:	0000d113 	andeq	sp, r0, r3, lsl r1
     630:	68910200 	ldmvs	r1, {r9}
     634:	00038b06 	andeq	r8, r3, r6, lsl #22
     638:	0ae50100 	beq	ff940a40 <rear+0xdf93c7f0>
     63c:	000003f9 	strdeq	r0, [r0], -r9
     640:	065b9102 	ldrbeq	r9, [fp], -r2, lsl #2
     644:	00000357 	andeq	r0, r0, r7, asr r3
     648:	cc0de701 	stcgt	7, cr14, [sp], {1}
     64c:	02000001 	andeq	r0, r0, #1, 0
     650:	20066091 	mulcs	r6, r1, r0
     654:	01000004 	tsteq	r0, r4
     658:	01cc20e7 	biceq	r2, ip, r7, ror #1
     65c:	91020000 	mrsls	r0, (UNDEF: 2)
     660:	0343065c 	movteq	r0, #13916	; 0x365c
     664:	e8010000 	stmda	r1, {}	; <UNPREDICTABLE>
     668:	0004000d 	andeq	r0, r4, sp
     66c:	c8910300 	ldmgt	r1, {r8, r9}
     670:	032e167c 			; <UNDEFINED> instruction: 0x032e167c
     674:	ed010000 	stc	0, cr0, [r1, #-0]
     678:	0000d105 	andeq	sp, r0, r5, lsl #2
     67c:	0003b800 	andeq	fp, r3, r0, lsl #16
     680:	18001700 	stmdane	r0, {r8, r9, sl, ip}
     684:	200006ea 	andcs	r0, r0, sl, ror #13
     688:	0000003e 	andeq	r0, r0, lr, lsr r0
     68c:	000003d3 	ldrdeq	r0, [r0], -r3
     690:	01006919 	tsteq	r0, r9, lsl r9
     694:	00d10de9 	sbcseq	r0, r1, r9, ror #27
     698:	91020000 	mrsls	r0, (UNDEF: 2)
     69c:	a41a0064 	ldrge	r0, [sl], #-100	; 0xffffff9c
     6a0:	7a200007 	bvc	8006c4 <startup-0x1f7ff93c>
     6a4:	1b000000 	blne	6ac <startup-0x1ffff954>
     6a8:	00000339 	andeq	r0, r0, r9, lsr r3
     6ac:	1d010b01 	vstrne	d0, [r1, #-4]
     6b0:	000000d1 	ldrdeq	r0, [r0], -r1
     6b4:	00000017 	andeq	r0, r0, r7, lsl r0
     6b8:	03f3040d 	mvnseq	r0, #218103808	; 0xd000000
     6bc:	040d0000 	streq	r0, [sp], #-0
     6c0:	000003f9 	strdeq	r0, [r0], -r9
     6c4:	58080102 	stmdapl	r8, {r1, r8}
     6c8:	03000001 	movweq	r0, #1
     6cc:	000001cc 	andeq	r0, r0, ip, asr #3
     6d0:	00000410 	andeq	r0, r0, r0, lsl r4
     6d4:	0000420c 	andeq	r4, r0, ip, lsl #4
     6d8:	14006300 	strne	r6, [r0], #-768	; 0xfffffd00
     6dc:	000003f1 	strdeq	r0, [r0], -r1
     6e0:	a006da01 	andge	sp, r6, r1, lsl #20
     6e4:	18200006 	stmdane	r0!, {r1, r2}
     6e8:	01000000 	mrseq	r0, (UNDEF: 0)
     6ec:	0004349c 	muleq	r4, ip, r4
     6f0:	00701c00 	rsbseq	r1, r0, r0, lsl #24
     6f4:	cc1bda01 			; <UNDEFINED> instruction: 0xcc1bda01
     6f8:	02000001 	andeq	r0, r0, #1, 0
     6fc:	14007491 	strne	r7, [r0], #-1169	; 0xfffffb6f
     700:	000002b9 			; <UNDEFINED> instruction: 0x000002b9
     704:	3c06cd01 	stccc	13, cr12, [r6], {1}
     708:	64200006 	strtvs	r0, [r0], #-6
     70c:	01000000 	mrseq	r0, (UNDEF: 0)
     710:	0004899c 	muleq	r4, ip, r9
     714:	00681c00 	rsbeq	r1, r8, r0, lsl #24
     718:	cc19cd01 	ldcgt	13, cr12, [r9], {1}
     71c:	02000001 	andeq	r0, r0, #1, 0
     720:	621c6c91 	andsvs	r6, ip, #37120	; 0x9100
     724:	25cd0100 	strbcs	r0, [sp, #256]	; 0x100
     728:	0000030f 	andeq	r0, r0, pc, lsl #6
     72c:	1c689102 	stfnep	f1, [r8], #-8
     730:	cd010073 	stcgt	0, cr0, [r1, #-460]	; 0xfffffe34
     734:	00048930 	andeq	r8, r4, r0, lsr r9
     738:	64910200 	ldrvs	r0, [r1], #512	; 0x200
     73c:	0006541a 	andeq	r5, r6, sl, lsl r4
     740:	00004220 	andeq	r4, r0, r0, lsr #4
     744:	00691900 	rsbeq	r1, r9, r0, lsl #18
     748:	d10ed001 	tstle	lr, r1
     74c:	02000000 	andeq	r0, r0, #0, 0
     750:	00007491 	muleq	r0, r1, r4
     754:	01c0040d 	biceq	r0, r0, sp, lsl #8
     758:	ff1d0000 			; <UNDEFINED> instruction: 0xff1d0000
     75c:	01000002 	tsteq	r0, r2
     760:	05d006b9 	ldrbeq	r0, [r0, #1721]	; 0x6b9
     764:	006c2000 	rsbeq	r2, ip, r0
     768:	9c010000 	stcls	0, cr0, [r1], {-0}
     76c:	0002a314 	andeq	sl, r2, r4, lsl r3
     770:	06ac0100 	strteq	r0, [ip], r0, lsl #2
     774:	20000576 	andcs	r0, r0, r6, ror r5
     778:	0000005a 	andeq	r0, r0, sl, asr r0
     77c:	04e99c01 	strbteq	r9, [r9], #3073	; 0xc01
     780:	681c0000 	ldmdavs	ip, {}	; <UNPREDICTABLE>
     784:	19ac0100 	stmibne	ip!, {r8}
     788:	000001cc 	andeq	r0, r0, ip, asr #3
     78c:	1c6c9102 	stfnep	f1, [ip], #-8
     790:	ac010062 	stcge	0, cr0, [r1], {98}	; 0x62
     794:	00030f25 	andeq	r0, r3, r5, lsr #30
     798:	68910200 	ldmvs	r1, {r9}
     79c:	0005941a 	andeq	r9, r5, sl, lsl r4
     7a0:	00002a20 	andeq	r2, r0, r0, lsr #20
     7a4:	00691900 	rsbeq	r1, r9, r0, lsl #18
     7a8:	d10daf01 	tstle	sp, r1, lsl #30
     7ac:	02000000 	andeq	r0, r0, #0, 0
     7b0:	00007491 	muleq	r0, r1, r4
     7b4:	00040814 	andeq	r0, r4, r4, lsl r8
     7b8:	06980100 	ldreq	r0, [r8], r0, lsl #2
     7bc:	200004b4 			; <UNDEFINED> instruction: 0x200004b4
     7c0:	000000c2 	andeq	r0, r0, r2, asr #1
     7c4:	05769c01 	ldrbeq	r9, [r6, #-3073]!	; 0xfffff3ff
     7c8:	731c0000 	tstvc	ip, #0, 0
     7cc:	1a980100 	bne	fe600bd4 <rear+0xde5fc984>
     7d0:	00000576 	andeq	r0, r0, r6, ror r5
     7d4:	1c5c9102 	ldfnep	f1, [ip], {2}
     7d8:	98010078 	stmdals	r1, {r3, r4, r5, r6}
     7dc:	0000d121 	andeq	sp, r0, r1, lsr #2
     7e0:	58910200 	ldmpl	r1, {r9}
     7e4:	0100791c 	tsteq	r0, ip, lsl r9
     7e8:	00d12898 	smullseq	r2, r1, r8, r8
     7ec:	91020000 	mrsls	r0, (UNDEF: 2)
     7f0:	00691954 	rsbeq	r1, r9, r4, asr r9
     7f4:	d1099901 	tstle	r9, r1, lsl #18
     7f8:	02000000 	andeq	r0, r0, #0, 0
     7fc:	6a197491 	bvs	65da48 <startup-0x1f9a25b8>
     800:	0b990100 	bleq	fe640c08 <rear+0xde63c9b8>
     804:	000000d1 	ldrdeq	r0, [r0], -r1
     808:	19709102 	ldmdbne	r0!, {r1, r8, ip, pc}^
     80c:	9901006b 	stmdbls	r1, {r0, r1, r3, r5, r6}
     810:	0000d10d 	andeq	sp, r0, sp, lsl #2
     814:	6c910200 	lfmvs	f0, 4, [r1], {0}
     818:	0003b806 	andeq	fp, r3, r6, lsl #16
     81c:	10990100 	addsne	r0, r9, r0, lsl #2
     820:	000000d1 	ldrdeq	r0, [r0], -r1
     824:	1a689102 	bne	1a24c34 <startup-0x1e5db3cc>
     828:	200004f2 	strdcs	r0, [r0], -r2
     82c:	0000005a 	andeq	r0, r0, sl, asr r0
     830:	0001a806 	andeq	sl, r1, r6, lsl #16
     834:	1ba30100 	blne	fe8c0c3c <rear+0xde8bc9ec>
     838:	00000025 	andeq	r0, r0, r5, lsr #32
     83c:	00679102 	rsbeq	r9, r7, r2, lsl #2
     840:	0f040d00 	svceq	0x00040d00
     844:	1e000002 	cdpne	0, 0, cr0, cr0, cr2, {0}
     848:	000003c7 	andeq	r0, r0, r7, asr #7
     84c:	880d9201 	stmdahi	sp, {r0, r9, ip, pc}
     850:	2c200004 	stccs	0, cr0, [r0], #-16
     854:	01000000 	mrseq	r0, (UNDEF: 0)
     858:	0005cd9c 	muleq	r5, ip, sp
     85c:	00731c00 	rsbseq	r1, r3, r0, lsl #24
     860:	76219201 	strtvc	r9, [r1], -r1, lsl #4
     864:	02000005 	andeq	r0, r0, #5, 0
     868:	81157491 			; <UNDEFINED> instruction: 0x81157491
     86c:	01000005 	tsteq	r0, r5
     870:	02093392 	andeq	r3, r9, #1207959554	; 0x48000002
     874:	91020000 	mrsls	r0, (UNDEF: 2)
     878:	03961570 	orrseq	r1, r6, #112, 10	; 0x1c000000
     87c:	92010000 	andls	r0, r1, #0, 0
     880:	0000d13d 	andeq	sp, r0, sp, lsr r1
     884:	6c910200 	lfmvs	f0, 4, [r1], {0}
     888:	0002f815 	andeq	pc, r2, r5, lsl r8	; <UNPREDICTABLE>
     88c:	48920100 	ldmmi	r2, {r8}
     890:	000000d1 	ldrdeq	r0, [r0], -r1
     894:	00689102 	rsbeq	r9, r8, r2, lsl #2
     898:	00041414 	andeq	r1, r4, r4, lsl r4
     89c:	06310100 	ldrteq	r0, [r1], -r0, lsl #2
     8a0:	200003dc 	ldrdcs	r0, [r0], -ip
     8a4:	000000ac 	andeq	r0, r0, ip, lsr #1
     8a8:	05f19c01 	ldrbeq	r9, [r1, #3073]!	; 0xc01
     8ac:	6f1c0000 	svcvs	0x001c0000
     8b0:	1a310100 	bne	c40cb8 <startup-0x1f3bf348>
     8b4:	000001cc 	andeq	r0, r0, ip, asr #3
     8b8:	00749102 	rsbseq	r9, r4, r2, lsl #2
     8bc:	0003d314 	andeq	sp, r3, r4, lsl r3
     8c0:	062b0100 	strteq	r0, [fp], -r0, lsl #2
     8c4:	2000037a 	andcs	r0, r0, sl, ror r3
     8c8:	00000062 	andeq	r0, r0, r2, rrx
     8cc:	062c9c01 	strteq	r9, [ip], -r1, lsl #24
     8d0:	6f1c0000 	svcvs	0x001c0000
     8d4:	1b2b0100 	blne	ac0cdc <startup-0x1f53f324>
     8d8:	000001cc 	andeq	r0, r0, ip, asr #3
     8dc:	1a6c9102 	bne	1b24cec <startup-0x1e4db314>
     8e0:	20000382 	andcs	r0, r0, r2, lsl #7
     8e4:	00000050 	andeq	r0, r0, r0, asr r0
     8e8:	01006919 	tsteq	r0, r9, lsl r9
     8ec:	00d10e2c 	sbcseq	r0, r1, ip, lsr #28
     8f0:	91020000 	mrsls	r0, (UNDEF: 2)
     8f4:	14000074 	strne	r0, [r0], #-116	; 0xffffff8c
     8f8:	000003e5 	andeq	r0, r0, r5, ror #7
     8fc:	18062501 	stmdane	r6, {r0, r8, sl, sp}
     900:	62200003 	eorvs	r0, r0, #3, 0
     904:	01000000 	mrseq	r0, (UNDEF: 0)
     908:	0006679c 	muleq	r6, ip, r7
     90c:	006f1c00 	rsbeq	r1, pc, r0, lsl #24
     910:	cc1a2501 	cfldr32gt	mvfx2, [sl], {1}
     914:	02000001 	andeq	r0, r0, #1, 0
     918:	201a6c91 	mulscs	sl, r1, ip
     91c:	50200003 	eorpl	r0, r0, r3
     920:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
     924:	26010069 	strcs	r0, [r1], -r9, rrx
     928:	0000d10e 	andeq	sp, r0, lr, lsl #2
     92c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     930:	a71f0000 	ldrge	r0, [pc, -r0]
     934:	01000003 	tsteq	r0, r3
     938:	02f80620 	rscseq	r0, r8, #32, 12	; 0x2000000
     93c:	00202000 	eoreq	r2, r0, r0
     940:	9c010000 	stcls	0, cr0, [r1], {-0}
     944:	000006a9 	andeq	r0, r0, r9, lsr #13
     948:	01006f1c 	tsteq	r0, ip, lsl pc
     94c:	01cc1f20 	biceq	r1, ip, r0, lsr #30
     950:	91020000 	mrsls	r0, (UNDEF: 2)
     954:	04251574 	strteq	r1, [r5], #-1396	; 0xfffffa8c
     958:	20010000 	andcs	r0, r1, r0
     95c:	0000d126 	andeq	sp, r0, r6, lsr #2
     960:	70910200 	addsvc	r0, r1, r0, lsl #4
     964:	00042c15 	andeq	r2, r4, r5, lsl ip
     968:	32200100 	eorcc	r0, r0, #0
     96c:	000000d1 	ldrdeq	r0, [r0], -r1
     970:	006c9102 	rsbeq	r9, ip, r2, lsl #2
     974:	0003751d 	andeq	r7, r3, sp, lsl r5
     978:	06180100 	ldreq	r0, [r8], -r0, lsl #2
     97c:	20000000 	andcs	r0, r0, r0
     980:	0000000c 	andeq	r0, r0, ip
     984:	20009c01 	andcs	r9, r0, r1, lsl #24
     988:	04000001 	streq	r0, [r0], #-1
     98c:	0002fb00 	andeq	pc, r2, r0, lsl #22
     990:	51010400 	tstpl	r1, r0, lsl #8
     994:	0c000000 	stceq	0, cr0, [r0], {-0}
     998:	00000479 	andeq	r0, r0, r9, ror r4
     99c:	0000015d 	andeq	r0, r0, sp, asr r1
     9a0:	20000900 	andcs	r0, r0, r0, lsl #18
     9a4:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     9a8:	0000061a 	andeq	r0, r0, sl, lsl r6
     9ac:	4f080102 	svcmi	0x00080102
     9b0:	03000001 	movweq	r0, #1
     9b4:	0000044d 	andeq	r0, r0, sp, asr #8
     9b8:	d0062401 	andle	r2, r6, r1, lsl #8
     9bc:	20200009 	eorcs	r0, r0, r9
     9c0:	01000000 	mrseq	r0, (UNDEF: 0)
     9c4:	0000509c 	muleq	r0, ip, r0
     9c8:	00630400 	rsbeq	r0, r3, r0, lsl #8
     9cc:	251c2401 	ldrcs	r2, [ip, #-1025]	; 0xfffffbff
     9d0:	02000000 	andeq	r0, r0, #0, 0
     9d4:	05007791 	streq	r7, [r0, #-1937]	; 0xfffff86f
     9d8:	00000448 	andeq	r0, r0, r8, asr #8
     9dc:	250f1401 	strcs	r1, [pc, #-1025]	; 5e3 <startup-0x1ffffa1d>
     9e0:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
     9e4:	68200009 	stmdavs	r0!, {r0, r3}
     9e8:	01000000 	mrseq	r0, (UNDEF: 0)
     9ec:	0000a79c 	muleq	r0, ip, r7
     9f0:	04620600 	strbteq	r0, [r2], #-1536	; 0xfffffa00
     9f4:	15010000 	strne	r0, [r1, #-0]
     9f8:	0000a713 	andeq	sl, r0, r3, lsl r7
     9fc:	58910200 	ldmpl	r1, {r9}
     a00:	00044106 	andeq	r4, r4, r6, lsl #2
     a04:	13160100 	tstne	r6, #0
     a08:	000000a7 	andeq	r0, r0, r7, lsr #1
     a0c:	07489102 	strbeq	r9, [r8, -r2, lsl #2]
     a10:	00776f72 	rsbseq	r6, r7, r2, ror pc
     a14:	be091901 	vmlalt.f16	s2, s18, s2	; <UNPREDICTABLE>
     a18:	02000000 	andeq	r0, r0, #0, 0
     a1c:	5a066c91 	bpl	19bc68 <startup-0x1fe64398>
     a20:	01000004 	tsteq	r0, r4
     a24:	00be0e19 	adcseq	r0, lr, r9, lsl lr
     a28:	91020000 	mrsls	r0, (UNDEF: 2)
     a2c:	25080068 	strcs	r0, [r8, #-104]	; 0xffffff98
     a30:	b7000000 	strlt	r0, [r0, -r0]
     a34:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
     a38:	000000b7 	strheq	r0, [r0], -r7
     a3c:	0402000f 	streq	r0, [r2], #-15
     a40:	0006b307 	andeq	fp, r6, r7, lsl #6
     a44:	05040a00 	streq	r0, [r4, #-2560]	; 0xfffff600
     a48:	00746e69 	rsbseq	r6, r4, r9, ror #28
     a4c:	0004550b 	andeq	r5, r4, fp, lsl #10
     a50:	05080100 	streq	r0, [r8, #-256]	; 0xffffff00
     a54:	000000be 	strheq	r0, [r0], -lr
     a58:	20000924 	andcs	r0, r0, r4, lsr #18
     a5c:	00000044 	andeq	r0, r0, r4, asr #32
     a60:	00fc9c01 	rscseq	r9, ip, r1, lsl #24
     a64:	6a070000 	bvs	1c0a6c <startup-0x1fe3f594>
     a68:	09090100 	stmdbeq	r9, {r8}
     a6c:	000000be 	strheq	r0, [r0], -lr
     a70:	06749102 	ldrbteq	r9, [r4], -r2, lsl #2
     a74:	0000043b 	andeq	r0, r0, fp, lsr r4
     a78:	fc0a0a01 	stc2	10, cr0, [sl], {1}	; <UNPREDICTABLE>
     a7c:	02000000 	andeq	r0, r0, #0, 0
     a80:	02007391 	andeq	r7, r0, #1140850690	; 0x44000002
     a84:	01580801 	cmpeq	r8, r1, lsl #16
     a88:	6c0c0000 	stcvs	0, cr0, [ip], {-0}
     a8c:	01000004 	tsteq	r0, r4
     a90:	09000604 	stmdbeq	r0, {r2, r9, sl}
     a94:	00242000 	eoreq	r2, r4, r0
     a98:	9c010000 	stcls	0, cr0, [r1], {-0}
     a9c:	01006904 	tsteq	r0, r4, lsl #18
     aa0:	00be1704 	adcseq	r1, lr, r4, lsl #14
     aa4:	91020000 	mrsls	r0, (UNDEF: 2)
     aa8:	9e000074 	mcrls	0, 0, r0, cr0, cr4, {3}
     aac:	04000000 	streq	r0, [r0], #-0
     ab0:	0003da00 	andeq	sp, r3, r0, lsl #20
     ab4:	51010400 	tstpl	r1, r0, lsl #8
     ab8:	0c000000 	stceq	0, cr0, [r0], {-0}
     abc:	000004c3 	andeq	r0, r0, r3, asr #9
     ac0:	0000015d 	andeq	r0, r0, sp, asr r1
     ac4:	200009f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
     ac8:	00000062 	andeq	r0, r0, r2, rrx
     acc:	00000705 	andeq	r0, r0, r5, lsl #14
     ad0:	4f080102 	svcmi	0x00080102
     ad4:	03000001 	movweq	r0, #1
     ad8:	00000000 	andeq	r0, r0, r0
     adc:	14062601 	strne	r2, [r6], #-1537	; 0xfffff9ff
     ae0:	3e20000a 	cdpcc	0, 2, cr0, cr0, cr10, {0}
     ae4:	01000000 	mrseq	r0, (UNDEF: 0)
     ae8:	0000519c 	muleq	r0, ip, r1
     aec:	736d0400 	cmnvc	sp, #0, 8
     af0:	1f260100 	svcne	0x00260100
     af4:	00000051 	andeq	r0, r0, r1, asr r0
     af8:	00749102 	rsbseq	r9, r4, r2, lsl #2
     afc:	b3070402 	movwlt	r0, #29698	; 0x7402
     b00:	05000006 	streq	r0, [r0, #-6]
     b04:	0000002e 	andeq	r0, r0, lr, lsr #32
     b08:	04061a01 	streq	r1, [r6], #-2561	; 0xfffff5ff
     b0c:	1020000a 	eorne	r0, r0, sl
     b10:	01000000 	mrseq	r0, (UNDEF: 0)
     b14:	00007d9c 	muleq	r0, ip, sp
     b18:	73750400 	cmnvc	r5, #0, 8
     b1c:	1f1a0100 	svcne	0x001a0100
     b20:	00000051 	andeq	r0, r0, r1, asr r0
     b24:	00749102 	rsbseq	r9, r4, r2, lsl #2
     b28:	0004b706 	andeq	fp, r4, r6, lsl #14
     b2c:	06120100 	ldreq	r0, [r2], -r0, lsl #2
     b30:	200009fa 	strdcs	r0, [r0], -sl
     b34:	0000000a 	andeq	r0, r0, sl
     b38:	fe069c01 	cdp2	12, 0, cr9, cr6, cr1, {0}
     b3c:	01000000 	mrseq	r0, (UNDEF: 0)
     b40:	09f00605 	ldmibeq	r0!, {r0, r2, r9, sl}^
     b44:	000a2000 	andeq	r2, sl, r0
     b48:	9c010000 	stcls	0, cr0, [r1], {-0}
     b4c:	00038800 	andeq	r8, r3, r0, lsl #16
     b50:	5c000400 	cfstrspl	mvf0, [r0], {-0}
     b54:	04000004 	streq	r0, [r0], #-4
     b58:	00005101 	andeq	r5, r0, r1, lsl #2
     b5c:	052c0c00 	streq	r0, [ip, #-3072]!	; 0xfffff400
     b60:	015d0000 	cmpeq	sp, r0
     b64:	0a540000 	beq	1500b6c <startup-0x1eaff494>
     b68:	05242000 	streq	r2, [r4, #-0]!
     b6c:	07a50000 	streq	r0, [r5, r0]!
     b70:	d7020000 	strle	r0, [r2, -r0]
     b74:	03000005 	movweq	r0, #5
     b78:	00311701 	eorseq	r1, r1, r1, lsl #14
     b7c:	01030000 	mrseq	r0, (UNDEF: 3)
     b80:	00014f08 	andeq	r4, r1, r8, lsl #30
     b84:	00550400 	subseq	r0, r5, r0, lsl #8
     b88:	00490000 	subeq	r0, r9, r0
     b8c:	4e050000 	cdpmi	0, 0, cr0, cr5, cr0, {0}
     b90:	ff000000 			; <UNDEFINED> instruction: 0xff000000
     b94:	38060003 	stmdacc	r6, {r0, r1}
     b98:	03000000 	movweq	r0, #0
     b9c:	06b30704 	ldrteq	r0, [r3], r4, lsl #14
     ba0:	4e060000 	cdpmi	0, 0, cr0, cr6, cr0, {0}
     ba4:	07000000 	streq	r0, [r0, -r0]
     ba8:	0000039c 	muleq	r0, ip, r3
     bac:	491e0f02 	ldmdbmi	lr, {r1, r8, r9, sl, fp}
     bb0:	05000000 	streq	r0, [r0, #-0]
     bb4:	0021d003 	eoreq	sp, r1, r3
     bb8:	05180820 	ldreq	r0, [r8, #-2080]	; 0xfffff7e0
     bbc:	b7010000 	strlt	r0, [r1, -r0]
     bc0:	000ea806 	andeq	sl, lr, r6, lsl #16
     bc4:	0000d020 	andeq	sp, r0, r0, lsr #32
     bc8:	c69c0100 	ldrgt	r0, [ip], r0, lsl #2
     bcc:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
     bd0:	b8010069 	stmdalt	r1, {r0, r3, r5, r6}
     bd4:	0000250d 	andeq	r2, r0, sp, lsl #10
     bd8:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
     bdc:	01006a09 	tsteq	r0, r9, lsl #20
     be0:	002511b8 	strhteq	r1, [r5], -r8
     be4:	91020000 	mrsls	r0, (UNDEF: 2)
     be8:	01240776 			; <UNDEFINED> instruction: 0x01240776
     bec:	b8010000 	stmdalt	r1, {}	; <UNPREDICTABLE>
     bf0:	00002514 	andeq	r2, r0, r4, lsl r5
     bf4:	6f910200 	svcvs	0x00910200
     bf8:	01006309 	tsteq	r0, r9, lsl #6
     bfc:	002520b8 	strhteq	r2, [r5], -r8
     c00:	91020000 	mrsls	r0, (UNDEF: 2)
     c04:	006b0975 	rsbeq	r0, fp, r5, ror r9
     c08:	4e12b901 	vnmlsmi.f16	s22, s4, s2	; <UNPREDICTABLE>
     c0c:	02000000 	andeq	r0, r0, #0, 0
     c10:	0a007091 	beq	1ce5c <startup-0x1ffe31a4>
     c14:	00000593 	muleq	r0, r3, r5
     c18:	2406a601 	strcs	sl, [r6], #-1537	; 0xfffff9ff
     c1c:	8420000e 	strthi	r0, [r0], #-14
     c20:	01000000 	mrseq	r0, (UNDEF: 0)
     c24:	0001159c 	muleq	r1, ip, r5
     c28:	00780b00 	rsbseq	r0, r8, r0, lsl #22
     c2c:	4e15a601 	cfmsub32mi	mvax0, mvfx10, mvfx5, mvfx1
     c30:	02000000 	andeq	r0, r0, #0, 0
     c34:	790b6c91 	stmdbvc	fp, {r0, r4, r7, sl, fp, sp, lr}
     c38:	21a60100 			; <UNDEFINED> instruction: 0x21a60100
     c3c:	0000004e 	andeq	r0, r0, lr, asr #32
     c40:	07689102 	strbeq	r9, [r8, -r2, lsl #2]!
     c44:	000005d2 	ldrdeq	r0, [r0], -r2
     c48:	250da701 	strcs	sl, [sp, #-1793]	; 0xfffff8ff
     c4c:	02000000 	andeq	r0, r0, #0, 0
     c50:	ff077391 			; <UNDEFINED> instruction: 0xff077391
     c54:	01000005 	tsteq	r0, r5
     c58:	011509a8 	tsteq	r5, r8, lsr #19
     c5c:	91020000 	mrsls	r0, (UNDEF: 2)
     c60:	040c0074 	streq	r0, [ip], #-116	; 0xffffff8c
     c64:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
     c68:	05ae0d00 	streq	r0, [lr, #3328]!	; 0xd00
     c6c:	a0010000 	andge	r0, r1, r0
     c70:	000dee06 	andeq	lr, sp, r6, lsl #28
     c74:	00003620 	andeq	r3, r0, r0, lsr #12
     c78:	409c0100 	addsmi	r0, ip, r0, lsl #2
     c7c:	09000001 	stmdbeq	r0, {r0}
     c80:	a1010069 	tstge	r1, r9, rrx
     c84:	00011509 	andeq	r1, r1, r9, lsl #10
     c88:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     c8c:	06050800 	streq	r0, [r5], -r0, lsl #16
     c90:	96010000 	strls	r0, [r1], -r0
     c94:	000d9406 	andeq	r9, sp, r6, lsl #8
     c98:	00005a20 	andeq	r5, r0, r0, lsr #20
     c9c:	899c0100 	ldmibhi	ip, {r8}
     ca0:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
     ca4:	20000d9a 	mulcs	r0, sl, sp
     ca8:	0000004a 	andeq	r0, r0, sl, asr #32
     cac:	00064407 	andeq	r4, r6, r7, lsl #8
     cb0:	0e970100 	fmleqs	f0, f7, f0
     cb4:	00000115 	andeq	r0, r0, r5, lsl r1
     cb8:	0e749102 	expeqs	f1, f2
     cbc:	20000dbe 			; <UNDEFINED> instruction: 0x20000dbe
     cc0:	0000001a 	andeq	r0, r0, sl, lsl r0
     cc4:	64646109 	strbtvs	r6, [r4], #-265	; 0xfffffef7
     cc8:	129a0100 	addsne	r0, sl, #0
     ccc:	00000115 	andeq	r0, r0, r5, lsl r1
     cd0:	00709102 	rsbseq	r9, r0, r2, lsl #2
     cd4:	1a080000 	bne	200cdc <startup-0x1fdff324>
     cd8:	01000006 	tsteq	r0, r6
     cdc:	0d4e068e 	stcleq	6, cr0, [lr, #-568]	; 0xfffffdc8
     ce0:	00462000 	subeq	r2, r6, r0
     ce4:	9c010000 	stcls	0, cr0, [r1], {-0}
     ce8:	000001be 			; <UNDEFINED> instruction: 0x000001be
     cec:	0005810f 	andeq	r8, r5, pc, lsl #2
     cf0:	218e0100 	orrcs	r0, lr, r0, lsl #2
     cf4:	00000025 	andeq	r0, r0, r5, lsr #32
     cf8:	0f779102 	svceq	0x00779102
     cfc:	00000124 	andeq	r0, r0, r4, lsr #2
     d00:	252f8e01 	strcs	r8, [pc, #-3585]!	; ffffff07 <rear+0xdfffbcb7>
     d04:	02000000 	andeq	r0, r0, #0, 0
     d08:	08007691 	stmdaeq	r0, {r0, r4, r7, r9, sl, ip, sp, lr}
     d0c:	00000502 	andeq	r0, r0, r2, lsl #10
     d10:	08068601 	stmdaeq	r6, {r0, r9, sl, pc}
     d14:	4620000d 	strtmi	r0, [r0], -sp
     d18:	01000000 	mrseq	r0, (UNDEF: 0)
     d1c:	0001f39c 	muleq	r1, ip, r3
     d20:	6d630b00 	vstmdbvs	r3!, {d16-d15}
     d24:	86010064 	strhi	r0, [r1], -r4, rrx
     d28:	00002524 	andeq	r2, r0, r4, lsr #10
     d2c:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
     d30:	0001240f 	andeq	r2, r1, pc, lsl #8
     d34:	31860100 	orrcc	r0, r6, r0, lsl #2
     d38:	00000025 	andeq	r0, r0, r5, lsr #32
     d3c:	00769102 	rsbseq	r9, r6, r2, lsl #2
     d40:	0005df08 	andeq	sp, r5, r8, lsl #30
     d44:	066e0100 	strbteq	r0, [lr], -r0, lsl #2
     d48:	20000c92 	mulcs	r0, r2, ip
     d4c:	00000076 	andeq	r0, r0, r6, ror r0
     d50:	02369c01 	eorseq	r9, r6, #256	; 0x100
     d54:	840f0000 	strhi	r0, [pc], #-0	; d5c <startup-0x1ffff2a4>
     d58:	01000009 	tsteq	r0, r9
     d5c:	00251c6e 	eoreq	r1, r5, lr, ror #24
     d60:	91020000 	mrsls	r0, (UNDEF: 2)
     d64:	01240f77 			; <UNDEFINED> instruction: 0x01240f77
     d68:	6e010000 	cdpvs	0, 0, cr0, cr1, cr0, {0}
     d6c:	0000252b 	andeq	r2, r0, fp, lsr #10
     d70:	76910200 	ldrvc	r0, [r1], r0, lsl #4
     d74:	0004b710 	andeq	fp, r4, r0, lsl r7
     d78:	05450100 	strbeq	r0, [r5, #-256]	; 0xffffff00
     d7c:	00000115 	andeq	r0, r0, r5, lsl r1
     d80:	12000011 	andne	r0, r0, #17, 0
     d84:	00000574 	andeq	r0, r0, r4, ror r5
     d88:	25096901 	strcs	r6, [r9, #-2305]	; 0xfffff6ff
     d8c:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
     d90:	2a20000c 	bcs	800dc8 <startup-0x1f7ff238>
     d94:	01000000 	mrseq	r0, (UNDEF: 0)
     d98:	0002609c 	muleq	r2, ip, r0
     d9c:	01240f00 			; <UNDEFINED> instruction: 0x01240f00
     da0:	69010000 	stmdbvs	r1, {}	; <UNPREDICTABLE>
     da4:	00002523 	andeq	r2, r0, r3, lsr #10
     da8:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
     dac:	05861200 	streq	r1, [r6, #512]	; 0x200
     db0:	52010000 	andpl	r0, r1, #0, 0
     db4:	0000310f 	andeq	r3, r0, pc, lsl #2
     db8:	000bdc00 	andeq	sp, fp, r0, lsl #24
     dbc:	00008c20 	andeq	r8, r0, r0, lsr #24
     dc0:	ab9c0100 	blge	fe7011c8 <rear+0xde6fcf78>
     dc4:	0f000002 	svceq	0x00000002
     dc8:	00000124 	andeq	r0, r0, r4, lsr #2
     dcc:	312a5201 			; <UNDEFINED> instruction: 0x312a5201
     dd0:	02000000 	andeq	r0, r0, #0, 0
     dd4:	b7136f91 			; <UNDEFINED> instruction: 0xb7136f91
     dd8:	01000004 	tsteq	r0, r4
     ddc:	01150545 	tsteq	r5, r5, asr #10
     de0:	029b0000 	addseq	r0, fp, #0, 0
     de4:	00110000 	andseq	r0, r1, r0
     de8:	00065607 	andeq	r5, r6, r7, lsl #12
     dec:	135a0100 	cmpne	sl, #0
     df0:	00000031 	andeq	r0, r0, r1, lsr r0
     df4:	00779102 	rsbseq	r9, r7, r2, lsl #2
     df8:	0005bf08 	andeq	fp, r5, r8, lsl #30
     dfc:	06400100 	strbeq	r0, [r0], -r0, lsl #2
     e00:	20000b9e 	mulcs	r0, lr, fp
     e04:	0000003e 	andeq	r0, r0, lr, lsr r0
     e08:	02d09c01 	sbcseq	r9, r0, #256	; 0x100
     e0c:	b7100000 	ldrlt	r0, [r0, -r0]
     e10:	01000004 	tsteq	r0, r4
     e14:	01150545 	tsteq	r5, r5, asr #10
     e18:	00110000 	andseq	r0, r1, r0
     e1c:	05ed0800 	strbeq	r0, [sp, #2048]!	; 0x800
     e20:	2a010000 	bcs	40e28 <startup-0x1ffbf1d8>
     e24:	000b4406 	andeq	r4, fp, r6, lsl #8
     e28:	00005a20 	andeq	r5, r0, r0, lsr #20
     e2c:	f69c0100 			; <UNDEFINED> instruction: 0xf69c0100
     e30:	0f000002 	svceq	0x00000002
     e34:	00000124 	andeq	r0, r0, r4, lsr #2
     e38:	25202a01 	strcs	r2, [r0, #-2561]!	; 0xfffff5ff
     e3c:	02000000 	andeq	r0, r0, #0, 0
     e40:	0a007791 	beq	1ec8c <startup-0x1ffe1374>
     e44:	00000599 	muleq	r0, r9, r5
     e48:	00062001 	andeq	r2, r6, r1
     e4c:	4420000b 	strtmi	r0, [r0], #-11
     e50:	01000000 	mrseq	r0, (UNDEF: 0)
     e54:	0003279c 	muleq	r3, ip, r7
     e58:	00780b00 	rsbseq	r0, r8, r0, lsl #22
     e5c:	25232001 	strcs	r2, [r3, #-1]!
     e60:	02000000 	andeq	r0, r0, #0, 0
     e64:	63096f91 	movwvs	r6, #40849	; 0x9f91
     e68:	0d230100 	stfeqs	f0, [r3, #-0]
     e6c:	00000025 	andeq	r0, r0, r5, lsr #32
     e70:	00779102 	rsbseq	r9, r7, r2, lsl #2
     e74:	00062d0a 	andeq	r2, r6, sl, lsl #26
     e78:	06150100 	ldreq	r0, [r5], -r0, lsl #2
     e7c:	20000ab0 			; <UNDEFINED> instruction: 0x20000ab0
     e80:	00000050 	andeq	r0, r0, r0, asr r0
     e84:	03589c01 	cmpeq	r8, #256	; 0x100
     e88:	780b0000 	stmdavc	fp, {}	; <UNPREDICTABLE>
     e8c:	25150100 	ldrcs	r0, [r5, #-256]	; 0xffffff00
     e90:	00000025 	andeq	r0, r0, r5, lsr #32
     e94:	096f9102 	stmdbeq	pc!, {r1, r8, ip, pc}^	; <UNPREDICTABLE>
     e98:	18010063 	stmdane	r1, {r0, r1, r5, r6}
     e9c:	0000250d 	andeq	r2, r0, sp, lsl #10
     ea0:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
     ea4:	06491400 	strbeq	r1, [r9], -r0, lsl #8
     ea8:	06010000 	streq	r0, [r1], -r0
     eac:	000a5406 	andeq	r5, sl, r6, lsl #8
     eb0:	00005c20 	andeq	r5, r0, r0, lsr #24
     eb4:	139c0100 	orrsne	r0, ip, #0
     eb8:	0000002e 	andeq	r0, r0, lr, lsr #32
     ebc:	15050801 	strne	r0, [r5, #-2049]	; 0xfffff7ff
     ec0:	7c000001 	stcvc	0, cr0, [r0], {1}
     ec4:	11000003 	tstne	r0, r3
     ec8:	00001000 	andeq	r1, r0, r0
     ecc:	0a010000 	beq	40ed4 <startup-0x1ffbf12c>
     ed0:	00011505 	andeq	r1, r1, r5, lsl #10
     ed4:	00001100 	andeq	r1, r0, r0, lsl #2
     ed8:	000b8f00 	andeq	r8, fp, r0, lsl #30
     edc:	b2000400 	andlt	r0, r0, #0, 8
     ee0:	04000005 	streq	r0, [r0], #-5
     ee4:	00005101 	andeq	r5, r0, r1, lsl #2
     ee8:	0a150c00 	beq	543ef0 <startup-0x1fabc110>
     eec:	015d0000 	cmpeq	sp, r0
     ef0:	0f780000 	svceq	0x00780000
     ef4:	013c2000 	teqeq	ip, r0
     ef8:	0a710000 	beq	1c40f00 <startup-0x1e3bf100>
     efc:	04020000 	streq	r0, [r2], #-0
     f00:	0006b307 	andeq	fp, r6, r7, lsl #6
     f04:	05040300 	streq	r0, [r4, #-768]	; 0xfffffd00
     f08:	00746e69 	rsbseq	r6, r4, r9, ror #28
     f0c:	51060102 	tstpl	r6, r2, lsl #2
     f10:	02000001 	andeq	r0, r0, #1, 0
     f14:	014f0801 	cmpeq	pc, r1, lsl #16
     f18:	02020000 	andeq	r0, r2, #0, 0
     f1c:	0008c605 	andeq	ip, r8, r5, lsl #12
     f20:	07020200 	streq	r0, [r2, -r0, lsl #4]
     f24:	00000803 	andeq	r0, r0, r3, lsl #16
     f28:	f8050402 			; <UNDEFINED> instruction: 0xf8050402
     f2c:	02000006 	andeq	r0, r0, #6, 0
     f30:	06ae0704 	strteq	r0, [lr], r4, lsl #14
     f34:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
     f38:	0006f305 	andeq	pc, r6, r5, lsl #6
     f3c:	07080200 	streq	r0, [r8, -r0, lsl #4]
     f40:	000006a9 	andeq	r0, r0, r9, lsr #13
     f44:	00084604 	andeq	r4, r8, r4, lsl #12
     f48:	19220200 	stmdbne	r2!, {r9}
     f4c:	00000077 	andeq	r0, r0, r7, ror r0
     f50:	007d0405 	rsbseq	r0, sp, r5, lsl #8
     f54:	7b060000 	blvc	180f5c <startup-0x1fe7f0a4>
     f58:	04000009 	streq	r0, [r0], #-9
     f5c:	00000893 	muleq	r0, r3, r8
     f60:	4f0e2c03 	svcmi	0x000e2c03
     f64:	04000000 	streq	r0, [r0], #-0
     f68:	00000990 	muleq	r0, r0, r9
     f6c:	4f0e7203 	svcmi	0x000e7203
     f70:	07000000 	streq	r0, [r0, -r0]
     f74:	0000084e 	andeq	r0, r0, lr, asr #16
     f78:	17015e04 	strne	r5, [r1, -r4, lsl #28]
     f7c:	00000025 	andeq	r0, r0, r5, lsr #32
     f80:	a6030408 	strge	r0, [r3], -r8, lsl #8
     f84:	0000c903 	andeq	ip, r0, r3, lsl #18
     f88:	08400900 	stmdaeq	r0, {r8, fp}^
     f8c:	a8030000 	stmdage	r3, {}	; <UNPREDICTABLE>
     f90:	00009a0c 	andeq	r9, r0, ip, lsl #20
     f94:	07da0900 	ldrbeq	r0, [sl, r0, lsl #18]
     f98:	a9030000 	stmdbge	r3, {}	; <UNPREDICTABLE>
     f9c:	0000c913 	andeq	ip, r0, r3, lsl r9
     fa0:	3a0a0000 	bcc	280fa8 <startup-0x1fd7f058>
     fa4:	d9000000 	stmdble	r0, {}	; <UNPREDICTABLE>
     fa8:	0b000000 	bleq	fb0 <startup-0x1ffff050>
     fac:	00000025 	andeq	r0, r0, r5, lsr #32
     fb0:	080c0003 	stmdaeq	ip, {r0, r1}
     fb4:	fd09a303 	stc2	3, cr10, [r9, #-12]
     fb8:	0d000000 	stceq	0, cr0, [r0, #-0]
     fbc:	00000973 	andeq	r0, r0, r3, ror r9
     fc0:	2c07a503 	cfstr32cs	mvfx10, [r7], {3}
     fc4:	00000000 	andeq	r0, r0, r0
     fc8:	0009820d 	andeq	r8, r9, sp, lsl #4
     fcc:	05aa0300 	streq	r0, [sl, #768]!	; 0x300
     fd0:	000000a7 	andeq	r0, r0, r7, lsr #1
     fd4:	ee040004 	cdp	0, 0, cr0, cr4, cr4, {0}
     fd8:	03000008 	movweq	r0, #8
     fdc:	00d903ab 	sbcseq	r0, r9, fp, lsr #7
     fe0:	a3040000 	movwge	r0, #16384	; 0x4000
     fe4:	03000007 	movweq	r0, #7
     fe8:	006b1baf 	rsbeq	r1, fp, pc, lsr #23
     fec:	040e0000 	streq	r0, [lr], #-0
     ff0:	011d0405 	tsteq	sp, r5, lsl #8
     ff4:	01020000 	mrseq	r0, (UNDEF: 2)
     ff8:	00015808 	andeq	r5, r1, r8, lsl #16
     ffc:	011d0f00 	tsteq	sp, r0, lsl #30
    1000:	da040000 	ble	101008 <startup-0x1fefeff8>
    1004:	05000009 	streq	r0, [r0, #-9]
    1008:	00561916 	subseq	r1, r6, r6, lsl r9
    100c:	b4100000 	ldrlt	r0, [r0], #-0
    1010:	18000007 	stmdane	r0, {r0, r1, r2}
    1014:	8f082f05 	svchi	0x00082f05
    1018:	0d000001 	stceq	0, cr0, [r0, #-4]
    101c:	0000090f 	andeq	r0, r0, pc, lsl #18
    1020:	8f133105 	svchi	0x00133105
    1024:	00000001 	andeq	r0, r0, r1
    1028:	006b5f11 	rsbeq	r5, fp, r1, lsl pc
    102c:	2c073205 	sfmcs	f3, 4, [r7], {5}
    1030:	04000000 	streq	r0, [r0], #-0
    1034:	00095e0d 	andeq	r5, r9, sp, lsl #28
    1038:	0b320500 	bleq	c82440 <startup-0x1f37dbc0>
    103c:	0000002c 	andeq	r0, r0, ip, lsr #32
    1040:	079d0d08 	ldreq	r0, [sp, r8, lsl #26]
    1044:	32050000 	andcc	r0, r5, #0, 0
    1048:	00002c14 	andeq	r2, r0, r4, lsl ip
    104c:	540d0c00 	strpl	r0, [sp], #-3072	; 0xfffff400
    1050:	0500000a 	streq	r0, [r0, #-10]
    1054:	002c1b32 	eoreq	r1, ip, r2, lsr fp
    1058:	11100000 	tstne	r0, r0
    105c:	0500785f 	streq	r7, [r0, #-2143]	; 0xfffff7a1
    1060:	01950b33 	orrseq	r0, r5, r3, lsr fp
    1064:	00140000 	andseq	r0, r4, r0
    1068:	01350405 	teqeq	r5, r5, lsl #8
    106c:	290a0000 	stmdbcs	sl, {}	; <UNPREDICTABLE>
    1070:	a5000001 	strge	r0, [r0, #-1]
    1074:	0b000001 	bleq	1080 <startup-0x1fffef80>
    1078:	00000025 	andeq	r0, r0, r5, lsr #32
    107c:	d5100000 	ldrle	r0, [r0, #-0]
    1080:	24000007 	strcs	r0, [r0], #-7
    1084:	28083705 	stmdacs	r8, {r0, r2, r8, r9, sl, ip, sp}
    1088:	0d000002 	stceq	0, cr0, [r0, #-8]
    108c:	000006ea 	andeq	r0, r0, sl, ror #13
    1090:	2c093905 			; <UNDEFINED> instruction: 0x2c093905
    1094:	00000000 	andeq	r0, r0, r0
    1098:	0009980d 	andeq	r9, r9, sp, lsl #16
    109c:	093a0500 	ldmdbeq	sl!, {r8, sl}
    10a0:	0000002c 	andeq	r0, r0, ip, lsr #32
    10a4:	070d0d04 	streq	r0, [sp, -r4, lsl #26]
    10a8:	3b050000 	blcc	1410b0 <startup-0x1febef50>
    10ac:	00002c09 	andeq	r2, r0, r9, lsl #24
    10b0:	c40d0800 	strgt	r0, [sp], #-2048	; 0xfffff800
    10b4:	0500000a 	streq	r0, [r0, #-10]
    10b8:	002c093c 	eoreq	r0, ip, ip, lsr r9
    10bc:	0d0c0000 	stceq	0, cr0, [ip, #-0]
    10c0:	00000877 	andeq	r0, r0, r7, ror r8
    10c4:	2c093d05 	stccs	13, cr3, [r9], {5}
    10c8:	10000000 	andne	r0, r0, r0
    10cc:	00085d0d 	andeq	r5, r8, sp, lsl #26
    10d0:	093e0500 	ldmdbeq	lr!, {r8, sl}
    10d4:	0000002c 	andeq	r0, r0, ip, lsr #32
    10d8:	0a590d14 	beq	1644530 <startup-0x1e9bbad0>
    10dc:	3f050000 	svccc	0x00050000
    10e0:	00002c09 	andeq	r2, r0, r9, lsl #24
    10e4:	d00d1800 	andle	r1, sp, r0, lsl #16
    10e8:	05000008 	streq	r0, [r0, #-8]
    10ec:	002c0940 	eoreq	r0, ip, r0, asr #18
    10f0:	0d1c0000 	ldceq	0, cr0, [ip, #-0]
    10f4:	00000a8b 	andeq	r0, r0, fp, lsl #21
    10f8:	2c094105 	stfcss	f4, [r9], {5}
    10fc:	20000000 	andcs	r0, r0, r0
    1100:	071c1200 	ldreq	r1, [ip, -r0, lsl #4]
    1104:	01080000 	mrseq	r0, (UNDEF: 8)
    1108:	6d084a05 	vstrvs	s8, [r8, #-20]	; 0xffffffec
    110c:	0d000002 	stceq	0, cr0, [r0, #-8]
    1110:	00000790 	muleq	r0, r0, r7
    1114:	6d0a4b05 	vstrvs	d4, [sl, #-20]	; 0xffffffec
    1118:	00000002 	andeq	r0, r0, r2
    111c:	00065d0d 	andeq	r5, r6, sp, lsl #26
    1120:	094c0500 	stmdbeq	ip, {r8, sl}^
    1124:	0000026d 	andeq	r0, r0, sp, ror #4
    1128:	09cc1380 	stmibeq	ip, {r7, r8, r9, ip}^
    112c:	4e050000 	cdpmi	0, 0, cr0, cr5, cr0, {0}
    1130:	0001290a 	andeq	r2, r1, sl, lsl #18
    1134:	13010000 	movwne	r0, #4096	; 0x1000
    1138:	00000749 	andeq	r0, r0, r9, asr #14
    113c:	290a5105 	stmdbcs	sl, {r0, r2, r8, ip, lr}
    1140:	04000001 	streq	r0, [r0], #-1
    1144:	150a0001 	strne	r0, [sl, #-1]
    1148:	7d000001 	stcvc	0, cr0, [r0, #-4]
    114c:	0b000002 	bleq	115c <startup-0x1fffeea4>
    1150:	00000025 	andeq	r0, r0, r5, lsr #32
    1154:	8012001f 	andshi	r0, r2, pc, lsl r0
    1158:	90000008 	andls	r0, r0, r8
    115c:	085d0501 	ldmdaeq	sp, {r0, r8, sl}^
    1160:	000002c0 	andeq	r0, r0, r0, asr #5
    1164:	00090f0d 	andeq	r0, r9, sp, lsl #30
    1168:	125e0500 	subsne	r0, lr, #0, 10
    116c:	000002c0 	andeq	r0, r0, r0, asr #5
    1170:	092e0d00 	stmdbeq	lr!, {r8, sl, fp}
    1174:	5f050000 	svcpl	0x00050000
    1178:	00002c06 	andeq	r2, r0, r6, lsl #24
    117c:	980d0400 	stmdals	sp, {sl}
    1180:	05000007 	streq	r0, [r0, #-7]
    1184:	02c60961 	sbceq	r0, r6, #1589248	; 0x184000
    1188:	0d080000 	stceq	0, cr0, [r8, #-0]
    118c:	0000071c 	andeq	r0, r0, ip, lsl r7
    1190:	281e6205 	ldmdacs	lr, {r0, r2, r9, sp, lr}
    1194:	88000002 	stmdahi	r0, {r1}
    1198:	7d040500 	cfstr32vc	mvfx0, [r4, #-0]
    119c:	0a000002 	beq	11ac <startup-0x1fffee54>
    11a0:	000002d6 	ldrdeq	r0, [r0], -r6
    11a4:	000002d6 	ldrdeq	r0, [r0], -r6
    11a8:	0000250b 	andeq	r2, r0, fp, lsl #10
    11ac:	05001f00 	streq	r1, [r0, #-3840]	; 0xfffff100
    11b0:	0002dc04 	andeq	sp, r2, r4, lsl #24
    11b4:	da101400 	ble	4061bc <startup-0x1fbf9e44>
    11b8:	08000008 	stmdaeq	r0, {r3}
    11bc:	05087505 	streq	r7, [r8, #-1285]	; 0xfffffafb
    11c0:	0d000003 	stceq	0, cr0, [r0, #-12]
    11c4:	00000707 	andeq	r0, r0, r7, lsl #14
    11c8:	05117605 	ldreq	r7, [r1, #-1541]	; 0xfffff9fb
    11cc:	00000003 	andeq	r0, r0, r3
    11d0:	0006700d 	andeq	r7, r6, sp
    11d4:	06770500 	ldrbteq	r0, [r7], -r0, lsl #10
    11d8:	0000002c 	andeq	r0, r0, ip, lsr #32
    11dc:	04050004 	streq	r0, [r5], #-4
    11e0:	0000003a 	andeq	r0, r0, sl, lsr r0
    11e4:	0008f910 	andeq	pc, r8, r0, lsl r9	; <UNPREDICTABLE>
    11e8:	b5056800 	strlt	r6, [r5, #-2048]	; 0xfffff800
    11ec:	00044e08 	andeq	r4, r4, r8, lsl #28
    11f0:	705f1100 	subsvc	r1, pc, r0, lsl #2
    11f4:	12b60500 	adcsne	r0, r6, #0, 10
    11f8:	00000305 	andeq	r0, r0, r5, lsl #6
    11fc:	725f1100 	subsvc	r1, pc, #0
    1200:	07b70500 	ldreq	r0, [r7, r0, lsl #10]!
    1204:	0000002c 	andeq	r0, r0, ip, lsr #32
    1208:	775f1104 	ldrbvc	r1, [pc, -r4, lsl #2]
    120c:	07b80500 	ldreq	r0, [r8, r0, lsl #10]!
    1210:	0000002c 	andeq	r0, r0, ip, lsr #32
    1214:	07420d08 	strbeq	r0, [r2, -r8, lsl #26]
    1218:	b9050000 	stmdblt	r5, {}	; <UNPREDICTABLE>
    121c:	00004109 	andeq	r4, r0, r9, lsl #2
    1220:	f10d0c00 			; <UNDEFINED> instruction: 0xf10d0c00
    1224:	05000007 	streq	r0, [r0, #-7]
    1228:	004109ba 	strheq	r0, [r1], #-154	; 0xffffff66
    122c:	110e0000 	mrsne	r0, (UNDEF: 14)
    1230:	0066625f 	rsbeq	r6, r6, pc, asr r2
    1234:	dd11bb05 	vldrle	d11, [r1, #-20]	; 0xffffffec
    1238:	10000002 	andne	r0, r0, r2
    123c:	0006c00d 	andeq	ip, r6, sp
    1240:	07bc0500 	ldreq	r0, [ip, r0, lsl #10]!
    1244:	0000002c 	andeq	r0, r0, ip, lsr #32
    1248:	072a0d18 			; <UNDEFINED> instruction: 0x072a0d18
    124c:	c3050000 	movwgt	r0, #20480	; 0x5000
    1250:	0001150a 	andeq	r1, r1, sl, lsl #10
    1254:	8d0d1c00 	stchi	12, cr1, [sp, #-0]
    1258:	05000005 	streq	r0, [r0, #-5]
    125c:	05c01dc5 	strbeq	r1, [r0, #3525]	; 0xdc5
    1260:	0d200000 	stceq	0, cr0, [r0, #-0]
    1264:	000005e6 	andeq	r0, r0, r6, ror #11
    1268:	ea1dc705 	b	772e84 <startup-0x1f88d17c>
    126c:	24000005 	strcs	r0, [r0], #-5
    1270:	00098a0d 	andeq	r8, r9, sp, lsl #20
    1274:	0dca0500 	cfstr64eq	mvdx0, [sl]
    1278:	0000060e 	andeq	r0, r0, lr, lsl #12
    127c:	0aa50d28 	beq	fe944724 <rear+0xde9404d4>
    1280:	cb050000 	blgt	141288 <startup-0x1febed78>
    1284:	00062809 	andeq	r2, r6, r9, lsl #16
    1288:	5f112c00 	svcpl	0x00112c00
    128c:	05006275 	streq	r6, [r0, #-629]	; 0xfffffd8b
    1290:	02dd11ce 	sbcseq	r1, sp, #-2147483597	; 0x80000033
    1294:	11300000 	teqne	r0, r0
    1298:	0070755f 	rsbseq	r7, r0, pc, asr r5
    129c:	0512cf05 	ldreq	ip, [r2, #-3845]	; 0xfffff0fb
    12a0:	38000003 	stmdacc	r0, {r0, r1}
    12a4:	72755f11 	rsbsvc	r5, r5, #68	; 0x44
    12a8:	07d00500 	ldrbeq	r0, [r0, r0, lsl #10]
    12ac:	0000002c 	andeq	r0, r0, ip, lsr #32
    12b0:	07010d3c 	smladxeq	r1, ip, sp, r0
    12b4:	d3050000 	movwle	r0, #20480	; 0x5000
    12b8:	00062e11 	andeq	r2, r6, r1, lsl lr
    12bc:	7d0d4000 	stcvc	0, cr4, [sp, #-0]
    12c0:	0500000a 	streq	r0, [r0, #-10]
    12c4:	063e11d4 			; <UNDEFINED> instruction: 0x063e11d4
    12c8:	11430000 	mrsne	r0, (UNDEF: 67)
    12cc:	00626c5f 	rsbeq	r6, r2, pc, asr ip
    12d0:	dd11d705 	ldcle	7, cr13, [r1, #-20]	; 0xffffffec
    12d4:	44000002 	strmi	r0, [r0], #-2
    12d8:	0007580d 	andeq	r5, r7, sp, lsl #16
    12dc:	07da0500 	ldrbeq	r0, [sl, r0, lsl #10]
    12e0:	0000002c 	andeq	r0, r0, ip, lsr #32
    12e4:	07690d4c 	strbeq	r0, [r9, -ip, asr #26]!
    12e8:	db050000 	blle	1412f0 <startup-0x1febed10>
    12ec:	0000820a 	andeq	r8, r0, sl, lsl #4
    12f0:	800d5000 	andhi	r5, sp, r0
    12f4:	05000005 	streq	r0, [r0, #-5]
    12f8:	046c12de 	strbteq	r1, [ip], #-734	; 0xfffffd22
    12fc:	0d540000 	ldcleq	0, cr0, [r4, #-0]
    1300:	0000097c 	andeq	r0, r0, ip, ror r9
    1304:	090ce205 	stmdbeq	ip, {r0, r2, r9, sp, lr, pc}
    1308:	58000001 	stmdapl	r0, {r0}
    130c:	0009010d 	andeq	r0, r9, sp, lsl #2
    1310:	0ee40500 	cdpeq	5, 14, cr0, cr4, cr0, {0}
    1314:	000000fd 	strdeq	r0, [r0], -sp
    1318:	08550d5c 	ldmdaeq	r5, {r2, r3, r4, r6, r8, sl, fp}^
    131c:	e5050000 	str	r0, [r5, #-0]
    1320:	00002c09 	andeq	r2, r0, r9, lsl #24
    1324:	15006400 	strne	r6, [r0, #-1024]	; 0xfffffc00
    1328:	0000002c 	andeq	r0, r0, ip, lsr #32
    132c:	0000046c 	andeq	r0, r0, ip, ror #8
    1330:	00046c16 	andeq	r6, r4, r6, lsl ip
    1334:	01151600 	tsteq	r5, r0, lsl #12
    1338:	17160000 	ldrne	r0, [r6, -r0]
    133c:	16000001 	strne	r0, [r0], -r1
    1340:	0000002c 	andeq	r0, r0, ip, lsr #32
    1344:	77040500 	strvc	r0, [r4, -r0, lsl #10]
    1348:	0f000004 	svceq	0x00000004
    134c:	0000046c 	andeq	r0, r0, ip, ror #8
    1350:	00096617 	andeq	r6, r9, r7, lsl r6
    1354:	05042800 	streq	r2, [r4, #-2048]	; 0xfffff800
    1358:	c0080260 	andgt	r0, r8, r0, ror #4
    135c:	18000005 	stmdane	r0, {r0, r2}
    1360:	000008bf 			; <UNDEFINED> instruction: 0x000008bf
    1364:	07026205 	streq	r6, [r2, -r5, lsl #4]
    1368:	0000002c 	andeq	r0, r0, ip, lsr #32
    136c:	07511800 	ldrbeq	r1, [r1, -r0, lsl #16]
    1370:	67050000 	strvs	r0, [r5, -r0]
    1374:	069a0b02 	ldreq	r0, [sl], r2, lsl #22
    1378:	18040000 	stmdane	r4, {}	; <UNPREDICTABLE>
    137c:	000007e1 	andeq	r0, r0, r1, ror #15
    1380:	14026705 	strne	r6, [r2], #-1797	; 0xfffff8fb
    1384:	0000069a 	muleq	r0, sl, r6
    1388:	07ac1808 	streq	r1, [ip, r8, lsl #16]!
    138c:	67050000 	strvs	r0, [r5, -r0]
    1390:	069a1e02 	ldreq	r1, [sl], r2, lsl #28
    1394:	180c0000 	stmdane	ip, {}	; <UNPREDICTABLE>
    1398:	00000929 	andeq	r0, r0, r9, lsr #18
    139c:	08026905 	stmdaeq	r2, {r0, r2, r8, fp, sp, lr}
    13a0:	0000002c 	andeq	r0, r0, ip, lsr #32
    13a4:	067e1810 			; <UNDEFINED> instruction: 0x067e1810
    13a8:	6a050000 	bvs	1413b0 <startup-0x1febec50>
    13ac:	089a0802 	ldmeq	sl, {r1, fp}
    13b0:	18140000 	ldmdane	r4, {}	; <UNPREDICTABLE>
    13b4:	00000945 	andeq	r0, r0, r5, asr #18
    13b8:	07026d05 	streq	r6, [r2, -r5, lsl #26]
    13bc:	0000002c 	andeq	r0, r0, ip, lsr #32
    13c0:	09331830 	ldmdbeq	r3!, {r4, r5, fp, ip}
    13c4:	6e050000 	cdpvs	0, 0, cr0, cr5, cr0, {0}
    13c8:	08af1602 	stmiaeq	pc!, {r1, r9, sl, ip}	; <UNPREDICTABLE>
    13cc:	18340000 	ldmdane	r4!, {}	; <UNPREDICTABLE>
    13d0:	00000888 	andeq	r0, r0, r8, lsl #17
    13d4:	07027005 	streq	r7, [r2, -r5]
    13d8:	0000002c 	andeq	r0, r0, ip, lsr #32
    13dc:	093b1838 	ldmdbeq	fp!, {r3, r4, r5, fp, ip}
    13e0:	72050000 	andvc	r0, r5, #0, 0
    13e4:	08c00a02 	stmiaeq	r0, {r1, r9, fp}^
    13e8:	183c0000 	ldmdane	ip!, {}	; <UNPREDICTABLE>
    13ec:	00000838 	andeq	r0, r0, r8, lsr r8
    13f0:	13027505 	movwne	r7, #9477	; 0x2505
    13f4:	0000018f 	andeq	r0, r0, pc, lsl #3
    13f8:	07cb1840 	strbeq	r1, [fp, r0, asr #16]
    13fc:	76050000 	strvc	r0, [r5], -r0
    1400:	002c0702 	eoreq	r0, ip, r2, lsl #14
    1404:	18440000 	stmdane	r4, {}^	; <UNPREDICTABLE>
    1408:	00000abf 			; <UNDEFINED> instruction: 0x00000abf
    140c:	13027705 	movwne	r7, #9989	; 0x2705
    1410:	0000018f 	andeq	r0, r0, pc, lsl #3
    1414:	089a1848 	ldmeq	sl, {r3, r6, fp, ip}
    1418:	78050000 	stmdavc	r5, {}	; <UNPREDICTABLE>
    141c:	08c61402 	stmiaeq	r6, {r1, sl, ip}^
    1420:	184c0000 	stmdane	ip, {}^	; <UNPREDICTABLE>
    1424:	000007e9 	andeq	r0, r0, r9, ror #15
    1428:	07027b05 	streq	r7, [r2, -r5, lsl #22]
    142c:	0000002c 	andeq	r0, r0, ip, lsr #32
    1430:	07611850 			; <UNDEFINED> instruction: 0x07611850
    1434:	7c050000 	stcvc	0, cr0, [r5], {-0}
    1438:	01170902 	tsteq	r7, r2, lsl #18
    143c:	18540000 	ldmdane	r4, {}^	; <UNPREDICTABLE>
    1440:	000008b8 			; <UNDEFINED> instruction: 0x000008b8
    1444:	07029f05 	streq	r9, [r2, -r5, lsl #30]
    1448:	00000875 	andeq	r0, r0, r5, ror r8
    144c:	08801958 	stmeq	r0, {r3, r4, r6, r8, fp, ip}
    1450:	a3050000 	movwge	r0, #20480	; 0x5000
    1454:	02c01302 	sbceq	r1, r0, #134217728	; 0x8000000
    1458:	01480000 	mrseq	r0, (UNDEF: 72)
    145c:	00081619 	andeq	r1, r8, r9, lsl r6
    1460:	02a40500 	adceq	r0, r4, #0, 10
    1464:	00027d12 	andeq	r7, r2, r2, lsl sp
    1468:	19014c00 	stmdbne	r1, {sl, fp, lr}
    146c:	00000a73 	andeq	r0, r0, r3, ror sl
    1470:	0c02a805 	stceq	8, cr10, [r2], {5}
    1474:	000008d7 	ldrdeq	r0, [r0], -r7
    1478:	321902dc 	andscc	r0, r9, #220, 4	; 0xc000000d
    147c:	05000007 	streq	r0, [r0, #-7]
    1480:	5b1002ad 	blpl	401f3c <startup-0x1fbfe0c4>
    1484:	e0000006 	and	r0, r0, r6
    1488:	07171902 	ldreq	r1, [r7, -r2, lsl #18]
    148c:	af050000 	svcge	0x00050000
    1490:	08e30a02 	stmiaeq	r3!, {r1, r9, fp}^
    1494:	02ec0000 	rsceq	r0, ip, #0, 0
    1498:	4e040500 	cfsh32mi	mvfx0, mvfx4, #0
    149c:	15000004 	strne	r0, [r0, #-4]
    14a0:	0000002c 	andeq	r0, r0, ip, lsr #32
    14a4:	000005e4 	andeq	r0, r0, r4, ror #11
    14a8:	00046c16 	andeq	r6, r4, r6, lsl ip
    14ac:	01151600 	tsteq	r5, r0, lsl #12
    14b0:	e4160000 	ldr	r0, [r6], #-0
    14b4:	16000005 	strne	r0, [r0], -r5
    14b8:	0000002c 	andeq	r0, r0, ip, lsr #32
    14bc:	24040500 	strcs	r0, [r4], #-1280	; 0xfffffb00
    14c0:	05000001 	streq	r0, [r0, #-1]
    14c4:	0005c604 	andeq	ip, r5, r4, lsl #12
    14c8:	008e1500 	addeq	r1, lr, r0, lsl #10
    14cc:	060e0000 	streq	r0, [lr], -r0
    14d0:	6c160000 	ldcvs	0, cr0, [r6], {-0}
    14d4:	16000004 	strne	r0, [r0], -r4
    14d8:	00000115 	andeq	r0, r0, r5, lsl r1
    14dc:	00008e16 	andeq	r8, r0, r6, lsl lr
    14e0:	002c1600 	eoreq	r1, ip, r0, lsl #12
    14e4:	05000000 	streq	r0, [r0, #-0]
    14e8:	0005f004 	andeq	pc, r5, r4
    14ec:	002c1500 	eoreq	r1, ip, r0, lsl #10
    14f0:	06280000 	strteq	r0, [r8], -r0
    14f4:	6c160000 	ldcvs	0, cr0, [r6], {-0}
    14f8:	16000004 	strne	r0, [r0], -r4
    14fc:	00000115 	andeq	r0, r0, r5, lsl r1
    1500:	14040500 	strne	r0, [r4], #-1280	; 0xfffffb00
    1504:	0a000006 	beq	1524 <startup-0x1fffeadc>
    1508:	0000003a 	andeq	r0, r0, sl, lsr r0
    150c:	0000063e 	andeq	r0, r0, lr, lsr r6
    1510:	0000250b 	andeq	r2, r0, fp, lsl #10
    1514:	0a000200 	beq	1d1c <startup-0x1fffe2e4>
    1518:	0000003a 	andeq	r0, r0, sl, lsr r0
    151c:	0000064e 	andeq	r0, r0, lr, asr #12
    1520:	0000250b 	andeq	r2, r0, fp, lsl #10
    1524:	07000000 	streq	r0, [r0, -r0]
    1528:	000008e7 	andeq	r0, r0, r7, ror #17
    152c:	1a011f05 	bne	49148 <startup-0x1ffb6eb8>
    1530:	0000030b 	andeq	r0, r0, fp, lsl #6
    1534:	000a631a 	andeq	r6, sl, sl, lsl r3
    1538:	23050c00 	movwcs	r0, #23552	; 0x5c00
    153c:	06940801 	ldreq	r0, [r4], r1, lsl #16
    1540:	0f180000 	svceq	0x00180000
    1544:	05000009 	streq	r0, [r0, #-9]
    1548:	94110125 	ldrls	r0, [r1], #-293	; 0xfffffedb
    154c:	00000006 	andeq	r0, r0, r6
    1550:	0007f718 	andeq	pc, r7, r8, lsl r7	; <UNPREDICTABLE>
    1554:	01260500 			; <UNDEFINED> instruction: 0x01260500
    1558:	00002c07 	andeq	r2, r0, r7, lsl #24
    155c:	e1180400 	tst	r8, r0, lsl #8
    1560:	05000008 	streq	r0, [r0, #-8]
    1564:	9a0b0127 	bls	2c1a08 <startup-0x1fd3e5f8>
    1568:	08000006 	stmdaeq	r0, {r1, r2}
    156c:	5b040500 	blpl	102974 <startup-0x1fefd68c>
    1570:	05000006 	streq	r0, [r0, #-6]
    1574:	00064e04 	andeq	r4, r6, r4, lsl #28
    1578:	06761a00 	ldrbteq	r1, [r6], -r0, lsl #20
    157c:	050e0000 	streq	r0, [lr, #-0]
    1580:	d908013f 	stmdble	r8, {r0, r1, r2, r3, r4, r5, r8}
    1584:	18000006 	stmdane	r0, {r1, r2}
    1588:	0000096d 	andeq	r0, r0, sp, ror #18
    158c:	12014005 	andne	r4, r1, #5, 0
    1590:	000006d9 	ldrdeq	r0, [r0], -r9
    1594:	09aa1800 	stmibeq	sl!, {fp, ip}
    1598:	41050000 	mrsmi	r0, (UNDEF: 5)
    159c:	06d91201 	ldrbeq	r1, [r9], r1, lsl #4
    15a0:	18060000 	stmdane	r6, {}	; <UNPREDICTABLE>
    15a4:	000009d5 	ldrdeq	r0, [r0], -r5
    15a8:	12014205 	andne	r4, r1, #1342177280	; 0x50000000
    15ac:	00000048 	andeq	r0, r0, r8, asr #32
    15b0:	480a000c 	stmdami	sl, {r2, r3}
    15b4:	e9000000 	stmdb	r0, {}	; <UNPREDICTABLE>
    15b8:	0b000006 	bleq	15d8 <startup-0x1fffea28>
    15bc:	00000025 	andeq	r0, r0, r5, lsr #32
    15c0:	d01b0002 	andsle	r0, fp, r2
    15c4:	07028005 	streq	r8, [r2, -r5]
    15c8:	000007fe 	strdeq	r0, [r0], -lr
    15cc:	000a0818 	andeq	r0, sl, r8, lsl r8
    15d0:	02820500 	addeq	r0, r2, #0, 10
    15d4:	00002518 	andeq	r2, r0, r8, lsl r5
    15d8:	b0180000 	andslt	r0, r8, r0
    15dc:	05000009 	streq	r0, [r0, #-9]
    15e0:	17120283 	ldrne	r0, [r2, -r3, lsl #5]
    15e4:	04000001 	streq	r0, [r0], #-1
    15e8:	00082b18 	andeq	r2, r8, r8, lsl fp
    15ec:	02840500 	addeq	r0, r4, #0, 10
    15f0:	0007fe10 	andeq	pc, r7, r0, lsl lr	; <UNPREDICTABLE>
    15f4:	96180800 	ldrls	r0, [r8], -r0, lsl #16
    15f8:	0500000a 	streq	r0, [r0, #-10]
    15fc:	a5170285 	ldrge	r0, [r7, #-645]	; 0xfffffd7b
    1600:	24000001 	strcs	r0, [r0], #-1
    1604:	0007bc18 	andeq	fp, r7, r8, lsl ip
    1608:	02860500 	addeq	r0, r6, #0, 10
    160c:	00002c0f 	andeq	r2, r0, pc, lsl #24
    1610:	0a184800 	beq	613618 <startup-0x1f9ec9e8>
    1614:	05000009 	streq	r0, [r0, #-9]
    1618:	642c0287 	strtvs	r0, [ip], #-647	; 0xfffffd79
    161c:	50000000 	andpl	r0, r0, r0
    1620:	000aac18 	andeq	sl, sl, r8, lsl ip
    1624:	02880500 	addeq	r0, r8, #0, 10
    1628:	0006a01a 	andeq	sl, r6, sl, lsl r0
    162c:	1c185800 	ldcne	8, cr5, [r8], {-0}
    1630:	05000009 	streq	r0, [r0, #-9]
    1634:	fd160289 	ldc2	2, cr0, [r6, #-548]	; 0xfffffddc
    1638:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
    163c:	000ab118 	andeq	fp, sl, r8, lsl r1
    1640:	028a0500 	addeq	r0, sl, #0, 10
    1644:	0000fd16 	andeq	pc, r0, r6, lsl sp	; <UNPREDICTABLE>
    1648:	a4187000 	ldrge	r7, [r8], #-0
    164c:	05000008 	streq	r0, [r0, #-8]
    1650:	fd16028b 	ldc2	2, cr0, [r6, #-556]	; 0xfffffdd4
    1654:	78000000 	stmdavc	r0, {}	; <UNPREDICTABLE>
    1658:	000a6918 	andeq	r6, sl, r8, lsl r9
    165c:	028c0500 	addeq	r0, ip, #0, 10
    1660:	00080e10 	andeq	r0, r8, r0, lsl lr
    1664:	1f188000 	svcne	0x00188000
    1668:	05000008 	streq	r0, [r0, #-8]
    166c:	1e10028d 	cdpne	2, 1, cr0, cr0, cr13, {4}
    1670:	88000008 	stmdahi	r0, {r3}
    1674:	0009e218 	andeq	lr, r9, r8, lsl r2
    1678:	028e0500 	addeq	r0, lr, #0, 10
    167c:	00002c0f 	andeq	r2, r0, pc, lsl #24
    1680:	8218a000 	andshi	sl, r8, #0, 0
    1684:	05000007 	streq	r0, [r0, #-7]
    1688:	fd16028f 	ldc2	2, cr0, [r6, #-572]	; 0xfffffdc4
    168c:	a4000000 	strge	r0, [r0], #-0
    1690:	0006db18 	andeq	sp, r6, r8, lsl fp
    1694:	02900500 	addseq	r0, r0, #0, 10
    1698:	0000fd16 	andeq	pc, r0, r6, lsl sp	; <UNPREDICTABLE>
    169c:	7118ac00 	tstvc	r8, r0, lsl #24
    16a0:	05000007 	streq	r0, [r0, #-7]
    16a4:	fd160291 	ldc2	2, cr0, [r6, #-580]	; 0xfffffdbc
    16a8:	b4000000 	strlt	r0, [r0], #-0
    16ac:	00068918 	andeq	r8, r6, r8, lsl r9
    16b0:	02920500 	addseq	r0, r2, #0, 10
    16b4:	0000fd16 	andeq	pc, r0, r6, lsl sp	; <UNPREDICTABLE>
    16b8:	9818bc00 	ldmdals	r8, {sl, fp, ip, sp, pc}
    16bc:	05000006 	streq	r0, [r0, #-6]
    16c0:	fd160293 	ldc2	2, cr0, [r6, #-588]	; 0xfffffdb4
    16c4:	c4000000 	strgt	r0, [r0], #-0
    16c8:	0008bd18 	andeq	fp, r8, r8, lsl sp
    16cc:	02940500 	addseq	r0, r4, #0, 10
    16d0:	00002c08 	andeq	r2, r0, r8, lsl #24
    16d4:	0a00cc00 	beq	346dc <startup-0x1ffcb924>
    16d8:	0000011d 	andeq	r0, r0, sp, lsl r1
    16dc:	0000080e 	andeq	r0, r0, lr, lsl #16
    16e0:	0000250b 	andeq	r2, r0, fp, lsl #10
    16e4:	0a001900 	beq	7aec <startup-0x1fff8514>
    16e8:	0000011d 	andeq	r0, r0, sp, lsl r1
    16ec:	0000081e 	andeq	r0, r0, lr, lsl r8
    16f0:	0000250b 	andeq	r2, r0, fp, lsl #10
    16f4:	0a000700 	beq	32fc <startup-0x1fffcd04>
    16f8:	0000011d 	andeq	r0, r0, sp, lsl r1
    16fc:	0000082e 	andeq	r0, r0, lr, lsr #16
    1700:	0000250b 	andeq	r2, r0, fp, lsl #10
    1704:	1b001700 	blne	730c <startup-0x1fff8cf4>
    1708:	029905f0 	addseq	r0, r9, #240, 10	; 0x3c000000
    170c:	00085507 	andeq	r5, r8, r7, lsl #10
    1710:	08701800 	ldmdaeq	r0!, {fp, ip}^
    1714:	9c050000 	stcls	0, cr0, [r5], {-0}
    1718:	08551b02 	ldmdaeq	r5, {r1, r8, r9, fp, ip}^
    171c:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    1720:	00000867 	andeq	r0, r0, r7, ror #16
    1724:	18029d05 	stmdane	r2, {r0, r2, r8, sl, fp, ip, pc}
    1728:	00000865 	andeq	r0, r0, r5, ror #16
    172c:	050a0078 	streq	r0, [sl, #-120]	; 0xffffff88
    1730:	65000003 	strvs	r0, [r0, #-3]
    1734:	0b000008 	bleq	175c <startup-0x1fffe8a4>
    1738:	00000025 	andeq	r0, r0, r5, lsr #32
    173c:	250a001d 	strcs	r0, [sl, #-29]	; 0xffffffe3
    1740:	75000000 	strvc	r0, [r0, #-0]
    1744:	0b000008 	bleq	176c <startup-0x1fffe894>
    1748:	00000025 	andeq	r0, r0, r5, lsr #32
    174c:	f01c001d 			; <UNDEFINED> instruction: 0xf01c001d
    1750:	03027e05 	movweq	r7, #11781	; 0x2e05
    1754:	0000089a 	muleq	r0, sl, r8
    1758:	0009661d 	andeq	r6, r9, sp, lsl r6
    175c:	02950500 	addseq	r0, r5, #0, 10
    1760:	0006e90b 	andeq	lr, r6, fp, lsl #18
    1764:	0a831d00 	beq	fe0c8b6c <rear+0xde0c491c>
    1768:	9e050000 	cdpls	0, 0, cr0, cr5, cr0, {0}
    176c:	082e0b02 	stmdaeq	lr!, {r1, r8, r9, fp}
    1770:	0a000000 	beq	1778 <startup-0x1fffe888>
    1774:	0000011d 	andeq	r0, r0, sp, lsl r1
    1778:	000008aa 	andeq	r0, r0, sl, lsr #17
    177c:	0000250b 	andeq	r2, r0, fp, lsl #10
    1780:	06001800 	streq	r1, [r0], -r0, lsl #16
    1784:	000006d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1788:	08aa0405 	stmiaeq	sl!, {r0, r2, sl}
    178c:	c01e0000 	andsgt	r0, lr, r0
    1790:	16000008 	strne	r0, [r0], -r8
    1794:	0000046c 	andeq	r0, r0, ip, ror #8
    1798:	b5040500 	strlt	r0, [r4, #-1280]	; 0xfffffb00
    179c:	05000008 	streq	r0, [r0, #-8]
    17a0:	00018f04 	andeq	r8, r1, r4, lsl #30
    17a4:	08d71e00 	ldmeq	r7, {r9, sl, fp, ip}^
    17a8:	2c160000 	ldccs	0, cr0, [r6], {-0}
    17ac:	00000000 	andeq	r0, r0, r0
    17b0:	08dd0405 	ldmeq	sp, {r0, r2, sl}^
    17b4:	04050000 	streq	r0, [r5], #-0
    17b8:	000008cc 	andeq	r0, r0, ip, asr #17
    17bc:	00064e0a 	andeq	r4, r6, sl, lsl #28
    17c0:	0008f300 	andeq	pc, r8, r0, lsl #6
    17c4:	00250b00 	eoreq	r0, r5, r0, lsl #22
    17c8:	00020000 	andeq	r0, r2, r0
    17cc:	0009fc1f 	andeq	pc, r9, pc, lsl ip	; <UNPREDICTABLE>
    17d0:	032e0500 			; <UNDEFINED> instruction: 0x032e0500
    17d4:	00046c17 	andeq	r6, r4, r7, lsl ip
    17d8:	09f51f00 	ldmibeq	r5!, {r8, r9, sl, fp, ip}^
    17dc:	2f050000 	svccs	0x00050000
    17e0:	04721d03 	ldrbteq	r1, [r2], #-3331	; 0xfffff2fd
    17e4:	c4100000 	ldrgt	r0, [r0], #-0
    17e8:	02000002 	andeq	r0, r0, #2, 0
    17ec:	31100106 	tstcc	r0, r6, lsl #2
    17f0:	11000009 	tstne	r0, r9
    17f4:	02060078 	andeq	r0, r6, #120, 0	; 0x78
    17f8:	00003a13 	andeq	r3, r0, r3, lsl sl
    17fc:	79110000 	ldmdbvc	r1, {}	; <UNPREDICTABLE>
    1800:	13030600 	movwne	r0, #13824	; 0x3600
    1804:	0000003a 	andeq	r0, r0, sl, lsr r0
    1808:	de040001 	cdple	0, 0, cr0, cr4, cr1, {0}
    180c:	06000002 	streq	r0, [r0], -r2
    1810:	090d0204 	stmdbeq	sp, {r2, r9}
    1814:	48100000 	ldmdami	r0, {}	; <UNPREDICTABLE>
    1818:	2c000003 	stccs	0, cr0, [r0], {3}
    181c:	7e100806 	cdpvc	8, 1, cr0, cr0, cr6, {0}
    1820:	0d000009 	stceq	0, cr0, [r0, #-36]	; 0xffffffdc
    1824:	000003fe 	strdeq	r0, [r0], -lr
    1828:	2c090906 			; <UNDEFINED> instruction: 0x2c090906
    182c:	00000000 	andeq	r0, r0, r0
    1830:	0003640d 	andeq	r6, r3, sp, lsl #8
    1834:	090a0600 	stmdbeq	sl, {r9, sl}
    1838:	0000002c 	andeq	r0, r0, ip, lsr #32
    183c:	036a0d04 	cmneq	sl, #4, 26	; 0x100
    1840:	0b060000 	bleq	181848 <startup-0x1fe7e7b8>
    1844:	00002c09 	andeq	r2, r0, r9, lsl #24
    1848:	70110800 	andsvc	r0, r1, r0, lsl #16
    184c:	0c060078 	stceq	0, cr0, [r6], {120}	; 0x78
    1850:	00097e0b 	andeq	r7, r9, fp, lsl #28
    1854:	0a000c00 	beq	485c <startup-0x1fffb7a4>
    1858:	00000931 	andeq	r0, r0, r1, lsr r9
    185c:	0000098e 	andeq	r0, r0, lr, lsl #19
    1860:	0000250b 	andeq	r2, r0, fp, lsl #10
    1864:	04000f00 	streq	r0, [r0], #-3840	; 0xfffff100
    1868:	00000249 	andeq	r0, r0, r9, asr #4
    186c:	9a0e0d06 	bls	384c8c <startup-0x1fc7b374>
    1870:	05000009 	streq	r0, [r0, #-9]
    1874:	00093d04 	andeq	r3, r9, r4, lsl #26
    1878:	03e01000 	mvneq	r1, #0, 0
    187c:	06240000 	strteq	r0, [r4], -r0
    1880:	0a23100f 	beq	8c58c4 <startup-0x1f73a73c>
    1884:	67110000 	ldrvs	r0, [r1, -r0]
    1888:	06006f65 	streq	r6, [r0], -r5, ror #30
    188c:	098e0f10 	stmibeq	lr, {r4, r8, r9, sl, fp}
    1890:	0d000000 	stceq	0, cr0, [r0, #-0]
    1894:	00000258 	andeq	r0, r0, r8, asr r2
    1898:	2c091106 	stfcss	f1, [r9], {6}
    189c:	04000000 	streq	r0, [r0], #-0
    18a0:	00025d0d 	andeq	r5, r2, sp, lsl #26
    18a4:	0e110600 	cfmsub32eq	mvax0, mvfx0, mvfx1, mvfx0
    18a8:	0000002c 	andeq	r0, r0, ip, lsr #32
    18ac:	02ee0d08 	rsceq	r0, lr, #8, 26	; 0x200
    18b0:	12060000 	andne	r0, r6, #0, 0
    18b4:	00002c09 	andeq	r2, r0, r9, lsl #24
    18b8:	f30d0c00 			; <UNDEFINED> instruction: 0xf30d0c00
    18bc:	06000002 	streq	r0, [r0], -r2
    18c0:	002c0e12 	eoreq	r0, ip, r2, lsl lr
    18c4:	0d100000 	ldceq	0, cr0, [r0, #-0]
    18c8:	0000037d 	andeq	r0, r0, sp, ror r3
    18cc:	340d1306 	strcc	r1, [sp], #-774	; 0xfffffcfa
    18d0:	1400000a 	strne	r0, [r0], #-10
    18d4:	00063e0d 	andeq	r3, r6, sp, lsl #28
    18d8:	0d140600 	ldceq	6, cr0, [r4, #-0]
    18dc:	00000a34 	andeq	r0, r0, r4, lsr sl
    18e0:	06cb0d18 			; <UNDEFINED> instruction: 0x06cb0d18
    18e4:	15060000 	strne	r0, [r6, #-0]
    18e8:	000a340d 	andeq	r3, sl, sp, lsl #8
    18ec:	e40d1c00 	str	r1, [sp], #-3072	; 0xfffff400
    18f0:	06000002 	streq	r0, [r0], -r2
    18f4:	0a4f0d16 	beq	13c4d54 <startup-0x1ec3b2ac>
    18f8:	00200000 	eoreq	r0, r0, r0
    18fc:	000a2e1e 	andeq	r2, sl, lr, lsl lr
    1900:	0a2e1600 	beq	b87108 <startup-0x1f478ef8>
    1904:	05000000 	streq	r0, [r0, #-0]
    1908:	0009a004 	andeq	sl, r9, r4
    190c:	23040500 	movwcs	r0, #17664	; 0x4500
    1910:	1e00000a 	cdpne	0, 0, cr0, cr0, cr10, {0}
    1914:	00000a4f 	andeq	r0, r0, pc, asr #20
    1918:	000a2e16 	andeq	r2, sl, r6, lsl lr
    191c:	002c1600 	eoreq	r1, ip, r0, lsl #12
    1920:	2c160000 	ldccs	0, cr0, [r6], {-0}
    1924:	00000000 	andeq	r0, r0, r0
    1928:	0a3a0405 	beq	e82944 <startup-0x1f17d6bc>
    192c:	33040000 	movwcc	r0, #16384	; 0x4000
    1930:	06000004 	streq	r0, [r0], -r4
    1934:	0a2e0c17 	beq	b84998 <startup-0x1f47b668>
    1938:	550a0000 	strpl	r0, [sl, #-0]
    193c:	7100000a 	tstvc	r0, sl
    1940:	0b00000a 	bleq	1970 <startup-0x1fffe690>
    1944:	00000025 	andeq	r0, r0, r5, lsr #32
    1948:	a1200063 			; <UNDEFINED> instruction: 0xa1200063
    194c:	01000009 	tsteq	r0, r9
    1950:	0a610905 	beq	1843d6c <startup-0x1e7bc294>
    1954:	03050000 	movweq	r0, #20480	; 0x5000
    1958:	200031d8 	ldrdcs	r3, [r0], -r8
    195c:	0009ef20 	andeq	lr, r9, r0, lsr #30
    1960:	05060100 	streq	r0, [r6, #-256]	; 0xffffff00
    1964:	0000002c 	andeq	r0, r0, ip, lsr #32
    1968:	31d00305 	bicscc	r0, r0, r5, lsl #6
    196c:	bd202000 	stclt	0, cr2, [r0, #-0]
    1970:	01000009 	tsteq	r0, r9
    1974:	002c0507 	eoreq	r0, ip, r7, lsl #10
    1978:	03050000 	movweq	r0, #20480	; 0x5000
    197c:	20004250 	andcs	r4, r0, r0, asr r2
    1980:	0009c220 	andeq	ip, r9, r0, lsr #4
    1984:	05080100 	streq	r0, [r8, #-256]	; 0xffffff00
    1988:	0000002c 	andeq	r0, r0, ip, lsr #32
    198c:	31d40305 	bicscc	r0, r4, r5, lsl #6
    1990:	c9212000 	stmdbgt	r1!, {sp}
    1994:	01000006 	tsteq	r0, r6
    1998:	002c0530 	eoreq	r0, ip, r0, lsr r5
    199c:	106c0000 	rsbne	r0, ip, r0
    19a0:	00482000 	subeq	r2, r8, r0
    19a4:	9c010000 	stcls	0, cr0, [r1], {-0}
    19a8:	00000ae3 	andeq	r0, r0, r3, ror #21
    19ac:	00058122 	andeq	r8, r5, r2, lsr #2
    19b0:	0c310100 	ldfeqs	f0, [r1], #-0
    19b4:	00000a55 	andeq	r0, r0, r5, asr sl
    19b8:	00749102 	rsbseq	r9, r4, r2, lsl #2
    19bc:	00091523 	andeq	r1, r9, r3, lsr #10
    19c0:	06240100 	strteq	r0, [r4], -r0, lsl #2
    19c4:	2000100c 	andcs	r1, r0, ip
    19c8:	00000060 	andeq	r0, r0, r0, rrx
    19cc:	0b099c01 	bleq	2689d8 <startup-0x1fd97628>
    19d0:	81240000 			; <UNDEFINED> instruction: 0x81240000
    19d4:	01000005 	tsteq	r0, r5
    19d8:	0a551524 	beq	1546e70 <startup-0x1eab9190>
    19dc:	91020000 	mrsls	r0, (UNDEF: 2)
    19e0:	71250074 			; <UNDEFINED> instruction: 0x71250074
    19e4:	01000006 	tsteq	r0, r6
    19e8:	002c051f 	eoreq	r0, ip, pc, lsl r5
    19ec:	0ff80000 	svceq	0x00f80000
    19f0:	00142000 	andseq	r2, r4, r0
    19f4:	9c010000 	stcls	0, cr0, [r1], {-0}
    19f8:	00066925 	andeq	r6, r6, r5, lsr #18
    19fc:	061a0100 	ldreq	r0, [sl], -r0, lsl #2
    1a00:	00000b35 	andeq	r0, r0, r5, lsr fp
    1a04:	20000fdc 	ldrdcs	r0, [r0], -ip
    1a08:	0000001c 	andeq	r0, r0, ip, lsl r0
    1a0c:	01029c01 	tsteq	r2, r1, lsl #24
    1a10:	0008b202 	andeq	fp, r8, r2, lsl #4
    1a14:	073a2500 	ldreq	r2, [sl, -r0, lsl #10]!
    1a18:	15010000 	strne	r0, [r1, #-0]
    1a1c:	000b3506 	andeq	r3, fp, r6, lsl #10
    1a20:	000fc400 	andeq	ip, pc, r0, lsl #8
    1a24:	00001820 	andeq	r1, r0, r0, lsr #16
    1a28:	259c0100 	ldrcs	r0, [ip, #256]	; 0x100
    1a2c:	000007fe 	strdeq	r0, [r0], -lr
    1a30:	55091001 	strpl	r1, [r9, #-1]
    1a34:	a800000a 	stmdage	r0, {r1, r3}
    1a38:	1c20000f 	stcne	0, cr0, [r0], #-60	; 0xffffffc4
    1a3c:	01000000 	mrseq	r0, (UNDEF: 0)
    1a40:	032e269c 			; <UNDEFINED> instruction: 0x032e269c
    1a44:	0a010000 	beq	41a4c <startup-0x1ffbe5b4>
    1a48:	000f7806 	andeq	r7, pc, r6, lsl #16
    1a4c:	00003020 	andeq	r3, r0, r0, lsr #32
    1a50:	279c0100 	ldrcs	r0, [ip, r0, lsl #2]
    1a54:	20000f7e 	andcs	r0, r0, lr, ror pc
    1a58:	0000001c 	andeq	r0, r0, ip, lsl r0
    1a5c:	01006928 	tsteq	r0, r8, lsr #18
    1a60:	002c0d0b 	eoreq	r0, ip, fp, lsl #26
    1a64:	91020000 	mrsls	r0, (UNDEF: 2)
    1a68:	00000074 	andeq	r0, r0, r4, ror r0

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	110e1b0e 	tstne	lr, lr, lsl #22
   c:	10061201 	andne	r1, r6, r1, lsl #4
  10:	02000017 	andeq	r0, r0, #23, 0
  14:	0b0b0024 	bleq	2c00ac <startup-0x1fd3ff54>
  18:	0e030b3e 	vmoveq.16	d3[0], r0
  1c:	2e030000 	cdpcs	0, 0, cr0, cr3, cr0, {0}
  20:	03193f01 	tsteq	r9, #1, 30
  24:	3b0b3a0e 	blcc	2ce864 <startup-0x1fd3179c>
  28:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
  2c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
  30:	96184006 	ldrls	r4, [r8], -r6
  34:	13011942 	movwne	r1, #6466	; 0x1942
  38:	05040000 	streq	r0, [r4, #-0]
  3c:	3a080300 	bcc	200c44 <startup-0x1fdff3bc>
  40:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  44:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
  48:	05000018 	streq	r0, [r0, #-24]	; 0xffffffe8
  4c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
  50:	0b3b0b3a 	bleq	ec2d40 <startup-0x1f13d2c0>
  54:	13490b39 	movtne	r0, #39737	; 0x9b39
  58:	00001802 	andeq	r1, r0, r2, lsl #16
  5c:	3f012e06 	svccc	0x00012e06
  60:	3a0e0319 	bcc	380ccc <startup-0x1fc7f334>
  64:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  68:	3c13490b 			; <UNDEFINED> instruction: 0x3c13490b
  6c:	07000019 	smladeq	r0, r9, r0, r0
  70:	00000018 	andeq	r0, r0, r8, lsl r0
  74:	0b002408 	bleq	909c <startup-0x1fff6f64>
  78:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
  7c:	09000008 	stmdbeq	r0, {r3}
  80:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
  84:	0b3a0e03 	bleq	e83898 <startup-0x1f17c768>
  88:	0b390b3b 	bleq	e42d7c <startup-0x1f1bd284>
  8c:	06120111 			; <UNDEFINED> instruction: 0x06120111
  90:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
  94:	00130119 	andseq	r0, r3, r9, lsl r1
  98:	012e0a00 			; <UNDEFINED> instruction: 0x012e0a00
  9c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
  a0:	0b3b0b3a 	bleq	ec2d90 <startup-0x1f13d270>
  a4:	13490b39 	movtne	r0, #39737	; 0x9b39
  a8:	1301193c 	movwne	r1, #6460	; 0x193c
  ac:	2e0b0000 	cdpcs	0, 0, cr0, cr11, cr0, {0}
  b0:	03193f01 	tsteq	r9, #1, 30
  b4:	3b0b3a0e 	blcc	2ce8f4 <startup-0x1fd3170c>
  b8:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
  bc:	11134919 	tstne	r3, r9, lsl r9
  c0:	40061201 	andmi	r1, r6, r1, lsl #4
  c4:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
  c8:	00001301 	andeq	r1, r0, r1, lsl #6
  cc:	0300050c 	movweq	r0, #1292	; 0x50c
  d0:	3b0b3a0e 	blcc	2ce910 <startup-0x1fd316f0>
  d4:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
  d8:	00180213 	andseq	r0, r8, r3, lsl r2
  dc:	012e0d00 			; <UNDEFINED> instruction: 0x012e0d00
  e0:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
  e4:	0b3b0b3a 	bleq	ec2dd4 <startup-0x1f13d22c>
  e8:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
  ec:	06120111 			; <UNDEFINED> instruction: 0x06120111
  f0:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
  f4:	00130119 	andseq	r0, r3, r9, lsl r1
  f8:	002e0e00 	eoreq	r0, lr, r0, lsl #28
  fc:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 100:	0b3b0b3a 	bleq	ec2df0 <startup-0x1f13d210>
 104:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 108:	06120111 			; <UNDEFINED> instruction: 0x06120111
 10c:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 110:	00000019 	andeq	r0, r0, r9, lsl r0
 114:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
 118:	030b130e 	movweq	r1, #45838	; 0xb30e
 11c:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
 120:	10011117 	andne	r1, r1, r7, lsl r1
 124:	02000017 	andeq	r0, r0, #23, 0
 128:	0b0b0024 	bleq	2c01c0 <startup-0x1fd3fe40>
 12c:	0e030b3e 	vmoveq.16	d3[0], r0
 130:	01030000 	mrseq	r0, (UNDEF: 3)
 134:	01134901 	tsteq	r3, r1, lsl #18
 138:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
 13c:	13490021 	movtne	r0, #36897	; 0x9021
 140:	0000052f 	andeq	r0, r0, pc, lsr #10
 144:	49003505 	stmdbmi	r0, {r0, r2, r8, sl, ip, sp}
 148:	06000013 			; <UNDEFINED> instruction: 0x06000013
 14c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 150:	0b3b0b3a 	bleq	ec2e40 <startup-0x1f13d1c0>
 154:	13490b39 	movtne	r0, #39737	; 0x9b39
 158:	00001802 	andeq	r1, r0, r2, lsl #16
 15c:	03011307 	movweq	r1, #4871	; 0x1307
 160:	3a0b0b0e 	bcc	2c2da0 <startup-0x1fd3d260>
 164:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 168:	0013010b 	andseq	r0, r3, fp, lsl #2
 16c:	000d0800 	andeq	r0, sp, r0, lsl #16
 170:	0b3a0803 	bleq	e82184 <startup-0x1f17de7c>
 174:	0b390b3b 	bleq	e42e68 <startup-0x1f1bd198>
 178:	0b381349 	bleq	e04ea4 <startup-0x1f1fb15c>
 17c:	16090000 	strne	r0, [r9], -r0
 180:	3a0e0300 	bcc	380d88 <startup-0x1fc7f278>
 184:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 188:	0013490b 	andseq	r4, r3, fp, lsl #18
 18c:	000d0a00 	andeq	r0, sp, r0, lsl #20
 190:	0b3a0e03 	bleq	e839a4 <startup-0x1f17c65c>
 194:	0b390b3b 	bleq	e42e88 <startup-0x1f1bd178>
 198:	0b381349 	bleq	e04ec4 <startup-0x1f1fb13c>
 19c:	240b0000 	strcs	r0, [fp], #-0
 1a0:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 1a4:	0008030b 	andeq	r0, r8, fp, lsl #6
 1a8:	00210c00 	eoreq	r0, r1, r0, lsl #24
 1ac:	0b2f1349 	bleq	bc4ed8 <startup-0x1f43b128>
 1b0:	0f0d0000 	svceq	0x000d0000
 1b4:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
 1b8:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
 1bc:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
 1c0:	00001301 	andeq	r1, r0, r1, lsl #6
 1c4:	4900050f 	stmdbmi	r0, {r0, r1, r2, r3, r8, sl}
 1c8:	10000013 	andne	r0, r0, r3, lsl r0
 1cc:	0b0b0113 	bleq	2c0620 <startup-0x1fd3f9e0>
 1d0:	0b3b0b3a 	bleq	ec2ec0 <startup-0x1f13d140>
 1d4:	13010b39 	movwne	r0, #6969	; 0x1b39
 1d8:	34110000 	ldrcc	r0, [r1], #-0
 1dc:	3a0e0300 	bcc	380de4 <startup-0x1fc7f21c>
 1e0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 1e4:	3f13490b 	svccc	0x0013490b
 1e8:	00180219 	andseq	r0, r8, r9, lsl r2
 1ec:	012e1200 			; <UNDEFINED> instruction: 0x012e1200
 1f0:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 1f4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 1f8:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 1fc:	06120111 			; <UNDEFINED> instruction: 0x06120111
 200:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 204:	00130119 	andseq	r0, r3, r9, lsl r1
 208:	00051300 	andeq	r1, r5, r0, lsl #6
 20c:	0b3a0803 	bleq	e82220 <startup-0x1f17dde0>
 210:	0b39053b 	bleq	e41704 <startup-0x1f1be8fc>
 214:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 218:	2e140000 	cdpcs	0, 1, cr0, cr4, cr0, {0}
 21c:	03193f01 	tsteq	r9, #1, 30
 220:	3b0b3a0e 	blcc	2cea60 <startup-0x1fd315a0>
 224:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
 228:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 22c:	96184006 	ldrls	r4, [r8], -r6
 230:	13011942 	movwne	r1, #6466	; 0x1942
 234:	05150000 	ldreq	r0, [r5, #-0]
 238:	3a0e0300 	bcc	380e40 <startup-0x1fc7f1c0>
 23c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 240:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 244:	16000018 			; <UNDEFINED> instruction: 0x16000018
 248:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 24c:	0b3a0e03 	bleq	e83a60 <startup-0x1f17c5a0>
 250:	0b390b3b 	bleq	e42f44 <startup-0x1f1bd0bc>
 254:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
 258:	00001301 	andeq	r1, r0, r1, lsl #6
 25c:	00001817 	andeq	r1, r0, r7, lsl r8
 260:	010b1800 	tsteq	fp, r0, lsl #16
 264:	06120111 			; <UNDEFINED> instruction: 0x06120111
 268:	00001301 	andeq	r1, r0, r1, lsl #6
 26c:	03003419 	movweq	r3, #1049	; 0x419
 270:	3b0b3a08 	blcc	2cea98 <startup-0x1fd31568>
 274:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 278:	00180213 	andseq	r0, r8, r3, lsl r2
 27c:	010b1a00 	tsteq	fp, r0, lsl #20
 280:	06120111 			; <UNDEFINED> instruction: 0x06120111
 284:	2e1b0000 	cdpcs	0, 1, cr0, cr11, cr0, {0}
 288:	03193f01 	tsteq	r9, #1, 30
 28c:	3b0b3a0e 	blcc	2ceacc <startup-0x1fd31534>
 290:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
 294:	00193c13 	andseq	r3, r9, r3, lsl ip
 298:	00051c00 	andeq	r1, r5, r0, lsl #24
 29c:	0b3a0803 	bleq	e822b0 <startup-0x1f17dd50>
 2a0:	0b390b3b 	bleq	e42f94 <startup-0x1f1bd06c>
 2a4:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 2a8:	2e1d0000 	cdpcs	0, 1, cr0, cr13, cr0, {0}
 2ac:	03193f00 	tsteq	r9, #0, 30
 2b0:	3b0b3a0e 	blcc	2ceaf0 <startup-0x1fd31510>
 2b4:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
 2b8:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 2bc:	97184006 	ldrls	r4, [r8, -r6]
 2c0:	00001942 	andeq	r1, r0, r2, asr #18
 2c4:	03012e1e 	movweq	r2, #7710	; 0x1e1e
 2c8:	3b0b3a0e 	blcc	2ceb08 <startup-0x1fd314f8>
 2cc:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
 2d0:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 2d4:	97184006 	ldrls	r4, [r8, -r6]
 2d8:	13011942 	movwne	r1, #6466	; 0x1942
 2dc:	2e1f0000 	cdpcs	0, 1, cr0, cr15, cr0, {0}
 2e0:	03193f01 	tsteq	r9, #1, 30
 2e4:	3b0b3a0e 	blcc	2ceb24 <startup-0x1fd314dc>
 2e8:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
 2ec:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 2f0:	97184006 	ldrls	r4, [r8, -r6]
 2f4:	13011942 	movwne	r1, #6466	; 0x1942
 2f8:	01000000 	mrseq	r0, (UNDEF: 0)
 2fc:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 300:	0e030b13 	vmoveq.32	d3[0], r0
 304:	01110e1b 	tsteq	r1, fp, lsl lr
 308:	17100612 			; <UNDEFINED> instruction: 0x17100612
 30c:	24020000 	strcs	r0, [r2], #-0
 310:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 314:	000e030b 	andeq	r0, lr, fp, lsl #6
 318:	012e0300 			; <UNDEFINED> instruction: 0x012e0300
 31c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 320:	0b3b0b3a 	bleq	ec3010 <startup-0x1f13cff0>
 324:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 328:	06120111 			; <UNDEFINED> instruction: 0x06120111
 32c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 330:	00130119 	andseq	r0, r3, r9, lsl r1
 334:	00050400 	andeq	r0, r5, r0, lsl #8
 338:	0b3a0803 	bleq	e8234c <startup-0x1f17dcb4>
 33c:	0b390b3b 	bleq	e43030 <startup-0x1f1bcfd0>
 340:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 344:	2e050000 	cdpcs	0, 0, cr0, cr5, cr0, {0}
 348:	03193f01 	tsteq	r9, #1, 30
 34c:	3b0b3a0e 	blcc	2ceb8c <startup-0x1fd31474>
 350:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
 354:	11134919 	tstne	r3, r9, lsl r9
 358:	40061201 	andmi	r1, r6, r1, lsl #4
 35c:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 360:	00001301 	andeq	r1, r0, r1, lsl #6
 364:	03003406 	movweq	r3, #1030	; 0x406
 368:	3b0b3a0e 	blcc	2ceba8 <startup-0x1fd31458>
 36c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 370:	00180213 	andseq	r0, r8, r3, lsl r2
 374:	00340700 	eorseq	r0, r4, r0, lsl #14
 378:	0b3a0803 	bleq	e8238c <startup-0x1f17dc74>
 37c:	0b390b3b 	bleq	e43070 <startup-0x1f1bcf90>
 380:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 384:	01080000 	mrseq	r0, (UNDEF: 8)
 388:	01134901 	tsteq	r3, r1, lsl #18
 38c:	09000013 	stmdbeq	r0, {r0, r1, r4}
 390:	13490021 	movtne	r0, #36897	; 0x9021
 394:	00000b2f 	andeq	r0, r0, pc, lsr #22
 398:	0b00240a 	bleq	93c8 <startup-0x1fff6c38>
 39c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 3a0:	0b000008 	bleq	3c8 <startup-0x1ffffc38>
 3a4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 3a8:	0b3a0e03 	bleq	e83bbc <startup-0x1f17c444>
 3ac:	0b390b3b 	bleq	e430a0 <startup-0x1f1bcf60>
 3b0:	01111349 	tsteq	r1, r9, asr #6
 3b4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 3b8:	01194297 			; <UNDEFINED> instruction: 0x01194297
 3bc:	0c000013 	stceq	0, cr0, [r0], {19}
 3c0:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 3c4:	0b3a0e03 	bleq	e83bd8 <startup-0x1f17c428>
 3c8:	0b390b3b 	bleq	e430bc <startup-0x1f1bcf44>
 3cc:	01111927 	tsteq	r1, r7, lsr #18
 3d0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 3d4:	00194297 	mulseq	r9, r7, r2
 3d8:	11010000 	mrsne	r0, (UNDEF: 1)
 3dc:	130e2501 	movwne	r2, #58625	; 0xe501
 3e0:	1b0e030b 	blne	381014 <startup-0x1fc7efec>
 3e4:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
 3e8:	00171006 	andseq	r1, r7, r6
 3ec:	00240200 	eoreq	r0, r4, r0, lsl #4
 3f0:	0b3e0b0b 	bleq	f83024 <startup-0x1f07cfdc>
 3f4:	00000e03 	andeq	r0, r0, r3, lsl #28
 3f8:	3f012e03 	svccc	0x00012e03
 3fc:	3a0e0319 	bcc	381068 <startup-0x1fc7ef98>
 400:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 404:	1119270b 	tstne	r9, fp, lsl #14
 408:	40061201 	andmi	r1, r6, r1, lsl #4
 40c:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 410:	00001301 	andeq	r1, r0, r1, lsl #6
 414:	03000504 	movweq	r0, #1284	; 0x504
 418:	3b0b3a08 	blcc	2cec40 <startup-0x1fd313c0>
 41c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 420:	00180213 	andseq	r0, r8, r3, lsl r2
 424:	012e0500 			; <UNDEFINED> instruction: 0x012e0500
 428:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 42c:	0b3b0b3a 	bleq	ec311c <startup-0x1f13cee4>
 430:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 434:	06120111 			; <UNDEFINED> instruction: 0x06120111
 438:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 43c:	00130119 	andseq	r0, r3, r9, lsl r1
 440:	002e0600 	eoreq	r0, lr, r0, lsl #12
 444:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 448:	0b3b0b3a 	bleq	ec3138 <startup-0x1f13cec8>
 44c:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 450:	06120111 			; <UNDEFINED> instruction: 0x06120111
 454:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 458:	00000019 	andeq	r0, r0, r9, lsl r0
 45c:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
 460:	030b130e 	movweq	r1, #45838	; 0xb30e
 464:	110e1b0e 	tstne	lr, lr, lsl #22
 468:	10061201 	andne	r1, r6, r1, lsl #4
 46c:	02000017 	andeq	r0, r0, #23, 0
 470:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
 474:	0b3b0b3a 	bleq	ec3164 <startup-0x1f13ce9c>
 478:	13490b39 	movtne	r0, #39737	; 0x9b39
 47c:	24030000 	strcs	r0, [r3], #-0
 480:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 484:	000e030b 	andeq	r0, lr, fp, lsl #6
 488:	01010400 	tsteq	r1, r0, lsl #8
 48c:	13011349 	movwne	r1, #4937	; 0x1349
 490:	21050000 	mrscs	r0, (UNDEF: 5)
 494:	2f134900 	svccs	0x00134900
 498:	06000005 	streq	r0, [r0], -r5
 49c:	13490035 	movtne	r0, #36917	; 0x9035
 4a0:	34070000 	strcc	r0, [r7], #-0
 4a4:	3a0e0300 	bcc	3810ac <startup-0x1fc7ef54>
 4a8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 4ac:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 4b0:	08000018 	stmdaeq	r0, {r3, r4}
 4b4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 4b8:	0b3a0e03 	bleq	e83ccc <startup-0x1f17c334>
 4bc:	0b390b3b 	bleq	e431b0 <startup-0x1f1bce50>
 4c0:	01111927 	tsteq	r1, r7, lsr #18
 4c4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 4c8:	01194296 			; <UNDEFINED> instruction: 0x01194296
 4cc:	09000013 	stmdbeq	r0, {r0, r1, r4}
 4d0:	08030034 	stmdaeq	r3, {r2, r4, r5}
 4d4:	0b3b0b3a 	bleq	ec31c4 <startup-0x1f13ce3c>
 4d8:	13490b39 	movtne	r0, #39737	; 0x9b39
 4dc:	00001802 	andeq	r1, r0, r2, lsl #16
 4e0:	3f012e0a 	svccc	0x00012e0a
 4e4:	3a0e0319 	bcc	381150 <startup-0x1fc7eeb0>
 4e8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 4ec:	1119270b 	tstne	r9, fp, lsl #14
 4f0:	40061201 	andmi	r1, r6, r1, lsl #4
 4f4:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 4f8:	00001301 	andeq	r1, r0, r1, lsl #6
 4fc:	0300050b 	movweq	r0, #1291	; 0x50b
 500:	3b0b3a08 	blcc	2ced28 <startup-0x1fd312d8>
 504:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 508:	00180213 	andseq	r0, r8, r3, lsl r2
 50c:	00240c00 	eoreq	r0, r4, r0, lsl #24
 510:	0b3e0b0b 	bleq	f83144 <startup-0x1f07cebc>
 514:	00000803 	andeq	r0, r0, r3, lsl #16
 518:	3f012e0d 	svccc	0x00012e0d
 51c:	3a0e0319 	bcc	381188 <startup-0x1fc7ee78>
 520:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 524:	1201110b 	andne	r1, r1, #-1073741822	; 0xc0000002
 528:	97184006 	ldrls	r4, [r8, -r6]
 52c:	13011942 	movwne	r1, #6466	; 0x1942
 530:	0b0e0000 	bleq	380538 <startup-0x1fc7fac8>
 534:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
 538:	0f000006 	svceq	0x00000006
 53c:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 540:	0b3b0b3a 	bleq	ec3230 <startup-0x1f13cdd0>
 544:	13490b39 	movtne	r0, #39737	; 0x9b39
 548:	00001802 	andeq	r1, r0, r2, lsl #16
 54c:	3f012e10 	svccc	0x00012e10
 550:	3a0e0319 	bcc	3811bc <startup-0x1fc7ee44>
 554:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 558:	3c13490b 			; <UNDEFINED> instruction: 0x3c13490b
 55c:	11000019 	tstne	r0, r9, lsl r0
 560:	00000018 	andeq	r0, r0, r8, lsl r0
 564:	3f012e12 	svccc	0x00012e12
 568:	3a0e0319 	bcc	3811d4 <startup-0x1fc7ee2c>
 56c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 570:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 574:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 578:	96184006 	ldrls	r4, [r8], -r6
 57c:	13011942 	movwne	r1, #6466	; 0x1942
 580:	2e130000 	cdpcs	0, 1, cr0, cr3, cr0, {0}
 584:	03193f01 	tsteq	r9, #1, 30
 588:	3b0b3a0e 	blcc	2cedc8 <startup-0x1fd31238>
 58c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 590:	01193c13 	tsteq	r9, r3, lsl ip
 594:	14000013 	strne	r0, [r0], #-19	; 0xffffffed
 598:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 59c:	0b3a0e03 	bleq	e83db0 <startup-0x1f17c250>
 5a0:	0b390b3b 	bleq	e43294 <startup-0x1f1bcd6c>
 5a4:	01111927 	tsteq	r1, r7, lsr #18
 5a8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 5ac:	00194296 	mulseq	r9, r6, r2
 5b0:	11010000 	mrsne	r0, (UNDEF: 1)
 5b4:	130e2501 	movwne	r2, #58625	; 0xe501
 5b8:	1b0e030b 	blne	3811ec <startup-0x1fc7ee14>
 5bc:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
 5c0:	00171006 	andseq	r1, r7, r6
 5c4:	00240200 	eoreq	r0, r4, r0, lsl #4
 5c8:	0b3e0b0b 	bleq	f831fc <startup-0x1f07ce04>
 5cc:	00000e03 	andeq	r0, r0, r3, lsl #28
 5d0:	0b002403 	bleq	95e4 <startup-0x1fff6a1c>
 5d4:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 5d8:	04000008 	streq	r0, [r0], #-8
 5dc:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
 5e0:	0b3b0b3a 	bleq	ec32d0 <startup-0x1f13cd30>
 5e4:	13490b39 	movtne	r0, #39737	; 0x9b39
 5e8:	0f050000 	svceq	0x00050000
 5ec:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
 5f0:	06000013 			; <UNDEFINED> instruction: 0x06000013
 5f4:	0e030013 	mcreq	0, 0, r0, cr3, cr3, {0}
 5f8:	0000193c 	andeq	r1, r0, ip, lsr r9
 5fc:	03001607 	movweq	r1, #1543	; 0x607
 600:	3b0b3a0e 	blcc	2cee40 <startup-0x1fd311c0>
 604:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
 608:	08000013 	stmdaeq	r0, {r0, r1, r4}
 60c:	0b0b0117 	bleq	2c0a70 <startup-0x1fd3f590>
 610:	0b3b0b3a 	bleq	ec3300 <startup-0x1f13cd00>
 614:	13010b39 	movwne	r0, #6969	; 0x1b39
 618:	0d090000 	stceq	0, cr0, [r9, #-0]
 61c:	3a0e0300 	bcc	381224 <startup-0x1fc7eddc>
 620:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 624:	0013490b 	andseq	r4, r3, fp, lsl #18
 628:	01010a00 	tsteq	r1, r0, lsl #20
 62c:	13011349 	movwne	r1, #4937	; 0x1349
 630:	210b0000 	mrscs	r0, (UNDEF: 11)
 634:	2f134900 	svccs	0x00134900
 638:	0c00000b 	stceq	0, cr0, [r0], {11}
 63c:	0b0b0113 	bleq	2c0a90 <startup-0x1fd3f570>
 640:	0b3b0b3a 	bleq	ec3330 <startup-0x1f13ccd0>
 644:	13010b39 	movwne	r0, #6969	; 0x1b39
 648:	0d0d0000 	stceq	0, cr0, [sp, #-0]
 64c:	3a0e0300 	bcc	381254 <startup-0x1fc7edac>
 650:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 654:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 658:	0e00000b 	cdpeq	0, 0, cr0, cr0, cr11, {0}
 65c:	0b0b000f 	bleq	2c06a0 <startup-0x1fd3f960>
 660:	260f0000 	strcs	r0, [pc], -r0
 664:	00134900 	andseq	r4, r3, r0, lsl #18
 668:	01131000 	tsteq	r3, r0
 66c:	0b0b0e03 	bleq	2c3e80 <startup-0x1fd3c180>
 670:	0b3b0b3a 	bleq	ec3360 <startup-0x1f13cca0>
 674:	13010b39 	movwne	r0, #6969	; 0x1b39
 678:	0d110000 	ldceq	0, cr0, [r1, #-0]
 67c:	3a080300 	bcc	201284 <startup-0x1fdfed7c>
 680:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 684:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 688:	1200000b 	andne	r0, r0, #11, 0
 68c:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
 690:	0b3a050b 	bleq	e81ac4 <startup-0x1f17e53c>
 694:	0b390b3b 	bleq	e43388 <startup-0x1f1bcc78>
 698:	00001301 	andeq	r1, r0, r1, lsl #6
 69c:	03000d13 	movweq	r0, #3347	; 0xd13
 6a0:	3b0b3a0e 	blcc	2ceee0 <startup-0x1fd31120>
 6a4:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 6a8:	00053813 	andeq	r3, r5, r3, lsl r8
 6ac:	00151400 	andseq	r1, r5, r0, lsl #8
 6b0:	00001927 	andeq	r1, r0, r7, lsr #18
 6b4:	27011515 	smladcs	r1, r5, r5, r1
 6b8:	01134919 	tsteq	r3, r9, lsl r9
 6bc:	16000013 			; <UNDEFINED> instruction: 0x16000013
 6c0:	13490005 	movtne	r0, #36869	; 0x9005
 6c4:	13170000 	tstne	r7, #0, 0
 6c8:	0b0e0301 	bleq	3812d4 <startup-0x1fc7ed2c>
 6cc:	3b0b3a05 	blcc	2ceee8 <startup-0x1fd31118>
 6d0:	010b3905 	tsteq	fp, r5, lsl #18
 6d4:	18000013 	stmdane	r0, {r0, r1, r4}
 6d8:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 6dc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 6e0:	13490b39 	movtne	r0, #39737	; 0x9b39
 6e4:	00000b38 	andeq	r0, r0, r8, lsr fp
 6e8:	03000d19 	movweq	r0, #3353	; 0xd19
 6ec:	3b0b3a0e 	blcc	2cef2c <startup-0x1fd310d4>
 6f0:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
 6f4:	00053813 	andeq	r3, r5, r3, lsl r8
 6f8:	01131a00 	tsteq	r3, r0, lsl #20
 6fc:	0b0b0e03 	bleq	2c3f10 <startup-0x1fd3c0f0>
 700:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 704:	13010b39 	movwne	r0, #6969	; 0x1b39
 708:	131b0000 	tstne	fp, #0, 0
 70c:	3a0b0b01 	bcc	2c3318 <startup-0x1fd3cce8>
 710:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 714:	0013010b 	andseq	r0, r3, fp, lsl #2
 718:	01171c00 	tsteq	r7, r0, lsl #24
 71c:	0b3a0b0b 	bleq	e83350 <startup-0x1f17ccb0>
 720:	0b39053b 	bleq	e41c14 <startup-0x1f1be3ec>
 724:	00001301 	andeq	r1, r0, r1, lsl #6
 728:	03000d1d 	movweq	r0, #3357	; 0xd1d
 72c:	3b0b3a0e 	blcc	2cef6c <startup-0x1fd31094>
 730:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
 734:	1e000013 	mcrne	0, 0, r0, cr0, cr3, {0}
 738:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
 73c:	00001301 	andeq	r1, r0, r1, lsl #6
 740:	0300341f 	movweq	r3, #1055	; 0x41f
 744:	3b0b3a0e 	blcc	2cef84 <startup-0x1fd3107c>
 748:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
 74c:	3c193f13 	ldccc	15, cr3, [r9], {19}
 750:	20000019 	andcs	r0, r0, r9, lsl r0
 754:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 758:	0b3b0b3a 	bleq	ec3448 <startup-0x1f13cbb8>
 75c:	13490b39 	movtne	r0, #39737	; 0x9b39
 760:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 764:	2e210000 	cdpcs	0, 2, cr0, cr1, cr0, {0}
 768:	03193f01 	tsteq	r9, #1, 30
 76c:	3b0b3a0e 	blcc	2cefac <startup-0x1fd31054>
 770:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 774:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 778:	97184006 	ldrls	r4, [r8, -r6]
 77c:	13011942 	movwne	r1, #6466	; 0x1942
 780:	34220000 	strtcc	r0, [r2], #-0
 784:	3a0e0300 	bcc	38138c <startup-0x1fc7ec74>
 788:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 78c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 790:	23000018 	movwcs	r0, #24
 794:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 798:	0b3a0e03 	bleq	e83fac <startup-0x1f17c054>
 79c:	0b390b3b 	bleq	e43490 <startup-0x1f1bcb70>
 7a0:	01111927 	tsteq	r1, r7, lsr #18
 7a4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 7a8:	01194296 			; <UNDEFINED> instruction: 0x01194296
 7ac:	24000013 	strcs	r0, [r0], #-19	; 0xffffffed
 7b0:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 7b4:	0b3b0b3a 	bleq	ec34a4 <startup-0x1f13cb5c>
 7b8:	13490b39 	movtne	r0, #39737	; 0x9b39
 7bc:	00001802 	andeq	r1, r0, r2, lsl #16
 7c0:	3f002e25 	svccc	0x00002e25
 7c4:	3a0e0319 	bcc	381430 <startup-0x1fc7ebd0>
 7c8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 7cc:	1113490b 	tstne	r3, fp, lsl #18
 7d0:	40061201 	andmi	r1, r6, r1, lsl #4
 7d4:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 7d8:	2e260000 	cdpcs	0, 2, cr0, cr6, cr0, {0}
 7dc:	03193f01 	tsteq	r9, #1, 30
 7e0:	3b0b3a0e 	blcc	2cf020 <startup-0x1fd30fe0>
 7e4:	110b390b 	tstne	fp, fp, lsl #18
 7e8:	40061201 	andmi	r1, r6, r1, lsl #4
 7ec:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 7f0:	0b270000 	bleq	9c07f8 <startup-0x1f63f808>
 7f4:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
 7f8:	28000006 	stmdacs	r0, {r1, r2}
 7fc:	08030034 	stmdaeq	r3, {r2, r4, r5}
 800:	0b3b0b3a 	bleq	ec34f0 <startup-0x1f13cb10>
 804:	13490b39 	movtne	r0, #39737	; 0x9b39
 808:	00001802 	andeq	r1, r0, r2, lsl #16
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	0000001c 	andeq	r0, r0, ip, lsl r0
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	000002e6 	andeq	r0, r0, r6, ror #5
	...
  20:	00000024 	andeq	r0, r0, r4, lsr #32
  24:	02cb0002 	sbceq	r0, fp, #2, 0
  28:	00040000 	andeq	r0, r4, r0
  2c:	00000000 	andeq	r0, r0, r0
  30:	200002f8 	strdcs	r0, [r0], -r8
  34:	00000608 	andeq	r0, r0, r8, lsl #12
  38:	20000000 	andcs	r0, r0, r0
  3c:	0000000c 	andeq	r0, r0, ip
	...
  48:	0000001c 	andeq	r0, r0, ip, lsl r0
  4c:	09870002 	stmibeq	r7, {r1}
  50:	00040000 	andeq	r0, r4, r0
  54:	00000000 	andeq	r0, r0, r0
  58:	20000900 	andcs	r0, r0, r0, lsl #18
  5c:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
	...
  68:	0000001c 	andeq	r0, r0, ip, lsl r0
  6c:	0aab0002 	beq	feac007c <rear+0xdeabbe2c>
  70:	00040000 	andeq	r0, r4, r0
  74:	00000000 	andeq	r0, r0, r0
  78:	200009f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
  7c:	00000062 	andeq	r0, r0, r2, rrx
	...
  88:	0000001c 	andeq	r0, r0, ip, lsl r0
  8c:	0b4d0002 	bleq	134009c <startup-0x1ecbff64>
  90:	00040000 	andeq	r0, r4, r0
  94:	00000000 	andeq	r0, r0, r0
  98:	20000a54 	andcs	r0, r0, r4, asr sl
  9c:	00000524 	andeq	r0, r0, r4, lsr #10
	...
  a8:	0000001c 	andeq	r0, r0, ip, lsl r0
  ac:	0ed90002 	cdpeq	0, 13, cr0, cr9, cr2, {0}
  b0:	00040000 	andeq	r0, r4, r0
  b4:	00000000 	andeq	r0, r0, r0
  b8:	20000f78 	andcs	r0, r0, r8, ror pc
  bc:	0000013c 	andeq	r0, r0, ip, lsr r1
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
   4:	005c0003 	subseq	r0, ip, r3
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	2f010000 	svccs	0x00010000
  1c:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
  20:	6f672f73 	svcvs	0x00672f73
  24:	6d756c6c 	ldclvs	12, cr6, [r5, #-432]!	; 0xfffffe50
  28:	636f442f 	cmnvs	pc, #788529152	; 0x2f000000
  2c:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
  30:	6d2f7374 	stcvs	3, cr7, [pc, #-464]!	; fffffe68 <rear+0xdfffbc18>
  34:	616c706f 	cmnvs	ip, pc, rrx
  38:	61726f62 	cmnvs	r2, r2, ror #30
  3c:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
  40:	4d2f7265 	sfmmi	f7, 4, [pc, #-404]!	; fffffeb4 <rear+0xdfffbc64>
  44:	532d504f 			; <UNDEFINED> instruction: 0x532d504f
  48:	2f6c6570 	svccs	0x006c6570
  4c:	6b616e53 	blvs	185b9a0 <startup-0x1e7a4660>
  50:	61000065 	tstvs	r0, r5, rrx
  54:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
  58:	70736964 	rsbsvc	r6, r3, r4, ror #18
  5c:	2e79616c 	rpwcsez	f6, f1, #4.0
  60:	00010063 	andeq	r0, r1, r3, rrx
  64:	16050000 	strne	r0, [r5], -r0
  68:	10020500 	andne	r0, r2, r0, lsl #10
  6c:	15200000 	strne	r0, [r0, #-0]!
  70:	31300505 	teqcc	r0, r5, lsl #10
  74:	01053131 	tsteq	r5, r1, lsr r1
  78:	3f29052f 	svccc	0x0029052f
  7c:	05671505 	strbeq	r1, [r7, #-1285]!	; 0xfffffafb
  80:	2b05bb01 	blcs	16ec8c <startup-0x1fe91374>
  84:	67150577 			; <UNDEFINED> instruction: 0x67150577
  88:	054a2305 	strbeq	r2, [sl, #-773]	; 0xfffffcfb
  8c:	01058215 	tsteq	r5, r5, lsl r2
  90:	762c055a 			; <UNDEFINED> instruction: 0x762c055a
  94:	3d670505 	cfstr64cc	mvdx0, [r7, #-20]!	; 0xffffffec
  98:	5901053d 	stmdbpl	r1, {r0, r2, r3, r4, r5, r8, sl}
  9c:	054c2a05 	strbeq	r2, [ip, #-2565]	; 0xfffff5fb
  a0:	3d3d6705 	ldccc	7, cr6, [sp, #-20]!	; 0xffffffec
  a4:	05590105 	ldrbeq	r0, [r9, #-261]	; 0xfffffefb
  a8:	05054c30 	streq	r4, [r5, #-3120]	; 0xfffff3d0
  ac:	16053d67 	strne	r3, [r5], -r7, ror #26
  b0:	3d050520 	cfstr32cc	mvfx0, [r5, #-128]	; 0xffffff80
  b4:	3d01052f 	cfstr32cc	mvfx0, [r1, #-188]	; 0xffffff44
  b8:	05682a05 	strbeq	r2, [r8, #-2565]!	; 0xfffff5fb
  bc:	2f3d3d05 	svccs	0x003d3d05
  c0:	052f1305 	streq	r1, [pc, #-773]!	; fffffdc3 <rear+0xdfffbb73>
  c4:	0505200a 	streq	r2, [r5, #-10]
  c8:	3d0c053d 	cfstr32cc	mvfx0, [ip, #-244]	; 0xffffff0c
  cc:	052f0105 	streq	r0, [pc, #-261]!	; ffffffcf <rear+0xdfffbd7f>
  d0:	05057626 	streq	r7, [r5, #-1574]	; 0xfffff9da
  d4:	201a053d 	andscs	r0, sl, sp, lsr r5
  d8:	3d2f0505 	cfstr32cc	mvfx0, [pc, #-20]!	; cc <startup-0x1fffff34>
  dc:	053d1405 	ldreq	r1, [sp, #-1029]!	; 0xfffffbfb
  e0:	1a055905 	bne	1564fc <startup-0x1fea9b04>
  e4:	2f0c0520 	svccs	0x000c0520
  e8:	052f0105 	streq	r0, [pc, #-261]!	; ffffffeb <rear+0xdfffbd9b>
  ec:	05058424 	streq	r8, [r5, #-1060]	; 0xfffffbdc
  f0:	201a053d 	andscs	r0, sl, sp, lsr r5
  f4:	3d2f0505 	cfstr32cc	mvfx0, [pc, #-20]!	; e8 <startup-0x1fffff18>
  f8:	053d1405 	ldreq	r1, [sp, #-1029]!	; 0xfffffbfb
  fc:	1a055905 	bne	156518 <startup-0x1fea9ae8>
 100:	2f0c0520 	svccs	0x000c0520
 104:	052f0105 	streq	r0, [pc, #-261]!	; 7 <startup-0x1ffffff9>
 108:	0a058415 	beq	161164 <startup-0x1fe9ee9c>
 10c:	000c052f 	andeq	r0, ip, pc, lsr #10
 110:	20010402 	andcs	r0, r1, r2, lsl #8
 114:	02002005 	andeq	r2, r0, #5, 0
 118:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 11c:	0402000a 	streq	r0, [r2], #-10
 120:	05053c01 	streq	r3, [r5, #-3073]	; 0xfffff3ff
 124:	053d3d2f 	ldreq	r3, [sp, #-3375]!	; 0xfffff2d1
 128:	13053d01 	movwne	r3, #23809	; 0x5d01
 12c:	2f0a053e 	svccs	0x000a053e
 130:	02000c05 	andeq	r0, r0, #1280	; 0x500
 134:	05200104 	streq	r0, [r0, #-260]!	; 0xfffffefc
 138:	04020020 	streq	r0, [r2], #-32	; 0xffffffe0
 13c:	0a053c01 	beq	14f148 <startup-0x1feb0eb8>
 140:	01040200 	mrseq	r0, R12_usr
 144:	2f05053c 	svccs	0x0005053c
 148:	01053d3d 	tsteq	r5, sp, lsr sp
 14c:	3e17053d 	mrccc	5, 0, r0, cr7, cr13, {1}
 150:	052f0a05 	streq	r0, [pc, #-2565]!	; fffff753 <rear+0xdfffb503>
 154:	0402000c 	streq	r0, [r2], #-12
 158:	20052001 	andcs	r2, r5, r1
 15c:	01040200 	mrseq	r0, R12_usr
 160:	000a053c 	andeq	r0, sl, ip, lsr r5
 164:	3c010402 	cfstrscc	mvf0, [r1], {2}
 168:	3d2f0505 	cfstr32cc	mvfx0, [pc, #-20]!	; 15c <startup-0x1ffffea4>
 16c:	3d01053d 	cfstr32cc	mvfx0, [r1, #-244]	; 0xffffff0c
 170:	053e1605 	ldreq	r1, [lr, #-1541]!	; 0xfffff9fb
 174:	0c052f0a 	stceq	15, cr2, [r5], {10}
 178:	01040200 	mrseq	r0, R12_usr
 17c:	00200520 	eoreq	r0, r0, r0, lsr #10
 180:	3c010402 	cfstrscc	mvf0, [r1], {2}
 184:	02000a05 	andeq	r0, r0, #20480	; 0x5000
 188:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 18c:	3d3d2f05 	ldccc	15, cr2, [sp, #-20]!	; 0xffffffec
 190:	053d0105 	ldreq	r0, [sp, #-261]!	; 0xfffffefb
 194:	05053e27 	streq	r3, [r5, #-3623]	; 0xfffff1d9
 198:	05593d68 	ldrbeq	r3, [r9, #-3432]	; 0xfffff298
 19c:	20053d01 	andcs	r3, r5, r1, lsl #26
 1a0:	5a07054c 	bpl	1c16d8 <startup-0x1fe3e928>
 1a4:	053d1805 	ldreq	r1, [sp, #-2053]!	; 0xfffff7fb
 1a8:	13052e11 	movwne	r2, #24081	; 0x5e11
 1ac:	2e110559 	mrccs	5, 0, r0, cr1, cr9, {2}
 1b0:	9f4c0505 	svcls	0x004c0505
 1b4:	023d0105 	eorseq	r0, sp, #1073741825	; 0x40000001
 1b8:	01010004 	tsteq	r1, r4
 1bc:	0000045a 	andeq	r0, r0, sl, asr r4
 1c0:	008d0003 	addeq	r0, sp, r3
 1c4:	01020000 	mrseq	r0, (UNDEF: 2)
 1c8:	000d0efb 	strdeq	r0, [sp], -fp
 1cc:	01010101 	tsteq	r1, r1, lsl #2
 1d0:	01000000 	mrseq	r0, (UNDEF: 0)
 1d4:	2f010000 	svccs	0x00010000
 1d8:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
 1dc:	6f672f73 	svcvs	0x00672f73
 1e0:	6d756c6c 	ldclvs	12, cr6, [r5, #-432]!	; 0xfffffe50
 1e4:	636f442f 	cmnvs	pc, #788529152	; 0x2f000000
 1e8:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
 1ec:	6d2f7374 	stcvs	3, cr7, [pc, #-464]!	; 24 <startup-0x1fffffdc>
 1f0:	616c706f 	cmnvs	ip, pc, rrx
 1f4:	61726f62 	cmnvs	r2, r2, ror #30
 1f8:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 1fc:	4d2f7265 	sfmmi	f7, 4, [pc, #-404]!	; 70 <startup-0x1fffff90>
 200:	532d504f 			; <UNDEFINED> instruction: 0x532d504f
 204:	2f6c6570 	svccs	0x006c6570
 208:	6b616e53 	blvs	185bb5c <startup-0x1e7a44a4>
 20c:	73000065 	movwvc	r0, #101	; 0x65
 210:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
 214:	632e7075 			; <UNDEFINED> instruction: 0x632e7075
 218:	00000100 	andeq	r0, r0, r0, lsl #2
 21c:	6d6f6567 	cfstr64vs	mvdx6, [pc, #-412]!	; 88 <startup-0x1fffff78>
 220:	69727465 	ldmdbvs	r2!, {r0, r2, r5, r6, sl, ip, sp, lr}^
 224:	6a626f63 	bvs	189bfb8 <startup-0x1e764048>
 228:	2e746365 	cdpcs	3, 7, cr6, cr4, cr5, {3}
 22c:	00010068 	andeq	r0, r1, r8, rrx
 230:	61726700 	cmnvs	r2, r0, lsl #14
 234:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 238:	70736964 	rsbsvc	r6, r3, r4, ror #18
 23c:	2e79616c 	rpwcsez	f6, f1, #4.0
 240:	00010068 	andeq	r0, r1, r8, rrx
 244:	616d6900 	cmnvs	sp, r0, lsl #18
 248:	782e6567 	stmdavc	lr!, {r0, r1, r2, r5, r6, r8, sl, sp, lr}
 24c:	01006d62 	tsteq	r0, r2, ror #26
 250:	05000000 	streq	r0, [r0, #-0]
 254:	02050001 	andeq	r0, r5, #1, 0
 258:	20000000 	andcs	r0, r0, r0
 25c:	13011803 	movwne	r1, #6147	; 0x1803
 260:	212f2121 			; <UNDEFINED> instruction: 0x212f2121
 264:	01000302 	tsteq	r0, r2, lsl #6
 268:	00390501 	eorseq	r0, r9, r1, lsl #10
 26c:	02f80205 	rscseq	r0, r8, #1342177280	; 0x50000000
 270:	1f032000 	svcne	0x00032000
 274:	670d0501 	strvs	r0, [sp, -r1, lsl #10]
 278:	3d01053d 	cfstr32cc	mvfx0, [r1, #-244]	; 0xffffff0c
 27c:	054c1c05 	strbeq	r1, [ip, #-3077]	; 0xfffff3fb
 280:	05054b0e 	streq	r4, [r5, #-2830]	; 0xfffff4f2
 284:	0010052e 	andseq	r0, r0, lr, lsr #10
 288:	21030402 	tstcs	r3, r2, lsl #8
 28c:	02001c05 	andeq	r1, r0, #1280	; 0x500
 290:	052e0304 	streq	r0, [lr, #-772]!	; 0xfffffcfc
 294:	04020020 	streq	r0, [r2], #-32	; 0xffffffe0
 298:	1e057403 	cdpne	4, 0, cr7, cr5, cr3, {0}
 29c:	03040200 	movweq	r0, #16896	; 0x4200
 2a0:	0009052e 	andeq	r0, r9, lr, lsr #10
 2a4:	20030402 	andcs	r0, r3, r2, lsl #8
 2a8:	02002805 	andeq	r2, r0, #327680	; 0x50000
 2ac:	05200304 	streq	r0, [r0, #-772]!	; 0xfffffcfc
 2b0:	04020034 	streq	r0, [r2], #-52	; 0xffffffcc
 2b4:	38052e03 	stmdacc	r5, {r0, r1, r9, sl, fp, sp}
 2b8:	03040200 	movweq	r0, #16896	; 0x4200
 2bc:	00360574 	eorseq	r0, r6, r4, ror r5
 2c0:	2e030402 	cdpcs	4, 0, cr0, cr3, cr2, {0}
 2c4:	02000905 	andeq	r0, r0, #81920	; 0x14000
 2c8:	05200304 	streq	r0, [r0, #-772]!	; 0xfffffcfc
 2cc:	0402002b 	streq	r0, [r2], #-43	; 0xffffffd5
 2d0:	18053b03 	stmdane	r5, {r0, r1, r8, r9, fp, ip, sp}
 2d4:	01040200 	mrseq	r0, R12_usr
 2d8:	001d053c 	andseq	r0, sp, ip, lsr r5
 2dc:	2e010402 	cdpcs	4, 0, cr0, cr1, cr2, {0}
 2e0:	02000505 	andeq	r0, r0, #20971520	; 0x1400000
 2e4:	05200104 	streq	r0, [r0, #-260]!	; 0xfffffefc
 2e8:	1d053f01 	stcne	15, cr3, [r5, #-4]
 2ec:	4b0e055a 	blmi	38185c <startup-0x1fc7e7a4>
 2f0:	052e0505 	streq	r0, [lr, #-1285]!	; 0xfffffafb
 2f4:	04020010 	streq	r0, [r2], #-16
 2f8:	1c052103 	stfnes	f2, [r5], {3}
 2fc:	03040200 	movweq	r0, #16896	; 0x4200
 300:	0020052e 	eoreq	r0, r0, lr, lsr #10
 304:	74030402 	strvc	r0, [r3], #-1026	; 0xfffffbfe
 308:	02001e05 	andeq	r1, r0, #80	; 0x50
 30c:	052e0304 	streq	r0, [lr, #-772]!	; 0xfffffcfc
 310:	04020009 	streq	r0, [r2], #-9
 314:	28052003 	stmdacs	r5, {r0, r1, sp}
 318:	03040200 	movweq	r0, #16896	; 0x4200
 31c:	00340520 	eorseq	r0, r4, r0, lsr #10
 320:	2e030402 	cdpcs	4, 0, cr0, cr3, cr2, {0}
 324:	02003805 	andeq	r3, r0, #327680	; 0x50000
 328:	05740304 	ldrbeq	r0, [r4, #-772]!	; 0xfffffcfc
 32c:	04020036 	streq	r0, [r2], #-54	; 0xffffffca
 330:	09052e03 	stmdbeq	r5, {r0, r1, r9, sl, fp, sp}
 334:	03040200 	movweq	r0, #16896	; 0x4200
 338:	002d0520 	eoreq	r0, sp, r0, lsr #10
 33c:	3b030402 	blcc	c134c <startup-0x1ff3ecb4>
 340:	02001a05 	andeq	r1, r0, #20480	; 0x5000
 344:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 348:	0402001f 	streq	r0, [r2], #-31	; 0xffffffe1
 34c:	05052e01 	streq	r2, [r5, #-3585]	; 0xfffff1ff
 350:	01040200 	mrseq	r0, R12_usr
 354:	3f010520 	svccc	0x00010520
 358:	055a1c05 	ldrbeq	r1, [sl, #-3077]	; 0xfffff3fb
 35c:	1a054d10 	bne	1537a4 <startup-0x1feac85c>
 360:	2e17052e 	cfmul64cs	mvdx0, mvdx7, mvdx14
 364:	05200d05 	streq	r0, [r0, #-3333]!	; 0xfffff2fb
 368:	1a052f10 	bne	14bfb0 <startup-0x1feb4050>
 36c:	2e17052e 	cfmul64cs	mvdx0, mvdx7, mvdx14
 370:	05200d05 	streq	r0, [r0, #-3333]!	; 0xfffff2fb
 374:	1205320a 	andne	r3, r5, #-1610612736	; 0xa0000000
 378:	2e10052e 	cfmul64cs	mvdx0, mvdx0, mvdx14
 37c:	05200705 	streq	r0, [r0, #-1797]!	; 0xfffff8fb
 380:	05592f11 	ldrbeq	r2, [r9, #-3857]	; 0xfffff0ef
 384:	12053f0a 	andne	r3, r5, #10, 30	; 0x28
 388:	2e10052e 	cfmul64cs	mvdx0, mvdx0, mvdx14
 38c:	05200705 	streq	r0, [r0, #-1797]!	; 0xfffff8fb
 390:	10052f11 	andne	r2, r5, r1, lsl pc
 394:	3f0a0559 	svccc	0x000a0559
 398:	052e1205 	streq	r1, [lr, #-517]!	; 0xfffffdfb
 39c:	07052e10 	smladeq	r5, r0, lr, r2
 3a0:	2f110520 	svccs	0x00110520
 3a4:	3f0a0559 	svccc	0x000a0559
 3a8:	052e1205 	streq	r1, [lr, #-517]!	; 0xfffffdfb
 3ac:	07052e10 	smladeq	r5, r0, lr, r2
 3b0:	2f110520 	svccs	0x00110520
 3b4:	3e050559 	cfrshl32cc	mvfx5, mvfx9, r0
 3b8:	054b0105 	strbeq	r0, [fp, #-261]	; 0xfffffefb
 3bc:	00c5034f 	sbceq	r0, r5, pc, asr #6
 3c0:	750e054a 	strvc	r0, [lr, #-1354]	; 0xfffffab6
 3c4:	054b0f05 	strbeq	r0, [fp, #-3845]	; 0xfffff0fb
 3c8:	01054b0d 	tsteq	r5, sp, lsl #22
 3cc:	4c2a053d 	cfstr32mi	mvfx0, [sl], #-244	; 0xffffff0c
 3d0:	05690905 	strbeq	r0, [r9, #-2309]!	; 0xfffff6fb
 3d4:	07052e15 	smladeq	r5, r5, lr, r2
 3d8:	2f1b053c 	svccs	0x001b053c
 3dc:	052e2205 	streq	r2, [lr, #-517]!	; 0xfffffdfb
 3e0:	1b052e18 	blne	14bc48 <startup-0x1feb43b8>
 3e4:	2e220530 	mcrcs	5, 1, r0, cr2, cr0, {1}
 3e8:	052e1805 	streq	r1, [lr, #-2053]!	; 0xfffff7fb
 3ec:	0505310c 	streq	r3, [r5, #-268]	; 0xfffffef4
 3f0:	2110052e 	tstcs	r0, lr, lsr #10
 3f4:	052e0905 	streq	r0, [lr, #-2309]!	; 0xfffff6fb
 3f8:	2b052123 	blcs	14888c <startup-0x1feb7774>
 3fc:	3c3b052e 	cfldr32cc	mvfx0, [fp], #-184	; 0xffffff48
 400:	052e2905 	streq	r2, [lr, #-2309]!	; 0xfffff6fb
 404:	1405201b 	strne	r2, [r5], #-27	; 0xffffffe5
 408:	2e0d054b 	cfsh32cs	mvfx0, mvfx13, #43
 40c:	05211505 	streq	r1, [r1, #-1285]!	; 0xfffffafb
 410:	1d058214 	sfmne	f0, 1, [r5, #-80]	; 0xffffffb0
 414:	2e210521 	cfsh64cs	mvdx0, mvdx1, #17
 418:	052e2505 	streq	r2, [lr, #-1285]!	; 0xfffffafb
 41c:	15052e29 	strne	r2, [r5, #-3625]	; 0xfffff1d7
 420:	20300520 	eorscs	r0, r0, r0, lsr #10
 424:	053c3405 	ldreq	r3, [ip, #-1029]!	; 0xfffffbfb
 428:	21052015 	tstcs	r5, r5, lsl r0
 42c:	02040200 	andeq	r0, r4, #0, 4
 430:	000d053a 	andeq	r0, sp, sl, lsr r5
 434:	3c010402 	cfstrscc	mvf0, [r1], {2}
 438:	02002a05 	andeq	r2, r0, #20480	; 0x5000
 43c:	053a0204 	ldreq	r0, [sl, #-516]!	; 0xfffffdfc
 440:	04020009 	streq	r0, [r2], #-9
 444:	21053c01 	tstcs	r5, r1, lsl #24
 448:	02040200 	andeq	r0, r4, #0, 4
 44c:	00160549 	andseq	r0, r6, r9, asr #10
 450:	3c010402 	cfstrscc	mvf0, [r1], {2}
 454:	02000505 	andeq	r0, r0, #20971520	; 0x1400000
 458:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 45c:	3c090301 	stccc	3, cr0, [r9], {1}
 460:	055a2705 	ldrbeq	r2, [sl, #-1797]	; 0xfffff8fb
 464:	05055906 	streq	r5, [r5, #-2310]	; 0xfffff6fa
 468:	0d053d2e 	stceq	13, cr3, [r5, #-184]	; 0xffffff48
 46c:	2e050559 	cfrshl32cs	mvfx5, mvfx9, r0
 470:	02000905 	andeq	r0, r0, #81920	; 0x14000
 474:	05210304 	streq	r0, [r1, #-772]!	; 0xfffffcfc
 478:	0402000b 	streq	r0, [r2], #-11
 47c:	23055903 	movwcs	r5, #22787	; 0x5903
 480:	03040200 	movweq	r0, #16896	; 0x4200
 484:	0018053a 	andseq	r0, r8, sl, lsr r5
 488:	3c010402 	cfstrscc	mvf0, [r1], {2}
 48c:	02001e05 	andeq	r1, r0, #80	; 0x50
 490:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 494:	04020005 	streq	r0, [r2], #-5
 498:	05402001 	strbeq	r2, [r0, #-1]
 49c:	14055a01 	strne	r5, [r5], #-2561	; 0xfffff5ff
 4a0:	3505054e 	strcc	r0, [r5, #-1358]	; 0xfffffab2
 4a4:	05201305 	streq	r1, [r0, #-773]!	; 0xfffffcfb
 4a8:	14052f05 	strne	r2, [r5], #-3845	; 0xfffff0fb
 4ac:	2f050520 	svccs	0x00050520
 4b0:	05201505 	streq	r1, [r0, #-1285]!	; 0xfffffafb
 4b4:	13053005 	movwne	r3, #20485	; 0x5005
 4b8:	2f050520 	svccs	0x00050520
 4bc:	05201305 	streq	r1, [r0, #-773]!	; 0xfffffcfb
 4c0:	13053d05 	movwne	r3, #23813	; 0x5d05
 4c4:	05052f20 	streq	r2, [r5, #-3872]	; 0xfffff0e0
 4c8:	20140575 	andscs	r0, r4, r5, ror r5
 4cc:	05300c05 	ldreq	r0, [r0, #-3077]!	; 0xfffff3fb
 4d0:	32053d01 	andcc	r3, r5, #64	; 0x40
 4d4:	0d053e08 	stceq	14, cr3, [r5, #-32]	; 0xffffffe0
 4d8:	0e053d67 	cdpeq	13, 0, cr3, cr5, cr7, {3}
 4dc:	2e05053d 	mcrcs	5, 0, r0, cr5, cr13, {1}
 4e0:	02000c05 	andeq	r0, r0, #1280	; 0x500
 4e4:	05210304 	streq	r0, [r1, #-772]!	; 0xfffffcfc
 4e8:	04020018 	streq	r0, [r2], #-24	; 0xffffffe8
 4ec:	0a053d03 	beq	14f900 <startup-0x1feb0700>
 4f0:	03040200 	movweq	r0, #16896	; 0x4200
 4f4:	001b052e 	andseq	r0, fp, lr, lsr #10
 4f8:	2e030402 	cdpcs	4, 0, cr0, cr3, cr2, {0}
 4fc:	02001405 	andeq	r1, r0, #83886080	; 0x5000000
 500:	05200304 	streq	r0, [r0, #-772]!	; 0xfffffcfc
 504:	0402000a 	streq	r0, [r2], #-10
 508:	14052103 	strne	r2, [r5], #-259	; 0xfffffefd
 50c:	03040200 	movweq	r0, #16896	; 0x4200
 510:	0009052e 	andeq	r0, r9, lr, lsr #10
 514:	2f030402 	svccs	0x00030402
 518:	02000b05 	andeq	r0, r0, #5120	; 0x1400
 51c:	00590304 	subseq	r0, r9, r4, lsl #6
 520:	3d030402 	cfstrscc	mvf0, [r3, #-8]
 524:	02001d05 	andeq	r1, r0, #320	; 0x140
 528:	7a030304 	bvc	c1140 <startup-0x1ff3eec0>
 52c:	0005053c 	andeq	r0, r5, ip, lsr r5
 530:	3c010402 	cfstrscc	mvf0, [r1], {2}
 534:	05440105 	strbeq	r0, [r4, #-261]	; 0xfffffefb
 538:	09055a1d 	stmdbeq	r5, {r0, r2, r3, r4, r9, fp, ip, lr}
 53c:	01052f4b 	tsteq	r5, fp, asr #30
 540:	4c210533 	cfstr32mi	mvfx0, [r1], #-204	; 0xffffff34
 544:	05590905 	ldrbeq	r0, [r9, #-2309]	; 0xfffff6fb
 548:	0d055813 	stceq	8, cr5, [r5, #-76]	; 0xffffffb4
 54c:	5820055b 	stmdapl	r0!, {r0, r1, r3, r4, r6, r8, sl}
 550:	055a0d05 	ldrbeq	r0, [sl, #-3333]	; 0xfffff2fb
 554:	2a055805 	bcs	156570 <startup-0x1fea9a90>
 558:	03040200 	movweq	r0, #16896	; 0x4200
 55c:	001f0520 	andseq	r0, pc, r0, lsr #10
 560:	c8030402 	stmdagt	r3, {r1, sl}
 564:	02000505 	andeq	r0, r0, #20971520	; 0x1400000
 568:	68660104 	stmdavs	r6!, {r2, r8}^
 56c:	0a052f2f 	beq	14c230 <startup-0x1feb3dd0>
 570:	030b0530 	movweq	r0, #46384	; 0xb530
 574:	0d05200a 	stceq	0, cr2, [r5, #-40]	; 0xffffffd8
 578:	15059f67 	strne	r9, [r5, #-3943]	; 0xfffff099
 57c:	3f0e0559 	svccc	0x000e0559
 580:	32210d05 	eorcc	r0, r1, #320	; 0x140
 584:	311a05a0 	tstcc	sl, r0, lsr #11
 588:	05750d05 	ldrbeq	r0, [r5, #-3333]!	; 0xfffff2fb
 58c:	1105911d 	tstne	r5, sp, lsl r1
 590:	211c059e 			; <UNDEFINED> instruction: 0x211c059e
 594:	059e1105 	ldreq	r1, [lr, #261]	; 0x105
 598:	1105211a 	tstne	r5, sl, lsl r1
 59c:	211c059e 			; <UNDEFINED> instruction: 0x211c059e
 5a0:	059e1105 	ldreq	r1, [lr, #261]	; 0x105
 5a4:	2e052121 	adfcssp	f2, f5, f1
 5a8:	58110558 	ldmdapl	r1, {r3, r4, r6, r8, sl}
 5ac:	05212705 	streq	r2, [r1, #-1797]!	; 0xfffff8fb
 5b0:	0e055811 	mcreq	8, 0, r5, cr5, cr1, {0}
 5b4:	05206f03 	streq	r6, [r0, #-3843]!	; 0xfffff0fd
 5b8:	7470030a 	ldrbtvc	r0, [r0], #-778	; 0xfffffcf6
 5bc:	25030105 	strcs	r0, [r3, #-261]	; 0xfffffefb
 5c0:	082a0574 	stmdaeq	sl!, {r2, r4, r5, r6, r8, sl}
 5c4:	67050514 	smladvs	r5, r4, r5, r0
 5c8:	1c030105 	stfnes	f0, [r3], {5}
 5cc:	11052008 	tstne	r5, r8
 5d0:	05206603 	streq	r6, [r0, #-1539]!	; 0xfffff9fd
 5d4:	12052e0f 	andne	r2, r5, #240	; 0xf0
 5d8:	2e11052f 	cfmul64cs	mvdx0, mvdx1, mvdx15
 5dc:	05500d05 	ldrbeq	r0, [r0, #-3333]	; 0xfffff2fb
 5e0:	0f052211 	svceq	0x00052211
 5e4:	2f12052e 	svccs	0x0012052e
 5e8:	052e1105 	streq	r1, [lr, #-261]!	; 0xfffffefb
 5ec:	11055b0d 	tstne	r5, sp, lsl #22
 5f0:	2e0f0522 	cfsh32cs	mvfx0, mvfx15, #18
 5f4:	052f1205 	streq	r1, [pc, #-517]!	; 3f7 <startup-0x1ffffc09>
 5f8:	0d052e11 	stceq	14, cr2, [r5, #-68]	; 0xffffffbc
 5fc:	2211055a 	andscs	r0, r1, #377487360	; 0x16800000
 600:	052e0f05 	streq	r0, [lr, #-3845]!	; 0xfffff0fb
 604:	11052f12 	tstne	r5, r2, lsl pc
 608:	4d0d052e 	cfstr32mi	mvfx0, [sp, #-184]	; 0xffffff48
 60c:	34206f03 	strtcc	r6, [r0], #-3843	; 0xfffff0fd
 610:	01053433 	tsteq	r5, r3, lsr r4
 614:	00040222 	andeq	r0, r4, r2, lsr #4
 618:	00e70101 	rsceq	r0, r7, r1, lsl #2
 61c:	00030000 	andeq	r0, r3, r0
 620:	00000054 	andeq	r0, r0, r4, asr r0
 624:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
 628:	0101000d 	tsteq	r1, sp
 62c:	00000101 	andeq	r0, r0, r1, lsl #2
 630:	00000100 	andeq	r0, r0, r0, lsl #2
 634:	73552f01 	cmpvc	r5, #1, 30
 638:	2f737265 	svccs	0x00737265
 63c:	6c6c6f67 	stclvs	15, cr6, [ip], #-412	; 0xfffffe64
 640:	442f6d75 	strtmi	r6, [pc], #-3445	; 648 <startup-0x1ffff9b8>
 644:	6d75636f 	ldclvs	3, cr6, [r5, #-444]!	; 0xfffffe44
 648:	73746e65 	cmnvc	r4, #1616	; 0x650
 64c:	706f6d2f 	rsbvc	r6, pc, pc, lsr #26
 650:	6f62616c 	svcvs	0x0062616c
 654:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
 658:	72656e6f 	rsbvc	r6, r5, #1776	; 0x6f0
 65c:	504f4d2f 	subpl	r4, pc, pc, lsr #26
 660:	6570532d 	ldrbvs	r5, [r0, #-813]!	; 0xfffffcd3
 664:	6e532f6c 	cdpvs	15, 5, cr2, cr3, cr12, {3}
 668:	00656b61 	rsbeq	r6, r5, r1, ror #22
 66c:	79656b00 	stmdbvc	r5!, {r8, r9, fp, sp, lr}^
 670:	00632e62 	rsbeq	r2, r3, r2, ror #28
 674:	00000001 	andeq	r0, r0, r1
 678:	05001905 	streq	r1, [r0, #-2309]	; 0xfffff6fb
 67c:	00090002 	andeq	r0, r9, r2
 680:	1f051520 	svcne	0x00051520
 684:	2e1a054b 	cfmac32cs	mvfx0, mvfx10, mvfx11
 688:	052e0505 	streq	r0, [lr, #-1285]!	; 0xfffffafb
 68c:	01052016 	tsteq	r5, r6, lsl r0
 690:	7613052f 	ldrvc	r0, [r3], -pc, lsr #10
 694:	053e1205 	ldreq	r1, [lr, #-517]!	; 0xfffffdfb
 698:	0b05200a 	bleq	1486c8 <startup-0x1feb7938>
 69c:	2e05053d 	mcrcs	5, 0, r0, cr5, cr13, {1}
 6a0:	05210d05 	streq	r0, [r1, #-3333]!	; 0xfffff2fb
 6a4:	1405740c 	strne	r7, [r5], #-1036	; 0xfffffbf4
 6a8:	00170521 	andseq	r0, r7, r1, lsr #10
 6ac:	2c020402 	cfstrscs	mvf0, [r2], {2}
 6b0:	02000505 	andeq	r0, r0, #20971520	; 0x1400000
 6b4:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 6b8:	0105410c 	tsteq	r5, ip, lsl #2
 6bc:	6919052f 	ldmdbvs	r9, {r0, r1, r2, r3, r5, r8, sl}
 6c0:	753d1305 	ldrvc	r1, [sp, #-773]!	; 0xfffffcfb
 6c4:	056a0e05 	strbeq	r0, [sl, #-3589]!	; 0xfffff1fb
 6c8:	09052e05 	stmdbeq	r5, {r0, r2, r9, sl, fp, sp}
 6cc:	4b130521 	blmi	4c1b58 <startup-0x1fb3e4a8>
 6d0:	054b0c05 	strbeq	r0, [fp, #-3077]	; 0xfffff3fb
 6d4:	22053d26 	andcs	r3, r5, #2432	; 0x980
 6d8:	2e1a052e 	cfmul64cs	mvdx0, mvdx10, mvdx14
 6dc:	02001f05 	andeq	r1, r0, #5, 30
 6e0:	05380204 	ldreq	r0, [r8, #-516]!	; 0xfffffdfc
 6e4:	04020005 	streq	r0, [r2], #-5
 6e8:	0c053c01 	stceq	12, cr3, [r5], {1}
 6ec:	00010543 	andeq	r0, r1, r3, asr #10
 6f0:	21010402 	tstcs	r1, r2, lsl #8
 6f4:	05841e05 	streq	r1, [r4, #3589]	; 0xe05
 6f8:	15056805 	strne	r6, [r5, #-2053]	; 0xfffff7fb
 6fc:	3e010520 	cfsh32cc	mvfx0, mvfx1, #16
 700:	01000602 	tsteq	r0, r2, lsl #12
 704:	00009c01 	andeq	r9, r0, r1, lsl #24
 708:	55000300 	strpl	r0, [r0, #-768]	; 0xfffffd00
 70c:	02000000 	andeq	r0, r0, #0, 0
 710:	0d0efb01 	vstreq	d15, [lr, #-4]
 714:	01010100 	mrseq	r0, (UNDEF: 17)
 718:	00000001 	andeq	r0, r0, r1
 71c:	01000001 	tsteq	r0, r1
 720:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
 724:	672f7372 			; <UNDEFINED> instruction: 0x672f7372
 728:	756c6c6f 	strbvc	r6, [ip, #-3183]!	; 0xfffff391
 72c:	6f442f6d 	svcvs	0x00442f6d
 730:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0xfffffa9d
 734:	2f73746e 	svccs	0x0073746e
 738:	6c706f6d 	ldclvs	15, cr6, [r0], #-436	; 0xfffffe4c
 73c:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
 740:	6f697461 	svcvs	0x00697461
 744:	2f72656e 	svccs	0x0072656e
 748:	2d504f4d 	ldclcs	15, cr4, [r0, #-308]	; 0xfffffecc
 74c:	6c657053 	stclvs	0, cr7, [r5], #-332	; 0xfffffeb4
 750:	616e532f 	cmnvs	lr, pc, lsr #6
 754:	0000656b 	andeq	r6, r0, fp, ror #10
 758:	616c6564 	cmnvs	ip, r4, ror #10
 75c:	00632e79 	rsbeq	r2, r3, r9, ror lr
 760:	00000001 	andeq	r0, r0, r1
 764:	05001905 	streq	r1, [r0, #-2309]	; 0xfffff6fb
 768:	0009f002 	andeq	pc, r9, r2
 76c:	09051620 	stmdbeq	r5, {r5, r9, sl, ip}
 770:	03010530 	movweq	r0, #5424	; 0x1530
 774:	17052009 	strne	r2, [r5, -r9]
 778:	30090530 	andcc	r0, r9, r0, lsr r5
 77c:	05240105 	streq	r0, [r4, #-261]!	; 0xfffffefb
 780:	09053022 	stmdbeq	r5, {r1, r5, ip, sp}
 784:	2801054c 	stmdacs	r1, {r2, r3, r6, r8, sl}
 788:	053e2205 	ldreq	r2, [lr, #-517]!	; 0xfffffdfb
 78c:	0b054c0c 	bleq	1537c4 <startup-0x1feac83c>
 790:	3f0a0583 	svccc	0x000a0583
 794:	05210905 	streq	r0, [r1, #-2309]!	; 0xfffff6fb
 798:	0a05570d 	beq	1563d4 <startup-0x1fea9c2c>
 79c:	3101053c 	tstcc	r1, ip, lsr r5
 7a0:	01000502 	tsteq	r0, r2, lsl #10
 7a4:	0002c801 	andeq	ip, r2, r1, lsl #16
 7a8:	81000300 	mrshi	r0, LR_irq
 7ac:	02000000 	andeq	r0, r0, #0, 0
 7b0:	0d0efb01 	vstreq	d15, [lr, #-4]
 7b4:	01010100 	mrseq	r0, (UNDEF: 17)
 7b8:	00000001 	andeq	r0, r0, r1
 7bc:	01000001 	tsteq	r0, r1
 7c0:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
 7c4:	672f7372 			; <UNDEFINED> instruction: 0x672f7372
 7c8:	756c6c6f 	strbvc	r6, [ip, #-3183]!	; 0xfffff391
 7cc:	6f442f6d 	svcvs	0x00442f6d
 7d0:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0xfffffa9d
 7d4:	2f73746e 	svccs	0x0073746e
 7d8:	6c706f6d 	ldclvs	15, cr6, [r0], #-436	; 0xfffffe4c
 7dc:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
 7e0:	6f697461 	svcvs	0x00697461
 7e4:	2f72656e 	svccs	0x0072656e
 7e8:	2d504f4d 	ldclcs	15, cr4, [r0, #-308]	; 0xfffffecc
 7ec:	6c657053 	stclvs	0, cr7, [r5], #-332	; 0xfffffeb4
 7f0:	616e532f 	cmnvs	lr, pc, lsr #6
 7f4:	2e00656b 	cfsh32cs	mvfx6, mvfx0, #59
 7f8:	72670000 	rsbvc	r0, r7, #0, 0
 7fc:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 800:	73696463 	cmnvc	r9, #1660944384	; 0x63000000
 804:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 808:	0100632e 	tsteq	r0, lr, lsr #6
 80c:	72670000 	rsbvc	r0, r7, #0, 0
 810:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 814:	73696463 	cmnvc	r9, #1660944384	; 0x63000000
 818:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 81c:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
 820:	65640000 	strbvs	r0, [r4, #-0]!
 824:	656e6966 	strbvs	r6, [lr, #-2406]!	; 0xfffff69a
 828:	00682e73 	rsbeq	r2, r8, r3, ror lr
 82c:	00000002 	andeq	r0, r0, r2
 830:	05001805 	streq	r1, [r0, #-2053]	; 0xfffff7fb
 834:	000a5402 	andeq	r5, sl, r2, lsl #8
 838:	05051720 	streq	r1, [r5, #-1824]	; 0xfffff8e0
 83c:	3d3d3d2f 	ldccc	13, cr3, [sp, #-188]!	; 0xffffff44
 840:	4b3d3d3d 	blmi	f4fd3c <startup-0x1f0b02c4>
 844:	4b4b4b4b 	blmi	12d3578 <startup-0x1ed2ca88>
 848:	053d0105 	ldreq	r0, [sp, #-261]!	; 0xfffffefb
 84c:	08053e27 	stmdaeq	r5, {r0, r1, r2, r5, r9, sl, fp, ip, sp}
 850:	2007056a 	andcs	r0, r7, sl, ror #10
 854:	0505bb4b 	streq	fp, [r5, #-2891]	; 0xfffff4b5
 858:	20140575 	andscs	r0, r4, r5, ror r5
 85c:	053e0105 	ldreq	r0, [lr, #-261]!	; 0xfffffefb
 860:	08056825 	stmdaeq	r5, {r0, r2, r5, fp, sp, lr}
 864:	2007056a 	andcs	r0, r7, sl, ror #10
 868:	0505754b 	streq	r7, [r5, #-1355]	; 0xfffffab5
 86c:	20140567 	andscs	r0, r4, r7, ror #10
 870:	053d0105 	ldreq	r0, [sp, #-261]!	; 0xfffffefb
 874:	0505682b 	streq	r6, [r5, #-2091]	; 0xfffff7d5
 878:	03010567 	movweq	r0, #5479	; 0x1567
 87c:	0d05ba13 	vstreq	s22, [r5, #-76]	; 0xffffffb4
 880:	3d206f03 	stccc	15, cr6, [r0, #-12]!
 884:	233d3d23 	teqcs	sp, #2240	; 0x8c0
 888:	3d233d3d 	stccc	13, cr3, [r3, #-244]!	; 0xffffff0c
 88c:	05220105 	streq	r0, [r2, #-261]!	; 0xfffffefb
 890:	05054c1e 	streq	r4, [r5, #-3102]	; 0xfffff3e2
 894:	13053d2f 	movwne	r3, #23855	; 0x5d2f
 898:	2f050520 	svccs	0x00050520
 89c:	09053d3d 	stmdbeq	r5, {r0, r2, r3, r4, r5, r8, sl, fp, ip, sp}
 8a0:	01040200 	mrseq	r0, R12_usr
 8a4:	04020030 	streq	r0, [r2], #-48	; 0xffffffd0
 8a8:	02003d01 	andeq	r3, r0, #64	; 0x40
 8ac:	002f0104 	eoreq	r0, pc, r4, lsl #2
 8b0:	3d010402 	cfstrscc	mvf0, [r1, #-8]
 8b4:	01040200 	mrseq	r0, R12_usr
 8b8:	0335052b 	teqeq	r5, #180355072	; 0xac00000
 8bc:	0505580b 	streq	r5, [r5, #-2059]	; 0xfffff7f5
 8c0:	13053d67 	movwne	r3, #23911	; 0x5d67
 8c4:	2f050520 	svccs	0x00050520
 8c8:	3d2f593d 			; <UNDEFINED> instruction: 0x3d2f593d
 8cc:	052f1c05 	streq	r1, [pc, #-3077]!	; fffffccf <rear+0xdfffba7f>
 8d0:	05052013 	streq	r2, [r5, #-19]	; 0xffffffed
 8d4:	13053d4b 	movwne	r3, #23883	; 0x5d4b
 8d8:	30140520 	andscc	r0, r4, r0, lsr #10
 8dc:	054a0805 	strbeq	r0, [sl, #-2053]	; 0xfffff7fb
 8e0:	14052109 	strne	r2, [r5], #-265	; 0xfffffef7
 8e4:	4a08053f 	bmi	201de8 <startup-0x1fdfe218>
 8e8:	05210905 	streq	r0, [r1, #-2309]!	; 0xfffff6fb
 8ec:	01053f0c 	tsteq	r5, ip, lsl #30
 8f0:	ca2e053d 	bgt	b81dec <startup-0x1f47e214>
 8f4:	59670c05 	stmdbpl	r7!, {r0, r2, sl, fp}^
 8f8:	05670105 	strbeq	r0, [r7, #-261]!	; 0xfffffefb
 8fc:	05054c36 	streq	r4, [r5, #-3126]	; 0xfffff3ca
 900:	20160591 	mulscs	r6, r1, r5
 904:	593d0505 	ldmdbpl	sp!, {r0, r2, r8, sl}
 908:	052f3d2f 	streq	r3, [pc, #-3375]!	; fffffbe1 <rear+0xdfffb991>
 90c:	07053e13 	smladeq	r5, r3, lr, r3
 910:	2109054a 	tstcs	r9, sl, asr #10
 914:	053f1305 	ldreq	r1, [pc, #-773]!	; 617 <startup-0x1ffff9e9>
 918:	09054a07 	stmdbeq	r5, {r0, r1, r2, r9, fp, lr}
 91c:	41050521 	tstmi	r5, r1, lsr #10
 920:	05201605 	streq	r1, [r0, #-1541]!	; 0xfffff9fb
 924:	053d2f05 	ldreq	r2, [sp, #-3845]!	; 0xfffff0fb
 928:	3c053e01 	stccc	14, cr3, [r5], {1}
 92c:	91050568 	tstls	r5, r8, ror #10
 930:	3d3d593d 			; <UNDEFINED> instruction: 0x3d3d593d
 934:	05830105 	streq	r0, [r3, #261]	; 0x105
 938:	05054c3a 	streq	r4, [r5, #-3130]	; 0xfffff3c6
 93c:	3d593d91 	ldclcc	13, cr3, [r9, #-580]	; 0xfffffdbc
 940:	8301053d 	movwhi	r0, #5437	; 0x153d
 944:	054c2005 	strbeq	r2, [ip, #-5]
 948:	05053d0e 	streq	r3, [r5, #-3342]	; 0xfffff2f2
 94c:	212c052e 			; <UNDEFINED> instruction: 0x212c052e
 950:	59660905 	stmdbpl	r6!, {r0, r2, r8, fp}^
 954:	054b1205 	strbeq	r1, [fp, #-517]	; 0xfffffdfb
 958:	0d052e09 	stceq	14, cr2, [r5, #-36]	; 0xffffffdc
 95c:	03040200 	movweq	r0, #16896	; 0x4200
 960:	00280521 	eoreq	r0, r8, r1, lsr #10
 964:	49030402 	stmdbmi	r3, {r1, sl}
 968:	02000905 	andeq	r0, r0, #81920	; 0x14000
 96c:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 970:	04020026 	streq	r0, [r2], #-38	; 0xffffffda
 974:	05053902 	streq	r3, [r5, #-2306]	; 0xfffff6fe
 978:	01040200 	mrseq	r0, R12_usr
 97c:	4301053c 	movwmi	r0, #5436	; 0x153c
 980:	055a1805 	ldrbeq	r1, [sl, #-2053]	; 0xfffff7fb
 984:	05053e0c 	streq	r3, [r5, #-3596]	; 0xfffff1f4
 988:	0017052e 	andseq	r0, r7, lr, lsr #10
 98c:	21030402 	tstcs	r3, r2, lsl #8
 990:	02001c05 	andeq	r1, r0, #1280	; 0x500
 994:	05570304 	ldrbeq	r0, [r7, #-772]	; 0xfffffcfc
 998:	04020005 	streq	r0, [r2], #-5
 99c:	01053c01 	tsteq	r5, r1, lsl #24
 9a0:	8423055a 	strthi	r0, [r3], #-1370	; 0xfffffaa6
 9a4:	055a0905 	ldrbeq	r0, [sl, #-2309]	; 0xfffff6fb
 9a8:	11052f08 	tstne	r5, r8, lsl #30
 9ac:	02040200 	andeq	r0, r4, #0, 4
 9b0:	0019053c 	andseq	r0, r9, ip, lsr r5
 9b4:	3c040402 	cfstrscc	mvf0, [r4], {2}
 9b8:	02002205 	andeq	r2, r0, #1342177280	; 0x50000000
 9bc:	053c0604 	ldreq	r0, [ip, #-1540]!	; 0xfffff9fc
 9c0:	17053e14 	smladne	r5, r4, lr, r3
 9c4:	2e0e052e 	cfsh32cs	mvfx0, mvfx14, #30
 9c8:	052e0a05 	streq	r0, [lr, #-2565]!	; 0xfffff5fb
 9cc:	0b053e07 	bleq	1501f0 <startup-0x1feafe10>
 9d0:	3d0f053d 	cfstr32cc	mvfx0, [pc, #-244]	; 8e4 <startup-0x1ffff71c>
 9d4:	053f1505 	ldreq	r1, [pc, #-1285]!	; 4d7 <startup-0x1ffffb29>
 9d8:	1b052e18 	blne	14c240 <startup-0x1feb3dc0>
 9dc:	20100520 	andscs	r0, r0, r0, lsr #10
 9e0:	052e0b05 	streq	r0, [lr, #-2821]!	; 0xfffff4fb
 9e4:	2c053e17 	stccs	14, cr3, [r5], {23}
 9e8:	05d67503 	ldrbeq	r7, [r6, #1283]	; 0x503
 9ec:	200c0301 	andcs	r0, ip, r1, lsl #6
 9f0:	055a1f05 	ldrbeq	r1, [sl, #-3845]	; 0xfffff0fb
 9f4:	0c053e12 	stceq	14, cr3, [r5], {18}
 9f8:	4a050530 	bmi	141ec0 <startup-0x1febe140>
 9fc:	00211405 	eoreq	r1, r1, r5, lsl #8
 a00:	06010402 	streq	r0, [r1], -r2, lsl #8
 a04:	04020058 	streq	r0, [r2], #-88	; 0xffffffa8
 a08:	02002e02 	andeq	r2, r0, #2, 28
 a0c:	05200404 	streq	r0, [r0, #-1028]!	; 0xfffffbfc
 a10:	04020010 	streq	r0, [r2], #-16
 a14:	052f0604 	streq	r0, [pc, #-1540]!	; 418 <startup-0x1ffffbe8>
 a18:	04020009 	streq	r0, [r2], #-9
 a1c:	0d054a04 	vstreq	s8, [r5, #-16]
 a20:	1305c921 	movwne	ip, #22817	; 0x5921
 a24:	4a0d0567 	bmi	341fc8 <startup-0x1fcbe038>
 a28:	02002e05 	andeq	r2, r0, #80	; 0x50
 a2c:	05210304 	streq	r0, [r1, #-772]!	; 0xfffffcfc
 a30:	04020011 	streq	r0, [r2], #-17	; 0xffffffef
 a34:	22054a03 	andcs	r4, r5, #12288	; 0x3000
 a38:	03040200 	movweq	r0, #16896	; 0x4200
 a3c:	00270573 	eoreq	r0, r7, r3, ror r5
 a40:	66030402 	strvs	r0, [r3], -r2, lsl #8
 a44:	02000d05 	andeq	r0, r0, #320	; 0x140
 a48:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 a4c:	0402001d 	streq	r0, [r2], #-29	; 0xffffffe3
 a50:	09055502 	stmdbeq	r5, {r1, r8, sl, ip, lr}
 a54:	01040200 	mrseq	r0, R12_usr
 a58:	00190566 	andseq	r0, r9, r6, ror #10
 a5c:	56020402 	strpl	r0, [r2], -r2, lsl #8
 a60:	02000505 	andeq	r0, r0, #20971520	; 0x1400000
 a64:	05660104 	strbeq	r0, [r6, #-260]!	; 0xfffffefc
 a68:	580a0301 	stmdapl	sl, {r0, r8, r9}
 a6c:	01000802 	tsteq	r0, r2, lsl #16
 a70:	0001ee01 	andeq	lr, r1, r1, lsl #28
 a74:	55000300 	strpl	r0, [r0, #-768]	; 0xfffffd00
 a78:	02000001 	andeq	r0, r0, #1, 0
 a7c:	0d0efb01 	vstreq	d15, [lr, #-4]
 a80:	01010100 	mrseq	r0, (UNDEF: 17)
 a84:	00000001 	andeq	r0, r0, r1
 a88:	01000001 	tsteq	r0, r1
 a8c:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
 a90:	672f7372 			; <UNDEFINED> instruction: 0x672f7372
 a94:	756c6c6f 	strbvc	r6, [ip, #-3183]!	; 0xfffff391
 a98:	6f442f6d 	svcvs	0x00442f6d
 a9c:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0xfffffa9d
 aa0:	2f73746e 	svccs	0x0073746e
 aa4:	6c706f6d 	ldclvs	15, cr6, [r0], #-436	; 0xfffffe4c
 aa8:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
 aac:	6f697461 	svcvs	0x00697461
 ab0:	2f72656e 	svccs	0x0072656e
 ab4:	2d504f4d 	ldclcs	15, cr4, [r0, #-308]	; 0xfffffecc
 ab8:	6c657053 	stclvs	0, cr7, [r5], #-332	; 0xfffffeb4
 abc:	616e532f 	cmnvs	lr, pc, lsr #6
 ac0:	2f00656b 	svccs	0x0000656b
 ac4:	6c707041 	ldclvs	0, cr7, [r0], #-260	; 0xfffffefc
 ac8:	74616369 	strbtvc	r6, [r1], #-873	; 0xfffffc97
 acc:	736e6f69 	cmnvc	lr, #420	; 0x1a4
 ad0:	646f632f 	strbtvs	r6, [pc], #-815	; ad8 <startup-0x1ffff528>
 ad4:	74696c65 	strbtvc	r6, [r9], #-3173	; 0xfffff39b
 ad8:	70612e65 	rsbvc	r2, r1, r5, ror #28
 adc:	6f432f70 	svcvs	0x00432f70
 ae0:	6e65746e 	cdpvs	4, 6, cr7, cr5, cr14, {3}
 ae4:	532f7374 			; <UNDEFINED> instruction: 0x532f7374
 ae8:	65726168 	ldrbvs	r6, [r2, #-360]!	; 0xfffffe98
 aec:	70755364 	rsbsvc	r5, r5, r4, ror #6
 af0:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
 af4:	6f6f742f 	svcvs	0x006f742f
 af8:	672f736c 	strvs	r7, [pc, -ip, ror #6]!
 afc:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
 b00:	612f6d72 			; <UNDEFINED> instruction: 0x612f6d72
 b04:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
 b08:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
 b0c:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
 b10:	636e692f 	cmnvs	lr, #770048	; 0xbc000
 b14:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
 b18:	7379732f 	cmnvc	r9, #-1140850688	; 0xbc000000
 b1c:	70412f00 	subvc	r2, r1, r0, lsl #30
 b20:	63696c70 	cmnvs	r9, #112, 24	; 0x7000
 b24:	6f697461 	svcvs	0x00697461
 b28:	632f736e 			; <UNDEFINED> instruction: 0x632f736e
 b2c:	6c65646f 	cfstrdvs	mvd6, [r5], #-444	; 0xfffffe44
 b30:	2e657469 	cdpcs	4, 6, cr7, cr5, cr9, {3}
 b34:	2f707061 	svccs	0x00707061
 b38:	746e6f43 	strbtvc	r6, [lr], #-3907	; 0xfffff0bd
 b3c:	73746e65 	cmnvc	r4, #1616	; 0x650
 b40:	6168532f 	cmnvs	r8, pc, lsr #6
 b44:	53646572 	cmnpl	r4, #478150656	; 0x1c800000
 b48:	6f707075 	svcvs	0x00707075
 b4c:	742f7472 	strtvc	r7, [pc], #-1138	; b54 <startup-0x1ffff4ac>
 b50:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
 b54:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
 b58:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
 b5c:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
 b60:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
 b64:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
 b68:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
 b6c:	61652d65 	cmnvs	r5, r5, ror #26
 b70:	392f6962 	stmdbcc	pc!, {r1, r5, r6, r8, fp, sp, lr}	; <UNPREDICTABLE>
 b74:	312e322e 			; <UNDEFINED> instruction: 0x312e322e
 b78:	636e692f 	cmnvs	lr, #770048	; 0xbc000
 b7c:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
 b80:	75710000 	ldrbvc	r0, [r1, #-0]!
 b84:	2e657565 	cdpcs	5, 6, cr7, cr5, cr5, {3}
 b88:	00010063 	andeq	r0, r1, r3, rrx
 b8c:	636f6c00 	cmnvs	pc, #0, 24
 b90:	00682e6b 	rsbeq	r2, r8, fp, ror #28
 b94:	5f000002 	svcpl	0x00000002
 b98:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
 b9c:	00682e73 	rsbeq	r2, r8, r3, ror lr
 ba0:	73000002 	movwvc	r0, #2
 ba4:	65646474 	strbvs	r6, [r4, #-1140]!	; 0xfffffb8c
 ba8:	00682e66 	rsbeq	r2, r8, r6, ror #28
 bac:	72000003 	andvc	r0, r0, #3, 0
 bb0:	746e6565 	strbtvc	r6, [lr], #-1381	; 0xfffffa9b
 bb4:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
 bb8:	65670000 	strbvs	r0, [r7, #-0]!
 bbc:	74656d6f 	strbtvc	r6, [r5], #-3439	; 0xfffff291
 bc0:	6f636972 	svcvs	0x00636972
 bc4:	63656a62 	cmnvs	r5, #401408	; 0x62000
 bc8:	00682e74 	rsbeq	r2, r8, r4, ror lr
 bcc:	00000001 	andeq	r0, r0, r1
 bd0:	05001205 	streq	r1, [r0, #-517]	; 0xfffffdfb
 bd4:	000f7802 	andeq	r7, pc, r2, lsl #16
 bd8:	01090320 	tsteq	r9, r0, lsr #6
 bdc:	053d0d05 	ldreq	r0, [sp, #-3333]!	; 0xfffff2fb
 be0:	15052e05 	strne	r2, [r5, #-3589]	; 0xfffff1fb
 be4:	03040200 	movweq	r0, #16896	; 0x4200
 be8:	001e0521 	andseq	r0, lr, r1, lsr #10
 bec:	57030402 	strpl	r0, [r3, -r2, lsl #8]
 bf0:	02000505 	andeq	r0, r0, #20971520	; 0x1400000
 bf4:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 bf8:	10053e01 	andne	r3, r5, r1, lsl #28
 bfc:	2f130577 	svccs	0x00130577
 c00:	05590105 	ldrbeq	r0, [r9, #-261]	; 0xfffffefb
 c04:	15057710 	strne	r7, [r5, #-1808]	; 0xfffff8f0
 c08:	5901052f 	stmdbpl	r1, {r0, r1, r2, r3, r5, r8, sl}
 c0c:	055b0f05 	ldrbeq	r0, [fp, #-3845]	; 0xfffff0fb
 c10:	01052f15 	tsteq	r5, r5, lsl pc
 c14:	690c0567 	stmdbvs	ip, {r0, r1, r2, r5, r6, r8, sl}
 c18:	052f0b05 	streq	r0, [pc, #-2821]!	; 11b <startup-0x1ffffee5>
 c1c:	1b052f01 	blne	14c828 <startup-0x1feb37d8>
 c20:	4c080569 	cfstr32mi	mvfx0, [r8], {105}	; 0x69
 c24:	054a0705 	strbeq	r0, [sl, #-1797]	; 0xfffff8fb
 c28:	0f053c06 	svceq	0x00053c06
 c2c:	2e090530 	cfmv64hrcs	mvdx9, r0
 c30:	052f0f05 	streq	r0, [pc, #-3845]!	; fffffd33 <rear+0xdfffbae3>
 c34:	18054c10 	stmdane	r5, {r4, sl, fp, lr}
 c38:	2e10053c 	mrccs	5, 0, r0, cr0, cr12, {1}
 c3c:	052e1805 	streq	r1, [lr, #-2053]!	; 0xfffff7fb
 c40:	01054b10 	tsteq	r5, r0, lsl fp
 c44:	ae0e055a 	cfrshl32ge	mvfx14, mvfx10, r0
 c48:	053d2105 	ldreq	r2, [sp, #-261]!	; 0xfffffefb
 c4c:	0d05580c 	stceq	8, cr5, [r5, #-48]	; 0xffffffd0
 c50:	2e06054c 	cfsh32cs	mvfx0, mvfx6, #44
 c54:	3f2f0d05 	svccc	0x002f0d05
 c58:	05590b05 	ldrbeq	r0, [r9, #-2821]	; 0xfffff4fb
 c5c:	0b022101 	bleq	89068 <startup-0x1ff76f98>
 c60:	Address 0x0000000000000c60 is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	616c6564 	cmnvs	ip, r4, ror #10
   4:	696d5f79 	stmdbvs	sp!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
   8:	00696c6c 	rsbeq	r6, r9, ip, ror #24
   c:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
  10:	6f675f69 	svcvs	0x00675f69
  14:	79786f74 	ldmdbvc	r8!, {r2, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
  18:	63736100 	cmnvs	r3, #0
  1c:	635f6969 	cmpvs	pc, #1720320	; 0x1a4000
  20:	5f6c7274 	svcpl	0x006c7274
  24:	5f746962 	svcpl	0x00746962
  28:	61656c63 	cmnvs	r5, r3, ror #24
  2c:	65640072 	strbvs	r0, [r4, #-114]!	; 0xffffff8e
  30:	5f79616c 	svcpl	0x0079616c
  34:	726b696d 	rsbvc	r6, fp, #1785856	; 0x1b4000
  38:	7361006f 	cmnvc	r1, #111, 0	; 0x6f
  3c:	5f696963 	svcpl	0x00696963
  40:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
  44:	6f635f65 	svcvs	0x00635f65
  48:	6f72746e 	svcvs	0x0072746e
  4c:	72656c6c 	rsbvc	r6, r5, #108, 24	; 0x6c00
  50:	554e4700 	strbpl	r4, [lr, #-1792]	; 0xfffff900
  54:	39394320 	ldmdbcc	r9!, {r5, r8, r9, lr}
  58:	322e3920 	eorcc	r3, lr, #32, 18	; 0x80000
  5c:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  60:	31393130 	teqcc	r9, r0, lsr r1
  64:	20353230 	eorscs	r3, r5, r0, lsr r2
  68:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  6c:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  70:	415b2029 	cmpmi	fp, r9, lsr #32
  74:	612f4d52 			; <UNDEFINED> instruction: 0x612f4d52
  78:	392d6d72 	pushcc	{r1, r4, r5, r6, r8, sl, fp, sp, lr}
  7c:	6172622d 	cmnvs	r2, sp, lsr #4
  80:	2068636e 	rsbcs	r6, r8, lr, ror #6
  84:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
  88:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
  8c:	37373220 	ldrcc	r3, [r7, -r0, lsr #4]!
  90:	5d393935 			; <UNDEFINED> instruction: 0x5d393935
  94:	746d2d20 	strbtvc	r2, [sp], #-3360	; 0xfffff2e0
  98:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
  9c:	666d2d20 	strbtvs	r2, [sp], -r0, lsr #26
  a0:	74616f6c 	strbtvc	r6, [r1], #-3948	; 0xfffff094
  a4:	6962612d 	stmdbvs	r2!, {r0, r2, r3, r5, r8, sp, lr}^
  a8:	666f733d 			; <UNDEFINED> instruction: 0x666f733d
  ac:	6d2d2074 	stcvs	0, cr2, [sp, #-464]!	; 0xfffffe30
  b0:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
  b4:	6d72613d 	ldfvse	f6, [r2, #-244]!	; 0xffffff0c
  b8:	6d2d3676 	stcvs	6, cr3, [sp, #-472]!	; 0xfffffe28
  bc:	20672d20 	rsbcs	r2, r7, r0, lsr #26
  c0:	20304f2d 	eorscs	r4, r0, sp, lsr #30
  c4:	6474732d 	ldrbtvs	r7, [r4], #-813	; 0xfffffcd3
  c8:	3939633d 	ldmdbcc	r9!, {r0, r2, r3, r4, r5, r8, r9, sp, lr}
  cc:	63736100 	cmnvs	r3, #0
  d0:	725f6969 	subsvc	r6, pc, #1720320	; 0x1a4000
  d4:	5f646165 	svcpl	0x00646165
  d8:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
  dc:	63007375 	movwvs	r7, #885	; 0x375
  e0:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
  e4:	7369645f 	cmnvc	r9, #1593835520	; 0x5f000000
  e8:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
  ec:	63736100 	cmnvs	r3, #0
  f0:	775f6969 	ldrbvc	r6, [pc, -r9, ror #18]
  f4:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
  f8:	7461645f 	strbtvc	r6, [r1], #-1119	; 0xfffffba1
  fc:	65640061 	strbvs	r0, [r4, #-97]!	; 0xffffff9f
 100:	5f79616c 	svcpl	0x0079616c
 104:	6e303532 	mrcvs	5, 1, r3, cr0, cr2, {1}
 108:	65720073 	ldrbvs	r0, [r2, #-115]!	; 0xffffff8d
 10c:	6c615674 	stclvs	6, cr5, [r1], #-464	; 0xfffffe30
 110:	64646100 	strbtvs	r6, [r4], #-256	; 0xffffff00
 114:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
 118:	63736100 	cmnvs	r3, #0
 11c:	725f6969 	subsvc	r6, pc, #1720320	; 0x1a4000
 120:	5f646165 	svcpl	0x00646165
 124:	746e6f63 	strbtvc	r6, [lr], #-3939	; 0xfffff09d
 128:	6c6c6f72 	stclvs	15, cr6, [ip], #-456	; 0xfffffe38
 12c:	61007265 	tstvs	r0, r5, ror #4
 130:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 134:	6165725f 	cmnvs	r5, pc, asr r2
 138:	61645f64 	cmnvs	r4, r4, ror #30
 13c:	64006174 	strvs	r6, [r0], #-372	; 0xfffffe8c
 140:	6c707369 	ldclvs	3, cr7, [r0], #-420	; 0xfffffe5c
 144:	635f7961 	cmpvs	pc, #1589248	; 0x184000
 148:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
 14c:	75006c6f 	strvc	r6, [r0, #-3183]	; 0xfffff391
 150:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
 154:	2064656e 	rsbcs	r6, r4, lr, ror #10
 158:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
 15c:	73552f00 	cmpvc	r5, #0, 30
 160:	2f737265 	svccs	0x00737265
 164:	6c6c6f67 	stclvs	15, cr6, [ip], #-412	; 0xfffffe64
 168:	442f6d75 	strtmi	r6, [pc], #-3445	; 170 <startup-0x1ffffe90>
 16c:	6d75636f 	ldclvs	3, cr6, [r5, #-444]!	; 0xfffffe44
 170:	73746e65 	cmnvc	r4, #1616	; 0x650
 174:	706f6d2f 	rsbvc	r6, pc, pc, lsr #26
 178:	6f62616c 	svcvs	0x0062616c
 17c:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
 180:	72656e6f 	rsbvc	r6, r5, #1776	; 0x6f0
 184:	504f4d2f 	subpl	r4, pc, pc, lsr #26
 188:	6570532d 	ldrbvs	r5, [r0, #-813]!	; 0xfffffcd3
 18c:	6e532f6c 	cdpvs	15, 5, cr2, cr3, cr12, {3}
 190:	00656b61 	rsbeq	r6, r5, r1, ror #22
 194:	44746572 	ldrbtmi	r6, [r4], #-1394	; 0xfffffa8e
 198:	00617461 	rsbeq	r7, r1, r1, ror #8
 19c:	746e7566 	strbtvc	r7, [lr], #-1382	; 0xfffffa9a
 1a0:	5f6e6f69 	svcpl	0x006e6f69
 1a4:	00746573 	rsbseq	r6, r4, r3, ror r5
 1a8:	65747962 	ldrbvs	r7, [r4, #-2402]!	; 0xfffff69e
 1ac:	63736100 	cmnvs	r3, #0
 1b0:	775f6969 	ldrbvc	r6, [pc, -r9, ror #18]
 1b4:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 1b8:	646d635f 	strbtvs	r6, [sp], #-863	; 0xfffffca1
 1bc:	74657200 	strbtvc	r7, [r5], #-512	; 0xfffffe00
 1c0:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
 1c4:	746e6500 	strbtvc	r6, [lr], #-1280	; 0xfffffb00
 1c8:	6d5f7972 	vldrvs.16	s15, [pc, #-228]	; ec <startup-0x1fffff14>	; <UNPREDICTABLE>
 1cc:	5f65646f 	svcpl	0x0065646f
 1d0:	00746573 	rsbseq	r6, r4, r3, ror r5
 1d4:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 1d8:	72775f69 	rsbsvc	r5, r7, #420	; 0x1a4
 1dc:	5f657469 	svcpl	0x00657469
 1e0:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
 1e4:	63736100 	cmnvs	r3, #0
 1e8:	635f6969 	cmpvs	pc, #1720320	; 0x1a4000
 1ec:	5f6c7274 	svcpl	0x006c7274
 1f0:	5f746962 	svcpl	0x00746962
 1f4:	00746573 	rsbseq	r6, r4, r3, ror r5
 1f8:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
 1fc:	672f7372 			; <UNDEFINED> instruction: 0x672f7372
 200:	756c6c6f 	strbvc	r6, [ip, #-3183]!	; 0xfffff391
 204:	6f442f6d 	svcvs	0x00442f6d
 208:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0xfffffa9d
 20c:	2f73746e 	svccs	0x0073746e
 210:	6c706f6d 	ldclvs	15, cr6, [r0], #-436	; 0xfffffe4c
 214:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
 218:	6f697461 	svcvs	0x00697461
 21c:	2f72656e 	svccs	0x0072656e
 220:	2d504f4d 	ldclcs	15, cr4, [r0, #-308]	; 0xfffffecc
 224:	6c657053 	stclvs	0, cr7, [r5], #-332	; 0xfffffeb4
 228:	616e532f 	cmnvs	lr, pc, lsr #6
 22c:	612f656b 			; <UNDEFINED> instruction: 0x612f656b
 230:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 234:	70736964 	rsbsvc	r6, r3, r4, ror #18
 238:	2e79616c 	rpwcsez	f6, f1, #4.0
 23c:	73610063 	cmnvc	r1, #99, 0	; 0x63
 240:	5f696963 	svcpl	0x00696963
 244:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
 248:	45475000 	strbmi	r5, [r7, #-0]
 24c:	54454d4f 	strbpl	r4, [r5], #-3407	; 0xfffff2b1
 250:	61005952 	tstvs	r0, r2, asr r9
 254:	00766772 	rsbseq	r6, r6, r2, ror r7
 258:	78726964 	ldmdavc	r2!, {r2, r5, r6, r8, fp, sp, lr}^
 25c:	72696400 	rsbvc	r6, r9, #0, 8
 260:	552f0079 	strpl	r0, [pc, #-121]!	; 1ef <startup-0x1ffffe11>
 264:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 268:	6c6f672f 	stclvs	7, cr6, [pc], #-188	; 1b4 <startup-0x1ffffe4c>
 26c:	2f6d756c 	svccs	0x006d756c
 270:	75636f44 	strbvc	r6, [r3, #-3908]!	; 0xfffff0bc
 274:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
 278:	6f6d2f73 	svcvs	0x006d2f73
 27c:	62616c70 	rsbvs	r6, r1, #112, 24	; 0x7000
 280:	7461726f 	strbtvc	r7, [r1], #-623	; 0xfffffd91
 284:	656e6f69 	strbvs	r6, [lr, #-3945]!	; 0xfffff097
 288:	4f4d2f72 	svcmi	0x004d2f72
 28c:	70532d50 	subsvc	r2, r3, r0, asr sp
 290:	532f6c65 			; <UNDEFINED> instruction: 0x532f6c65
 294:	656b616e 	strbvs	r6, [fp, #-366]!	; 0xfffffe92
 298:	6174732f 	cmnvs	r4, pc, lsr #6
 29c:	70757472 	rsbsvc	r7, r5, r2, ror r4
 2a0:	6400632e 	strvs	r6, [r0], #-814	; 0xfffffcd2
 2a4:	5f776172 	svcpl	0x00776172
 2a8:	6b616e73 	blvs	185bc7c <startup-0x1e7a4384>
 2ac:	6d690065 	stclvs	0, cr0, [r9, #-404]!	; 0xfffffe6c
 2b0:	5f656761 	svcpl	0x00656761
 2b4:	73746962 	cmnvc	r4, #1605632	; 0x188000
 2b8:	696e6900 	stmdbvs	lr!, {r8, fp, sp, lr}^
 2bc:	6e735f74 	mrcvs	15, 3, r5, cr3, cr4, {3}
 2c0:	00656b61 	rsbeq	r6, r5, r1, ror #22
 2c4:	696f5074 	stmdbvs	pc!, {r2, r4, r5, r6, ip, lr}^	; <UNPREDICTABLE>
 2c8:	7300746e 	movwvc	r7, #1134	; 0x46e
 2cc:	656b616e 	strbvs	r6, [fp, #-366]!	; 0xfffffe92
 2d0:	64616568 	strbtvs	r6, [r1], #-1384	; 0xfffffa98
 2d4:	6f65675f 	svcvs	0x0065675f
 2d8:	7274656d 	rsbsvc	r6, r4, #457179136	; 0x1b400000
 2dc:	4f500079 	svcmi	0x00500079
 2e0:	00544e49 	subseq	r4, r4, r9, asr #28
 2e4:	5f746573 	svcpl	0x00746573
 2e8:	65657073 	strbvs	r7, [r5, #-115]!	; 0xffffff8d
 2ec:	6f700064 	svcvs	0x00700064
 2f0:	70007873 	andvc	r7, r0, r3, ror r8
 2f4:	0079736f 	rsbseq	r7, r9, pc, ror #6
 2f8:	67696568 	strbvs	r6, [r9, -r8, ror #10]!
 2fc:	69007468 	stmdbvs	r0, {r3, r5, r6, sl, ip, sp, lr}
 300:	5f74696e 	svcpl	0x0074696e
 304:	00707061 	rsbseq	r7, r0, r1, rrx
 308:	6b616e73 	blvs	185bcdc <startup-0x1e7a4324>
 30c:	646f6265 	strbtvs	r6, [pc], #-613	; 314 <startup-0x1ffffcec>
 310:	65675f79 	strbvs	r5, [r7, #-3961]!	; 0xfffff087
 314:	74656d6f 	strbtvc	r6, [r5], #-3439	; 0xfffff291
 318:	66007972 			; <UNDEFINED> instruction: 0x66007972
 31c:	5f646f6f 	svcpl	0x00646f6f
 320:	6d6f6567 	cfstr64vs	mvdx6, [pc, #-412]!	; 18c <startup-0x1ffffe74>
 324:	79727465 	ldmdbvc	r2!, {r0, r2, r5, r6, sl, ip, sp, lr}^
 328:	69616d00 	stmdbvs	r1!, {r8, sl, fp, sp, lr}^
 32c:	6e69006e 	cdpvs	0, 6, cr0, cr9, cr14, {3}
 330:	715f7469 	cmpvc	pc, r9, ror #8
 334:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0xfffffa8b
 338:	72757400 	rsbsvc	r7, r5, #0, 8
 33c:	6e73006e 	cdpvs	0, 7, cr0, cr3, cr14, {3}
 340:	62656b61 	rsbvs	r6, r5, #99328	; 0x18400
 344:	0079646f 	rsbseq	r6, r9, pc, ror #8
 348:	6f654774 	svcvs	0x00654774
 34c:	7274656d 	rsbsvc	r6, r4, #457179136	; 0x1b400000
 350:	6e730079 	mrcvs	0, 3, r0, cr3, cr9, {3}
 354:	68656b61 	stmdavs	r5!, {r0, r5, r6, r8, r9, fp, sp, lr}^
 358:	00646165 	rsbeq	r6, r4, r5, ror #2
 35c:	74736572 	ldrbtvc	r6, [r3], #-1394	; 0xfffffa8e
 360:	00747261 	rsbseq	r7, r4, r1, ror #4
 364:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0xfffff68d
 368:	69730078 	ldmdbvs	r3!, {r3, r4, r5, r6}^
 36c:	0079657a 	rsbseq	r6, r9, sl, ror r5
 370:	63677261 	cmnvs	r7, #268435462	; 0x10000006
 374:	61747300 	cmnvs	r4, r0, lsl #6
 378:	70757472 	rsbsvc	r7, r5, r2, ror r4
 37c:	61726400 	cmnvs	r2, r0, lsl #8
 380:	6f660077 	svcvs	0x00660077
 384:	6f5f646f 	svcvs	0x005f646f
 388:	6b006a62 	blvs	1ad18 <startup-0x1ffe52e8>
 38c:	735f7965 	cmpvc	pc, #1654784	; 0x194000
 390:	6b6f7274 	blvs	1bdcd68 <startup-0x1e423298>
 394:	69770065 	ldmdbvs	r7!, {r0, r2, r5, r6}^
 398:	00687464 	rsbeq	r7, r8, r4, ror #8
 39c:	6b636162 	blvs	18d892c <startup-0x1e7276d4>
 3a0:	66667542 	strbtvs	r7, [r6], -r2, asr #10
 3a4:	73007265 	movwvc	r7, #613	; 0x265
 3a8:	6f5f7465 	svcvs	0x005f7465
 3ac:	63656a62 	cmnvs	r5, #401408	; 0x62000
 3b0:	70735f74 	rsbsvc	r5, r3, r4, ror pc
 3b4:	00646565 	rsbeq	r6, r4, r5, ror #10
 3b8:	74646977 	strbtvc	r6, [r4], #-2423	; 0xfffff689
 3bc:	6e695f68 	cdpvs	15, 6, cr5, cr9, cr8, {3}
 3c0:	7479625f 	ldrbtvc	r6, [r9], #-607	; 0xfffffda1
 3c4:	6c007365 	stcvs	3, cr7, [r0], {101}	; 0x65
 3c8:	5f64616f 	svcpl	0x0064616f
 3cc:	69727073 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, ip, sp, lr}^
 3d0:	63006574 	movwvs	r6, #1396	; 0x574
 3d4:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
 3d8:	6a626f5f 	bvs	189c15c <startup-0x1e763ea4>
 3dc:	00746365 	rsbseq	r6, r4, r5, ror #6
 3e0:	6a624f74 	bvs	18941b8 <startup-0x1e76be48>
 3e4:	61726400 	cmnvs	r2, r0, lsl #8
 3e8:	626f5f77 	rsbvs	r5, pc, #476	; 0x1dc
 3ec:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 3f0:	73657200 	cmnvc	r5, #0, 4
 3f4:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
 3f8:	6d61675f 	stclvs	7, cr6, [r1, #-380]!	; 0xfffffe84
 3fc:	756e0065 	strbvc	r0, [lr, #-101]!	; 0xffffff9b
 400:	696f706d 	stmdbvs	pc!, {r0, r2, r3, r5, r6, ip, sp, lr}^	; <UNPREDICTABLE>
 404:	0073746e 	rsbseq	r7, r3, lr, ror #8
 408:	77617264 	strbvc	r7, [r1, -r4, ror #4]!
 40c:	7270735f 	rsbsvc	r7, r0, #2080374785	; 0x7c000001
 410:	00657469 	rsbeq	r7, r5, r9, ror #8
 414:	65766f6d 	ldrbvs	r6, [r6, #-3949]!	; 0xfffff093
 418:	6a626f5f 	bvs	189c19c <startup-0x1e763e64>
 41c:	00746365 	rsbseq	r6, r4, r5, ror #6
 420:	646f6f66 	strbtvs	r6, [pc], #-3942	; 428 <startup-0x1ffffbd8>
 424:	65707300 	ldrbvs	r7, [r0, #-768]!	; 0xfffffd00
 428:	00786465 	rsbseq	r6, r8, r5, ror #8
 42c:	65657073 	strbvs	r7, [r5, #-115]!	; 0xffffff8d
 430:	50007964 	andpl	r7, r0, r4, ror #18
 434:	454a424f 	strbmi	r4, [sl, #-591]	; 0xfffffdb1
 438:	69005443 	stmdbvs	r0, {r0, r1, r6, sl, ip, lr}
 43c:	7475706e 	ldrbtvc	r7, [r5], #-110	; 0xffffff92
 440:	79656b00 	stmdbvc	r5!, {r8, r9, fp, sp, lr}^
 444:	006c6156 	rsbeq	r6, ip, r6, asr r1
 448:	6279656b 	rsbsvs	r6, r9, #448790528	; 0x1ac00000
 44c:	74756f00 	ldrbtvc	r6, [r5], #-3840	; 0xfffff100
 450:	67657337 			; <UNDEFINED> instruction: 0x67657337
 454:	61657200 	cmnvs	r5, r0, lsl #4
 458:	6f635f64 	svcvs	0x00635f64
 45c:	6d756f6c 	ldclvs	15, cr6, [r5, #-432]!	; 0xfffffe50
 460:	656b006e 	strbvs	r0, [fp, #-110]!	; 0xffffff92
 464:	61765f79 	cmnvs	r6, r9, ror pc
 468:	0065756c 	rsbeq	r7, r5, ip, ror #10
 46c:	69746361 	ldmdbvs	r4!, {r0, r5, r6, r8, r9, sp, lr}^
 470:	65746176 	ldrbvs	r6, [r4, #-374]!	; 0xfffffe8a
 474:	776f725f 			; <UNDEFINED> instruction: 0x776f725f
 478:	73552f00 	cmpvc	r5, #0, 30
 47c:	2f737265 	svccs	0x00737265
 480:	6c6c6f67 	stclvs	15, cr6, [ip], #-412	; 0xfffffe64
 484:	442f6d75 	strtmi	r6, [pc], #-3445	; 48c <startup-0x1ffffb74>
 488:	6d75636f 	ldclvs	3, cr6, [r5, #-444]!	; 0xfffffe44
 48c:	73746e65 	cmnvc	r4, #1616	; 0x650
 490:	706f6d2f 	rsbvc	r6, pc, pc, lsr #26
 494:	6f62616c 	svcvs	0x0062616c
 498:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
 49c:	72656e6f 	rsbvc	r6, r5, #1776	; 0x6f0
 4a0:	504f4d2f 	subpl	r4, pc, pc, lsr #26
 4a4:	6570532d 	ldrbvs	r5, [r0, #-813]!	; 0xfffffcd3
 4a8:	6e532f6c 	cdpvs	15, 5, cr2, cr3, cr12, {3}
 4ac:	2f656b61 	svccs	0x00656b61
 4b0:	6279656b 	rsbsvs	r6, r9, #448790528	; 0x1ac00000
 4b4:	6400632e 	strvs	r6, [r0], #-814	; 0xfffffcd2
 4b8:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 4bc:	3030355f 	eorscc	r3, r0, pc, asr r5
 4c0:	2f00736e 	svccs	0x0000736e
 4c4:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
 4c8:	6f672f73 	svcvs	0x00672f73
 4cc:	6d756c6c 	ldclvs	12, cr6, [r5, #-432]!	; 0xfffffe50
 4d0:	636f442f 	cmnvs	pc, #788529152	; 0x2f000000
 4d4:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
 4d8:	6d2f7374 	stcvs	3, cr7, [pc, #-464]!	; 310 <startup-0x1ffffcf0>
 4dc:	616c706f 	cmnvs	ip, pc, rrx
 4e0:	61726f62 	cmnvs	r2, r2, ror #30
 4e4:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 4e8:	4d2f7265 	sfmmi	f7, 4, [pc, #-404]!	; 35c <startup-0x1ffffca4>
 4ec:	532d504f 			; <UNDEFINED> instruction: 0x532d504f
 4f0:	2f6c6570 	svccs	0x006c6570
 4f4:	6b616e53 	blvs	185be48 <startup-0x1e7a41b8>
 4f8:	65642f65 	strbvs	r2, [r4, #-3941]!	; 0xfffff09b
 4fc:	2e79616c 	rpwcsez	f6, f1, #4.0
 500:	72670063 	rsbvc	r0, r7, #99, 0	; 0x63
 504:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 508:	72775f63 	rsbsvc	r5, r7, #396	; 0x18c
 50c:	5f657469 	svcpl	0x00657469
 510:	6d6d6f63 	stclvs	15, cr6, [sp, #-396]!	; 0xfffffe74
 514:	00646e61 	rsbeq	r6, r4, r1, ror #28
 518:	70617267 	rsbvc	r7, r1, r7, ror #4
 51c:	5f636968 	svcpl	0x00636968
 520:	77617264 	strbvc	r7, [r1, -r4, ror #4]!
 524:	7263735f 	rsbvc	r7, r3, #2080374785	; 0x7c000001
 528:	006e6565 	rsbeq	r6, lr, r5, ror #10
 52c:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
 530:	672f7372 			; <UNDEFINED> instruction: 0x672f7372
 534:	756c6c6f 	strbvc	r6, [ip, #-3183]!	; 0xfffff391
 538:	6f442f6d 	svcvs	0x00442f6d
 53c:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0xfffffa9d
 540:	2f73746e 	svccs	0x0073746e
 544:	6c706f6d 	ldclvs	15, cr6, [r0], #-436	; 0xfffffe4c
 548:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
 54c:	6f697461 	svcvs	0x00697461
 550:	2f72656e 	svccs	0x0072656e
 554:	2d504f4d 	ldclcs	15, cr4, [r0, #-308]	; 0xfffffecc
 558:	6c657053 	stclvs	0, cr7, [r5], #-332	; 0xfffffeb4
 55c:	616e532f 	cmnvs	lr, pc, lsr #6
 560:	672f656b 	strvs	r6, [pc, -fp, ror #10]!
 564:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 568:	69646369 	stmdbvs	r4!, {r0, r3, r5, r6, r8, r9, sp, lr}^
 56c:	616c7073 	smcvs	50947	; 0xc703
 570:	00632e79 	rsbeq	r2, r3, r9, ror lr
 574:	70617267 	rsbvc	r7, r1, r7, ror #4
 578:	5f636968 	svcpl	0x00636968
 57c:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
 580:	7461645f 	strbtvc	r6, [r1], #-1119	; 0xfffffba1
 584:	72670061 	rsbvc	r0, r7, #97, 0	; 0x61
 588:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 58c:	65725f63 	ldrbvs	r5, [r2, #-3939]!	; 0xfffff09d
 590:	70006461 	andvc	r6, r0, r1, ror #8
 594:	6c657869 	stclvs	8, cr7, [r5], #-420	; 0xfffffe5c
 598:	61726700 	cmnvs	r2, r0, lsl #14
 59c:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 5a0:	7274635f 	rsbsvc	r6, r4, #2080374785	; 0x7c000001
 5a4:	69625f6c 	stmdbvs	r2!, {r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
 5a8:	65735f74 	ldrbvs	r5, [r3, #-3956]!	; 0xfffff08c
 5ac:	6c630074 	stclvs	0, cr0, [r3], #-464	; 0xfffffe30
 5b0:	5f726165 	svcpl	0x00726165
 5b4:	6b636162 	blvs	18d8b44 <startup-0x1e7274bc>
 5b8:	66667562 	strbtvs	r7, [r6], -r2, ror #10
 5bc:	67007265 	strvs	r7, [r0, -r5, ror #4]
 5c0:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 5c4:	775f6369 	ldrbvc	r6, [pc, -r9, ror #6]
 5c8:	5f746961 	svcpl	0x00746961
 5cc:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
 5d0:	616d0079 	smcvs	53257	; 0xd009
 5d4:	75006b73 	strvc	r6, [r0, #-2931]	; 0xfffff48d
 5d8:	38746e69 	ldmdacc	r4!, {r0, r3, r5, r6, r9, sl, fp, sp, lr}^
 5dc:	6700745f 	smlsdvs	r0, pc, r4, r7	; <UNPREDICTABLE>
 5e0:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 5e4:	775f6369 	ldrbvc	r6, [pc, -r9, ror #6]
 5e8:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 5ec:	6c657300 	stclvs	3, cr7, [r5], #-0
 5f0:	5f746365 	svcpl	0x00746365
 5f4:	746e6f63 	strbtvc	r6, [lr], #-3939	; 0xfffff09d
 5f8:	6c6c6f72 	stclvs	15, cr6, [ip], #-456	; 0xfffffe38
 5fc:	69007265 	stmdbvs	r0, {r0, r2, r5, r6, r9, ip, sp, lr}
 600:	7865646e 	stmdavc	r5!, {r1, r2, r3, r5, r6, sl, sp, lr}^
 604:	61726700 	cmnvs	r2, r0, lsl #14
 608:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 60c:	656c635f 	strbvs	r6, [ip, #-863]!	; 0xfffffca1
 610:	735f7261 	cmpvc	pc, #268435462	; 0x10000006
 614:	65657263 	strbvs	r7, [r5, #-611]!	; 0xfffffd9d
 618:	7267006e 	rsbvc	r0, r7, #110, 0	; 0x6e
 61c:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 620:	72775f63 	rsbsvc	r5, r7, #396	; 0x18c
 624:	5f657469 	svcpl	0x00657469
 628:	61746164 	cmnvs	r4, r4, ror #2
 62c:	61726700 	cmnvs	r2, r0, lsl #14
 630:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 634:	7274635f 	rsbsvc	r6, r4, #2080374785	; 0x7c000001
 638:	69625f6c 	stmdbvs	r2!, {r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
 63c:	6c635f74 	stclvs	15, cr5, [r3], #-464	; 0xfffffe30
 640:	00726165 	rsbseq	r6, r2, r5, ror #2
 644:	65676170 	strbvs	r6, [r7, #-368]!	; 0xfffffe90
 648:	61726700 	cmnvs	r2, r0, lsl #14
 64c:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 650:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
 654:	65720074 	ldrbvs	r0, [r2, #-116]!	; 0xffffff8c
 658:	6c617674 	stclvs	6, cr7, [r1], #-464	; 0xfffffe30
 65c:	73645f00 	cmnvc	r4, #0, 30
 660:	61685f6f 	cmnvs	r8, pc, ror #30
 664:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0xfffffb92
 668:	46736900 	ldrbtmi	r6, [r3], -r0, lsl #18
 66c:	006c6c75 	rsbeq	r6, ip, r5, ror ip
 670:	7a69735f 	bvc	1a5d3f4 <startup-0x1e5a2c0c>
 674:	725f0065 	subsvc	r0, pc, #101, 0	; 0x65
 678:	34646e61 	strbtcc	r6, [r4], #-3681	; 0xfffff19f
 67c:	655f0038 	ldrbvs	r0, [pc, #-56]	; 64c <startup-0x1ffff9b4>
 680:	6772656d 	ldrbvs	r6, [r2, -sp, ror #10]!
 684:	79636e65 	stmdbvc	r3!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
 688:	63775f00 	cmnvs	r7, #0, 30
 68c:	6d6f7472 	cfstrdvs	mvd7, [pc, #-456]!	; 4cc <startup-0x1ffffb34>
 690:	74735f62 	ldrbtvc	r5, [r3], #-3938	; 0xfffff09e
 694:	00657461 	rsbeq	r7, r5, r1, ror #8
 698:	7363775f 	cmnvc	r3, #24903680	; 0x17c0000
 69c:	6d6f7472 	cfstrdvs	mvd7, [pc, #-456]!	; 4dc <startup-0x1ffffb24>
 6a0:	735f7362 	cmpvc	pc, #-2013265919	; 0x88000001
 6a4:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
 6a8:	6e6f6c00 	cdpvs	12, 6, cr6, cr15, cr0, {0}
 6ac:	6f6c2067 	svcvs	0x006c2067
 6b0:	7520676e 	strvc	r6, [r0, #-1902]!	; 0xfffff892
 6b4:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
 6b8:	2064656e 	rsbcs	r6, r4, lr, ror #10
 6bc:	00746e69 	rsbseq	r6, r4, r9, ror #28
 6c0:	66626c5f 			; <UNDEFINED> instruction: 0x66626c5f
 6c4:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0xfffff68d
 6c8:	6d657200 	sfmvs	f7, 2, [r5, #-0]
 6cc:	0065766f 	rsbeq	r7, r5, pc, ror #12
 6d0:	6f6c5f5f 	svcvs	0x006c5f5f
 6d4:	656c6163 	strbvs	r6, [ip, #-355]!	; 0xfffffe9d
 6d8:	5f00745f 	svcpl	0x0000745f
 6dc:	7472626d 	ldrbtvc	r6, [r2], #-621	; 0xfffffd93
 6e0:	5f63776f 	svcpl	0x0063776f
 6e4:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
 6e8:	5f5f0065 	svcpl	0x005f0065
 6ec:	735f6d74 	cmpvc	pc, #116, 26	; 0x1d00
 6f0:	6c006365 	stcvs	3, cr6, [r0], {101}	; 0x65
 6f4:	20676e6f 	rsbcs	r6, r7, pc, ror #28
 6f8:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
 6fc:	746e6920 	strbtvc	r6, [lr], #-2336	; 0xfffff6e0
 700:	62755f00 	rsbsvs	r5, r5, #0, 30
 704:	5f006675 	svcpl	0x00006675
 708:	65736162 	ldrbvs	r6, [r3, #-354]!	; 0xfffffe9e
 70c:	745f5f00 	ldrbvc	r5, [pc], #-3840	; 714 <startup-0x1ffff8ec>
 710:	6f685f6d 	svcvs	0x00685f6d
 714:	5f007275 	svcpl	0x00007275
 718:	0066735f 	rsbeq	r7, r6, pc, asr r3
 71c:	5f6e6f5f 	svcpl	0x006e6f5f
 720:	74697865 	strbtvc	r7, [r9], #-2149	; 0xfffff79b
 724:	6772615f 			; <UNDEFINED> instruction: 0x6772615f
 728:	635f0073 	cmpvs	pc, #115, 0	; 0x73
 72c:	696b6f6f 	stmdbvs	fp!, {r0, r1, r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
 730:	5f5f0065 	svcpl	0x005f0065
 734:	756c6773 	strbvc	r6, [ip, #-1907]!	; 0xfffff88d
 738:	73690065 	cmnvc	r9, #101, 0	; 0x65
 73c:	74706d45 	ldrbtvc	r6, [r0], #-3397	; 0xfffff2bb
 740:	665f0079 			; <UNDEFINED> instruction: 0x665f0079
 744:	7367616c 	cmnvc	r7, #27
 748:	73695f00 	cmnvc	r9, #0, 30
 74c:	6178635f 	cmnvs	r8, pc, asr r3
 750:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
 754:	006e6964 	rsbeq	r6, lr, r4, ror #18
 758:	6b6c625f 	blvs	1b190dc <startup-0x1e4e6f24>
 75c:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0xfffff68d
 760:	76635f00 	strbtvc	r5, [r3], -r0, lsl #30
 764:	66756274 			; <UNDEFINED> instruction: 0x66756274
 768:	666f5f00 	strbtvs	r5, [pc], -r0, lsl #30
 76c:	74657366 	strbtvc	r7, [r5], #-870	; 0xfffffc9a
 770:	626d5f00 	rsbvs	r5, sp, #0, 30
 774:	6f747273 	svcvs	0x00747273
 778:	5f736377 	svcpl	0x00736377
 77c:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
 780:	6d5f0065 	ldclvs	0, cr0, [pc, #-404]	; 5f4 <startup-0x1ffffa0c>
 784:	656c7262 	strbvs	r7, [ip, #-610]!	; 0xfffffd9e
 788:	74735f6e 	ldrbtvc	r5, [r3], #-3950	; 0xfffff092
 78c:	00657461 	rsbeq	r7, r5, r1, ror #8
 790:	616e665f 	cmnvs	lr, pc, asr r6
 794:	00736772 	rsbseq	r6, r3, r2, ror r7
 798:	736e665f 	cmnvc	lr, #99614720	; 0x5f00000
 79c:	69735f00 	ldmdbvs	r3!, {r8, r9, sl, fp, ip, lr}^
 7a0:	5f006e67 	svcpl	0x00006e67
 7a4:	636f6c66 	cmnvs	pc, #26112	; 0x6600
 7a8:	00745f6b 	rsbseq	r5, r4, fp, ror #30
 7ac:	6474735f 	ldrbtvs	r7, [r4], #-863	; 0xfffffca1
 7b0:	00727265 	rsbseq	r7, r2, r5, ror #4
 7b4:	6769425f 			; <UNDEFINED> instruction: 0x6769425f
 7b8:	00746e69 	rsbseq	r6, r4, r9, ror #28
 7bc:	6d61675f 	stclvs	7, cr6, [r1, #-380]!	; 0xfffffe84
 7c0:	735f616d 	cmpvc	pc, #1073741851	; 0x4000001b
 7c4:	676e6769 	strbvs	r6, [lr, -r9, ror #14]!
 7c8:	5f006d61 	svcpl	0x00006d61
 7cc:	75736572 	ldrbvc	r6, [r3, #-1394]!	; 0xfffffa8e
 7d0:	6b5f746c 	blvs	17dd988 <startup-0x1e822678>
 7d4:	745f5f00 	ldrbvc	r5, [pc], #-3840	; 7dc <startup-0x1ffff824>
 7d8:	5f5f006d 	svcpl	0x005f006d
 7dc:	62686377 	rsbvs	r6, r8, #-603979775	; 0xdc000001
 7e0:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
 7e4:	74756f64 	ldrbtvc	r6, [r5], #-3940	; 0xfffff09c
 7e8:	76635f00 	strbtvc	r5, [r3], -r0, lsl #30
 7ec:	6e656c74 	mcrvs	12, 3, r6, cr5, cr4, {3}
 7f0:	69665f00 	stmdbvs	r6!, {r8, r9, sl, fp, ip, lr}^
 7f4:	5f00656c 	svcpl	0x0000656c
 7f8:	626f696e 	rsbvs	r6, pc, #1802240	; 0x1b8000
 7fc:	65700073 	ldrbvs	r0, [r0, #-115]!	; 0xffffff8d
 800:	73006b65 	movwvc	r6, #2917	; 0xb65
 804:	74726f68 	ldrbtvc	r6, [r2], #-3944	; 0xfffff098
 808:	736e7520 	cmnvc	lr, #32, 10	; 0x8000000
 80c:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
 810:	6e692064 	cdpvs	0, 6, cr2, cr9, cr4, {3}
 814:	615f0074 	cmpvs	pc, r4, ror r0	; <UNPREDICTABLE>
 818:	69786574 	ldmdbvs	r8!, {r2, r4, r5, r6, r8, sl, sp, lr}^
 81c:	5f003074 	svcpl	0x00003074
 820:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
 824:	625f6c61 	subsvs	r6, pc, #24832	; 0x6100
 828:	5f006675 	svcpl	0x00006675
 82c:	74637361 	strbtvc	r7, [r3], #-865	; 0xfffffc9f
 830:	5f656d69 	svcpl	0x00656d69
 834:	00667562 	rsbeq	r7, r6, r2, ror #10
 838:	7365725f 	cmnvc	r5, #-268435451	; 0xf0000005
 83c:	00746c75 	rsbseq	r6, r4, r5, ror ip
 840:	63775f5f 	cmnvs	r7, #380	; 0x17c
 844:	4c5f0068 	mrrcmi	0, 6, r0, pc, cr8	; <UNPREDICTABLE>
 848:	5f4b434f 	svcpl	0x004b434f
 84c:	69770054 	ldmdbvs	r7!, {r2, r4, r6}^
 850:	745f746e 	ldrbvc	r7, [pc], #-1134	; 858 <startup-0x1ffff7a8>
 854:	6c665f00 	stclvs	15, cr5, [r6], #-0
 858:	32736761 	rsbscc	r6, r3, #25427968	; 0x1840000
 85c:	745f5f00 	ldrbvc	r5, [pc], #-3840	; 864 <startup-0x1ffff79c>
 860:	65795f6d 	ldrbvs	r5, [r9, #-3949]!	; 0xfffff093
 864:	5f007261 	svcpl	0x00007261
 868:	6c616d6e 	stclvs	13, cr6, [r1], #-440	; 0xfffffe48
 86c:	00636f6c 	rsbeq	r6, r3, ip, ror #30
 870:	78656e5f 	stmdavc	r5!, {r0, r1, r2, r3, r4, r6, r9, sl, fp, sp, lr}^
 874:	5f006674 	svcpl	0x00006674
 878:	5f6d745f 	svcpl	0x006d745f
 87c:	006e6f6d 	rsbeq	r6, lr, sp, ror #30
 880:	6574615f 	ldrbvs	r6, [r4, #-351]!	; 0xfffffea1
 884:	00746978 	rsbseq	r6, r4, r8, ror r9
 888:	64735f5f 	ldrbtvs	r5, [r3], #-3935	; 0xfffff0a1
 88c:	6e696469 	cdpvs	4, 6, cr6, cr9, cr9, {3}
 890:	5f007469 	svcpl	0x00007469
 894:	5f66666f 	svcpl	0x0066666f
 898:	665f0074 			; <UNDEFINED> instruction: 0x665f0074
 89c:	6c656572 	cfstr64vs	mvdx6, [r5], #-456	; 0xfffffe38
 8a0:	00747369 	rsbseq	r7, r4, r9, ror #6
 8a4:	7463775f 	strbtvc	r7, [r3], #-1887	; 0xfffff8a1
 8a8:	5f626d6f 	svcpl	0x00626d6f
 8ac:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
 8b0:	425f0065 	subsmi	r0, pc, #101, 0	; 0x65
 8b4:	006c6f6f 	rsbeq	r6, ip, pc, ror #30
 8b8:	77656e5f 			; <UNDEFINED> instruction: 0x77656e5f
 8bc:	5f685f00 	svcpl	0x00685f00
 8c0:	6e727265 	cdpvs	2, 7, cr7, cr2, cr5, {3}
 8c4:	6873006f 	ldmdavs	r3!, {r0, r1, r2, r3, r5, r6}^
 8c8:	2074726f 	rsbscs	r7, r4, pc, ror #4
 8cc:	00746e69 	rsbseq	r6, r4, r9, ror #28
 8d0:	6d745f5f 	ldclvs	15, cr5, [r4, #-380]!	; 0xfffffe84
 8d4:	6164795f 	cmnvs	r4, pc, asr r9
 8d8:	5f5f0079 	svcpl	0x005f0079
 8dc:	66756273 			; <UNDEFINED> instruction: 0x66756273
 8e0:	6f695f00 	svcvs	0x00695f00
 8e4:	5f007362 	svcpl	0x00007362
 8e8:	4c49465f 	mcrrmi	6, 5, r4, r9, cr15
 8ec:	6d5f0045 	ldclvs	0, cr0, [pc, #-276]	; 7e0 <startup-0x1ffff820>
 8f0:	61747362 	cmnvs	r4, r2, ror #6
 8f4:	745f6574 	ldrbvc	r6, [pc], #-1396	; 8fc <startup-0x1ffff704>
 8f8:	735f5f00 	cmpvc	pc, #0, 30
 8fc:	454c4946 	strbmi	r4, [ip, #-2374]	; 0xfffff6ba
 900:	626d5f00 	rsbvs	r5, sp, #0, 30
 904:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
 908:	725f0065 	subsvc	r0, pc, #101, 0	; 0x65
 90c:	5f646e61 	svcpl	0x00646e61
 910:	7478656e 	ldrbtvc	r6, [r8], #-1390	; 0xfffffa92
 914:	736e6900 	cmnvc	lr, #0, 18
 918:	00747265 	rsbseq	r7, r4, r5, ror #4
 91c:	6c626d5f 	stclvs	13, cr6, [r2], #-380	; 0xfffffe84
 920:	735f6e65 	cmpvc	pc, #1616	; 0x650
 924:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
 928:	6e695f00 	cdpvs	15, 6, cr5, cr9, cr0, {0}
 92c:	695f0063 	ldmdbvs	pc, {r0, r1, r5, r6}^	; <UNPREDICTABLE>
 930:	5f00646e 	svcpl	0x0000646e
 934:	61636f6c 	cmnvs	r3, ip, ror #30
 938:	5f00656c 	svcpl	0x0000656c
 93c:	656c635f 	strbvs	r6, [ip, #-863]!	; 0xfffffca1
 940:	70756e61 	rsbsvc	r6, r5, r1, ror #28
 944:	6e755f00 	cdpvs	15, 7, cr5, cr5, cr0, {0}
 948:	63657073 	cmnvs	r5, #115, 0	; 0x73
 94c:	65696669 	strbvs	r6, [r9, #-1641]!	; 0xfffff997
 950:	6f6c5f64 	svcvs	0x006c5f64
 954:	656c6163 	strbvs	r6, [ip, #-355]!	; 0xfffffe9d
 958:	666e695f 			; <UNDEFINED> instruction: 0x666e695f
 95c:	6d5f006f 	ldclvs	0, cr0, [pc, #-444]	; 7a8 <startup-0x1ffff858>
 960:	64777861 	ldrbtvs	r7, [r7], #-2145	; 0xfffff79f
 964:	725f0073 	subsvc	r0, pc, #115, 0	; 0x73
 968:	746e6565 	strbtvc	r6, [lr], #-1381	; 0xfffffa9b
 96c:	65735f00 	ldrbvs	r5, [r3, #-3840]!	; 0xfffff100
 970:	5f006465 	svcpl	0x00006465
 974:	756f635f 	strbvc	r6, [pc, #-863]!	; 61d <startup-0x1ffff9e3>
 978:	5f00746e 	svcpl	0x0000746e
 97c:	636f6c5f 	cmnvs	pc, #24320	; 0x5f00
 980:	5f5f006b 	svcpl	0x005f006b
 984:	756c6176 	strbvc	r6, [ip, #-374]!	; 0xfffffe8a
 988:	735f0065 	cmpvc	pc, #101, 0	; 0x65
 98c:	006b6565 	rsbeq	r6, fp, r5, ror #10
 990:	6f70665f 	svcvs	0x0070665f
 994:	00745f73 	rsbseq	r5, r4, r3, ror pc
 998:	6d745f5f 	ldclvs	15, cr5, [r4, #-380]!	; 0xfffffe84
 99c:	6e696d5f 	mcrvs	13, 3, r6, cr9, cr15, {2}
 9a0:	6a626f00 	bvs	189c5a8 <startup-0x1e763a58>
 9a4:	61727241 	cmnvs	r2, r1, asr #4
 9a8:	6d5f0079 	ldclvs	0, cr0, [pc, #-484]	; 7cc <startup-0x1ffff834>
 9ac:	00746c75 	rsbseq	r6, r4, r5, ror ip
 9b0:	7274735f 	rsbsvc	r7, r4, #2080374785	; 0x7c000001
 9b4:	5f6b6f74 	svcpl	0x006b6f74
 9b8:	7473616c 	ldrbtvc	r6, [r3], #-364	; 0xfffffe94
 9bc:	61657200 	cmnvs	r5, r0, lsl #4
 9c0:	74690072 	strbtvc	r0, [r9], #-114	; 0xffffff8e
 9c4:	6f436d65 	svcvs	0x00436d65
 9c8:	00746e75 	rsbseq	r6, r4, r5, ror lr
 9cc:	746e665f 	strbtvc	r6, [lr], #-1631	; 0xfffff9a1
 9d0:	73657079 	cmnvc	r5, #121, 0	; 0x79
 9d4:	64615f00 	strbtvs	r5, [r1], #-3840	; 0xfffff100
 9d8:	5f5f0064 	svcpl	0x005f0064
 9dc:	6e6f4c55 	mcrvs	12, 3, r4, cr15, cr5, {2}
 9e0:	675f0067 	ldrbvs	r0, [pc, -r7, rrx]
 9e4:	61647465 	cmnvs	r4, r5, ror #8
 9e8:	655f6574 	ldrbvs	r6, [pc, #-1396]	; 47c <startup-0x1ffffb84>
 9ec:	66007272 			; <UNDEFINED> instruction: 0x66007272
 9f0:	746e6f72 	strbtvc	r6, [lr], #-3954	; 0xfffff08e
 9f4:	6c675f00 	stclvs	15, cr5, [r7], #-0
 9f8:	6c61626f 	sfmvs	f6, 2, [r1], #-444	; 0xfffffe44
 9fc:	706d695f 	rsbvc	r6, sp, pc, asr r9
 a00:	5f657275 	svcpl	0x00657275
 a04:	00727470 	rsbseq	r7, r2, r0, ror r4
 a08:	756e755f 	strbvc	r7, [lr, #-1375]!	; 0xfffffaa1
 a0c:	5f646573 	svcpl	0x00646573
 a10:	646e6172 	strbtvs	r6, [lr], #-370	; 0xfffffe8e
 a14:	73552f00 	cmpvc	r5, #0, 30
 a18:	2f737265 	svccs	0x00737265
 a1c:	6c6c6f67 	stclvs	15, cr6, [ip], #-412	; 0xfffffe64
 a20:	442f6d75 	strtmi	r6, [pc], #-3445	; a28 <startup-0x1ffff5d8>
 a24:	6d75636f 	ldclvs	3, cr6, [r5, #-444]!	; 0xfffffe44
 a28:	73746e65 	cmnvc	r4, #1616	; 0x650
 a2c:	706f6d2f 	rsbvc	r6, pc, pc, lsr #26
 a30:	6f62616c 	svcvs	0x0062616c
 a34:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
 a38:	72656e6f 	rsbvc	r6, r5, #1776	; 0x6f0
 a3c:	504f4d2f 	subpl	r4, pc, pc, lsr #26
 a40:	6570532d 	ldrbvs	r5, [r0, #-813]!	; 0xfffffcd3
 a44:	6e532f6c 	cdpvs	15, 5, cr2, cr3, cr12, {3}
 a48:	2f656b61 	svccs	0x00656b61
 a4c:	75657571 	strbvc	r7, [r5, #-1393]!	; 0xfffffa8f
 a50:	00632e65 	rsbeq	r2, r3, r5, ror #28
 a54:	7364775f 	cmnvc	r4, #24903680	; 0x17c0000
 a58:	745f5f00 	ldrbvc	r5, [pc], #-3840	; a60 <startup-0x1ffff5a0>
 a5c:	64775f6d 	ldrbtvs	r5, [r7], #-3949	; 0xfffff093
 a60:	5f007961 	svcpl	0x00007961
 a64:	65756c67 	ldrbvs	r6, [r5, #-3175]!	; 0xfffff399
 a68:	366c5f00 	strbtcc	r5, [ip], -r0, lsl #30
 a6c:	625f6134 	subsvs	r6, pc, #13
 a70:	5f006675 	svcpl	0x00006675
 a74:	5f676973 	svcpl	0x00676973
 a78:	636e7566 	cmnvs	lr, #427819008	; 0x19800000
 a7c:	626e5f00 	rsbvs	r5, lr, #0, 30
 a80:	5f006675 	svcpl	0x00006675
 a84:	73756e75 	cmnvc	r5, #1872	; 0x750
 a88:	5f006465 	svcpl	0x00006465
 a8c:	5f6d745f 	svcpl	0x006d745f
 a90:	73647369 	cmnvc	r4, #-1543503871	; 0xa4000001
 a94:	6c5f0074 	mrrcvs	0, 7, r0, pc, cr4	; <UNPREDICTABLE>
 a98:	6c61636f 	stclvs	3, cr6, [r1], #-444	; 0xfffffe44
 a9c:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
 aa0:	6675625f 			; <UNDEFINED> instruction: 0x6675625f
 aa4:	6c635f00 	stclvs	15, cr5, [r3], #-0
 aa8:	0065736f 	rsbeq	r7, r5, pc, ror #6
 aac:	3834725f 	ldmdacc	r4!, {r0, r1, r2, r3, r4, r6, r9, ip, sp, lr}
 ab0:	626d5f00 	rsbvs	r5, sp, #0, 30
 ab4:	63776f74 	cmnvs	r7, #116, 30	; 0x1d0
 ab8:	6174735f 	cmnvs	r4, pc, asr r3
 abc:	5f006574 	svcpl	0x00006574
 ac0:	00733570 	rsbseq	r3, r3, r0, ror r5
 ac4:	6d745f5f 	ldclvs	15, cr5, [r4, #-380]!	; 0xfffffe84
 ac8:	61646d5f 	cmnvs	r4, pc, asr sp
 acc:	Address 0x0000000000000acc is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	206d7241 	rsbcs	r7, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d39 	eorscc	r2, r2, r9, lsr sp
  30:	712d3931 			; <UNDEFINED> instruction: 0x712d3931
  34:	616d2d34 	cmnvs	sp, r4, lsr sp
  38:	29726f6a 	ldmdbcs	r2!, {r1, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
  3c:	322e3920 	eorcc	r3, lr, #32, 18	; 0x80000
  40:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  44:	31393130 	teqcc	r9, r0, lsr r1
  48:	20353230 	eorscs	r3, r5, r0, lsr r2
  4c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  50:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  54:	415b2029 	cmpmi	fp, r9, lsr #32
  58:	612f4d52 			; <UNDEFINED> instruction: 0x612f4d52
  5c:	392d6d72 	pushcc	{r1, r4, r5, r6, r8, sl, fp, sp, lr}
  60:	6172622d 	cmnvs	r2, sp, lsr #4
  64:	2068636e 	rsbcs	r6, r8, lr, ror #6
  68:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
  6c:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
  70:	37373220 	ldrcc	r3, [r7, -r0, lsr #4]!
  74:	5d393935 			; <UNDEFINED> instruction: 0x5d393935
	...

Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002b41 	andeq	r2, r0, r1, asr #22
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000021 	andeq	r0, r0, r1, lsr #32
  10:	2d533605 	ldclcs	6, cr3, [r3, #-20]	; 0xffffffec
  14:	0c06004d 	stceq	0, cr0, [r6], {77}	; 0x4d
  18:	01094d07 	tsteq	r9, r7, lsl #26
  1c:	01140412 	tsteq	r4, r2, lsl r4
  20:	03170115 	tsteq	r7, #1073741829	; 0x40000005
  24:	01190118 	tsteq	r9, r8, lsl r1
  28:	061e011a 			; <UNDEFINED> instruction: 0x061e011a

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	00000018 	andeq	r0, r0, r8, lsl r0
  14:	00000000 	andeq	r0, r0, r0
  18:	20000010 	andcs	r0, r0, r0, lsl r0
  1c:	0000001a 	andeq	r0, r0, sl, lsl r0
  20:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  24:	41018e02 	tstmi	r1, r2, lsl #28
  28:	0000070d 	andeq	r0, r0, sp, lsl #14
  2c:	0000001c 	andeq	r0, r0, ip, lsl r0
  30:	00000000 	andeq	r0, r0, r0
  34:	2000002a 	andcs	r0, r0, sl, lsr #32
  38:	00000032 	andeq	r0, r0, r2, lsr r0
  3c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  40:	41018e02 	tstmi	r1, r2, lsl #28
  44:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
  48:	00000007 	andeq	r0, r0, r7
  4c:	0000001c 	andeq	r0, r0, ip, lsl r0
  50:	00000000 	andeq	r0, r0, r0
  54:	2000005c 	andcs	r0, r0, ip, asr r0
  58:	0000003c 	andeq	r0, r0, ip, lsr r0
  5c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  60:	41018e02 	tstmi	r1, r2, lsl #28
  64:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
  68:	00000007 	andeq	r0, r0, r7
  6c:	0000001c 	andeq	r0, r0, ip, lsl r0
  70:	00000000 	andeq	r0, r0, r0
  74:	20000098 	mulcs	r0, r8, r0
  78:	0000002a 	andeq	r0, r0, sl, lsr #32
  7c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  80:	41018e02 	tstmi	r1, r2, lsl #28
  84:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
  88:	00000007 	andeq	r0, r0, r7
  8c:	0000001c 	andeq	r0, r0, ip, lsl r0
  90:	00000000 	andeq	r0, r0, r0
  94:	200000c2 	andcs	r0, r0, r2, asr #1
  98:	0000002a 	andeq	r0, r0, sl, lsr #32
  9c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  a0:	41018e02 	tstmi	r1, r2, lsl #28
  a4:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
  a8:	00000007 	andeq	r0, r0, r7
  ac:	0000001c 	andeq	r0, r0, ip, lsl r0
  b0:	00000000 	andeq	r0, r0, r0
  b4:	200000ec 	andcs	r0, r0, ip, ror #1
  b8:	00000030 	andeq	r0, r0, r0, lsr r0
  bc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  c0:	41018e02 	tstmi	r1, r2, lsl #28
  c4:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
  c8:	00000007 	andeq	r0, r0, r7
  cc:	0000001c 	andeq	r0, r0, ip, lsl r0
  d0:	00000000 	andeq	r0, r0, r0
  d4:	2000011c 	andcs	r0, r0, ip, lsl r1
  d8:	00000034 	andeq	r0, r0, r4, lsr r0
  dc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  e0:	41018e02 	tstmi	r1, r2, lsl #28
  e4:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
  e8:	00000007 	andeq	r0, r0, r7
  ec:	0000001c 	andeq	r0, r0, ip, lsl r0
  f0:	00000000 	andeq	r0, r0, r0
  f4:	20000150 	andcs	r0, r0, r0, asr r1
  f8:	0000003c 	andeq	r0, r0, ip, lsr r0
  fc:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
 100:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 104:	180e4101 	stmdane	lr, {r0, r8, lr}
 108:	00070d41 	andeq	r0, r7, r1, asr #26
 10c:	0000001c 	andeq	r0, r0, ip, lsl r0
 110:	00000000 	andeq	r0, r0, r0
 114:	2000018c 	andcs	r0, r0, ip, lsl #3
 118:	0000003c 	andeq	r0, r0, ip, lsr r0
 11c:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
 120:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 124:	180e4101 	stmdane	lr, {r0, r8, lr}
 128:	00070d41 	andeq	r0, r7, r1, asr #26
 12c:	00000018 	andeq	r0, r0, r8, lsl r0
 130:	00000000 	andeq	r0, r0, r0
 134:	200001c8 	andcs	r0, r0, r8, asr #3
 138:	0000002e 	andeq	r0, r0, lr, lsr #32
 13c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 140:	41018e02 	tstmi	r1, r2, lsl #28
 144:	0000070d 	andeq	r0, r0, sp, lsl #14
 148:	00000018 	andeq	r0, r0, r8, lsl r0
 14c:	00000000 	andeq	r0, r0, r0
 150:	200001f6 	strdcs	r0, [r0], -r6
 154:	0000002e 	andeq	r0, r0, lr, lsr #32
 158:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 15c:	41018e02 	tstmi	r1, r2, lsl #28
 160:	0000070d 	andeq	r0, r0, sp, lsl #14
 164:	00000018 	andeq	r0, r0, r8, lsl r0
 168:	00000000 	andeq	r0, r0, r0
 16c:	20000224 	andcs	r0, r0, r4, lsr #4
 170:	0000002e 	andeq	r0, r0, lr, lsr #32
 174:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 178:	41018e02 	tstmi	r1, r2, lsl #28
 17c:	0000070d 	andeq	r0, r0, sp, lsl #14
 180:	00000018 	andeq	r0, r0, r8, lsl r0
 184:	00000000 	andeq	r0, r0, r0
 188:	20000252 	andcs	r0, r0, r2, asr r2
 18c:	0000002e 	andeq	r0, r0, lr, lsr #32
 190:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 194:	41018e02 	tstmi	r1, r2, lsl #28
 198:	0000070d 	andeq	r0, r0, sp, lsl #14
 19c:	0000001c 	andeq	r0, r0, ip, lsl r0
 1a0:	00000000 	andeq	r0, r0, r0
 1a4:	20000280 	andcs	r0, r0, r0, lsl #5
 1a8:	0000002a 	andeq	r0, r0, sl, lsr #32
 1ac:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 1b0:	41018e02 	tstmi	r1, r2, lsl #28
 1b4:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 1b8:	00000007 	andeq	r0, r0, r7
 1bc:	0000001c 	andeq	r0, r0, ip, lsl r0
 1c0:	00000000 	andeq	r0, r0, r0
 1c4:	200002aa 	andcs	r0, r0, sl, lsr #5
 1c8:	0000004c 	andeq	r0, r0, ip, asr #32
 1cc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 1d0:	41018e02 	tstmi	r1, r2, lsl #28
 1d4:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 1d8:	00000007 	andeq	r0, r0, r7
 1dc:	0000000c 	andeq	r0, r0, ip
 1e0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 1e4:	7c020001 	stcvc	0, cr0, [r2], {1}
 1e8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 1ec:	0000000c 	andeq	r0, r0, ip
 1f0:	000001dc 	ldrdeq	r0, [r0], -ip
 1f4:	20000000 	andcs	r0, r0, r0
 1f8:	0000000c 	andeq	r0, r0, ip
 1fc:	0000001c 	andeq	r0, r0, ip, lsl r0
 200:	000001dc 	ldrdeq	r0, [r0], -ip
 204:	200002f8 	strdcs	r0, [r0], -r8
 208:	00000020 	andeq	r0, r0, r0, lsr #32
 20c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 210:	41018e02 	tstmi	r1, r2, lsl #28
 214:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 218:	00000007 	andeq	r0, r0, r7
 21c:	0000001c 	andeq	r0, r0, ip, lsl r0
 220:	000001dc 	ldrdeq	r0, [r0], -ip
 224:	20000318 	andcs	r0, r0, r8, lsl r3
 228:	00000062 	andeq	r0, r0, r2, rrx
 22c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 230:	41018e02 	tstmi	r1, r2, lsl #28
 234:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 238:	00000007 	andeq	r0, r0, r7
 23c:	0000001c 	andeq	r0, r0, ip, lsl r0
 240:	000001dc 	ldrdeq	r0, [r0], -ip
 244:	2000037a 	andcs	r0, r0, sl, ror r3
 248:	00000062 	andeq	r0, r0, r2, rrx
 24c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 250:	41018e02 	tstmi	r1, r2, lsl #28
 254:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 258:	00000007 	andeq	r0, r0, r7
 25c:	0000001c 	andeq	r0, r0, ip, lsl r0
 260:	000001dc 	ldrdeq	r0, [r0], -ip
 264:	200003dc 	ldrdcs	r0, [r0], -ip
 268:	000000ac 	andeq	r0, r0, ip, lsr #1
 26c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 270:	41018e02 	tstmi	r1, r2, lsl #28
 274:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 278:	00000007 	andeq	r0, r0, r7
 27c:	0000001c 	andeq	r0, r0, ip, lsl r0
 280:	000001dc 	ldrdeq	r0, [r0], -ip
 284:	20000488 	andcs	r0, r0, r8, lsl #9
 288:	0000002c 	andeq	r0, r0, ip, lsr #32
 28c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 290:	41018e02 	tstmi	r1, r2, lsl #28
 294:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 298:	00000007 	andeq	r0, r0, r7
 29c:	0000001c 	andeq	r0, r0, ip, lsl r0
 2a0:	000001dc 	ldrdeq	r0, [r0], -ip
 2a4:	200004b4 			; <UNDEFINED> instruction: 0x200004b4
 2a8:	000000c2 	andeq	r0, r0, r2, asr #1
 2ac:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 2b0:	41018e02 	tstmi	r1, r2, lsl #28
 2b4:	0d41300e 	stcleq	0, cr3, [r1, #-56]	; 0xffffffc8
 2b8:	00000007 	andeq	r0, r0, r7
 2bc:	0000001c 	andeq	r0, r0, ip, lsl r0
 2c0:	000001dc 	ldrdeq	r0, [r0], -ip
 2c4:	20000576 	andcs	r0, r0, r6, ror r5
 2c8:	0000005a 	andeq	r0, r0, sl, asr r0
 2cc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 2d0:	41018e02 	tstmi	r1, r2, lsl #28
 2d4:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 2d8:	00000007 	andeq	r0, r0, r7
 2dc:	00000018 	andeq	r0, r0, r8, lsl r0
 2e0:	000001dc 	ldrdeq	r0, [r0], -ip
 2e4:	200005d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 2e8:	0000006c 	andeq	r0, r0, ip, rrx
 2ec:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 2f0:	41018e02 	tstmi	r1, r2, lsl #28
 2f4:	0000070d 	andeq	r0, r0, sp, lsl #14
 2f8:	0000001c 	andeq	r0, r0, ip, lsl r0
 2fc:	000001dc 	ldrdeq	r0, [r0], -ip
 300:	2000063c 	andcs	r0, r0, ip, lsr r6
 304:	00000064 	andeq	r0, r0, r4, rrx
 308:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 30c:	41018e02 	tstmi	r1, r2, lsl #28
 310:	0d41200e 	stcleq	0, cr2, [r1, #-56]	; 0xffffffc8
 314:	00000007 	andeq	r0, r0, r7
 318:	0000001c 	andeq	r0, r0, ip, lsl r0
 31c:	000001dc 	ldrdeq	r0, [r0], -ip
 320:	200006a0 	andcs	r0, r0, r0, lsr #13
 324:	00000018 	andeq	r0, r0, r8, lsl r0
 328:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 32c:	41018e02 	tstmi	r1, r2, lsl #28
 330:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 334:	00000007 	andeq	r0, r0, r7
 338:	00000020 	andeq	r0, r0, r0, lsr #32
 33c:	000001dc 	ldrdeq	r0, [r0], -ip
 340:	200006b8 			; <UNDEFINED> instruction: 0x200006b8
 344:	000001a4 	andeq	r0, r0, r4, lsr #3
 348:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
 34c:	87038504 	strhi	r8, [r3, -r4, lsl #10]
 350:	41018e02 	tstmi	r1, r2, lsl #28
 354:	4103c00e 	tstmi	r3, lr
 358:	0000070d 	andeq	r0, r0, sp, lsl #14
 35c:	0000001c 	andeq	r0, r0, ip, lsl r0
 360:	000001dc 	ldrdeq	r0, [r0], -ip
 364:	2000085c 	andcs	r0, r0, ip, asr r8
 368:	000000a4 	andeq	r0, r0, r4, lsr #1
 36c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 370:	41018e02 	tstmi	r1, r2, lsl #28
 374:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 378:	00000007 	andeq	r0, r0, r7
 37c:	0000000c 	andeq	r0, r0, ip
 380:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 384:	7c020001 	stcvc	0, cr0, [r2], {1}
 388:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 38c:	0000001c 	andeq	r0, r0, ip, lsl r0
 390:	0000037c 	andeq	r0, r0, ip, ror r3
 394:	20000900 	andcs	r0, r0, r0, lsl #18
 398:	00000024 	andeq	r0, r0, r4, lsr #32
 39c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 3a0:	41018e02 	tstmi	r1, r2, lsl #28
 3a4:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 3a8:	00000007 	andeq	r0, r0, r7
 3ac:	0000001c 	andeq	r0, r0, ip, lsl r0
 3b0:	0000037c 	andeq	r0, r0, ip, ror r3
 3b4:	20000924 	andcs	r0, r0, r4, lsr #18
 3b8:	00000044 	andeq	r0, r0, r4, asr #32
 3bc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 3c0:	41018e02 	tstmi	r1, r2, lsl #28
 3c4:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 3c8:	00000007 	andeq	r0, r0, r7
 3cc:	0000001c 	andeq	r0, r0, ip, lsl r0
 3d0:	0000037c 	andeq	r0, r0, ip, ror r3
 3d4:	20000968 	andcs	r0, r0, r8, ror #18
 3d8:	00000068 	andeq	r0, r0, r8, rrx
 3dc:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
 3e0:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 3e4:	380e4101 	stmdacc	lr, {r0, r8, lr}
 3e8:	00070d41 	andeq	r0, r7, r1, asr #26
 3ec:	0000001c 	andeq	r0, r0, ip, lsl r0
 3f0:	0000037c 	andeq	r0, r0, ip, ror r3
 3f4:	200009d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 3f8:	00000020 	andeq	r0, r0, r0, lsr #32
 3fc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 400:	41018e02 	tstmi	r1, r2, lsl #28
 404:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 408:	00000007 	andeq	r0, r0, r7
 40c:	0000000c 	andeq	r0, r0, ip
 410:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 414:	7c020001 	stcvc	0, cr0, [r2], {1}
 418:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 41c:	00000018 	andeq	r0, r0, r8, lsl r0
 420:	0000040c 	andeq	r0, r0, ip, lsl #8
 424:	200009f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 428:	0000000a 	andeq	r0, r0, sl
 42c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 430:	41018e02 	tstmi	r1, r2, lsl #28
 434:	0000070d 	andeq	r0, r0, sp, lsl #14
 438:	00000018 	andeq	r0, r0, r8, lsl r0
 43c:	0000040c 	andeq	r0, r0, ip, lsl #8
 440:	200009fa 	strdcs	r0, [r0], -sl
 444:	0000000a 	andeq	r0, r0, sl
 448:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 44c:	41018e02 	tstmi	r1, r2, lsl #28
 450:	0000070d 	andeq	r0, r0, sp, lsl #14
 454:	0000001c 	andeq	r0, r0, ip, lsl r0
 458:	0000040c 	andeq	r0, r0, ip, lsl #8
 45c:	20000a04 	andcs	r0, r0, r4, lsl #20
 460:	00000010 	andeq	r0, r0, r0, lsl r0
 464:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 468:	41018e02 	tstmi	r1, r2, lsl #28
 46c:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 470:	00000007 	andeq	r0, r0, r7
 474:	0000001c 	andeq	r0, r0, ip, lsl r0
 478:	0000040c 	andeq	r0, r0, ip, lsl #8
 47c:	20000a14 	andcs	r0, r0, r4, lsl sl
 480:	0000003e 	andeq	r0, r0, lr, lsr r0
 484:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 488:	41018e02 	tstmi	r1, r2, lsl #28
 48c:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 490:	00000007 	andeq	r0, r0, r7
 494:	0000000c 	andeq	r0, r0, ip
 498:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 49c:	7c020001 	stcvc	0, cr0, [r2], {1}
 4a0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 4a4:	00000018 	andeq	r0, r0, r8, lsl r0
 4a8:	00000494 	muleq	r0, r4, r4
 4ac:	20000a54 	andcs	r0, r0, r4, asr sl
 4b0:	0000005c 	andeq	r0, r0, ip, asr r0
 4b4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 4b8:	41018e02 	tstmi	r1, r2, lsl #28
 4bc:	0000070d 	andeq	r0, r0, sp, lsl #14
 4c0:	0000001c 	andeq	r0, r0, ip, lsl r0
 4c4:	00000494 	muleq	r0, r4, r4
 4c8:	20000ab0 			; <UNDEFINED> instruction: 0x20000ab0
 4cc:	00000050 	andeq	r0, r0, r0, asr r0
 4d0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 4d4:	41018e02 	tstmi	r1, r2, lsl #28
 4d8:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 4dc:	00000007 	andeq	r0, r0, r7
 4e0:	0000001c 	andeq	r0, r0, ip, lsl r0
 4e4:	00000494 	muleq	r0, r4, r4
 4e8:	20000b00 	andcs	r0, r0, r0, lsl #22
 4ec:	00000044 	andeq	r0, r0, r4, asr #32
 4f0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 4f4:	41018e02 	tstmi	r1, r2, lsl #28
 4f8:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 4fc:	00000007 	andeq	r0, r0, r7
 500:	0000001c 	andeq	r0, r0, ip, lsl r0
 504:	00000494 	muleq	r0, r4, r4
 508:	20000b44 	andcs	r0, r0, r4, asr #22
 50c:	0000005a 	andeq	r0, r0, sl, asr r0
 510:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 514:	41018e02 	tstmi	r1, r2, lsl #28
 518:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 51c:	00000007 	andeq	r0, r0, r7
 520:	00000018 	andeq	r0, r0, r8, lsl r0
 524:	00000494 	muleq	r0, r4, r4
 528:	20000b9e 	mulcs	r0, lr, fp
 52c:	0000003e 	andeq	r0, r0, lr, lsr r0
 530:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 534:	41018e02 	tstmi	r1, r2, lsl #28
 538:	0000070d 	andeq	r0, r0, sp, lsl #14
 53c:	0000001c 	andeq	r0, r0, ip, lsl r0
 540:	00000494 	muleq	r0, r4, r4
 544:	20000bdc 	ldrdcs	r0, [r0], -ip
 548:	0000008c 	andeq	r0, r0, ip, lsl #1
 54c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 550:	41018e02 	tstmi	r1, r2, lsl #28
 554:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 558:	00000007 	andeq	r0, r0, r7
 55c:	0000001c 	andeq	r0, r0, ip, lsl r0
 560:	00000494 	muleq	r0, r4, r4
 564:	20000c68 	andcs	r0, r0, r8, ror #24
 568:	0000002a 	andeq	r0, r0, sl, lsr #32
 56c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 570:	41018e02 	tstmi	r1, r2, lsl #28
 574:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 578:	00000007 	andeq	r0, r0, r7
 57c:	0000001c 	andeq	r0, r0, ip, lsl r0
 580:	00000494 	muleq	r0, r4, r4
 584:	20000c92 	mulcs	r0, r2, ip
 588:	00000076 	andeq	r0, r0, r6, ror r0
 58c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 590:	41018e02 	tstmi	r1, r2, lsl #28
 594:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 598:	00000007 	andeq	r0, r0, r7
 59c:	0000001c 	andeq	r0, r0, ip, lsl r0
 5a0:	00000494 	muleq	r0, r4, r4
 5a4:	20000d08 	andcs	r0, r0, r8, lsl #26
 5a8:	00000046 	andeq	r0, r0, r6, asr #32
 5ac:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 5b0:	41018e02 	tstmi	r1, r2, lsl #28
 5b4:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 5b8:	00000007 	andeq	r0, r0, r7
 5bc:	0000001c 	andeq	r0, r0, ip, lsl r0
 5c0:	00000494 	muleq	r0, r4, r4
 5c4:	20000d4e 	andcs	r0, r0, lr, asr #26
 5c8:	00000046 	andeq	r0, r0, r6, asr #32
 5cc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 5d0:	41018e02 	tstmi	r1, r2, lsl #28
 5d4:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 5d8:	00000007 	andeq	r0, r0, r7
 5dc:	0000001c 	andeq	r0, r0, ip, lsl r0
 5e0:	00000494 	muleq	r0, r4, r4
 5e4:	20000d94 	mulcs	r0, r4, sp
 5e8:	0000005a 	andeq	r0, r0, sl, asr r0
 5ec:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 5f0:	41018e02 	tstmi	r1, r2, lsl #28
 5f4:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 5f8:	00000007 	andeq	r0, r0, r7
 5fc:	0000001c 	andeq	r0, r0, ip, lsl r0
 600:	00000494 	muleq	r0, r4, r4
 604:	20000dee 	andcs	r0, r0, lr, ror #27
 608:	00000036 	andeq	r0, r0, r6, lsr r0
 60c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 610:	41018e02 	tstmi	r1, r2, lsl #28
 614:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 618:	00000007 	andeq	r0, r0, r7
 61c:	0000001c 	andeq	r0, r0, ip, lsl r0
 620:	00000494 	muleq	r0, r4, r4
 624:	20000e24 	andcs	r0, r0, r4, lsr #28
 628:	00000084 	andeq	r0, r0, r4, lsl #1
 62c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 630:	41018e02 	tstmi	r1, r2, lsl #28
 634:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 638:	00000007 	andeq	r0, r0, r7
 63c:	0000001c 	andeq	r0, r0, ip, lsl r0
 640:	00000494 	muleq	r0, r4, r4
 644:	20000ea8 	andcs	r0, r0, r8, lsr #29
 648:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 64c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 650:	41018e02 	tstmi	r1, r2, lsl #28
 654:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 658:	00000007 	andeq	r0, r0, r7
 65c:	0000000c 	andeq	r0, r0, ip
 660:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 664:	7c020001 	stcvc	0, cr0, [r2], {1}
 668:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 66c:	0000001c 	andeq	r0, r0, ip, lsl r0
 670:	0000065c 	andeq	r0, r0, ip, asr r6
 674:	20000f78 	andcs	r0, r0, r8, ror pc
 678:	00000030 	andeq	r0, r0, r0, lsr r0
 67c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 680:	41018e02 	tstmi	r1, r2, lsl #28
 684:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 688:	00000007 	andeq	r0, r0, r7
 68c:	00000018 	andeq	r0, r0, r8, lsl r0
 690:	0000065c 	andeq	r0, r0, ip, asr r6
 694:	20000fa8 	andcs	r0, r0, r8, lsr #31
 698:	0000001c 	andeq	r0, r0, ip, lsl r0
 69c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 6a0:	41018e02 	tstmi	r1, r2, lsl #28
 6a4:	0000070d 	andeq	r0, r0, sp, lsl #14
 6a8:	00000018 	andeq	r0, r0, r8, lsl r0
 6ac:	0000065c 	andeq	r0, r0, ip, asr r6
 6b0:	20000fc4 	andcs	r0, r0, r4, asr #31
 6b4:	00000018 	andeq	r0, r0, r8, lsl r0
 6b8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 6bc:	41018e02 	tstmi	r1, r2, lsl #28
 6c0:	0000070d 	andeq	r0, r0, sp, lsl #14
 6c4:	00000018 	andeq	r0, r0, r8, lsl r0
 6c8:	0000065c 	andeq	r0, r0, ip, asr r6
 6cc:	20000fdc 	ldrdcs	r0, [r0], -ip
 6d0:	0000001c 	andeq	r0, r0, ip, lsl r0
 6d4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 6d8:	41018e02 	tstmi	r1, r2, lsl #28
 6dc:	0000070d 	andeq	r0, r0, sp, lsl #14
 6e0:	00000018 	andeq	r0, r0, r8, lsl r0
 6e4:	0000065c 	andeq	r0, r0, ip, asr r6
 6e8:	20000ff8 	strdcs	r0, [r0], -r8
 6ec:	00000014 	andeq	r0, r0, r4, lsl r0
 6f0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 6f4:	41018e02 	tstmi	r1, r2, lsl #28
 6f8:	0000070d 	andeq	r0, r0, sp, lsl #14
 6fc:	0000001c 	andeq	r0, r0, ip, lsl r0
 700:	0000065c 	andeq	r0, r0, ip, asr r6
 704:	2000100c 	andcs	r1, r0, ip
 708:	00000060 	andeq	r0, r0, r0, rrx
 70c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 710:	41018e02 	tstmi	r1, r2, lsl #28
 714:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 718:	00000007 	andeq	r0, r0, r7
 71c:	0000001c 	andeq	r0, r0, ip, lsl r0
 720:	0000065c 	andeq	r0, r0, ip, asr r6
 724:	2000106c 	andcs	r1, r0, ip, rrx
 728:	00000048 	andeq	r0, r0, r8, asr #32
 72c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 730:	41018e02 	tstmi	r1, r2, lsl #28
 734:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 738:	00000007 	andeq	r0, r0, r7
 73c:	0000000c 	andeq	r0, r0, ip
 740:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 744:	7c010001 	stcvc	0, cr0, [r1], {1}
 748:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 74c:	0000000c 	andeq	r0, r0, ip
 750:	0000073c 	andeq	r0, r0, ip, lsr r7
 754:	200010b5 	strhcs	r1, [r0], -r5
 758:	0000010a 	andeq	r0, r0, sl, lsl #2

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	200002f8 	strdcs	r0, [r0], -r8
   4:	20000900 	andcs	r0, r0, r0, lsl #18
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...
