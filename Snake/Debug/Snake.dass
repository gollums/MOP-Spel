
./Debug/Snake.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:
static volatile int points, snakeSize;

__attribute__((naked)) __attribute__((section (".start_section")) )
void startup ( void )
{
__asm__ volatile(" LDR R0,=0x2001C000\n");		/* set stack */
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <startup+0xc>)
__asm__ volatile(" MOV SP,R0\n");
20000002:	4685      	mov	sp, r0
__asm__ volatile(" BL main\n");					/* call main */
20000004:	f000 fc76 	bl	200008f4 <main>
__asm__ volatile(".L1: B .L1\n");				/* never return */
20000008:	e7fe      	b.n	20000008 <startup+0x8>
};
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <ascii_init>:
#include <defines.h>
#include <asciidisplay.h>

void ascii_init(void){ /**/
20000010:	b580      	push	{r7, lr}
20000012:	af00      	add	r7, sp, #0
    /*function set*/
    funtion_set();
20000014:	f000 f8ef 	bl	200001f6 <funtion_set>
    
    /*Display Control*/
    display_control();
20000018:	f000 f904 	bl	20000224 <display_control>
    
    /*Clear Display*/
    clear_display();
2000001c:	f000 f8d4 	bl	200001c8 <clear_display>
    
    /*Entry mode set*/
    entry_mode_set();
20000020:	f000 f917 	bl	20000252 <entry_mode_set>
}
20000024:	46c0      	nop			; (mov r8, r8)
20000026:	46bd      	mov	sp, r7
20000028:	bd80      	pop	{r7, pc}

2000002a <ascii_ctrl_bit_set>:

/*adressera ASCII-display, ettställ de bitar som är 1 i x*/
void ascii_ctrl_bit_set(unsigned char x){
2000002a:	b580      	push	{r7, lr}
2000002c:	b082      	sub	sp, #8
2000002e:	af00      	add	r7, sp, #0
20000030:	0002      	movs	r2, r0
20000032:	1dfb      	adds	r3, r7, #7
20000034:	701a      	strb	r2, [r3, #0]
    *GPIO_E_ODR_LOW |= ( B_SELECT | x );
20000036:	4b08      	ldr	r3, [pc, #32]	; (20000058 <ascii_ctrl_bit_set+0x2e>)
20000038:	781b      	ldrb	r3, [r3, #0]
2000003a:	b2da      	uxtb	r2, r3
2000003c:	1dfb      	adds	r3, r7, #7
2000003e:	781b      	ldrb	r3, [r3, #0]
20000040:	4313      	orrs	r3, r2
20000042:	b2db      	uxtb	r3, r3
20000044:	4a04      	ldr	r2, [pc, #16]	; (20000058 <ascii_ctrl_bit_set+0x2e>)
20000046:	2104      	movs	r1, #4
20000048:	430b      	orrs	r3, r1
2000004a:	b2db      	uxtb	r3, r3
2000004c:	7013      	strb	r3, [r2, #0]
}
2000004e:	46c0      	nop			; (mov r8, r8)
20000050:	46bd      	mov	sp, r7
20000052:	b002      	add	sp, #8
20000054:	bd80      	pop	{r7, pc}
20000056:	46c0      	nop			; (mov r8, r8)
20000058:	40021014 	andmi	r1, r2, r4, lsl r0

2000005c <ascii_ctrl_bit_clear>:

/*adressera ASCII-display, nollställ de bitar som är 1 i x*/
void ascii_ctrl_bit_clear(unsigned char x){
2000005c:	b580      	push	{r7, lr}
2000005e:	b082      	sub	sp, #8
20000060:	af00      	add	r7, sp, #0
20000062:	0002      	movs	r2, r0
20000064:	1dfb      	adds	r3, r7, #7
20000066:	701a      	strb	r2, [r3, #0]
    *GPIO_E_ODR_LOW &= ( B_SELECT | ~x);
20000068:	4b0a      	ldr	r3, [pc, #40]	; (20000094 <ascii_ctrl_bit_clear+0x38>)
2000006a:	781b      	ldrb	r3, [r3, #0]
2000006c:	b2db      	uxtb	r3, r3
2000006e:	b25b      	sxtb	r3, r3
20000070:	1dfa      	adds	r2, r7, #7
20000072:	7812      	ldrb	r2, [r2, #0]
20000074:	b252      	sxtb	r2, r2
20000076:	43d2      	mvns	r2, r2
20000078:	b252      	sxtb	r2, r2
2000007a:	2104      	movs	r1, #4
2000007c:	430a      	orrs	r2, r1
2000007e:	b252      	sxtb	r2, r2
20000080:	4013      	ands	r3, r2
20000082:	b25a      	sxtb	r2, r3
20000084:	4b03      	ldr	r3, [pc, #12]	; (20000094 <ascii_ctrl_bit_clear+0x38>)
20000086:	b2d2      	uxtb	r2, r2
20000088:	701a      	strb	r2, [r3, #0]
    
}
2000008a:	46c0      	nop			; (mov r8, r8)
2000008c:	46bd      	mov	sp, r7
2000008e:	b002      	add	sp, #8
20000090:	bd80      	pop	{r7, pc}
20000092:	46c0      	nop			; (mov r8, r8)
20000094:	40021014 	andmi	r1, r2, r4, lsl r0

20000098 <ascii_write_cmd>:

void ascii_write_cmd(unsigned char command){
20000098:	b580      	push	{r7, lr}
2000009a:	b082      	sub	sp, #8
2000009c:	af00      	add	r7, sp, #0
2000009e:	0002      	movs	r2, r0
200000a0:	1dfb      	adds	r3, r7, #7
200000a2:	701a      	strb	r2, [r3, #0]
    ascii_ctrl_bit_clear(B_RS);
200000a4:	2001      	movs	r0, #1
200000a6:	f7ff ffd9 	bl	2000005c <ascii_ctrl_bit_clear>
    ascii_ctrl_bit_clear(B_RW);
200000aa:	2002      	movs	r0, #2
200000ac:	f7ff ffd6 	bl	2000005c <ascii_ctrl_bit_clear>
    ascii_write_controller(command);
200000b0:	1dfb      	adds	r3, r7, #7
200000b2:	781b      	ldrb	r3, [r3, #0]
200000b4:	0018      	movs	r0, r3
200000b6:	f000 f819 	bl	200000ec <ascii_write_controller>
}
200000ba:	46c0      	nop			; (mov r8, r8)
200000bc:	46bd      	mov	sp, r7
200000be:	b002      	add	sp, #8
200000c0:	bd80      	pop	{r7, pc}

200000c2 <ascii_write_data>:

void ascii_write_data(unsigned char data){
200000c2:	b580      	push	{r7, lr}
200000c4:	b082      	sub	sp, #8
200000c6:	af00      	add	r7, sp, #0
200000c8:	0002      	movs	r2, r0
200000ca:	1dfb      	adds	r3, r7, #7
200000cc:	701a      	strb	r2, [r3, #0]
    ascii_ctrl_bit_set(B_RS);
200000ce:	2001      	movs	r0, #1
200000d0:	f7ff ffab 	bl	2000002a <ascii_ctrl_bit_set>
    ascii_ctrl_bit_clear(B_RW);
200000d4:	2002      	movs	r0, #2
200000d6:	f7ff ffc1 	bl	2000005c <ascii_ctrl_bit_clear>
    ascii_write_controller(data);
200000da:	1dfb      	adds	r3, r7, #7
200000dc:	781b      	ldrb	r3, [r3, #0]
200000de:	0018      	movs	r0, r3
200000e0:	f000 f804 	bl	200000ec <ascii_write_controller>
}
200000e4:	46c0      	nop			; (mov r8, r8)
200000e6:	46bd      	mov	sp, r7
200000e8:	b002      	add	sp, #8
200000ea:	bd80      	pop	{r7, pc}

200000ec <ascii_write_controller>:

void ascii_write_controller(unsigned char byte){
200000ec:	b580      	push	{r7, lr}
200000ee:	b082      	sub	sp, #8
200000f0:	af00      	add	r7, sp, #0
200000f2:	0002      	movs	r2, r0
200000f4:	1dfb      	adds	r3, r7, #7
200000f6:	701a      	strb	r2, [r3, #0]
    ascii_ctrl_bit_set(B_E);
200000f8:	2040      	movs	r0, #64	; 0x40
200000fa:	f7ff ff96 	bl	2000002a <ascii_ctrl_bit_set>
    *GPIO_E_ODR_HIGH = byte;
200000fe:	4a06      	ldr	r2, [pc, #24]	; (20000118 <ascii_write_controller+0x2c>)
20000100:	1dfb      	adds	r3, r7, #7
20000102:	781b      	ldrb	r3, [r3, #0]
20000104:	7013      	strb	r3, [r2, #0]
    delay_250ns();
20000106:	f000 fcf9 	bl	20000afc <delay_250ns>
    ascii_ctrl_bit_clear(B_E);
2000010a:	2040      	movs	r0, #64	; 0x40
2000010c:	f7ff ffa6 	bl	2000005c <ascii_ctrl_bit_clear>
}
20000110:	46c0      	nop			; (mov r8, r8)
20000112:	46bd      	mov	sp, r7
20000114:	b002      	add	sp, #8
20000116:	bd80      	pop	{r7, pc}
20000118:	40021015 	andmi	r1, r2, r5, lsl r0

2000011c <ascii_read_controller>:

unsigned char ascii_read_controller(void){
2000011c:	b580      	push	{r7, lr}
2000011e:	b082      	sub	sp, #8
20000120:	af00      	add	r7, sp, #0
    ascii_ctrl_bit_set(B_E);
20000122:	2040      	movs	r0, #64	; 0x40
20000124:	f7ff ff81 	bl	2000002a <ascii_ctrl_bit_set>
    delay_250ns();
20000128:	f000 fce8 	bl	20000afc <delay_250ns>
    delay_250ns();
2000012c:	f000 fce6 	bl	20000afc <delay_250ns>
    char retVal = *GPIO_E_IDR_HIGH;
20000130:	4a06      	ldr	r2, [pc, #24]	; (2000014c <ascii_read_controller+0x30>)
20000132:	1dfb      	adds	r3, r7, #7
20000134:	7812      	ldrb	r2, [r2, #0]
20000136:	701a      	strb	r2, [r3, #0]
    ascii_ctrl_bit_clear(B_E);
20000138:	2040      	movs	r0, #64	; 0x40
2000013a:	f7ff ff8f 	bl	2000005c <ascii_ctrl_bit_clear>
    return retVal;
2000013e:	1dfb      	adds	r3, r7, #7
20000140:	781b      	ldrb	r3, [r3, #0]
}
20000142:	0018      	movs	r0, r3
20000144:	46bd      	mov	sp, r7
20000146:	b002      	add	sp, #8
20000148:	bd80      	pop	{r7, pc}
2000014a:	46c0      	nop			; (mov r8, r8)
2000014c:	40021011 	andmi	r1, r2, r1, lsl r0

20000150 <ascii_read_status>:

unsigned char ascii_read_status(void){
20000150:	b590      	push	{r4, r7, lr}
20000152:	b083      	sub	sp, #12
20000154:	af00      	add	r7, sp, #0
    *(GPIO_E_MODER+0x02) = 0x0000;
20000156:	4b0b      	ldr	r3, [pc, #44]	; (20000184 <ascii_read_status+0x34>)
20000158:	2200      	movs	r2, #0
2000015a:	601a      	str	r2, [r3, #0]
    ascii_ctrl_bit_clear(B_RS);
2000015c:	2001      	movs	r0, #1
2000015e:	f7ff ff7d 	bl	2000005c <ascii_ctrl_bit_clear>
    ascii_ctrl_bit_set(B_RW);
20000162:	2002      	movs	r0, #2
20000164:	f7ff ff61 	bl	2000002a <ascii_ctrl_bit_set>
    char retStat = ascii_read_controller(); 
20000168:	1dfc      	adds	r4, r7, #7
2000016a:	f7ff ffd7 	bl	2000011c <ascii_read_controller>
2000016e:	0003      	movs	r3, r0
20000170:	7023      	strb	r3, [r4, #0]
    *(GPIO_E_MODER+0x02) = 0x5555;
20000172:	4b04      	ldr	r3, [pc, #16]	; (20000184 <ascii_read_status+0x34>)
20000174:	4a04      	ldr	r2, [pc, #16]	; (20000188 <ascii_read_status+0x38>)
20000176:	601a      	str	r2, [r3, #0]
    return retStat;
20000178:	1dfb      	adds	r3, r7, #7
2000017a:	781b      	ldrb	r3, [r3, #0]
}
2000017c:	0018      	movs	r0, r3
2000017e:	46bd      	mov	sp, r7
20000180:	b003      	add	sp, #12
20000182:	bd90      	pop	{r4, r7, pc}
20000184:	40021008 	andmi	r1, r2, r8
20000188:	00005555 	andeq	r5, r0, r5, asr r5

2000018c <ascii_read_data>:

unsigned char ascii_read_data(void){
2000018c:	b590      	push	{r4, r7, lr}
2000018e:	b083      	sub	sp, #12
20000190:	af00      	add	r7, sp, #0
    *(GPIO_E_MODER+0x02) = 0x0000;
20000192:	4b0b      	ldr	r3, [pc, #44]	; (200001c0 <ascii_read_data+0x34>)
20000194:	2200      	movs	r2, #0
20000196:	601a      	str	r2, [r3, #0]
    ascii_ctrl_bit_set(B_RS);
20000198:	2001      	movs	r0, #1
2000019a:	f7ff ff46 	bl	2000002a <ascii_ctrl_bit_set>
    ascii_ctrl_bit_set(B_RW);
2000019e:	2002      	movs	r0, #2
200001a0:	f7ff ff43 	bl	2000002a <ascii_ctrl_bit_set>
    char retData = ascii_read_controller();
200001a4:	1dfc      	adds	r4, r7, #7
200001a6:	f7ff ffb9 	bl	2000011c <ascii_read_controller>
200001aa:	0003      	movs	r3, r0
200001ac:	7023      	strb	r3, [r4, #0]
    *(GPIO_E_MODER+0x02) = 0x5555;
200001ae:	4b04      	ldr	r3, [pc, #16]	; (200001c0 <ascii_read_data+0x34>)
200001b0:	4a04      	ldr	r2, [pc, #16]	; (200001c4 <ascii_read_data+0x38>)
200001b2:	601a      	str	r2, [r3, #0]
    return retData;
200001b4:	1dfb      	adds	r3, r7, #7
200001b6:	781b      	ldrb	r3, [r3, #0]
}
200001b8:	0018      	movs	r0, r3
200001ba:	46bd      	mov	sp, r7
200001bc:	b003      	add	sp, #12
200001be:	bd90      	pop	{r4, r7, pc}
200001c0:	40021008 	andmi	r1, r2, r8
200001c4:	00005555 	andeq	r5, r0, r5, asr r5

200001c8 <clear_display>:

void clear_display(){
200001c8:	b580      	push	{r7, lr}
200001ca:	af00      	add	r7, sp, #0
    while((ascii_read_status() & 0x80) == 0x80){}
200001cc:	46c0      	nop			; (mov r8, r8)
200001ce:	f7ff ffbf 	bl	20000150 <ascii_read_status>
200001d2:	0003      	movs	r3, r0
200001d4:	001a      	movs	r2, r3
200001d6:	2380      	movs	r3, #128	; 0x80
200001d8:	4013      	ands	r3, r2
200001da:	2b80      	cmp	r3, #128	; 0x80
200001dc:	d0f7      	beq.n	200001ce <clear_display+0x6>
    delay_mikro(8);
200001de:	2008      	movs	r0, #8
200001e0:	f000 fc96 	bl	20000b10 <delay_mikro>
    ascii_write_cmd(1); /*clear display*/
200001e4:	2001      	movs	r0, #1
200001e6:	f7ff ff57 	bl	20000098 <ascii_write_cmd>
    delay_milli(2);
200001ea:	2002      	movs	r0, #2
200001ec:	f000 fc98 	bl	20000b20 <delay_milli>
}
200001f0:	46c0      	nop			; (mov r8, r8)
200001f2:	46bd      	mov	sp, r7
200001f4:	bd80      	pop	{r7, pc}

200001f6 <funtion_set>:

void funtion_set(){
200001f6:	b580      	push	{r7, lr}
200001f8:	af00      	add	r7, sp, #0
    while((ascii_read_status() & 0x80) == 0x80){}
200001fa:	46c0      	nop			; (mov r8, r8)
200001fc:	f7ff ffa8 	bl	20000150 <ascii_read_status>
20000200:	0003      	movs	r3, r0
20000202:	001a      	movs	r2, r3
20000204:	2380      	movs	r3, #128	; 0x80
20000206:	4013      	ands	r3, r2
20000208:	2b80      	cmp	r3, #128	; 0x80
2000020a:	d0f7      	beq.n	200001fc <funtion_set+0x6>
    delay_mikro(8);
2000020c:	2008      	movs	r0, #8
2000020e:	f000 fc7f 	bl	20000b10 <delay_mikro>
    ascii_write_cmd(0x38); //0b00111000
20000212:	2038      	movs	r0, #56	; 0x38
20000214:	f7ff ff40 	bl	20000098 <ascii_write_cmd>
    delay_mikro(40);
20000218:	2028      	movs	r0, #40	; 0x28
2000021a:	f000 fc79 	bl	20000b10 <delay_mikro>
}
2000021e:	46c0      	nop			; (mov r8, r8)
20000220:	46bd      	mov	sp, r7
20000222:	bd80      	pop	{r7, pc}

20000224 <display_control>:

void display_control(){
20000224:	b580      	push	{r7, lr}
20000226:	af00      	add	r7, sp, #0
    while((ascii_read_status() & 0x80) == 0x80){}
20000228:	46c0      	nop			; (mov r8, r8)
2000022a:	f7ff ff91 	bl	20000150 <ascii_read_status>
2000022e:	0003      	movs	r3, r0
20000230:	001a      	movs	r2, r3
20000232:	2380      	movs	r3, #128	; 0x80
20000234:	4013      	ands	r3, r2
20000236:	2b80      	cmp	r3, #128	; 0x80
20000238:	d0f7      	beq.n	2000022a <display_control+0x6>
    delay_mikro(8);
2000023a:	2008      	movs	r0, #8
2000023c:	f000 fc68 	bl	20000b10 <delay_mikro>
    ascii_write_cmd(0xE);
20000240:	200e      	movs	r0, #14
20000242:	f7ff ff29 	bl	20000098 <ascii_write_cmd>
    delay_mikro(40);
20000246:	2028      	movs	r0, #40	; 0x28
20000248:	f000 fc62 	bl	20000b10 <delay_mikro>
}
2000024c:	46c0      	nop			; (mov r8, r8)
2000024e:	46bd      	mov	sp, r7
20000250:	bd80      	pop	{r7, pc}

20000252 <entry_mode_set>:

void entry_mode_set(){
20000252:	b580      	push	{r7, lr}
20000254:	af00      	add	r7, sp, #0
    while((ascii_read_status() & 0x80) == 0x80){}
20000256:	46c0      	nop			; (mov r8, r8)
20000258:	f7ff ff7a 	bl	20000150 <ascii_read_status>
2000025c:	0003      	movs	r3, r0
2000025e:	001a      	movs	r2, r3
20000260:	2380      	movs	r3, #128	; 0x80
20000262:	4013      	ands	r3, r2
20000264:	2b80      	cmp	r3, #128	; 0x80
20000266:	d0f7      	beq.n	20000258 <entry_mode_set+0x6>
    delay_mikro(8);
20000268:	2008      	movs	r0, #8
2000026a:	f000 fc51 	bl	20000b10 <delay_mikro>
    ascii_write_cmd(6);
2000026e:	2006      	movs	r0, #6
20000270:	f7ff ff12 	bl	20000098 <ascii_write_cmd>
    delay_mikro(40);
20000274:	2028      	movs	r0, #40	; 0x28
20000276:	f000 fc4b 	bl	20000b10 <delay_mikro>
}
2000027a:	46c0      	nop			; (mov r8, r8)
2000027c:	46bd      	mov	sp, r7
2000027e:	bd80      	pop	{r7, pc}

20000280 <ascii_write_char>:

void ascii_write_char(unsigned char c){
20000280:	b580      	push	{r7, lr}
20000282:	b082      	sub	sp, #8
20000284:	af00      	add	r7, sp, #0
20000286:	0002      	movs	r2, r0
20000288:	1dfb      	adds	r3, r7, #7
2000028a:	701a      	strb	r2, [r3, #0]
    //while((ascii_read_status() & 0x80) == 0x80){} //Kommentera bort om det ska fungera...
    delay_mikro(8);
2000028c:	2008      	movs	r0, #8
2000028e:	f000 fc3f 	bl	20000b10 <delay_mikro>
    ascii_write_data(c);
20000292:	1dfb      	adds	r3, r7, #7
20000294:	781b      	ldrb	r3, [r3, #0]
20000296:	0018      	movs	r0, r3
20000298:	f7ff ff13 	bl	200000c2 <ascii_write_data>
    delay_mikro(45);
2000029c:	202d      	movs	r0, #45	; 0x2d
2000029e:	f000 fc37 	bl	20000b10 <delay_mikro>
}
200002a2:	46c0      	nop			; (mov r8, r8)
200002a4:	46bd      	mov	sp, r7
200002a6:	b002      	add	sp, #8
200002a8:	bd80      	pop	{r7, pc}

200002aa <ascii_gotoxy>:

void ascii_gotoxy(int x, int y){ /**/
200002aa:	b580      	push	{r7, lr}
200002ac:	b084      	sub	sp, #16
200002ae:	af00      	add	r7, sp, #0
200002b0:	6078      	str	r0, [r7, #4]
200002b2:	6039      	str	r1, [r7, #0]
    unsigned char address;
    if(y!=1)
200002b4:	683b      	ldr	r3, [r7, #0]
200002b6:	2b01      	cmp	r3, #1
200002b8:	d006      	beq.n	200002c8 <ascii_gotoxy+0x1e>
        address = 0x40 + (x-1);
200002ba:	687b      	ldr	r3, [r7, #4]
200002bc:	b2da      	uxtb	r2, r3
200002be:	230f      	movs	r3, #15
200002c0:	18fb      	adds	r3, r7, r3
200002c2:	323f      	adds	r2, #63	; 0x3f
200002c4:	701a      	strb	r2, [r3, #0]
200002c6:	e005      	b.n	200002d4 <ascii_gotoxy+0x2a>
    else address=x-1;
200002c8:	687b      	ldr	r3, [r7, #4]
200002ca:	b2da      	uxtb	r2, r3
200002cc:	230f      	movs	r3, #15
200002ce:	18fb      	adds	r3, r7, r3
200002d0:	3a01      	subs	r2, #1
200002d2:	701a      	strb	r2, [r3, #0]
    
    ascii_write_cmd( 0x80 | address);
200002d4:	230f      	movs	r3, #15
200002d6:	18fb      	adds	r3, r7, r3
200002d8:	781b      	ldrb	r3, [r3, #0]
200002da:	2280      	movs	r2, #128	; 0x80
200002dc:	4252      	negs	r2, r2
200002de:	4313      	orrs	r3, r2
200002e0:	b2db      	uxtb	r3, r3
200002e2:	0018      	movs	r0, r3
200002e4:	f7ff fed8 	bl	20000098 <ascii_write_cmd>
    delay_mikro( 45 );
200002e8:	202d      	movs	r0, #45	; 0x2d
200002ea:	f000 fc11 	bl	20000b10 <delay_mikro>
200002ee:	46c0      	nop			; (mov r8, r8)
200002f0:	46bd      	mov	sp, r7
200002f2:	b004      	add	sp, #16
200002f4:	bd80      	pop	{r7, pc}
200002f6:	46c0      	nop			; (mov r8, r8)

200002f8 <set_object_speed>:

void set_object_speed(POBJECT o, int speedx, int speedy){
200002f8:	b580      	push	{r7, lr}
200002fa:	b084      	sub	sp, #16
200002fc:	af00      	add	r7, sp, #0
200002fe:	60f8      	str	r0, [r7, #12]
20000300:	60b9      	str	r1, [r7, #8]
20000302:	607a      	str	r2, [r7, #4]
    o->dirx = speedx;
20000304:	68fb      	ldr	r3, [r7, #12]
20000306:	68ba      	ldr	r2, [r7, #8]
20000308:	605a      	str	r2, [r3, #4]
    o->diry = speedy;
2000030a:	68fb      	ldr	r3, [r7, #12]
2000030c:	687a      	ldr	r2, [r7, #4]
2000030e:	609a      	str	r2, [r3, #8]
}
20000310:	46c0      	nop			; (mov r8, r8)
20000312:	46bd      	mov	sp, r7
20000314:	b004      	add	sp, #16
20000316:	bd80      	pop	{r7, pc}

20000318 <draw_object>:

void draw_object(POBJECT o){
20000318:	b580      	push	{r7, lr}
2000031a:	b084      	sub	sp, #16
2000031c:	af00      	add	r7, sp, #0
2000031e:	6078      	str	r0, [r7, #4]
    for (int i = 0; i<o->geo->numpoints; i++)
20000320:	2300      	movs	r3, #0
20000322:	60fb      	str	r3, [r7, #12]
20000324:	e01e      	b.n	20000364 <draw_object+0x4c>
        pixel(o->geo->px[i].x+o->posx,o->geo->px[i].y+o->posy);
20000326:	687b      	ldr	r3, [r7, #4]
20000328:	681a      	ldr	r2, [r3, #0]
2000032a:	68fb      	ldr	r3, [r7, #12]
2000032c:	3304      	adds	r3, #4
2000032e:	005b      	lsls	r3, r3, #1
20000330:	18d3      	adds	r3, r2, r3
20000332:	3304      	adds	r3, #4
20000334:	781b      	ldrb	r3, [r3, #0]
20000336:	001a      	movs	r2, r3
20000338:	687b      	ldr	r3, [r7, #4]
2000033a:	68db      	ldr	r3, [r3, #12]
2000033c:	18d3      	adds	r3, r2, r3
2000033e:	0018      	movs	r0, r3
20000340:	687b      	ldr	r3, [r7, #4]
20000342:	681a      	ldr	r2, [r3, #0]
20000344:	68fb      	ldr	r3, [r7, #12]
20000346:	3304      	adds	r3, #4
20000348:	005b      	lsls	r3, r3, #1
2000034a:	18d3      	adds	r3, r2, r3
2000034c:	3305      	adds	r3, #5
2000034e:	781b      	ldrb	r3, [r3, #0]
20000350:	001a      	movs	r2, r3
20000352:	687b      	ldr	r3, [r7, #4]
20000354:	691b      	ldr	r3, [r3, #16]
20000356:	18d3      	adds	r3, r2, r3
20000358:	0019      	movs	r1, r3
2000035a:	f000 fde9 	bl	20000f30 <pixel>
    for (int i = 0; i<o->geo->numpoints; i++)
2000035e:	68fb      	ldr	r3, [r7, #12]
20000360:	3301      	adds	r3, #1
20000362:	60fb      	str	r3, [r7, #12]
20000364:	687b      	ldr	r3, [r7, #4]
20000366:	681b      	ldr	r3, [r3, #0]
20000368:	681b      	ldr	r3, [r3, #0]
2000036a:	68fa      	ldr	r2, [r7, #12]
2000036c:	429a      	cmp	r2, r3
2000036e:	dbda      	blt.n	20000326 <draw_object+0xe>
        
}
20000370:	46c0      	nop			; (mov r8, r8)
20000372:	46c0      	nop			; (mov r8, r8)
20000374:	46bd      	mov	sp, r7
20000376:	b004      	add	sp, #16
20000378:	bd80      	pop	{r7, pc}

2000037a <clear_object>:

void clear_object(POBJECT o){
2000037a:	b580      	push	{r7, lr}
2000037c:	b084      	sub	sp, #16
2000037e:	af00      	add	r7, sp, #0
20000380:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < o->geo->numpoints; i++)
20000382:	2300      	movs	r3, #0
20000384:	60fb      	str	r3, [r7, #12]
20000386:	e01e      	b.n	200003c6 <clear_object+0x4c>
        pixel(o->geo->px[i].x+o->posx,o->geo->px[i].y+o->posy);
20000388:	687b      	ldr	r3, [r7, #4]
2000038a:	681a      	ldr	r2, [r3, #0]
2000038c:	68fb      	ldr	r3, [r7, #12]
2000038e:	3304      	adds	r3, #4
20000390:	005b      	lsls	r3, r3, #1
20000392:	18d3      	adds	r3, r2, r3
20000394:	3304      	adds	r3, #4
20000396:	781b      	ldrb	r3, [r3, #0]
20000398:	001a      	movs	r2, r3
2000039a:	687b      	ldr	r3, [r7, #4]
2000039c:	68db      	ldr	r3, [r3, #12]
2000039e:	18d3      	adds	r3, r2, r3
200003a0:	0018      	movs	r0, r3
200003a2:	687b      	ldr	r3, [r7, #4]
200003a4:	681a      	ldr	r2, [r3, #0]
200003a6:	68fb      	ldr	r3, [r7, #12]
200003a8:	3304      	adds	r3, #4
200003aa:	005b      	lsls	r3, r3, #1
200003ac:	18d3      	adds	r3, r2, r3
200003ae:	3305      	adds	r3, #5
200003b0:	781b      	ldrb	r3, [r3, #0]
200003b2:	001a      	movs	r2, r3
200003b4:	687b      	ldr	r3, [r7, #4]
200003b6:	691b      	ldr	r3, [r3, #16]
200003b8:	18d3      	adds	r3, r2, r3
200003ba:	0019      	movs	r1, r3
200003bc:	f000 fdb8 	bl	20000f30 <pixel>
    for (int i = 0; i < o->geo->numpoints; i++)
200003c0:	68fb      	ldr	r3, [r7, #12]
200003c2:	3301      	adds	r3, #1
200003c4:	60fb      	str	r3, [r7, #12]
200003c6:	687b      	ldr	r3, [r7, #4]
200003c8:	681b      	ldr	r3, [r3, #0]
200003ca:	681b      	ldr	r3, [r3, #0]
200003cc:	68fa      	ldr	r2, [r7, #12]
200003ce:	429a      	cmp	r2, r3
200003d0:	dbda      	blt.n	20000388 <clear_object+0xe>
        
}
200003d2:	46c0      	nop			; (mov r8, r8)
200003d4:	46c0      	nop			; (mov r8, r8)
200003d6:	46bd      	mov	sp, r7
200003d8:	b004      	add	sp, #16
200003da:	bd80      	pop	{r7, pc}

200003dc <move_object>:

void move_object(POBJECT o){
200003dc:	b580      	push	{r7, lr}
200003de:	b082      	sub	sp, #8
200003e0:	af00      	add	r7, sp, #0
200003e2:	6078      	str	r0, [r7, #4]
    //clear_object(o);
    
    o->posx = o->posx + o->dirx;
200003e4:	687b      	ldr	r3, [r7, #4]
200003e6:	68da      	ldr	r2, [r3, #12]
200003e8:	687b      	ldr	r3, [r7, #4]
200003ea:	685b      	ldr	r3, [r3, #4]
200003ec:	18d2      	adds	r2, r2, r3
200003ee:	687b      	ldr	r3, [r7, #4]
200003f0:	60da      	str	r2, [r3, #12]
    o->posy = o->posy + o->diry;
200003f2:	687b      	ldr	r3, [r7, #4]
200003f4:	691a      	ldr	r2, [r3, #16]
200003f6:	687b      	ldr	r3, [r7, #4]
200003f8:	689b      	ldr	r3, [r3, #8]
200003fa:	18d2      	adds	r2, r2, r3
200003fc:	687b      	ldr	r3, [r7, #4]
200003fe:	611a      	str	r2, [r3, #16]
    
    /*Position static if direction makes ball go out of bounds*/
    //Bounce left wall
    if((o->posx+o->dirx)<1){
20000400:	687b      	ldr	r3, [r7, #4]
20000402:	68da      	ldr	r2, [r3, #12]
20000404:	687b      	ldr	r3, [r7, #4]
20000406:	685b      	ldr	r3, [r3, #4]
20000408:	18d3      	adds	r3, r2, r3
2000040a:	2b00      	cmp	r3, #0
2000040c:	dc07      	bgt.n	2000041e <move_object+0x42>
        o->dirx *= -1;
2000040e:	687b      	ldr	r3, [r7, #4]
20000410:	685b      	ldr	r3, [r3, #4]
20000412:	425a      	negs	r2, r3
20000414:	687b      	ldr	r3, [r7, #4]
20000416:	605a      	str	r2, [r3, #4]
        o->posx = 1;
20000418:	687b      	ldr	r3, [r7, #4]
2000041a:	2201      	movs	r2, #1
2000041c:	60da      	str	r2, [r3, #12]
    }
    //Bounce right wall
    if((o->posx+o->dirx)>128){
2000041e:	687b      	ldr	r3, [r7, #4]
20000420:	68da      	ldr	r2, [r3, #12]
20000422:	687b      	ldr	r3, [r7, #4]
20000424:	685b      	ldr	r3, [r3, #4]
20000426:	18d3      	adds	r3, r2, r3
20000428:	2b80      	cmp	r3, #128	; 0x80
2000042a:	dd07      	ble.n	2000043c <move_object+0x60>
        o->dirx *= -1;
2000042c:	687b      	ldr	r3, [r7, #4]
2000042e:	685b      	ldr	r3, [r3, #4]
20000430:	425a      	negs	r2, r3
20000432:	687b      	ldr	r3, [r7, #4]
20000434:	605a      	str	r2, [r3, #4]
        o->posx=127;
20000436:	687b      	ldr	r3, [r7, #4]
20000438:	227f      	movs	r2, #127	; 0x7f
2000043a:	60da      	str	r2, [r3, #12]
    }
    //bounce upper wall
    if((o->posy+o->diry)<1){
2000043c:	687b      	ldr	r3, [r7, #4]
2000043e:	691a      	ldr	r2, [r3, #16]
20000440:	687b      	ldr	r3, [r7, #4]
20000442:	689b      	ldr	r3, [r3, #8]
20000444:	18d3      	adds	r3, r2, r3
20000446:	2b00      	cmp	r3, #0
20000448:	dc07      	bgt.n	2000045a <move_object+0x7e>
        o->diry *= -1;
2000044a:	687b      	ldr	r3, [r7, #4]
2000044c:	689b      	ldr	r3, [r3, #8]
2000044e:	425a      	negs	r2, r3
20000450:	687b      	ldr	r3, [r7, #4]
20000452:	609a      	str	r2, [r3, #8]
        o->posy = 1;
20000454:	687b      	ldr	r3, [r7, #4]
20000456:	2201      	movs	r2, #1
20000458:	611a      	str	r2, [r3, #16]
    }
    //bounce lower wall
    if((o->posy+o->diry)>64){
2000045a:	687b      	ldr	r3, [r7, #4]
2000045c:	691a      	ldr	r2, [r3, #16]
2000045e:	687b      	ldr	r3, [r7, #4]
20000460:	689b      	ldr	r3, [r3, #8]
20000462:	18d3      	adds	r3, r2, r3
20000464:	2b40      	cmp	r3, #64	; 0x40
20000466:	dd07      	ble.n	20000478 <move_object+0x9c>
        o->diry *= -1;
20000468:	687b      	ldr	r3, [r7, #4]
2000046a:	689b      	ldr	r3, [r3, #8]
2000046c:	425a      	negs	r2, r3
2000046e:	687b      	ldr	r3, [r7, #4]
20000470:	609a      	str	r2, [r3, #8]
        o->posy = 63;
20000472:	687b      	ldr	r3, [r7, #4]
20000474:	223f      	movs	r2, #63	; 0x3f
20000476:	611a      	str	r2, [r3, #16]
    }
    draw_object(o);
20000478:	687b      	ldr	r3, [r7, #4]
2000047a:	0018      	movs	r0, r3
2000047c:	f7ff ff4c 	bl	20000318 <draw_object>
}
20000480:	46c0      	nop			; (mov r8, r8)
20000482:	46bd      	mov	sp, r7
20000484:	b002      	add	sp, #8
20000486:	bd80      	pop	{r7, pc}

20000488 <load_sprite>:
    clear_object,
    move_object,
    set_object_speed
};

static void load_sprite(sprite* s, unsigned char* data, int width, int height){
20000488:	b580      	push	{r7, lr}
2000048a:	b084      	sub	sp, #16
2000048c:	af00      	add	r7, sp, #0
2000048e:	60f8      	str	r0, [r7, #12]
20000490:	60b9      	str	r1, [r7, #8]
20000492:	607a      	str	r2, [r7, #4]
20000494:	603b      	str	r3, [r7, #0]
    s->width = width;
20000496:	687b      	ldr	r3, [r7, #4]
20000498:	b2da      	uxtb	r2, r3
2000049a:	68fb      	ldr	r3, [r7, #12]
2000049c:	701a      	strb	r2, [r3, #0]
    s->height = height;
2000049e:	683b      	ldr	r3, [r7, #0]
200004a0:	b2da      	uxtb	r2, r3
200004a2:	68fb      	ldr	r3, [r7, #12]
200004a4:	705a      	strb	r2, [r3, #1]
    s->data = data;
200004a6:	68fb      	ldr	r3, [r7, #12]
200004a8:	68ba      	ldr	r2, [r7, #8]
200004aa:	605a      	str	r2, [r3, #4]
}
200004ac:	46c0      	nop			; (mov r8, r8)
200004ae:	46bd      	mov	sp, r7
200004b0:	b004      	add	sp, #16
200004b2:	bd80      	pop	{r7, pc}

200004b4 <draw_sprite>:

void draw_sprite(sprite* s, int x, int y){
200004b4:	b580      	push	{r7, lr}
200004b6:	b08a      	sub	sp, #40	; 0x28
200004b8:	af00      	add	r7, sp, #0
200004ba:	60f8      	str	r0, [r7, #12]
200004bc:	60b9      	str	r1, [r7, #8]
200004be:	607a      	str	r2, [r7, #4]
    int i,j,k, width_in_bytes;
    
    if(s->width % 8 == 0){
200004c0:	68fb      	ldr	r3, [r7, #12]
200004c2:	781b      	ldrb	r3, [r3, #0]
200004c4:	2207      	movs	r2, #7
200004c6:	4013      	ands	r3, r2
200004c8:	b2db      	uxtb	r3, r3
200004ca:	2b00      	cmp	r3, #0
200004cc:	d105      	bne.n	200004da <draw_sprite+0x26>
        width_in_bytes = s->width/8;
200004ce:	68fb      	ldr	r3, [r7, #12]
200004d0:	781b      	ldrb	r3, [r3, #0]
200004d2:	08db      	lsrs	r3, r3, #3
200004d4:	b2db      	uxtb	r3, r3
200004d6:	61bb      	str	r3, [r7, #24]
200004d8:	e005      	b.n	200004e6 <draw_sprite+0x32>
    }else{
        width_in_bytes = s->width/8 + 1;
200004da:	68fb      	ldr	r3, [r7, #12]
200004dc:	781b      	ldrb	r3, [r3, #0]
200004de:	08db      	lsrs	r3, r3, #3
200004e0:	b2db      	uxtb	r3, r3
200004e2:	3301      	adds	r3, #1
200004e4:	61bb      	str	r3, [r7, #24]
    }
    
    for (i = 0; i < s->height; i++){
200004e6:	2300      	movs	r3, #0
200004e8:	627b      	str	r3, [r7, #36]	; 0x24
200004ea:	e039      	b.n	20000560 <draw_sprite+0xac>
        for (j = 0; j < width_in_bytes; j++){
200004ec:	2300      	movs	r3, #0
200004ee:	623b      	str	r3, [r7, #32]
200004f0:	e02f      	b.n	20000552 <draw_sprite+0x9e>
            unsigned char byte = s->data[i*width_in_bytes +j];
200004f2:	68fb      	ldr	r3, [r7, #12]
200004f4:	685b      	ldr	r3, [r3, #4]
200004f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
200004f8:	69b9      	ldr	r1, [r7, #24]
200004fa:	4351      	muls	r1, r2
200004fc:	6a3a      	ldr	r2, [r7, #32]
200004fe:	188a      	adds	r2, r1, r2
20000500:	189a      	adds	r2, r3, r2
20000502:	2317      	movs	r3, #23
20000504:	18fb      	adds	r3, r7, r3
20000506:	7812      	ldrb	r2, [r2, #0]
20000508:	701a      	strb	r2, [r3, #0]
            for (k = 0; k < 8; k++){
2000050a:	2300      	movs	r3, #0
2000050c:	61fb      	str	r3, [r7, #28]
2000050e:	e01a      	b.n	20000546 <draw_sprite+0x92>
                if (byte & (1<<k))
20000510:	2317      	movs	r3, #23
20000512:	18fb      	adds	r3, r7, r3
20000514:	781a      	ldrb	r2, [r3, #0]
20000516:	69fb      	ldr	r3, [r7, #28]
20000518:	411a      	asrs	r2, r3
2000051a:	0013      	movs	r3, r2
2000051c:	2201      	movs	r2, #1
2000051e:	4013      	ands	r3, r2
20000520:	d00e      	beq.n	20000540 <draw_sprite+0x8c>
                    pixel(8 * j + k + x + 1, i + y + 1);
20000522:	6a3b      	ldr	r3, [r7, #32]
20000524:	00da      	lsls	r2, r3, #3
20000526:	69fb      	ldr	r3, [r7, #28]
20000528:	18d2      	adds	r2, r2, r3
2000052a:	68bb      	ldr	r3, [r7, #8]
2000052c:	18d3      	adds	r3, r2, r3
2000052e:	3301      	adds	r3, #1
20000530:	0018      	movs	r0, r3
20000532:	6a7a      	ldr	r2, [r7, #36]	; 0x24
20000534:	687b      	ldr	r3, [r7, #4]
20000536:	18d3      	adds	r3, r2, r3
20000538:	3301      	adds	r3, #1
2000053a:	0019      	movs	r1, r3
2000053c:	f000 fcf8 	bl	20000f30 <pixel>
            for (k = 0; k < 8; k++){
20000540:	69fb      	ldr	r3, [r7, #28]
20000542:	3301      	adds	r3, #1
20000544:	61fb      	str	r3, [r7, #28]
20000546:	69fb      	ldr	r3, [r7, #28]
20000548:	2b07      	cmp	r3, #7
2000054a:	dde1      	ble.n	20000510 <draw_sprite+0x5c>
        for (j = 0; j < width_in_bytes; j++){
2000054c:	6a3b      	ldr	r3, [r7, #32]
2000054e:	3301      	adds	r3, #1
20000550:	623b      	str	r3, [r7, #32]
20000552:	6a3a      	ldr	r2, [r7, #32]
20000554:	69bb      	ldr	r3, [r7, #24]
20000556:	429a      	cmp	r2, r3
20000558:	dbcb      	blt.n	200004f2 <draw_sprite+0x3e>
    for (i = 0; i < s->height; i++){
2000055a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2000055c:	3301      	adds	r3, #1
2000055e:	627b      	str	r3, [r7, #36]	; 0x24
20000560:	68fb      	ldr	r3, [r7, #12]
20000562:	785b      	ldrb	r3, [r3, #1]
20000564:	001a      	movs	r2, r3
20000566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20000568:	4293      	cmp	r3, r2
2000056a:	dbbf      	blt.n	200004ec <draw_sprite+0x38>
            }
        }
    }
}
2000056c:	46c0      	nop			; (mov r8, r8)
2000056e:	46c0      	nop			; (mov r8, r8)
20000570:	46bd      	mov	sp, r7
20000572:	b00a      	add	sp, #40	; 0x28
20000574:	bd80      	pop	{r7, pc}

20000576 <draw_snake>:


void draw_snake(POBJECT s){
20000576:	b580      	push	{r7, lr}
20000578:	b084      	sub	sp, #16
2000057a:	af00      	add	r7, sp, #0
2000057c:	6078      	str	r0, [r7, #4]
    if (s[0].dirx != 0 || s[0].diry != 0)
2000057e:	687b      	ldr	r3, [r7, #4]
20000580:	685b      	ldr	r3, [r3, #4]
20000582:	2b00      	cmp	r3, #0
20000584:	d103      	bne.n	2000058e <draw_snake+0x18>
20000586:	687b      	ldr	r3, [r7, #4]
20000588:	689b      	ldr	r3, [r3, #8]
2000058a:	2b00      	cmp	r3, #0
2000058c:	d003      	beq.n	20000596 <draw_snake+0x20>
            follow_leader(s);
2000058e:	687b      	ldr	r3, [r7, #4]
20000590:	0018      	movs	r0, r3
20000592:	f000 f825 	bl	200005e0 <follow_leader>
    for (int i = 0; i <= snakeSize - 1; i++){
20000596:	2300      	movs	r3, #0
20000598:	60fb      	str	r3, [r7, #12]
2000059a:	e015      	b.n	200005c8 <draw_snake+0x52>
        s[i].move(&s[i]);
2000059c:	68fa      	ldr	r2, [r7, #12]
2000059e:	0013      	movs	r3, r2
200005a0:	00db      	lsls	r3, r3, #3
200005a2:	189b      	adds	r3, r3, r2
200005a4:	009b      	lsls	r3, r3, #2
200005a6:	001a      	movs	r2, r3
200005a8:	687b      	ldr	r3, [r7, #4]
200005aa:	189b      	adds	r3, r3, r2
200005ac:	69d9      	ldr	r1, [r3, #28]
200005ae:	68fa      	ldr	r2, [r7, #12]
200005b0:	0013      	movs	r3, r2
200005b2:	00db      	lsls	r3, r3, #3
200005b4:	189b      	adds	r3, r3, r2
200005b6:	009b      	lsls	r3, r3, #2
200005b8:	001a      	movs	r2, r3
200005ba:	687b      	ldr	r3, [r7, #4]
200005bc:	189b      	adds	r3, r3, r2
200005be:	0018      	movs	r0, r3
200005c0:	4788      	blx	r1
    for (int i = 0; i <= snakeSize - 1; i++){
200005c2:	68fb      	ldr	r3, [r7, #12]
200005c4:	3301      	adds	r3, #1
200005c6:	60fb      	str	r3, [r7, #12]
200005c8:	4b04      	ldr	r3, [pc, #16]	; (200005dc <draw_snake+0x66>)
200005ca:	681b      	ldr	r3, [r3, #0]
200005cc:	68fa      	ldr	r2, [r7, #12]
200005ce:	429a      	cmp	r2, r3
200005d0:	dbe4      	blt.n	2000059c <draw_snake+0x26>
    }
}
200005d2:	46c0      	nop			; (mov r8, r8)
200005d4:	46c0      	nop			; (mov r8, r8)
200005d6:	46bd      	mov	sp, r7
200005d8:	b004      	add	sp, #16
200005da:	bd80      	pop	{r7, pc}
200005dc:	200022dc 	ldrdcs	r2, [r0], -ip

200005e0 <follow_leader>:

void follow_leader(POBJECT s){
200005e0:	b580      	push	{r7, lr}
200005e2:	b086      	sub	sp, #24
200005e4:	af00      	add	r7, sp, #0
200005e6:	6078      	str	r0, [r7, #4]
    int next_x = s[0].posx;
200005e8:	687b      	ldr	r3, [r7, #4]
200005ea:	68db      	ldr	r3, [r3, #12]
200005ec:	617b      	str	r3, [r7, #20]
    int next_y = s[0].posy;
200005ee:	687b      	ldr	r3, [r7, #4]
200005f0:	691b      	ldr	r3, [r3, #16]
200005f2:	613b      	str	r3, [r7, #16]
    for(int i = 0; i < snakeSize; i++){
200005f4:	2300      	movs	r3, #0
200005f6:	60fb      	str	r3, [r7, #12]
200005f8:	e02e      	b.n	20000658 <follow_leader+0x78>
        int current = s[i].posx;
200005fa:	68fa      	ldr	r2, [r7, #12]
200005fc:	0013      	movs	r3, r2
200005fe:	00db      	lsls	r3, r3, #3
20000600:	189b      	adds	r3, r3, r2
20000602:	009b      	lsls	r3, r3, #2
20000604:	001a      	movs	r2, r3
20000606:	687b      	ldr	r3, [r7, #4]
20000608:	189b      	adds	r3, r3, r2
2000060a:	68db      	ldr	r3, [r3, #12]
2000060c:	60bb      	str	r3, [r7, #8]
        s[i].posx = next_x;
2000060e:	68fa      	ldr	r2, [r7, #12]
20000610:	0013      	movs	r3, r2
20000612:	00db      	lsls	r3, r3, #3
20000614:	189b      	adds	r3, r3, r2
20000616:	009b      	lsls	r3, r3, #2
20000618:	001a      	movs	r2, r3
2000061a:	687b      	ldr	r3, [r7, #4]
2000061c:	189b      	adds	r3, r3, r2
2000061e:	697a      	ldr	r2, [r7, #20]
20000620:	60da      	str	r2, [r3, #12]
        next_x = current;
20000622:	68bb      	ldr	r3, [r7, #8]
20000624:	617b      	str	r3, [r7, #20]
        
        current = s[i].posy;
20000626:	68fa      	ldr	r2, [r7, #12]
20000628:	0013      	movs	r3, r2
2000062a:	00db      	lsls	r3, r3, #3
2000062c:	189b      	adds	r3, r3, r2
2000062e:	009b      	lsls	r3, r3, #2
20000630:	001a      	movs	r2, r3
20000632:	687b      	ldr	r3, [r7, #4]
20000634:	189b      	adds	r3, r3, r2
20000636:	691b      	ldr	r3, [r3, #16]
20000638:	60bb      	str	r3, [r7, #8]
        s[i].posy = next_y;
2000063a:	68fa      	ldr	r2, [r7, #12]
2000063c:	0013      	movs	r3, r2
2000063e:	00db      	lsls	r3, r3, #3
20000640:	189b      	adds	r3, r3, r2
20000642:	009b      	lsls	r3, r3, #2
20000644:	001a      	movs	r2, r3
20000646:	687b      	ldr	r3, [r7, #4]
20000648:	189b      	adds	r3, r3, r2
2000064a:	693a      	ldr	r2, [r7, #16]
2000064c:	611a      	str	r2, [r3, #16]
        next_y = current;
2000064e:	68bb      	ldr	r3, [r7, #8]
20000650:	613b      	str	r3, [r7, #16]
    for(int i = 0; i < snakeSize; i++){
20000652:	68fb      	ldr	r3, [r7, #12]
20000654:	3301      	adds	r3, #1
20000656:	60fb      	str	r3, [r7, #12]
20000658:	4b04      	ldr	r3, [pc, #16]	; (2000066c <follow_leader+0x8c>)
2000065a:	681b      	ldr	r3, [r3, #0]
2000065c:	68fa      	ldr	r2, [r7, #12]
2000065e:	429a      	cmp	r2, r3
20000660:	dbcb      	blt.n	200005fa <follow_leader+0x1a>
    }
}
20000662:	46c0      	nop			; (mov r8, r8)
20000664:	46c0      	nop			; (mov r8, r8)
20000666:	46bd      	mov	sp, r7
20000668:	b006      	add	sp, #24
2000066a:	bd80      	pop	{r7, pc}
2000066c:	200022dc 	ldrdcs	r2, [r0], -ip

20000670 <turn>:

void turn(int dir, POBJECT s){
20000670:	b580      	push	{r7, lr}
20000672:	b084      	sub	sp, #16
20000674:	af00      	add	r7, sp, #0
20000676:	6078      	str	r0, [r7, #4]
20000678:	6039      	str	r1, [r7, #0]
    int next_x = 0, next_y = 0;
2000067a:	2300      	movs	r3, #0
2000067c:	60fb      	str	r3, [r7, #12]
2000067e:	2300      	movs	r3, #0
20000680:	60bb      	str	r3, [r7, #8]
     switch(dir){
20000682:	687b      	ldr	r3, [r7, #4]
20000684:	2b08      	cmp	r3, #8
20000686:	d03b      	beq.n	20000700 <turn+0x90>
20000688:	687b      	ldr	r3, [r7, #4]
2000068a:	2b08      	cmp	r3, #8
2000068c:	dc4d      	bgt.n	2000072a <turn+0xba>
2000068e:	687b      	ldr	r3, [r7, #4]
20000690:	2b06      	cmp	r3, #6
20000692:	d009      	beq.n	200006a8 <turn+0x38>
20000694:	687b      	ldr	r3, [r7, #4]
20000696:	2b06      	cmp	r3, #6
20000698:	dc47      	bgt.n	2000072a <turn+0xba>
2000069a:	687b      	ldr	r3, [r7, #4]
2000069c:	2b02      	cmp	r3, #2
2000069e:	d020      	beq.n	200006e2 <turn+0x72>
200006a0:	687b      	ldr	r3, [r7, #4]
200006a2:	2b04      	cmp	r3, #4
200006a4:	d00e      	beq.n	200006c4 <turn+0x54>
            }
            break;
    }
    //follow_leader(s);
    /*if hit food*/
}
200006a6:	e040      	b.n	2000072a <turn+0xba>
            if(s[0].dirx == 0){
200006a8:	683b      	ldr	r3, [r7, #0]
200006aa:	685b      	ldr	r3, [r3, #4]
200006ac:	2b00      	cmp	r3, #0
200006ae:	d135      	bne.n	2000071c <turn+0xac>
                s->set_speed(s,4,0);
200006b0:	683b      	ldr	r3, [r7, #0]
200006b2:	6a1b      	ldr	r3, [r3, #32]
200006b4:	6838      	ldr	r0, [r7, #0]
200006b6:	2200      	movs	r2, #0
200006b8:	2104      	movs	r1, #4
200006ba:	4798      	blx	r3
                s[0].geo = &snakehead_geometry_RIGHT;
200006bc:	683b      	ldr	r3, [r7, #0]
200006be:	4a1d      	ldr	r2, [pc, #116]	; (20000734 <turn+0xc4>)
200006c0:	601a      	str	r2, [r3, #0]
            break;
200006c2:	e02b      	b.n	2000071c <turn+0xac>
            if(s[0].dirx == 0){
200006c4:	683b      	ldr	r3, [r7, #0]
200006c6:	685b      	ldr	r3, [r3, #4]
200006c8:	2b00      	cmp	r3, #0
200006ca:	d129      	bne.n	20000720 <turn+0xb0>
                s->set_speed(s,-4,0);
200006cc:	683b      	ldr	r3, [r7, #0]
200006ce:	6a1b      	ldr	r3, [r3, #32]
200006d0:	2204      	movs	r2, #4
200006d2:	4251      	negs	r1, r2
200006d4:	6838      	ldr	r0, [r7, #0]
200006d6:	2200      	movs	r2, #0
200006d8:	4798      	blx	r3
                s[0].geo = &snakehead_geometry_LEFT;
200006da:	683b      	ldr	r3, [r7, #0]
200006dc:	4a16      	ldr	r2, [pc, #88]	; (20000738 <turn+0xc8>)
200006de:	601a      	str	r2, [r3, #0]
            break;
200006e0:	e01e      	b.n	20000720 <turn+0xb0>
            if(s[0].diry == 0){
200006e2:	683b      	ldr	r3, [r7, #0]
200006e4:	689b      	ldr	r3, [r3, #8]
200006e6:	2b00      	cmp	r3, #0
200006e8:	d11c      	bne.n	20000724 <turn+0xb4>
                s->set_speed(s,0,-4);
200006ea:	683b      	ldr	r3, [r7, #0]
200006ec:	6a1b      	ldr	r3, [r3, #32]
200006ee:	2204      	movs	r2, #4
200006f0:	4252      	negs	r2, r2
200006f2:	6838      	ldr	r0, [r7, #0]
200006f4:	2100      	movs	r1, #0
200006f6:	4798      	blx	r3
                s[0].geo = &snakehead_geometry_UP;
200006f8:	683b      	ldr	r3, [r7, #0]
200006fa:	4a10      	ldr	r2, [pc, #64]	; (2000073c <turn+0xcc>)
200006fc:	601a      	str	r2, [r3, #0]
            break;
200006fe:	e011      	b.n	20000724 <turn+0xb4>
            if(s[0].diry == 0){
20000700:	683b      	ldr	r3, [r7, #0]
20000702:	689b      	ldr	r3, [r3, #8]
20000704:	2b00      	cmp	r3, #0
20000706:	d10f      	bne.n	20000728 <turn+0xb8>
                s->set_speed(s,0,4);
20000708:	683b      	ldr	r3, [r7, #0]
2000070a:	6a1b      	ldr	r3, [r3, #32]
2000070c:	6838      	ldr	r0, [r7, #0]
2000070e:	2204      	movs	r2, #4
20000710:	2100      	movs	r1, #0
20000712:	4798      	blx	r3
                s[0].geo = &snakehead_geometry_DOWN;
20000714:	683b      	ldr	r3, [r7, #0]
20000716:	4a0a      	ldr	r2, [pc, #40]	; (20000740 <turn+0xd0>)
20000718:	601a      	str	r2, [r3, #0]
            break;
2000071a:	e005      	b.n	20000728 <turn+0xb8>
            break;
2000071c:	46c0      	nop			; (mov r8, r8)
2000071e:	e004      	b.n	2000072a <turn+0xba>
            break;
20000720:	46c0      	nop			; (mov r8, r8)
20000722:	e002      	b.n	2000072a <turn+0xba>
            break;
20000724:	46c0      	nop			; (mov r8, r8)
20000726:	e000      	b.n	2000072a <turn+0xba>
            break;
20000728:	46c0      	nop			; (mov r8, r8)
}
2000072a:	46c0      	nop			; (mov r8, r8)
2000072c:	46bd      	mov	sp, r7
2000072e:	b004      	add	sp, #16
20000730:	bd80      	pop	{r7, pc}
20000732:	46c0      	nop			; (mov r8, r8)
20000734:	200034b0 			; <UNDEFINED> instruction: 0x200034b0
20000738:	20003484 	andcs	r3, r0, r4, lsl #9
2000073c:	20003508 	andcs	r3, r0, r8, lsl #10
20000740:	200034dc 	ldrdcs	r3, [r0], -ip

20000744 <init_app>:

void init_app(void){/**/
20000744:	b580      	push	{r7, lr}
20000746:	af00      	add	r7, sp, #0
        /*starta klockor på port D & E*/
        * ( (unsigned long *) 0x40023830) = 0x18;
        __asm volatile("  LDR R0,=0x08000209\n BLX R0 \n");
    #endif
    
    *GPIO_E_MODER = 0x55555555;
20000748:	4b0f      	ldr	r3, [pc, #60]	; (20000788 <init_app+0x44>)
2000074a:	4a10      	ldr	r2, [pc, #64]	; (2000078c <init_app+0x48>)
2000074c:	601a      	str	r2, [r3, #0]
    *GPIO_E_OTYPER = 0x00000000;
2000074e:	4b10      	ldr	r3, [pc, #64]	; (20000790 <init_app+0x4c>)
20000750:	2200      	movs	r2, #0
20000752:	801a      	strh	r2, [r3, #0]
    *GPIO_E_OSPEEDR = 0x00000000;
20000754:	4b0f      	ldr	r3, [pc, #60]	; (20000794 <init_app+0x50>)
20000756:	2200      	movs	r2, #0
20000758:	601a      	str	r2, [r3, #0]
    
    *GPIO_D_MODER = 0;
2000075a:	4b0f      	ldr	r3, [pc, #60]	; (20000798 <init_app+0x54>)
2000075c:	2200      	movs	r2, #0
2000075e:	601a      	str	r2, [r3, #0]
    *GPIO_D_MODER = 0x55000000;
20000760:	4b0d      	ldr	r3, [pc, #52]	; (20000798 <init_app+0x54>)
20000762:	22aa      	movs	r2, #170	; 0xaa
20000764:	05d2      	lsls	r2, r2, #23
20000766:	601a      	str	r2, [r3, #0]
    *GPIO_D_PUPDR = 0;
20000768:	4b0c      	ldr	r3, [pc, #48]	; (2000079c <init_app+0x58>)
2000076a:	2200      	movs	r2, #0
2000076c:	601a      	str	r2, [r3, #0]
    *GPIO_D_PUPDR |= 0xAA000000;
2000076e:	4b0b      	ldr	r3, [pc, #44]	; (2000079c <init_app+0x58>)
20000770:	681a      	ldr	r2, [r3, #0]
20000772:	4b0a      	ldr	r3, [pc, #40]	; (2000079c <init_app+0x58>)
20000774:	21aa      	movs	r1, #170	; 0xaa
20000776:	0609      	lsls	r1, r1, #24
20000778:	430a      	orrs	r2, r1
2000077a:	601a      	str	r2, [r3, #0]
    *GPIO_D_OTYPER = 0;
2000077c:	4b08      	ldr	r3, [pc, #32]	; (200007a0 <init_app+0x5c>)
2000077e:	2200      	movs	r2, #0
20000780:	801a      	strh	r2, [r3, #0]
}
20000782:	46c0      	nop			; (mov r8, r8)
20000784:	46bd      	mov	sp, r7
20000786:	bd80      	pop	{r7, pc}
20000788:	40021000 	andmi	r1, r2, r0
2000078c:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab
20000790:	40021004 	andmi	r1, r2, r4
20000794:	40021008 	andmi	r1, r2, r8
20000798:	40020c00 	andmi	r0, r2, r0, lsl #24
2000079c:	40020c0c 	andmi	r0, r2, ip, lsl #24
200007a0:	40020c04 	andmi	r0, r2, r4, lsl #24

200007a4 <init_snake>:

void init_snake(POBJECT s){
200007a4:	b580      	push	{r7, lr}
200007a6:	b084      	sub	sp, #16
200007a8:	af00      	add	r7, sp, #0
200007aa:	6078      	str	r0, [r7, #4]
    int j = 0;
200007ac:	2300      	movs	r3, #0
200007ae:	60fb      	str	r3, [r7, #12]
    for (int i = 3; i >= 0; i--, j++){
200007b0:	2303      	movs	r3, #3
200007b2:	60bb      	str	r3, [r7, #8]
200007b4:	e074      	b.n	200008a0 <init_snake+0xfc>
        if(i == 0){ 
200007b6:	68bb      	ldr	r3, [r7, #8]
200007b8:	2b00      	cmp	r3, #0
200007ba:	d10a      	bne.n	200007d2 <init_snake+0x2e>
            s[i].geo = &snakehead_geometry_RIGHT;
200007bc:	68ba      	ldr	r2, [r7, #8]
200007be:	0013      	movs	r3, r2
200007c0:	00db      	lsls	r3, r3, #3
200007c2:	189b      	adds	r3, r3, r2
200007c4:	009b      	lsls	r3, r3, #2
200007c6:	001a      	movs	r2, r3
200007c8:	687b      	ldr	r3, [r7, #4]
200007ca:	189b      	adds	r3, r3, r2
200007cc:	4a38      	ldr	r2, [pc, #224]	; (200008b0 <init_snake+0x10c>)
200007ce:	601a      	str	r2, [r3, #0]
200007d0:	e009      	b.n	200007e6 <init_snake+0x42>
        } else{ 
            s[i].geo = &snakebody_geometry;
200007d2:	68ba      	ldr	r2, [r7, #8]
200007d4:	0013      	movs	r3, r2
200007d6:	00db      	lsls	r3, r3, #3
200007d8:	189b      	adds	r3, r3, r2
200007da:	009b      	lsls	r3, r3, #2
200007dc:	001a      	movs	r2, r3
200007de:	687b      	ldr	r3, [r7, #4]
200007e0:	189b      	adds	r3, r3, r2
200007e2:	4a34      	ldr	r2, [pc, #208]	; (200008b4 <init_snake+0x110>)
200007e4:	601a      	str	r2, [r3, #0]
        }
        s[i].posx = (j+1) * 4;
200007e6:	68fb      	ldr	r3, [r7, #12]
200007e8:	1c59      	adds	r1, r3, #1
200007ea:	68ba      	ldr	r2, [r7, #8]
200007ec:	0013      	movs	r3, r2
200007ee:	00db      	lsls	r3, r3, #3
200007f0:	189b      	adds	r3, r3, r2
200007f2:	009b      	lsls	r3, r3, #2
200007f4:	001a      	movs	r2, r3
200007f6:	687b      	ldr	r3, [r7, #4]
200007f8:	189b      	adds	r3, r3, r2
200007fa:	008a      	lsls	r2, r1, #2
200007fc:	60da      	str	r2, [r3, #12]
        s[i].posy = 1;
200007fe:	68ba      	ldr	r2, [r7, #8]
20000800:	0013      	movs	r3, r2
20000802:	00db      	lsls	r3, r3, #3
20000804:	189b      	adds	r3, r3, r2
20000806:	009b      	lsls	r3, r3, #2
20000808:	001a      	movs	r2, r3
2000080a:	687b      	ldr	r3, [r7, #4]
2000080c:	189b      	adds	r3, r3, r2
2000080e:	2201      	movs	r2, #1
20000810:	611a      	str	r2, [r3, #16]
        s[i].dirx = 0;
20000812:	68ba      	ldr	r2, [r7, #8]
20000814:	0013      	movs	r3, r2
20000816:	00db      	lsls	r3, r3, #3
20000818:	189b      	adds	r3, r3, r2
2000081a:	009b      	lsls	r3, r3, #2
2000081c:	001a      	movs	r2, r3
2000081e:	687b      	ldr	r3, [r7, #4]
20000820:	189b      	adds	r3, r3, r2
20000822:	2200      	movs	r2, #0
20000824:	605a      	str	r2, [r3, #4]
        s[i].diry = 0;
20000826:	68ba      	ldr	r2, [r7, #8]
20000828:	0013      	movs	r3, r2
2000082a:	00db      	lsls	r3, r3, #3
2000082c:	189b      	adds	r3, r3, r2
2000082e:	009b      	lsls	r3, r3, #2
20000830:	001a      	movs	r2, r3
20000832:	687b      	ldr	r3, [r7, #4]
20000834:	189b      	adds	r3, r3, r2
20000836:	2200      	movs	r2, #0
20000838:	609a      	str	r2, [r3, #8]
        s[i].move = move_object;
2000083a:	68ba      	ldr	r2, [r7, #8]
2000083c:	0013      	movs	r3, r2
2000083e:	00db      	lsls	r3, r3, #3
20000840:	189b      	adds	r3, r3, r2
20000842:	009b      	lsls	r3, r3, #2
20000844:	001a      	movs	r2, r3
20000846:	687b      	ldr	r3, [r7, #4]
20000848:	189b      	adds	r3, r3, r2
2000084a:	4a1b      	ldr	r2, [pc, #108]	; (200008b8 <init_snake+0x114>)
2000084c:	61da      	str	r2, [r3, #28]
        s[i].clear = clear_object;
2000084e:	68ba      	ldr	r2, [r7, #8]
20000850:	0013      	movs	r3, r2
20000852:	00db      	lsls	r3, r3, #3
20000854:	189b      	adds	r3, r3, r2
20000856:	009b      	lsls	r3, r3, #2
20000858:	001a      	movs	r2, r3
2000085a:	687b      	ldr	r3, [r7, #4]
2000085c:	189b      	adds	r3, r3, r2
2000085e:	4a17      	ldr	r2, [pc, #92]	; (200008bc <init_snake+0x118>)
20000860:	619a      	str	r2, [r3, #24]
        s[i].draw = draw_object;
20000862:	68ba      	ldr	r2, [r7, #8]
20000864:	0013      	movs	r3, r2
20000866:	00db      	lsls	r3, r3, #3
20000868:	189b      	adds	r3, r3, r2
2000086a:	009b      	lsls	r3, r3, #2
2000086c:	001a      	movs	r2, r3
2000086e:	687b      	ldr	r3, [r7, #4]
20000870:	189b      	adds	r3, r3, r2
20000872:	4a13      	ldr	r2, [pc, #76]	; (200008c0 <init_snake+0x11c>)
20000874:	615a      	str	r2, [r3, #20]
        s[i].set_speed = set_object_speed;
20000876:	68ba      	ldr	r2, [r7, #8]
20000878:	0013      	movs	r3, r2
2000087a:	00db      	lsls	r3, r3, #3
2000087c:	189b      	adds	r3, r3, r2
2000087e:	009b      	lsls	r3, r3, #2
20000880:	001a      	movs	r2, r3
20000882:	687b      	ldr	r3, [r7, #4]
20000884:	189b      	adds	r3, r3, r2
20000886:	4a0f      	ldr	r2, [pc, #60]	; (200008c4 <init_snake+0x120>)
20000888:	621a      	str	r2, [r3, #32]
        snakeSize++;
2000088a:	4b0f      	ldr	r3, [pc, #60]	; (200008c8 <init_snake+0x124>)
2000088c:	681b      	ldr	r3, [r3, #0]
2000088e:	1c5a      	adds	r2, r3, #1
20000890:	4b0d      	ldr	r3, [pc, #52]	; (200008c8 <init_snake+0x124>)
20000892:	601a      	str	r2, [r3, #0]
    for (int i = 3; i >= 0; i--, j++){
20000894:	68bb      	ldr	r3, [r7, #8]
20000896:	3b01      	subs	r3, #1
20000898:	60bb      	str	r3, [r7, #8]
2000089a:	68fb      	ldr	r3, [r7, #12]
2000089c:	3301      	adds	r3, #1
2000089e:	60fb      	str	r3, [r7, #12]
200008a0:	68bb      	ldr	r3, [r7, #8]
200008a2:	2b00      	cmp	r3, #0
200008a4:	da87      	bge.n	200007b6 <init_snake+0x12>
    }
}
200008a6:	46c0      	nop			; (mov r8, r8)
200008a8:	46c0      	nop			; (mov r8, r8)
200008aa:	46bd      	mov	sp, r7
200008ac:	b004      	add	sp, #16
200008ae:	bd80      	pop	{r7, pc}
200008b0:	200034b0 			; <UNDEFINED> instruction: 0x200034b0
200008b4:	20003534 	andcs	r3, r0, r4, lsr r5
200008b8:	200003dd 	ldrdcs	r0, [r0], -sp
200008bc:	2000037b 	andcs	r0, r0, fp, ror r3
200008c0:	20000319 	andcs	r0, r0, r9, lsl r3
200008c4:	200002f9 	strdcs	r0, [r0], -r9
200008c8:	200022dc 	ldrdcs	r2, [r0], -ip

200008cc <restart_game>:

void restart_game(){
200008cc:	b580      	push	{r7, lr}
200008ce:	af00      	add	r7, sp, #0
        clear_backbuffer();
200008d0:	f000 fb13 	bl	20000efa <clear_backbuffer>
        graphic_draw_screen();
200008d4:	f000 fb6e 	bl	20000fb4 <graphic_draw_screen>
        points = 0;
200008d8:	4b04      	ldr	r3, [pc, #16]	; (200008ec <restart_game+0x20>)
200008da:	2200      	movs	r2, #0
200008dc:	601a      	str	r2, [r3, #0]
        snakeSize = 0;
200008de:	4b04      	ldr	r3, [pc, #16]	; (200008f0 <restart_game+0x24>)
200008e0:	2200      	movs	r2, #0
200008e2:	601a      	str	r2, [r3, #0]
}
200008e4:	46c0      	nop			; (mov r8, r8)
200008e6:	46bd      	mov	sp, r7
200008e8:	bd80      	pop	{r7, pc}
200008ea:	46c0      	nop			; (mov r8, r8)
200008ec:	200022d8 	ldrdcs	r2, [r0], -r8
200008f0:	200022dc 	ldrdcs	r2, [r0], -ip

200008f4 <main>:

void main(int argc, char **argv){
200008f4:	b5b0      	push	{r4, r5, r7, lr}
200008f6:	4c3d      	ldr	r4, [pc, #244]	; (200009ec <main+0xf8>)
200008f8:	44a5      	add	sp, r4
200008fa:	af00      	add	r7, sp, #0
200008fc:	6078      	str	r0, [r7, #4]
200008fe:	6039      	str	r1, [r7, #0]
    int game = 1, restart = 2;
20000900:	2301      	movs	r3, #1
20000902:	4a3b      	ldr	r2, [pc, #236]	; (200009f0 <main+0xfc>)
20000904:	18ba      	adds	r2, r7, r2
20000906:	6013      	str	r3, [r2, #0]
20000908:	2302      	movs	r3, #2
2000090a:	4a3a      	ldr	r2, [pc, #232]	; (200009f4 <main+0x100>)
2000090c:	18ba      	adds	r2, r7, r2
2000090e:	6013      	str	r3, [r2, #0]
    char key_stroke;
    
    POBJECT food = &food_obj;
20000910:	4b39      	ldr	r3, [pc, #228]	; (200009f8 <main+0x104>)
20000912:	4a3a      	ldr	r2, [pc, #232]	; (200009fc <main+0x108>)
20000914:	18ba      	adds	r2, r7, r2
20000916:	6013      	str	r3, [r2, #0]
    OBJECT snake[200];
    
        
    init_app();
20000918:	f7ff ff14 	bl	20000744 <init_app>
    graphic_init();
2000091c:	f000 f920 	bl	20000b60 <graphic_init>
    ascii_init();
20000920:	f7ff fb76 	bl	20000010 <ascii_init>
    
    while(game){
20000924:	e057      	b.n	200009d6 <main+0xe2>
        //while(keyb() != 5){
            //char[] *s = "You have :" 
            //ascii_write_char(*s++)
        //}
        
        if(restart == 2){
20000926:	4c33      	ldr	r4, [pc, #204]	; (200009f4 <main+0x100>)
20000928:	193b      	adds	r3, r7, r4
2000092a:	681b      	ldr	r3, [r3, #0]
2000092c:	2b02      	cmp	r3, #2
2000092e:	d14c      	bne.n	200009ca <main+0xd6>
            restart_game();
20000930:	f7ff ffcc 	bl	200008cc <restart_game>
            restart = 1;
20000934:	2301      	movs	r3, #1
20000936:	193a      	adds	r2, r7, r4
20000938:	6013      	str	r3, [r2, #0]
            init_snake(snake);
2000093a:	2308      	movs	r3, #8
2000093c:	18fb      	adds	r3, r7, r3
2000093e:	0018      	movs	r0, r3
20000940:	f7ff ff30 	bl	200007a4 <init_snake>
        }

        while(restart == 1){
20000944:	e041      	b.n	200009ca <main+0xd6>
            clear_backbuffer();            //graphic_draw_screen();
20000946:	f000 fad8 	bl	20000efa <clear_backbuffer>
            /*KOD HÄR*/
            
            draw_snake(snake);
2000094a:	2308      	movs	r3, #8
2000094c:	18fb      	adds	r3, r7, r3
2000094e:	0018      	movs	r0, r3
20000950:	f7ff fe11 	bl	20000576 <draw_snake>
                        
            graphic_draw_screen();
20000954:	f000 fb2e 	bl	20000fb4 <graphic_draw_screen>

            //delay_milli(40);
            key_stroke = keyb();
20000958:	4d29      	ldr	r5, [pc, #164]	; (20000a00 <main+0x10c>)
2000095a:	197c      	adds	r4, r7, r5
2000095c:	f000 f88a 	bl	20000a74 <keyb>
20000960:	0003      	movs	r3, r0
20000962:	7023      	strb	r3, [r4, #0]
            switch(key_stroke){
20000964:	197b      	adds	r3, r7, r5
20000966:	781b      	ldrb	r3, [r3, #0]
20000968:	2b0d      	cmp	r3, #13
2000096a:	d82f      	bhi.n	200009cc <main+0xd8>
2000096c:	009a      	lsls	r2, r3, #2
2000096e:	4b25      	ldr	r3, [pc, #148]	; (20000a04 <main+0x110>)
20000970:	18d3      	adds	r3, r2, r3
20000972:	681b      	ldr	r3, [r3, #0]
20000974:	469f      	mov	pc, r3
                case RIGHT: turn(RIGHT, snake); break; /*dirx = +, diry = 0*/
20000976:	2308      	movs	r3, #8
20000978:	18fb      	adds	r3, r7, r3
2000097a:	0019      	movs	r1, r3
2000097c:	2006      	movs	r0, #6
2000097e:	f7ff fe77 	bl	20000670 <turn>
20000982:	e023      	b.n	200009cc <main+0xd8>
                case LEFT: turn(LEFT, snake); break; /*dirx = -, diry = 0*/
20000984:	2308      	movs	r3, #8
20000986:	18fb      	adds	r3, r7, r3
20000988:	0019      	movs	r1, r3
2000098a:	2004      	movs	r0, #4
2000098c:	f7ff fe70 	bl	20000670 <turn>
20000990:	e01c      	b.n	200009cc <main+0xd8>
                case UP: turn(UP, snake); break; /*dirx = 0, diry = -*/
20000992:	2308      	movs	r3, #8
20000994:	18fb      	adds	r3, r7, r3
20000996:	0019      	movs	r1, r3
20000998:	2002      	movs	r0, #2
2000099a:	f7ff fe69 	bl	20000670 <turn>
2000099e:	e015      	b.n	200009cc <main+0xd8>
                case DOWN: turn(DOWN, snake); break; /*dirx = 0, diry = +*/
200009a0:	2308      	movs	r3, #8
200009a2:	18fb      	adds	r3, r7, r3
200009a4:	0019      	movs	r1, r3
200009a6:	2008      	movs	r0, #8
200009a8:	f7ff fe62 	bl	20000670 <turn>
200009ac:	e00e      	b.n	200009cc <main+0xd8>
                case QUIT: game = 0; restart = 0; break;
200009ae:	2300      	movs	r3, #0
200009b0:	4a0f      	ldr	r2, [pc, #60]	; (200009f0 <main+0xfc>)
200009b2:	18ba      	adds	r2, r7, r2
200009b4:	6013      	str	r3, [r2, #0]
200009b6:	2300      	movs	r3, #0
200009b8:	4a0e      	ldr	r2, [pc, #56]	; (200009f4 <main+0x100>)
200009ba:	18ba      	adds	r2, r7, r2
200009bc:	6013      	str	r3, [r2, #0]
200009be:	e005      	b.n	200009cc <main+0xd8>
                case RESTART: restart = 2; break;
200009c0:	2302      	movs	r3, #2
200009c2:	4a0c      	ldr	r2, [pc, #48]	; (200009f4 <main+0x100>)
200009c4:	18ba      	adds	r2, r7, r2
200009c6:	6013      	str	r3, [r2, #0]
200009c8:	e000      	b.n	200009cc <main+0xd8>
        while(restart == 1){
200009ca:	46c0      	nop			; (mov r8, r8)
200009cc:	4b09      	ldr	r3, [pc, #36]	; (200009f4 <main+0x100>)
200009ce:	18fb      	adds	r3, r7, r3
200009d0:	681b      	ldr	r3, [r3, #0]
200009d2:	2b01      	cmp	r3, #1
200009d4:	d0b7      	beq.n	20000946 <main+0x52>
    while(game){
200009d6:	4b06      	ldr	r3, [pc, #24]	; (200009f0 <main+0xfc>)
200009d8:	18fb      	adds	r3, r7, r3
200009da:	681b      	ldr	r3, [r3, #0]
200009dc:	2b00      	cmp	r3, #0
200009de:	d1a2      	bne.n	20000926 <main+0x32>
            }

        }
    }
}
200009e0:	46c0      	nop			; (mov r8, r8)
200009e2:	46c0      	nop			; (mov r8, r8)
200009e4:	46bd      	mov	sp, r7
200009e6:	4b08      	ldr	r3, [pc, #32]	; (20000a08 <main+0x114>)
200009e8:	449d      	add	sp, r3
200009ea:	bdb0      	pop	{r4, r5, r7, pc}
200009ec:	ffffe3c8 			; <UNDEFINED> instruction: 0xffffe3c8
200009f0:	00001c34 	andeq	r1, r0, r4, lsr ip
200009f4:	00001c30 	andeq	r1, r0, r0, lsr ip
200009f8:	2000358c 	andcs	r3, r0, ip, lsl #11
200009fc:	00001c2c 	andeq	r1, r0, ip, lsr #24
20000a00:	00001c2b 	andeq	r1, r0, fp, lsr #24
20000a04:	200035b4 			; <UNDEFINED> instruction: 0x200035b4
20000a08:	00001c38 	andeq	r1, r0, r8, lsr ip

20000a0c <activate_row>:
#include <defines.h>
#include <keyb.h>

void activate_row(int i){
20000a0c:	b580      	push	{r7, lr}
20000a0e:	b082      	sub	sp, #8
20000a10:	af00      	add	r7, sp, #0
20000a12:	6078      	str	r0, [r7, #4]
    *GPIO_D_ODR_HIGH = 1 << (i+4);
20000a14:	687b      	ldr	r3, [r7, #4]
20000a16:	3304      	adds	r3, #4
20000a18:	2201      	movs	r2, #1
20000a1a:	409a      	lsls	r2, r3
20000a1c:	4b03      	ldr	r3, [pc, #12]	; (20000a2c <activate_row+0x20>)
20000a1e:	b2d2      	uxtb	r2, r2
20000a20:	701a      	strb	r2, [r3, #0]
}
20000a22:	46c0      	nop			; (mov r8, r8)
20000a24:	46bd      	mov	sp, r7
20000a26:	b002      	add	sp, #8
20000a28:	bd80      	pop	{r7, pc}
20000a2a:	46c0      	nop			; (mov r8, r8)
20000a2c:	40020c15 	andmi	r0, r2, r5, lsl ip

20000a30 <read_coloumn>:

int read_coloumn(){
20000a30:	b580      	push	{r7, lr}
20000a32:	b082      	sub	sp, #8
20000a34:	af00      	add	r7, sp, #0
    int j; 
    char input = *GPIO_D_IDR_HIGH;
20000a36:	4a0e      	ldr	r2, [pc, #56]	; (20000a70 <read_coloumn+0x40>)
20000a38:	1cfb      	adds	r3, r7, #3
20000a3a:	7812      	ldrb	r2, [r2, #0]
20000a3c:	701a      	strb	r2, [r3, #0]
    for(j = 0; j<4 ; j++){
20000a3e:	2300      	movs	r3, #0
20000a40:	607b      	str	r3, [r7, #4]
20000a42:	e00c      	b.n	20000a5e <read_coloumn+0x2e>
        if (input&(1<<j)){
20000a44:	1cfb      	adds	r3, r7, #3
20000a46:	781a      	ldrb	r2, [r3, #0]
20000a48:	687b      	ldr	r3, [r7, #4]
20000a4a:	411a      	asrs	r2, r3
20000a4c:	0013      	movs	r3, r2
20000a4e:	2201      	movs	r2, #1
20000a50:	4013      	ands	r3, r2
20000a52:	d001      	beq.n	20000a58 <read_coloumn+0x28>
            return j;
20000a54:	687b      	ldr	r3, [r7, #4]
20000a56:	e007      	b.n	20000a68 <read_coloumn+0x38>
    for(j = 0; j<4 ; j++){
20000a58:	687b      	ldr	r3, [r7, #4]
20000a5a:	3301      	adds	r3, #1
20000a5c:	607b      	str	r3, [r7, #4]
20000a5e:	687b      	ldr	r3, [r7, #4]
20000a60:	2b03      	cmp	r3, #3
20000a62:	ddef      	ble.n	20000a44 <read_coloumn+0x14>
        }
    }
    return -1;
20000a64:	2301      	movs	r3, #1
20000a66:	425b      	negs	r3, r3
}
20000a68:	0018      	movs	r0, r3
20000a6a:	46bd      	mov	sp, r7
20000a6c:	b002      	add	sp, #8
20000a6e:	bd80      	pop	{r7, pc}
20000a70:	40020c11 	andmi	r0, r2, r1, lsl ip

20000a74 <keyb>:

/*rader in, kolumner ut*/
unsigned char keyb(void){
20000a74:	b590      	push	{r4, r7, lr}
20000a76:	b08b      	sub	sp, #44	; 0x2c
20000a78:	af00      	add	r7, sp, #0
    unsigned char key_value[] = {0x06,0x5B,0x4F,0x77,0x66,0x6D,0x7D,0x7C,0x07,0x7F,0x6F,0x39,0x79,0x3F,0x71,0xBF};
20000a7a:	2310      	movs	r3, #16
20000a7c:	18fb      	adds	r3, r7, r3
20000a7e:	4a15      	ldr	r2, [pc, #84]	; (20000ad4 <keyb+0x60>)
20000a80:	ca13      	ldmia	r2!, {r0, r1, r4}
20000a82:	c313      	stmia	r3!, {r0, r1, r4}
20000a84:	6812      	ldr	r2, [r2, #0]
20000a86:	601a      	str	r2, [r3, #0]
    unsigned char keyVal[] = {1,2,3,0xA,4,5,6,0xB,7,8,9,0xC,0xE,0,0xF,0xD};
20000a88:	003b      	movs	r3, r7
20000a8a:	4a13      	ldr	r2, [pc, #76]	; (20000ad8 <keyb+0x64>)
20000a8c:	ca13      	ldmia	r2!, {r0, r1, r4}
20000a8e:	c313      	stmia	r3!, {r0, r1, r4}
20000a90:	6812      	ldr	r2, [r2, #0]
20000a92:	601a      	str	r2, [r3, #0]
    
        
    int row, coloumn;
    for (row = 0; row < 4; row++){
20000a94:	2300      	movs	r3, #0
20000a96:	627b      	str	r3, [r7, #36]	; 0x24
20000a98:	e014      	b.n	20000ac4 <keyb+0x50>
        activate_row(row);
20000a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20000a9c:	0018      	movs	r0, r3
20000a9e:	f7ff ffb5 	bl	20000a0c <activate_row>
        coloumn = read_coloumn();
20000aa2:	f7ff ffc5 	bl	20000a30 <read_coloumn>
20000aa6:	0003      	movs	r3, r0
20000aa8:	623b      	str	r3, [r7, #32]
        if (coloumn != -1){
20000aaa:	6a3b      	ldr	r3, [r7, #32]
20000aac:	3301      	adds	r3, #1
20000aae:	d006      	beq.n	20000abe <keyb+0x4a>
            return keyVal[coloumn+row*4];
20000ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20000ab2:	009a      	lsls	r2, r3, #2
20000ab4:	6a3b      	ldr	r3, [r7, #32]
20000ab6:	18d3      	adds	r3, r2, r3
20000ab8:	003a      	movs	r2, r7
20000aba:	5cd3      	ldrb	r3, [r2, r3]
20000abc:	e006      	b.n	20000acc <keyb+0x58>
    for (row = 0; row < 4; row++){
20000abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20000ac0:	3301      	adds	r3, #1
20000ac2:	627b      	str	r3, [r7, #36]	; 0x24
20000ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20000ac6:	2b03      	cmp	r3, #3
20000ac8:	dde7      	ble.n	20000a9a <keyb+0x26>
        }
    }
    return 0x00;
20000aca:	2300      	movs	r3, #0
}
20000acc:	0018      	movs	r0, r3
20000ace:	46bd      	mov	sp, r7
20000ad0:	b00b      	add	sp, #44	; 0x2c
20000ad2:	bd90      	pop	{r4, r7, pc}
20000ad4:	200035ec 	andcs	r3, r0, ip, ror #11
20000ad8:	200035fc 	strdcs	r3, [r0], -ip

20000adc <out7seg>:

void out7seg(unsigned char c){
20000adc:	b580      	push	{r7, lr}
20000ade:	b082      	sub	sp, #8
20000ae0:	af00      	add	r7, sp, #0
20000ae2:	0002      	movs	r2, r0
20000ae4:	1dfb      	adds	r3, r7, #7
20000ae6:	701a      	strb	r2, [r3, #0]
    
    *GPIO_D_ODR_LOW = c; //0x00 -> 0xFF
20000ae8:	4a03      	ldr	r2, [pc, #12]	; (20000af8 <out7seg+0x1c>)
20000aea:	1dfb      	adds	r3, r7, #7
20000aec:	781b      	ldrb	r3, [r3, #0]
20000aee:	7013      	strb	r3, [r2, #0]
    
20000af0:	46c0      	nop			; (mov r8, r8)
20000af2:	46bd      	mov	sp, r7
20000af4:	b002      	add	sp, #8
20000af6:	bd80      	pop	{r7, pc}
20000af8:	40020c14 	andmi	r0, r2, r4, lsl ip

20000afc <delay_250ns>:
#include <defines.h>
#include <delay.h>


void delay_250ns ( void){
20000afc:	b580      	push	{r7, lr}
20000afe:	af00      	add	r7, sp, #0
    #ifdef SIMULATOR
        return;
20000b00:	46c0      	nop			; (mov r8, r8)
    *STK_LOAD = ( (168/4) -1 );
    *STK_VAL = 0;
    *STK_CTRL = 5;
    while( (*STK_CTRL & 0x10000 )== 0 ) {} 
    *STK_CTRL = 0;
}
20000b02:	46bd      	mov	sp, r7
20000b04:	bd80      	pop	{r7, pc}

20000b06 <delay_500ns>:

void delay_500ns(void){
20000b06:	b580      	push	{r7, lr}
20000b08:	af00      	add	r7, sp, #0
    #ifdef SIMULATOR
        return;
20000b0a:	46c0      	nop			; (mov r8, r8)
    #endif
    delay_250ns();
    delay_250ns();
}
20000b0c:	46bd      	mov	sp, r7
20000b0e:	bd80      	pop	{r7, pc}

20000b10 <delay_mikro>:

void delay_mikro(unsigned int us){
20000b10:	b580      	push	{r7, lr}
20000b12:	b082      	sub	sp, #8
20000b14:	af00      	add	r7, sp, #0
20000b16:	6078      	str	r0, [r7, #4]
    #ifdef SIMULATOR
        return;
20000b18:	46c0      	nop			; (mov r8, r8)
        delay_250ns();
        delay_250ns();
        delay_250ns();
        delay_250ns();
    }
}
20000b1a:	46bd      	mov	sp, r7
20000b1c:	b002      	add	sp, #8
20000b1e:	bd80      	pop	{r7, pc}

20000b20 <delay_milli>:

void delay_milli(unsigned int ms){
20000b20:	b580      	push	{r7, lr}
20000b22:	b082      	sub	sp, #8
20000b24:	af00      	add	r7, sp, #0
20000b26:	6078      	str	r0, [r7, #4]
    #ifdef SIMULATOR
        ms = ms / 1000;
20000b28:	687b      	ldr	r3, [r7, #4]
20000b2a:	22fa      	movs	r2, #250	; 0xfa
20000b2c:	0091      	lsls	r1, r2, #2
20000b2e:	0018      	movs	r0, r3
20000b30:	f000 fb46 	bl	200011c0 <__udivsi3>
20000b34:	0003      	movs	r3, r0
20000b36:	607b      	str	r3, [r7, #4]
        ms++;
20000b38:	687b      	ldr	r3, [r7, #4]
20000b3a:	3301      	adds	r3, #1
20000b3c:	607b      	str	r3, [r7, #4]
    #endif
    
    while(ms--){
20000b3e:	e004      	b.n	20000b4a <delay_milli+0x2a>
        delay_mikro(1000);
20000b40:	23fa      	movs	r3, #250	; 0xfa
20000b42:	009b      	lsls	r3, r3, #2
20000b44:	0018      	movs	r0, r3
20000b46:	f7ff ffe3 	bl	20000b10 <delay_mikro>
    while(ms--){
20000b4a:	687b      	ldr	r3, [r7, #4]
20000b4c:	1e5a      	subs	r2, r3, #1
20000b4e:	607a      	str	r2, [r7, #4]
20000b50:	2b00      	cmp	r3, #0
20000b52:	d1f5      	bne.n	20000b40 <delay_milli+0x20>
    }
20000b54:	46c0      	nop			; (mov r8, r8)
20000b56:	46c0      	nop			; (mov r8, r8)
20000b58:	46bd      	mov	sp, r7
20000b5a:	b002      	add	sp, #8
20000b5c:	bd80      	pop	{r7, pc}
	...

20000b60 <graphic_init>:
#include <defines.h>
#include <asciidisplay.h>
#include <graphicdisplay.h>


void graphic_init(void){
20000b60:	b580      	push	{r7, lr}
20000b62:	af00      	add	r7, sp, #0
    graphic_ctrl_bit_set(B_E);
20000b64:	2040      	movs	r0, #64	; 0x40
20000b66:	f000 f851 	bl	20000c0c <graphic_ctrl_bit_set>
    delay_mikro(10);
20000b6a:	200a      	movs	r0, #10
20000b6c:	f7ff ffd0 	bl	20000b10 <delay_mikro>
    graphic_ctrl_bit_clear(B_CS1|B_CS2|B_RST|B_E);
20000b70:	2078      	movs	r0, #120	; 0x78
20000b72:	f000 f823 	bl	20000bbc <graphic_ctrl_bit_clear>
    delay_milli(30);
20000b76:	201e      	movs	r0, #30
20000b78:	f7ff ffd2 	bl	20000b20 <delay_milli>
    graphic_ctrl_bit_set(B_RST);
20000b7c:	2020      	movs	r0, #32
20000b7e:	f000 f845 	bl	20000c0c <graphic_ctrl_bit_set>
    delay_milli(100);
20000b82:	2064      	movs	r0, #100	; 0x64
20000b84:	f7ff ffcc 	bl	20000b20 <delay_milli>
    graphic_write_command(LCD_OFF, B_CS1|B_CS2);
20000b88:	2118      	movs	r1, #24
20000b8a:	203e      	movs	r0, #62	; 0x3e
20000b8c:	f000 f942 	bl	20000e14 <graphic_write_command>
    graphic_write_command(LCD_ON, B_CS1|B_CS2);
20000b90:	2118      	movs	r1, #24
20000b92:	203f      	movs	r0, #63	; 0x3f
20000b94:	f000 f93e 	bl	20000e14 <graphic_write_command>
    graphic_write_command(LCD_DISP_START, B_CS1|B_CS2);
20000b98:	2118      	movs	r1, #24
20000b9a:	20c0      	movs	r0, #192	; 0xc0
20000b9c:	f000 f93a 	bl	20000e14 <graphic_write_command>
    graphic_write_command(LCD_SET_ADD, B_CS1|B_CS2);
20000ba0:	2118      	movs	r1, #24
20000ba2:	2040      	movs	r0, #64	; 0x40
20000ba4:	f000 f936 	bl	20000e14 <graphic_write_command>
    graphic_write_command(LCD_SET_PAGE, B_CS1|B_CS2);
20000ba8:	2118      	movs	r1, #24
20000baa:	20b8      	movs	r0, #184	; 0xb8
20000bac:	f000 f932 	bl	20000e14 <graphic_write_command>
    select_controller(0);
20000bb0:	2000      	movs	r0, #0
20000bb2:	f000 f84d 	bl	20000c50 <select_controller>
}
20000bb6:	46c0      	nop			; (mov r8, r8)
20000bb8:	46bd      	mov	sp, r7
20000bba:	bd80      	pop	{r7, pc}

20000bbc <graphic_ctrl_bit_clear>:

void graphic_ctrl_bit_clear(uint8_t x){
20000bbc:	b580      	push	{r7, lr}
20000bbe:	b084      	sub	sp, #16
20000bc0:	af00      	add	r7, sp, #0
20000bc2:	0002      	movs	r2, r0
20000bc4:	1dfb      	adds	r3, r7, #7
20000bc6:	701a      	strb	r2, [r3, #0]
    //*GPIO_E_ODR_LOW &= ( B_SELECT | ~x);
    //ascii_ctrl_bit_clear(x);
    uint8_t c;
    c =*GPIO_E_ODR_LOW;
20000bc8:	4a0f      	ldr	r2, [pc, #60]	; (20000c08 <graphic_ctrl_bit_clear+0x4c>)
20000bca:	210f      	movs	r1, #15
20000bcc:	187b      	adds	r3, r7, r1
20000bce:	7812      	ldrb	r2, [r2, #0]
20000bd0:	701a      	strb	r2, [r3, #0]
    c &= ~x;
20000bd2:	1dfb      	adds	r3, r7, #7
20000bd4:	781b      	ldrb	r3, [r3, #0]
20000bd6:	b25b      	sxtb	r3, r3
20000bd8:	43db      	mvns	r3, r3
20000bda:	b25b      	sxtb	r3, r3
20000bdc:	187a      	adds	r2, r7, r1
20000bde:	7812      	ldrb	r2, [r2, #0]
20000be0:	b252      	sxtb	r2, r2
20000be2:	4013      	ands	r3, r2
20000be4:	b25a      	sxtb	r2, r3
20000be6:	187b      	adds	r3, r7, r1
20000be8:	701a      	strb	r2, [r3, #0]
    c &= ~B_SELECT;
20000bea:	187b      	adds	r3, r7, r1
20000bec:	0008      	movs	r0, r1
20000bee:	187a      	adds	r2, r7, r1
20000bf0:	7812      	ldrb	r2, [r2, #0]
20000bf2:	2104      	movs	r1, #4
20000bf4:	438a      	bics	r2, r1
20000bf6:	701a      	strb	r2, [r3, #0]
    *GPIO_E_ODR_LOW=c;
20000bf8:	4a03      	ldr	r2, [pc, #12]	; (20000c08 <graphic_ctrl_bit_clear+0x4c>)
20000bfa:	183b      	adds	r3, r7, r0
20000bfc:	781b      	ldrb	r3, [r3, #0]
20000bfe:	7013      	strb	r3, [r2, #0]

}
20000c00:	46c0      	nop			; (mov r8, r8)
20000c02:	46bd      	mov	sp, r7
20000c04:	b004      	add	sp, #16
20000c06:	bd80      	pop	{r7, pc}
20000c08:	40021014 	andmi	r1, r2, r4, lsl r0

20000c0c <graphic_ctrl_bit_set>:

void graphic_ctrl_bit_set(uint8_t x){
20000c0c:	b580      	push	{r7, lr}
20000c0e:	b084      	sub	sp, #16
20000c10:	af00      	add	r7, sp, #0
20000c12:	0002      	movs	r2, r0
20000c14:	1dfb      	adds	r3, r7, #7
20000c16:	701a      	strb	r2, [r3, #0]
    //*GPIO_E_ODR_LOW |= (B_SELECT | x );
    //ascii_ctrl_bit_set(x);
    uint8_t c;
    c =*GPIO_E_ODR_LOW;
20000c18:	4a0c      	ldr	r2, [pc, #48]	; (20000c4c <graphic_ctrl_bit_set+0x40>)
20000c1a:	200f      	movs	r0, #15
20000c1c:	183b      	adds	r3, r7, r0
20000c1e:	7812      	ldrb	r2, [r2, #0]
20000c20:	701a      	strb	r2, [r3, #0]
    c |= x; 
20000c22:	183b      	adds	r3, r7, r0
20000c24:	1839      	adds	r1, r7, r0
20000c26:	1dfa      	adds	r2, r7, #7
20000c28:	7809      	ldrb	r1, [r1, #0]
20000c2a:	7812      	ldrb	r2, [r2, #0]
20000c2c:	430a      	orrs	r2, r1
20000c2e:	701a      	strb	r2, [r3, #0]
    c &=(~B_SELECT);
20000c30:	183b      	adds	r3, r7, r0
20000c32:	183a      	adds	r2, r7, r0
20000c34:	7812      	ldrb	r2, [r2, #0]
20000c36:	2104      	movs	r1, #4
20000c38:	438a      	bics	r2, r1
20000c3a:	701a      	strb	r2, [r3, #0]
    *GPIO_E_ODR_LOW= c;
20000c3c:	4a03      	ldr	r2, [pc, #12]	; (20000c4c <graphic_ctrl_bit_set+0x40>)
20000c3e:	183b      	adds	r3, r7, r0
20000c40:	781b      	ldrb	r3, [r3, #0]
20000c42:	7013      	strb	r3, [r2, #0]
}
20000c44:	46c0      	nop			; (mov r8, r8)
20000c46:	46bd      	mov	sp, r7
20000c48:	b004      	add	sp, #16
20000c4a:	bd80      	pop	{r7, pc}
20000c4c:	40021014 	andmi	r1, r2, r4, lsl r0

20000c50 <select_controller>:

void select_controller(uint8_t controller){
20000c50:	b580      	push	{r7, lr}
20000c52:	b082      	sub	sp, #8
20000c54:	af00      	add	r7, sp, #0
20000c56:	0002      	movs	r2, r0
20000c58:	1dfb      	adds	r3, r7, #7
20000c5a:	701a      	strb	r2, [r3, #0]
    switch(controller){
20000c5c:	1dfb      	adds	r3, r7, #7
20000c5e:	781b      	ldrb	r3, [r3, #0]
20000c60:	2b18      	cmp	r3, #24
20000c62:	d01a      	beq.n	20000c9a <select_controller+0x4a>
20000c64:	dc1d      	bgt.n	20000ca2 <select_controller+0x52>
20000c66:	2b10      	cmp	r3, #16
20000c68:	d010      	beq.n	20000c8c <select_controller+0x3c>
20000c6a:	dc1a      	bgt.n	20000ca2 <select_controller+0x52>
20000c6c:	2b00      	cmp	r3, #0
20000c6e:	d002      	beq.n	20000c76 <select_controller+0x26>
20000c70:	2b08      	cmp	r3, #8
20000c72:	d004      	beq.n	20000c7e <select_controller+0x2e>
            
        case B_CS1 | B_CS2:
            graphic_ctrl_bit_set(B_CS1|B_CS2);
            break;
    }
}
20000c74:	e015      	b.n	20000ca2 <select_controller+0x52>
            graphic_ctrl_bit_clear(B_CS1|B_CS2);
20000c76:	2018      	movs	r0, #24
20000c78:	f7ff ffa0 	bl	20000bbc <graphic_ctrl_bit_clear>
            break;
20000c7c:	e011      	b.n	20000ca2 <select_controller+0x52>
            graphic_ctrl_bit_set(B_CS1);
20000c7e:	2008      	movs	r0, #8
20000c80:	f7ff ffc4 	bl	20000c0c <graphic_ctrl_bit_set>
            graphic_ctrl_bit_clear(B_CS2);
20000c84:	2010      	movs	r0, #16
20000c86:	f7ff ff99 	bl	20000bbc <graphic_ctrl_bit_clear>
            break;
20000c8a:	e00a      	b.n	20000ca2 <select_controller+0x52>
            graphic_ctrl_bit_clear(B_CS1);
20000c8c:	2008      	movs	r0, #8
20000c8e:	f7ff ff95 	bl	20000bbc <graphic_ctrl_bit_clear>
            graphic_ctrl_bit_set(B_CS2);
20000c92:	2010      	movs	r0, #16
20000c94:	f7ff ffba 	bl	20000c0c <graphic_ctrl_bit_set>
            break;
20000c98:	e003      	b.n	20000ca2 <select_controller+0x52>
            graphic_ctrl_bit_set(B_CS1|B_CS2);
20000c9a:	2018      	movs	r0, #24
20000c9c:	f7ff ffb6 	bl	20000c0c <graphic_ctrl_bit_set>
            break;
20000ca0:	46c0      	nop			; (mov r8, r8)
}
20000ca2:	46c0      	nop			; (mov r8, r8)
20000ca4:	46bd      	mov	sp, r7
20000ca6:	b002      	add	sp, #8
20000ca8:	bd80      	pop	{r7, pc}

20000caa <graphic_wait_ready>:

void graphic_wait_ready(void){
20000caa:	b580      	push	{r7, lr}
20000cac:	af00      	add	r7, sp, #0
    graphic_ctrl_bit_clear(B_E);
20000cae:	2040      	movs	r0, #64	; 0x40
20000cb0:	f7ff ff84 	bl	20000bbc <graphic_ctrl_bit_clear>
    *GPIO_E_MODER = 0x00005555;
20000cb4:	4b0a      	ldr	r3, [pc, #40]	; (20000ce0 <graphic_wait_ready+0x36>)
20000cb6:	4a0b      	ldr	r2, [pc, #44]	; (20000ce4 <graphic_wait_ready+0x3a>)
20000cb8:	601a      	str	r2, [r3, #0]
    graphic_ctrl_bit_clear(B_RS);
20000cba:	2001      	movs	r0, #1
20000cbc:	f7ff ff7e 	bl	20000bbc <graphic_ctrl_bit_clear>
    graphic_ctrl_bit_set(B_RW);
20000cc0:	2002      	movs	r0, #2
20000cc2:	f7ff ffa3 	bl	20000c0c <graphic_ctrl_bit_set>
    delay_500ns();
20000cc6:	f7ff ff1e 	bl	20000b06 <delay_500ns>
    while(1){
        graphic_ctrl_bit_set(B_E);
20000cca:	2040      	movs	r0, #64	; 0x40
20000ccc:	f7ff ff9e 	bl	20000c0c <graphic_ctrl_bit_set>
        delay_500ns();
20000cd0:	f7ff ff19 	bl	20000b06 <delay_500ns>
        graphic_ctrl_bit_clear(B_E);
20000cd4:	2040      	movs	r0, #64	; 0x40
20000cd6:	f7ff ff71 	bl	20000bbc <graphic_ctrl_bit_clear>
        delay_500ns();
20000cda:	f7ff ff14 	bl	20000b06 <delay_500ns>
        graphic_ctrl_bit_set(B_E);
20000cde:	e7f4      	b.n	20000cca <graphic_wait_ready+0x20>
20000ce0:	40021000 	andmi	r1, r2, r0
20000ce4:	00005555 	andeq	r5, r0, r5, asr r5

20000ce8 <graphic_read>:
    //graphic_ctrl_bit_set(B_E); // Ej på föreläsning
    *GPIO_E_MODER = 0x55555555;
    
}

unsigned char graphic_read(unsigned char controller){
20000ce8:	b580      	push	{r7, lr}
20000cea:	b084      	sub	sp, #16
20000cec:	af00      	add	r7, sp, #0
20000cee:	0002      	movs	r2, r0
20000cf0:	1dfb      	adds	r3, r7, #7
20000cf2:	701a      	strb	r2, [r3, #0]
    graphic_ctrl_bit_clear(B_E);
20000cf4:	2040      	movs	r0, #64	; 0x40
20000cf6:	f7ff ff61 	bl	20000bbc <graphic_ctrl_bit_clear>
    *GPIO_E_MODER = 0x00005555;
20000cfa:	4b1a      	ldr	r3, [pc, #104]	; (20000d64 <graphic_read+0x7c>)
20000cfc:	4a1a      	ldr	r2, [pc, #104]	; (20000d68 <graphic_read+0x80>)
20000cfe:	601a      	str	r2, [r3, #0]
    graphic_ctrl_bit_set(B_RS|B_RW);
20000d00:	2003      	movs	r0, #3
20000d02:	f7ff ff83 	bl	20000c0c <graphic_ctrl_bit_set>
    select_controller(controller);              //EJ i Boken
20000d06:	1dfb      	adds	r3, r7, #7
20000d08:	781b      	ldrb	r3, [r3, #0]
20000d0a:	0018      	movs	r0, r3
20000d0c:	f7ff ffa0 	bl	20000c50 <select_controller>
    delay_500ns();
20000d10:	f7ff fef9 	bl	20000b06 <delay_500ns>
    graphic_ctrl_bit_set(B_E);
20000d14:	2040      	movs	r0, #64	; 0x40
20000d16:	f7ff ff79 	bl	20000c0c <graphic_ctrl_bit_set>
    delay_500ns();
20000d1a:	f7ff fef4 	bl	20000b06 <delay_500ns>
    unsigned char retval = *GPIO_E_IDR_HIGH;
20000d1e:	4a13      	ldr	r2, [pc, #76]	; (20000d6c <graphic_read+0x84>)
20000d20:	230f      	movs	r3, #15
20000d22:	18fb      	adds	r3, r7, r3
20000d24:	7812      	ldrb	r2, [r2, #0]
20000d26:	701a      	strb	r2, [r3, #0]
    graphic_ctrl_bit_clear(B_E);
20000d28:	2040      	movs	r0, #64	; 0x40
20000d2a:	f7ff ff47 	bl	20000bbc <graphic_ctrl_bit_clear>
    *GPIO_E_MODER = 0x55555555;
20000d2e:	4b0d      	ldr	r3, [pc, #52]	; (20000d64 <graphic_read+0x7c>)
20000d30:	4a0f      	ldr	r2, [pc, #60]	; (20000d70 <graphic_read+0x88>)
20000d32:	601a      	str	r2, [r3, #0]
    
    if (controller & B_CS1){
20000d34:	1dfb      	adds	r3, r7, #7
20000d36:	781b      	ldrb	r3, [r3, #0]
20000d38:	2208      	movs	r2, #8
20000d3a:	4013      	ands	r3, r2
20000d3c:	d002      	beq.n	20000d44 <graphic_read+0x5c>
        select_controller(B_CS1);
20000d3e:	2008      	movs	r0, #8
20000d40:	f7ff ff86 	bl	20000c50 <select_controller>
        //graphic_wait_ready();
    }
    if (controller & B_CS2){
20000d44:	1dfb      	adds	r3, r7, #7
20000d46:	781b      	ldrb	r3, [r3, #0]
20000d48:	2210      	movs	r2, #16
20000d4a:	4013      	ands	r3, r2
20000d4c:	d002      	beq.n	20000d54 <graphic_read+0x6c>
        select_controller(B_CS2);
20000d4e:	2010      	movs	r0, #16
20000d50:	f7ff ff7e 	bl	20000c50 <select_controller>
        //graphic_wait_ready();
    }
    return retval;
20000d54:	230f      	movs	r3, #15
20000d56:	18fb      	adds	r3, r7, r3
20000d58:	781b      	ldrb	r3, [r3, #0]
}
20000d5a:	0018      	movs	r0, r3
20000d5c:	46bd      	mov	sp, r7
20000d5e:	b004      	add	sp, #16
20000d60:	bd80      	pop	{r7, pc}
20000d62:	46c0      	nop			; (mov r8, r8)
20000d64:	40021000 	andmi	r1, r2, r0
20000d68:	00005555 	andeq	r5, r0, r5, asr r5
20000d6c:	40021011 	andmi	r1, r2, r1, lsl r0
20000d70:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000d74 <graphic_read_data>:

uint8_t graphic_read_data(uint8_t controller){
20000d74:	b580      	push	{r7, lr}
20000d76:	b082      	sub	sp, #8
20000d78:	af00      	add	r7, sp, #0
20000d7a:	0002      	movs	r2, r0
20000d7c:	1dfb      	adds	r3, r7, #7
20000d7e:	701a      	strb	r2, [r3, #0]
    (void) graphic_read(controller);
20000d80:	1dfb      	adds	r3, r7, #7
20000d82:	781b      	ldrb	r3, [r3, #0]
20000d84:	0018      	movs	r0, r3
20000d86:	f7ff ffaf 	bl	20000ce8 <graphic_read>
    return graphic_read(controller);
20000d8a:	1dfb      	adds	r3, r7, #7
20000d8c:	781b      	ldrb	r3, [r3, #0]
20000d8e:	0018      	movs	r0, r3
20000d90:	f7ff ffaa 	bl	20000ce8 <graphic_read>
20000d94:	0003      	movs	r3, r0
}
20000d96:	0018      	movs	r0, r3
20000d98:	46bd      	mov	sp, r7
20000d9a:	b002      	add	sp, #8
20000d9c:	bd80      	pop	{r7, pc}

20000d9e <graphic_write>:

void graphic_write(uint8_t value, uint8_t controller){
20000d9e:	b580      	push	{r7, lr}
20000da0:	b082      	sub	sp, #8
20000da2:	af00      	add	r7, sp, #0
20000da4:	0002      	movs	r2, r0
20000da6:	1dfb      	adds	r3, r7, #7
20000da8:	701a      	strb	r2, [r3, #0]
20000daa:	1dbb      	adds	r3, r7, #6
20000dac:	1c0a      	adds	r2, r1, #0
20000dae:	701a      	strb	r2, [r3, #0]
    *GPIO_E_ODR_HIGH = value;
20000db0:	4a17      	ldr	r2, [pc, #92]	; (20000e10 <graphic_write+0x72>)
20000db2:	1dfb      	adds	r3, r7, #7
20000db4:	781b      	ldrb	r3, [r3, #0]
20000db6:	7013      	strb	r3, [r2, #0]
    select_controller(controller);
20000db8:	1dbb      	adds	r3, r7, #6
20000dba:	781b      	ldrb	r3, [r3, #0]
20000dbc:	0018      	movs	r0, r3
20000dbe:	f7ff ff47 	bl	20000c50 <select_controller>
    delay_500ns();
20000dc2:	f7ff fea0 	bl	20000b06 <delay_500ns>
    graphic_ctrl_bit_set(B_E);
20000dc6:	2040      	movs	r0, #64	; 0x40
20000dc8:	f7ff ff20 	bl	20000c0c <graphic_ctrl_bit_set>
    delay_500ns();
20000dcc:	f7ff fe9b 	bl	20000b06 <delay_500ns>
    graphic_ctrl_bit_clear(B_E);
20000dd0:	2040      	movs	r0, #64	; 0x40
20000dd2:	f7ff fef3 	bl	20000bbc <graphic_ctrl_bit_clear>
    
    if(controller & B_CS1){
20000dd6:	1dbb      	adds	r3, r7, #6
20000dd8:	781b      	ldrb	r3, [r3, #0]
20000dda:	2208      	movs	r2, #8
20000ddc:	4013      	ands	r3, r2
20000dde:	d002      	beq.n	20000de6 <graphic_write+0x48>
        select_controller(B_CS1);
20000de0:	2008      	movs	r0, #8
20000de2:	f7ff ff35 	bl	20000c50 <select_controller>
        //graphic_wait_ready();
    }
    if(controller & B_CS2){
20000de6:	1dbb      	adds	r3, r7, #6
20000de8:	781b      	ldrb	r3, [r3, #0]
20000dea:	2210      	movs	r2, #16
20000dec:	4013      	ands	r3, r2
20000dee:	d002      	beq.n	20000df6 <graphic_write+0x58>
        select_controller(B_CS2);
20000df0:	2010      	movs	r0, #16
20000df2:	f7ff ff2d 	bl	20000c50 <select_controller>
        //graphic_wait_ready();
    }
    
    /* INTE på föreläsning*/
    *GPIO_E_ODR_HIGH = 0;
20000df6:	4b06      	ldr	r3, [pc, #24]	; (20000e10 <graphic_write+0x72>)
20000df8:	2200      	movs	r2, #0
20000dfa:	701a      	strb	r2, [r3, #0]
    graphic_ctrl_bit_set(B_E);
20000dfc:	2040      	movs	r0, #64	; 0x40
20000dfe:	f7ff ff05 	bl	20000c0c <graphic_ctrl_bit_set>
    select_controller(0);
20000e02:	2000      	movs	r0, #0
20000e04:	f7ff ff24 	bl	20000c50 <select_controller>
      
}
20000e08:	46c0      	nop			; (mov r8, r8)
20000e0a:	46bd      	mov	sp, r7
20000e0c:	b002      	add	sp, #8
20000e0e:	bd80      	pop	{r7, pc}
20000e10:	40021015 	andmi	r1, r2, r5, lsl r0

20000e14 <graphic_write_command>:

void graphic_write_command(uint8_t cmd, uint8_t controller){
20000e14:	b580      	push	{r7, lr}
20000e16:	b082      	sub	sp, #8
20000e18:	af00      	add	r7, sp, #0
20000e1a:	0002      	movs	r2, r0
20000e1c:	1dfb      	adds	r3, r7, #7
20000e1e:	701a      	strb	r2, [r3, #0]
20000e20:	1dbb      	adds	r3, r7, #6
20000e22:	1c0a      	adds	r2, r1, #0
20000e24:	701a      	strb	r2, [r3, #0]
    graphic_ctrl_bit_clear(B_E);
20000e26:	2040      	movs	r0, #64	; 0x40
20000e28:	f7ff fec8 	bl	20000bbc <graphic_ctrl_bit_clear>
    select_controller(controller);
20000e2c:	1dbb      	adds	r3, r7, #6
20000e2e:	781b      	ldrb	r3, [r3, #0]
20000e30:	0018      	movs	r0, r3
20000e32:	f7ff ff0d 	bl	20000c50 <select_controller>
    graphic_ctrl_bit_clear(B_RS);
20000e36:	2001      	movs	r0, #1
20000e38:	f7ff fec0 	bl	20000bbc <graphic_ctrl_bit_clear>
    graphic_ctrl_bit_clear(B_RW);
20000e3c:	2002      	movs	r0, #2
20000e3e:	f7ff febd 	bl	20000bbc <graphic_ctrl_bit_clear>
    graphic_write(cmd, controller);
20000e42:	1dbb      	adds	r3, r7, #6
20000e44:	781a      	ldrb	r2, [r3, #0]
20000e46:	1dfb      	adds	r3, r7, #7
20000e48:	781b      	ldrb	r3, [r3, #0]
20000e4a:	0011      	movs	r1, r2
20000e4c:	0018      	movs	r0, r3
20000e4e:	f7ff ffa6 	bl	20000d9e <graphic_write>
}
20000e52:	46c0      	nop			; (mov r8, r8)
20000e54:	46bd      	mov	sp, r7
20000e56:	b002      	add	sp, #8
20000e58:	bd80      	pop	{r7, pc}

20000e5a <graphic_write_data>:

void graphic_write_data(uint8_t data, uint8_t controller){
20000e5a:	b580      	push	{r7, lr}
20000e5c:	b082      	sub	sp, #8
20000e5e:	af00      	add	r7, sp, #0
20000e60:	0002      	movs	r2, r0
20000e62:	1dfb      	adds	r3, r7, #7
20000e64:	701a      	strb	r2, [r3, #0]
20000e66:	1dbb      	adds	r3, r7, #6
20000e68:	1c0a      	adds	r2, r1, #0
20000e6a:	701a      	strb	r2, [r3, #0]
    graphic_ctrl_bit_clear(B_E);
20000e6c:	2040      	movs	r0, #64	; 0x40
20000e6e:	f7ff fea5 	bl	20000bbc <graphic_ctrl_bit_clear>
    select_controller(controller);
20000e72:	1dbb      	adds	r3, r7, #6
20000e74:	781b      	ldrb	r3, [r3, #0]
20000e76:	0018      	movs	r0, r3
20000e78:	f7ff feea 	bl	20000c50 <select_controller>
    graphic_ctrl_bit_set(B_RS);
20000e7c:	2001      	movs	r0, #1
20000e7e:	f7ff fec5 	bl	20000c0c <graphic_ctrl_bit_set>
    graphic_ctrl_bit_clear(B_RW);
20000e82:	2002      	movs	r0, #2
20000e84:	f7ff fe9a 	bl	20000bbc <graphic_ctrl_bit_clear>
    graphic_write(data, controller);
20000e88:	1dbb      	adds	r3, r7, #6
20000e8a:	781a      	ldrb	r2, [r3, #0]
20000e8c:	1dfb      	adds	r3, r7, #7
20000e8e:	781b      	ldrb	r3, [r3, #0]
20000e90:	0011      	movs	r1, r2
20000e92:	0018      	movs	r0, r3
20000e94:	f7ff ff83 	bl	20000d9e <graphic_write>
}
20000e98:	46c0      	nop			; (mov r8, r8)
20000e9a:	46bd      	mov	sp, r7
20000e9c:	b002      	add	sp, #8
20000e9e:	bd80      	pop	{r7, pc}

20000ea0 <graphic_clear_screen>:

void graphic_clear_screen(void){
20000ea0:	b580      	push	{r7, lr}
20000ea2:	b082      	sub	sp, #8
20000ea4:	af00      	add	r7, sp, #0
    for (int page = 0; page < 8; page++){
20000ea6:	2300      	movs	r3, #0
20000ea8:	607b      	str	r3, [r7, #4]
20000eaa:	e01e      	b.n	20000eea <graphic_clear_screen+0x4a>
        graphic_write_command(LCD_SET_PAGE | page, B_CS1|B_CS2);
20000eac:	687b      	ldr	r3, [r7, #4]
20000eae:	b25b      	sxtb	r3, r3
20000eb0:	2248      	movs	r2, #72	; 0x48
20000eb2:	4252      	negs	r2, r2
20000eb4:	4313      	orrs	r3, r2
20000eb6:	b25b      	sxtb	r3, r3
20000eb8:	b2db      	uxtb	r3, r3
20000eba:	2118      	movs	r1, #24
20000ebc:	0018      	movs	r0, r3
20000ebe:	f7ff ffa9 	bl	20000e14 <graphic_write_command>
        graphic_write_command(LCD_SET_ADD | 0, B_CS1|B_CS2);
20000ec2:	2118      	movs	r1, #24
20000ec4:	2040      	movs	r0, #64	; 0x40
20000ec6:	f7ff ffa5 	bl	20000e14 <graphic_write_command>
        for (int add = 0; add < 63; add++){
20000eca:	2300      	movs	r3, #0
20000ecc:	603b      	str	r3, [r7, #0]
20000ece:	e006      	b.n	20000ede <graphic_clear_screen+0x3e>
            graphic_write_data(0, B_CS1|B_CS2);
20000ed0:	2118      	movs	r1, #24
20000ed2:	2000      	movs	r0, #0
20000ed4:	f7ff ffc1 	bl	20000e5a <graphic_write_data>
        for (int add = 0; add < 63; add++){
20000ed8:	683b      	ldr	r3, [r7, #0]
20000eda:	3301      	adds	r3, #1
20000edc:	603b      	str	r3, [r7, #0]
20000ede:	683b      	ldr	r3, [r7, #0]
20000ee0:	2b3e      	cmp	r3, #62	; 0x3e
20000ee2:	ddf5      	ble.n	20000ed0 <graphic_clear_screen+0x30>
    for (int page = 0; page < 8; page++){
20000ee4:	687b      	ldr	r3, [r7, #4]
20000ee6:	3301      	adds	r3, #1
20000ee8:	607b      	str	r3, [r7, #4]
20000eea:	687b      	ldr	r3, [r7, #4]
20000eec:	2b07      	cmp	r3, #7
20000eee:	dddd      	ble.n	20000eac <graphic_clear_screen+0xc>
        }
    }
}
20000ef0:	46c0      	nop			; (mov r8, r8)
20000ef2:	46c0      	nop			; (mov r8, r8)
20000ef4:	46bd      	mov	sp, r7
20000ef6:	b002      	add	sp, #8
20000ef8:	bd80      	pop	{r7, pc}

20000efa <clear_backbuffer>:

void clear_backbuffer(){
20000efa:	b580      	push	{r7, lr}
20000efc:	b082      	sub	sp, #8
20000efe:	af00      	add	r7, sp, #0
    int i;
    for (i = 0; i < 1024; i++)
20000f00:	2300      	movs	r3, #0
20000f02:	607b      	str	r3, [r7, #4]
20000f04:	e007      	b.n	20000f16 <clear_backbuffer+0x1c>
        backBuffer[i] = 0;
20000f06:	4b09      	ldr	r3, [pc, #36]	; (20000f2c <clear_backbuffer+0x32>)
20000f08:	687a      	ldr	r2, [r7, #4]
20000f0a:	0092      	lsls	r2, r2, #2
20000f0c:	2100      	movs	r1, #0
20000f0e:	50d1      	str	r1, [r2, r3]
    for (i = 0; i < 1024; i++)
20000f10:	687b      	ldr	r3, [r7, #4]
20000f12:	3301      	adds	r3, #1
20000f14:	607b      	str	r3, [r7, #4]
20000f16:	687a      	ldr	r2, [r7, #4]
20000f18:	2380      	movs	r3, #128	; 0x80
20000f1a:	00db      	lsls	r3, r3, #3
20000f1c:	429a      	cmp	r2, r3
20000f1e:	dbf2      	blt.n	20000f06 <clear_backbuffer+0xc>
}
20000f20:	46c0      	nop			; (mov r8, r8)
20000f22:	46c0      	nop			; (mov r8, r8)
20000f24:	46bd      	mov	sp, r7
20000f26:	b002      	add	sp, #8
20000f28:	bd80      	pop	{r7, pc}
20000f2a:	46c0      	nop			; (mov r8, r8)
20000f2c:	200022e0 	andcs	r2, r0, r0, ror #5

20000f30 <pixel>:

void pixel(unsigned x, unsigned y){
20000f30:	b580      	push	{r7, lr}
20000f32:	b084      	sub	sp, #16
20000f34:	af00      	add	r7, sp, #0
20000f36:	6078      	str	r0, [r7, #4]
20000f38:	6039      	str	r1, [r7, #0]
    uint8_t mask;
    int index = 0;
20000f3a:	2300      	movs	r3, #0
20000f3c:	60fb      	str	r3, [r7, #12]
    if ((x >128)||(x <1)||(y >64)||(y <1)) return;
20000f3e:	687b      	ldr	r3, [r7, #4]
20000f40:	2b80      	cmp	r3, #128	; 0x80
20000f42:	d831      	bhi.n	20000fa8 <pixel+0x78>
20000f44:	687b      	ldr	r3, [r7, #4]
20000f46:	2b00      	cmp	r3, #0
20000f48:	d02e      	beq.n	20000fa8 <pixel+0x78>
20000f4a:	683b      	ldr	r3, [r7, #0]
20000f4c:	2b40      	cmp	r3, #64	; 0x40
20000f4e:	d82b      	bhi.n	20000fa8 <pixel+0x78>
20000f50:	683b      	ldr	r3, [r7, #0]
20000f52:	2b00      	cmp	r3, #0
20000f54:	d028      	beq.n	20000fa8 <pixel+0x78>

    mask = 1 << ((y-1)%8);
20000f56:	683b      	ldr	r3, [r7, #0]
20000f58:	3b01      	subs	r3, #1
20000f5a:	2207      	movs	r2, #7
20000f5c:	4013      	ands	r3, r2
20000f5e:	2201      	movs	r2, #1
20000f60:	409a      	lsls	r2, r3
20000f62:	230b      	movs	r3, #11
20000f64:	18fb      	adds	r3, r7, r3
20000f66:	701a      	strb	r2, [r3, #0]
    
    if(x > 64){
20000f68:	687b      	ldr	r3, [r7, #4]
20000f6a:	2b40      	cmp	r3, #64	; 0x40
20000f6c:	d905      	bls.n	20000f7a <pixel+0x4a>
        x -= 65;
20000f6e:	687b      	ldr	r3, [r7, #4]
20000f70:	3b41      	subs	r3, #65	; 0x41
20000f72:	607b      	str	r3, [r7, #4]
        index = 512;
20000f74:	2380      	movs	r3, #128	; 0x80
20000f76:	009b      	lsls	r3, r3, #2
20000f78:	60fb      	str	r3, [r7, #12]
    }
    
    index += x + ((y-1)/8)*64;
20000f7a:	683b      	ldr	r3, [r7, #0]
20000f7c:	3b01      	subs	r3, #1
20000f7e:	08db      	lsrs	r3, r3, #3
20000f80:	019a      	lsls	r2, r3, #6
20000f82:	687b      	ldr	r3, [r7, #4]
20000f84:	18d2      	adds	r2, r2, r3
20000f86:	68fb      	ldr	r3, [r7, #12]
20000f88:	18d3      	adds	r3, r2, r3
20000f8a:	60fb      	str	r3, [r7, #12]
    
    backBuffer[index] |= mask;
20000f8c:	4b08      	ldr	r3, [pc, #32]	; (20000fb0 <pixel+0x80>)
20000f8e:	68fa      	ldr	r2, [r7, #12]
20000f90:	0092      	lsls	r2, r2, #2
20000f92:	58d2      	ldr	r2, [r2, r3]
20000f94:	230b      	movs	r3, #11
20000f96:	18fb      	adds	r3, r7, r3
20000f98:	781b      	ldrb	r3, [r3, #0]
20000f9a:	431a      	orrs	r2, r3
20000f9c:	0011      	movs	r1, r2
20000f9e:	4b04      	ldr	r3, [pc, #16]	; (20000fb0 <pixel+0x80>)
20000fa0:	68fa      	ldr	r2, [r7, #12]
20000fa2:	0092      	lsls	r2, r2, #2
20000fa4:	50d1      	str	r1, [r2, r3]
20000fa6:	e000      	b.n	20000faa <pixel+0x7a>
    if ((x >128)||(x <1)||(y >64)||(y <1)) return;
20000fa8:	46c0      	nop			; (mov r8, r8)
}
20000faa:	46bd      	mov	sp, r7
20000fac:	b004      	add	sp, #16
20000fae:	bd80      	pop	{r7, pc}
20000fb0:	200022e0 	andcs	r2, r0, r0, ror #5

20000fb4 <graphic_draw_screen>:

void graphic_draw_screen(void){
20000fb4:	b580      	push	{r7, lr}
20000fb6:	b084      	sub	sp, #16
20000fb8:	af00      	add	r7, sp, #0
    uint8_t i,  j, controller, c;
    unsigned int k = 0;
20000fba:	2300      	movs	r3, #0
20000fbc:	60bb      	str	r3, [r7, #8]
    
    for (c = 0; c < 2; c++){
20000fbe:	230d      	movs	r3, #13
20000fc0:	18fb      	adds	r3, r7, r3
20000fc2:	2200      	movs	r2, #0
20000fc4:	701a      	strb	r2, [r3, #0]
20000fc6:	e050      	b.n	2000106a <graphic_draw_screen+0xb6>
        controller = (c==0) ? B_CS1 : B_CS2;
20000fc8:	230d      	movs	r3, #13
20000fca:	18fb      	adds	r3, r7, r3
20000fcc:	781b      	ldrb	r3, [r3, #0]
20000fce:	2b00      	cmp	r3, #0
20000fd0:	d101      	bne.n	20000fd6 <graphic_draw_screen+0x22>
20000fd2:	2208      	movs	r2, #8
20000fd4:	e000      	b.n	20000fd8 <graphic_draw_screen+0x24>
20000fd6:	2210      	movs	r2, #16
20000fd8:	1dfb      	adds	r3, r7, #7
20000fda:	701a      	strb	r2, [r3, #0]
        for (j = 0; j < 8; j++){
20000fdc:	230e      	movs	r3, #14
20000fde:	18fb      	adds	r3, r7, r3
20000fe0:	2200      	movs	r2, #0
20000fe2:	701a      	strb	r2, [r3, #0]
20000fe4:	e036      	b.n	20001054 <graphic_draw_screen+0xa0>
            graphic_write_command(LCD_SET_PAGE | j, controller);
20000fe6:	230e      	movs	r3, #14
20000fe8:	18fb      	adds	r3, r7, r3
20000fea:	781b      	ldrb	r3, [r3, #0]
20000fec:	2248      	movs	r2, #72	; 0x48
20000fee:	4252      	negs	r2, r2
20000ff0:	4313      	orrs	r3, r2
20000ff2:	b2da      	uxtb	r2, r3
20000ff4:	1dfb      	adds	r3, r7, #7
20000ff6:	781b      	ldrb	r3, [r3, #0]
20000ff8:	0019      	movs	r1, r3
20000ffa:	0010      	movs	r0, r2
20000ffc:	f7ff ff0a 	bl	20000e14 <graphic_write_command>
            graphic_write_command(LCD_SET_ADD | 0, controller);
20001000:	1dfb      	adds	r3, r7, #7
20001002:	781b      	ldrb	r3, [r3, #0]
20001004:	0019      	movs	r1, r3
20001006:	2040      	movs	r0, #64	; 0x40
20001008:	f7ff ff04 	bl	20000e14 <graphic_write_command>
            for(i = 0; i <= 63; i++, k++){
2000100c:	230f      	movs	r3, #15
2000100e:	18fb      	adds	r3, r7, r3
20001010:	2200      	movs	r2, #0
20001012:	701a      	strb	r2, [r3, #0]
20001014:	e013      	b.n	2000103e <graphic_draw_screen+0x8a>
                graphic_write_data(backBuffer[k],controller);  
20001016:	4b1a      	ldr	r3, [pc, #104]	; (20001080 <graphic_draw_screen+0xcc>)
20001018:	68ba      	ldr	r2, [r7, #8]
2000101a:	0092      	lsls	r2, r2, #2
2000101c:	58d3      	ldr	r3, [r2, r3]
2000101e:	b2da      	uxtb	r2, r3
20001020:	1dfb      	adds	r3, r7, #7
20001022:	781b      	ldrb	r3, [r3, #0]
20001024:	0019      	movs	r1, r3
20001026:	0010      	movs	r0, r2
20001028:	f7ff ff17 	bl	20000e5a <graphic_write_data>
            for(i = 0; i <= 63; i++, k++){
2000102c:	210f      	movs	r1, #15
2000102e:	187b      	adds	r3, r7, r1
20001030:	781a      	ldrb	r2, [r3, #0]
20001032:	187b      	adds	r3, r7, r1
20001034:	3201      	adds	r2, #1
20001036:	701a      	strb	r2, [r3, #0]
20001038:	68bb      	ldr	r3, [r7, #8]
2000103a:	3301      	adds	r3, #1
2000103c:	60bb      	str	r3, [r7, #8]
2000103e:	230f      	movs	r3, #15
20001040:	18fb      	adds	r3, r7, r3
20001042:	781b      	ldrb	r3, [r3, #0]
20001044:	2b3f      	cmp	r3, #63	; 0x3f
20001046:	d9e6      	bls.n	20001016 <graphic_draw_screen+0x62>
        for (j = 0; j < 8; j++){
20001048:	210e      	movs	r1, #14
2000104a:	187b      	adds	r3, r7, r1
2000104c:	781a      	ldrb	r2, [r3, #0]
2000104e:	187b      	adds	r3, r7, r1
20001050:	3201      	adds	r2, #1
20001052:	701a      	strb	r2, [r3, #0]
20001054:	230e      	movs	r3, #14
20001056:	18fb      	adds	r3, r7, r3
20001058:	781b      	ldrb	r3, [r3, #0]
2000105a:	2b07      	cmp	r3, #7
2000105c:	d9c3      	bls.n	20000fe6 <graphic_draw_screen+0x32>
    for (c = 0; c < 2; c++){
2000105e:	210d      	movs	r1, #13
20001060:	187b      	adds	r3, r7, r1
20001062:	781a      	ldrb	r2, [r3, #0]
20001064:	187b      	adds	r3, r7, r1
20001066:	3201      	adds	r2, #1
20001068:	701a      	strb	r2, [r3, #0]
2000106a:	230d      	movs	r3, #13
2000106c:	18fb      	adds	r3, r7, r3
2000106e:	781b      	ldrb	r3, [r3, #0]
20001070:	2b01      	cmp	r3, #1
20001072:	d9a9      	bls.n	20000fc8 <graphic_draw_screen+0x14>
            }
        }
    }
}
20001074:	46c0      	nop			; (mov r8, r8)
20001076:	46c0      	nop			; (mov r8, r8)
20001078:	46bd      	mov	sp, r7
2000107a:	b004      	add	sp, #16
2000107c:	bd80      	pop	{r7, pc}
2000107e:	46c0      	nop			; (mov r8, r8)
20001080:	200022e0 	andcs	r2, r0, r0, ror #5

20001084 <init_queue>:
POBJECT objArray[MAX];
int front = 0;
int rear = -1;
int itemCount = 0;

void init_queue(){
20001084:	b580      	push	{r7, lr}
20001086:	b082      	sub	sp, #8
20001088:	af00      	add	r7, sp, #0
    for(int i = 0; i < MAX; i++)
2000108a:	2300      	movs	r3, #0
2000108c:	607b      	str	r3, [r7, #4]
2000108e:	e007      	b.n	200010a0 <init_queue+0x1c>
        objArray[i] = NULL;
20001090:	4b07      	ldr	r3, [pc, #28]	; (200010b0 <init_queue+0x2c>)
20001092:	687a      	ldr	r2, [r7, #4]
20001094:	0092      	lsls	r2, r2, #2
20001096:	2100      	movs	r1, #0
20001098:	50d1      	str	r1, [r2, r3]
    for(int i = 0; i < MAX; i++)
2000109a:	687b      	ldr	r3, [r7, #4]
2000109c:	3301      	adds	r3, #1
2000109e:	607b      	str	r3, [r7, #4]
200010a0:	687b      	ldr	r3, [r7, #4]
200010a2:	2b63      	cmp	r3, #99	; 0x63
200010a4:	ddf4      	ble.n	20001090 <init_queue+0xc>
}
200010a6:	46c0      	nop			; (mov r8, r8)
200010a8:	46c0      	nop			; (mov r8, r8)
200010aa:	46bd      	mov	sp, r7
200010ac:	b002      	add	sp, #8
200010ae:	bd80      	pop	{r7, pc}
200010b0:	200032e8 	andcs	r3, r0, r8, ror #5

200010b4 <peek>:

/*returns the head*/
POBJECT peek() {
200010b4:	b580      	push	{r7, lr}
200010b6:	af00      	add	r7, sp, #0
   return objArray[front];
200010b8:	4b03      	ldr	r3, [pc, #12]	; (200010c8 <peek+0x14>)
200010ba:	681a      	ldr	r2, [r3, #0]
200010bc:	4b03      	ldr	r3, [pc, #12]	; (200010cc <peek+0x18>)
200010be:	0092      	lsls	r2, r2, #2
200010c0:	58d3      	ldr	r3, [r2, r3]
}
200010c2:	0018      	movs	r0, r3
200010c4:	46bd      	mov	sp, r7
200010c6:	bd80      	pop	{r7, pc}
200010c8:	200032e0 	andcs	r3, r0, r0, ror #5
200010cc:	200032e8 	andcs	r3, r0, r8, ror #5

200010d0 <isEmpty>:

/*returns true if itemCount == 0*/
bool isEmpty() {
200010d0:	b580      	push	{r7, lr}
200010d2:	af00      	add	r7, sp, #0
   return itemCount == 0;
200010d4:	4b03      	ldr	r3, [pc, #12]	; (200010e4 <isEmpty+0x14>)
200010d6:	681b      	ldr	r3, [r3, #0]
200010d8:	425a      	negs	r2, r3
200010da:	4153      	adcs	r3, r2
200010dc:	b2db      	uxtb	r3, r3
}
200010de:	0018      	movs	r0, r3
200010e0:	46bd      	mov	sp, r7
200010e2:	bd80      	pop	{r7, pc}
200010e4:	200032e4 	andcs	r3, r0, r4, ror #5

200010e8 <isFull>:

/*returns true if itemCount == MAX (512)*/
bool isFull() {
200010e8:	b580      	push	{r7, lr}
200010ea:	af00      	add	r7, sp, #0
   return itemCount == MAX;
200010ec:	4b04      	ldr	r3, [pc, #16]	; (20001100 <isFull+0x18>)
200010ee:	681b      	ldr	r3, [r3, #0]
200010f0:	3b64      	subs	r3, #100	; 0x64
200010f2:	425a      	negs	r2, r3
200010f4:	4153      	adcs	r3, r2
200010f6:	b2db      	uxtb	r3, r3
}
200010f8:	0018      	movs	r0, r3
200010fa:	46bd      	mov	sp, r7
200010fc:	bd80      	pop	{r7, pc}
200010fe:	46c0      	nop			; (mov r8, r8)
20001100:	200032e4 	andcs	r3, r0, r4, ror #5

20001104 <size>:

/*Returns itemCount*/
int size() {
20001104:	b580      	push	{r7, lr}
20001106:	af00      	add	r7, sp, #0
   return itemCount;
20001108:	4b02      	ldr	r3, [pc, #8]	; (20001114 <size+0x10>)
2000110a:	681b      	ldr	r3, [r3, #0]
}  
2000110c:	0018      	movs	r0, r3
2000110e:	46bd      	mov	sp, r7
20001110:	bd80      	pop	{r7, pc}
20001112:	46c0      	nop			; (mov r8, r8)
20001114:	200032e4 	andcs	r3, r0, r4, ror #5

20001118 <insert>:

/*Adds a node in the end of the queue*/
void insert(POBJECT data) {
20001118:	b580      	push	{r7, lr}
2000111a:	b082      	sub	sp, #8
2000111c:	af00      	add	r7, sp, #0
2000111e:	6078      	str	r0, [r7, #4]

   if(!isFull()) {
20001120:	f7ff ffe2 	bl	200010e8 <isFull>
20001124:	0003      	movs	r3, r0
20001126:	001a      	movs	r2, r3
20001128:	2301      	movs	r3, #1
2000112a:	4053      	eors	r3, r2
2000112c:	b2db      	uxtb	r3, r3
2000112e:	2b00      	cmp	r3, #0
20001130:	d017      	beq.n	20001162 <insert+0x4a>
	
      if(rear == MAX-1) {
20001132:	4b0e      	ldr	r3, [pc, #56]	; (2000116c <insert+0x54>)
20001134:	681b      	ldr	r3, [r3, #0]
20001136:	2b63      	cmp	r3, #99	; 0x63
20001138:	d103      	bne.n	20001142 <insert+0x2a>
         rear = -1;            
2000113a:	4b0c      	ldr	r3, [pc, #48]	; (2000116c <insert+0x54>)
2000113c:	2201      	movs	r2, #1
2000113e:	4252      	negs	r2, r2
20001140:	601a      	str	r2, [r3, #0]
      }       
      objArray[++rear] = data;
20001142:	4b0a      	ldr	r3, [pc, #40]	; (2000116c <insert+0x54>)
20001144:	681b      	ldr	r3, [r3, #0]
20001146:	1c5a      	adds	r2, r3, #1
20001148:	4b08      	ldr	r3, [pc, #32]	; (2000116c <insert+0x54>)
2000114a:	601a      	str	r2, [r3, #0]
2000114c:	4b07      	ldr	r3, [pc, #28]	; (2000116c <insert+0x54>)
2000114e:	681a      	ldr	r2, [r3, #0]
20001150:	4b07      	ldr	r3, [pc, #28]	; (20001170 <insert+0x58>)
20001152:	0092      	lsls	r2, r2, #2
20001154:	6879      	ldr	r1, [r7, #4]
20001156:	50d1      	str	r1, [r2, r3]
      itemCount++;
20001158:	4b06      	ldr	r3, [pc, #24]	; (20001174 <insert+0x5c>)
2000115a:	681b      	ldr	r3, [r3, #0]
2000115c:	1c5a      	adds	r2, r3, #1
2000115e:	4b05      	ldr	r3, [pc, #20]	; (20001174 <insert+0x5c>)
20001160:	601a      	str	r2, [r3, #0]
   }
}
20001162:	46c0      	nop			; (mov r8, r8)
20001164:	46bd      	mov	sp, r7
20001166:	b002      	add	sp, #8
20001168:	bd80      	pop	{r7, pc}
2000116a:	46c0      	nop			; (mov r8, r8)
2000116c:	200035b0 			; <UNDEFINED> instruction: 0x200035b0
20001170:	200032e8 	andcs	r3, r0, r8, ror #5
20001174:	200032e4 	andcs	r3, r0, r4, ror #5

20001178 <remove>:

int remove() {
20001178:	b580      	push	{r7, lr}
2000117a:	b082      	sub	sp, #8
2000117c:	af00      	add	r7, sp, #0
   POBJECT data = objArray[front++];
2000117e:	4b0d      	ldr	r3, [pc, #52]	; (200011b4 <remove+0x3c>)
20001180:	681b      	ldr	r3, [r3, #0]
20001182:	1c59      	adds	r1, r3, #1
20001184:	4a0b      	ldr	r2, [pc, #44]	; (200011b4 <remove+0x3c>)
20001186:	6011      	str	r1, [r2, #0]
20001188:	4a0b      	ldr	r2, [pc, #44]	; (200011b8 <remove+0x40>)
2000118a:	009b      	lsls	r3, r3, #2
2000118c:	589b      	ldr	r3, [r3, r2]
2000118e:	607b      	str	r3, [r7, #4]
	
   if(front == MAX) {
20001190:	4b08      	ldr	r3, [pc, #32]	; (200011b4 <remove+0x3c>)
20001192:	681b      	ldr	r3, [r3, #0]
20001194:	2b64      	cmp	r3, #100	; 0x64
20001196:	d102      	bne.n	2000119e <remove+0x26>
      front = 0;
20001198:	4b06      	ldr	r3, [pc, #24]	; (200011b4 <remove+0x3c>)
2000119a:	2200      	movs	r2, #0
2000119c:	601a      	str	r2, [r3, #0]
   }
	
   itemCount--;
2000119e:	4b07      	ldr	r3, [pc, #28]	; (200011bc <remove+0x44>)
200011a0:	681b      	ldr	r3, [r3, #0]
200011a2:	1e5a      	subs	r2, r3, #1
200011a4:	4b05      	ldr	r3, [pc, #20]	; (200011bc <remove+0x44>)
200011a6:	601a      	str	r2, [r3, #0]
   return (int)data;  
200011a8:	687b      	ldr	r3, [r7, #4]
}
200011aa:	0018      	movs	r0, r3
200011ac:	46bd      	mov	sp, r7
200011ae:	b002      	add	sp, #8
200011b0:	bd80      	pop	{r7, pc}
200011b2:	46c0      	nop			; (mov r8, r8)
200011b4:	200032e0 	andcs	r3, r0, r0, ror #5
200011b8:	200032e8 	andcs	r3, r0, r8, ror #5
200011bc:	200032e4 	andcs	r3, r0, r4, ror #5

200011c0 <__udivsi3>:
200011c0:	2200      	movs	r2, #0
200011c2:	0843      	lsrs	r3, r0, #1
200011c4:	428b      	cmp	r3, r1
200011c6:	d374      	bcc.n	200012b2 <__udivsi3+0xf2>
200011c8:	0903      	lsrs	r3, r0, #4
200011ca:	428b      	cmp	r3, r1
200011cc:	d35f      	bcc.n	2000128e <__udivsi3+0xce>
200011ce:	0a03      	lsrs	r3, r0, #8
200011d0:	428b      	cmp	r3, r1
200011d2:	d344      	bcc.n	2000125e <__udivsi3+0x9e>
200011d4:	0b03      	lsrs	r3, r0, #12
200011d6:	428b      	cmp	r3, r1
200011d8:	d328      	bcc.n	2000122c <__udivsi3+0x6c>
200011da:	0c03      	lsrs	r3, r0, #16
200011dc:	428b      	cmp	r3, r1
200011de:	d30d      	bcc.n	200011fc <__udivsi3+0x3c>
200011e0:	22ff      	movs	r2, #255	; 0xff
200011e2:	0209      	lsls	r1, r1, #8
200011e4:	ba12      	rev	r2, r2
200011e6:	0c03      	lsrs	r3, r0, #16
200011e8:	428b      	cmp	r3, r1
200011ea:	d302      	bcc.n	200011f2 <__udivsi3+0x32>
200011ec:	1212      	asrs	r2, r2, #8
200011ee:	0209      	lsls	r1, r1, #8
200011f0:	d065      	beq.n	200012be <__udivsi3+0xfe>
200011f2:	0b03      	lsrs	r3, r0, #12
200011f4:	428b      	cmp	r3, r1
200011f6:	d319      	bcc.n	2000122c <__udivsi3+0x6c>
200011f8:	e000      	b.n	200011fc <__udivsi3+0x3c>
200011fa:	0a09      	lsrs	r1, r1, #8
200011fc:	0bc3      	lsrs	r3, r0, #15
200011fe:	428b      	cmp	r3, r1
20001200:	d301      	bcc.n	20001206 <__udivsi3+0x46>
20001202:	03cb      	lsls	r3, r1, #15
20001204:	1ac0      	subs	r0, r0, r3
20001206:	4152      	adcs	r2, r2
20001208:	0b83      	lsrs	r3, r0, #14
2000120a:	428b      	cmp	r3, r1
2000120c:	d301      	bcc.n	20001212 <__udivsi3+0x52>
2000120e:	038b      	lsls	r3, r1, #14
20001210:	1ac0      	subs	r0, r0, r3
20001212:	4152      	adcs	r2, r2
20001214:	0b43      	lsrs	r3, r0, #13
20001216:	428b      	cmp	r3, r1
20001218:	d301      	bcc.n	2000121e <__udivsi3+0x5e>
2000121a:	034b      	lsls	r3, r1, #13
2000121c:	1ac0      	subs	r0, r0, r3
2000121e:	4152      	adcs	r2, r2
20001220:	0b03      	lsrs	r3, r0, #12
20001222:	428b      	cmp	r3, r1
20001224:	d301      	bcc.n	2000122a <__udivsi3+0x6a>
20001226:	030b      	lsls	r3, r1, #12
20001228:	1ac0      	subs	r0, r0, r3
2000122a:	4152      	adcs	r2, r2
2000122c:	0ac3      	lsrs	r3, r0, #11
2000122e:	428b      	cmp	r3, r1
20001230:	d301      	bcc.n	20001236 <__udivsi3+0x76>
20001232:	02cb      	lsls	r3, r1, #11
20001234:	1ac0      	subs	r0, r0, r3
20001236:	4152      	adcs	r2, r2
20001238:	0a83      	lsrs	r3, r0, #10
2000123a:	428b      	cmp	r3, r1
2000123c:	d301      	bcc.n	20001242 <__udivsi3+0x82>
2000123e:	028b      	lsls	r3, r1, #10
20001240:	1ac0      	subs	r0, r0, r3
20001242:	4152      	adcs	r2, r2
20001244:	0a43      	lsrs	r3, r0, #9
20001246:	428b      	cmp	r3, r1
20001248:	d301      	bcc.n	2000124e <__udivsi3+0x8e>
2000124a:	024b      	lsls	r3, r1, #9
2000124c:	1ac0      	subs	r0, r0, r3
2000124e:	4152      	adcs	r2, r2
20001250:	0a03      	lsrs	r3, r0, #8
20001252:	428b      	cmp	r3, r1
20001254:	d301      	bcc.n	2000125a <__udivsi3+0x9a>
20001256:	020b      	lsls	r3, r1, #8
20001258:	1ac0      	subs	r0, r0, r3
2000125a:	4152      	adcs	r2, r2
2000125c:	d2cd      	bcs.n	200011fa <__udivsi3+0x3a>
2000125e:	09c3      	lsrs	r3, r0, #7
20001260:	428b      	cmp	r3, r1
20001262:	d301      	bcc.n	20001268 <__udivsi3+0xa8>
20001264:	01cb      	lsls	r3, r1, #7
20001266:	1ac0      	subs	r0, r0, r3
20001268:	4152      	adcs	r2, r2
2000126a:	0983      	lsrs	r3, r0, #6
2000126c:	428b      	cmp	r3, r1
2000126e:	d301      	bcc.n	20001274 <__udivsi3+0xb4>
20001270:	018b      	lsls	r3, r1, #6
20001272:	1ac0      	subs	r0, r0, r3
20001274:	4152      	adcs	r2, r2
20001276:	0943      	lsrs	r3, r0, #5
20001278:	428b      	cmp	r3, r1
2000127a:	d301      	bcc.n	20001280 <__udivsi3+0xc0>
2000127c:	014b      	lsls	r3, r1, #5
2000127e:	1ac0      	subs	r0, r0, r3
20001280:	4152      	adcs	r2, r2
20001282:	0903      	lsrs	r3, r0, #4
20001284:	428b      	cmp	r3, r1
20001286:	d301      	bcc.n	2000128c <__udivsi3+0xcc>
20001288:	010b      	lsls	r3, r1, #4
2000128a:	1ac0      	subs	r0, r0, r3
2000128c:	4152      	adcs	r2, r2
2000128e:	08c3      	lsrs	r3, r0, #3
20001290:	428b      	cmp	r3, r1
20001292:	d301      	bcc.n	20001298 <__udivsi3+0xd8>
20001294:	00cb      	lsls	r3, r1, #3
20001296:	1ac0      	subs	r0, r0, r3
20001298:	4152      	adcs	r2, r2
2000129a:	0883      	lsrs	r3, r0, #2
2000129c:	428b      	cmp	r3, r1
2000129e:	d301      	bcc.n	200012a4 <__udivsi3+0xe4>
200012a0:	008b      	lsls	r3, r1, #2
200012a2:	1ac0      	subs	r0, r0, r3
200012a4:	4152      	adcs	r2, r2
200012a6:	0843      	lsrs	r3, r0, #1
200012a8:	428b      	cmp	r3, r1
200012aa:	d301      	bcc.n	200012b0 <__udivsi3+0xf0>
200012ac:	004b      	lsls	r3, r1, #1
200012ae:	1ac0      	subs	r0, r0, r3
200012b0:	4152      	adcs	r2, r2
200012b2:	1a41      	subs	r1, r0, r1
200012b4:	d200      	bcs.n	200012b8 <__udivsi3+0xf8>
200012b6:	4601      	mov	r1, r0
200012b8:	4152      	adcs	r2, r2
200012ba:	4610      	mov	r0, r2
200012bc:	4770      	bx	lr
200012be:	e7ff      	b.n	200012c0 <__udivsi3+0x100>
200012c0:	b501      	push	{r0, lr}
200012c2:	2000      	movs	r0, #0
200012c4:	f000 f806 	bl	200012d4 <__aeabi_idiv0>
200012c8:	bd02      	pop	{r1, pc}
200012ca:	46c0      	nop			; (mov r8, r8)

200012cc <__aeabi_uidivmod>:
200012cc:	2900      	cmp	r1, #0
200012ce:	d0f7      	beq.n	200012c0 <__udivsi3+0x100>
200012d0:	e776      	b.n	200011c0 <__udivsi3>
200012d2:	4770      	bx	lr

200012d4 <__aeabi_idiv0>:
200012d4:	4770      	bx	lr
200012d6:	46c0      	nop			; (mov r8, r8)

200012d8 <backBuffer>:
	...

200022d8 <points>:
200022d8:	00000000 	andeq	r0, r0, r0

200022dc <snakeSize>:
200022dc:	00000000 	andeq	r0, r0, r0

200022e0 <backBuffer>:
	...

200032e0 <front>:
200032e0:	00000000 	andeq	r0, r0, r0

200032e4 <itemCount>:
200032e4:	00000000 	andeq	r0, r0, r0

200032e8 <objArray>:
	...

20003478 <image_bits>:
20003478:	aa889494 	bge	1e2286d0 <startup-0x1dd7930>
2000347c:	beebffeb 	cdplt	15, 14, cr15, cr11, cr11, {7}
20003480:	0000009c 	muleq	r0, ip, r0

20003484 <snakehead_geometry_LEFT>:
20003484:	0000000a 	andeq	r0, r0, sl
20003488:	00000004 	andeq	r0, r0, r4
2000348c:	00000004 	andeq	r0, r0, r4
20003490:	02000100 	andeq	r0, r0, #0
20003494:	02010101 	andeq	r0, r1, #1073741824	; 0x40000000
20003498:	03020002 	movweq	r0, #8194	; 0x2002
2000349c:	01030003 	tsteq	r3, r3
200034a0:	03030203 	movweq	r0, #12803	; 0x3203
	...

200034b0 <snakehead_geometry_RIGHT>:
200034b0:	0000000a 	andeq	r0, r0, sl
200034b4:	00000004 	andeq	r0, r0, r4
200034b8:	00000004 	andeq	r0, r0, r4
200034bc:	01000000 	mrseq	r0, (UNDEF: 0)
200034c0:	03000200 	movweq	r0, #512	; 0x200
200034c4:	03010001 	movweq	r0, #4097	; 0x1001
200034c8:	02020102 	andeq	r0, r2, #-2147483648	; 0x80000000
200034cc:	02030103 	andeq	r0, r3, #-1073741824	; 0xc0000000
	...

200034dc <snakehead_geometry_DOWN>:
200034dc:	0000000a 	andeq	r0, r0, sl
200034e0:	00000004 	andeq	r0, r0, r4
200034e4:	00000004 	andeq	r0, r0, r4
200034e8:	01000000 	mrseq	r0, (UNDEF: 0)
200034ec:	02010001 	andeq	r0, r1, #1, 0
200034f0:	00020301 	andeq	r0, r2, r1, lsl #6
200034f4:	03020202 	movweq	r0, #8706	; 0x2202
200034f8:	01030003 	tsteq	r3, r3
	...

20003508 <snakehead_geometry_UP>:
20003508:	0000000a 	andeq	r0, r0, sl
2000350c:	00000004 	andeq	r0, r0, r4
20003510:	00000004 	andeq	r0, r0, r4
20003514:	03000200 	movweq	r0, #512	; 0x200
20003518:	01010001 	tsteq	r1, r1
2000351c:	00020301 	andeq	r0, r2, r1, lsl #6
20003520:	03020102 	movweq	r0, #8450	; 0x2102
20003524:	03030203 	movweq	r0, #12803	; 0x3203
	...

20003534 <snakebody_geometry>:
20003534:	00000010 	andeq	r0, r0, r0, lsl r0
20003538:	00000004 	andeq	r0, r0, r4
2000353c:	00000004 	andeq	r0, r0, r4
20003540:	01000000 	mrseq	r0, (UNDEF: 0)
20003544:	03000200 	movweq	r0, #512	; 0x200
20003548:	01010001 	tsteq	r1, r1
2000354c:	03010201 	movweq	r0, #4609	; 0x1201
20003550:	01020002 	tsteq	r2, r2
20003554:	03020202 	movweq	r0, #8706	; 0x2202
20003558:	01030003 	tsteq	r3, r3
2000355c:	03030203 	movweq	r0, #12803	; 0x3203

20003560 <food_geometry>:
20003560:	0000000c 	andeq	r0, r0, ip
20003564:	00000004 	andeq	r0, r0, r4
20003568:	00000004 	andeq	r0, r0, r4
2000356c:	01000000 	mrseq	r0, (UNDEF: 0)
20003570:	03000200 	movweq	r0, #512	; 0x200
20003574:	03010001 	movweq	r0, #4097	; 0x1001
20003578:	03020002 	movweq	r0, #8194	; 0x2002
2000357c:	01030003 	tsteq	r3, r3
20003580:	03030203 	movweq	r0, #12803	; 0x3203
	...

2000358c <food_obj>:
2000358c:	20003560 	andcs	r3, r0, r0, ror #10
	...
20003598:	00000001 	andeq	r0, r0, r1
2000359c:	00000001 	andeq	r0, r0, r1
200035a0:	20000319 	andcs	r0, r0, r9, lsl r3
200035a4:	2000037b 	andcs	r0, r0, fp, ror r3
200035a8:	200003dd 	ldrdcs	r0, [r0], -sp
200035ac:	200002f9 	strdcs	r0, [r0], -r9

200035b0 <rear>:
200035b0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200035b4:	200009cc 	andcs	r0, r0, ip, asr #19
200035b8:	200009cc 	andcs	r0, r0, ip, asr #19
200035bc:	20000992 	mulcs	r0, r2, r9
200035c0:	200009cc 	andcs	r0, r0, ip, asr #19
200035c4:	20000984 	andcs	r0, r0, r4, lsl #19
200035c8:	200009cc 	andcs	r0, r0, ip, asr #19
200035cc:	20000976 	andcs	r0, r0, r6, ror r9
200035d0:	200009cc 	andcs	r0, r0, ip, asr #19
200035d4:	200009a0 	andcs	r0, r0, r0, lsr #19
200035d8:	200009cc 	andcs	r0, r0, ip, asr #19
200035dc:	200009ae 	andcs	r0, r0, lr, lsr #19
200035e0:	200009cc 	andcs	r0, r0, ip, asr #19
200035e4:	200009cc 	andcs	r0, r0, ip, asr #19
200035e8:	200009c0 	andcs	r0, r0, r0, asr #19
200035ec:	774f5b06 	strbvc	r5, [pc, -r6, lsl #22]
200035f0:	7c7d6d66 	ldclvc	13, cr6, [sp], #-408	; 0xfffffe68
200035f4:	396f7f07 	stmdbcc	pc!, {r0, r1, r2, r8, r9, sl, fp, ip, sp, lr}^	; <UNPREDICTABLE>
200035f8:	bf713f79 	svclt	0x00713f79
200035fc:	0a030201 	beq	200c3e08 <rear+0xc0858>
20003600:	0b060504 	bleq	20184a18 <rear+0x181468>
20003604:	0c090807 	stceq	8, cr0, [r9], {7}
20003608:	0d0f000e 	stceq	0, cr0, [pc, #-56]	; 200035d8 <rear+0x28>

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	000002c7 	andeq	r0, r0, r7, asr #5
       4:	00000004 	andeq	r0, r0, r4
       8:	01040000 	mrseq	r0, (UNDEF: 4)
       c:	00000051 	andeq	r0, r0, r1, asr r0
      10:	0001f80c 	andeq	pc, r1, ip, lsl #16
      14:	00015d00 	andeq	r5, r1, r0, lsl #26
      18:	00001000 	andeq	r1, r0, r0
      1c:	0002e620 	andeq	lr, r2, r0, lsr #12
      20:	00000000 	andeq	r0, r0, r0
      24:	08010200 	stmdaeq	r1, {r9}
      28:	0000014f 	andeq	r0, r0, pc, asr #2
      2c:	00000c03 	andeq	r0, r0, r3, lsl #24
      30:	066e0100 	strbteq	r0, [lr], -r0, lsl #2
      34:	200002aa 	andcs	r0, r0, sl, lsr #5
      38:	0000004c 	andeq	r0, r0, ip, asr #32
      3c:	007a9c01 	rsbseq	r9, sl, r1, lsl #24
      40:	78040000 	stmdavc	r4, {}	; <UNPREDICTABLE>
      44:	176e0100 	strbne	r0, [lr, -r0, lsl #2]!
      48:	0000007a 	andeq	r0, r0, sl, ror r0
      4c:	046c9102 	strbteq	r9, [ip], #-258	; 0xfffffefe
      50:	6e010079 	mcrvs	0, 0, r0, cr1, cr9, {3}
      54:	00007a1e 	andeq	r7, r0, lr, lsl sl
      58:	68910200 	ldmvs	r1, {r9}
      5c:	00011105 	andeq	r1, r1, r5, lsl #2
      60:	136f0100 	cmnne	pc, #0
      64:	00000025 	andeq	r0, r0, r5, lsr #32
      68:	06779102 	ldrbteq	r9, [r7], -r2, lsl #2
      6c:	0000002e 	andeq	r0, r0, lr, lsr #32
      70:	7a054d01 	bvc	15347c <startup-0x1feacb84>
      74:	07000000 	streq	r0, [r0, -r0]
      78:	04080000 	streq	r0, [r8], #-0
      7c:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
      80:	01d40300 	bicseq	r0, r4, r0, lsl #6
      84:	67010000 	strvs	r0, [r1, -r0]
      88:	00028006 	andeq	r8, r2, r6
      8c:	00002a20 	andeq	r2, r0, r0, lsr #20
      90:	b39c0100 	orrslt	r0, ip, #0
      94:	04000000 	streq	r0, [r0], #-0
      98:	67010063 	strvs	r0, [r1, -r3, rrx]
      9c:	00002525 	andeq	r2, r0, r5, lsr #10
      a0:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
      a4:	00002e06 	andeq	r2, r0, r6, lsl #28
      a8:	054d0100 	strbeq	r0, [sp, #-256]	; 0xffffff00
      ac:	0000007a 	andeq	r0, r0, sl, ror r0
      b0:	09000007 	stmdbeq	r0, {r0, r1, r2}
      b4:	000001c5 	andeq	r0, r0, r5, asr #3
      b8:	52066001 	andpl	r6, r6, #1, 0
      bc:	2e200002 	cdpcs	0, 2, cr0, cr0, cr2, {0}
      c0:	01000000 	mrseq	r0, (UNDEF: 0)
      c4:	0000d89c 	muleq	r0, ip, r8
      c8:	002e0600 	eoreq	r0, lr, r0, lsl #12
      cc:	4d010000 	stcmi	0, cr0, [r1, #-0]
      d0:	00007a05 	andeq	r7, r0, r5, lsl #20
      d4:	00000700 	andeq	r0, r0, r0, lsl #14
      d8:	00013f09 	andeq	r3, r1, r9, lsl #30
      dc:	06590100 	ldrbeq	r0, [r9], -r0, lsl #2
      e0:	20000224 	andcs	r0, r0, r4, lsr #4
      e4:	0000002e 	andeq	r0, r0, lr, lsr #32
      e8:	00fd9c01 	rscseq	r9, sp, r1, lsl #24
      ec:	2e060000 	cdpcs	0, 0, cr0, cr6, cr0, {0}
      f0:	01000000 	mrseq	r0, (UNDEF: 0)
      f4:	007a054d 	rsbseq	r0, sl, sp, asr #10
      f8:	00070000 	andeq	r0, r7, r0
      fc:	019c0900 	orrseq	r0, ip, r0, lsl #18
     100:	52010000 	andpl	r0, r1, #0, 0
     104:	0001f606 	andeq	pc, r1, r6, lsl #12
     108:	00002e20 	andeq	r2, r0, r0, lsr #28
     10c:	229c0100 	addscs	r0, ip, #0
     110:	06000001 	streq	r0, [r0], -r1
     114:	0000002e 	andeq	r0, r0, lr, lsr #32
     118:	7a054d01 	bvc	153524 <startup-0x1feacadc>
     11c:	07000000 	streq	r0, [r0, -r0]
     120:	df090000 	svcle	0x00090000
     124:	01000000 	mrseq	r0, (UNDEF: 0)
     128:	01c8064b 	biceq	r0, r8, fp, asr #12
     12c:	002e2000 	eoreq	r2, lr, r0
     130:	9c010000 	stcls	0, cr0, [r1], {-0}
     134:	00000159 	andeq	r0, r0, r9, asr r1
     138:	00002e0a 	andeq	r2, r0, sl, lsl #28
     13c:	054d0100 	strbeq	r0, [sp, #-256]	; 0xffffff00
     140:	0000007a 	andeq	r0, r0, sl, ror r0
     144:	0000014a 	andeq	r0, r0, sl, asr #2
     148:	00060007 	andeq	r0, r6, r7
     14c:	01000000 	mrseq	r0, (UNDEF: 0)
     150:	007a054f 	rsbseq	r0, sl, pc, asr #10
     154:	00070000 	andeq	r0, r7, r0
     158:	012f0b00 			; <UNDEFINED> instruction: 0x012f0b00
     15c:	42010000 	andmi	r0, r1, #0, 0
     160:	0000250f 	andeq	r2, r0, pc, lsl #10
     164:	00018c00 	andeq	r8, r1, r0, lsl #24
     168:	00003c20 	andeq	r3, r0, r0, lsr #24
     16c:	839c0100 	orrshi	r0, ip, #0
     170:	05000001 	streq	r0, [r0, #-1]
     174:	00000194 	muleq	r0, r4, r1
     178:	830a4601 	movwhi	r4, #42497	; 0xa601
     17c:	02000001 	andeq	r0, r0, #1, 0
     180:	02006f91 	andeq	r6, r0, #580	; 0x244
     184:	01580801 	cmpeq	r8, r1, lsl #16
     188:	cd0b0000 	stcgt	0, cr0, [fp, #-0]
     18c:	01000000 	mrseq	r0, (UNDEF: 0)
     190:	00250f39 	eoreq	r0, r5, r9, lsr pc
     194:	01500000 	cmpeq	r0, r0
     198:	003c2000 	eorseq	r2, ip, r0
     19c:	9c010000 	stcls	0, cr0, [r1], {-0}
     1a0:	000001b4 			; <UNDEFINED> instruction: 0x000001b4
     1a4:	0001bd05 	andeq	fp, r1, r5, lsl #26
     1a8:	0a3d0100 	beq	f405b0 <startup-0x1f0bfa50>
     1ac:	00000183 	andeq	r0, r0, r3, lsl #3
     1b0:	006f9102 	rsbeq	r9, pc, r2, lsl #2
     1b4:	0001190b 	andeq	r1, r1, fp, lsl #18
     1b8:	0f300100 	svceq	0x00300100
     1bc:	00000025 	andeq	r0, r0, r5, lsr #32
     1c0:	2000011c 	andcs	r0, r0, ip, lsl r1
     1c4:	00000034 	andeq	r0, r0, r4, lsr r0
     1c8:	01f09c01 	mvnseq	r9, r1, lsl #24
     1cc:	fe0a0000 	cdp2	0, 0, cr0, cr10, cr0, {0}
     1d0:	01000000 	mrseq	r0, (UNDEF: 0)
     1d4:	007a052c 	rsbseq	r0, sl, ip, lsr #10
     1d8:	01e00000 	mvneq	r0, r0
     1dc:	00070000 	andeq	r0, r7, r0
     1e0:	00010a05 	andeq	r0, r1, r5, lsl #20
     1e4:	0a340100 	beq	d005ec <startup-0x1f2ffa14>
     1e8:	00000183 	andeq	r0, r0, r3, lsl #3
     1ec:	00779102 	rsbseq	r9, r7, r2, lsl #2
     1f0:	00003a03 	andeq	r3, r0, r3, lsl #20
     1f4:	06290100 	strteq	r0, [r9], -r0, lsl #2
     1f8:	200000ec 	andcs	r0, r0, ip, ror #1
     1fc:	00000030 	andeq	r0, r0, r0, lsr r0
     200:	02249c01 	eoreq	r9, r4, #256	; 0x100
     204:	a80c0000 	stmdage	ip, {}	; <UNPREDICTABLE>
     208:	01000001 	tsteq	r0, r1
     20c:	00252b29 	eoreq	r2, r5, r9, lsr #22
     210:	91020000 	mrsls	r0, (UNDEF: 2)
     214:	00fe0677 	rscseq	r0, lr, r7, ror r6
     218:	2c010000 	stccs	0, cr0, [r1], {-0}
     21c:	00007a05 	andeq	r7, r0, r5, lsl #20
     220:	00000700 	andeq	r0, r0, r0, lsl #14
     224:	0000ed03 	andeq	lr, r0, r3, lsl #26
     228:	06230100 	strteq	r0, [r3], -r0, lsl #2
     22c:	200000c2 	andcs	r0, r0, r2, asr #1
     230:	0000002a 	andeq	r0, r0, sl, lsr #32
     234:	024a9c01 	subeq	r9, sl, #256	; 0x100
     238:	dc0c0000 	stcle	0, cr0, [ip], {-0}
     23c:	01000005 	tsteq	r0, r5
     240:	00252523 	eoreq	r2, r5, r3, lsr #10
     244:	91020000 	mrsls	r0, (UNDEF: 2)
     248:	ad030077 	stcge	0, cr0, [r3, #-476]	; 0xfffffe24
     24c:	01000001 	tsteq	r0, r1
     250:	0098061d 	addseq	r0, r8, sp, lsl r6
     254:	002a2000 	eoreq	r2, sl, r0
     258:	9c010000 	stcls	0, cr0, [r1], {-0}
     25c:	00000270 	andeq	r0, r0, r0, ror r2
     260:	00056b0c 	andeq	r6, r5, ip, lsl #22
     264:	241d0100 	ldrcs	r0, [sp], #-256	; 0xffffff00
     268:	00000025 	andeq	r0, r0, r5, lsr #32
     26c:	00779102 	rsbseq	r9, r7, r2, lsl #2
     270:	0000190d 	andeq	r1, r0, sp, lsl #18
     274:	06180100 	ldreq	r0, [r8], -r0, lsl #2
     278:	2000005c 	andcs	r0, r0, ip, asr r0
     27c:	0000003c 	andeq	r0, r0, ip, lsr r0
     280:	02949c01 	addseq	r9, r4, #256	; 0x100
     284:	78040000 	stmdavc	r4, {}	; <UNPREDICTABLE>
     288:	29180100 	ldmdbcs	r8, {r8}
     28c:	00000025 	andeq	r0, r0, r5, lsr #32
     290:	00779102 	rsbseq	r9, r7, r2, lsl #2
     294:	0001e50d 	andeq	lr, r1, sp, lsl #10
     298:	06130100 	ldreq	r0, [r3], -r0, lsl #2
     29c:	2000002a 	andcs	r0, r0, sl, lsr #32
     2a0:	00000032 	andeq	r0, r0, r2, lsr r0
     2a4:	02b89c01 	adcseq	r9, r8, #256	; 0x100
     2a8:	78040000 	stmdavc	r4, {}	; <UNPREDICTABLE>
     2ac:	27130100 	ldrcs	r0, [r3, -r0, lsl #2]
     2b0:	00000025 	andeq	r0, r0, r5, lsr #32
     2b4:	00779102 	rsbseq	r9, r7, r2, lsl #2
     2b8:	00023e0e 	andeq	r3, r2, lr, lsl #28
     2bc:	06040100 	streq	r0, [r4], -r0, lsl #2
     2c0:	20000010 	andcs	r0, r0, r0, lsl r0
     2c4:	0000001a 	andeq	r0, r0, sl, lsl r0
     2c8:	e7009c01 	str	r9, [r0, -r1, lsl #24]
     2cc:	04000006 	streq	r0, [r0], #-6
     2d0:	00011400 	andeq	r1, r1, r0, lsl #8
     2d4:	51010400 	tstpl	r1, r0, lsl #8
     2d8:	0c000000 	stceq	0, cr0, [r0], {-0}
     2dc:	000002a6 	andeq	r0, r0, r6, lsr #5
     2e0:	0000015d 	andeq	r0, r0, sp, asr r1
	...
     2ec:	000001bc 			; <UNDEFINED> instruction: 0x000001bc
     2f0:	4f080102 	svcmi	0x00080102
     2f4:	03000001 	movweq	r0, #1
     2f8:	00000049 	andeq	r0, r0, r9, asr #32
     2fc:	0000003d 	andeq	r0, r0, sp, lsr r0
     300:	00004204 	andeq	r4, r0, r4, lsl #4
     304:	0003ff00 	andeq	pc, r3, r0, lsl #30
     308:	00002c05 	andeq	r2, r0, r5, lsl #24
     30c:	07040200 	streq	r0, [r4, -r0, lsl #4]
     310:	0000070e 	andeq	r0, r0, lr, lsl #14
     314:	00004205 	andeq	r4, r0, r5, lsl #4
     318:	03e50600 	mvneq	r0, #0, 12
     31c:	0f030000 	svceq	0x00030000
     320:	00003d1e 	andeq	r3, r0, lr, lsl sp
     324:	d8030500 	stmdale	r3, {r8, sl}
     328:	07200012 			; <UNDEFINED> instruction: 0x07200012
     32c:	00000304 	andeq	r0, r0, r4, lsl #6
     330:	10010202 	andne	r0, r1, r2, lsl #4
     334:	00000084 	andeq	r0, r0, r4, lsl #1
     338:	02007808 	andeq	r7, r0, #8, 16	; 0x80000
     33c:	00251302 	eoreq	r1, r5, r2, lsl #6
     340:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     344:	03020079 	movweq	r0, #8313	; 0x2079
     348:	00002513 	andeq	r2, r0, r3, lsl r5
     34c:	09000100 	stmdbeq	r0, {r8}
     350:	0000030b 	andeq	r0, r0, fp, lsl #6
     354:	60020402 	andvs	r0, r2, r2, lsl #8
     358:	07000000 	streq	r0, [r0, -r0]
     35c:	000003a3 	andeq	r0, r0, r3, lsr #7
     360:	1008022c 	andne	r0, r8, ip, lsr #4
     364:	000000d1 	ldrdeq	r0, [r0], -r1
     368:	0004600a 	andeq	r6, r4, sl
     36c:	09090200 	stmdbeq	r9, {r9}
     370:	000000d1 	ldrdeq	r0, [r0], -r1
     374:	03ad0a00 			; <UNDEFINED> instruction: 0x03ad0a00
     378:	0a020000 	beq	80380 <startup-0x1ff7fc80>
     37c:	0000d109 	andeq	sp, r0, r9, lsl #2
     380:	b30a0400 	movwlt	r0, #41984	; 0xa400
     384:	02000003 	andeq	r0, r0, #3, 0
     388:	00d1090b 	sbcseq	r0, r1, fp, lsl #18
     38c:	08080000 	stmdaeq	r8, {}	; <UNPREDICTABLE>
     390:	02007870 	andeq	r7, r0, #112, 16	; 0x700000
     394:	00dd0b0c 	sbcseq	r0, sp, ip, lsl #22
     398:	000c0000 	andeq	r0, ip, r0
     39c:	6905040b 	stmdbvs	r5, {r0, r1, r3, sl}
     3a0:	0500746e 	streq	r7, [r0, #-1134]	; 0xfffffb92
     3a4:	000000d1 	ldrdeq	r0, [r0], -r1
     3a8:	00008403 	andeq	r8, r0, r3, lsl #8
     3ac:	0000ed00 	andeq	lr, r0, r0, lsl #26
     3b0:	00420c00 	subeq	r0, r2, r0, lsl #24
     3b4:	000f0000 	andeq	r0, pc, r0
     3b8:	00024a09 	andeq	r4, r2, r9, lsl #20
     3bc:	030d0200 	movweq	r0, #53760	; 0xd200
     3c0:	00000090 	muleq	r0, r0, r0
     3c4:	00024909 	andeq	r4, r2, r9, lsl #18
     3c8:	0e0d0200 	cdpeq	2, 0, cr0, cr13, cr0, {0}
     3cc:	00000105 	andeq	r0, r0, r5, lsl #2
     3d0:	0090040d 	addseq	r0, r0, sp, lsl #8
     3d4:	42070000 	andmi	r0, r7, #0, 0
     3d8:	24000004 	strcs	r0, [r0], #-4
     3dc:	8e100f02 	cdphi	15, 1, cr0, cr0, cr2, {0}
     3e0:	08000001 	stmdaeq	r0, {r0}
     3e4:	006f6567 	rsbeq	r6, pc, r7, ror #10
     3e8:	f90f1002 			; <UNDEFINED> instruction: 0xf90f1002
     3ec:	00000000 	andeq	r0, r0, r0
     3f0:	00029c0a 	andeq	r9, r2, sl, lsl #24
     3f4:	09110200 	ldmdbeq	r1, {r9}
     3f8:	000000d1 	ldrdeq	r0, [r0], -r1
     3fc:	02a10a04 	adceq	r0, r1, #4, 20	; 0x4000
     400:	11020000 	mrsne	r0, (UNDEF: 2)
     404:	0000d10e 	andeq	sp, r0, lr, lsl #2
     408:	220a0800 	andcs	r0, sl, #0, 16
     40c:	02000003 	andeq	r0, r0, #3, 0
     410:	00d10912 	sbcseq	r0, r1, r2, lsl r9
     414:	0a0c0000 	beq	30041c <startup-0x1fcffbe4>
     418:	00000327 	andeq	r0, r0, r7, lsr #6
     41c:	d10e1202 	tstle	lr, r2, lsl #4
     420:	10000000 	andne	r0, r0, r0
     424:	0003c60a 	andeq	ip, r3, sl, lsl #12
     428:	0d130200 	lfmeq	f0, 4, [r3, #-0]
     42c:	0000019f 	muleq	r0, pc, r1	; <UNPREDICTABLE>
     430:	06990a14 			; <UNDEFINED> instruction: 0x06990a14
     434:	14020000 	strne	r0, [r2], #-0
     438:	00019f0d 	andeq	r9, r1, sp, lsl #30
     43c:	260a1800 	strcs	r1, [sl], -r0, lsl #16
     440:	02000007 	andeq	r0, r0, #7, 0
     444:	019f0d15 	orrseq	r0, pc, r5, lsl sp	; <UNPREDICTABLE>
     448:	0a1c0000 	beq	700450 <startup-0x1f8ffbb0>
     44c:	00000318 	andeq	r0, r0, r8, lsl r3
     450:	ba0d1602 	blt	345c60 <startup-0x1fcba3a0>
     454:	20000001 	andcs	r0, r0, r1
     458:	01990e00 	orrseq	r0, r9, r0, lsl #28
     45c:	990f0000 	stmdbls	pc, {}	; <UNPREDICTABLE>
     460:	00000001 	andeq	r0, r0, r1
     464:	010b040d 	tsteq	fp, sp, lsl #8
     468:	040d0000 	streq	r0, [sp], #-0
     46c:	0000018e 	andeq	r0, r0, lr, lsl #3
     470:	0001ba0e 	andeq	fp, r1, lr, lsl #20
     474:	01990f00 	orrseq	r0, r9, r0, lsl #30
     478:	d10f0000 	mrsle	r0, CPSR
     47c:	0f000000 	svceq	0x00000000
     480:	000000d1 	ldrdeq	r0, [r0], -r1
     484:	a5040d00 	strge	r0, [r4, #-3328]	; 0xfffff300
     488:	09000001 	stmdbeq	r0, {r0}
     48c:	0000048f 	andeq	r0, r0, pc, lsl #9
     490:	0b031702 	bleq	c60a0 <startup-0x1ff39f60>
     494:	09000001 	stmdbeq	r0, {r0}
     498:	0000048e 	andeq	r0, r0, lr, lsl #9
     49c:	990c1702 	stmdbls	ip, {r1, r8, r9, sl, ip}
     4a0:	10000001 	andne	r0, r0, r1
     4a4:	09190208 	ldmdbeq	r9, {r3, r9}
     4a8:	00000209 	andeq	r0, r0, r9, lsl #4
     4ac:	0003df0a 	andeq	sp, r3, sl, lsl #30
     4b0:	131a0200 	tstne	sl, #0, 4
     4b4:	00000025 	andeq	r0, r0, r5, lsr #32
     4b8:	032c0a00 			; <UNDEFINED> instruction: 0x032c0a00
     4bc:	1b020000 	blne	804c4 <startup-0x1ff7fb3c>
     4c0:	00002513 	andeq	r2, r0, r3, lsl r5
     4c4:	dc0a0100 	stfles	f0, [sl], {-0}
     4c8:	02000005 	andeq	r0, r0, #5, 0
     4cc:	0209141c 	andeq	r1, r9, #28, 8	; 0x1c000000
     4d0:	00040000 	andeq	r0, r4, r0
     4d4:	0025040d 	eoreq	r0, r5, sp, lsl #8
     4d8:	15090000 	strne	r0, [r9, #-0]
     4dc:	02000004 	andeq	r0, r0, #4, 0
     4e0:	01d8021d 	bicseq	r0, r8, sp, lsl r2
     4e4:	25030000 	strcs	r0, [r3, #-0]
     4e8:	2b000000 	blcs	4f0 <startup-0x1ffffb10>
     4ec:	0c000002 	stceq	0, cr0, [r0], {2}
     4f0:	00000042 	andeq	r0, r0, r2, asr #32
     4f4:	ee060008 	cdp	0, 0, cr0, cr6, cr8, {0}
     4f8:	04000002 	streq	r0, [r0], #-2
     4fc:	021b1603 	andseq	r1, fp, #3145728	; 0x300000
     500:	03050000 	movweq	r0, #20480	; 0x5000
     504:	20003478 	andcs	r3, r0, r8, ror r4
     508:	00046306 	andeq	r6, r4, r6, lsl #6
     50c:	15170100 	ldrne	r0, [r7, #-256]	; 0xffffff00
     510:	000000d8 	ldrdeq	r0, [r0], -r8
     514:	22d80305 	sbcscs	r0, r8, #335544320	; 0x14000000
     518:	53062000 	movwpl	r2, #24576	; 0x6000
     51c:	01000002 	tsteq	r0, r2
     520:	00d81d17 	sbcseq	r1, r8, r7, lsl sp
     524:	03050000 	movweq	r0, #20480	; 0x5000
     528:	200022dc 	ldrdcs	r2, [r0], -ip
     52c:	00025d11 	andeq	r5, r2, r1, lsl sp
     530:	0a510100 	beq	1440938 <startup-0x1ebbf6c8>
     534:	000000ed 	andeq	r0, r0, sp, ror #1
     538:	34840305 	strcc	r0, [r4], #773	; 0x305
     53c:	3e112000 	cdpcc	0, 1, cr2, cr1, cr0, {0}
     540:	01000003 	tsteq	r0, r3
     544:	00ed0a5c 	rsceq	r0, sp, ip, asr sl
     548:	03050000 	movweq	r0, #20480	; 0x5000
     54c:	200034b0 			; <UNDEFINED> instruction: 0x200034b0
     550:	00041c11 	andeq	r1, r4, r1, lsl ip
     554:	0a670100 	beq	19c095c <startup-0x1e63f6a4>
     558:	000000ed 	andeq	r0, r0, sp, ror #1
     55c:	34dc0305 	ldrbcc	r0, [ip], #773	; 0x305
     560:	86112000 	ldrhi	r2, [r1], -r0
     564:	01000002 	tsteq	r0, r2
     568:	00ed0a72 	rsceq	r0, sp, r2, ror sl
     56c:	03050000 	movweq	r0, #20480	; 0x5000
     570:	20003508 	andcs	r3, r0, r8, lsl #10
     574:	00036411 	andeq	r6, r3, r1, lsl r4
     578:	0a7f0100 	beq	1fc0980 <startup-0x1e03f680>
     57c:	000000ed 	andeq	r0, r0, sp, ror #1
     580:	35340305 	ldrcc	r0, [r4, #-773]!	; 0xfffffcfb
     584:	77112000 	ldrvc	r2, [r1, -r0]
     588:	01000003 	tsteq	r0, r3
     58c:	00ed0a8a 	rsceq	r0, sp, sl, lsl #21
     590:	03050000 	movweq	r0, #20480	; 0x5000
     594:	20003560 	andcs	r3, r0, r0, ror #10
     598:	0003cb06 	andeq	ip, r3, r6, lsl #22
     59c:	0fa10100 	svceq	0x00a10100
     5a0:	000001c0 	andeq	r0, r0, r0, asr #3
     5a4:	358c0305 	strcc	r0, [ip, #773]	; 0x305
     5a8:	85122000 	ldrhi	r2, [r2, #-0]
     5ac:	01000003 	tsteq	r0, r3
     5b0:	f406012a 	vst4.8	{d0,d2,d4,d6}, [r6 :128], sl
     5b4:	18200008 	stmdane	r0!, {r3}
     5b8:	01000001 	tsteq	r0, r1
     5bc:	00036a9c 	muleq	r3, ip, sl
     5c0:	03b91300 			; <UNDEFINED> instruction: 0x03b91300
     5c4:	2a010000 	bcs	405cc <startup-0x1ffbfa34>
     5c8:	00d10f01 	sbcseq	r0, r1, r1, lsl #30
     5cc:	91030000 	mrsls	r0, (UNDEF: 3)
     5d0:	811347bc 			; <UNDEFINED> instruction: 0x811347bc
     5d4:	01000002 	tsteq	r0, r2
     5d8:	6a1c012a 	bvs	700a88 <startup-0x1f8ff578>
     5dc:	03000003 	movweq	r0, #3
     5e0:	1447b891 	strbne	fp, [r7], #-2193	; 0xfffff76f
     5e4:	0000045b 	andeq	r0, r0, fp, asr r4
     5e8:	09012b01 	stmdbeq	r1, {r0, r8, r9, fp, sp}
     5ec:	000000d1 	ldrdeq	r0, [r0], -r1
     5f0:	146c9102 	strbtne	r9, [ip], #-258	; 0xfffffefe
     5f4:	0000038a 	andeq	r0, r0, sl, lsl #7
     5f8:	13012b01 	movwne	r2, #6913	; 0x1b01
     5fc:	000000d1 	ldrdeq	r0, [r0], -r1
     600:	14689102 	strbtne	r9, [r8], #-258	; 0xfffffefe
     604:	000003d4 	ldrdeq	r0, [r0], -r4
     608:	0a012c01 	beq	4b614 <startup-0x1ffb49ec>
     60c:	00000376 	andeq	r0, r0, r6, ror r3
     610:	14639102 	strbtne	r9, [r3], #-258	; 0xfffffefe
     614:	00000476 	andeq	r0, r0, r6, ror r4
     618:	0d012e01 	stceq	14, cr2, [r1, #-4]
     61c:	000001cc 	andeq	r0, r0, ip, asr #3
     620:	14649102 	strbtne	r9, [r4], #-258	; 0xfffffefe
     624:	000002fe 	strdeq	r0, [r0], -lr
     628:	0c012f01 	stceq	15, cr2, [r1], {1}
     62c:	0000037d 	andeq	r0, r0, sp, ror r3
     630:	47c09103 	strbmi	r9, [r0, r3, lsl #2]
     634:	70040d00 	andvc	r0, r4, r0, lsl #26
     638:	0d000003 	stceq	0, cr0, [r0, #-12]
     63c:	00037604 	andeq	r7, r3, r4, lsl #12
     640:	08010200 	stmdaeq	r1, {r9}
     644:	00000158 	andeq	r0, r0, r8, asr r1
     648:	0001c003 	andeq	ip, r1, r3
     64c:	00038d00 	andeq	r8, r3, r0, lsl #26
     650:	00420c00 	subeq	r0, r2, r0, lsl #24
     654:	00c70000 	sbceq	r0, r7, r0
     658:	00045315 	andeq	r5, r4, r5, lsl r3
     65c:	01230100 			; <UNDEFINED> instruction: 0x01230100
     660:	0008cc06 	andeq	ip, r8, r6, lsl #24
     664:	00002820 	andeq	r2, r0, r0, lsr #16
     668:	169c0100 	ldrne	r0, [ip], r0, lsl #2
     66c:	000002f9 	strdeq	r0, [r0], -r9
     670:	06010f01 	streq	r0, [r1], -r1, lsl #30
     674:	200007a4 	andcs	r0, r0, r4, lsr #15
     678:	00000128 	andeq	r0, r0, r8, lsr #2
     67c:	03ec9c01 	mvneq	r9, #256	; 0x100
     680:	73170000 	tstvc	r7, #0, 0
     684:	010f0100 	mrseq	r0, (UNDEF: 31)
     688:	0001cc19 	andeq	ip, r1, r9, lsl ip
     68c:	6c910200 	lfmvs	f0, 4, [r1], {0}
     690:	01006a18 	tsteq	r0, r8, lsl sl
     694:	d1090110 	tstle	r9, r0, lsl r1
     698:	02000000 	andeq	r0, r0, #0, 0
     69c:	b0197491 	mulslt	r9, r1, r4
     6a0:	f6200007 			; <UNDEFINED> instruction: 0xf6200007
     6a4:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
     6a8:	11010069 	tstne	r1, r9, rrx
     6ac:	00d10e01 	sbcseq	r0, r1, r1, lsl #28
     6b0:	91020000 	mrsls	r0, (UNDEF: 2)
     6b4:	1a000070 	bne	87c <startup-0x1ffff784>
     6b8:	0000039a 	muleq	r0, sl, r3
     6bc:	4406fd01 	strmi	pc, [r6], #-3329	; 0xfffff2ff
     6c0:	60200007 	eorvs	r0, r0, r7
     6c4:	01000000 	mrseq	r0, (UNDEF: 0)
     6c8:	047b1b9c 	ldrbteq	r1, [fp], #-2972	; 0xfffff464
     6cc:	dd010000 	stcle	0, cr0, [r1, #-0]
     6d0:	00067006 	andeq	r7, r6, r6
     6d4:	0000d420 	andeq	sp, r0, r0, lsr #8
     6d8:	4f9c0100 	svcmi	0x009c0100
     6dc:	1c000004 	stcne	0, cr0, [r0], {4}
     6e0:	00726964 	rsbseq	r6, r2, r4, ror #18
     6e4:	d10fdd01 	tstle	pc, r1, lsl #26
     6e8:	02000000 	andeq	r0, r0, #0, 0
     6ec:	731c6c91 	tstvc	ip, #37120	; 0x9100
     6f0:	1cdd0100 	ldfnee	f0, [sp], {0}
     6f4:	000001cc 	andeq	r0, r0, ip, asr #3
     6f8:	06689102 	strbteq	r9, [r8], -r2, lsl #2
     6fc:	000002e7 	andeq	r0, r0, r7, ror #5
     700:	d109de01 	tstle	r9, r1, lsl #28
     704:	02000000 	andeq	r0, r0, #0, 0
     708:	11067491 			; <UNDEFINED> instruction: 0x11067491
     70c:	01000003 	tsteq	r0, r3
     710:	00d115de 	ldrsbeq	r1, [r1], #94	; 0x5e
     714:	91020000 	mrsls	r0, (UNDEF: 2)
     718:	341d0070 	ldrcc	r0, [sp], #-112	; 0xffffff90
     71c:	01000004 	tsteq	r0, r4
     720:	05e006cf 	strbeq	r0, [r0, #1743]!	; 0x6cf
     724:	00902000 	addseq	r2, r0, r0
     728:	9c010000 	stcls	0, cr0, [r1], {-0}
     72c:	000004c1 	andeq	r0, r0, r1, asr #9
     730:	0100731c 	tsteq	r0, ip, lsl r3
     734:	01cc1ccf 	biceq	r1, ip, pc, asr #25
     738:	91020000 	mrsls	r0, (UNDEF: 2)
     73c:	02e70664 	rsceq	r0, r7, #100, 12	; 0x6400000
     740:	d0010000 	andle	r0, r1, r0
     744:	0000d109 	andeq	sp, r0, r9, lsl #2
     748:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     74c:	00031106 	andeq	r1, r3, r6, lsl #2
     750:	09d10100 	ldmibeq	r1, {r8}^
     754:	000000d1 	ldrdeq	r0, [r0], -r1
     758:	19709102 	ldmdbne	r0!, {r1, r8, ip, pc}^
     75c:	200005f4 	strdcs	r0, [r0], -r4
     760:	0000006e 	andeq	r0, r0, lr, rrx
     764:	0100691e 	tsteq	r0, lr, lsl r9
     768:	00d10dd2 	ldrsbeq	r0, [r1], #210	; 0xd2
     76c:	91020000 	mrsls	r0, (UNDEF: 2)
     770:	05fa196c 	ldrbeq	r1, [sl, #2412]!	; 0x96c
     774:	00582000 	subseq	r2, r8, r0
     778:	92060000 	andls	r0, r6, #0, 0
     77c:	01000003 	tsteq	r0, r3
     780:	00d10dd3 	ldrsbeq	r0, [r1], #211	; 0xd3
     784:	91020000 	mrsls	r0, (UNDEF: 2)
     788:	00000068 	andeq	r0, r0, r8, rrx
     78c:	0003331b 	andeq	r3, r3, fp, lsl r3
     790:	06c70100 	strbeq	r0, [r7], r0, lsl #2
     794:	20000576 	andcs	r0, r0, r6, ror r5
     798:	0000006a 	andeq	r0, r0, sl, rrx
     79c:	05189c01 	ldreq	r9, [r8, #-3073]	; 0xfffff3ff
     7a0:	731c0000 	tstvc	ip, #0, 0
     7a4:	19c70100 	stmibne	r7, {r8}^
     7a8:	000001cc 	andeq	r0, r0, ip, asr #3
     7ac:	1f6c9102 	svcne	0x006c9102
     7b0:	2000058e 	andcs	r0, r0, lr, lsl #11
     7b4:	00000008 	andeq	r0, r0, r8
     7b8:	00000500 	andeq	r0, r0, r0, lsl #10
     7bc:	00043420 	andeq	r3, r4, r0, lsr #8
     7c0:	0dc90100 	stfeqe	f0, [r9]
     7c4:	000000d1 	ldrdeq	r0, [r0], -r1
     7c8:	19000021 	stmdbne	r0, {r0, r5}
     7cc:	20000596 	mulcs	r0, r6, r5
     7d0:	0000003c 	andeq	r0, r0, ip, lsr r0
     7d4:	0100691e 	tsteq	r0, lr, lsl r9
     7d8:	00d10eca 	sbcseq	r0, r1, sl, asr #29
     7dc:	91020000 	mrsls	r0, (UNDEF: 2)
     7e0:	1b000074 	blne	9b8 <startup-0x1ffff648>
     7e4:	00000275 	andeq	r0, r0, r5, ror r2
     7e8:	b406b201 	strlt	fp, [r6], #-513	; 0xfffffdff
     7ec:	c2200004 	eorgt	r0, r0, #4, 0
     7f0:	01000000 	mrseq	r0, (UNDEF: 0)
     7f4:	0005a59c 	muleq	r5, ip, r5
     7f8:	00731c00 	rsbseq	r1, r3, r0, lsl #24
     7fc:	a51ab201 	ldrge	fp, [sl, #-513]	; 0xfffffdff
     800:	02000005 	andeq	r0, r0, #5, 0
     804:	781c5c91 	ldmdavc	ip, {r0, r4, r7, sl, fp, ip, lr}
     808:	21b20100 			; <UNDEFINED> instruction: 0x21b20100
     80c:	000000d1 	ldrdeq	r0, [r0], -r1
     810:	1c589102 	ldfnep	f1, [r8], {2}
     814:	b2010079 	andlt	r0, r1, #121, 0	; 0x79
     818:	0000d128 	andeq	sp, r0, r8, lsr #2
     81c:	54910200 	ldrpl	r0, [r1], #512	; 0x200
     820:	0100691e 	tsteq	r0, lr, lsl r9
     824:	00d109b3 	ldrheq	r0, [r1], #147	; 0x93
     828:	91020000 	mrsls	r0, (UNDEF: 2)
     82c:	006a1e74 	rsbeq	r1, sl, r4, ror lr
     830:	d10bb301 	tstle	fp, r1, lsl #6
     834:	02000000 	andeq	r0, r0, #0, 0
     838:	6b1e7091 	blvs	79ca84 <startup-0x1f86357c>
     83c:	0db30100 	ldfeqs	f0, [r3]
     840:	000000d1 	ldrdeq	r0, [r0], -r1
     844:	066c9102 	strbteq	r9, [ip], -r2, lsl #2
     848:	00000401 	andeq	r0, r0, r1, lsl #8
     84c:	d110b301 	tstle	r0, r1, lsl #6
     850:	02000000 	andeq	r0, r0, #0, 0
     854:	f2196891 	vtst.16	d6, d25, d1
     858:	5a200004 	bpl	800870 <startup-0x1f7ff790>
     85c:	06000000 	streq	r0, [r0], -r0
     860:	000001a8 	andeq	r0, r0, r8, lsr #3
     864:	251bbd01 	ldrcs	fp, [fp, #-3329]	; 0xfffff2ff
     868:	02000000 	andeq	r0, r0, #0, 0
     86c:	00006791 	muleq	r0, r1, r7
     870:	020f040d 	andeq	r0, pc, #218103808	; 0xd000000
     874:	10220000 	eorne	r0, r2, r0
     878:	01000004 	tsteq	r0, r4
     87c:	04880dac 	streq	r0, [r8], #3500	; 0xdac
     880:	002c2000 	eoreq	r2, ip, r0
     884:	9c010000 	stcls	0, cr0, [r1], {-0}
     888:	000005fc 	strdeq	r0, [r0], -ip
     88c:	0100731c 	tsteq	r0, ip, lsl r3
     890:	05a521ac 	streq	r2, [r5, #428]!	; 0x1ac
     894:	91020000 	mrsls	r0, (UNDEF: 2)
     898:	05dc2374 	ldrbeq	r2, [ip, #884]	; 0x374
     89c:	ac010000 	stcge	0, cr0, [r1], {-0}
     8a0:	00020933 	andeq	r0, r2, r3, lsr r9
     8a4:	70910200 	addsvc	r0, r1, r0, lsl #4
     8a8:	0003df23 	andeq	sp, r3, r3, lsr #30
     8ac:	3dac0100 	stfccs	f0, [ip]
     8b0:	000000d1 	ldrdeq	r0, [r0], -r1
     8b4:	236c9102 	cmncs	ip, #-2147483648	; 0x80000000
     8b8:	0000032c 	andeq	r0, r0, ip, lsr #6
     8bc:	d148ac01 	cmple	r8, r1, lsl #24
     8c0:	02000000 	andeq	r0, r0, #0, 0
     8c4:	1b006891 	blne	1ab10 <startup-0x1ffe54f0>
     8c8:	0000046a 	andeq	r0, r0, sl, ror #8
     8cc:	dc063301 	stcle	3, cr3, [r6], {1}
     8d0:	ac200003 	stcge	0, cr0, [r0], #-12
     8d4:	01000000 	mrseq	r0, (UNDEF: 0)
     8d8:	0006209c 	muleq	r6, ip, r0
     8dc:	006f1c00 	rsbeq	r1, pc, r0, lsl #24
     8e0:	cc1a3301 	ldcgt	3, cr3, [sl], {1}
     8e4:	02000001 	andeq	r0, r0, #1, 0
     8e8:	1b007491 	blne	1db34 <startup-0x1ffe24cc>
     8ec:	00000357 	andeq	r0, r0, r7, asr r3
     8f0:	7a062d01 	bvc	18bcfc <startup-0x1fe74304>
     8f4:	62200003 	eorvs	r0, r0, #3, 0
     8f8:	01000000 	mrseq	r0, (UNDEF: 0)
     8fc:	00065b9c 	muleq	r6, ip, fp
     900:	006f1c00 	rsbeq	r1, pc, r0, lsl #24
     904:	cc1b2d01 	ldcgt	13, cr2, [fp], {1}
     908:	02000001 	andeq	r0, r0, #1, 0
     90c:	82196c91 	andshi	r6, r9, #37120	; 0x9100
     910:	50200003 	eorpl	r0, r0, r3
     914:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
     918:	2e010069 	cdpcs	0, 0, cr0, cr1, cr9, {3}
     91c:	0000d10e 	andeq	sp, r0, lr, lsl #2
     920:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     924:	471b0000 	ldrmi	r0, [fp, -r0]
     928:	01000004 	tsteq	r0, r4
     92c:	03180627 	tsteq	r8, #40894464	; 0x2700000
     930:	00622000 	rsbeq	r2, r2, r0
     934:	9c010000 	stcls	0, cr0, [r1], {-0}
     938:	00000696 	muleq	r0, r6, r6
     93c:	01006f1c 	tsteq	r0, ip, lsl pc
     940:	01cc1a27 	biceq	r1, ip, r7, lsr #20
     944:	91020000 	mrsls	r0, (UNDEF: 2)
     948:	0320196c 			; <UNDEFINED> instruction: 0x0320196c
     94c:	00502000 	subseq	r2, r0, r0
     950:	691e0000 	ldmdbvs	lr, {}	; <UNPREDICTABLE>
     954:	0e280100 	sufeqe	f0, f0, f0
     958:	000000d1 	ldrdeq	r0, [r0], -r1
     95c:	00749102 	rsbseq	r9, r4, r2, lsl #2
     960:	03f01d00 	mvnseq	r1, #0, 26
     964:	22010000 	andcs	r0, r1, #0, 0
     968:	0002f806 	andeq	pc, r2, r6, lsl #16
     96c:	00002020 	andeq	r2, r0, r0, lsr #32
     970:	d89c0100 	ldmle	ip, {r8}
     974:	1c000006 	stcne	0, cr0, [r0], {6}
     978:	2201006f 	andcs	r0, r1, #111, 0	; 0x6f
     97c:	0001cc1f 	andeq	ip, r1, pc, lsl ip
     980:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     984:	00048023 	andeq	r8, r4, r3, lsr #32
     988:	26220100 	strtcs	r0, [r2], -r0, lsl #2
     98c:	000000d1 	ldrdeq	r0, [r0], -r1
     990:	23709102 	cmncs	r0, #-2147483648	; 0x80000000
     994:	00000487 	andeq	r0, r0, r7, lsl #9
     998:	d1322201 	teqle	r2, r1, lsl #4
     99c:	02000000 	andeq	r0, r0, #0, 0
     9a0:	1a006c91 	bne	1bbec <startup-0x1ffe4414>
     9a4:	000003be 			; <UNDEFINED> instruction: 0x000003be
     9a8:	00061a01 	andeq	r1, r6, r1, lsl #20
     9ac:	0c200000 	stceq	0, cr0, [r0], #-0
     9b0:	01000000 	mrseq	r0, (UNDEF: 0)
     9b4:	0120009c 			; <UNDEFINED> instruction: 0x0120009c
     9b8:	00040000 	andeq	r0, r4, r0
     9bc:	0000034d 	andeq	r0, r0, sp, asr #6
     9c0:	00510104 	subseq	r0, r1, r4, lsl #2
     9c4:	d40c0000 	strle	r0, [ip], #-0
     9c8:	5d000004 	stcpl	0, cr0, [r0, #-16]
     9cc:	0c000001 	stceq	0, cr0, [r0], {1}
     9d0:	f020000a 			; <UNDEFINED> instruction: 0xf020000a
     9d4:	f2000000 	vhadd.s8	d0, d0, d0
     9d8:	02000006 	andeq	r0, r0, #6, 0
     9dc:	014f0801 	cmpeq	pc, r1, lsl #16
     9e0:	a8030000 	stmdage	r3, {}	; <UNPREDICTABLE>
     9e4:	01000004 	tsteq	r0, r4
     9e8:	0adc0624 	beq	ff702280 <rear+0xdf6fecd0>
     9ec:	00202000 	eoreq	r2, r0, r0
     9f0:	9c010000 	stcls	0, cr0, [r1], {-0}
     9f4:	00000050 	andeq	r0, r0, r0, asr r0
     9f8:	01006304 	tsteq	r0, r4, lsl #6
     9fc:	00251c24 	eoreq	r1, r5, r4, lsr #24
     a00:	91020000 	mrsls	r0, (UNDEF: 2)
     a04:	a3050077 	movwge	r0, #20599	; 0x5077
     a08:	01000004 	tsteq	r0, r4
     a0c:	00250f14 	eoreq	r0, r5, r4, lsl pc
     a10:	0a740000 	beq	1d00a18 <startup-0x1e2ff5e8>
     a14:	00682000 	rsbeq	r2, r8, r0
     a18:	9c010000 	stcls	0, cr0, [r1], {-0}
     a1c:	000000a7 	andeq	r0, r0, r7, lsr #1
     a20:	0004bd06 	andeq	fp, r4, r6, lsl #26
     a24:	13150100 	tstne	r5, #0
     a28:	000000a7 	andeq	r0, r0, r7, lsr #1
     a2c:	06589102 	ldrbeq	r9, [r8], -r2, lsl #2
     a30:	0000049c 	muleq	r0, ip, r4
     a34:	a7131601 	ldrge	r1, [r3, -r1, lsl #12]
     a38:	02000000 	andeq	r0, r0, #0, 0
     a3c:	72074891 	andvc	r4, r7, #9502720	; 0x910000
     a40:	0100776f 	tsteq	r0, pc, ror #14
     a44:	00be0919 	adcseq	r0, lr, r9, lsl r9
     a48:	91020000 	mrsls	r0, (UNDEF: 2)
     a4c:	04b5066c 	ldrteq	r0, [r5], #1644	; 0x66c
     a50:	19010000 	stmdbne	r1, {}	; <UNPREDICTABLE>
     a54:	0000be0e 	andeq	fp, r0, lr, lsl #28
     a58:	68910200 	ldmvs	r1, {r9}
     a5c:	00250800 	eoreq	r0, r5, r0, lsl #16
     a60:	00b70000 	adcseq	r0, r7, r0
     a64:	b7090000 	strlt	r0, [r9, -r0]
     a68:	0f000000 	svceq	0x00000000
     a6c:	07040200 	streq	r0, [r4, -r0, lsl #4]
     a70:	0000070e 	andeq	r0, r0, lr, lsl #14
     a74:	6905040a 	stmdbvs	r5, {r1, r3, sl}
     a78:	0b00746e 	bleq	1dc38 <startup-0x1ffe23c8>
     a7c:	000004b0 			; <UNDEFINED> instruction: 0x000004b0
     a80:	be050801 	cdplt	8, 0, cr0, cr5, cr1, {0}
     a84:	30000000 	andcc	r0, r0, r0
     a88:	4420000a 	strtmi	r0, [r0], #-10
     a8c:	01000000 	mrseq	r0, (UNDEF: 0)
     a90:	0000fc9c 	muleq	r0, ip, ip
     a94:	006a0700 	rsbeq	r0, sl, r0, lsl #14
     a98:	be090901 	vmlalt.f16	s0, s18, s2	; <UNPREDICTABLE>
     a9c:	02000000 	andeq	r0, r0, #0, 0
     aa0:	96067491 			; <UNDEFINED> instruction: 0x96067491
     aa4:	01000004 	tsteq	r0, r4
     aa8:	00fc0a0a 	rscseq	r0, ip, sl, lsl #20
     aac:	91020000 	mrsls	r0, (UNDEF: 2)
     ab0:	01020073 	tsteq	r2, r3, ror r0
     ab4:	00015808 	andeq	r5, r1, r8, lsl #16
     ab8:	04c70c00 	strbeq	r0, [r7], #3072	; 0xc00
     abc:	04010000 	streq	r0, [r1], #-0
     ac0:	000a0c06 	andeq	r0, sl, r6, lsl #24
     ac4:	00002420 	andeq	r2, r0, r0, lsr #8
     ac8:	049c0100 	ldreq	r0, [ip], #256	; 0x100
     acc:	04010069 	streq	r0, [r1], #-105	; 0xffffff97
     ad0:	0000be17 	andeq	fp, r0, r7, lsl lr
     ad4:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     ad8:	009e0000 	addseq	r0, lr, r0
     adc:	00040000 	andeq	r0, r4, r0
     ae0:	0000042c 	andeq	r0, r0, ip, lsr #8
     ae4:	00510104 	subseq	r0, r1, r4, lsl #2
     ae8:	1e0c0000 	cdpne	0, 0, cr0, cr12, cr0, {0}
     aec:	5d000005 	stcpl	0, cr0, [r0, #-20]	; 0xffffffec
     af0:	fc000001 	stc2	0, cr0, [r0], {1}
     af4:	6220000a 	eorvs	r0, r0, #10, 0
     af8:	dd000000 	stcle	0, cr0, [r0, #-0]
     afc:	02000007 	andeq	r0, r0, #7, 0
     b00:	014f0801 	cmpeq	pc, r1, lsl #16
     b04:	00030000 	andeq	r0, r3, r0
     b08:	01000000 	mrseq	r0, (UNDEF: 0)
     b0c:	0b200626 	bleq	8023ac <startup-0x1f7fdc54>
     b10:	003e2000 	eorseq	r2, lr, r0
     b14:	9c010000 	stcls	0, cr0, [r1], {-0}
     b18:	00000051 	andeq	r0, r0, r1, asr r0
     b1c:	00736d04 	rsbseq	r6, r3, r4, lsl #26
     b20:	511f2601 	tstpl	pc, r1, lsl #12
     b24:	02000000 	andeq	r0, r0, #0, 0
     b28:	02007491 	andeq	r7, r0, #-1862270976	; 0x91000000
     b2c:	070e0704 	streq	r0, [lr, -r4, lsl #14]
     b30:	2e050000 	cdpcs	0, 0, cr0, cr5, cr0, {0}
     b34:	01000000 	mrseq	r0, (UNDEF: 0)
     b38:	0b10061a 	bleq	4023a8 <startup-0x1fbfdc58>
     b3c:	00102000 	andseq	r2, r0, r0
     b40:	9c010000 	stcls	0, cr0, [r1], {-0}
     b44:	0000007d 	andeq	r0, r0, sp, ror r0
     b48:	00737504 	rsbseq	r7, r3, r4, lsl #10
     b4c:	511f1a01 	tstpl	pc, r1, lsl #20
     b50:	02000000 	andeq	r0, r0, #0, 0
     b54:	06007491 			; <UNDEFINED> instruction: 0x06007491
     b58:	00000512 	andeq	r0, r0, r2, lsl r5
     b5c:	06061201 	streq	r1, [r6], -r1, lsl #4
     b60:	0a20000b 	beq	800b94 <startup-0x1f7ff46c>
     b64:	01000000 	mrseq	r0, (UNDEF: 0)
     b68:	00fe069c 	smlalseq	r0, lr, ip, r6
     b6c:	05010000 	streq	r0, [r1, #-0]
     b70:	000afc06 	andeq	pc, sl, r6, lsl #24
     b74:	00000a20 	andeq	r0, r0, r0, lsr #20
     b78:	009c0100 	addseq	r0, ip, r0, lsl #2
     b7c:	00000388 	andeq	r0, r0, r8, lsl #7
     b80:	04ae0004 	strteq	r0, [lr], #4
     b84:	01040000 	mrseq	r0, (UNDEF: 4)
     b88:	00000051 	andeq	r0, r0, r1, asr r0
     b8c:	0005870c 	andeq	r8, r5, ip, lsl #14
     b90:	00015d00 	andeq	r5, r1, r0, lsl #26
     b94:	000b6000 	andeq	r6, fp, r0
     b98:	00052420 	andeq	r2, r5, r0, lsr #8
     b9c:	00087d00 	andeq	r7, r8, r0, lsl #26
     ba0:	06320200 	ldrteq	r0, [r2], -r0, lsl #4
     ba4:	01030000 	mrseq	r0, (UNDEF: 3)
     ba8:	00003117 	andeq	r3, r0, r7, lsl r1
     bac:	08010300 	stmdaeq	r1, {r8, r9}
     bb0:	0000014f 	andeq	r0, r0, pc, asr #2
     bb4:	00005504 	andeq	r5, r0, r4, lsl #10
     bb8:	00004900 	andeq	r4, r0, r0, lsl #18
     bbc:	004e0500 	subeq	r0, lr, r0, lsl #10
     bc0:	03ff0000 	mvnseq	r0, #0, 0
     bc4:	00380600 	eorseq	r0, r8, r0, lsl #12
     bc8:	04030000 	streq	r0, [r3], #-0
     bcc:	00070e07 	andeq	r0, r7, r7, lsl #28
     bd0:	004e0600 	subeq	r0, lr, r0, lsl #12
     bd4:	e5070000 	str	r0, [r7, #-0]
     bd8:	02000003 	andeq	r0, r0, #3, 0
     bdc:	00491e0f 	subeq	r1, r9, pc, lsl #28
     be0:	03050000 	movweq	r0, #20480	; 0x5000
     be4:	200022e0 	andcs	r2, r0, r0, ror #5
     be8:	00057308 	andeq	r7, r5, r8, lsl #6
     bec:	06b70100 	ldrteq	r0, [r7], r0, lsl #2
     bf0:	20000fb4 			; <UNDEFINED> instruction: 0x20000fb4
     bf4:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     bf8:	00c69c01 	sbceq	r9, r6, r1, lsl #24
     bfc:	69090000 	stmdbvs	r9, {}	; <UNPREDICTABLE>
     c00:	0db80100 	ldfeqs	f0, [r8]
     c04:	00000025 	andeq	r0, r0, r5, lsr #32
     c08:	09779102 	ldmdbeq	r7!, {r1, r8, ip, pc}^
     c0c:	b801006a 	stmdalt	r1, {r1, r3, r5, r6}
     c10:	00002511 	andeq	r2, r0, r1, lsl r5
     c14:	76910200 	ldrvc	r0, [r1], r0, lsl #4
     c18:	00012407 	andeq	r2, r1, r7, lsl #8
     c1c:	14b80100 	ldrtne	r0, [r8], #256	; 0x100
     c20:	00000025 	andeq	r0, r0, r5, lsr #32
     c24:	096f9102 	stmdbeq	pc!, {r1, r8, ip, pc}^	; <UNPREDICTABLE>
     c28:	b8010063 	stmdalt	r1, {r0, r1, r5, r6}
     c2c:	00002520 	andeq	r2, r0, r0, lsr #10
     c30:	75910200 	ldrvc	r0, [r1, #512]	; 0x200
     c34:	01006b09 	tsteq	r0, r9, lsl #22
     c38:	004e12b9 	strheq	r1, [lr], #-41	; 0xffffffd7
     c3c:	91020000 	mrsls	r0, (UNDEF: 2)
     c40:	ee0a0070 	mcr	0, 0, r0, cr10, cr0, {3}
     c44:	01000005 	tsteq	r0, r5
     c48:	0f3006a6 	svceq	0x003006a6
     c4c:	00842000 	addeq	r2, r4, r0
     c50:	9c010000 	stcls	0, cr0, [r1], {-0}
     c54:	00000115 	andeq	r0, r0, r5, lsl r1
     c58:	0100780b 	tsteq	r0, fp, lsl #16
     c5c:	004e15a6 	subeq	r1, lr, r6, lsr #11
     c60:	91020000 	mrsls	r0, (UNDEF: 2)
     c64:	00790b6c 	rsbseq	r0, r9, ip, ror #22
     c68:	4e21a601 	cfmadda32mi	mvax0, mvax10, mvfx1, mvfx1
     c6c:	02000000 	andeq	r0, r0, #0, 0
     c70:	2d076891 	stccs	8, cr6, [r7, #-580]	; 0xfffffdbc
     c74:	01000006 	tsteq	r0, r6
     c78:	00250da7 	eoreq	r0, r5, r7, lsr #27
     c7c:	91020000 	mrsls	r0, (UNDEF: 2)
     c80:	065a0773 			; <UNDEFINED> instruction: 0x065a0773
     c84:	a8010000 	stmdage	r1, {}	; <UNPREDICTABLE>
     c88:	00011509 	andeq	r1, r1, r9, lsl #10
     c8c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     c90:	05040c00 	streq	r0, [r4, #-3072]	; 0xfffff400
     c94:	00746e69 	rsbseq	r6, r4, r9, ror #28
     c98:	0006090d 	andeq	r0, r6, sp, lsl #18
     c9c:	06a00100 	strteq	r0, [r0], r0, lsl #2
     ca0:	20000efa 	strdcs	r0, [r0], -sl
     ca4:	00000036 	andeq	r0, r0, r6, lsr r0
     ca8:	01409c01 	cmpeq	r0, r1, lsl #24
     cac:	69090000 	stmdbvs	r9, {}	; <UNPREDICTABLE>
     cb0:	09a10100 	stmibeq	r1!, {r8}
     cb4:	00000115 	andeq	r0, r0, r5, lsl r1
     cb8:	00749102 	rsbseq	r9, r4, r2, lsl #2
     cbc:	00066008 	andeq	r6, r6, r8
     cc0:	06960100 	ldreq	r0, [r6], r0, lsl #2
     cc4:	20000ea0 	andcs	r0, r0, r0, lsr #29
     cc8:	0000005a 	andeq	r0, r0, sl, asr r0
     ccc:	01899c01 	orreq	r9, r9, r1, lsl #24
     cd0:	a60e0000 	strge	r0, [lr], -r0
     cd4:	4a20000e 	bmi	800d14 <startup-0x1f7ff2ec>
     cd8:	07000000 	streq	r0, [r0, -r0]
     cdc:	0000069f 	muleq	r0, pc, r6	; <UNPREDICTABLE>
     ce0:	150e9701 	strne	r9, [lr, #-1793]	; 0xfffff8ff
     ce4:	02000001 	andeq	r0, r0, #1, 0
     ce8:	ca0e7491 	bgt	39df34 <startup-0x1fc620cc>
     cec:	1a20000e 	bne	800d2c <startup-0x1f7ff2d4>
     cf0:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
     cf4:	00646461 	rsbeq	r6, r4, r1, ror #8
     cf8:	15129a01 	ldrne	r9, [r2, #-2561]	; 0xfffff5ff
     cfc:	02000001 	andeq	r0, r0, #1, 0
     d00:	00007091 	muleq	r0, r1, r0
     d04:	06750800 	ldrbteq	r0, [r5], -r0, lsl #16
     d08:	8e010000 	cdphi	0, 0, cr0, cr1, cr0, {0}
     d0c:	000e5a06 	andeq	r5, lr, r6, lsl #20
     d10:	00004620 	andeq	r4, r0, r0, lsr #12
     d14:	be9c0100 	fmllte	f0, f4, f0
     d18:	0f000001 	svceq	0x00000001
     d1c:	000005dc 	ldrdeq	r0, [r0], -ip
     d20:	25218e01 	strcs	r8, [r1, #-3585]!	; 0xfffff1ff
     d24:	02000000 	andeq	r0, r0, #0, 0
     d28:	240f7791 	strcs	r7, [pc], #-1937	; d30 <startup-0x1ffff2d0>
     d2c:	01000001 	tsteq	r0, r1
     d30:	00252f8e 	eoreq	r2, r5, lr, lsl #31
     d34:	91020000 	mrsls	r0, (UNDEF: 2)
     d38:	5d080076 	stcpl	0, cr0, [r8, #-472]	; 0xfffffe28
     d3c:	01000005 	tsteq	r0, r5
     d40:	0e140686 	cfmsub32eq	mvax4, mvfx0, mvfx4, mvfx6
     d44:	00462000 	subeq	r2, r6, r0
     d48:	9c010000 	stcls	0, cr0, [r1], {-0}
     d4c:	000001f3 	strdeq	r0, [r0], -r3
     d50:	646d630b 	strbtvs	r6, [sp], #-779	; 0xfffffcf5
     d54:	24860100 	strcs	r0, [r6], #256	; 0x100
     d58:	00000025 	andeq	r0, r0, r5, lsr #32
     d5c:	0f779102 	svceq	0x00779102
     d60:	00000124 	andeq	r0, r0, r4, lsr #2
     d64:	25318601 	ldrcs	r8, [r1, #-1537]!	; 0xfffff9ff
     d68:	02000000 	andeq	r0, r0, #0, 0
     d6c:	08007691 	stmdaeq	r0, {r0, r4, r7, r9, sl, ip, sp, lr}
     d70:	0000063a 	andeq	r0, r0, sl, lsr r6
     d74:	9e066e01 	cdpls	14, 0, cr6, cr6, cr1, {0}
     d78:	7620000d 	strtvc	r0, [r0], -sp
     d7c:	01000000 	mrseq	r0, (UNDEF: 0)
     d80:	0002369c 	muleq	r2, ip, r6
     d84:	09ea0f00 	stmibeq	sl!, {r8, r9, sl, fp}^
     d88:	6e010000 	cdpvs	0, 0, cr0, cr1, cr0, {0}
     d8c:	0000251c 	andeq	r2, r0, ip, lsl r5
     d90:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
     d94:	0001240f 	andeq	r2, r1, pc, lsl #8
     d98:	2b6e0100 	blcs	1b811a0 <startup-0x1e47ee60>
     d9c:	00000025 	andeq	r0, r0, r5, lsr #32
     da0:	10769102 	rsbsne	r9, r6, r2, lsl #2
     da4:	00000512 	andeq	r0, r0, r2, lsl r5
     da8:	15054501 	strne	r4, [r5, #-1281]	; 0xfffffaff
     dac:	11000001 	tstne	r0, r1
     db0:	cf120000 	svcgt	0x00120000
     db4:	01000005 	tsteq	r0, r5
     db8:	00250969 	eoreq	r0, r5, r9, ror #18
     dbc:	0d740000 	ldcleq	0, cr0, [r4, #-0]
     dc0:	002a2000 	eoreq	r2, sl, r0
     dc4:	9c010000 	stcls	0, cr0, [r1], {-0}
     dc8:	00000260 	andeq	r0, r0, r0, ror #4
     dcc:	0001240f 	andeq	r2, r1, pc, lsl #8
     dd0:	23690100 	cmncs	r9, #0
     dd4:	00000025 	andeq	r0, r0, r5, lsr #32
     dd8:	00779102 	rsbseq	r9, r7, r2, lsl #2
     ddc:	0005e112 	andeq	lr, r5, r2, lsl r1
     de0:	0f520100 	svceq	0x00520100
     de4:	00000031 	andeq	r0, r0, r1, lsr r0
     de8:	20000ce8 	andcs	r0, r0, r8, ror #25
     dec:	0000008c 	andeq	r0, r0, ip, lsl #1
     df0:	02ab9c01 	adceq	r9, fp, #256	; 0x100
     df4:	240f0000 	strcs	r0, [pc], #-0	; dfc <startup-0x1ffff204>
     df8:	01000001 	tsteq	r0, r1
     dfc:	00312a52 	eorseq	r2, r1, r2, asr sl
     e00:	91020000 	mrsls	r0, (UNDEF: 2)
     e04:	0512136f 	ldreq	r1, [r2, #-879]	; 0xfffffc91
     e08:	45010000 	strmi	r0, [r1, #-0]
     e0c:	00011505 	andeq	r1, r1, r5, lsl #10
     e10:	00029b00 	andeq	r9, r2, r0, lsl #22
     e14:	07001100 	streq	r1, [r0, -r0, lsl #2]
     e18:	000006b1 			; <UNDEFINED> instruction: 0x000006b1
     e1c:	31135a01 	tstcc	r3, r1, lsl #20
     e20:	02000000 	andeq	r0, r0, #0, 0
     e24:	08007791 	stmdaeq	r0, {r0, r4, r7, r8, r9, sl, ip, sp, lr}
     e28:	0000061a 	andeq	r0, r0, sl, lsl r6
     e2c:	aa064001 	bge	190e38 <startup-0x1fe6f1c8>
     e30:	3e20000c 	cdpcc	0, 2, cr0, cr0, cr12, {0}
     e34:	01000000 	mrseq	r0, (UNDEF: 0)
     e38:	0002d09c 	muleq	r2, ip, r0
     e3c:	05121000 	ldreq	r1, [r2, #-0]
     e40:	45010000 	strmi	r0, [r1, #-0]
     e44:	00011505 	andeq	r1, r1, r5, lsl #10
     e48:	00001100 	andeq	r1, r0, r0, lsl #2
     e4c:	00064808 	andeq	r4, r6, r8, lsl #16
     e50:	062a0100 	strteq	r0, [sl], -r0, lsl #2
     e54:	20000c50 	andcs	r0, r0, r0, asr ip
     e58:	0000005a 	andeq	r0, r0, sl, asr r0
     e5c:	02f69c01 	rscseq	r9, r6, #256	; 0x100
     e60:	240f0000 	strcs	r0, [pc], #-0	; e68 <startup-0x1ffff198>
     e64:	01000001 	tsteq	r0, r1
     e68:	0025202a 	eoreq	r2, r5, sl, lsr #32
     e6c:	91020000 	mrsls	r0, (UNDEF: 2)
     e70:	f40a0077 	vst4.16	{d0-d3}, [sl :256], r7
     e74:	01000005 	tsteq	r0, r5
     e78:	0c0c0620 	stceq	6, cr0, [ip], {32}
     e7c:	00442000 	subeq	r2, r4, r0
     e80:	9c010000 	stcls	0, cr0, [r1], {-0}
     e84:	00000327 	andeq	r0, r0, r7, lsr #6
     e88:	0100780b 	tsteq	r0, fp, lsl #16
     e8c:	00252320 	eoreq	r2, r5, r0, lsr #6
     e90:	91020000 	mrsls	r0, (UNDEF: 2)
     e94:	0063096f 	rsbeq	r0, r3, pc, ror #18
     e98:	250d2301 	strcs	r2, [sp, #-769]	; 0xfffffcff
     e9c:	02000000 	andeq	r0, r0, #0, 0
     ea0:	0a007791 	beq	1ecec <startup-0x1ffe1314>
     ea4:	00000688 	andeq	r0, r0, r8, lsl #13
     ea8:	bc061501 	cfstr32lt	mvfx1, [r6], {1}
     eac:	5020000b 	eorpl	r0, r0, fp
     eb0:	01000000 	mrseq	r0, (UNDEF: 0)
     eb4:	0003589c 	muleq	r3, ip, r8
     eb8:	00780b00 	rsbseq	r0, r8, r0, lsl #22
     ebc:	25251501 	strcs	r1, [r5, #-1281]!	; 0xfffffaff
     ec0:	02000000 	andeq	r0, r0, #0, 0
     ec4:	63096f91 	movwvs	r6, #40849	; 0x9f91
     ec8:	0d180100 	ldfeqs	f0, [r8, #-0]
     ecc:	00000025 	andeq	r0, r0, r5, lsr #32
     ed0:	00779102 	rsbseq	r9, r7, r2, lsl #2
     ed4:	0006a414 	andeq	sl, r6, r4, lsl r4
     ed8:	06060100 	streq	r0, [r6], -r0, lsl #2
     edc:	20000b60 	andcs	r0, r0, r0, ror #22
     ee0:	0000005c 	andeq	r0, r0, ip, asr r0
     ee4:	2e139c01 	cdpcs	12, 1, cr9, cr3, cr1, {0}
     ee8:	01000000 	mrseq	r0, (UNDEF: 0)
     eec:	01150508 	tsteq	r5, r8, lsl #10
     ef0:	037c0000 	cmneq	ip, #0, 0
     ef4:	00110000 	andseq	r0, r1, r0
     ef8:	00000010 	andeq	r0, r0, r0, lsl r0
     efc:	050a0100 	streq	r0, [sl, #-256]	; 0xffffff00
     f00:	00000115 	andeq	r0, r0, r5, lsl r1
     f04:	00000011 	andeq	r0, r0, r1, lsl r0
     f08:	00000b8f 	andeq	r0, r0, pc, lsl #23
     f0c:	06040004 	streq	r0, [r4], -r4
     f10:	01040000 	mrseq	r0, (UNDEF: 4)
     f14:	00000051 	andeq	r0, r0, r1, asr r0
     f18:	000a7b0c 	andeq	r7, sl, ip, lsl #22
     f1c:	00015d00 	andeq	r5, r1, r0, lsl #26
     f20:	00108400 	andseq	r8, r0, r0, lsl #8
     f24:	00013c20 	andeq	r3, r1, r0, lsr #24
     f28:	000b4900 	andeq	r4, fp, r0, lsl #18
     f2c:	07040200 	streq	r0, [r4, -r0, lsl #4]
     f30:	0000070e 	andeq	r0, r0, lr, lsl #14
     f34:	69050403 	stmdbvs	r5, {r0, r1, sl}
     f38:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
     f3c:	01510601 	cmpeq	r1, r1, lsl #12
     f40:	01020000 	mrseq	r0, (UNDEF: 2)
     f44:	00014f08 	andeq	r4, r1, r8, lsl #30
     f48:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
     f4c:	00000921 	andeq	r0, r0, r1, lsr #18
     f50:	5e070202 	cdppl	2, 0, cr0, cr7, cr2, {0}
     f54:	02000008 	andeq	r0, r0, #8, 0
     f58:	07530504 	ldrbeq	r0, [r3, -r4, lsl #10]
     f5c:	04020000 	streq	r0, [r2], #-0
     f60:	00070907 	andeq	r0, r7, r7, lsl #18
     f64:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
     f68:	0000074e 	andeq	r0, r0, lr, asr #14
     f6c:	04070802 	streq	r0, [r7], #-2050	; 0xfffff7fe
     f70:	04000007 	streq	r0, [r0], #-7
     f74:	000008a1 	andeq	r0, r0, r1, lsr #17
     f78:	77192202 	ldrvc	r2, [r9, -r2, lsl #4]
     f7c:	05000000 	streq	r0, [r0, #-0]
     f80:	00007d04 	andeq	r7, r0, r4, lsl #26
     f84:	09e10600 	stmibeq	r1!, {r9, sl}^
     f88:	ee040000 	cdp	0, 0, cr0, cr4, cr0, {0}
     f8c:	03000008 	movweq	r0, #8
     f90:	004f0e2c 	subeq	r0, pc, ip, lsr #28
     f94:	f6040000 			; <UNDEFINED> instruction: 0xf6040000
     f98:	03000009 	movweq	r0, #9
     f9c:	004f0e72 	subeq	r0, pc, r2, ror lr	; <UNPREDICTABLE>
     fa0:	a9070000 	stmdbge	r7, {}	; <UNPREDICTABLE>
     fa4:	04000008 	streq	r0, [r0], #-8
     fa8:	2517015e 	ldrcs	r0, [r7, #-350]	; 0xfffffea2
     fac:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     fb0:	03a60304 			; <UNDEFINED> instruction: 0x03a60304
     fb4:	000000c9 	andeq	r0, r0, r9, asr #1
     fb8:	00089b09 	andeq	r9, r8, r9, lsl #22
     fbc:	0ca80300 	stceq	3, cr0, [r8]
     fc0:	0000009a 	muleq	r0, sl, r0
     fc4:	00083509 	andeq	r3, r8, r9, lsl #10
     fc8:	13a90300 			; <UNDEFINED> instruction: 0x13a90300
     fcc:	000000c9 	andeq	r0, r0, r9, asr #1
     fd0:	003a0a00 	eorseq	r0, sl, r0, lsl #20
     fd4:	00d90000 	sbcseq	r0, r9, r0
     fd8:	250b0000 	strcs	r0, [fp, #-0]
     fdc:	03000000 	movweq	r0, #0
     fe0:	03080c00 	movweq	r0, #35840	; 0x8c00
     fe4:	00fd09a3 	rscseq	r0, sp, r3, lsr #19
     fe8:	d90d0000 	stmdble	sp, {}	; <UNPREDICTABLE>
     fec:	03000009 	movweq	r0, #9
     ff0:	002c07a5 	eoreq	r0, ip, r5, lsr #15
     ff4:	0d000000 	stceq	0, cr0, [r0, #-0]
     ff8:	000009e8 	andeq	r0, r0, r8, ror #19
     ffc:	a705aa03 	strge	sl, [r5, -r3, lsl #20]
    1000:	04000000 	streq	r0, [r0], #-0
    1004:	09490400 	stmdbeq	r9, {sl}^
    1008:	ab030000 	blge	c1010 <startup-0x1ff3eff0>
    100c:	0000d903 	andeq	sp, r0, r3, lsl #18
    1010:	07fe0400 	ldrbeq	r0, [lr, r0, lsl #8]!
    1014:	af030000 	svcge	0x00030000
    1018:	00006b1b 	andeq	r6, r0, fp, lsl fp
    101c:	05040e00 	streq	r0, [r4, #-3584]	; 0xfffff200
    1020:	00011d04 	andeq	r1, r1, r4, lsl #26
    1024:	08010200 	stmdaeq	r1, {r9}
    1028:	00000158 	andeq	r0, r0, r8, asr r1
    102c:	00011d0f 	andeq	r1, r1, pc, lsl #26
    1030:	0a400400 	beq	1002038 <startup-0x1effdfc8>
    1034:	16050000 	strne	r0, [r5], -r0
    1038:	00005619 	andeq	r5, r0, r9, lsl r6
    103c:	080f1000 	stmdaeq	pc, {ip}	; <UNPREDICTABLE>
    1040:	05180000 	ldreq	r0, [r8, #-0]
    1044:	018f082f 	orreq	r0, pc, pc, lsr #16
    1048:	6a0d0000 	bvs	341050 <startup-0x1fcbefb0>
    104c:	05000009 	streq	r0, [r0, #-9]
    1050:	018f1331 	orreq	r1, pc, r1, lsr r3	; <UNPREDICTABLE>
    1054:	11000000 	mrsne	r0, (UNDEF: 0)
    1058:	05006b5f 	streq	r6, [r0, #-2911]	; 0xfffff4a1
    105c:	002c0732 	eoreq	r0, ip, r2, lsr r7
    1060:	0d040000 	stceq	0, cr0, [r4, #-0]
    1064:	000009c4 	andeq	r0, r0, r4, asr #19
    1068:	2c0b3205 	sfmcs	f3, 4, [fp], {5}
    106c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    1070:	0007f80d 	andeq	pc, r7, sp, lsl #16
    1074:	14320500 	ldrtne	r0, [r2], #-1280	; 0xfffffb00
    1078:	0000002c 	andeq	r0, r0, ip, lsr #32
    107c:	0aba0d0c 	beq	fee844b4 <rear+0xdee80f04>
    1080:	32050000 	andcc	r0, r5, #0, 0
    1084:	00002c1b 	andeq	r2, r0, fp, lsl ip
    1088:	5f111000 	svcpl	0x00111000
    108c:	33050078 	movwcc	r0, #20600	; 0x5078
    1090:	0001950b 	andeq	r9, r1, fp, lsl #10
    1094:	05001400 	streq	r1, [r0, #-1024]	; 0xfffffc00
    1098:	00013504 	andeq	r3, r1, r4, lsl #10
    109c:	01290a00 			; <UNDEFINED> instruction: 0x01290a00
    10a0:	01a50000 			; <UNDEFINED> instruction: 0x01a50000
    10a4:	250b0000 	strcs	r0, [fp, #-0]
    10a8:	00000000 	andeq	r0, r0, r0
    10ac:	08301000 	ldmdaeq	r0!, {ip}
    10b0:	05240000 	streq	r0, [r4, #-0]!
    10b4:	02280837 	eoreq	r0, r8, #3604480	; 0x370000
    10b8:	450d0000 	strmi	r0, [sp, #-0]
    10bc:	05000007 	streq	r0, [r0, #-7]
    10c0:	002c0939 	eoreq	r0, ip, r9, lsr r9
    10c4:	0d000000 	stceq	0, cr0, [r0, #-0]
    10c8:	000009fe 	strdeq	r0, [r0], -lr
    10cc:	2c093a05 			; <UNDEFINED> instruction: 0x2c093a05
    10d0:	04000000 	streq	r0, [r0], #-0
    10d4:	0007680d 	andeq	r6, r7, sp, lsl #16
    10d8:	093b0500 	ldmdbeq	fp!, {r8, sl}
    10dc:	0000002c 	andeq	r0, r0, ip, lsr #32
    10e0:	0b2a0d08 	bleq	a84508 <startup-0x1f57baf8>
    10e4:	3c050000 	stccc	0, cr0, [r5], {-0}
    10e8:	00002c09 	andeq	r2, r0, r9, lsl #24
    10ec:	d20d0c00 	andle	r0, sp, #0, 24
    10f0:	05000008 	streq	r0, [r0, #-8]
    10f4:	002c093d 	eoreq	r0, ip, sp, lsr r9
    10f8:	0d100000 	ldceq	0, cr0, [r0, #-0]
    10fc:	000008b8 			; <UNDEFINED> instruction: 0x000008b8
    1100:	2c093e05 	stccs	14, cr3, [r9], {5}
    1104:	14000000 	strne	r0, [r0], #-0
    1108:	000abf0d 	andeq	fp, sl, sp, lsl #30
    110c:	093f0500 	ldmdbeq	pc!, {r8, sl}	; <UNPREDICTABLE>
    1110:	0000002c 	andeq	r0, r0, ip, lsr #32
    1114:	092b0d18 	stmdbeq	fp!, {r3, r4, r8, sl, fp}
    1118:	40050000 	andmi	r0, r5, r0
    111c:	00002c09 	andeq	r2, r0, r9, lsl #24
    1120:	f10d1c00 			; <UNDEFINED> instruction: 0xf10d1c00
    1124:	0500000a 	streq	r0, [r0, #-10]
    1128:	002c0941 	eoreq	r0, ip, r1, asr #18
    112c:	00200000 	eoreq	r0, r0, r0
    1130:	00077712 	andeq	r7, r7, r2, lsl r7
    1134:	05010800 	streq	r0, [r1, #-2048]	; 0xfffff800
    1138:	026d084a 	rsbeq	r0, sp, #4849664	; 0x4a0000
    113c:	eb0d0000 	bl	341144 <startup-0x1fcbeebc>
    1140:	05000007 	streq	r0, [r0, #-7]
    1144:	026d0a4b 	rsbeq	r0, sp, #307200	; 0x4b000
    1148:	0d000000 	stceq	0, cr0, [r0, #-0]
    114c:	000006b8 			; <UNDEFINED> instruction: 0x000006b8
    1150:	6d094c05 	stcvs	12, cr4, [r9, #-20]	; 0xffffffec
    1154:	80000002 	andhi	r0, r0, r2
    1158:	000a3213 	andeq	r3, sl, r3, lsl r2
    115c:	0a4e0500 	beq	1382564 <startup-0x1ec7da9c>
    1160:	00000129 	andeq	r0, r0, r9, lsr #2
    1164:	a4130100 	ldrge	r0, [r3], #-256	; 0xffffff00
    1168:	05000007 	streq	r0, [r0, #-7]
    116c:	01290a51 			; <UNDEFINED> instruction: 0x01290a51
    1170:	01040000 	mrseq	r0, (UNDEF: 4)
    1174:	01150a00 	tsteq	r5, r0, lsl #20
    1178:	027d0000 	rsbseq	r0, sp, #0, 0
    117c:	250b0000 	strcs	r0, [fp, #-0]
    1180:	1f000000 	svcne	0x00000000
    1184:	08db1200 	ldmeq	fp, {r9, ip}^
    1188:	01900000 	orrseq	r0, r0, r0
    118c:	c0085d05 	andgt	r5, r8, r5, lsl #26
    1190:	0d000002 	stceq	0, cr0, [r0, #-8]
    1194:	0000096a 	andeq	r0, r0, sl, ror #18
    1198:	c0125e05 	andsgt	r5, r2, r5, lsl #28
    119c:	00000002 	andeq	r0, r0, r2
    11a0:	0009890d 	andeq	r8, r9, sp, lsl #18
    11a4:	065f0500 	ldrbeq	r0, [pc], -r0, lsl #10
    11a8:	0000002c 	andeq	r0, r0, ip, lsr #32
    11ac:	07f30d04 	ldrbeq	r0, [r3, r4, lsl #26]!
    11b0:	61050000 	mrsvs	r0, (UNDEF: 5)
    11b4:	0002c609 	andeq	ip, r2, r9, lsl #12
    11b8:	770d0800 	strvc	r0, [sp, -r0, lsl #16]
    11bc:	05000007 	streq	r0, [r0, #-7]
    11c0:	02281e62 	eoreq	r1, r8, #1568	; 0x620
    11c4:	00880000 	addeq	r0, r8, r0
    11c8:	027d0405 	rsbseq	r0, sp, #83886080	; 0x5000000
    11cc:	d60a0000 	strle	r0, [sl], -r0
    11d0:	d6000002 	strle	r0, [r0], -r2
    11d4:	0b000002 	bleq	11e4 <startup-0x1fffee1c>
    11d8:	00000025 	andeq	r0, r0, r5, lsr #32
    11dc:	0405001f 	streq	r0, [r5], #-31	; 0xffffffe1
    11e0:	000002dc 	ldrdeq	r0, [r0], -ip
    11e4:	09351014 	ldmdbeq	r5!, {r2, r4, ip}
    11e8:	05080000 	streq	r0, [r8, #-0]
    11ec:	03050875 	movweq	r0, #22645	; 0x5875
    11f0:	620d0000 	andvs	r0, sp, #0, 0
    11f4:	05000007 	streq	r0, [r0, #-7]
    11f8:	03051176 	movweq	r1, #20854	; 0x5176
    11fc:	0d000000 	stceq	0, cr0, [r0, #-0]
    1200:	000006cb 	andeq	r0, r0, fp, asr #13
    1204:	2c067705 	stccs	7, cr7, [r6], {5}
    1208:	04000000 	streq	r0, [r0], #-0
    120c:	3a040500 	bcc	102614 <startup-0x1fefd9ec>
    1210:	10000000 	andne	r0, r0, r0
    1214:	00000954 	andeq	r0, r0, r4, asr r9
    1218:	08b50568 	ldmeq	r5!, {r3, r5, r6, r8, sl}
    121c:	0000044e 	andeq	r0, r0, lr, asr #8
    1220:	00705f11 	rsbseq	r5, r0, r1, lsl pc
    1224:	0512b605 	ldreq	fp, [r2, #-1541]	; 0xfffff9fb
    1228:	00000003 	andeq	r0, r0, r3
    122c:	00725f11 	rsbseq	r5, r2, r1, lsl pc
    1230:	2c07b705 	stccs	7, cr11, [r7], {5}
    1234:	04000000 	streq	r0, [r0], #-0
    1238:	00775f11 	rsbseq	r5, r7, r1, lsl pc
    123c:	2c07b805 	stccs	8, cr11, [r7], {5}
    1240:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    1244:	00079d0d 	andeq	r9, r7, sp, lsl #26
    1248:	09b90500 	ldmibeq	r9!, {r8, sl}
    124c:	00000041 	andeq	r0, r0, r1, asr #32
    1250:	084c0d0c 	stmdaeq	ip, {r2, r3, r8, sl, fp}^
    1254:	ba050000 	blt	14125c <startup-0x1febeda4>
    1258:	00004109 	andeq	r4, r0, r9, lsl #2
    125c:	5f110e00 	svcpl	0x00110e00
    1260:	05006662 	streq	r6, [r0, #-1634]	; 0xfffff99e
    1264:	02dd11bb 	sbcseq	r1, sp, #-1073741778	; 0xc000002e
    1268:	0d100000 	ldceq	0, cr0, [r0, #-0]
    126c:	0000071b 	andeq	r0, r0, fp, lsl r7
    1270:	2c07bc05 	stccs	12, cr11, [r7], {5}
    1274:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    1278:	0007850d 	andeq	r8, r7, sp, lsl #10
    127c:	0ac30500 	beq	ff0c2684 <rear+0xdf0bf0d4>
    1280:	00000115 	andeq	r0, r0, r5, lsl r1
    1284:	05e80d1c 	strbeq	r0, [r8, #3356]!	; 0xd1c
    1288:	c5050000 	strgt	r0, [r5, #-0]
    128c:	0005c01d 	andeq	ip, r5, sp, lsl r0
    1290:	410d2000 	mrsmi	r2, (UNDEF: 13)
    1294:	05000006 	streq	r0, [r0, #-6]
    1298:	05ea1dc7 	strbeq	r1, [sl, #3527]!	; 0xdc7
    129c:	0d240000 	stceq	0, cr0, [r4, #-0]
    12a0:	000009f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    12a4:	0e0dca05 	vmlaeq.f32	s24, s26, s10
    12a8:	28000006 	stmdacs	r0, {r1, r2}
    12ac:	000b0b0d 	andeq	r0, fp, sp, lsl #22
    12b0:	09cb0500 	stmibeq	fp, {r8, sl}^
    12b4:	00000628 	andeq	r0, r0, r8, lsr #12
    12b8:	755f112c 	ldrbvc	r1, [pc, #-300]	; 1194 <startup-0x1fffee6c>
    12bc:	ce050062 	cdpgt	0, 0, cr0, cr5, cr2, {3}
    12c0:	0002dd11 	andeq	sp, r2, r1, lsl sp
    12c4:	5f113000 	svcpl	0x00113000
    12c8:	05007075 	streq	r7, [r0, #-117]	; 0xffffff8b
    12cc:	030512cf 	movweq	r1, #21199	; 0x52cf
    12d0:	11380000 	teqne	r8, r0
    12d4:	0072755f 	rsbseq	r7, r2, pc, asr r5
    12d8:	2c07d005 	stccs	0, cr13, [r7], {5}
    12dc:	3c000000 	stccc	0, cr0, [r0], {-0}
    12e0:	00075c0d 	andeq	r5, r7, sp, lsl #24
    12e4:	11d30500 	bicsne	r0, r3, r0, lsl #10
    12e8:	0000062e 	andeq	r0, r0, lr, lsr #12
    12ec:	0ae30d40 	beq	ff8c47f4 <rear+0xdf8c1244>
    12f0:	d4050000 	strle	r0, [r5], #-0
    12f4:	00063e11 	andeq	r3, r6, r1, lsl lr
    12f8:	5f114300 	svcpl	0x00114300
    12fc:	0500626c 	streq	r6, [r0, #-620]	; 0xfffffd94
    1300:	02dd11d7 	sbcseq	r1, sp, #-1073741771	; 0xc0000035
    1304:	0d440000 	stcleq	0, cr0, [r4, #-0]
    1308:	000007b3 			; <UNDEFINED> instruction: 0x000007b3
    130c:	2c07da05 			; <UNDEFINED> instruction: 0x2c07da05
    1310:	4c000000 	stcmi	0, cr0, [r0], {-0}
    1314:	0007c40d 	andeq	ip, r7, sp, lsl #8
    1318:	0adb0500 	beq	ff6c2720 <rear+0xdf6bf170>
    131c:	00000082 	andeq	r0, r0, r2, lsl #1
    1320:	05db0d50 	ldrbeq	r0, [fp, #3408]	; 0xd50
    1324:	de050000 	cdple	0, 0, cr0, cr5, cr0, {0}
    1328:	00046c12 	andeq	r6, r4, r2, lsl ip
    132c:	e20d5400 	and	r5, sp, #0, 8
    1330:	05000009 	streq	r0, [r0, #-9]
    1334:	01090ce2 	smlatteq	r9, r2, ip, r0
    1338:	0d580000 	ldcleq	0, cr0, [r8, #-0]
    133c:	0000095c 	andeq	r0, r0, ip, asr r9
    1340:	fd0ee405 	stc2	4, cr14, [lr, #-20]	; 0xffffffec
    1344:	5c000000 	stcpl	0, cr0, [r0], {-0}
    1348:	0008b00d 	andeq	fp, r8, sp
    134c:	09e50500 	stmibeq	r5!, {r8, sl}^
    1350:	0000002c 	andeq	r0, r0, ip, lsr #32
    1354:	2c150064 	ldccs	0, cr0, [r5], {100}	; 0x64
    1358:	6c000000 	stcvs	0, cr0, [r0], {-0}
    135c:	16000004 	strne	r0, [r0], -r4
    1360:	0000046c 	andeq	r0, r0, ip, ror #8
    1364:	00011516 	andeq	r1, r1, r6, lsl r5
    1368:	01171600 	tsteq	r7, r0, lsl #12
    136c:	2c160000 	ldccs	0, cr0, [r6], {-0}
    1370:	00000000 	andeq	r0, r0, r0
    1374:	04770405 	ldrbteq	r0, [r7], #-1029	; 0xfffffbfb
    1378:	6c0f0000 	stcvs	0, cr0, [pc], {-0}
    137c:	17000004 	strne	r0, [r0, -r4]
    1380:	000009cc 	andeq	r0, r0, ip, asr #19
    1384:	60050428 	andvs	r0, r5, r8, lsr #8
    1388:	05c00802 	strbeq	r0, [r0, #2050]	; 0x802
    138c:	1a180000 	bne	601394 <startup-0x1f9fec6c>
    1390:	05000009 	streq	r0, [r0, #-9]
    1394:	2c070262 	sfmcs	f0, 4, [r7], {98}	; 0x62
    1398:	00000000 	andeq	r0, r0, r0
    139c:	0007ac18 	andeq	sl, r7, r8, lsl ip
    13a0:	02670500 	rsbeq	r0, r7, #0, 10
    13a4:	00069a0b 	andeq	r9, r6, fp, lsl #20
    13a8:	3c180400 	cfldrscc	mvf0, [r8], {-0}
    13ac:	05000008 	streq	r0, [r0, #-8]
    13b0:	9a140267 	bls	501d54 <startup-0x1fafe2ac>
    13b4:	08000006 	stmdaeq	r0, {r1, r2}
    13b8:	00080718 	andeq	r0, r8, r8, lsl r7
    13bc:	02670500 	rsbeq	r0, r7, #0, 10
    13c0:	00069a1e 	andeq	r9, r6, lr, lsl sl
    13c4:	84180c00 	ldrhi	r0, [r8], #-3072	; 0xfffff400
    13c8:	05000009 	streq	r0, [r0, #-9]
    13cc:	2c080269 	sfmcs	f0, 4, [r8], {105}	; 0x69
    13d0:	10000000 	andne	r0, r0, r0
    13d4:	0006d918 	andeq	sp, r6, r8, lsl r9
    13d8:	026a0500 	rsbeq	r0, sl, #0, 10
    13dc:	00089a08 	andeq	r9, r8, r8, lsl #20
    13e0:	ab181400 	blge	6063e8 <startup-0x1f9f9c18>
    13e4:	05000009 	streq	r0, [r0, #-9]
    13e8:	2c07026d 	sfmcs	f0, 4, [r7], {109}	; 0x6d
    13ec:	30000000 	andcc	r0, r0, r0
    13f0:	00099918 	andeq	r9, r9, r8, lsl r9
    13f4:	026e0500 	rsbeq	r0, lr, #0, 10
    13f8:	0008af16 	andeq	sl, r8, r6, lsl pc
    13fc:	e3183400 	tst	r8, #0, 8
    1400:	05000008 	streq	r0, [r0, #-8]
    1404:	2c070270 	sfmcs	f0, 4, [r7], {112}	; 0x70
    1408:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    140c:	0009a118 	andeq	sl, r9, r8, lsl r1
    1410:	02720500 	rsbseq	r0, r2, #0, 10
    1414:	0008c00a 	andeq	ip, r8, sl
    1418:	93183c00 	tstls	r8, #0, 24
    141c:	05000008 	streq	r0, [r0, #-8]
    1420:	8f130275 	svchi	0x00130275
    1424:	40000001 	andmi	r0, r0, r1
    1428:	00082618 	andeq	r2, r8, r8, lsl r6
    142c:	02760500 	rsbseq	r0, r6, #0, 10
    1430:	00002c07 	andeq	r2, r0, r7, lsl #24
    1434:	25184400 	ldrcs	r4, [r8, #-1024]	; 0xfffffc00
    1438:	0500000b 	streq	r0, [r0, #-11]
    143c:	8f130277 	svchi	0x00130277
    1440:	48000001 	stmdami	r0, {r0}
    1444:	0008f518 	andeq	pc, r8, r8, lsl r5	; <UNPREDICTABLE>
    1448:	02780500 	rsbseq	r0, r8, #0, 10
    144c:	0008c614 	andeq	ip, r8, r4, lsl r6
    1450:	44184c00 	ldrmi	r4, [r8], #-3072	; 0xfffff400
    1454:	05000008 	streq	r0, [r0, #-8]
    1458:	2c07027b 	sfmcs	f0, 4, [r7], {123}	; 0x7b
    145c:	50000000 	andpl	r0, r0, r0
    1460:	0007bc18 	andeq	fp, r7, r8, lsl ip
    1464:	027c0500 	rsbseq	r0, ip, #0, 10
    1468:	00011709 	andeq	r1, r1, r9, lsl #14
    146c:	13185400 	tstne	r8, #0, 8
    1470:	05000009 	streq	r0, [r0, #-9]
    1474:	7507029f 	strvc	r0, [r7, #-671]	; 0xfffffd61
    1478:	58000008 	stmdapl	r0, {r3}
    147c:	0008db19 	andeq	sp, r8, r9, lsl fp
    1480:	02a30500 	adceq	r0, r3, #0, 10
    1484:	0002c013 	andeq	ip, r2, r3, lsl r0
    1488:	19014800 	stmdbne	r1, {fp, lr}
    148c:	00000871 	andeq	r0, r0, r1, ror r8
    1490:	1202a405 	andne	sl, r2, #83886080	; 0x5000000
    1494:	0000027d 	andeq	r0, r0, sp, ror r2
    1498:	d919014c 	ldmdble	r9, {r2, r3, r6, r8}
    149c:	0500000a 	streq	r0, [r0, #-10]
    14a0:	d70c02a8 	strle	r0, [ip, -r8, lsr #5]
    14a4:	dc000008 	stcle	0, cr0, [r0], {8}
    14a8:	078d1902 	streq	r1, [sp, r2, lsl #18]
    14ac:	ad050000 	stcge	0, cr0, [r5, #-0]
    14b0:	065b1002 	ldrbeq	r1, [fp], -r2
    14b4:	02e00000 	rsceq	r0, r0, #0, 0
    14b8:	00077219 	andeq	r7, r7, r9, lsl r2
    14bc:	02af0500 	adceq	r0, pc, #0, 10
    14c0:	0008e30a 	andeq	lr, r8, sl, lsl #6
    14c4:	0002ec00 	andeq	lr, r2, r0, lsl #24
    14c8:	044e0405 	strbeq	r0, [lr], #-1029	; 0xfffffbfb
    14cc:	2c150000 	ldccs	0, cr0, [r5], {-0}
    14d0:	e4000000 	str	r0, [r0], #-0
    14d4:	16000005 	strne	r0, [r0], -r5
    14d8:	0000046c 	andeq	r0, r0, ip, ror #8
    14dc:	00011516 	andeq	r1, r1, r6, lsl r5
    14e0:	05e41600 	strbeq	r1, [r4, #1536]!	; 0x600
    14e4:	2c160000 	ldccs	0, cr0, [r6], {-0}
    14e8:	00000000 	andeq	r0, r0, r0
    14ec:	01240405 			; <UNDEFINED> instruction: 0x01240405
    14f0:	04050000 	streq	r0, [r5], #-0
    14f4:	000005c6 	andeq	r0, r0, r6, asr #11
    14f8:	00008e15 	andeq	r8, r0, r5, lsl lr
    14fc:	00060e00 	andeq	r0, r6, r0, lsl #28
    1500:	046c1600 	strbteq	r1, [ip], #-1536	; 0xfffffa00
    1504:	15160000 	ldrne	r0, [r6, #-0]
    1508:	16000001 	strne	r0, [r0], -r1
    150c:	0000008e 	andeq	r0, r0, lr, lsl #1
    1510:	00002c16 	andeq	r2, r0, r6, lsl ip
    1514:	04050000 	streq	r0, [r5], #-0
    1518:	000005f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    151c:	00002c15 	andeq	r2, r0, r5, lsl ip
    1520:	00062800 	andeq	r2, r6, r0, lsl #16
    1524:	046c1600 	strbteq	r1, [ip], #-1536	; 0xfffffa00
    1528:	15160000 	ldrne	r0, [r6, #-0]
    152c:	00000001 	andeq	r0, r0, r1
    1530:	06140405 	ldreq	r0, [r4], -r5, lsl #8
    1534:	3a0a0000 	bcc	28153c <startup-0x1fd7eac4>
    1538:	3e000000 	cdpcc	0, 0, cr0, cr0, cr0, {0}
    153c:	0b000006 	bleq	155c <startup-0x1fffeaa4>
    1540:	00000025 	andeq	r0, r0, r5, lsr #32
    1544:	3a0a0002 	bcc	281554 <startup-0x1fd7eaac>
    1548:	4e000000 	cdpmi	0, 0, cr0, cr0, cr0, {0}
    154c:	0b000006 	bleq	156c <startup-0x1fffea94>
    1550:	00000025 	andeq	r0, r0, r5, lsr #32
    1554:	42070000 	andmi	r0, r7, #0, 0
    1558:	05000009 	streq	r0, [r0, #-9]
    155c:	0b1a011f 	bleq	6819e0 <startup-0x1f97e620>
    1560:	1a000003 	bne	1574 <startup-0x1fffea8c>
    1564:	00000ac9 	andeq	r0, r0, r9, asr #21
    1568:	0123050c 			; <UNDEFINED> instruction: 0x0123050c
    156c:	00069408 	andeq	r9, r6, r8, lsl #8
    1570:	096a1800 	stmdbeq	sl!, {fp, ip}^
    1574:	25050000 	strcs	r0, [r5, #-0]
    1578:	06941101 	ldreq	r1, [r4], r1, lsl #2
    157c:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    1580:	00000852 	andeq	r0, r0, r2, asr r8
    1584:	07012605 	streq	r2, [r1, -r5, lsl #12]
    1588:	0000002c 	andeq	r0, r0, ip, lsr #32
    158c:	093c1804 	ldmdbeq	ip!, {r2, fp, ip}
    1590:	27050000 	strcs	r0, [r5, -r0]
    1594:	069a0b01 	ldreq	r0, [sl], r1, lsl #22
    1598:	00080000 	andeq	r0, r8, r0
    159c:	065b0405 	ldrbeq	r0, [fp], -r5, lsl #8
    15a0:	04050000 	streq	r0, [r5], #-0
    15a4:	0000064e 	andeq	r0, r0, lr, asr #12
    15a8:	0006d11a 	andeq	sp, r6, sl, lsl r1
    15ac:	3f050e00 	svccc	0x00050e00
    15b0:	06d90801 	ldrbeq	r0, [r9], r1, lsl #16
    15b4:	d3180000 	tstle	r8, #0, 0
    15b8:	05000009 	streq	r0, [r0, #-9]
    15bc:	d9120140 	ldmdble	r2, {r6, r8}
    15c0:	00000006 	andeq	r0, r0, r6
    15c4:	000a1018 	andeq	r1, sl, r8, lsl r0
    15c8:	01410500 	cmpeq	r1, r0, lsl #10
    15cc:	0006d912 	andeq	sp, r6, r2, lsl r9
    15d0:	3b180600 	blcc	602dd8 <startup-0x1f9fd228>
    15d4:	0500000a 	streq	r0, [r0, #-10]
    15d8:	48120142 	ldmdami	r2, {r1, r6, r8}
    15dc:	0c000000 	stceq	0, cr0, [r0], {-0}
    15e0:	00480a00 	subeq	r0, r8, r0, lsl #20
    15e4:	06e90000 	strbteq	r0, [r9], r0
    15e8:	250b0000 	strcs	r0, [fp, #-0]
    15ec:	02000000 	andeq	r0, r0, #0, 0
    15f0:	05d01b00 	ldrbeq	r1, [r0, #2816]	; 0xb00
    15f4:	fe070280 	cdp2	2, 0, cr0, cr7, cr0, {4}
    15f8:	18000007 	stmdane	r0, {r0, r1, r2}
    15fc:	00000a6e 	andeq	r0, r0, lr, ror #20
    1600:	18028205 	stmdane	r2, {r0, r2, r9, pc}
    1604:	00000025 	andeq	r0, r0, r5, lsr #32
    1608:	0a161800 	beq	587610 <startup-0x1fa789f0>
    160c:	83050000 	movwhi	r0, #20480	; 0x5000
    1610:	01171202 	tsteq	r7, r2, lsl #4
    1614:	18040000 	stmdane	r4, {}	; <UNPREDICTABLE>
    1618:	00000886 	andeq	r0, r0, r6, lsl #17
    161c:	10028405 	andne	r8, r2, r5, lsl #8
    1620:	000007fe 	strdeq	r0, [r0], -lr
    1624:	0afc1808 	beq	fff0764c <rear+0xdff0409c>
    1628:	85050000 	strhi	r0, [r5, #-0]
    162c:	01a51702 			; <UNDEFINED> instruction: 0x01a51702
    1630:	18240000 	stmdane	r4!, {}	; <UNPREDICTABLE>
    1634:	00000817 	andeq	r0, r0, r7, lsl r8
    1638:	0f028605 	svceq	0x00028605
    163c:	0000002c 	andeq	r0, r0, ip, lsr #32
    1640:	09651848 	stmdbeq	r5!, {r3, r6, fp, ip}^
    1644:	87050000 	strhi	r0, [r5, -r0]
    1648:	00642c02 	rsbeq	r2, r4, r2, lsl #24
    164c:	18500000 	ldmdane	r0, {}^	; <UNPREDICTABLE>
    1650:	00000b12 	andeq	r0, r0, r2, lsl fp
    1654:	1a028805 	bne	a3670 <startup-0x1ff5c990>
    1658:	000006a0 	andeq	r0, r0, r0, lsr #13
    165c:	09771858 	ldmdbeq	r7!, {r3, r4, r6, fp, ip}^
    1660:	89050000 	stmdbhi	r5, {}	; <UNPREDICTABLE>
    1664:	00fd1602 	rscseq	r1, sp, r2, lsl #12
    1668:	18680000 	stmdane	r8!, {}^	; <UNPREDICTABLE>
    166c:	00000b17 	andeq	r0, r0, r7, lsl fp
    1670:	16028a05 	strne	r8, [r2], -r5, lsl #20
    1674:	000000fd 	strdeq	r0, [r0], -sp
    1678:	08ff1870 	ldmeq	pc!, {r4, r5, r6, fp, ip}^	; <UNPREDICTABLE>
    167c:	8b050000 	blhi	141684 <startup-0x1febe97c>
    1680:	00fd1602 	rscseq	r1, sp, r2, lsl #12
    1684:	18780000 	ldmdane	r8!, {}^	; <UNPREDICTABLE>
    1688:	00000acf 	andeq	r0, r0, pc, asr #21
    168c:	10028c05 	andne	r8, r2, r5, lsl #24
    1690:	0000080e 	andeq	r0, r0, lr, lsl #16
    1694:	087a1880 	ldmdaeq	sl!, {r7, fp, ip}^
    1698:	8d050000 	stchi	0, cr0, [r5, #-0]
    169c:	081e1002 	ldmdaeq	lr, {r1, ip}
    16a0:	18880000 	stmne	r8, {}	; <UNPREDICTABLE>
    16a4:	00000a48 	andeq	r0, r0, r8, asr #20
    16a8:	0f028e05 	svceq	0x00028e05
    16ac:	0000002c 	andeq	r0, r0, ip, lsr #32
    16b0:	07dd18a0 	ldrbeq	r1, [sp, r0, lsr #17]
    16b4:	8f050000 	svchi	0x00050000
    16b8:	00fd1602 	rscseq	r1, sp, r2, lsl #12
    16bc:	18a40000 	stmiane	r4!, {}	; <UNPREDICTABLE>
    16c0:	00000736 	andeq	r0, r0, r6, lsr r7
    16c4:	16029005 	strne	r9, [r2], -r5
    16c8:	000000fd 	strdeq	r0, [r0], -sp
    16cc:	07cc18ac 	strbeq	r1, [ip, ip, lsr #17]
    16d0:	91050000 	mrsls	r0, (UNDEF: 5)
    16d4:	00fd1602 	rscseq	r1, sp, r2, lsl #12
    16d8:	18b40000 	ldmne	r4!, {}	; <UNPREDICTABLE>
    16dc:	000006e4 	andeq	r0, r0, r4, ror #13
    16e0:	16029205 	strne	r9, [r2], -r5, lsl #4
    16e4:	000000fd 	strdeq	r0, [r0], -sp
    16e8:	06f318bc 			; <UNDEFINED> instruction: 0x06f318bc
    16ec:	93050000 	movwls	r0, #20480	; 0x5000
    16f0:	00fd1602 	rscseq	r1, sp, r2, lsl #12
    16f4:	18c40000 	stmiane	r4, {}^	; <UNPREDICTABLE>
    16f8:	00000918 	andeq	r0, r0, r8, lsl r9
    16fc:	08029405 	stmdaeq	r2, {r0, r2, sl, ip, pc}
    1700:	0000002c 	andeq	r0, r0, ip, lsr #32
    1704:	1d0a00cc 	stcne	0, cr0, [sl, #-816]	; 0xfffffcd0
    1708:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
    170c:	0b000008 	bleq	1734 <startup-0x1fffe8cc>
    1710:	00000025 	andeq	r0, r0, r5, lsr #32
    1714:	1d0a0019 	stcne	0, cr0, [sl, #-100]	; 0xffffff9c
    1718:	1e000001 	cdpne	0, 0, cr0, cr0, cr1, {0}
    171c:	0b000008 	bleq	1744 <startup-0x1fffe8bc>
    1720:	00000025 	andeq	r0, r0, r5, lsr #32
    1724:	1d0a0007 	stcne	0, cr0, [sl, #-28]	; 0xffffffe4
    1728:	2e000001 	cdpcs	0, 0, cr0, cr0, cr1, {0}
    172c:	0b000008 	bleq	1754 <startup-0x1fffe8ac>
    1730:	00000025 	andeq	r0, r0, r5, lsr #32
    1734:	f01b0017 			; <UNDEFINED> instruction: 0xf01b0017
    1738:	07029905 	streq	r9, [r2, -r5, lsl #18]
    173c:	00000855 	andeq	r0, r0, r5, asr r8
    1740:	0008cb18 	andeq	ip, r8, r8, lsl fp
    1744:	029c0500 	addseq	r0, ip, #0, 10
    1748:	0008551b 	andeq	r5, r8, fp, lsl r5
    174c:	c2180000 	andsgt	r0, r8, #0, 0
    1750:	05000008 	streq	r0, [r0, #-8]
    1754:	6518029d 	ldrvs	r0, [r8, #-669]	; 0xfffffd63
    1758:	78000008 	stmdavc	r0, {r3}
    175c:	03050a00 	movweq	r0, #23040	; 0x5a00
    1760:	08650000 	stmdaeq	r5!, {}^	; <UNPREDICTABLE>
    1764:	250b0000 	strcs	r0, [fp, #-0]
    1768:	1d000000 	stcne	0, cr0, [r0, #-0]
    176c:	00250a00 	eoreq	r0, r5, r0, lsl #20
    1770:	08750000 	ldmdaeq	r5!, {}^	; <UNPREDICTABLE>
    1774:	250b0000 	strcs	r0, [fp, #-0]
    1778:	1d000000 	stcne	0, cr0, [r0, #-0]
    177c:	05f01c00 	ldrbeq	r1, [r0, #3072]!	; 0xc00
    1780:	9a03027e 	bls	c2180 <startup-0x1ff3de80>
    1784:	1d000008 	stcne	0, cr0, [r0, #-32]	; 0xffffffe0
    1788:	000009cc 	andeq	r0, r0, ip, asr #19
    178c:	0b029505 	bleq	a6ba8 <startup-0x1ff59458>
    1790:	000006e9 	andeq	r0, r0, r9, ror #13
    1794:	000ae91d 	andeq	lr, sl, sp, lsl r9
    1798:	029e0500 	addseq	r0, lr, #0, 10
    179c:	00082e0b 	andeq	r2, r8, fp, lsl #28
    17a0:	1d0a0000 	stcne	0, cr0, [sl, #-0]
    17a4:	aa000001 	bge	17b0 <startup-0x1fffe850>
    17a8:	0b000008 	bleq	17d0 <startup-0x1fffe830>
    17ac:	00000025 	andeq	r0, r0, r5, lsr #32
    17b0:	2b060018 	blcs	181818 <startup-0x1fe7e7e8>
    17b4:	05000007 	streq	r0, [r0, #-7]
    17b8:	0008aa04 	andeq	sl, r8, r4, lsl #20
    17bc:	08c01e00 	stmiaeq	r0, {r9, sl, fp, ip}^
    17c0:	6c160000 	ldcvs	0, cr0, [r6], {-0}
    17c4:	00000004 	andeq	r0, r0, r4
    17c8:	08b50405 	ldmeq	r5!, {r0, r2, sl}
    17cc:	04050000 	streq	r0, [r5], #-0
    17d0:	0000018f 	andeq	r0, r0, pc, lsl #3
    17d4:	0008d71e 	andeq	sp, r8, lr, lsl r7
    17d8:	002c1600 	eoreq	r1, ip, r0, lsl #12
    17dc:	05000000 	streq	r0, [r0, #-0]
    17e0:	0008dd04 	andeq	sp, r8, r4, lsl #26
    17e4:	cc040500 	cfstr32gt	mvfx0, [r4], {-0}
    17e8:	0a000008 	beq	1810 <startup-0x1fffe7f0>
    17ec:	0000064e 	andeq	r0, r0, lr, asr #12
    17f0:	000008f3 	strdeq	r0, [r0], -r3
    17f4:	0000250b 	andeq	r2, r0, fp, lsl #10
    17f8:	1f000200 	svcne	0x00000200
    17fc:	00000a62 	andeq	r0, r0, r2, ror #20
    1800:	17032e05 	strne	r2, [r3, -r5, lsl #28]
    1804:	0000046c 	andeq	r0, r0, ip, ror #8
    1808:	000a5b1f 	andeq	r5, sl, pc, lsl fp
    180c:	032f0500 			; <UNDEFINED> instruction: 0x032f0500
    1810:	0004721d 	andeq	r7, r4, sp, lsl r2
    1814:	03041000 	movweq	r1, #16384	; 0x4000
    1818:	06020000 	streq	r0, [r2], -r0
    181c:	09311001 	ldmdbeq	r1!, {r0, ip}
    1820:	78110000 	ldmdavc	r1, {}	; <UNPREDICTABLE>
    1824:	13020600 	movwne	r0, #9728	; 0x2600
    1828:	0000003a 	andeq	r0, r0, sl, lsr r0
    182c:	00791100 	rsbseq	r1, r9, r0, lsl #2
    1830:	3a130306 	bcc	4c2450 <startup-0x1fb3dbb0>
    1834:	01000000 	mrseq	r0, (UNDEF: 0)
    1838:	030b0400 	movweq	r0, #46080	; 0xb400
    183c:	04060000 	streq	r0, [r6], #-0
    1840:	00090d02 	andeq	r0, r9, r2, lsl #26
    1844:	03a31000 			; <UNDEFINED> instruction: 0x03a31000
    1848:	062c0000 	strteq	r0, [ip], -r0
    184c:	097e1008 	ldmdbeq	lr!, {r3, ip}^
    1850:	600d0000 	andvs	r0, sp, r0
    1854:	06000004 	streq	r0, [r0], -r4
    1858:	002c0909 	eoreq	r0, ip, r9, lsl #18
    185c:	0d000000 	stceq	0, cr0, [r0, #-0]
    1860:	000003ad 	andeq	r0, r0, sp, lsr #7
    1864:	2c090a06 			; <UNDEFINED> instruction: 0x2c090a06
    1868:	04000000 	streq	r0, [r0], #-0
    186c:	0003b30d 	andeq	fp, r3, sp, lsl #6
    1870:	090b0600 	stmdbeq	fp, {r9, sl}
    1874:	0000002c 	andeq	r0, r0, ip, lsr #32
    1878:	78701108 	ldmdavc	r0!, {r3, r8, ip}^
    187c:	0b0c0600 	bleq	303084 <startup-0x1fcfcf7c>
    1880:	0000097e 	andeq	r0, r0, lr, ror r9
    1884:	310a000c 	tstcc	sl, ip
    1888:	8e000009 	cdphi	0, 0, cr0, cr0, cr9, {0}
    188c:	0b000009 	bleq	18b8 <startup-0x1fffe748>
    1890:	00000025 	andeq	r0, r0, r5, lsr #32
    1894:	4904000f 	stmdbmi	r4, {r0, r1, r2, r3}
    1898:	06000002 	streq	r0, [r0], -r2
    189c:	099a0e0d 	ldmibeq	sl, {r0, r2, r3, r9, sl, fp}
    18a0:	04050000 	streq	r0, [r5], #-0
    18a4:	0000093d 	andeq	r0, r0, sp, lsr r9
    18a8:	00044210 	andeq	r4, r4, r0, lsl r2
    18ac:	0f062400 	svceq	0x00062400
    18b0:	000a2310 	andeq	r2, sl, r0, lsl r3
    18b4:	65671100 	strbvs	r1, [r7, #-256]!	; 0xffffff00
    18b8:	1006006f 	andne	r0, r6, pc, rrx
    18bc:	00098e0f 	andeq	r8, r9, pc, lsl #28
    18c0:	9c0d0000 	stcls	0, cr0, [sp], {-0}
    18c4:	06000002 	streq	r0, [r0], -r2
    18c8:	002c0911 	eoreq	r0, ip, r1, lsl r9
    18cc:	0d040000 	stceq	0, cr0, [r4, #-0]
    18d0:	000002a1 	andeq	r0, r0, r1, lsr #5
    18d4:	2c0e1106 	stfcss	f1, [lr], {6}
    18d8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    18dc:	0003220d 	andeq	r2, r3, sp, lsl #4
    18e0:	09120600 	ldmdbeq	r2, {r9, sl}
    18e4:	0000002c 	andeq	r0, r0, ip, lsr #32
    18e8:	03270d0c 			; <UNDEFINED> instruction: 0x03270d0c
    18ec:	12060000 	andne	r0, r6, #0, 0
    18f0:	00002c0e 	andeq	r2, r0, lr, lsl #24
    18f4:	c60d1000 	strgt	r1, [sp], -r0
    18f8:	06000003 	streq	r0, [r0], -r3
    18fc:	0a340d13 	beq	d04d50 <startup-0x1f2fb2b0>
    1900:	0d140000 	ldceq	0, cr0, [r4, #-0]
    1904:	00000699 	muleq	r0, r9, r6
    1908:	340d1406 	strcc	r1, [sp], #-1030	; 0xfffffbfa
    190c:	1800000a 	stmdane	r0, {r1, r3}
    1910:	0007260d 	andeq	r2, r7, sp, lsl #12
    1914:	0d150600 	ldceq	6, cr0, [r5, #-0]
    1918:	00000a34 	andeq	r0, r0, r4, lsr sl
    191c:	03180d1c 	tsteq	r8, #28, 26	; 0x700
    1920:	16060000 	strne	r0, [r6], -r0
    1924:	000a4f0d 	andeq	r4, sl, sp, lsl #30
    1928:	1e002000 	cdpne	0, 0, cr2, cr0, cr0, {0}
    192c:	00000a2e 	andeq	r0, r0, lr, lsr #20
    1930:	000a2e16 	andeq	r2, sl, r6, lsl lr
    1934:	04050000 	streq	r0, [r5], #-0
    1938:	000009a0 	andeq	r0, r0, r0, lsr #19
    193c:	0a230405 	beq	8c2958 <startup-0x1f73d6a8>
    1940:	4f1e0000 	svcmi	0x001e0000
    1944:	1600000a 	strne	r0, [r0], -sl
    1948:	00000a2e 	andeq	r0, r0, lr, lsr #20
    194c:	00002c16 	andeq	r2, r0, r6, lsl ip
    1950:	002c1600 	eoreq	r1, ip, r0, lsl #12
    1954:	05000000 	streq	r0, [r0, #-0]
    1958:	000a3a04 	andeq	r3, sl, r4, lsl #20
    195c:	048e0400 	streq	r0, [lr], #1024	; 0x400
    1960:	17060000 	strne	r0, [r6, -r0]
    1964:	000a2e0c 	andeq	r2, sl, ip, lsl #28
    1968:	0a550a00 	beq	1544170 <startup-0x1eabbe90>
    196c:	0a710000 	beq	1c41974 <startup-0x1e3be68c>
    1970:	250b0000 	strcs	r0, [fp, #-0]
    1974:	63000000 	movwvs	r0, #0
    1978:	0a072000 	beq	1c9980 <startup-0x1fe36680>
    197c:	05010000 	streq	r0, [r1, #-0]
    1980:	000a6109 	andeq	r6, sl, r9, lsl #2
    1984:	e8030500 	stmda	r3, {r8, sl}
    1988:	20200032 	eorcs	r0, r0, r2, lsr r0
    198c:	00000a55 	andeq	r0, r0, r5, asr sl
    1990:	2c050601 	stccs	6, cr0, [r5], {1}
    1994:	05000000 	streq	r0, [r0, #-0]
    1998:	0032e003 	eorseq	lr, r2, r3
    199c:	0a232020 	beq	8c9a24 <startup-0x1f7365dc>
    19a0:	07010000 	streq	r0, [r1, -r0]
    19a4:	00002c05 	andeq	r2, r0, r5, lsl #24
    19a8:	b0030500 	andlt	r0, r3, r0, lsl #10
    19ac:	20200035 	eorcs	r0, r0, r5, lsr r0
    19b0:	00000a28 	andeq	r0, r0, r8, lsr #20
    19b4:	2c050801 	stccs	8, cr0, [r5], {1}
    19b8:	05000000 	streq	r0, [r0, #-0]
    19bc:	0032e403 	eorseq	lr, r2, r3, lsl #8
    19c0:	07242120 	streq	r2, [r4, -r0, lsr #2]!
    19c4:	30010000 	andcc	r0, r1, r0
    19c8:	00002c05 	andeq	r2, r0, r5, lsl #24
    19cc:	00117800 	andseq	r7, r1, r0, lsl #16
    19d0:	00004820 	andeq	r4, r0, r0, lsr #16
    19d4:	e39c0100 	orrs	r0, ip, #0
    19d8:	2200000a 	andcs	r0, r0, #10, 0
    19dc:	000005dc 	ldrdeq	r0, [r0], -ip
    19e0:	550c3101 	strpl	r3, [ip, #-257]	; 0xfffffeff
    19e4:	0200000a 	andeq	r0, r0, #10, 0
    19e8:	23007491 	movwcs	r7, #1169	; 0x491
    19ec:	00000970 	andeq	r0, r0, r0, ror r9
    19f0:	18062401 	stmdane	r6, {r0, sl, sp}
    19f4:	60200011 	eorvs	r0, r0, r1, lsl r0
    19f8:	01000000 	mrseq	r0, (UNDEF: 0)
    19fc:	000b099c 	muleq	fp, ip, r9
    1a00:	05dc2400 	ldrbeq	r2, [ip, #1024]	; 0x400
    1a04:	24010000 	strcs	r0, [r1], #-0
    1a08:	000a5515 	andeq	r5, sl, r5, lsl r5
    1a0c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1a10:	06cc2500 	strbeq	r2, [ip], r0, lsl #10
    1a14:	1f010000 	svcne	0x00010000
    1a18:	00002c05 	andeq	r2, r0, r5, lsl #24
    1a1c:	00110400 	andseq	r0, r1, r0, lsl #8
    1a20:	00001420 	andeq	r1, r0, r0, lsr #8
    1a24:	259c0100 	ldrcs	r0, [ip, #256]	; 0x100
    1a28:	000006c4 	andeq	r0, r0, r4, asr #13
    1a2c:	35061a01 	strcc	r1, [r6, #-2561]	; 0xfffff5ff
    1a30:	e800000b 	stmda	r0, {r0, r1, r3}
    1a34:	1c200010 	stcne	0, cr0, [r0], #-64	; 0xffffffc0
    1a38:	01000000 	mrseq	r0, (UNDEF: 0)
    1a3c:	0201029c 	andeq	r0, r1, #156, 4	; 0xc0000009
    1a40:	0000090d 	andeq	r0, r0, sp, lsl #18
    1a44:	00079525 	andeq	r9, r7, r5, lsr #10
    1a48:	06150100 	ldreq	r0, [r5], -r0, lsl #2
    1a4c:	00000b35 	andeq	r0, r0, r5, lsr fp
    1a50:	200010d0 	ldrdcs	r1, [r0], -r0
    1a54:	00000018 	andeq	r0, r0, r8, lsl r0
    1a58:	59259c01 	stmdbpl	r5!, {r0, sl, fp, ip, pc}
    1a5c:	01000008 	tsteq	r0, r8
    1a60:	0a550910 	beq	1543ea8 <startup-0x1eabc158>
    1a64:	10b40000 	adcsne	r0, r4, r0
    1a68:	001c2000 	andseq	r2, ip, r0
    1a6c:	9c010000 	stcls	0, cr0, [r1], {-0}
    1a70:	00098e26 	andeq	r8, r9, r6, lsr #28
    1a74:	060a0100 	streq	r0, [sl], -r0, lsl #2
    1a78:	20001084 	andcs	r1, r0, r4, lsl #1
    1a7c:	00000030 	andeq	r0, r0, r0, lsr r0
    1a80:	8a279c01 	bhi	9e8a8c <startup-0x1f617574>
    1a84:	1c200010 	stcne	0, cr0, [r0], #-64	; 0xffffffc0
    1a88:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    1a8c:	0b010069 	bleq	41c38 <startup-0x1ffbe3c8>
    1a90:	00002c0d 	andeq	r2, r0, sp, lsl #24
    1a94:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1a98:	Address 0x0000000000001a98 is out of bounds.


Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	110e1b0e 	tstne	lr, lr, lsl #22
   c:	10061201 	andne	r1, r6, r1, lsl #4
  10:	02000017 	andeq	r0, r0, #23, 0
  14:	0b0b0024 	bleq	2c00ac <startup-0x1fd3ff54>
  18:	0e030b3e 	vmoveq.16	d3[0], r0
  1c:	2e030000 	cdpcs	0, 0, cr0, cr3, cr0, {0}
  20:	03193f01 	tsteq	r9, #1, 30
  24:	3b0b3a0e 	blcc	2ce864 <startup-0x1fd3179c>
  28:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
  2c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
  30:	96184006 	ldrls	r4, [r8], -r6
  34:	13011942 	movwne	r1, #6466	; 0x1942
  38:	05040000 	streq	r0, [r4, #-0]
  3c:	3a080300 	bcc	200c44 <startup-0x1fdff3bc>
  40:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  44:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
  48:	05000018 	streq	r0, [r0, #-24]	; 0xffffffe8
  4c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
  50:	0b3b0b3a 	bleq	ec2d40 <startup-0x1f13d2c0>
  54:	13490b39 	movtne	r0, #39737	; 0x9b39
  58:	00001802 	andeq	r1, r0, r2, lsl #16
  5c:	3f012e06 	svccc	0x00012e06
  60:	3a0e0319 	bcc	380ccc <startup-0x1fc7f334>
  64:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  68:	3c13490b 			; <UNDEFINED> instruction: 0x3c13490b
  6c:	07000019 	smladeq	r0, r9, r0, r0
  70:	00000018 	andeq	r0, r0, r8, lsl r0
  74:	0b002408 	bleq	909c <startup-0x1fff6f64>
  78:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
  7c:	09000008 	stmdbeq	r0, {r3}
  80:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
  84:	0b3a0e03 	bleq	e83898 <startup-0x1f17c768>
  88:	0b390b3b 	bleq	e42d7c <startup-0x1f1bd284>
  8c:	06120111 			; <UNDEFINED> instruction: 0x06120111
  90:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
  94:	00130119 	andseq	r0, r3, r9, lsl r1
  98:	012e0a00 			; <UNDEFINED> instruction: 0x012e0a00
  9c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
  a0:	0b3b0b3a 	bleq	ec2d90 <startup-0x1f13d270>
  a4:	13490b39 	movtne	r0, #39737	; 0x9b39
  a8:	1301193c 	movwne	r1, #6460	; 0x193c
  ac:	2e0b0000 	cdpcs	0, 0, cr0, cr11, cr0, {0}
  b0:	03193f01 	tsteq	r9, #1, 30
  b4:	3b0b3a0e 	blcc	2ce8f4 <startup-0x1fd3170c>
  b8:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
  bc:	11134919 	tstne	r3, r9, lsl r9
  c0:	40061201 	andmi	r1, r6, r1, lsl #4
  c4:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
  c8:	00001301 	andeq	r1, r0, r1, lsl #6
  cc:	0300050c 	movweq	r0, #1292	; 0x50c
  d0:	3b0b3a0e 	blcc	2ce910 <startup-0x1fd316f0>
  d4:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
  d8:	00180213 	andseq	r0, r8, r3, lsl r2
  dc:	012e0d00 			; <UNDEFINED> instruction: 0x012e0d00
  e0:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
  e4:	0b3b0b3a 	bleq	ec2dd4 <startup-0x1f13d22c>
  e8:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
  ec:	06120111 			; <UNDEFINED> instruction: 0x06120111
  f0:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
  f4:	00130119 	andseq	r0, r3, r9, lsl r1
  f8:	002e0e00 	eoreq	r0, lr, r0, lsl #28
  fc:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 100:	0b3b0b3a 	bleq	ec2df0 <startup-0x1f13d210>
 104:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 108:	06120111 			; <UNDEFINED> instruction: 0x06120111
 10c:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 110:	00000019 	andeq	r0, r0, r9, lsl r0
 114:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
 118:	030b130e 	movweq	r1, #45838	; 0xb30e
 11c:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
 120:	10011117 	andne	r1, r1, r7, lsl r1
 124:	02000017 	andeq	r0, r0, #23, 0
 128:	0b0b0024 	bleq	2c01c0 <startup-0x1fd3fe40>
 12c:	0e030b3e 	vmoveq.16	d3[0], r0
 130:	01030000 	mrseq	r0, (UNDEF: 3)
 134:	01134901 	tsteq	r3, r1, lsl #18
 138:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
 13c:	13490021 	movtne	r0, #36897	; 0x9021
 140:	0000052f 	andeq	r0, r0, pc, lsr #10
 144:	49003505 	stmdbmi	r0, {r0, r2, r8, sl, ip, sp}
 148:	06000013 			; <UNDEFINED> instruction: 0x06000013
 14c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 150:	0b3b0b3a 	bleq	ec2e40 <startup-0x1f13d1c0>
 154:	13490b39 	movtne	r0, #39737	; 0x9b39
 158:	00001802 	andeq	r1, r0, r2, lsl #16
 15c:	03011307 	movweq	r1, #4871	; 0x1307
 160:	3a0b0b0e 	bcc	2c2da0 <startup-0x1fd3d260>
 164:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 168:	0013010b 	andseq	r0, r3, fp, lsl #2
 16c:	000d0800 	andeq	r0, sp, r0, lsl #16
 170:	0b3a0803 	bleq	e82184 <startup-0x1f17de7c>
 174:	0b390b3b 	bleq	e42e68 <startup-0x1f1bd198>
 178:	0b381349 	bleq	e04ea4 <startup-0x1f1fb15c>
 17c:	16090000 	strne	r0, [r9], -r0
 180:	3a0e0300 	bcc	380d88 <startup-0x1fc7f278>
 184:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 188:	0013490b 	andseq	r4, r3, fp, lsl #18
 18c:	000d0a00 	andeq	r0, sp, r0, lsl #20
 190:	0b3a0e03 	bleq	e839a4 <startup-0x1f17c65c>
 194:	0b390b3b 	bleq	e42e88 <startup-0x1f1bd178>
 198:	0b381349 	bleq	e04ec4 <startup-0x1f1fb13c>
 19c:	240b0000 	strcs	r0, [fp], #-0
 1a0:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 1a4:	0008030b 	andeq	r0, r8, fp, lsl #6
 1a8:	00210c00 	eoreq	r0, r1, r0, lsl #24
 1ac:	0b2f1349 	bleq	bc4ed8 <startup-0x1f43b128>
 1b0:	0f0d0000 	svceq	0x000d0000
 1b4:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
 1b8:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
 1bc:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
 1c0:	00001301 	andeq	r1, r0, r1, lsl #6
 1c4:	4900050f 	stmdbmi	r0, {r0, r1, r2, r3, r8, sl}
 1c8:	10000013 	andne	r0, r0, r3, lsl r0
 1cc:	0b0b0113 	bleq	2c0620 <startup-0x1fd3f9e0>
 1d0:	0b3b0b3a 	bleq	ec2ec0 <startup-0x1f13d140>
 1d4:	13010b39 	movwne	r0, #6969	; 0x1b39
 1d8:	34110000 	ldrcc	r0, [r1], #-0
 1dc:	3a0e0300 	bcc	380de4 <startup-0x1fc7f21c>
 1e0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 1e4:	3f13490b 	svccc	0x0013490b
 1e8:	00180219 	andseq	r0, r8, r9, lsl r2
 1ec:	012e1200 			; <UNDEFINED> instruction: 0x012e1200
 1f0:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 1f4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 1f8:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 1fc:	06120111 			; <UNDEFINED> instruction: 0x06120111
 200:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 204:	00130119 	andseq	r0, r3, r9, lsl r1
 208:	00051300 	andeq	r1, r5, r0, lsl #6
 20c:	0b3a0e03 	bleq	e83a20 <startup-0x1f17c5e0>
 210:	0b39053b 	bleq	e41704 <startup-0x1f1be8fc>
 214:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 218:	34140000 	ldrcc	r0, [r4], #-0
 21c:	3a0e0300 	bcc	380e24 <startup-0x1fc7f1dc>
 220:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 224:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 228:	15000018 	strne	r0, [r0, #-24]	; 0xffffffe8
 22c:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 230:	0b3a0e03 	bleq	e83a44 <startup-0x1f17c5bc>
 234:	0b39053b 	bleq	e41728 <startup-0x1f1be8d8>
 238:	06120111 			; <UNDEFINED> instruction: 0x06120111
 23c:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 240:	16000019 			; <UNDEFINED> instruction: 0x16000019
 244:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 248:	0b3a0e03 	bleq	e83a5c <startup-0x1f17c5a4>
 24c:	0b39053b 	bleq	e41740 <startup-0x1f1be8c0>
 250:	01111927 	tsteq	r1, r7, lsr #18
 254:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 258:	01194297 			; <UNDEFINED> instruction: 0x01194297
 25c:	17000013 	smladne	r0, r3, r0, r0
 260:	08030005 	stmdaeq	r3, {r0, r2}
 264:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 268:	13490b39 	movtne	r0, #39737	; 0x9b39
 26c:	00001802 	andeq	r1, r0, r2, lsl #16
 270:	03003418 	movweq	r3, #1048	; 0x418
 274:	3b0b3a08 	blcc	2cea9c <startup-0x1fd31564>
 278:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
 27c:	00180213 	andseq	r0, r8, r3, lsl r2
 280:	010b1900 	tsteq	fp, r0, lsl #18
 284:	06120111 			; <UNDEFINED> instruction: 0x06120111
 288:	2e1a0000 	cdpcs	0, 1, cr0, cr10, cr0, {0}
 28c:	03193f00 	tsteq	r9, #0, 30
 290:	3b0b3a0e 	blcc	2cead0 <startup-0x1fd31530>
 294:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
 298:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 29c:	97184006 	ldrls	r4, [r8, -r6]
 2a0:	00001942 	andeq	r1, r0, r2, asr #18
 2a4:	3f012e1b 	svccc	0x00012e1b
 2a8:	3a0e0319 	bcc	380f14 <startup-0x1fc7f0ec>
 2ac:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 2b0:	1119270b 	tstne	r9, fp, lsl #14
 2b4:	40061201 	andmi	r1, r6, r1, lsl #4
 2b8:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 2bc:	00001301 	andeq	r1, r0, r1, lsl #6
 2c0:	0300051c 	movweq	r0, #1308	; 0x51c
 2c4:	3b0b3a08 	blcc	2ceaec <startup-0x1fd31514>
 2c8:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 2cc:	00180213 	andseq	r0, r8, r3, lsl r2
 2d0:	012e1d00 			; <UNDEFINED> instruction: 0x012e1d00
 2d4:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 2d8:	0b3b0b3a 	bleq	ec2fc8 <startup-0x1f13d038>
 2dc:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 2e0:	06120111 			; <UNDEFINED> instruction: 0x06120111
 2e4:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 2e8:	00130119 	andseq	r0, r3, r9, lsl r1
 2ec:	00341e00 	eorseq	r1, r4, r0, lsl #28
 2f0:	0b3a0803 	bleq	e82304 <startup-0x1f17dcfc>
 2f4:	0b390b3b 	bleq	e42fe8 <startup-0x1f1bd018>
 2f8:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 2fc:	0b1f0000 	bleq	7c0304 <startup-0x1f83fcfc>
 300:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
 304:	00130106 	andseq	r0, r3, r6, lsl #2
 308:	012e2000 			; <UNDEFINED> instruction: 0x012e2000
 30c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 310:	0b3b0b3a 	bleq	ec3000 <startup-0x1f13d000>
 314:	13490b39 	movtne	r0, #39737	; 0x9b39
 318:	0000193c 	andeq	r1, r0, ip, lsr r9
 31c:	00001821 	andeq	r1, r0, r1, lsr #16
 320:	012e2200 			; <UNDEFINED> instruction: 0x012e2200
 324:	0b3a0e03 	bleq	e83b38 <startup-0x1f17c4c8>
 328:	0b390b3b 	bleq	e4301c <startup-0x1f1bcfe4>
 32c:	01111927 	tsteq	r1, r7, lsr #18
 330:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 334:	01194297 			; <UNDEFINED> instruction: 0x01194297
 338:	23000013 	movwcs	r0, #19
 33c:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 340:	0b3b0b3a 	bleq	ec3030 <startup-0x1f13cfd0>
 344:	13490b39 	movtne	r0, #39737	; 0x9b39
 348:	00001802 	andeq	r1, r0, r2, lsl #16
 34c:	01110100 	tsteq	r1, r0, lsl #2
 350:	0b130e25 	bleq	4c3bec <startup-0x1fb3c414>
 354:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
 358:	06120111 			; <UNDEFINED> instruction: 0x06120111
 35c:	00001710 	andeq	r1, r0, r0, lsl r7
 360:	0b002402 	bleq	9370 <startup-0x1fff6c90>
 364:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 368:	0300000e 	movweq	r0, #14
 36c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 370:	0b3a0e03 	bleq	e83b84 <startup-0x1f17c47c>
 374:	0b390b3b 	bleq	e43068 <startup-0x1f1bcf98>
 378:	01111927 	tsteq	r1, r7, lsr #18
 37c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 380:	01194297 			; <UNDEFINED> instruction: 0x01194297
 384:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
 388:	08030005 	stmdaeq	r3, {r0, r2}
 38c:	0b3b0b3a 	bleq	ec307c <startup-0x1f13cf84>
 390:	13490b39 	movtne	r0, #39737	; 0x9b39
 394:	00001802 	andeq	r1, r0, r2, lsl #16
 398:	3f012e05 	svccc	0x00012e05
 39c:	3a0e0319 	bcc	381008 <startup-0x1fc7eff8>
 3a0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 3a4:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 3a8:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 3ac:	96184006 	ldrls	r4, [r8], -r6
 3b0:	13011942 	movwne	r1, #6466	; 0x1942
 3b4:	34060000 	strcc	r0, [r6], #-0
 3b8:	3a0e0300 	bcc	380fc0 <startup-0x1fc7f040>
 3bc:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 3c0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 3c4:	07000018 	smladeq	r0, r8, r0, r0
 3c8:	08030034 	stmdaeq	r3, {r2, r4, r5}
 3cc:	0b3b0b3a 	bleq	ec30bc <startup-0x1f13cf44>
 3d0:	13490b39 	movtne	r0, #39737	; 0x9b39
 3d4:	00001802 	andeq	r1, r0, r2, lsl #16
 3d8:	49010108 	stmdbmi	r1, {r3, r8}
 3dc:	00130113 	andseq	r0, r3, r3, lsl r1
 3e0:	00210900 	eoreq	r0, r1, r0, lsl #18
 3e4:	0b2f1349 	bleq	bc5110 <startup-0x1f43aef0>
 3e8:	240a0000 	strcs	r0, [sl], #-0
 3ec:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 3f0:	0008030b 	andeq	r0, r8, fp, lsl #6
 3f4:	012e0b00 			; <UNDEFINED> instruction: 0x012e0b00
 3f8:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 3fc:	0b3b0b3a 	bleq	ec30ec <startup-0x1f13cf14>
 400:	13490b39 	movtne	r0, #39737	; 0x9b39
 404:	06120111 			; <UNDEFINED> instruction: 0x06120111
 408:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 40c:	00130119 	andseq	r0, r3, r9, lsl r1
 410:	012e0c00 			; <UNDEFINED> instruction: 0x012e0c00
 414:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 418:	0b3b0b3a 	bleq	ec3108 <startup-0x1f13cef8>
 41c:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 420:	06120111 			; <UNDEFINED> instruction: 0x06120111
 424:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 428:	00000019 	andeq	r0, r0, r9, lsl r0
 42c:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
 430:	030b130e 	movweq	r1, #45838	; 0xb30e
 434:	110e1b0e 	tstne	lr, lr, lsl #22
 438:	10061201 	andne	r1, r6, r1, lsl #4
 43c:	02000017 	andeq	r0, r0, #23, 0
 440:	0b0b0024 	bleq	2c04d8 <startup-0x1fd3fb28>
 444:	0e030b3e 	vmoveq.16	d3[0], r0
 448:	2e030000 	cdpcs	0, 0, cr0, cr3, cr0, {0}
 44c:	03193f01 	tsteq	r9, #1, 30
 450:	3b0b3a0e 	blcc	2cec90 <startup-0x1fd31370>
 454:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
 458:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 45c:	96184006 	ldrls	r4, [r8], -r6
 460:	13011942 	movwne	r1, #6466	; 0x1942
 464:	05040000 	streq	r0, [r4, #-0]
 468:	3a080300 	bcc	201070 <startup-0x1fdfef90>
 46c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 470:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 474:	05000018 	streq	r0, [r0, #-24]	; 0xffffffe8
 478:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 47c:	0b3a0e03 	bleq	e83c90 <startup-0x1f17c370>
 480:	0b390b3b 	bleq	e43174 <startup-0x1f1bce8c>
 484:	01111927 	tsteq	r1, r7, lsr #18
 488:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 48c:	01194297 			; <UNDEFINED> instruction: 0x01194297
 490:	06000013 			; <UNDEFINED> instruction: 0x06000013
 494:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 498:	0b3a0e03 	bleq	e83cac <startup-0x1f17c354>
 49c:	0b390b3b 	bleq	e43190 <startup-0x1f1bce70>
 4a0:	01111927 	tsteq	r1, r7, lsr #18
 4a4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 4a8:	00194297 	mulseq	r9, r7, r2
 4ac:	11010000 	mrsne	r0, (UNDEF: 1)
 4b0:	130e2501 	movwne	r2, #58625	; 0xe501
 4b4:	1b0e030b 	blne	3810e8 <startup-0x1fc7ef18>
 4b8:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
 4bc:	00171006 	andseq	r1, r7, r6
 4c0:	00160200 	andseq	r0, r6, r0, lsl #4
 4c4:	0b3a0e03 	bleq	e83cd8 <startup-0x1f17c328>
 4c8:	0b390b3b 	bleq	e431bc <startup-0x1f1bce44>
 4cc:	00001349 	andeq	r1, r0, r9, asr #6
 4d0:	0b002403 	bleq	94e4 <startup-0x1fff6b1c>
 4d4:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 4d8:	0400000e 	streq	r0, [r0], #-14
 4dc:	13490101 	movtne	r0, #37121	; 0x9101
 4e0:	00001301 	andeq	r1, r0, r1, lsl #6
 4e4:	49002105 	stmdbmi	r0, {r0, r2, r8, sp}
 4e8:	00052f13 	andeq	r2, r5, r3, lsl pc
 4ec:	00350600 	eorseq	r0, r5, r0, lsl #12
 4f0:	00001349 	andeq	r1, r0, r9, asr #6
 4f4:	03003407 	movweq	r3, #1031	; 0x407
 4f8:	3b0b3a0e 	blcc	2ced38 <startup-0x1fd312c8>
 4fc:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 500:	00180213 	andseq	r0, r8, r3, lsl r2
 504:	012e0800 			; <UNDEFINED> instruction: 0x012e0800
 508:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 50c:	0b3b0b3a 	bleq	ec31fc <startup-0x1f13ce04>
 510:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 514:	06120111 			; <UNDEFINED> instruction: 0x06120111
 518:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 51c:	00130119 	andseq	r0, r3, r9, lsl r1
 520:	00340900 	eorseq	r0, r4, r0, lsl #18
 524:	0b3a0803 	bleq	e82538 <startup-0x1f17dac8>
 528:	0b390b3b 	bleq	e4321c <startup-0x1f1bcde4>
 52c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 530:	2e0a0000 	cdpcs	0, 0, cr0, cr10, cr0, {0}
 534:	03193f01 	tsteq	r9, #1, 30
 538:	3b0b3a0e 	blcc	2ced78 <startup-0x1fd31288>
 53c:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
 540:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 544:	97184006 	ldrls	r4, [r8, -r6]
 548:	13011942 	movwne	r1, #6466	; 0x1942
 54c:	050b0000 	streq	r0, [fp, #-0]
 550:	3a080300 	bcc	201158 <startup-0x1fdfeea8>
 554:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 558:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 55c:	0c000018 	stceq	0, cr0, [r0], {24}
 560:	0b0b0024 	bleq	2c05f8 <startup-0x1fd3fa08>
 564:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 568:	2e0d0000 	cdpcs	0, 0, cr0, cr13, cr0, {0}
 56c:	03193f01 	tsteq	r9, #1, 30
 570:	3b0b3a0e 	blcc	2cedb0 <startup-0x1fd31250>
 574:	110b390b 	tstne	fp, fp, lsl #18
 578:	40061201 	andmi	r1, r6, r1, lsl #4
 57c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 580:	00001301 	andeq	r1, r0, r1, lsl #6
 584:	11010b0e 	tstne	r1, lr, lsl #22
 588:	00061201 	andeq	r1, r6, r1, lsl #4
 58c:	00050f00 	andeq	r0, r5, r0, lsl #30
 590:	0b3a0e03 	bleq	e83da4 <startup-0x1f17c25c>
 594:	0b390b3b 	bleq	e43288 <startup-0x1f1bcd78>
 598:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 59c:	2e100000 	cdpcs	0, 1, cr0, cr0, cr0, {0}
 5a0:	03193f01 	tsteq	r9, #1, 30
 5a4:	3b0b3a0e 	blcc	2cede4 <startup-0x1fd3121c>
 5a8:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 5ac:	00193c13 	andseq	r3, r9, r3, lsl ip
 5b0:	00181100 	andseq	r1, r8, r0, lsl #2
 5b4:	2e120000 	cdpcs	0, 1, cr0, cr2, cr0, {0}
 5b8:	03193f01 	tsteq	r9, #1, 30
 5bc:	3b0b3a0e 	blcc	2cedfc <startup-0x1fd31204>
 5c0:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
 5c4:	11134919 	tstne	r3, r9, lsl r9
 5c8:	40061201 	andmi	r1, r6, r1, lsl #4
 5cc:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 5d0:	00001301 	andeq	r1, r0, r1, lsl #6
 5d4:	3f012e13 	svccc	0x00012e13
 5d8:	3a0e0319 	bcc	381244 <startup-0x1fc7edbc>
 5dc:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 5e0:	3c13490b 			; <UNDEFINED> instruction: 0x3c13490b
 5e4:	00130119 	andseq	r0, r3, r9, lsl r1
 5e8:	012e1400 			; <UNDEFINED> instruction: 0x012e1400
 5ec:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 5f0:	0b3b0b3a 	bleq	ec32e0 <startup-0x1f13cd20>
 5f4:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 5f8:	06120111 			; <UNDEFINED> instruction: 0x06120111
 5fc:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 600:	00000019 	andeq	r0, r0, r9, lsl r0
 604:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
 608:	030b130e 	movweq	r1, #45838	; 0xb30e
 60c:	110e1b0e 	tstne	lr, lr, lsl #22
 610:	10061201 	andne	r1, r6, r1, lsl #4
 614:	02000017 	andeq	r0, r0, #23, 0
 618:	0b0b0024 	bleq	2c06b0 <startup-0x1fd3f950>
 61c:	0e030b3e 	vmoveq.16	d3[0], r0
 620:	24030000 	strcs	r0, [r3], #-0
 624:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 628:	0008030b 	andeq	r0, r8, fp, lsl #6
 62c:	00160400 	andseq	r0, r6, r0, lsl #8
 630:	0b3a0e03 	bleq	e83e44 <startup-0x1f17c1bc>
 634:	0b390b3b 	bleq	e43328 <startup-0x1f1bccd8>
 638:	00001349 	andeq	r1, r0, r9, asr #6
 63c:	0b000f05 	bleq	4258 <startup-0x1fffbda8>
 640:	0013490b 	andseq	r4, r3, fp, lsl #18
 644:	00130600 	andseq	r0, r3, r0, lsl #12
 648:	193c0e03 	ldmdbne	ip!, {r0, r1, r9, sl, fp}
 64c:	16070000 	strne	r0, [r7], -r0
 650:	3a0e0300 	bcc	381258 <startup-0x1fc7eda8>
 654:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 658:	0013490b 	andseq	r4, r3, fp, lsl #18
 65c:	01170800 	tsteq	r7, r0, lsl #16
 660:	0b3a0b0b 	bleq	e83294 <startup-0x1f17cd6c>
 664:	0b390b3b 	bleq	e43358 <startup-0x1f1bcca8>
 668:	00001301 	andeq	r1, r0, r1, lsl #6
 66c:	03000d09 	movweq	r0, #3337	; 0xd09
 670:	3b0b3a0e 	blcc	2ceeb0 <startup-0x1fd31150>
 674:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 678:	0a000013 	beq	6cc <startup-0x1ffff934>
 67c:	13490101 	movtne	r0, #37121	; 0x9101
 680:	00001301 	andeq	r1, r0, r1, lsl #6
 684:	4900210b 	stmdbmi	r0, {r0, r1, r3, r8, sp}
 688:	000b2f13 	andeq	r2, fp, r3, lsl pc
 68c:	01130c00 	tsteq	r3, r0, lsl #24
 690:	0b3a0b0b 	bleq	e832c4 <startup-0x1f17cd3c>
 694:	0b390b3b 	bleq	e43388 <startup-0x1f1bcc78>
 698:	00001301 	andeq	r1, r0, r1, lsl #6
 69c:	03000d0d 	movweq	r0, #3341	; 0xd0d
 6a0:	3b0b3a0e 	blcc	2ceee0 <startup-0x1fd31120>
 6a4:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 6a8:	000b3813 	andeq	r3, fp, r3, lsl r8
 6ac:	000f0e00 	andeq	r0, pc, r0, lsl #28
 6b0:	00000b0b 	andeq	r0, r0, fp, lsl #22
 6b4:	4900260f 	stmdbmi	r0, {r0, r1, r2, r3, r9, sl, sp}
 6b8:	10000013 	andne	r0, r0, r3, lsl r0
 6bc:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
 6c0:	0b3a0b0b 	bleq	e832f4 <startup-0x1f17cd0c>
 6c4:	0b390b3b 	bleq	e433b8 <startup-0x1f1bcc48>
 6c8:	00001301 	andeq	r1, r0, r1, lsl #6
 6cc:	03000d11 	movweq	r0, #3345	; 0xd11
 6d0:	3b0b3a08 	blcc	2ceef8 <startup-0x1fd31108>
 6d4:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 6d8:	000b3813 	andeq	r3, fp, r3, lsl r8
 6dc:	01131200 	tsteq	r3, r0, lsl #4
 6e0:	050b0e03 	streq	r0, [fp, #-3587]	; 0xfffff1fd
 6e4:	0b3b0b3a 	bleq	ec33d4 <startup-0x1f13cc2c>
 6e8:	13010b39 	movwne	r0, #6969	; 0x1b39
 6ec:	0d130000 	ldceq	0, cr0, [r3, #-0]
 6f0:	3a0e0300 	bcc	3812f8 <startup-0x1fc7ed08>
 6f4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 6f8:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 6fc:	14000005 	strne	r0, [r0], #-5
 700:	19270015 	stmdbne	r7!, {r0, r2, r4}
 704:	15150000 	ldrne	r0, [r5, #-0]
 708:	49192701 	ldmdbmi	r9, {r0, r8, r9, sl, sp}
 70c:	00130113 	andseq	r0, r3, r3, lsl r1
 710:	00051600 	andeq	r1, r5, r0, lsl #12
 714:	00001349 	andeq	r1, r0, r9, asr #6
 718:	03011317 	movweq	r1, #4887	; 0x1317
 71c:	3a050b0e 	bcc	14335c <startup-0x1febcca4>
 720:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 724:	0013010b 	andseq	r0, r3, fp, lsl #2
 728:	000d1800 	andeq	r1, sp, r0, lsl #16
 72c:	0b3a0e03 	bleq	e83f40 <startup-0x1f17c0c0>
 730:	0b39053b 	bleq	e41c24 <startup-0x1f1be3dc>
 734:	0b381349 	bleq	e05460 <startup-0x1f1faba0>
 738:	0d190000 	ldceq	0, cr0, [r9, #-0]
 73c:	3a0e0300 	bcc	381344 <startup-0x1fc7ecbc>
 740:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 744:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 748:	1a000005 	bne	764 <startup-0x1ffff89c>
 74c:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
 750:	0b3a0b0b 	bleq	e83384 <startup-0x1f17cc7c>
 754:	0b39053b 	bleq	e41c48 <startup-0x1f1be3b8>
 758:	00001301 	andeq	r1, r0, r1, lsl #6
 75c:	0b01131b 	bleq	453d0 <startup-0x1ffbac30>
 760:	3b0b3a0b 	blcc	2cef94 <startup-0x1fd3106c>
 764:	010b3905 	tsteq	fp, r5, lsl #18
 768:	1c000013 	stcne	0, cr0, [r0], {19}
 76c:	0b0b0117 	bleq	2c0bd0 <startup-0x1fd3f430>
 770:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 774:	13010b39 	movwne	r0, #6969	; 0x1b39
 778:	0d1d0000 	ldceq	0, cr0, [sp, #-0]
 77c:	3a0e0300 	bcc	381384 <startup-0x1fc7ec7c>
 780:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 784:	0013490b 	andseq	r4, r3, fp, lsl #18
 788:	01151e00 	tsteq	r5, r0, lsl #28
 78c:	13011927 	movwne	r1, #6439	; 0x1927
 790:	341f0000 	ldrcc	r0, [pc], #-0	; 798 <startup-0x1ffff868>
 794:	3a0e0300 	bcc	38139c <startup-0x1fc7ec64>
 798:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 79c:	3f13490b 	svccc	0x0013490b
 7a0:	00193c19 	andseq	r3, r9, r9, lsl ip
 7a4:	00342000 	eorseq	r2, r4, r0
 7a8:	0b3a0e03 	bleq	e83fbc <startup-0x1f17c044>
 7ac:	0b390b3b 	bleq	e434a0 <startup-0x1f1bcb60>
 7b0:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 7b4:	00001802 	andeq	r1, r0, r2, lsl #16
 7b8:	3f012e21 	svccc	0x00012e21
 7bc:	3a0e0319 	bcc	381428 <startup-0x1fc7ebd8>
 7c0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 7c4:	1113490b 	tstne	r3, fp, lsl #18
 7c8:	40061201 	andmi	r1, r6, r1, lsl #4
 7cc:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 7d0:	00001301 	andeq	r1, r0, r1, lsl #6
 7d4:	03003422 	movweq	r3, #1058	; 0x422
 7d8:	3b0b3a0e 	blcc	2cf018 <startup-0x1fd30fe8>
 7dc:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 7e0:	00180213 	andseq	r0, r8, r3, lsl r2
 7e4:	012e2300 			; <UNDEFINED> instruction: 0x012e2300
 7e8:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 7ec:	0b3b0b3a 	bleq	ec34dc <startup-0x1f13cb24>
 7f0:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 7f4:	06120111 			; <UNDEFINED> instruction: 0x06120111
 7f8:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 7fc:	00130119 	andseq	r0, r3, r9, lsl r1
 800:	00052400 	andeq	r2, r5, r0, lsl #8
 804:	0b3a0e03 	bleq	e84018 <startup-0x1f17bfe8>
 808:	0b390b3b 	bleq	e434fc <startup-0x1f1bcb04>
 80c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 810:	2e250000 	cdpcs	0, 2, cr0, cr5, cr0, {0}
 814:	03193f00 	tsteq	r9, #0, 30
 818:	3b0b3a0e 	blcc	2cf058 <startup-0x1fd30fa8>
 81c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 820:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 824:	97184006 	ldrls	r4, [r8, -r6]
 828:	00001942 	andeq	r1, r0, r2, asr #18
 82c:	3f012e26 	svccc	0x00012e26
 830:	3a0e0319 	bcc	38149c <startup-0x1fc7eb64>
 834:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 838:	1201110b 	andne	r1, r1, #-1073741822	; 0xc0000002
 83c:	97184006 	ldrls	r4, [r8, -r6]
 840:	00001942 	andeq	r1, r0, r2, asr #18
 844:	11010b27 	tstne	r1, r7, lsr #22
 848:	00061201 	andeq	r1, r6, r1, lsl #4
 84c:	00342800 	eorseq	r2, r4, r0, lsl #16
 850:	0b3a0803 	bleq	e82864 <startup-0x1f17d79c>
 854:	0b390b3b 	bleq	e43548 <startup-0x1f1bcab8>
 858:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 85c:	Address 0x000000000000085c is out of bounds.


Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	0000001c 	andeq	r0, r0, ip, lsl r0
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	000002e6 	andeq	r0, r0, r6, ror #5
	...
  20:	00000024 	andeq	r0, r0, r4, lsr #32
  24:	02cb0002 	sbceq	r0, fp, #2, 0
  28:	00040000 	andeq	r0, r4, r0
  2c:	00000000 	andeq	r0, r0, r0
  30:	200002f8 	strdcs	r0, [r0], -r8
  34:	00000714 	andeq	r0, r0, r4, lsl r7
  38:	20000000 	andcs	r0, r0, r0
  3c:	0000000c 	andeq	r0, r0, ip
	...
  48:	0000001c 	andeq	r0, r0, ip, lsl r0
  4c:	09b60002 	ldmibeq	r6!, {r1}
  50:	00040000 	andeq	r0, r4, r0
  54:	00000000 	andeq	r0, r0, r0
  58:	20000a0c 	andcs	r0, r0, ip, lsl #20
  5c:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
	...
  68:	0000001c 	andeq	r0, r0, ip, lsl r0
  6c:	0ada0002 	beq	ff68007c <rear+0xdf67cacc>
  70:	00040000 	andeq	r0, r4, r0
  74:	00000000 	andeq	r0, r0, r0
  78:	20000afc 	strdcs	r0, [r0], -ip
  7c:	00000062 	andeq	r0, r0, r2, rrx
	...
  88:	0000001c 	andeq	r0, r0, ip, lsl r0
  8c:	0b7c0002 	bleq	1f0009c <startup-0x1e0fff64>
  90:	00040000 	andeq	r0, r4, r0
  94:	00000000 	andeq	r0, r0, r0
  98:	20000b60 	andcs	r0, r0, r0, ror #22
  9c:	00000524 	andeq	r0, r0, r4, lsr #10
	...
  a8:	0000001c 	andeq	r0, r0, ip, lsl r0
  ac:	0f080002 	svceq	0x00080002
  b0:	00040000 	andeq	r0, r4, r0
  b4:	00000000 	andeq	r0, r0, r0
  b8:	20001084 	andcs	r1, r0, r4, lsl #1
  bc:	0000013c 	andeq	r0, r0, ip, lsr r1
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
   4:	005c0003 	subseq	r0, ip, r3
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	2f010000 	svccs	0x00010000
  1c:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
  20:	6f672f73 	svcvs	0x00672f73
  24:	6d756c6c 	ldclvs	12, cr6, [r5, #-432]!	; 0xfffffe50
  28:	636f442f 	cmnvs	pc, #788529152	; 0x2f000000
  2c:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
  30:	6d2f7374 	stcvs	3, cr7, [pc, #-464]!	; fffffe68 <rear+0xdfffc8b8>
  34:	616c706f 	cmnvs	ip, pc, rrx
  38:	61726f62 	cmnvs	r2, r2, ror #30
  3c:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
  40:	4d2f7265 	sfmmi	f7, 4, [pc, #-404]!	; fffffeb4 <rear+0xdfffc904>
  44:	532d504f 			; <UNDEFINED> instruction: 0x532d504f
  48:	2f6c6570 	svccs	0x006c6570
  4c:	6b616e53 	blvs	185b9a0 <startup-0x1e7a4660>
  50:	61000065 	tstvs	r0, r5, rrx
  54:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
  58:	70736964 	rsbsvc	r6, r3, r4, ror #18
  5c:	2e79616c 	rpwcsez	f6, f1, #4.0
  60:	00010063 	andeq	r0, r1, r3, rrx
  64:	16050000 	strne	r0, [r5], -r0
  68:	10020500 	andne	r0, r2, r0, lsl #10
  6c:	15200000 	strne	r0, [r0, #-0]!
  70:	31300505 	teqcc	r0, r5, lsl #10
  74:	01053131 	tsteq	r5, r1, lsr r1
  78:	3f29052f 	svccc	0x0029052f
  7c:	05671505 	strbeq	r1, [r7, #-1285]!	; 0xfffffafb
  80:	2b05bb01 	blcs	16ec8c <startup-0x1fe91374>
  84:	67150577 			; <UNDEFINED> instruction: 0x67150577
  88:	054a2305 	strbeq	r2, [sl, #-773]	; 0xfffffcfb
  8c:	01058215 	tsteq	r5, r5, lsl r2
  90:	762c055a 			; <UNDEFINED> instruction: 0x762c055a
  94:	3d670505 	cfstr64cc	mvdx0, [r7, #-20]!	; 0xffffffec
  98:	5901053d 	stmdbpl	r1, {r0, r2, r3, r4, r5, r8, sl}
  9c:	054c2a05 	strbeq	r2, [ip, #-2565]	; 0xfffff5fb
  a0:	3d3d6705 	ldccc	7, cr6, [sp, #-20]!	; 0xffffffec
  a4:	05590105 	ldrbeq	r0, [r9, #-261]	; 0xfffffefb
  a8:	05054c30 	streq	r4, [r5, #-3120]	; 0xfffff3d0
  ac:	16053d67 	strne	r3, [r5], -r7, ror #26
  b0:	3d050520 	cfstr32cc	mvfx0, [r5, #-128]	; 0xffffff80
  b4:	3d01052f 	cfstr32cc	mvfx0, [r1, #-188]	; 0xffffff44
  b8:	05682a05 	strbeq	r2, [r8, #-2565]!	; 0xfffff5fb
  bc:	2f3d3d05 	svccs	0x003d3d05
  c0:	052f1305 	streq	r1, [pc, #-773]!	; fffffdc3 <rear+0xdfffc813>
  c4:	0505200a 	streq	r2, [r5, #-10]
  c8:	3d0c053d 	cfstr32cc	mvfx0, [ip, #-244]	; 0xffffff0c
  cc:	052f0105 	streq	r0, [pc, #-261]!	; ffffffcf <rear+0xdfffca1f>
  d0:	05057626 	streq	r7, [r5, #-1574]	; 0xfffff9da
  d4:	201a053d 	andscs	r0, sl, sp, lsr r5
  d8:	3d2f0505 	cfstr32cc	mvfx0, [pc, #-20]!	; cc <startup-0x1fffff34>
  dc:	053d1405 	ldreq	r1, [sp, #-1029]!	; 0xfffffbfb
  e0:	1a055905 	bne	1564fc <startup-0x1fea9b04>
  e4:	2f0c0520 	svccs	0x000c0520
  e8:	052f0105 	streq	r0, [pc, #-261]!	; ffffffeb <rear+0xdfffca3b>
  ec:	05058424 	streq	r8, [r5, #-1060]	; 0xfffffbdc
  f0:	201a053d 	andscs	r0, sl, sp, lsr r5
  f4:	3d2f0505 	cfstr32cc	mvfx0, [pc, #-20]!	; e8 <startup-0x1fffff18>
  f8:	053d1405 	ldreq	r1, [sp, #-1029]!	; 0xfffffbfb
  fc:	1a055905 	bne	156518 <startup-0x1fea9ae8>
 100:	2f0c0520 	svccs	0x000c0520
 104:	052f0105 	streq	r0, [pc, #-261]!	; 7 <startup-0x1ffffff9>
 108:	0a058415 	beq	161164 <startup-0x1fe9ee9c>
 10c:	000c052f 	andeq	r0, ip, pc, lsr #10
 110:	20010402 	andcs	r0, r1, r2, lsl #8
 114:	02002005 	andeq	r2, r0, #5, 0
 118:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 11c:	0402000a 	streq	r0, [r2], #-10
 120:	05053c01 	streq	r3, [r5, #-3073]	; 0xfffff3ff
 124:	053d3d2f 	ldreq	r3, [sp, #-3375]!	; 0xfffff2d1
 128:	13053d01 	movwne	r3, #23809	; 0x5d01
 12c:	2f0a053e 	svccs	0x000a053e
 130:	02000c05 	andeq	r0, r0, #1280	; 0x500
 134:	05200104 	streq	r0, [r0, #-260]!	; 0xfffffefc
 138:	04020020 	streq	r0, [r2], #-32	; 0xffffffe0
 13c:	0a053c01 	beq	14f148 <startup-0x1feb0eb8>
 140:	01040200 	mrseq	r0, R12_usr
 144:	2f05053c 	svccs	0x0005053c
 148:	01053d3d 	tsteq	r5, sp, lsr sp
 14c:	3e17053d 	mrccc	5, 0, r0, cr7, cr13, {1}
 150:	052f0a05 	streq	r0, [pc, #-2565]!	; fffff753 <rear+0xdfffc1a3>
 154:	0402000c 	streq	r0, [r2], #-12
 158:	20052001 	andcs	r2, r5, r1
 15c:	01040200 	mrseq	r0, R12_usr
 160:	000a053c 	andeq	r0, sl, ip, lsr r5
 164:	3c010402 	cfstrscc	mvf0, [r1], {2}
 168:	3d2f0505 	cfstr32cc	mvfx0, [pc, #-20]!	; 15c <startup-0x1ffffea4>
 16c:	3d01053d 	cfstr32cc	mvfx0, [r1, #-244]	; 0xffffff0c
 170:	053e1605 	ldreq	r1, [lr, #-1541]!	; 0xfffff9fb
 174:	0c052f0a 	stceq	15, cr2, [r5], {10}
 178:	01040200 	mrseq	r0, R12_usr
 17c:	00200520 	eoreq	r0, r0, r0, lsr #10
 180:	3c010402 	cfstrscc	mvf0, [r1], {2}
 184:	02000a05 	andeq	r0, r0, #20480	; 0x5000
 188:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 18c:	3d3d2f05 	ldccc	15, cr2, [sp, #-20]!	; 0xffffffec
 190:	053d0105 	ldreq	r0, [sp, #-261]!	; 0xfffffefb
 194:	05053e27 	streq	r3, [r5, #-3623]	; 0xfffff1d9
 198:	05593d68 	ldrbeq	r3, [r9, #-3432]	; 0xfffff298
 19c:	20053d01 	andcs	r3, r5, r1, lsl #26
 1a0:	5a07054c 	bpl	1c16d8 <startup-0x1fe3e928>
 1a4:	053d1805 	ldreq	r1, [sp, #-2053]!	; 0xfffff7fb
 1a8:	13052e11 	movwne	r2, #24081	; 0x5e11
 1ac:	2e110559 	mrccs	5, 0, r0, cr1, cr9, {2}
 1b0:	9f4c0505 	svcls	0x004c0505
 1b4:	023d0105 	eorseq	r0, sp, #1073741825	; 0x40000001
 1b8:	01010004 	tsteq	r1, r4
 1bc:	00000532 	andeq	r0, r0, r2, lsr r5
 1c0:	008d0003 	addeq	r0, sp, r3
 1c4:	01020000 	mrseq	r0, (UNDEF: 2)
 1c8:	000d0efb 	strdeq	r0, [sp], -fp
 1cc:	01010101 	tsteq	r1, r1, lsl #2
 1d0:	01000000 	mrseq	r0, (UNDEF: 0)
 1d4:	2f010000 	svccs	0x00010000
 1d8:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
 1dc:	6f672f73 	svcvs	0x00672f73
 1e0:	6d756c6c 	ldclvs	12, cr6, [r5, #-432]!	; 0xfffffe50
 1e4:	636f442f 	cmnvs	pc, #788529152	; 0x2f000000
 1e8:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
 1ec:	6d2f7374 	stcvs	3, cr7, [pc, #-464]!	; 24 <startup-0x1fffffdc>
 1f0:	616c706f 	cmnvs	ip, pc, rrx
 1f4:	61726f62 	cmnvs	r2, r2, ror #30
 1f8:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 1fc:	4d2f7265 	sfmmi	f7, 4, [pc, #-404]!	; 70 <startup-0x1fffff90>
 200:	532d504f 			; <UNDEFINED> instruction: 0x532d504f
 204:	2f6c6570 	svccs	0x006c6570
 208:	6b616e53 	blvs	185bb5c <startup-0x1e7a44a4>
 20c:	73000065 	movwvc	r0, #101	; 0x65
 210:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
 214:	632e7075 			; <UNDEFINED> instruction: 0x632e7075
 218:	00000100 	andeq	r0, r0, r0, lsl #2
 21c:	6d6f6567 	cfstr64vs	mvdx6, [pc, #-412]!	; 88 <startup-0x1fffff78>
 220:	69727465 	ldmdbvs	r2!, {r0, r2, r5, r6, sl, ip, sp, lr}^
 224:	6a626f63 	bvs	189bfb8 <startup-0x1e764048>
 228:	2e746365 	cdpcs	3, 7, cr6, cr4, cr5, {3}
 22c:	00010068 	andeq	r0, r1, r8, rrx
 230:	61726700 	cmnvs	r2, r0, lsl #14
 234:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 238:	70736964 	rsbsvc	r6, r3, r4, ror #18
 23c:	2e79616c 	rpwcsez	f6, f1, #4.0
 240:	00010068 	andeq	r0, r1, r8, rrx
 244:	616d6900 	cmnvs	sp, r0, lsl #18
 248:	782e6567 	stmdavc	lr!, {r0, r1, r2, r5, r6, r8, sl, sp, lr}
 24c:	01006d62 	tsteq	r0, r2, ror #26
 250:	05000000 	streq	r0, [r0, #-0]
 254:	02050001 	andeq	r0, r5, #1, 0
 258:	20000000 	andcs	r0, r0, r0
 25c:	13011a03 	movwne	r1, #6659	; 0x1a03
 260:	212f2121 			; <UNDEFINED> instruction: 0x212f2121
 264:	01000302 	tsteq	r0, r2, lsl #6
 268:	00390501 	eorseq	r0, r9, r1, lsl #10
 26c:	02f80205 	rscseq	r0, r8, #1342177280	; 0x50000000
 270:	21032000 	mrscs	r2, (UNDEF: 3)
 274:	670d0501 	strvs	r0, [sp, -r1, lsl #10]
 278:	3d01053d 	cfstr32cc	mvfx0, [r1, #-244]	; 0xffffff0c
 27c:	054c1c05 	strbeq	r1, [ip, #-3077]	; 0xfffff3fb
 280:	05054b0e 	streq	r4, [r5, #-2830]	; 0xfffff4f2
 284:	0010052e 	andseq	r0, r0, lr, lsr #10
 288:	21030402 	tstcs	r3, r2, lsl #8
 28c:	02001c05 	andeq	r1, r0, #1280	; 0x500
 290:	052e0304 	streq	r0, [lr, #-772]!	; 0xfffffcfc
 294:	04020020 	streq	r0, [r2], #-32	; 0xffffffe0
 298:	1e057403 	cdpne	4, 0, cr7, cr5, cr3, {0}
 29c:	03040200 	movweq	r0, #16896	; 0x4200
 2a0:	0009052e 	andeq	r0, r9, lr, lsr #10
 2a4:	20030402 	andcs	r0, r3, r2, lsl #8
 2a8:	02002805 	andeq	r2, r0, #327680	; 0x50000
 2ac:	05200304 	streq	r0, [r0, #-772]!	; 0xfffffcfc
 2b0:	04020034 	streq	r0, [r2], #-52	; 0xffffffcc
 2b4:	38052e03 	stmdacc	r5, {r0, r1, r9, sl, fp, sp}
 2b8:	03040200 	movweq	r0, #16896	; 0x4200
 2bc:	00360574 	eorseq	r0, r6, r4, ror r5
 2c0:	2e030402 	cdpcs	4, 0, cr0, cr3, cr2, {0}
 2c4:	02000905 	andeq	r0, r0, #81920	; 0x14000
 2c8:	05200304 	streq	r0, [r0, #-772]!	; 0xfffffcfc
 2cc:	0402002b 	streq	r0, [r2], #-43	; 0xffffffd5
 2d0:	18053b03 	stmdane	r5, {r0, r1, r8, r9, fp, ip, sp}
 2d4:	01040200 	mrseq	r0, R12_usr
 2d8:	001d053c 	andseq	r0, sp, ip, lsr r5
 2dc:	2e010402 	cdpcs	4, 0, cr0, cr1, cr2, {0}
 2e0:	02000505 	andeq	r0, r0, #20971520	; 0x1400000
 2e4:	05200104 	streq	r0, [r0, #-260]!	; 0xfffffefc
 2e8:	1d053f01 	stcne	15, cr3, [r5, #-4]
 2ec:	4b0e055a 	blmi	38185c <startup-0x1fc7e7a4>
 2f0:	052e0505 	streq	r0, [lr, #-1285]!	; 0xfffffafb
 2f4:	04020010 	streq	r0, [r2], #-16
 2f8:	1c052103 	stfnes	f2, [r5], {3}
 2fc:	03040200 	movweq	r0, #16896	; 0x4200
 300:	0020052e 	eoreq	r0, r0, lr, lsr #10
 304:	74030402 	strvc	r0, [r3], #-1026	; 0xfffffbfe
 308:	02001e05 	andeq	r1, r0, #80	; 0x50
 30c:	052e0304 	streq	r0, [lr, #-772]!	; 0xfffffcfc
 310:	04020009 	streq	r0, [r2], #-9
 314:	28052003 	stmdacs	r5, {r0, r1, sp}
 318:	03040200 	movweq	r0, #16896	; 0x4200
 31c:	00340520 	eorseq	r0, r4, r0, lsr #10
 320:	2e030402 	cdpcs	4, 0, cr0, cr3, cr2, {0}
 324:	02003805 	andeq	r3, r0, #327680	; 0x50000
 328:	05740304 	ldrbeq	r0, [r4, #-772]!	; 0xfffffcfc
 32c:	04020036 	streq	r0, [r2], #-54	; 0xffffffca
 330:	09052e03 	stmdbeq	r5, {r0, r1, r9, sl, fp, sp}
 334:	03040200 	movweq	r0, #16896	; 0x4200
 338:	002d0520 	eoreq	r0, sp, r0, lsr #10
 33c:	3b030402 	blcc	c134c <startup-0x1ff3ecb4>
 340:	02001a05 	andeq	r1, r0, #20480	; 0x5000
 344:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 348:	0402001f 	streq	r0, [r2], #-31	; 0xffffffe1
 34c:	05052e01 	streq	r2, [r5, #-3585]	; 0xfffff1ff
 350:	01040200 	mrseq	r0, R12_usr
 354:	3f010520 	svccc	0x00010520
 358:	055a1c05 	ldrbeq	r1, [sl, #-3077]	; 0xfffff3fb
 35c:	1a054d10 	bne	1537a4 <startup-0x1feac85c>
 360:	2e17052e 	cfmul64cs	mvdx0, mvdx7, mvdx14
 364:	05200d05 	streq	r0, [r0, #-3333]!	; 0xfffff2fb
 368:	1a052f10 	bne	14bfb0 <startup-0x1feb4050>
 36c:	2e17052e 	cfmul64cs	mvdx0, mvdx7, mvdx14
 370:	05200d05 	streq	r0, [r0, #-3333]!	; 0xfffff2fb
 374:	1205320a 	andne	r3, r5, #-1610612736	; 0xa0000000
 378:	2e10052e 	cfmul64cs	mvdx0, mvdx0, mvdx14
 37c:	05200705 	streq	r0, [r0, #-1797]!	; 0xfffff8fb
 380:	05592f11 	ldrbeq	r2, [r9, #-3857]	; 0xfffff0ef
 384:	12053f0a 	andne	r3, r5, #10, 30	; 0x28
 388:	2e10052e 	cfmul64cs	mvdx0, mvdx0, mvdx14
 38c:	05200705 	streq	r0, [r0, #-1797]!	; 0xfffff8fb
 390:	10052f11 	andne	r2, r5, r1, lsl pc
 394:	3f0a0559 	svccc	0x000a0559
 398:	052e1205 	streq	r1, [lr, #-517]!	; 0xfffffdfb
 39c:	07052e10 	smladeq	r5, r0, lr, r2
 3a0:	2f110520 	svccs	0x00110520
 3a4:	3f0a0559 	svccc	0x000a0559
 3a8:	052e1205 	streq	r1, [lr, #-517]!	; 0xfffffdfb
 3ac:	07052e10 	smladeq	r5, r0, lr, r2
 3b0:	2f110520 	svccs	0x00110520
 3b4:	3e050559 	cfrshl32cc	mvfx5, mvfx9, r0
 3b8:	054b0105 	strbeq	r0, [fp, #-261]	; 0xfffffefb
 3bc:	00dd034f 	sbcseq	r0, sp, pc, asr #6
 3c0:	750e054a 	strvc	r0, [lr, #-1354]	; 0xfffffab6
 3c4:	054b0f05 	strbeq	r0, [fp, #-3845]	; 0xfffff0fb
 3c8:	01054b0d 	tsteq	r5, sp, lsl #22
 3cc:	4c2a053d 	cfstr32mi	mvfx0, [sl], #-244	; 0xffffff0c
 3d0:	05690905 	strbeq	r0, [r9, #-2309]!	; 0xfffff6fb
 3d4:	07052e15 	smladeq	r5, r5, lr, r2
 3d8:	2f1b053c 	svccs	0x001b053c
 3dc:	052e2205 	streq	r2, [lr, #-517]!	; 0xfffffdfb
 3e0:	1b052e18 	blne	14bc48 <startup-0x1feb43b8>
 3e4:	2e220530 	mcrcs	5, 1, r0, cr2, cr0, {1}
 3e8:	052e1805 	streq	r1, [lr, #-2053]!	; 0xfffff7fb
 3ec:	0505310c 	streq	r3, [r5, #-268]	; 0xfffffef4
 3f0:	2110052e 	tstcs	r0, lr, lsr #10
 3f4:	052e0905 	streq	r0, [lr, #-2309]!	; 0xfffff6fb
 3f8:	2b052123 	blcs	14888c <startup-0x1feb7774>
 3fc:	3c3b052e 	cfldr32cc	mvfx0, [fp], #-184	; 0xffffff48
 400:	052e2905 	streq	r2, [lr, #-2309]!	; 0xfffff6fb
 404:	1405201b 	strne	r2, [r5], #-27	; 0xffffffe5
 408:	2e0d054b 	cfsh32cs	mvfx0, mvfx13, #43
 40c:	05211505 	streq	r1, [r1, #-1285]!	; 0xfffffafb
 410:	1d058214 	sfmne	f0, 1, [r5, #-80]	; 0xffffffb0
 414:	2e210521 	cfsh64cs	mvdx0, mvdx1, #17
 418:	052e2505 	streq	r2, [lr, #-1285]!	; 0xfffffafb
 41c:	15052e29 	strne	r2, [r5, #-3625]	; 0xfffff1d7
 420:	20300520 	eorscs	r0, r0, r0, lsr #10
 424:	053c3405 	ldreq	r3, [ip, #-1029]!	; 0xfffffbfb
 428:	21052015 	tstcs	r5, r5, lsl r0
 42c:	02040200 	andeq	r0, r4, #0, 4
 430:	000d053a 	andeq	r0, sp, sl, lsr r5
 434:	3c010402 	cfstrscc	mvf0, [r1], {2}
 438:	02002a05 	andeq	r2, r0, #20480	; 0x5000
 43c:	053a0204 	ldreq	r0, [sl, #-516]!	; 0xfffffdfc
 440:	04020009 	streq	r0, [r2], #-9
 444:	21053c01 	tstcs	r5, r1, lsl #24
 448:	02040200 	andeq	r0, r4, #0, 4
 44c:	00160549 	andseq	r0, r6, r9, asr #10
 450:	3c010402 	cfstrscc	mvf0, [r1], {2}
 454:	02000505 	andeq	r0, r0, #20971520	; 0x1400000
 458:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 45c:	3c090301 	stccc	3, cr0, [r9], {1}
 460:	055b1b05 	ldrbeq	r1, [fp, #-2821]	; 0xfffff4fb
 464:	08054b0d 	stmdaeq	r5, {r0, r2, r3, r8, r9, fp, lr}
 468:	001f052e 	andseq	r0, pc, lr, lsr #10
 46c:	2e010402 	cdpcs	4, 0, cr0, cr1, cr2, {0}
 470:	02001805 	andeq	r1, r0, #327680	; 0x50000
 474:	052e0104 	streq	r0, [lr, #-260]!	; 0xfffffefc
 478:	0e052f0d 	cdpeq	15, 0, cr2, cr5, cr13, {0}
 47c:	2e05054b 	cfsh32cs	mvfx0, mvfx5, #43
 480:	02000a05 	andeq	r0, r0, #20480	; 0x5000
 484:	05210304 	streq	r0, [r1, #-772]!	; 0xfffffcfc
 488:	0402000d 	streq	r0, [r2], #-13
 48c:	15058203 	strne	r8, [r5, #-515]	; 0xfffffdfd
 490:	03040200 	movweq	r0, #16896	; 0x4200
 494:	00090520 	andeq	r0, r9, r0, lsr #10
 498:	66030402 	strvs	r0, [r3], -r2, lsl #8
 49c:	02002a05 	andeq	r2, r0, #20480	; 0x5000
 4a0:	05490304 	strbeq	r0, [r9, #-772]	; 0xfffffcfc
 4a4:	04020017 	streq	r0, [r2], #-23	; 0xffffffe9
 4a8:	05053c01 	streq	r3, [r5, #-3073]	; 0xfffff3ff
 4ac:	01040200 	mrseq	r0, R12_usr
 4b0:	3f01052e 	svccc	0x0001052e
 4b4:	05761e05 	ldrbeq	r1, [r6, #-3589]!	; 0xfffff1fb
 4b8:	053d4b09 	ldreq	r4, [sp, #-2825]!	; 0xfffff4f7
 4bc:	05053d0d 	streq	r3, [r5, #-3341]	; 0xfffff2f3
 4c0:	0018052e 	andseq	r0, r8, lr, lsr #10
 4c4:	21030402 	tstcs	r3, r2, lsl #8
 4c8:	02000d05 	andeq	r0, r0, #320	; 0x140
 4cc:	05820304 	streq	r0, [r2, #772]	; 0x304
 4d0:	0402000a 	streq	r0, [r2], #-10
 4d4:	13052f03 	movwne	r2, #24323	; 0x5f03
 4d8:	03040200 	movweq	r0, #16896	; 0x4200
 4dc:	00100582 	andseq	r0, r0, r2, lsl #11
 4e0:	2f030402 	svccs	0x00030402
 4e4:	02001405 	andeq	r1, r0, #83886080	; 0x5000000
 4e8:	05300304 	ldreq	r0, [r0, #-772]!	; 0xfffffcfc
 4ec:	04020011 	streq	r0, [r2], #-17	; 0xffffffef
 4f0:	0a058203 	beq	160d04 <startup-0x1fe9f2fc>
 4f4:	03040200 	movweq	r0, #16896	; 0x4200
 4f8:	0013052f 	andseq	r0, r3, pc, lsr #10
 4fc:	82030402 	andhi	r0, r3, #33554432	; 0x2000000
 500:	02001005 	andeq	r1, r0, #5, 0
 504:	052f0304 	streq	r0, [pc, #-772]!	; 208 <startup-0x1ffffdf8>
 508:	04020024 	streq	r0, [r2], #-36	; 0xffffffdc
 50c:	2e790303 	cdpcs	3, 7, cr0, cr9, cr3, {0}
 510:	02001605 	andeq	r1, r0, #5242880	; 0x500000
 514:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 518:	04020005 	streq	r0, [r2], #-5
 51c:	01052e01 	tsteq	r5, r1, lsl #28
 520:	053c0903 	ldreq	r0, [ip, #-2307]!	; 0xfffff6fd
 524:	0905761e 	stmdbeq	r5, {r1, r2, r3, r4, r9, sl, ip, sp, lr}
 528:	2e150559 	mrccs	5, 0, r0, cr5, cr9, {2}
 52c:	052f0605 	streq	r0, [pc, #-1541]!	; ffffff2f <rear+0xdfffc97f>
 530:	081c0301 	ldmdaeq	ip, {r0, r8, r9}
 534:	03140520 	tsteq	r4, #32, 10	; 0x8000000
 538:	0f052066 	svceq	0x00052066
 53c:	2f12052e 	svccs	0x0012052e
 540:	052e1105 	streq	r1, [lr, #-261]!	; 0xfffffefb
 544:	0d054b1a 	vstreq	d4, [r5, #-104]	; 0xffffff98
 548:	2214053e 	andscs	r0, r4, #260046848	; 0xf800000
 54c:	052e0f05 	streq	r0, [lr, #-3845]!	; 0xfffff0fb
 550:	11052f12 	tstne	r5, r2, lsl pc
 554:	591a052e 	ldmdbpl	sl, {r1, r2, r3, r5, r8, sl}
 558:	053e0d05 	ldreq	r0, [lr, #-3333]!	; 0xfffff2fb
 55c:	0f052214 	svceq	0x00052214
 560:	2f12052e 	svccs	0x0012052e
 564:	052e1105 	streq	r1, [lr, #-261]!	; 0xfffffefb
 568:	0d05591a 	vstreq.16	s10, [r5, #-52]	; 0xffffffcc	; <UNPREDICTABLE>
 56c:	2214053e 	andscs	r0, r4, #260046848	; 0xf800000
 570:	052e0f05 	streq	r0, [lr, #-3845]!	; 0xfffff0fb
 574:	11052f12 	tstne	r5, r2, lsl pc
 578:	4b1a052e 	blmi	681a38 <startup-0x1f97e5c8>
 57c:	033e0d05 	teqeq	lr, #320	; 0x140
 580:	3434206e 	ldrtcc	r2, [r4], #-110	; 0xffffff92
 584:	24010534 	strcs	r0, [r1], #-1332	; 0xfffffacc
 588:	05ca1405 	strbeq	r1, [sl, #1029]	; 0x405
 58c:	13053505 	movwne	r3, #21765	; 0x5505
 590:	2f050520 	svccs	0x00050520
 594:	05201405 	streq	r1, [r0, #-1029]!	; 0xfffffbfb
 598:	15052f05 	strne	r2, [r5, #-3845]	; 0xfffff0fb
 59c:	30050520 	andcc	r0, r5, r0, lsr #10
 5a0:	05201305 	streq	r1, [r0, #-773]!	; 0xfffffcfb
 5a4:	13052f05 	movwne	r2, #24325	; 0x5f05
 5a8:	3d050520 	cfstr32cc	mvfx0, [r5, #-128]	; 0xffffff80
 5ac:	2f201305 	svccs	0x00201305
 5b0:	05750505 	ldrbeq	r0, [r5, #-1285]!	; 0xfffffafb
 5b4:	01052014 	tsteq	r5, r4, lsl r0
 5b8:	081b052f 	ldmdaeq	fp, {r0, r1, r2, r3, r5, r8, sl}
 5bc:	4b090514 	blmi	241a14 <startup-0x1fdbe5ec>
 5c0:	052f0e05 	streq	r0, [pc, #-3589]!	; fffff7c3 <rear+0xdfffc213>
 5c4:	0b052e05 	bleq	14bde0 <startup-0x1feb4220>
 5c8:	3d0e0521 	cfstr32cc	mvfx0, [lr, #-132]	; 0xffffff7c
 5cc:	05821605 	streq	r1, [r2, #1541]	; 0x605
 5d0:	16053e0e 	strne	r3, [r5], -lr, lsl #28
 5d4:	00170582 	andseq	r0, r7, r2, lsl #11
 5d8:	30020402 	andcc	r0, r2, r2, lsl #8
 5dc:	02000a05 	andeq	r0, r0, #20480	; 0x5000
 5e0:	052e0204 	streq	r0, [lr, #-516]!	; 0xfffffdfc
 5e4:	0402001b 	streq	r0, [r2], #-27	; 0xffffffe5
 5e8:	13058202 	movwne	r8, #20994	; 0x5202
 5ec:	02040200 	andeq	r0, r4, #0, 4
 5f0:	000a0520 	andeq	r0, sl, r0, lsr #10
 5f4:	21020402 	tstcs	r2, r2, lsl #8
 5f8:	02001305 	andeq	r1, r0, #335544320	; 0x14000000
 5fc:	05820204 	streq	r0, [r2, #516]	; 0x204
 600:	0402000a 	streq	r0, [r2], #-10
 604:	13052f02 	movwne	r2, #24322	; 0x5f02
 608:	02040200 	andeq	r0, r4, #0, 4
 60c:	000a0582 	andeq	r0, sl, r2, lsl #11
 610:	2f020402 	svccs	0x00020402
 614:	02001305 	andeq	r1, r0, #335544320	; 0x14000000
 618:	05820204 	streq	r0, [r2, #516]	; 0x204
 61c:	0402000a 	streq	r0, [r2], #-10
 620:	13052f02 	movwne	r2, #24322	; 0x5f02
 624:	02040200 	andeq	r0, r4, #0, 4
 628:	000a0582 	andeq	r0, sl, r2, lsl #11
 62c:	2f020402 	svccs	0x00020402
 630:	02001405 	andeq	r1, r0, #83886080	; 0x5000000
 634:	05820204 	streq	r0, [r2, #516]	; 0x204
 638:	0402000a 	streq	r0, [r2], #-10
 63c:	13052f02 	movwne	r2, #24322	; 0x5f02
 640:	02040200 	andeq	r0, r4, #0, 4
 644:	000a0582 	andeq	r0, sl, r2, lsl #11
 648:	2f020402 	svccs	0x00020402
 64c:	02001805 	andeq	r1, r0, #327680	; 0x50000
 650:	05820204 	streq	r0, [r2, #516]	; 0x204
 654:	04020012 	streq	r0, [r2], #-18	; 0xffffffee
 658:	1e052f02 	cdpne	15, 0, cr2, cr5, cr2, {0}
 65c:	02040200 	andeq	r0, r4, #0, 4
 660:	05587203 	ldrbeq	r7, [r8, #-515]	; 0xfffffdfd
 664:	04020023 	streq	r0, [r2], #-35	; 0xffffffdd
 668:	05053c02 	streq	r3, [r5, #-3074]	; 0xfffff3fe
 66c:	01040200 	mrseq	r0, R12_usr
 670:	0301053c 	movweq	r0, #5436	; 0x153c
 674:	14053c10 	strne	r3, [r5], #-3088	; 0xfffff3f0
 678:	09053008 	stmdbeq	r5, {r3, ip, sp}
 67c:	10052f2f 	andne	r2, r5, pc, lsr #30
 680:	3d13052f 	cfldr32cc	mvfx0, [r3, #-188]	; 0xffffff44
 684:	053d0105 	ldreq	r0, [sp, #-261]!	; 0xfffffefb
 688:	09058421 	stmdbeq	r5, {r0, r5, sl, pc}
 68c:	4a130567 	bmi	4c1c30 <startup-0x1fb3e3d0>
 690:	054d0d05 	strbeq	r0, [sp, #-3333]	; 0xfffff2fb
 694:	2f2f4e05 	svccs	0x002f4e05
 698:	05300a05 	ldreq	r0, [r0, #-2565]!	; 0xfffff5fb
 69c:	200d030b 	andcs	r0, sp, fp, lsl #6
 6a0:	05590d05 	ldrbeq	r0, [r9, #-3333]	; 0xfffff2fb
 6a4:	0d052f15 	stceq	15, cr2, [r5, #-84]	; 0xffffffac
 6a8:	5b0e053d 	blpl	381ba4 <startup-0x1fc7e45c>
 6ac:	31210d05 			; <UNDEFINED> instruction: 0x31210d05
 6b0:	311a055a 	tstcc	sl, sl, asr r5
 6b4:	05670d05 	strbeq	r0, [r7, #-3333]!	; 0xfffff2fb
 6b8:	1105911d 	tstne	r5, sp, lsl r1
 6bc:	211c0566 	tstcs	ip, r6, ror #10
 6c0:	05661105 	strbeq	r1, [r6, #-261]!	; 0xfffffefb
 6c4:	1105211a 	tstne	r5, sl, lsl r1
 6c8:	211c0566 	tstcs	ip, r6, ror #10
 6cc:	05661105 	strbeq	r1, [r6, #-261]!	; 0xfffffefb
 6d0:	2e052121 	adfcssp	f2, f5, f1
 6d4:	4a11054a 	bmi	441c04 <startup-0x1fbbe3fc>
 6d8:	05212705 	streq	r2, [r1, #-1797]!	; 0xfffff8fb
 6dc:	0e054a11 			; <UNDEFINED> instruction: 0x0e054a11
 6e0:	05207003 	streq	r7, [r0, #-3]!
 6e4:	666d030a 	strbtvs	r0, [sp], -sl, lsl #6
 6e8:	28030105 	stmdacs	r3, {r0, r2, r8}
 6ec:	00160258 	andseq	r0, r6, r8, asr r2
 6f0:	00e70101 	rsceq	r0, r7, r1, lsl #2
 6f4:	00030000 	andeq	r0, r3, r0
 6f8:	00000054 	andeq	r0, r0, r4, asr r0
 6fc:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
 700:	0101000d 	tsteq	r1, sp
 704:	00000101 	andeq	r0, r0, r1, lsl #2
 708:	00000100 	andeq	r0, r0, r0, lsl #2
 70c:	73552f01 	cmpvc	r5, #1, 30
 710:	2f737265 	svccs	0x00737265
 714:	6c6c6f67 	stclvs	15, cr6, [ip], #-412	; 0xfffffe64
 718:	442f6d75 	strtmi	r6, [pc], #-3445	; 720 <startup-0x1ffff8e0>
 71c:	6d75636f 	ldclvs	3, cr6, [r5, #-444]!	; 0xfffffe44
 720:	73746e65 	cmnvc	r4, #1616	; 0x650
 724:	706f6d2f 	rsbvc	r6, pc, pc, lsr #26
 728:	6f62616c 	svcvs	0x0062616c
 72c:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
 730:	72656e6f 	rsbvc	r6, r5, #1776	; 0x6f0
 734:	504f4d2f 	subpl	r4, pc, pc, lsr #26
 738:	6570532d 	ldrbvs	r5, [r0, #-813]!	; 0xfffffcd3
 73c:	6e532f6c 	cdpvs	15, 5, cr2, cr3, cr12, {3}
 740:	00656b61 	rsbeq	r6, r5, r1, ror #22
 744:	79656b00 	stmdbvc	r5!, {r8, r9, fp, sp, lr}^
 748:	00632e62 	rsbeq	r2, r3, r2, ror #28
 74c:	00000001 	andeq	r0, r0, r1
 750:	05001905 	streq	r1, [r0, #-2309]	; 0xfffff6fb
 754:	000a0c02 	andeq	r0, sl, r2, lsl #24
 758:	1f051520 	svcne	0x00051520
 75c:	2e1a054b 	cfmac32cs	mvfx0, mvfx10, mvfx11
 760:	052e0505 	streq	r0, [lr, #-1285]!	; 0xfffffafb
 764:	01052016 	tsteq	r5, r6, lsl r0
 768:	7613052f 	ldrvc	r0, [r3], -pc, lsr #10
 76c:	053e1205 	ldreq	r1, [lr, #-517]!	; 0xfffffdfb
 770:	0b05200a 	bleq	1487a0 <startup-0x1feb7860>
 774:	2e05053d 	mcrcs	5, 0, r0, cr5, cr13, {1}
 778:	05210d05 	streq	r0, [r1, #-3333]!	; 0xfffff2fb
 77c:	1405740c 	strne	r7, [r5], #-1036	; 0xfffffbf4
 780:	00170521 	andseq	r0, r7, r1, lsr #10
 784:	2c020402 	cfstrscs	mvf0, [r2], {2}
 788:	02000505 	andeq	r0, r0, #20971520	; 0x1400000
 78c:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 790:	0105410c 	tsteq	r5, ip, lsl #2
 794:	6919052f 	ldmdbvs	r9, {r0, r1, r2, r3, r5, r8, sl}
 798:	753d1305 	ldrvc	r1, [sp, #-773]!	; 0xfffffcfb
 79c:	056a0e05 	strbeq	r0, [sl, #-3589]!	; 0xfffff1fb
 7a0:	09052e05 	stmdbeq	r5, {r0, r2, r9, sl, fp, sp}
 7a4:	4b130521 	blmi	4c1c30 <startup-0x1fb3e3d0>
 7a8:	054b0c05 	strbeq	r0, [fp, #-3077]	; 0xfffff3fb
 7ac:	22053d26 	andcs	r3, r5, #2432	; 0x980
 7b0:	2e1a052e 	cfmul64cs	mvdx0, mvdx10, mvdx14
 7b4:	02001f05 	andeq	r1, r0, #5, 30
 7b8:	05380204 	ldreq	r0, [r8, #-516]!	; 0xfffffdfc
 7bc:	04020005 	streq	r0, [r2], #-5
 7c0:	0c053c01 	stceq	12, cr3, [r5], {1}
 7c4:	00010543 	andeq	r0, r1, r3, asr #10
 7c8:	21010402 	tstcs	r1, r2, lsl #8
 7cc:	05841e05 	streq	r1, [r4, #3589]	; 0xe05
 7d0:	15056805 	strne	r6, [r5, #-2053]	; 0xfffff7fb
 7d4:	3e010520 	cfsh32cc	mvfx0, mvfx1, #16
 7d8:	01000602 	tsteq	r0, r2, lsl #12
 7dc:	00009c01 	andeq	r9, r0, r1, lsl #24
 7e0:	55000300 	strpl	r0, [r0, #-768]	; 0xfffffd00
 7e4:	02000000 	andeq	r0, r0, #0, 0
 7e8:	0d0efb01 	vstreq	d15, [lr, #-4]
 7ec:	01010100 	mrseq	r0, (UNDEF: 17)
 7f0:	00000001 	andeq	r0, r0, r1
 7f4:	01000001 	tsteq	r0, r1
 7f8:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
 7fc:	672f7372 			; <UNDEFINED> instruction: 0x672f7372
 800:	756c6c6f 	strbvc	r6, [ip, #-3183]!	; 0xfffff391
 804:	6f442f6d 	svcvs	0x00442f6d
 808:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0xfffffa9d
 80c:	2f73746e 	svccs	0x0073746e
 810:	6c706f6d 	ldclvs	15, cr6, [r0], #-436	; 0xfffffe4c
 814:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
 818:	6f697461 	svcvs	0x00697461
 81c:	2f72656e 	svccs	0x0072656e
 820:	2d504f4d 	ldclcs	15, cr4, [r0, #-308]	; 0xfffffecc
 824:	6c657053 	stclvs	0, cr7, [r5], #-332	; 0xfffffeb4
 828:	616e532f 	cmnvs	lr, pc, lsr #6
 82c:	0000656b 	andeq	r6, r0, fp, ror #10
 830:	616c6564 	cmnvs	ip, r4, ror #10
 834:	00632e79 	rsbeq	r2, r3, r9, ror lr
 838:	00000001 	andeq	r0, r0, r1
 83c:	05001905 	streq	r1, [r0, #-2309]	; 0xfffff6fb
 840:	000afc02 	andeq	pc, sl, r2, lsl #24
 844:	09051620 	stmdbeq	r5, {r5, r9, sl, ip}
 848:	03010530 	movweq	r0, #5424	; 0x1530
 84c:	17052009 	strne	r2, [r5, -r9]
 850:	30090530 	andcc	r0, r9, r0, lsr r5
 854:	05240105 	streq	r0, [r4, #-261]!	; 0xfffffefb
 858:	09053022 	stmdbeq	r5, {r1, r5, ip, sp}
 85c:	2801054c 	stmdacs	r1, {r2, r3, r6, r8, sl}
 860:	053e2205 	ldreq	r2, [lr, #-517]!	; 0xfffffdfb
 864:	0b054c0c 	bleq	15389c <startup-0x1feac764>
 868:	3f0a0583 	svccc	0x000a0583
 86c:	05210905 	streq	r0, [r1, #-2309]!	; 0xfffff6fb
 870:	0a05570d 	beq	1564ac <startup-0x1fea9b54>
 874:	3101053c 	tstcc	r1, ip, lsr r5
 878:	01000502 	tsteq	r0, r2, lsl #10
 87c:	0002c801 	andeq	ip, r2, r1, lsl #16
 880:	81000300 	mrshi	r0, LR_irq
 884:	02000000 	andeq	r0, r0, #0, 0
 888:	0d0efb01 	vstreq	d15, [lr, #-4]
 88c:	01010100 	mrseq	r0, (UNDEF: 17)
 890:	00000001 	andeq	r0, r0, r1
 894:	01000001 	tsteq	r0, r1
 898:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
 89c:	672f7372 			; <UNDEFINED> instruction: 0x672f7372
 8a0:	756c6c6f 	strbvc	r6, [ip, #-3183]!	; 0xfffff391
 8a4:	6f442f6d 	svcvs	0x00442f6d
 8a8:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0xfffffa9d
 8ac:	2f73746e 	svccs	0x0073746e
 8b0:	6c706f6d 	ldclvs	15, cr6, [r0], #-436	; 0xfffffe4c
 8b4:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
 8b8:	6f697461 	svcvs	0x00697461
 8bc:	2f72656e 	svccs	0x0072656e
 8c0:	2d504f4d 	ldclcs	15, cr4, [r0, #-308]	; 0xfffffecc
 8c4:	6c657053 	stclvs	0, cr7, [r5], #-332	; 0xfffffeb4
 8c8:	616e532f 	cmnvs	lr, pc, lsr #6
 8cc:	2e00656b 	cfsh32cs	mvfx6, mvfx0, #59
 8d0:	72670000 	rsbvc	r0, r7, #0, 0
 8d4:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 8d8:	73696463 	cmnvc	r9, #1660944384	; 0x63000000
 8dc:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 8e0:	0100632e 	tsteq	r0, lr, lsr #6
 8e4:	72670000 	rsbvc	r0, r7, #0, 0
 8e8:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 8ec:	73696463 	cmnvc	r9, #1660944384	; 0x63000000
 8f0:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 8f4:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
 8f8:	65640000 	strbvs	r0, [r4, #-0]!
 8fc:	656e6966 	strbvs	r6, [lr, #-2406]!	; 0xfffff69a
 900:	00682e73 	rsbeq	r2, r8, r3, ror lr
 904:	00000002 	andeq	r0, r0, r2
 908:	05001805 	streq	r1, [r0, #-2053]	; 0xfffff7fb
 90c:	000b6002 	andeq	r6, fp, r2
 910:	05051720 	streq	r1, [r5, #-1824]	; 0xfffff8e0
 914:	3d3d3d2f 	ldccc	13, cr3, [sp, #-188]!	; 0xffffff44
 918:	4b3d3d3d 	blmi	f4fe14 <startup-0x1f0b01ec>
 91c:	4b4b4b4b 	blmi	12d3650 <startup-0x1ed2c9b0>
 920:	053d0105 	ldreq	r0, [sp, #-261]!	; 0xfffffefb
 924:	08053e27 	stmdaeq	r5, {r0, r1, r2, r5, r9, sl, fp, ip, sp}
 928:	2007056a 	andcs	r0, r7, sl, ror #10
 92c:	0505bb4b 	streq	fp, [r5, #-2891]	; 0xfffff4b5
 930:	20140575 	andscs	r0, r4, r5, ror r5
 934:	053e0105 	ldreq	r0, [lr, #-261]!	; 0xfffffefb
 938:	08056825 	stmdaeq	r5, {r0, r2, r5, fp, sp, lr}
 93c:	2007056a 	andcs	r0, r7, sl, ror #10
 940:	0505754b 	streq	r7, [r5, #-1355]	; 0xfffffab5
 944:	20140567 	andscs	r0, r4, r7, ror #10
 948:	053d0105 	ldreq	r0, [sp, #-261]!	; 0xfffffefb
 94c:	0505682b 	streq	r6, [r5, #-2091]	; 0xfffff7d5
 950:	03010567 	movweq	r0, #5479	; 0x1567
 954:	0d05ba13 	vstreq	s22, [r5, #-76]	; 0xffffffb4
 958:	3d206f03 	stccc	15, cr6, [r0, #-12]!
 95c:	233d3d23 	teqcs	sp, #2240	; 0x8c0
 960:	3d233d3d 	stccc	13, cr3, [r3, #-244]!	; 0xffffff0c
 964:	05220105 	streq	r0, [r2, #-261]!	; 0xfffffefb
 968:	05054c1e 	streq	r4, [r5, #-3102]	; 0xfffff3e2
 96c:	13053d2f 	movwne	r3, #23855	; 0x5d2f
 970:	2f050520 	svccs	0x00050520
 974:	09053d3d 	stmdbeq	r5, {r0, r2, r3, r4, r5, r8, sl, fp, ip, sp}
 978:	01040200 	mrseq	r0, R12_usr
 97c:	04020030 	streq	r0, [r2], #-48	; 0xffffffd0
 980:	02003d01 	andeq	r3, r0, #64	; 0x40
 984:	002f0104 	eoreq	r0, pc, r4, lsl #2
 988:	3d010402 	cfstrscc	mvf0, [r1, #-8]
 98c:	01040200 	mrseq	r0, R12_usr
 990:	0335052b 	teqeq	r5, #180355072	; 0xac00000
 994:	0505580b 	streq	r5, [r5, #-2059]	; 0xfffff7f5
 998:	13053d67 	movwne	r3, #23911	; 0x5d67
 99c:	2f050520 	svccs	0x00050520
 9a0:	3d2f593d 			; <UNDEFINED> instruction: 0x3d2f593d
 9a4:	052f1c05 	streq	r1, [pc, #-3077]!	; fffffda7 <rear+0xdfffc7f7>
 9a8:	05052013 	streq	r2, [r5, #-19]	; 0xffffffed
 9ac:	13053d4b 	movwne	r3, #23883	; 0x5d4b
 9b0:	30140520 	andscc	r0, r4, r0, lsr #10
 9b4:	054a0805 	strbeq	r0, [sl, #-2053]	; 0xfffff7fb
 9b8:	14052109 	strne	r2, [r5], #-265	; 0xfffffef7
 9bc:	4a08053f 	bmi	201ec0 <startup-0x1fdfe140>
 9c0:	05210905 	streq	r0, [r1, #-2309]!	; 0xfffff6fb
 9c4:	01053f0c 	tsteq	r5, ip, lsl #30
 9c8:	ca2e053d 	bgt	b81ec4 <startup-0x1f47e13c>
 9cc:	59670c05 	stmdbpl	r7!, {r0, r2, sl, fp}^
 9d0:	05670105 	strbeq	r0, [r7, #-261]!	; 0xfffffefb
 9d4:	05054c36 	streq	r4, [r5, #-3126]	; 0xfffff3ca
 9d8:	20160591 	mulscs	r6, r1, r5
 9dc:	593d0505 	ldmdbpl	sp!, {r0, r2, r8, sl}
 9e0:	052f3d2f 	streq	r3, [pc, #-3375]!	; fffffcb9 <rear+0xdfffc709>
 9e4:	07053e13 	smladeq	r5, r3, lr, r3
 9e8:	2109054a 	tstcs	r9, sl, asr #10
 9ec:	053f1305 	ldreq	r1, [pc, #-773]!	; 6ef <startup-0x1ffff911>
 9f0:	09054a07 	stmdbeq	r5, {r0, r1, r2, r9, fp, lr}
 9f4:	41050521 	tstmi	r5, r1, lsr #10
 9f8:	05201605 	streq	r1, [r0, #-1541]!	; 0xfffff9fb
 9fc:	053d2f05 	ldreq	r2, [sp, #-3845]!	; 0xfffff0fb
 a00:	3c053e01 	stccc	14, cr3, [r5], {1}
 a04:	91050568 	tstls	r5, r8, ror #10
 a08:	3d3d593d 			; <UNDEFINED> instruction: 0x3d3d593d
 a0c:	05830105 	streq	r0, [r3, #261]	; 0x105
 a10:	05054c3a 	streq	r4, [r5, #-3130]	; 0xfffff3c6
 a14:	3d593d91 	ldclcc	13, cr3, [r9, #-580]	; 0xfffffdbc
 a18:	8301053d 	movwhi	r0, #5437	; 0x153d
 a1c:	054c2005 	strbeq	r2, [ip, #-5]
 a20:	05053d0e 	streq	r3, [r5, #-3342]	; 0xfffff2f2
 a24:	212c052e 			; <UNDEFINED> instruction: 0x212c052e
 a28:	59660905 	stmdbpl	r6!, {r0, r2, r8, fp}^
 a2c:	054b1205 	strbeq	r1, [fp, #-517]	; 0xfffffdfb
 a30:	0d052e09 	stceq	14, cr2, [r5, #-36]	; 0xffffffdc
 a34:	03040200 	movweq	r0, #16896	; 0x4200
 a38:	00280521 	eoreq	r0, r8, r1, lsr #10
 a3c:	49030402 	stmdbmi	r3, {r1, sl}
 a40:	02000905 	andeq	r0, r0, #81920	; 0x14000
 a44:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 a48:	04020026 	streq	r0, [r2], #-38	; 0xffffffda
 a4c:	05053902 	streq	r3, [r5, #-2306]	; 0xfffff6fe
 a50:	01040200 	mrseq	r0, R12_usr
 a54:	4301053c 	movwmi	r0, #5436	; 0x153c
 a58:	055a1805 	ldrbeq	r1, [sl, #-2053]	; 0xfffff7fb
 a5c:	05053e0c 	streq	r3, [r5, #-3596]	; 0xfffff1f4
 a60:	0017052e 	andseq	r0, r7, lr, lsr #10
 a64:	21030402 	tstcs	r3, r2, lsl #8
 a68:	02001c05 	andeq	r1, r0, #1280	; 0x500
 a6c:	05570304 	ldrbeq	r0, [r7, #-772]	; 0xfffffcfc
 a70:	04020005 	streq	r0, [r2], #-5
 a74:	01053c01 	tsteq	r5, r1, lsl #24
 a78:	8423055a 	strthi	r0, [r3], #-1370	; 0xfffffaa6
 a7c:	055a0905 	ldrbeq	r0, [sl, #-2309]	; 0xfffff6fb
 a80:	11052f08 	tstne	r5, r8, lsl #30
 a84:	02040200 	andeq	r0, r4, #0, 4
 a88:	0019053c 	andseq	r0, r9, ip, lsr r5
 a8c:	3c040402 	cfstrscc	mvf0, [r4], {2}
 a90:	02002205 	andeq	r2, r0, #1342177280	; 0x50000000
 a94:	053c0604 	ldreq	r0, [ip, #-1540]!	; 0xfffff9fc
 a98:	17053e14 	smladne	r5, r4, lr, r3
 a9c:	2e0e052e 	cfsh32cs	mvfx0, mvfx14, #30
 aa0:	052e0a05 	streq	r0, [lr, #-2565]!	; 0xfffff5fb
 aa4:	0b053e07 	bleq	1502c8 <startup-0x1feafd38>
 aa8:	3d0f053d 	cfstr32cc	mvfx0, [pc, #-244]	; 9bc <startup-0x1ffff644>
 aac:	053f1505 	ldreq	r1, [pc, #-1285]!	; 5af <startup-0x1ffffa51>
 ab0:	1b052e18 	blne	14c318 <startup-0x1feb3ce8>
 ab4:	20100520 	andscs	r0, r0, r0, lsr #10
 ab8:	052e0b05 	streq	r0, [lr, #-2821]!	; 0xfffff4fb
 abc:	2c053e17 	stccs	14, cr3, [r5], {23}
 ac0:	05d67503 	ldrbeq	r7, [r6, #1283]	; 0x503
 ac4:	200c0301 	andcs	r0, ip, r1, lsl #6
 ac8:	055a1f05 	ldrbeq	r1, [sl, #-3845]	; 0xfffff0fb
 acc:	0c053e12 	stceq	14, cr3, [r5], {18}
 ad0:	4a050530 	bmi	141f98 <startup-0x1febe068>
 ad4:	00211405 	eoreq	r1, r1, r5, lsl #8
 ad8:	06010402 	streq	r0, [r1], -r2, lsl #8
 adc:	04020058 	streq	r0, [r2], #-88	; 0xffffffa8
 ae0:	02002e02 	andeq	r2, r0, #2, 28
 ae4:	05200404 	streq	r0, [r0, #-1028]!	; 0xfffffbfc
 ae8:	04020010 	streq	r0, [r2], #-16
 aec:	052f0604 	streq	r0, [pc, #-1540]!	; 4f0 <startup-0x1ffffb10>
 af0:	04020009 	streq	r0, [r2], #-9
 af4:	0d054a04 	vstreq	s8, [r5, #-16]
 af8:	1305c921 	movwne	ip, #22817	; 0x5921
 afc:	4a0d0567 	bmi	3420a0 <startup-0x1fcbdf60>
 b00:	02002e05 	andeq	r2, r0, #80	; 0x50
 b04:	05210304 	streq	r0, [r1, #-772]!	; 0xfffffcfc
 b08:	04020011 	streq	r0, [r2], #-17	; 0xffffffef
 b0c:	22054a03 	andcs	r4, r5, #12288	; 0x3000
 b10:	03040200 	movweq	r0, #16896	; 0x4200
 b14:	00270573 	eoreq	r0, r7, r3, ror r5
 b18:	66030402 	strvs	r0, [r3], -r2, lsl #8
 b1c:	02000d05 	andeq	r0, r0, #320	; 0x140
 b20:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 b24:	0402001d 	streq	r0, [r2], #-29	; 0xffffffe3
 b28:	09055502 	stmdbeq	r5, {r1, r8, sl, ip, lr}
 b2c:	01040200 	mrseq	r0, R12_usr
 b30:	00190566 	andseq	r0, r9, r6, ror #10
 b34:	56020402 	strpl	r0, [r2], -r2, lsl #8
 b38:	02000505 	andeq	r0, r0, #20971520	; 0x1400000
 b3c:	05660104 	strbeq	r0, [r6, #-260]!	; 0xfffffefc
 b40:	580a0301 	stmdapl	sl, {r0, r8, r9}
 b44:	01000802 	tsteq	r0, r2, lsl #16
 b48:	0001ee01 	andeq	lr, r1, r1, lsl #28
 b4c:	55000300 	strpl	r0, [r0, #-768]	; 0xfffffd00
 b50:	02000001 	andeq	r0, r0, #1, 0
 b54:	0d0efb01 	vstreq	d15, [lr, #-4]
 b58:	01010100 	mrseq	r0, (UNDEF: 17)
 b5c:	00000001 	andeq	r0, r0, r1
 b60:	01000001 	tsteq	r0, r1
 b64:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
 b68:	672f7372 			; <UNDEFINED> instruction: 0x672f7372
 b6c:	756c6c6f 	strbvc	r6, [ip, #-3183]!	; 0xfffff391
 b70:	6f442f6d 	svcvs	0x00442f6d
 b74:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0xfffffa9d
 b78:	2f73746e 	svccs	0x0073746e
 b7c:	6c706f6d 	ldclvs	15, cr6, [r0], #-436	; 0xfffffe4c
 b80:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
 b84:	6f697461 	svcvs	0x00697461
 b88:	2f72656e 	svccs	0x0072656e
 b8c:	2d504f4d 	ldclcs	15, cr4, [r0, #-308]	; 0xfffffecc
 b90:	6c657053 	stclvs	0, cr7, [r5], #-332	; 0xfffffeb4
 b94:	616e532f 	cmnvs	lr, pc, lsr #6
 b98:	2f00656b 	svccs	0x0000656b
 b9c:	6c707041 	ldclvs	0, cr7, [r0], #-260	; 0xfffffefc
 ba0:	74616369 	strbtvc	r6, [r1], #-873	; 0xfffffc97
 ba4:	736e6f69 	cmnvc	lr, #420	; 0x1a4
 ba8:	646f632f 	strbtvs	r6, [pc], #-815	; bb0 <startup-0x1ffff450>
 bac:	74696c65 	strbtvc	r6, [r9], #-3173	; 0xfffff39b
 bb0:	70612e65 	rsbvc	r2, r1, r5, ror #28
 bb4:	6f432f70 	svcvs	0x00432f70
 bb8:	6e65746e 	cdpvs	4, 6, cr7, cr5, cr14, {3}
 bbc:	532f7374 			; <UNDEFINED> instruction: 0x532f7374
 bc0:	65726168 	ldrbvs	r6, [r2, #-360]!	; 0xfffffe98
 bc4:	70755364 	rsbsvc	r5, r5, r4, ror #6
 bc8:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
 bcc:	6f6f742f 	svcvs	0x006f742f
 bd0:	672f736c 	strvs	r7, [pc, -ip, ror #6]!
 bd4:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
 bd8:	612f6d72 			; <UNDEFINED> instruction: 0x612f6d72
 bdc:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
 be0:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
 be4:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
 be8:	636e692f 	cmnvs	lr, #770048	; 0xbc000
 bec:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
 bf0:	7379732f 	cmnvc	r9, #-1140850688	; 0xbc000000
 bf4:	70412f00 	subvc	r2, r1, r0, lsl #30
 bf8:	63696c70 	cmnvs	r9, #112, 24	; 0x7000
 bfc:	6f697461 	svcvs	0x00697461
 c00:	632f736e 			; <UNDEFINED> instruction: 0x632f736e
 c04:	6c65646f 	cfstrdvs	mvd6, [r5], #-444	; 0xfffffe44
 c08:	2e657469 	cdpcs	4, 6, cr7, cr5, cr9, {3}
 c0c:	2f707061 	svccs	0x00707061
 c10:	746e6f43 	strbtvc	r6, [lr], #-3907	; 0xfffff0bd
 c14:	73746e65 	cmnvc	r4, #1616	; 0x650
 c18:	6168532f 	cmnvs	r8, pc, lsr #6
 c1c:	53646572 	cmnpl	r4, #478150656	; 0x1c800000
 c20:	6f707075 	svcvs	0x00707075
 c24:	742f7472 	strtvc	r7, [pc], #-1138	; c2c <startup-0x1ffff3d4>
 c28:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
 c2c:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
 c30:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
 c34:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
 c38:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
 c3c:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
 c40:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
 c44:	61652d65 	cmnvs	r5, r5, ror #26
 c48:	392f6962 	stmdbcc	pc!, {r1, r5, r6, r8, fp, sp, lr}	; <UNPREDICTABLE>
 c4c:	312e322e 			; <UNDEFINED> instruction: 0x312e322e
 c50:	636e692f 	cmnvs	lr, #770048	; 0xbc000
 c54:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
 c58:	75710000 	ldrbvc	r0, [r1, #-0]!
 c5c:	2e657565 	cdpcs	5, 6, cr7, cr5, cr5, {3}
 c60:	00010063 	andeq	r0, r1, r3, rrx
 c64:	636f6c00 	cmnvs	pc, #0, 24
 c68:	00682e6b 	rsbeq	r2, r8, fp, ror #28
 c6c:	5f000002 	svcpl	0x00000002
 c70:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
 c74:	00682e73 	rsbeq	r2, r8, r3, ror lr
 c78:	73000002 	movwvc	r0, #2
 c7c:	65646474 	strbvs	r6, [r4, #-1140]!	; 0xfffffb8c
 c80:	00682e66 	rsbeq	r2, r8, r6, ror #28
 c84:	72000003 	andvc	r0, r0, #3, 0
 c88:	746e6565 	strbtvc	r6, [lr], #-1381	; 0xfffffa9b
 c8c:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
 c90:	65670000 	strbvs	r0, [r7, #-0]!
 c94:	74656d6f 	strbtvc	r6, [r5], #-3439	; 0xfffff291
 c98:	6f636972 	svcvs	0x00636972
 c9c:	63656a62 	cmnvs	r5, #401408	; 0x62000
 ca0:	00682e74 	rsbeq	r2, r8, r4, ror lr
 ca4:	00000001 	andeq	r0, r0, r1
 ca8:	05001205 	streq	r1, [r0, #-517]	; 0xfffffdfb
 cac:	00108402 	andseq	r8, r0, r2, lsl #8
 cb0:	01090320 	tsteq	r9, r0, lsr #6
 cb4:	053d0d05 	ldreq	r0, [sp, #-3333]!	; 0xfffff2fb
 cb8:	15052e05 	strne	r2, [r5, #-3589]	; 0xfffff1fb
 cbc:	03040200 	movweq	r0, #16896	; 0x4200
 cc0:	001e0521 	andseq	r0, lr, r1, lsr #10
 cc4:	57030402 	strpl	r0, [r3, -r2, lsl #8]
 cc8:	02000505 	andeq	r0, r0, #20971520	; 0x1400000
 ccc:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 cd0:	10053e01 	andne	r3, r5, r1, lsl #28
 cd4:	2f130577 	svccs	0x00130577
 cd8:	05590105 	ldrbeq	r0, [r9, #-261]	; 0xfffffefb
 cdc:	15057710 	strne	r7, [r5, #-1808]	; 0xfffff8f0
 ce0:	5901052f 	stmdbpl	r1, {r0, r1, r2, r3, r5, r8, sl}
 ce4:	055b0f05 	ldrbeq	r0, [fp, #-3845]	; 0xfffff0fb
 ce8:	01052f15 	tsteq	r5, r5, lsl pc
 cec:	690c0567 	stmdbvs	ip, {r0, r1, r2, r5, r6, r8, sl}
 cf0:	052f0b05 	streq	r0, [pc, #-2821]!	; 1f3 <startup-0x1ffffe0d>
 cf4:	1b052f01 	blne	14c900 <startup-0x1feb3700>
 cf8:	4c080569 	cfstr32mi	mvfx0, [r8], {105}	; 0x69
 cfc:	054a0705 	strbeq	r0, [sl, #-1797]	; 0xfffff8fb
 d00:	0f053c06 	svceq	0x00053c06
 d04:	2e090530 	cfmv64hrcs	mvdx9, r0
 d08:	052f0f05 	streq	r0, [pc, #-3845]!	; fffffe0b <rear+0xdfffc85b>
 d0c:	18054c10 	stmdane	r5, {r4, sl, fp, lr}
 d10:	2e10053c 	mrccs	5, 0, r0, cr0, cr12, {1}
 d14:	052e1805 	streq	r1, [lr, #-2053]!	; 0xfffff7fb
 d18:	01054b10 	tsteq	r5, r0, lsl fp
 d1c:	ae0e055a 	cfrshl32ge	mvfx14, mvfx10, r0
 d20:	053d2105 	ldreq	r2, [sp, #-261]!	; 0xfffffefb
 d24:	0d05580c 	stceq	8, cr5, [r5, #-48]	; 0xffffffd0
 d28:	2e06054c 	cfsh32cs	mvfx0, mvfx6, #44
 d2c:	3f2f0d05 	svccc	0x002f0d05
 d30:	05590b05 	ldrbeq	r0, [r9, #-2821]	; 0xfffff4fb
 d34:	0b022101 	bleq	89140 <startup-0x1ff76ec0>
 d38:	Address 0x0000000000000d38 is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	616c6564 	cmnvs	ip, r4, ror #10
   4:	696d5f79 	stmdbvs	sp!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
   8:	00696c6c 	rsbeq	r6, r9, ip, ror #24
   c:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
  10:	6f675f69 	svcvs	0x00675f69
  14:	79786f74 	ldmdbvc	r8!, {r2, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
  18:	63736100 	cmnvs	r3, #0
  1c:	635f6969 	cmpvs	pc, #1720320	; 0x1a4000
  20:	5f6c7274 	svcpl	0x006c7274
  24:	5f746962 	svcpl	0x00746962
  28:	61656c63 	cmnvs	r5, r3, ror #24
  2c:	65640072 	strbvs	r0, [r4, #-114]!	; 0xffffff8e
  30:	5f79616c 	svcpl	0x0079616c
  34:	726b696d 	rsbvc	r6, fp, #1785856	; 0x1b4000
  38:	7361006f 	cmnvc	r1, #111, 0	; 0x6f
  3c:	5f696963 	svcpl	0x00696963
  40:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
  44:	6f635f65 	svcvs	0x00635f65
  48:	6f72746e 	svcvs	0x0072746e
  4c:	72656c6c 	rsbvc	r6, r5, #108, 24	; 0x6c00
  50:	554e4700 	strbpl	r4, [lr, #-1792]	; 0xfffff900
  54:	39394320 	ldmdbcc	r9!, {r5, r8, r9, lr}
  58:	322e3920 	eorcc	r3, lr, #32, 18	; 0x80000
  5c:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  60:	31393130 	teqcc	r9, r0, lsr r1
  64:	20353230 	eorscs	r3, r5, r0, lsr r2
  68:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  6c:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  70:	415b2029 	cmpmi	fp, r9, lsr #32
  74:	612f4d52 			; <UNDEFINED> instruction: 0x612f4d52
  78:	392d6d72 	pushcc	{r1, r4, r5, r6, r8, sl, fp, sp, lr}
  7c:	6172622d 	cmnvs	r2, sp, lsr #4
  80:	2068636e 	rsbcs	r6, r8, lr, ror #6
  84:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
  88:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
  8c:	37373220 	ldrcc	r3, [r7, -r0, lsr #4]!
  90:	5d393935 			; <UNDEFINED> instruction: 0x5d393935
  94:	746d2d20 	strbtvc	r2, [sp], #-3360	; 0xfffff2e0
  98:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
  9c:	666d2d20 	strbtvs	r2, [sp], -r0, lsr #26
  a0:	74616f6c 	strbtvc	r6, [r1], #-3948	; 0xfffff094
  a4:	6962612d 	stmdbvs	r2!, {r0, r2, r3, r5, r8, sp, lr}^
  a8:	666f733d 			; <UNDEFINED> instruction: 0x666f733d
  ac:	6d2d2074 	stcvs	0, cr2, [sp, #-464]!	; 0xfffffe30
  b0:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
  b4:	6d72613d 	ldfvse	f6, [r2, #-244]!	; 0xffffff0c
  b8:	6d2d3676 	stcvs	6, cr3, [sp, #-472]!	; 0xfffffe28
  bc:	20672d20 	rsbcs	r2, r7, r0, lsr #26
  c0:	20304f2d 	eorscs	r4, r0, sp, lsr #30
  c4:	6474732d 	ldrbtvs	r7, [r4], #-813	; 0xfffffcd3
  c8:	3939633d 	ldmdbcc	r9!, {r0, r2, r3, r4, r5, r8, r9, sp, lr}
  cc:	63736100 	cmnvs	r3, #0
  d0:	725f6969 	subsvc	r6, pc, #1720320	; 0x1a4000
  d4:	5f646165 	svcpl	0x00646165
  d8:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
  dc:	63007375 	movwvs	r7, #885	; 0x375
  e0:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
  e4:	7369645f 	cmnvc	r9, #1593835520	; 0x5f000000
  e8:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
  ec:	63736100 	cmnvs	r3, #0
  f0:	775f6969 	ldrbvc	r6, [pc, -r9, ror #18]
  f4:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
  f8:	7461645f 	strbtvc	r6, [r1], #-1119	; 0xfffffba1
  fc:	65640061 	strbvs	r0, [r4, #-97]!	; 0xffffff9f
 100:	5f79616c 	svcpl	0x0079616c
 104:	6e303532 	mrcvs	5, 1, r3, cr0, cr2, {1}
 108:	65720073 	ldrbvs	r0, [r2, #-115]!	; 0xffffff8d
 10c:	6c615674 	stclvs	6, cr5, [r1], #-464	; 0xfffffe30
 110:	64646100 	strbtvs	r6, [r4], #-256	; 0xffffff00
 114:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
 118:	63736100 	cmnvs	r3, #0
 11c:	725f6969 	subsvc	r6, pc, #1720320	; 0x1a4000
 120:	5f646165 	svcpl	0x00646165
 124:	746e6f63 	strbtvc	r6, [lr], #-3939	; 0xfffff09d
 128:	6c6c6f72 	stclvs	15, cr6, [ip], #-456	; 0xfffffe38
 12c:	61007265 	tstvs	r0, r5, ror #4
 130:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 134:	6165725f 	cmnvs	r5, pc, asr r2
 138:	61645f64 	cmnvs	r4, r4, ror #30
 13c:	64006174 	strvs	r6, [r0], #-372	; 0xfffffe8c
 140:	6c707369 	ldclvs	3, cr7, [r0], #-420	; 0xfffffe5c
 144:	635f7961 	cmpvs	pc, #1589248	; 0x184000
 148:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
 14c:	75006c6f 	strvc	r6, [r0, #-3183]	; 0xfffff391
 150:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
 154:	2064656e 	rsbcs	r6, r4, lr, ror #10
 158:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
 15c:	73552f00 	cmpvc	r5, #0, 30
 160:	2f737265 	svccs	0x00737265
 164:	6c6c6f67 	stclvs	15, cr6, [ip], #-412	; 0xfffffe64
 168:	442f6d75 	strtmi	r6, [pc], #-3445	; 170 <startup-0x1ffffe90>
 16c:	6d75636f 	ldclvs	3, cr6, [r5, #-444]!	; 0xfffffe44
 170:	73746e65 	cmnvc	r4, #1616	; 0x650
 174:	706f6d2f 	rsbvc	r6, pc, pc, lsr #26
 178:	6f62616c 	svcvs	0x0062616c
 17c:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
 180:	72656e6f 	rsbvc	r6, r5, #1776	; 0x6f0
 184:	504f4d2f 	subpl	r4, pc, pc, lsr #26
 188:	6570532d 	ldrbvs	r5, [r0, #-813]!	; 0xfffffcd3
 18c:	6e532f6c 	cdpvs	15, 5, cr2, cr3, cr12, {3}
 190:	00656b61 	rsbeq	r6, r5, r1, ror #22
 194:	44746572 	ldrbtmi	r6, [r4], #-1394	; 0xfffffa8e
 198:	00617461 	rsbeq	r7, r1, r1, ror #8
 19c:	746e7566 	strbtvc	r7, [lr], #-1382	; 0xfffffa9a
 1a0:	5f6e6f69 	svcpl	0x006e6f69
 1a4:	00746573 	rsbseq	r6, r4, r3, ror r5
 1a8:	65747962 	ldrbvs	r7, [r4, #-2402]!	; 0xfffff69e
 1ac:	63736100 	cmnvs	r3, #0
 1b0:	775f6969 	ldrbvc	r6, [pc, -r9, ror #18]
 1b4:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 1b8:	646d635f 	strbtvs	r6, [sp], #-863	; 0xfffffca1
 1bc:	74657200 	strbtvc	r7, [r5], #-512	; 0xfffffe00
 1c0:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
 1c4:	746e6500 	strbtvc	r6, [lr], #-1280	; 0xfffffb00
 1c8:	6d5f7972 	vldrvs.16	s15, [pc, #-228]	; ec <startup-0x1fffff14>	; <UNPREDICTABLE>
 1cc:	5f65646f 	svcpl	0x0065646f
 1d0:	00746573 	rsbseq	r6, r4, r3, ror r5
 1d4:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 1d8:	72775f69 	rsbsvc	r5, r7, #420	; 0x1a4
 1dc:	5f657469 	svcpl	0x00657469
 1e0:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
 1e4:	63736100 	cmnvs	r3, #0
 1e8:	635f6969 	cmpvs	pc, #1720320	; 0x1a4000
 1ec:	5f6c7274 	svcpl	0x006c7274
 1f0:	5f746962 	svcpl	0x00746962
 1f4:	00746573 	rsbseq	r6, r4, r3, ror r5
 1f8:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
 1fc:	672f7372 			; <UNDEFINED> instruction: 0x672f7372
 200:	756c6c6f 	strbvc	r6, [ip, #-3183]!	; 0xfffff391
 204:	6f442f6d 	svcvs	0x00442f6d
 208:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0xfffffa9d
 20c:	2f73746e 	svccs	0x0073746e
 210:	6c706f6d 	ldclvs	15, cr6, [r0], #-436	; 0xfffffe4c
 214:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
 218:	6f697461 	svcvs	0x00697461
 21c:	2f72656e 	svccs	0x0072656e
 220:	2d504f4d 	ldclcs	15, cr4, [r0, #-308]	; 0xfffffecc
 224:	6c657053 	stclvs	0, cr7, [r5], #-332	; 0xfffffeb4
 228:	616e532f 	cmnvs	lr, pc, lsr #6
 22c:	612f656b 			; <UNDEFINED> instruction: 0x612f656b
 230:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 234:	70736964 	rsbsvc	r6, r3, r4, ror #18
 238:	2e79616c 	rpwcsez	f6, f1, #4.0
 23c:	73610063 	cmnvc	r1, #99, 0	; 0x63
 240:	5f696963 	svcpl	0x00696963
 244:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
 248:	45475000 	strbmi	r5, [r7, #-0]
 24c:	54454d4f 	strbpl	r4, [r5], #-3407	; 0xfffff2b1
 250:	73005952 	movwvc	r5, #2386	; 0x952
 254:	656b616e 	strbvs	r6, [fp, #-366]!	; 0xfffffe92
 258:	657a6953 	ldrbvs	r6, [sl, #-2387]!	; 0xfffff6ad
 25c:	616e7300 	cmnvs	lr, r0, lsl #6
 260:	6568656b 	strbvs	r6, [r8, #-1387]!	; 0xfffffa95
 264:	675f6461 	ldrbvs	r6, [pc, -r1, ror #8]
 268:	656d6f65 	strbvs	r6, [sp, #-3941]!	; 0xfffff09b
 26c:	5f797274 	svcpl	0x00797274
 270:	5446454c 	strbpl	r4, [r6], #-1356	; 0xfffffab4
 274:	61726400 	cmnvs	r2, r0, lsl #8
 278:	70735f77 	rsbsvc	r5, r3, r7, ror pc
 27c:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 280:	67726100 	ldrbvs	r6, [r2, -r0, lsl #2]!
 284:	6e730076 	mrcvs	0, 3, r0, cr3, cr6, {3}
 288:	68656b61 	stmdavs	r5!, {r0, r5, r6, r8, r9, fp, sp, lr}^
 28c:	5f646165 	svcpl	0x00646165
 290:	6d6f6567 	cfstr64vs	mvdx6, [pc, #-412]!	; fc <startup-0x1fffff04>
 294:	79727465 	ldmdbvc	r2!, {r0, r2, r5, r6, sl, ip, sp, lr}^
 298:	0050555f 	subseq	r5, r0, pc, asr r5
 29c:	78726964 	ldmdavc	r2!, {r2, r5, r6, r8, fp, sp, lr}^
 2a0:	72696400 	rsbvc	r6, r9, #0, 8
 2a4:	552f0079 	strpl	r0, [pc, #-121]!	; 233 <startup-0x1ffffdcd>
 2a8:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 2ac:	6c6f672f 	stclvs	7, cr6, [pc], #-188	; 1f8 <startup-0x1ffffe08>
 2b0:	2f6d756c 	svccs	0x006d756c
 2b4:	75636f44 	strbvc	r6, [r3, #-3908]!	; 0xfffff0bc
 2b8:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
 2bc:	6f6d2f73 	svcvs	0x006d2f73
 2c0:	62616c70 	rsbvs	r6, r1, #112, 24	; 0x7000
 2c4:	7461726f 	strbtvc	r7, [r1], #-623	; 0xfffffd91
 2c8:	656e6f69 	strbvs	r6, [lr, #-3945]!	; 0xfffff097
 2cc:	4f4d2f72 	svcmi	0x004d2f72
 2d0:	70532d50 	subsvc	r2, r3, r0, asr sp
 2d4:	532f6c65 			; <UNDEFINED> instruction: 0x532f6c65
 2d8:	656b616e 	strbvs	r6, [fp, #-366]!	; 0xfffffe92
 2dc:	6174732f 	cmnvs	r4, pc, lsr #6
 2e0:	70757472 	rsbsvc	r7, r5, r2, ror r4
 2e4:	6e00632e 	cdpvs	3, 0, cr6, cr0, cr14, {1}
 2e8:	5f747865 	svcpl	0x00747865
 2ec:	6d690078 	stclvs	0, cr0, [r9, #-480]!	; 0xfffffe20
 2f0:	5f656761 	svcpl	0x00656761
 2f4:	73746962 	cmnvc	r4, #1605632	; 0x188000
 2f8:	696e6900 	stmdbvs	lr!, {r8, fp, sp, lr}^
 2fc:	6e735f74 	mrcvs	15, 3, r5, cr3, cr4, {3}
 300:	00656b61 	rsbeq	r6, r5, r1, ror #22
 304:	696f5074 	stmdbvs	pc!, {r2, r4, r5, r6, ip, lr}^	; <UNPREDICTABLE>
 308:	5000746e 	andpl	r7, r0, lr, ror #8
 30c:	544e494f 	strbpl	r4, [lr], #-2383	; 0xfffff6b1
 310:	78656e00 	stmdavc	r5!, {r9, sl, fp, sp, lr}^
 314:	00795f74 	rsbseq	r5, r9, r4, ror pc
 318:	5f746573 	svcpl	0x00746573
 31c:	65657073 	strbvs	r7, [r5, #-115]!	; 0xffffff8d
 320:	6f700064 	svcvs	0x00700064
 324:	70007873 	andvc	r7, r0, r3, ror r8
 328:	0079736f 	rsbseq	r7, r9, pc, ror #6
 32c:	67696568 	strbvs	r6, [r9, -r8, ror #10]!
 330:	64007468 	strvs	r7, [r0], #-1128	; 0xfffffb98
 334:	5f776172 	svcpl	0x00776172
 338:	6b616e73 	blvs	185bd0c <startup-0x1e7a42f4>
 33c:	6e730065 	cdpvs	0, 7, cr0, cr3, cr5, {3}
 340:	68656b61 	stmdavs	r5!, {r0, r5, r6, r8, r9, fp, sp, lr}^
 344:	5f646165 	svcpl	0x00646165
 348:	6d6f6567 	cfstr64vs	mvdx6, [pc, #-412]!	; 1b4 <startup-0x1ffffe4c>
 34c:	79727465 	ldmdbvc	r2!, {r0, r2, r5, r6, sl, ip, sp, lr}^
 350:	4749525f 	smlsldmi	r5, r9, pc, r2	; <UNPREDICTABLE>
 354:	63005448 	movwvs	r5, #1096	; 0x448
 358:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
 35c:	6a626f5f 	bvs	189c0e0 <startup-0x1e763f20>
 360:	00746365 	rsbseq	r6, r4, r5, ror #6
 364:	6b616e73 	blvs	185bd38 <startup-0x1e7a42c8>
 368:	646f6265 	strbtvs	r6, [pc], #-613	; 370 <startup-0x1ffffc90>
 36c:	65675f79 	strbvs	r5, [r7, #-3961]!	; 0xfffff087
 370:	74656d6f 	strbtvc	r6, [r5], #-3439	; 0xfffff291
 374:	66007972 			; <UNDEFINED> instruction: 0x66007972
 378:	5f646f6f 	svcpl	0x00646f6f
 37c:	6d6f6567 	cfstr64vs	mvdx6, [pc, #-412]!	; 1e8 <startup-0x1ffffe18>
 380:	79727465 	ldmdbvc	r2!, {r0, r2, r5, r6, sl, ip, sp, lr}^
 384:	69616d00 	stmdbvs	r1!, {r8, sl, fp, sp, lr}^
 388:	6572006e 	ldrbvs	r0, [r2, #-110]!	; 0xffffff92
 38c:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 390:	75630074 	strbvc	r0, [r3, #-116]!	; 0xffffff8c
 394:	6e657272 	mcrvs	2, 3, r7, cr5, cr2, {3}
 398:	6e690074 	mcrvs	0, 3, r0, cr9, cr4, {3}
 39c:	615f7469 	cmpvs	pc, r9, ror #8
 3a0:	74007070 	strvc	r7, [r0], #-112	; 0xffffff90
 3a4:	6d6f6547 	cfstr64vs	mvdx6, [pc, #-284]!	; 290 <startup-0x1ffffd70>
 3a8:	79727465 	ldmdbvc	r2!, {r0, r2, r5, r6, sl, ip, sp, lr}^
 3ac:	7a697300 	bvc	1a5cfb4 <startup-0x1e5a304c>
 3b0:	73007865 	movwvc	r7, #2149	; 0x865
 3b4:	79657a69 	stmdbvc	r5!, {r0, r3, r5, r6, r9, fp, ip, sp, lr}^
 3b8:	67726100 	ldrbvs	r6, [r2, -r0, lsl #2]!
 3bc:	74730063 	ldrbtvc	r0, [r3], #-99	; 0xffffff9d
 3c0:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
 3c4:	72640070 	rsbvc	r0, r4, #112, 0	; 0x70
 3c8:	66007761 	strvs	r7, [r0], -r1, ror #14
 3cc:	5f646f6f 	svcpl	0x00646f6f
 3d0:	006a626f 	rsbeq	r6, sl, pc, ror #4
 3d4:	5f79656b 	svcpl	0x0079656b
 3d8:	6f727473 	svcvs	0x00727473
 3dc:	7700656b 	strvc	r6, [r0, -fp, ror #10]
 3e0:	68746469 	ldmdavs	r4!, {r0, r3, r5, r6, sl, sp, lr}^
 3e4:	63616200 	cmnvs	r1, #0, 4
 3e8:	6675426b 	ldrbtvs	r4, [r5], -fp, ror #4
 3ec:	00726566 	rsbseq	r6, r2, r6, ror #10
 3f0:	5f746573 	svcpl	0x00746573
 3f4:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
 3f8:	735f7463 	cmpvc	pc, #1660944384	; 0x63000000
 3fc:	64656570 	strbtvs	r6, [r5], #-1392	; 0xfffffa90
 400:	64697700 	strbtvs	r7, [r9], #-1792	; 0xfffff900
 404:	695f6874 	ldmdbvs	pc, {r2, r4, r5, r6, fp, sp, lr}^	; <UNPREDICTABLE>
 408:	79625f6e 	stmdbvc	r2!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
 40c:	00736574 	rsbseq	r6, r3, r4, ror r5
 410:	64616f6c 	strbtvs	r6, [r1], #-3948	; 0xfffff094
 414:	7270735f 	rsbsvc	r7, r0, #2080374785	; 0x7c000001
 418:	00657469 	rsbeq	r7, r5, r9, ror #8
 41c:	6b616e73 	blvs	185bdf0 <startup-0x1e7a4210>
 420:	61656865 	cmnvs	r5, r5, ror #16
 424:	65675f64 	strbvs	r5, [r7, #-3940]!	; 0xfffff09c
 428:	74656d6f 	strbtvc	r6, [r5], #-3439	; 0xfffff291
 42c:	445f7972 	ldrbmi	r7, [pc], #-2418	; 434 <startup-0x1ffffbcc>
 430:	004e574f 	subeq	r5, lr, pc, asr #14
 434:	6c6c6f66 	stclvs	15, cr6, [ip], #-408	; 0xfffffe68
 438:	6c5f776f 	mrrcvs	7, 6, r7, pc, cr15	; <UNPREDICTABLE>
 43c:	65646165 	strbvs	r6, [r4, #-357]!	; 0xfffffe9b
 440:	4f740072 	svcmi	0x00740072
 444:	64006a62 	strvs	r6, [r0], #-2658	; 0xfffff59e
 448:	5f776172 	svcpl	0x00776172
 44c:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
 450:	72007463 	andvc	r7, r0, #1660944384	; 0x63000000
 454:	61747365 	cmnvs	r4, r5, ror #6
 458:	675f7472 			; <UNDEFINED> instruction: 0x675f7472
 45c:	00656d61 	rsbeq	r6, r5, r1, ror #26
 460:	706d756e 	rsbvc	r7, sp, lr, ror #10
 464:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
 468:	6f6d0073 	svcvs	0x006d0073
 46c:	6f5f6576 	svcvs	0x005f6576
 470:	63656a62 	cmnvs	r5, #401408	; 0x62000
 474:	6f660074 	svcvs	0x00660074
 478:	7400646f 	strvc	r6, [r0], #-1135	; 0xfffffb91
 47c:	006e7275 	rsbeq	r7, lr, r5, ror r2
 480:	65657073 	strbvs	r7, [r5, #-115]!	; 0xffffff8d
 484:	73007864 	movwvc	r7, #2148	; 0x864
 488:	64656570 	strbtvs	r6, [r5], #-1392	; 0xfffffa90
 48c:	4f500079 	svcmi	0x00500079
 490:	43454a42 	movtmi	r4, #23106	; 0x5a42
 494:	6e690054 	mcrvs	0, 3, r0, cr9, cr4, {2}
 498:	00747570 	rsbseq	r7, r4, r0, ror r5
 49c:	5679656b 	ldrbtpl	r6, [r9], -fp, ror #10
 4a0:	6b006c61 	blvs	1b62c <startup-0x1ffe49d4>
 4a4:	00627965 	rsbeq	r7, r2, r5, ror #18
 4a8:	3774756f 	ldrbcc	r7, [r4, -pc, ror #10]!
 4ac:	00676573 	rsbeq	r6, r7, r3, ror r5
 4b0:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
 4b4:	6c6f635f 	stclvs	3, cr6, [pc], #-380	; 340 <startup-0x1ffffcc0>
 4b8:	6e6d756f 	cdpvs	5, 6, cr7, cr13, cr15, {3}
 4bc:	79656b00 	stmdbvc	r5!, {r8, r9, fp, sp, lr}^
 4c0:	6c61765f 	stclvs	6, cr7, [r1], #-380	; 0xfffffe84
 4c4:	61006575 	tstvs	r0, r5, ror r5
 4c8:	76697463 	strbtvc	r7, [r9], -r3, ror #8
 4cc:	5f657461 	svcpl	0x00657461
 4d0:	00776f72 	rsbseq	r6, r7, r2, ror pc
 4d4:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
 4d8:	672f7372 			; <UNDEFINED> instruction: 0x672f7372
 4dc:	756c6c6f 	strbvc	r6, [ip, #-3183]!	; 0xfffff391
 4e0:	6f442f6d 	svcvs	0x00442f6d
 4e4:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0xfffffa9d
 4e8:	2f73746e 	svccs	0x0073746e
 4ec:	6c706f6d 	ldclvs	15, cr6, [r0], #-436	; 0xfffffe4c
 4f0:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
 4f4:	6f697461 	svcvs	0x00697461
 4f8:	2f72656e 	svccs	0x0072656e
 4fc:	2d504f4d 	ldclcs	15, cr4, [r0, #-308]	; 0xfffffecc
 500:	6c657053 	stclvs	0, cr7, [r5], #-332	; 0xfffffeb4
 504:	616e532f 	cmnvs	lr, pc, lsr #6
 508:	6b2f656b 	blvs	bd9abc <startup-0x1f426544>
 50c:	2e627965 	vnmulcs.f16	s15, s4, s11	; <UNPREDICTABLE>
 510:	65640063 	strbvs	r0, [r4, #-99]!	; 0xffffff9d
 514:	5f79616c 	svcpl	0x0079616c
 518:	6e303035 	mrcvs	0, 1, r3, cr0, cr5, {1}
 51c:	552f0073 	strpl	r0, [pc, #-115]!	; 4b1 <startup-0x1ffffb4f>
 520:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 524:	6c6f672f 	stclvs	7, cr6, [pc], #-188	; 470 <startup-0x1ffffb90>
 528:	2f6d756c 	svccs	0x006d756c
 52c:	75636f44 	strbvc	r6, [r3, #-3908]!	; 0xfffff0bc
 530:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
 534:	6f6d2f73 	svcvs	0x006d2f73
 538:	62616c70 	rsbvs	r6, r1, #112, 24	; 0x7000
 53c:	7461726f 	strbtvc	r7, [r1], #-623	; 0xfffffd91
 540:	656e6f69 	strbvs	r6, [lr, #-3945]!	; 0xfffff097
 544:	4f4d2f72 	svcmi	0x004d2f72
 548:	70532d50 	subsvc	r2, r3, r0, asr sp
 54c:	532f6c65 			; <UNDEFINED> instruction: 0x532f6c65
 550:	656b616e 	strbvs	r6, [fp, #-366]!	; 0xfffffe92
 554:	6c65642f 	cfstrdvs	mvd6, [r5], #-188	; 0xffffff44
 558:	632e7961 			; <UNDEFINED> instruction: 0x632e7961
 55c:	61726700 	cmnvs	r2, r0, lsl #14
 560:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 564:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 568:	635f6574 	cmpvs	pc, #116, 10	; 0x1d000000
 56c:	616d6d6f 	cmnvs	sp, pc, ror #26
 570:	6700646e 	strvs	r6, [r0, -lr, ror #8]
 574:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 578:	645f6369 	ldrbvs	r6, [pc], #-873	; 580 <startup-0x1ffffa80>
 57c:	5f776172 	svcpl	0x00776172
 580:	65726373 	ldrbvs	r6, [r2, #-883]!	; 0xfffffc8d
 584:	2f006e65 	svccs	0x00006e65
 588:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
 58c:	6f672f73 	svcvs	0x00672f73
 590:	6d756c6c 	ldclvs	12, cr6, [r5, #-432]!	; 0xfffffe50
 594:	636f442f 	cmnvs	pc, #788529152	; 0x2f000000
 598:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
 59c:	6d2f7374 	stcvs	3, cr7, [pc, #-464]!	; 3d4 <startup-0x1ffffc2c>
 5a0:	616c706f 	cmnvs	ip, pc, rrx
 5a4:	61726f62 	cmnvs	r2, r2, ror #30
 5a8:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 5ac:	4d2f7265 	sfmmi	f7, 4, [pc, #-404]!	; 420 <startup-0x1ffffbe0>
 5b0:	532d504f 			; <UNDEFINED> instruction: 0x532d504f
 5b4:	2f6c6570 	svccs	0x006c6570
 5b8:	6b616e53 	blvs	185bf0c <startup-0x1e7a40f4>
 5bc:	72672f65 	rsbvc	r2, r7, #404	; 0x194
 5c0:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 5c4:	73696463 	cmnvc	r9, #1660944384	; 0x63000000
 5c8:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 5cc:	6700632e 	strvs	r6, [r0, -lr, lsr #6]
 5d0:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 5d4:	725f6369 	subsvc	r6, pc, #-1543503871	; 0xa4000001
 5d8:	5f646165 	svcpl	0x00646165
 5dc:	61746164 	cmnvs	r4, r4, ror #2
 5e0:	61726700 	cmnvs	r2, r0, lsl #14
 5e4:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 5e8:	6165725f 	cmnvs	r5, pc, asr r2
 5ec:	69700064 	ldmdbvs	r0!, {r2, r5, r6}^
 5f0:	006c6578 	rsbeq	r6, ip, r8, ror r5
 5f4:	70617267 	rsbvc	r7, r1, r7, ror #4
 5f8:	5f636968 	svcpl	0x00636968
 5fc:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
 600:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
 604:	7465735f 	strbtvc	r7, [r5], #-863	; 0xfffffca1
 608:	656c6300 	strbvs	r6, [ip, #-768]!	; 0xfffffd00
 60c:	625f7261 	subsvs	r7, pc, #268435462	; 0x10000006
 610:	626b6361 	rsbvs	r6, fp, #-2080374783	; 0x84000001
 614:	65666675 	strbvs	r6, [r6, #-1653]!	; 0xfffff98b
 618:	72670072 	rsbvc	r0, r7, #114, 0	; 0x72
 61c:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 620:	61775f63 	cmnvs	r7, r3, ror #30
 624:	725f7469 	subsvc	r7, pc, #1761607680	; 0x69000000
 628:	79646165 	stmdbvc	r4!, {r0, r2, r5, r6, r8, sp, lr}^
 62c:	73616d00 	cmnvc	r1, #0, 26
 630:	6975006b 	ldmdbvs	r5!, {r0, r1, r3, r5, r6}^
 634:	5f38746e 	svcpl	0x0038746e
 638:	72670074 	rsbvc	r0, r7, #116, 0	; 0x74
 63c:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 640:	72775f63 	rsbsvc	r5, r7, #396	; 0x18c
 644:	00657469 	rsbeq	r7, r5, r9, ror #8
 648:	656c6573 	strbvs	r6, [ip, #-1395]!	; 0xfffffa8d
 64c:	635f7463 	cmpvs	pc, #1660944384	; 0x63000000
 650:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
 654:	656c6c6f 	strbvs	r6, [ip, #-3183]!	; 0xfffff391
 658:	6e690072 	mcrvs	0, 3, r0, cr9, cr2, {3}
 65c:	00786564 	rsbseq	r6, r8, r4, ror #10
 660:	70617267 	rsbvc	r7, r1, r7, ror #4
 664:	5f636968 	svcpl	0x00636968
 668:	61656c63 	cmnvs	r5, r3, ror #24
 66c:	63735f72 	cmnvs	r3, #456	; 0x1c8
 670:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
 674:	61726700 	cmnvs	r2, r0, lsl #14
 678:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 67c:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 680:	645f6574 	ldrbvs	r6, [pc], #-1396	; 688 <startup-0x1ffff978>
 684:	00617461 	rsbeq	r7, r1, r1, ror #8
 688:	70617267 	rsbvc	r7, r1, r7, ror #4
 68c:	5f636968 	svcpl	0x00636968
 690:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
 694:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
 698:	656c635f 	strbvs	r6, [ip, #-863]!	; 0xfffffca1
 69c:	70007261 	andvc	r7, r0, r1, ror #4
 6a0:	00656761 	rsbeq	r6, r5, r1, ror #14
 6a4:	70617267 	rsbvc	r7, r1, r7, ror #4
 6a8:	5f636968 	svcpl	0x00636968
 6ac:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
 6b0:	74657200 	strbtvc	r7, [r5], #-512	; 0xfffffe00
 6b4:	006c6176 	rsbeq	r6, ip, r6, ror r1
 6b8:	6f73645f 	svcvs	0x0073645f
 6bc:	6e61685f 	mcrvs	8, 3, r6, cr1, cr15, {2}
 6c0:	00656c64 	rsbeq	r6, r5, r4, ror #24
 6c4:	75467369 	strbvc	r7, [r6, #-873]	; 0xfffffc97
 6c8:	5f006c6c 	svcpl	0x00006c6c
 6cc:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0xfffff68d
 6d0:	61725f00 	cmnvs	r2, r0, lsl #30
 6d4:	3834646e 	ldmdacc	r4!, {r1, r2, r3, r5, r6, sl, sp, lr}
 6d8:	6d655f00 	stclvs	15, cr5, [r5, #-0]
 6dc:	65677265 	strbvs	r7, [r7, #-613]!	; 0xfffffd9b
 6e0:	0079636e 	rsbseq	r6, r9, lr, ror #6
 6e4:	7263775f 	rsbvc	r7, r3, #24903680	; 0x17c0000
 6e8:	626d6f74 	rsbvs	r6, sp, #116, 30	; 0x1d0
 6ec:	6174735f 	cmnvs	r4, pc, asr r3
 6f0:	5f006574 	svcpl	0x00006574
 6f4:	72736377 	rsbsvc	r6, r3, #-603979775	; 0xdc000001
 6f8:	626d6f74 	rsbvs	r6, sp, #116, 30	; 0x1d0
 6fc:	74735f73 	ldrbtvc	r5, [r3], #-3955	; 0xfffff08d
 700:	00657461 	rsbeq	r7, r5, r1, ror #8
 704:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
 708:	6e6f6c20 	cdpvs	12, 6, cr6, cr15, cr0, {1}
 70c:	6e752067 	cdpvs	0, 7, cr2, cr5, cr7, {3}
 710:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
 714:	69206465 	stmdbvs	r0!, {r0, r2, r5, r6, sl, sp, lr}
 718:	5f00746e 	svcpl	0x0000746e
 71c:	7366626c 	cmnvc	r6, #108, 4	; 0xc0000006
 720:	00657a69 	rsbeq	r7, r5, r9, ror #20
 724:	6f6d6572 	svcvs	0x006d6572
 728:	5f006576 	svcpl	0x00006576
 72c:	636f6c5f 	cmnvs	pc, #24320	; 0x5f00
 730:	5f656c61 	svcpl	0x00656c61
 734:	6d5f0074 	ldclvs	0, cr0, [pc, #-464]	; 56c <startup-0x1ffffa94>
 738:	6f747262 	svcvs	0x00747262
 73c:	735f6377 	cmpvc	pc, #-603979775	; 0xdc000001
 740:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
 744:	745f5f00 	ldrbvc	r5, [pc], #-3840	; 74c <startup-0x1ffff8b4>
 748:	65735f6d 	ldrbvs	r5, [r3, #-3949]!	; 0xfffff093
 74c:	6f6c0063 	svcvs	0x006c0063
 750:	6c20676e 	stcvs	7, cr6, [r0], #-440	; 0xfffffe48
 754:	20676e6f 	rsbcs	r6, r7, pc, ror #28
 758:	00746e69 	rsbseq	r6, r4, r9, ror #28
 75c:	7562755f 	strbvc	r7, [r2, #-1375]!	; 0xfffffaa1
 760:	625f0066 	subsvs	r0, pc, #102, 0	; 0x66
 764:	00657361 	rsbeq	r7, r5, r1, ror #6
 768:	6d745f5f 	ldclvs	15, cr5, [r4, #-380]!	; 0xfffffe84
 76c:	756f685f 	strbvc	r6, [pc, #-2143]!	; ffffff15 <rear+0xdfffc965>
 770:	5f5f0072 	svcpl	0x005f0072
 774:	5f006673 	svcpl	0x00006673
 778:	655f6e6f 	ldrbvs	r6, [pc, #-3695]	; fffff911 <rear+0xdfffc361>
 77c:	5f746978 	svcpl	0x00746978
 780:	73677261 	cmnvc	r7, #268435462	; 0x10000006
 784:	6f635f00 	svcvs	0x00635f00
 788:	65696b6f 	strbvs	r6, [r9, #-2927]!	; 0xfffff491
 78c:	735f5f00 	cmpvc	pc, #0, 30
 790:	65756c67 	ldrbvs	r6, [r5, #-3175]!	; 0xfffff399
 794:	45736900 	ldrbmi	r6, [r3, #-2304]!	; 0xfffff700
 798:	7974706d 	ldmdbvc	r4!, {r0, r2, r3, r5, r6, ip, sp, lr}^
 79c:	6c665f00 	stclvs	15, cr5, [r6], #-0
 7a0:	00736761 	rsbseq	r6, r3, r1, ror #14
 7a4:	5f73695f 	svcpl	0x0073695f
 7a8:	00617863 	rsbeq	r7, r1, r3, ror #16
 7ac:	6474735f 	ldrbtvs	r7, [r4], #-863	; 0xfffffca1
 7b0:	5f006e69 	svcpl	0x00006e69
 7b4:	736b6c62 	cmnvc	fp, #25088	; 0x6200
 7b8:	00657a69 	rsbeq	r7, r5, r9, ror #20
 7bc:	7476635f 	ldrbtvc	r6, [r6], #-863	; 0xfffffca1
 7c0:	00667562 	rsbeq	r7, r6, r2, ror #10
 7c4:	66666f5f 	uqsaxvs	r6, r6, pc	; <UNPREDICTABLE>
 7c8:	00746573 	rsbseq	r6, r4, r3, ror r5
 7cc:	73626d5f 	cmnvc	r2, #6080	; 0x17c0
 7d0:	776f7472 			; <UNDEFINED> instruction: 0x776f7472
 7d4:	735f7363 	cmpvc	pc, #-1946157055	; 0x8c000001
 7d8:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
 7dc:	626d5f00 	rsbvs	r5, sp, #0, 30
 7e0:	6e656c72 	mcrvs	12, 3, r6, cr5, cr2, {3}
 7e4:	6174735f 	cmnvs	r4, pc, asr r3
 7e8:	5f006574 	svcpl	0x00006574
 7ec:	72616e66 	rsbvc	r6, r1, #1632	; 0x660
 7f0:	5f007367 	svcpl	0x00007367
 7f4:	00736e66 	rsbseq	r6, r3, r6, ror #28
 7f8:	6769735f 			; <UNDEFINED> instruction: 0x6769735f
 7fc:	665f006e 	ldrbvs	r0, [pc], -lr, rrx
 800:	6b636f6c 	blvs	18dc5b8 <startup-0x1e723a48>
 804:	5f00745f 	svcpl	0x0000745f
 808:	65647473 	strbvs	r7, [r4, #-1139]!	; 0xfffffb8d
 80c:	5f007272 	svcpl	0x00007272
 810:	69676942 	stmdbvs	r7!, {r1, r6, r8, fp, sp, lr}^
 814:	5f00746e 	svcpl	0x0000746e
 818:	6d6d6167 	stfvse	f6, [sp, #-412]!	; 0xfffffe64
 81c:	69735f61 	ldmdbvs	r3!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
 820:	61676e67 	cmnvs	r7, r7, ror #28
 824:	725f006d 	subsvc	r0, pc, #109, 0	; 0x6d
 828:	6c757365 	ldclvs	3, cr7, [r5], #-404	; 0xfffffe6c
 82c:	006b5f74 	rsbeq	r5, fp, r4, ror pc
 830:	6d745f5f 	ldclvs	15, cr5, [r4, #-380]!	; 0xfffffe84
 834:	775f5f00 	ldrbvc	r5, [pc, -r0, lsl #30]
 838:	00626863 	rsbeq	r6, r2, r3, ror #16
 83c:	6474735f 	ldrbtvs	r7, [r4], #-863	; 0xfffffca1
 840:	0074756f 	rsbseq	r7, r4, pc, ror #10
 844:	7476635f 	ldrbtvc	r6, [r6], #-863	; 0xfffffca1
 848:	006e656c 	rsbeq	r6, lr, ip, ror #10
 84c:	6c69665f 	stclvs	6, cr6, [r9], #-380	; 0xfffffe84
 850:	6e5f0065 	cdpvs	0, 5, cr0, cr15, cr5, {3}
 854:	73626f69 	cmnvc	r2, #420	; 0x1a4
 858:	65657000 	strbvs	r7, [r5, #-0]!
 85c:	6873006b 	ldmdavs	r3!, {r0, r1, r3, r5, r6}^
 860:	2074726f 	rsbscs	r7, r4, pc, ror #4
 864:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
 868:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
 86c:	746e6920 	strbtvc	r6, [lr], #-2336	; 0xfffff6e0
 870:	74615f00 	strbtvc	r5, [r1], #-3840	; 0xfffff100
 874:	74697865 	strbtvc	r7, [r9], #-2149	; 0xfffff79b
 878:	735f0030 	cmpvc	pc, #48, 0	; 0x30
 87c:	616e6769 	cmnvs	lr, r9, ror #14
 880:	75625f6c 	strbvc	r5, [r2, #-3948]!	; 0xfffff094
 884:	615f0066 	cmpvs	pc, r6, rrx
 888:	69746373 	ldmdbvs	r4!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 88c:	625f656d 	subsvs	r6, pc, #457179136	; 0x1b400000
 890:	5f006675 	svcpl	0x00006675
 894:	75736572 	ldrbvc	r6, [r3, #-1394]!	; 0xfffffa8e
 898:	5f00746c 	svcpl	0x0000746c
 89c:	6863775f 	stmdavs	r3!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 8a0:	4f4c5f00 	svcmi	0x004c5f00
 8a4:	545f4b43 	ldrbpl	r4, [pc], #-2883	; 8ac <startup-0x1ffff754>
 8a8:	6e697700 	cdpvs	7, 6, cr7, cr9, cr0, {0}
 8ac:	00745f74 	rsbseq	r5, r4, r4, ror pc
 8b0:	616c665f 	cmnvs	ip, pc, asr r6
 8b4:	00327367 	eorseq	r7, r2, r7, ror #6
 8b8:	6d745f5f 	ldclvs	15, cr5, [r4, #-380]!	; 0xfffffe84
 8bc:	6165795f 	cmnvs	r5, pc, asr r9
 8c0:	6e5f0072 	mrcvs	0, 2, r0, cr15, cr2, {3}
 8c4:	6c6c616d 	stfvse	f6, [ip], #-436	; 0xfffffe4c
 8c8:	5f00636f 	svcpl	0x0000636f
 8cc:	7478656e 	ldrbtvc	r6, [r8], #-1390	; 0xfffffa92
 8d0:	5f5f0066 	svcpl	0x005f0066
 8d4:	6d5f6d74 	ldclvs	13, cr6, [pc, #-464]	; 70c <startup-0x1ffff8f4>
 8d8:	5f006e6f 	svcpl	0x00006e6f
 8dc:	78657461 	stmdavc	r5!, {r0, r5, r6, sl, ip, sp, lr}^
 8e0:	5f007469 	svcpl	0x00007469
 8e4:	6964735f 	stmdbvs	r4!, {r0, r1, r2, r3, r4, r6, r8, r9, ip, sp, lr}^
 8e8:	696e6964 	stmdbvs	lr!, {r2, r5, r6, r8, fp, sp, lr}^
 8ec:	6f5f0074 	svcvs	0x005f0074
 8f0:	745f6666 	ldrbvc	r6, [pc], #-1638	; 8f8 <startup-0x1ffff708>
 8f4:	72665f00 	rsbvc	r5, r6, #0, 30
 8f8:	696c6565 	stmdbvs	ip!, {r0, r2, r5, r6, r8, sl, sp, lr}^
 8fc:	5f007473 	svcpl	0x00007473
 900:	6f746377 	svcvs	0x00746377
 904:	735f626d 	cmpvc	pc, #-805306362	; 0xd0000006
 908:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
 90c:	6f425f00 	svcvs	0x00425f00
 910:	5f006c6f 	svcpl	0x00006c6f
 914:	0077656e 	rsbseq	r6, r7, lr, ror #10
 918:	655f685f 	ldrbvs	r6, [pc, #-2143]	; c1 <startup-0x1fffff3f>
 91c:	6f6e7272 	svcvs	0x006e7272
 920:	6f687300 	svcvs	0x00687300
 924:	69207472 	stmdbvs	r0!, {r1, r4, r5, r6, sl, ip, sp, lr}
 928:	5f00746e 	svcpl	0x0000746e
 92c:	5f6d745f 	svcpl	0x006d745f
 930:	79616479 	stmdbvc	r1!, {r0, r3, r4, r5, r6, sl, sp, lr}^
 934:	735f5f00 	cmpvc	pc, #0, 30
 938:	00667562 	rsbeq	r7, r6, r2, ror #10
 93c:	626f695f 	rsbvs	r6, pc, #1556480	; 0x17c000
 940:	5f5f0073 	svcpl	0x005f0073
 944:	454c4946 	strbmi	r4, [ip, #-2374]	; 0xfffff6ba
 948:	626d5f00 	rsbvs	r5, sp, #0, 30
 94c:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
 950:	00745f65 	rsbseq	r5, r4, r5, ror #30
 954:	46735f5f 	uhsaxmi	r5, r3, pc	; <UNPREDICTABLE>
 958:	00454c49 	subeq	r4, r5, r9, asr #24
 95c:	73626d5f 	cmnvc	r2, #6080	; 0x17c0
 960:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
 964:	61725f00 	cmnvs	r2, r0, lsl #30
 968:	6e5f646e 	cdpvs	4, 5, cr6, cr15, cr14, {3}
 96c:	00747865 	rsbseq	r7, r4, r5, ror #16
 970:	65736e69 	ldrbvs	r6, [r3, #-3689]!	; 0xfffff197
 974:	5f007472 	svcpl	0x00007472
 978:	656c626d 	strbvs	r6, [ip, #-621]!	; 0xfffffd93
 97c:	74735f6e 	ldrbtvc	r5, [r3], #-3950	; 0xfffff092
 980:	00657461 	rsbeq	r7, r5, r1, ror #8
 984:	636e695f 	cmnvs	lr, #1556480	; 0x17c000
 988:	6e695f00 	cdpvs	15, 6, cr5, cr9, cr0, {0}
 98c:	6e690064 	cdpvs	0, 6, cr0, cr9, cr4, {3}
 990:	715f7469 	cmpvc	pc, r9, ror #8
 994:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0xfffffa8b
 998:	6f6c5f00 	svcvs	0x006c5f00
 99c:	656c6163 	strbvs	r6, [ip, #-355]!	; 0xfffffe9d
 9a0:	635f5f00 	cmpvs	pc, #0, 30
 9a4:	6e61656c 	cdpvs	5, 6, cr6, cr1, cr12, {3}
 9a8:	5f007075 	svcpl	0x00007075
 9ac:	70736e75 	rsbsvc	r6, r3, r5, ror lr
 9b0:	66696365 	strbtvs	r6, [r9], -r5, ror #6
 9b4:	5f646569 	svcpl	0x00646569
 9b8:	61636f6c 	cmnvs	r3, ip, ror #30
 9bc:	695f656c 	ldmdbvs	pc, {r2, r3, r5, r6, r8, sl, sp, lr}^	; <UNPREDICTABLE>
 9c0:	006f666e 	rsbeq	r6, pc, lr, ror #12
 9c4:	78616d5f 	stmdavc	r1!, {r0, r1, r2, r3, r4, r6, r8, sl, fp, sp, lr}^
 9c8:	00736477 	rsbseq	r6, r3, r7, ror r4
 9cc:	6565725f 	strbvs	r7, [r5, #-607]!	; 0xfffffda1
 9d0:	5f00746e 	svcpl	0x0000746e
 9d4:	64656573 	strbtvs	r6, [r5], #-1395	; 0xfffffa8d
 9d8:	635f5f00 	cmpvs	pc, #0, 30
 9dc:	746e756f 	strbtvc	r7, [lr], #-1391	; 0xfffffa91
 9e0:	6c5f5f00 	mrrcvs	15, 0, r5, pc, cr0	; <UNPREDICTABLE>
 9e4:	006b636f 	rsbeq	r6, fp, pc, ror #6
 9e8:	61765f5f 	cmnvs	r6, pc, asr pc
 9ec:	0065756c 	rsbeq	r7, r5, ip, ror #10
 9f0:	6565735f 	strbvs	r7, [r5, #-863]!	; 0xfffffca1
 9f4:	665f006b 	ldrbvs	r0, [pc], -fp, rrx
 9f8:	5f736f70 	svcpl	0x00736f70
 9fc:	5f5f0074 	svcpl	0x005f0074
 a00:	6d5f6d74 	ldclvs	13, cr6, [pc, #-464]	; 838 <startup-0x1ffff7c8>
 a04:	6f006e69 	svcvs	0x00006e69
 a08:	72416a62 	subvc	r6, r1, #401408	; 0x62000
 a0c:	00796172 	rsbseq	r6, r9, r2, ror r1
 a10:	6c756d5f 	ldclvs	13, cr6, [r5], #-380	; 0xfffffe84
 a14:	735f0074 	cmpvc	pc, #116, 0	; 0x74
 a18:	6f747274 	svcvs	0x00747274
 a1c:	616c5f6b 	cmnvs	ip, fp, ror #30
 a20:	72007473 	andvc	r7, r0, #1929379840	; 0x73000000
 a24:	00726165 	rsbseq	r6, r2, r5, ror #2
 a28:	6d657469 	cfstrdvs	mvd7, [r5, #-420]!	; 0xfffffe5c
 a2c:	6e756f43 	cdpvs	15, 7, cr6, cr5, cr3, {2}
 a30:	665f0074 			; <UNDEFINED> instruction: 0x665f0074
 a34:	7079746e 	rsbsvc	r7, r9, lr, ror #8
 a38:	5f007365 	svcpl	0x00007365
 a3c:	00646461 	rsbeq	r6, r4, r1, ror #8
 a40:	4c555f5f 	mrrcmi	15, 5, r5, r5, cr15	; <UNPREDICTABLE>
 a44:	00676e6f 	rsbeq	r6, r7, pc, ror #28
 a48:	7465675f 	strbtvc	r6, [r5], #-1887	; 0xfffff8a1
 a4c:	65746164 	ldrbvs	r6, [r4, #-356]!	; 0xfffffe9c
 a50:	7272655f 	rsbsvc	r6, r2, #398458880	; 0x17c00000
 a54:	6f726600 	svcvs	0x00726600
 a58:	5f00746e 	svcpl	0x0000746e
 a5c:	626f6c67 	rsbvs	r6, pc, #26368	; 0x6700
 a60:	695f6c61 	ldmdbvs	pc, {r0, r5, r6, sl, fp, sp, lr}^	; <UNPREDICTABLE>
 a64:	7275706d 	rsbsvc	r7, r5, #109, 0	; 0x6d
 a68:	74705f65 	ldrbtvc	r5, [r0], #-3941	; 0xfffff09b
 a6c:	755f0072 	ldrbvc	r0, [pc, #-114]	; a02 <startup-0x1ffff5fe>
 a70:	6573756e 	ldrbvs	r7, [r3, #-1390]!	; 0xfffffa92
 a74:	61725f64 	cmnvs	r2, r4, ror #30
 a78:	2f00646e 	svccs	0x0000646e
 a7c:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
 a80:	6f672f73 	svcvs	0x00672f73
 a84:	6d756c6c 	ldclvs	12, cr6, [r5, #-432]!	; 0xfffffe50
 a88:	636f442f 	cmnvs	pc, #788529152	; 0x2f000000
 a8c:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
 a90:	6d2f7374 	stcvs	3, cr7, [pc, #-464]!	; 8c8 <startup-0x1ffff738>
 a94:	616c706f 	cmnvs	ip, pc, rrx
 a98:	61726f62 	cmnvs	r2, r2, ror #30
 a9c:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 aa0:	4d2f7265 	sfmmi	f7, 4, [pc, #-404]!	; 914 <startup-0x1ffff6ec>
 aa4:	532d504f 			; <UNDEFINED> instruction: 0x532d504f
 aa8:	2f6c6570 	svccs	0x006c6570
 aac:	6b616e53 	blvs	185c400 <startup-0x1e7a3c00>
 ab0:	75712f65 	ldrbvc	r2, [r1, #-3941]!	; 0xfffff09b
 ab4:	2e657565 	cdpcs	5, 6, cr7, cr5, cr5, {3}
 ab8:	775f0063 	ldrbvc	r0, [pc, -r3, rrx]
 abc:	5f007364 	svcpl	0x00007364
 ac0:	5f6d745f 	svcpl	0x006d745f
 ac4:	79616477 	stmdbvc	r1!, {r0, r1, r2, r4, r5, r6, sl, sp, lr}^
 ac8:	6c675f00 	stclvs	15, cr5, [r7], #-0
 acc:	5f006575 	svcpl	0x00006575
 ad0:	6134366c 	teqvs	r4, ip, ror #12
 ad4:	6675625f 			; <UNDEFINED> instruction: 0x6675625f
 ad8:	69735f00 	ldmdbvs	r3!, {r8, r9, sl, fp, ip, lr}^
 adc:	75665f67 	strbvc	r5, [r6, #-3943]!	; 0xfffff099
 ae0:	5f00636e 	svcpl	0x0000636e
 ae4:	6675626e 	ldrbtvs	r6, [r5], -lr, ror #4
 ae8:	6e755f00 	cdpvs	15, 7, cr5, cr5, cr0, {0}
 aec:	64657375 	strbtvs	r7, [r5], #-885	; 0xfffffc8b
 af0:	745f5f00 	ldrbvc	r5, [pc], #-3840	; af8 <startup-0x1ffff508>
 af4:	73695f6d 	cmnvc	r9, #436	; 0x1b4
 af8:	00747364 	rsbseq	r7, r4, r4, ror #6
 afc:	636f6c5f 	cmnvs	pc, #24320	; 0x5f00
 b00:	69746c61 	ldmdbvs	r4!, {r0, r5, r6, sl, fp, sp, lr}^
 b04:	625f656d 	subsvs	r6, pc, #457179136	; 0x1b400000
 b08:	5f006675 	svcpl	0x00006675
 b0c:	736f6c63 	cmnvc	pc, #25344	; 0x6300
 b10:	725f0065 	subsvc	r0, pc, #101, 0	; 0x65
 b14:	5f003834 	svcpl	0x00003834
 b18:	6f74626d 	svcvs	0x0074626d
 b1c:	735f6377 	cmpvc	pc, #-603979775	; 0xdc000001
 b20:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
 b24:	35705f00 	ldrbcc	r5, [r0, #-3840]!	; 0xfffff100
 b28:	5f5f0073 	svcpl	0x005f0073
 b2c:	6d5f6d74 	ldclvs	13, cr6, [pc, #-464]	; 964 <startup-0x1ffff69c>
 b30:	00796164 	rsbseq	r6, r9, r4, ror #2

Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	206d7241 	rsbcs	r7, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d39 	eorscc	r2, r2, r9, lsr sp
  30:	712d3931 			; <UNDEFINED> instruction: 0x712d3931
  34:	616d2d34 	cmnvs	sp, r4, lsr sp
  38:	29726f6a 	ldmdbcs	r2!, {r1, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
  3c:	322e3920 	eorcc	r3, lr, #32, 18	; 0x80000
  40:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  44:	31393130 	teqcc	r9, r0, lsr r1
  48:	20353230 	eorscs	r3, r5, r0, lsr r2
  4c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  50:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  54:	415b2029 	cmpmi	fp, r9, lsr #32
  58:	612f4d52 			; <UNDEFINED> instruction: 0x612f4d52
  5c:	392d6d72 	pushcc	{r1, r4, r5, r6, r8, sl, fp, sp, lr}
  60:	6172622d 	cmnvs	r2, sp, lsr #4
  64:	2068636e 	rsbcs	r6, r8, lr, ror #6
  68:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
  6c:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
  70:	37373220 	ldrcc	r3, [r7, -r0, lsr #4]!
  74:	5d393935 			; <UNDEFINED> instruction: 0x5d393935
	...

Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002b41 	andeq	r2, r0, r1, asr #22
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000021 	andeq	r0, r0, r1, lsr #32
  10:	2d533605 	ldclcs	6, cr3, [r3, #-20]	; 0xffffffec
  14:	0c06004d 	stceq	0, cr0, [r6], {77}	; 0x4d
  18:	01094d07 	tsteq	r9, r7, lsl #26
  1c:	01140412 	tsteq	r4, r2, lsl r4
  20:	03170115 	tsteq	r7, #1073741829	; 0x40000005
  24:	01190118 	tsteq	r9, r8, lsl r1
  28:	061e011a 			; <UNDEFINED> instruction: 0x061e011a

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	00000018 	andeq	r0, r0, r8, lsl r0
  14:	00000000 	andeq	r0, r0, r0
  18:	20000010 	andcs	r0, r0, r0, lsl r0
  1c:	0000001a 	andeq	r0, r0, sl, lsl r0
  20:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  24:	41018e02 	tstmi	r1, r2, lsl #28
  28:	0000070d 	andeq	r0, r0, sp, lsl #14
  2c:	0000001c 	andeq	r0, r0, ip, lsl r0
  30:	00000000 	andeq	r0, r0, r0
  34:	2000002a 	andcs	r0, r0, sl, lsr #32
  38:	00000032 	andeq	r0, r0, r2, lsr r0
  3c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  40:	41018e02 	tstmi	r1, r2, lsl #28
  44:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
  48:	00000007 	andeq	r0, r0, r7
  4c:	0000001c 	andeq	r0, r0, ip, lsl r0
  50:	00000000 	andeq	r0, r0, r0
  54:	2000005c 	andcs	r0, r0, ip, asr r0
  58:	0000003c 	andeq	r0, r0, ip, lsr r0
  5c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  60:	41018e02 	tstmi	r1, r2, lsl #28
  64:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
  68:	00000007 	andeq	r0, r0, r7
  6c:	0000001c 	andeq	r0, r0, ip, lsl r0
  70:	00000000 	andeq	r0, r0, r0
  74:	20000098 	mulcs	r0, r8, r0
  78:	0000002a 	andeq	r0, r0, sl, lsr #32
  7c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  80:	41018e02 	tstmi	r1, r2, lsl #28
  84:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
  88:	00000007 	andeq	r0, r0, r7
  8c:	0000001c 	andeq	r0, r0, ip, lsl r0
  90:	00000000 	andeq	r0, r0, r0
  94:	200000c2 	andcs	r0, r0, r2, asr #1
  98:	0000002a 	andeq	r0, r0, sl, lsr #32
  9c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  a0:	41018e02 	tstmi	r1, r2, lsl #28
  a4:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
  a8:	00000007 	andeq	r0, r0, r7
  ac:	0000001c 	andeq	r0, r0, ip, lsl r0
  b0:	00000000 	andeq	r0, r0, r0
  b4:	200000ec 	andcs	r0, r0, ip, ror #1
  b8:	00000030 	andeq	r0, r0, r0, lsr r0
  bc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  c0:	41018e02 	tstmi	r1, r2, lsl #28
  c4:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
  c8:	00000007 	andeq	r0, r0, r7
  cc:	0000001c 	andeq	r0, r0, ip, lsl r0
  d0:	00000000 	andeq	r0, r0, r0
  d4:	2000011c 	andcs	r0, r0, ip, lsl r1
  d8:	00000034 	andeq	r0, r0, r4, lsr r0
  dc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  e0:	41018e02 	tstmi	r1, r2, lsl #28
  e4:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
  e8:	00000007 	andeq	r0, r0, r7
  ec:	0000001c 	andeq	r0, r0, ip, lsl r0
  f0:	00000000 	andeq	r0, r0, r0
  f4:	20000150 	andcs	r0, r0, r0, asr r1
  f8:	0000003c 	andeq	r0, r0, ip, lsr r0
  fc:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
 100:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 104:	180e4101 	stmdane	lr, {r0, r8, lr}
 108:	00070d41 	andeq	r0, r7, r1, asr #26
 10c:	0000001c 	andeq	r0, r0, ip, lsl r0
 110:	00000000 	andeq	r0, r0, r0
 114:	2000018c 	andcs	r0, r0, ip, lsl #3
 118:	0000003c 	andeq	r0, r0, ip, lsr r0
 11c:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
 120:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 124:	180e4101 	stmdane	lr, {r0, r8, lr}
 128:	00070d41 	andeq	r0, r7, r1, asr #26
 12c:	00000018 	andeq	r0, r0, r8, lsl r0
 130:	00000000 	andeq	r0, r0, r0
 134:	200001c8 	andcs	r0, r0, r8, asr #3
 138:	0000002e 	andeq	r0, r0, lr, lsr #32
 13c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 140:	41018e02 	tstmi	r1, r2, lsl #28
 144:	0000070d 	andeq	r0, r0, sp, lsl #14
 148:	00000018 	andeq	r0, r0, r8, lsl r0
 14c:	00000000 	andeq	r0, r0, r0
 150:	200001f6 	strdcs	r0, [r0], -r6
 154:	0000002e 	andeq	r0, r0, lr, lsr #32
 158:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 15c:	41018e02 	tstmi	r1, r2, lsl #28
 160:	0000070d 	andeq	r0, r0, sp, lsl #14
 164:	00000018 	andeq	r0, r0, r8, lsl r0
 168:	00000000 	andeq	r0, r0, r0
 16c:	20000224 	andcs	r0, r0, r4, lsr #4
 170:	0000002e 	andeq	r0, r0, lr, lsr #32
 174:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 178:	41018e02 	tstmi	r1, r2, lsl #28
 17c:	0000070d 	andeq	r0, r0, sp, lsl #14
 180:	00000018 	andeq	r0, r0, r8, lsl r0
 184:	00000000 	andeq	r0, r0, r0
 188:	20000252 	andcs	r0, r0, r2, asr r2
 18c:	0000002e 	andeq	r0, r0, lr, lsr #32
 190:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 194:	41018e02 	tstmi	r1, r2, lsl #28
 198:	0000070d 	andeq	r0, r0, sp, lsl #14
 19c:	0000001c 	andeq	r0, r0, ip, lsl r0
 1a0:	00000000 	andeq	r0, r0, r0
 1a4:	20000280 	andcs	r0, r0, r0, lsl #5
 1a8:	0000002a 	andeq	r0, r0, sl, lsr #32
 1ac:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 1b0:	41018e02 	tstmi	r1, r2, lsl #28
 1b4:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 1b8:	00000007 	andeq	r0, r0, r7
 1bc:	0000001c 	andeq	r0, r0, ip, lsl r0
 1c0:	00000000 	andeq	r0, r0, r0
 1c4:	200002aa 	andcs	r0, r0, sl, lsr #5
 1c8:	0000004c 	andeq	r0, r0, ip, asr #32
 1cc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 1d0:	41018e02 	tstmi	r1, r2, lsl #28
 1d4:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 1d8:	00000007 	andeq	r0, r0, r7
 1dc:	0000000c 	andeq	r0, r0, ip
 1e0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 1e4:	7c020001 	stcvc	0, cr0, [r2], {1}
 1e8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 1ec:	0000000c 	andeq	r0, r0, ip
 1f0:	000001dc 	ldrdeq	r0, [r0], -ip
 1f4:	20000000 	andcs	r0, r0, r0
 1f8:	0000000c 	andeq	r0, r0, ip
 1fc:	0000001c 	andeq	r0, r0, ip, lsl r0
 200:	000001dc 	ldrdeq	r0, [r0], -ip
 204:	200002f8 	strdcs	r0, [r0], -r8
 208:	00000020 	andeq	r0, r0, r0, lsr #32
 20c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 210:	41018e02 	tstmi	r1, r2, lsl #28
 214:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 218:	00000007 	andeq	r0, r0, r7
 21c:	0000001c 	andeq	r0, r0, ip, lsl r0
 220:	000001dc 	ldrdeq	r0, [r0], -ip
 224:	20000318 	andcs	r0, r0, r8, lsl r3
 228:	00000062 	andeq	r0, r0, r2, rrx
 22c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 230:	41018e02 	tstmi	r1, r2, lsl #28
 234:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 238:	00000007 	andeq	r0, r0, r7
 23c:	0000001c 	andeq	r0, r0, ip, lsl r0
 240:	000001dc 	ldrdeq	r0, [r0], -ip
 244:	2000037a 	andcs	r0, r0, sl, ror r3
 248:	00000062 	andeq	r0, r0, r2, rrx
 24c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 250:	41018e02 	tstmi	r1, r2, lsl #28
 254:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 258:	00000007 	andeq	r0, r0, r7
 25c:	0000001c 	andeq	r0, r0, ip, lsl r0
 260:	000001dc 	ldrdeq	r0, [r0], -ip
 264:	200003dc 	ldrdcs	r0, [r0], -ip
 268:	000000ac 	andeq	r0, r0, ip, lsr #1
 26c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 270:	41018e02 	tstmi	r1, r2, lsl #28
 274:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 278:	00000007 	andeq	r0, r0, r7
 27c:	0000001c 	andeq	r0, r0, ip, lsl r0
 280:	000001dc 	ldrdeq	r0, [r0], -ip
 284:	20000488 	andcs	r0, r0, r8, lsl #9
 288:	0000002c 	andeq	r0, r0, ip, lsr #32
 28c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 290:	41018e02 	tstmi	r1, r2, lsl #28
 294:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 298:	00000007 	andeq	r0, r0, r7
 29c:	0000001c 	andeq	r0, r0, ip, lsl r0
 2a0:	000001dc 	ldrdeq	r0, [r0], -ip
 2a4:	200004b4 			; <UNDEFINED> instruction: 0x200004b4
 2a8:	000000c2 	andeq	r0, r0, r2, asr #1
 2ac:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 2b0:	41018e02 	tstmi	r1, r2, lsl #28
 2b4:	0d41300e 	stcleq	0, cr3, [r1, #-56]	; 0xffffffc8
 2b8:	00000007 	andeq	r0, r0, r7
 2bc:	0000001c 	andeq	r0, r0, ip, lsl r0
 2c0:	000001dc 	ldrdeq	r0, [r0], -ip
 2c4:	20000576 	andcs	r0, r0, r6, ror r5
 2c8:	0000006a 	andeq	r0, r0, sl, rrx
 2cc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 2d0:	41018e02 	tstmi	r1, r2, lsl #28
 2d4:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 2d8:	00000007 	andeq	r0, r0, r7
 2dc:	0000001c 	andeq	r0, r0, ip, lsl r0
 2e0:	000001dc 	ldrdeq	r0, [r0], -ip
 2e4:	200005e0 	andcs	r0, r0, r0, ror #11
 2e8:	00000090 	muleq	r0, r0, r0
 2ec:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 2f0:	41018e02 	tstmi	r1, r2, lsl #28
 2f4:	0d41200e 	stcleq	0, cr2, [r1, #-56]	; 0xffffffc8
 2f8:	00000007 	andeq	r0, r0, r7
 2fc:	0000001c 	andeq	r0, r0, ip, lsl r0
 300:	000001dc 	ldrdeq	r0, [r0], -ip
 304:	20000670 	andcs	r0, r0, r0, ror r6
 308:	000000d4 	ldrdeq	r0, [r0], -r4
 30c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 310:	41018e02 	tstmi	r1, r2, lsl #28
 314:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 318:	00000007 	andeq	r0, r0, r7
 31c:	00000018 	andeq	r0, r0, r8, lsl r0
 320:	000001dc 	ldrdeq	r0, [r0], -ip
 324:	20000744 	andcs	r0, r0, r4, asr #14
 328:	00000060 	andeq	r0, r0, r0, rrx
 32c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 330:	41018e02 	tstmi	r1, r2, lsl #28
 334:	0000070d 	andeq	r0, r0, sp, lsl #14
 338:	0000001c 	andeq	r0, r0, ip, lsl r0
 33c:	000001dc 	ldrdeq	r0, [r0], -ip
 340:	200007a4 	andcs	r0, r0, r4, lsr #15
 344:	00000128 	andeq	r0, r0, r8, lsr #2
 348:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 34c:	41018e02 	tstmi	r1, r2, lsl #28
 350:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 354:	00000007 	andeq	r0, r0, r7
 358:	00000018 	andeq	r0, r0, r8, lsl r0
 35c:	000001dc 	ldrdeq	r0, [r0], -ip
 360:	200008cc 	andcs	r0, r0, ip, asr #17
 364:	00000028 	andeq	r0, r0, r8, lsr #32
 368:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 36c:	41018e02 	tstmi	r1, r2, lsl #28
 370:	0000070d 	andeq	r0, r0, sp, lsl #14
 374:	00000020 	andeq	r0, r0, r0, lsr #32
 378:	000001dc 	ldrdeq	r0, [r0], -ip
 37c:	200008f4 	strdcs	r0, [r0], -r4
 380:	00000118 	andeq	r0, r0, r8, lsl r1
 384:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
 388:	87038504 	strhi	r8, [r3, -r4, lsl #10]
 38c:	42018e02 	andmi	r8, r1, #2, 28
 390:	4138c80e 	teqmi	r8, lr, lsl #16
 394:	0000070d 	andeq	r0, r0, sp, lsl #14
 398:	0000000c 	andeq	r0, r0, ip
 39c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 3a0:	7c020001 	stcvc	0, cr0, [r2], {1}
 3a4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 3a8:	0000001c 	andeq	r0, r0, ip, lsl r0
 3ac:	00000398 	muleq	r0, r8, r3
 3b0:	20000a0c 	andcs	r0, r0, ip, lsl #20
 3b4:	00000024 	andeq	r0, r0, r4, lsr #32
 3b8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 3bc:	41018e02 	tstmi	r1, r2, lsl #28
 3c0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 3c4:	00000007 	andeq	r0, r0, r7
 3c8:	0000001c 	andeq	r0, r0, ip, lsl r0
 3cc:	00000398 	muleq	r0, r8, r3
 3d0:	20000a30 	andcs	r0, r0, r0, lsr sl
 3d4:	00000044 	andeq	r0, r0, r4, asr #32
 3d8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 3dc:	41018e02 	tstmi	r1, r2, lsl #28
 3e0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 3e4:	00000007 	andeq	r0, r0, r7
 3e8:	0000001c 	andeq	r0, r0, ip, lsl r0
 3ec:	00000398 	muleq	r0, r8, r3
 3f0:	20000a74 	andcs	r0, r0, r4, ror sl
 3f4:	00000068 	andeq	r0, r0, r8, rrx
 3f8:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
 3fc:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 400:	380e4101 	stmdacc	lr, {r0, r8, lr}
 404:	00070d41 	andeq	r0, r7, r1, asr #26
 408:	0000001c 	andeq	r0, r0, ip, lsl r0
 40c:	00000398 	muleq	r0, r8, r3
 410:	20000adc 	ldrdcs	r0, [r0], -ip
 414:	00000020 	andeq	r0, r0, r0, lsr #32
 418:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 41c:	41018e02 	tstmi	r1, r2, lsl #28
 420:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 424:	00000007 	andeq	r0, r0, r7
 428:	0000000c 	andeq	r0, r0, ip
 42c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 430:	7c020001 	stcvc	0, cr0, [r2], {1}
 434:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 438:	00000018 	andeq	r0, r0, r8, lsl r0
 43c:	00000428 	andeq	r0, r0, r8, lsr #8
 440:	20000afc 	strdcs	r0, [r0], -ip
 444:	0000000a 	andeq	r0, r0, sl
 448:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 44c:	41018e02 	tstmi	r1, r2, lsl #28
 450:	0000070d 	andeq	r0, r0, sp, lsl #14
 454:	00000018 	andeq	r0, r0, r8, lsl r0
 458:	00000428 	andeq	r0, r0, r8, lsr #8
 45c:	20000b06 	andcs	r0, r0, r6, lsl #22
 460:	0000000a 	andeq	r0, r0, sl
 464:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 468:	41018e02 	tstmi	r1, r2, lsl #28
 46c:	0000070d 	andeq	r0, r0, sp, lsl #14
 470:	0000001c 	andeq	r0, r0, ip, lsl r0
 474:	00000428 	andeq	r0, r0, r8, lsr #8
 478:	20000b10 	andcs	r0, r0, r0, lsl fp
 47c:	00000010 	andeq	r0, r0, r0, lsl r0
 480:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 484:	41018e02 	tstmi	r1, r2, lsl #28
 488:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 48c:	00000007 	andeq	r0, r0, r7
 490:	0000001c 	andeq	r0, r0, ip, lsl r0
 494:	00000428 	andeq	r0, r0, r8, lsr #8
 498:	20000b20 	andcs	r0, r0, r0, lsr #22
 49c:	0000003e 	andeq	r0, r0, lr, lsr r0
 4a0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 4a4:	41018e02 	tstmi	r1, r2, lsl #28
 4a8:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 4ac:	00000007 	andeq	r0, r0, r7
 4b0:	0000000c 	andeq	r0, r0, ip
 4b4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 4b8:	7c020001 	stcvc	0, cr0, [r2], {1}
 4bc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 4c0:	00000018 	andeq	r0, r0, r8, lsl r0
 4c4:	000004b0 			; <UNDEFINED> instruction: 0x000004b0
 4c8:	20000b60 	andcs	r0, r0, r0, ror #22
 4cc:	0000005c 	andeq	r0, r0, ip, asr r0
 4d0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 4d4:	41018e02 	tstmi	r1, r2, lsl #28
 4d8:	0000070d 	andeq	r0, r0, sp, lsl #14
 4dc:	0000001c 	andeq	r0, r0, ip, lsl r0
 4e0:	000004b0 			; <UNDEFINED> instruction: 0x000004b0
 4e4:	20000bbc 			; <UNDEFINED> instruction: 0x20000bbc
 4e8:	00000050 	andeq	r0, r0, r0, asr r0
 4ec:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 4f0:	41018e02 	tstmi	r1, r2, lsl #28
 4f4:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 4f8:	00000007 	andeq	r0, r0, r7
 4fc:	0000001c 	andeq	r0, r0, ip, lsl r0
 500:	000004b0 			; <UNDEFINED> instruction: 0x000004b0
 504:	20000c0c 	andcs	r0, r0, ip, lsl #24
 508:	00000044 	andeq	r0, r0, r4, asr #32
 50c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 510:	41018e02 	tstmi	r1, r2, lsl #28
 514:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 518:	00000007 	andeq	r0, r0, r7
 51c:	0000001c 	andeq	r0, r0, ip, lsl r0
 520:	000004b0 			; <UNDEFINED> instruction: 0x000004b0
 524:	20000c50 	andcs	r0, r0, r0, asr ip
 528:	0000005a 	andeq	r0, r0, sl, asr r0
 52c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 530:	41018e02 	tstmi	r1, r2, lsl #28
 534:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 538:	00000007 	andeq	r0, r0, r7
 53c:	00000018 	andeq	r0, r0, r8, lsl r0
 540:	000004b0 			; <UNDEFINED> instruction: 0x000004b0
 544:	20000caa 	andcs	r0, r0, sl, lsr #25
 548:	0000003e 	andeq	r0, r0, lr, lsr r0
 54c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 550:	41018e02 	tstmi	r1, r2, lsl #28
 554:	0000070d 	andeq	r0, r0, sp, lsl #14
 558:	0000001c 	andeq	r0, r0, ip, lsl r0
 55c:	000004b0 			; <UNDEFINED> instruction: 0x000004b0
 560:	20000ce8 	andcs	r0, r0, r8, ror #25
 564:	0000008c 	andeq	r0, r0, ip, lsl #1
 568:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 56c:	41018e02 	tstmi	r1, r2, lsl #28
 570:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 574:	00000007 	andeq	r0, r0, r7
 578:	0000001c 	andeq	r0, r0, ip, lsl r0
 57c:	000004b0 			; <UNDEFINED> instruction: 0x000004b0
 580:	20000d74 	andcs	r0, r0, r4, ror sp
 584:	0000002a 	andeq	r0, r0, sl, lsr #32
 588:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 58c:	41018e02 	tstmi	r1, r2, lsl #28
 590:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 594:	00000007 	andeq	r0, r0, r7
 598:	0000001c 	andeq	r0, r0, ip, lsl r0
 59c:	000004b0 			; <UNDEFINED> instruction: 0x000004b0
 5a0:	20000d9e 	mulcs	r0, lr, sp
 5a4:	00000076 	andeq	r0, r0, r6, ror r0
 5a8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 5ac:	41018e02 	tstmi	r1, r2, lsl #28
 5b0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 5b4:	00000007 	andeq	r0, r0, r7
 5b8:	0000001c 	andeq	r0, r0, ip, lsl r0
 5bc:	000004b0 			; <UNDEFINED> instruction: 0x000004b0
 5c0:	20000e14 	andcs	r0, r0, r4, lsl lr
 5c4:	00000046 	andeq	r0, r0, r6, asr #32
 5c8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 5cc:	41018e02 	tstmi	r1, r2, lsl #28
 5d0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 5d4:	00000007 	andeq	r0, r0, r7
 5d8:	0000001c 	andeq	r0, r0, ip, lsl r0
 5dc:	000004b0 			; <UNDEFINED> instruction: 0x000004b0
 5e0:	20000e5a 	andcs	r0, r0, sl, asr lr
 5e4:	00000046 	andeq	r0, r0, r6, asr #32
 5e8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 5ec:	41018e02 	tstmi	r1, r2, lsl #28
 5f0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 5f4:	00000007 	andeq	r0, r0, r7
 5f8:	0000001c 	andeq	r0, r0, ip, lsl r0
 5fc:	000004b0 			; <UNDEFINED> instruction: 0x000004b0
 600:	20000ea0 	andcs	r0, r0, r0, lsr #29
 604:	0000005a 	andeq	r0, r0, sl, asr r0
 608:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 60c:	41018e02 	tstmi	r1, r2, lsl #28
 610:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 614:	00000007 	andeq	r0, r0, r7
 618:	0000001c 	andeq	r0, r0, ip, lsl r0
 61c:	000004b0 			; <UNDEFINED> instruction: 0x000004b0
 620:	20000efa 	strdcs	r0, [r0], -sl
 624:	00000036 	andeq	r0, r0, r6, lsr r0
 628:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 62c:	41018e02 	tstmi	r1, r2, lsl #28
 630:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 634:	00000007 	andeq	r0, r0, r7
 638:	0000001c 	andeq	r0, r0, ip, lsl r0
 63c:	000004b0 			; <UNDEFINED> instruction: 0x000004b0
 640:	20000f30 	andcs	r0, r0, r0, lsr pc
 644:	00000084 	andeq	r0, r0, r4, lsl #1
 648:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 64c:	41018e02 	tstmi	r1, r2, lsl #28
 650:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 654:	00000007 	andeq	r0, r0, r7
 658:	0000001c 	andeq	r0, r0, ip, lsl r0
 65c:	000004b0 			; <UNDEFINED> instruction: 0x000004b0
 660:	20000fb4 			; <UNDEFINED> instruction: 0x20000fb4
 664:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 668:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 66c:	41018e02 	tstmi	r1, r2, lsl #28
 670:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 674:	00000007 	andeq	r0, r0, r7
 678:	0000000c 	andeq	r0, r0, ip
 67c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 680:	7c020001 	stcvc	0, cr0, [r2], {1}
 684:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 688:	0000001c 	andeq	r0, r0, ip, lsl r0
 68c:	00000678 	andeq	r0, r0, r8, ror r6
 690:	20001084 	andcs	r1, r0, r4, lsl #1
 694:	00000030 	andeq	r0, r0, r0, lsr r0
 698:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 69c:	41018e02 	tstmi	r1, r2, lsl #28
 6a0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 6a4:	00000007 	andeq	r0, r0, r7
 6a8:	00000018 	andeq	r0, r0, r8, lsl r0
 6ac:	00000678 	andeq	r0, r0, r8, ror r6
 6b0:	200010b4 	strhcs	r1, [r0], -r4
 6b4:	0000001c 	andeq	r0, r0, ip, lsl r0
 6b8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 6bc:	41018e02 	tstmi	r1, r2, lsl #28
 6c0:	0000070d 	andeq	r0, r0, sp, lsl #14
 6c4:	00000018 	andeq	r0, r0, r8, lsl r0
 6c8:	00000678 	andeq	r0, r0, r8, ror r6
 6cc:	200010d0 	ldrdcs	r1, [r0], -r0
 6d0:	00000018 	andeq	r0, r0, r8, lsl r0
 6d4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 6d8:	41018e02 	tstmi	r1, r2, lsl #28
 6dc:	0000070d 	andeq	r0, r0, sp, lsl #14
 6e0:	00000018 	andeq	r0, r0, r8, lsl r0
 6e4:	00000678 	andeq	r0, r0, r8, ror r6
 6e8:	200010e8 	andcs	r1, r0, r8, ror #1
 6ec:	0000001c 	andeq	r0, r0, ip, lsl r0
 6f0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 6f4:	41018e02 	tstmi	r1, r2, lsl #28
 6f8:	0000070d 	andeq	r0, r0, sp, lsl #14
 6fc:	00000018 	andeq	r0, r0, r8, lsl r0
 700:	00000678 	andeq	r0, r0, r8, ror r6
 704:	20001104 	andcs	r1, r0, r4, lsl #2
 708:	00000014 	andeq	r0, r0, r4, lsl r0
 70c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 710:	41018e02 	tstmi	r1, r2, lsl #28
 714:	0000070d 	andeq	r0, r0, sp, lsl #14
 718:	0000001c 	andeq	r0, r0, ip, lsl r0
 71c:	00000678 	andeq	r0, r0, r8, ror r6
 720:	20001118 	andcs	r1, r0, r8, lsl r1
 724:	00000060 	andeq	r0, r0, r0, rrx
 728:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 72c:	41018e02 	tstmi	r1, r2, lsl #28
 730:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 734:	00000007 	andeq	r0, r0, r7
 738:	0000001c 	andeq	r0, r0, ip, lsl r0
 73c:	00000678 	andeq	r0, r0, r8, ror r6
 740:	20001178 	andcs	r1, r0, r8, ror r1
 744:	00000048 	andeq	r0, r0, r8, asr #32
 748:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 74c:	41018e02 	tstmi	r1, r2, lsl #28
 750:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 754:	00000007 	andeq	r0, r0, r7
 758:	0000000c 	andeq	r0, r0, ip
 75c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 760:	7c010001 	stcvc	0, cr0, [r1], {1}
 764:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 768:	0000000c 	andeq	r0, r0, ip
 76c:	00000758 	andeq	r0, r0, r8, asr r7
 770:	200011c1 	andcs	r1, r0, r1, asr #3
 774:	0000010a 	andeq	r0, r0, sl, lsl #2

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	200002f8 	strdcs	r0, [r0], -r8
   4:	20000a0c 	andcs	r0, r0, ip, lsl #20
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...
