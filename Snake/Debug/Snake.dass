
./Debug/Snake.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:
static volatile int points, snakeSize;

__attribute__((naked)) __attribute__((section (".start_section")) )
void startup ( void )
{
__asm__ volatile(" LDR R0,=0x2001C000\n");		/* set stack */
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <startup+0xc>)
__asm__ volatile(" MOV SP,R0\n");
20000002:	4685      	mov	sp, r0
__asm__ volatile(" BL main\n");					/* call main */
20000004:	f000 fb40 	bl	20000688 <main>
__asm__ volatile(".L1: B .L1\n");				/* never return */
20000008:	e7fe      	b.n	20000008 <startup+0x8>
};
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <set_object_speed>:

void set_object_speed(POBJECT o, int speedx, int speedy){
20000010:	b580      	push	{r7, lr}
20000012:	b084      	sub	sp, #16
20000014:	af00      	add	r7, sp, #0
20000016:	60f8      	str	r0, [r7, #12]
20000018:	60b9      	str	r1, [r7, #8]
2000001a:	607a      	str	r2, [r7, #4]
    o->dirx = speedx;
2000001c:	68fb      	ldr	r3, [r7, #12]
2000001e:	68ba      	ldr	r2, [r7, #8]
20000020:	605a      	str	r2, [r3, #4]
    o->diry = speedy;
20000022:	68fb      	ldr	r3, [r7, #12]
20000024:	687a      	ldr	r2, [r7, #4]
20000026:	609a      	str	r2, [r3, #8]
}
20000028:	46c0      	nop			; (mov r8, r8)
2000002a:	46bd      	mov	sp, r7
2000002c:	b004      	add	sp, #16
2000002e:	bd80      	pop	{r7, pc}

20000030 <draw_object>:

void draw_object(POBJECT o){
20000030:	b580      	push	{r7, lr}
20000032:	b084      	sub	sp, #16
20000034:	af00      	add	r7, sp, #0
20000036:	6078      	str	r0, [r7, #4]
    for (int i = 0; i<o->geo->numpoints; i++)
20000038:	2300      	movs	r3, #0
2000003a:	60fb      	str	r3, [r7, #12]
2000003c:	e01e      	b.n	2000007c <draw_object+0x4c>
        pixel(o->geo->px[i].x+o->posx,o->geo->px[i].y+o->posy);
2000003e:	687b      	ldr	r3, [r7, #4]
20000040:	681a      	ldr	r2, [r3, #0]
20000042:	68fb      	ldr	r3, [r7, #12]
20000044:	3304      	adds	r3, #4
20000046:	005b      	lsls	r3, r3, #1
20000048:	18d3      	adds	r3, r2, r3
2000004a:	3304      	adds	r3, #4
2000004c:	781b      	ldrb	r3, [r3, #0]
2000004e:	001a      	movs	r2, r3
20000050:	687b      	ldr	r3, [r7, #4]
20000052:	68db      	ldr	r3, [r3, #12]
20000054:	18d3      	adds	r3, r2, r3
20000056:	0018      	movs	r0, r3
20000058:	687b      	ldr	r3, [r7, #4]
2000005a:	681a      	ldr	r2, [r3, #0]
2000005c:	68fb      	ldr	r3, [r7, #12]
2000005e:	3304      	adds	r3, #4
20000060:	005b      	lsls	r3, r3, #1
20000062:	18d3      	adds	r3, r2, r3
20000064:	3305      	adds	r3, #5
20000066:	781b      	ldrb	r3, [r3, #0]
20000068:	001a      	movs	r2, r3
2000006a:	687b      	ldr	r3, [r7, #4]
2000006c:	691b      	ldr	r3, [r3, #16]
2000006e:	18d3      	adds	r3, r2, r3
20000070:	0019      	movs	r1, r3
20000072:	f000 ff2f 	bl	20000ed4 <pixel>
    for (int i = 0; i<o->geo->numpoints; i++)
20000076:	68fb      	ldr	r3, [r7, #12]
20000078:	3301      	adds	r3, #1
2000007a:	60fb      	str	r3, [r7, #12]
2000007c:	687b      	ldr	r3, [r7, #4]
2000007e:	681b      	ldr	r3, [r3, #0]
20000080:	681b      	ldr	r3, [r3, #0]
20000082:	68fa      	ldr	r2, [r7, #12]
20000084:	429a      	cmp	r2, r3
20000086:	dbda      	blt.n	2000003e <draw_object+0xe>
        
}
20000088:	46c0      	nop			; (mov r8, r8)
2000008a:	46c0      	nop			; (mov r8, r8)
2000008c:	46bd      	mov	sp, r7
2000008e:	b004      	add	sp, #16
20000090:	bd80      	pop	{r7, pc}

20000092 <clear_object>:

void clear_object(POBJECT o){
20000092:	b580      	push	{r7, lr}
20000094:	b084      	sub	sp, #16
20000096:	af00      	add	r7, sp, #0
20000098:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < o->geo->numpoints; i++)
2000009a:	2300      	movs	r3, #0
2000009c:	60fb      	str	r3, [r7, #12]
2000009e:	e01e      	b.n	200000de <clear_object+0x4c>
        pixel(o->geo->px[i].x+o->posx,o->geo->px[i].y+o->posy);
200000a0:	687b      	ldr	r3, [r7, #4]
200000a2:	681a      	ldr	r2, [r3, #0]
200000a4:	68fb      	ldr	r3, [r7, #12]
200000a6:	3304      	adds	r3, #4
200000a8:	005b      	lsls	r3, r3, #1
200000aa:	18d3      	adds	r3, r2, r3
200000ac:	3304      	adds	r3, #4
200000ae:	781b      	ldrb	r3, [r3, #0]
200000b0:	001a      	movs	r2, r3
200000b2:	687b      	ldr	r3, [r7, #4]
200000b4:	68db      	ldr	r3, [r3, #12]
200000b6:	18d3      	adds	r3, r2, r3
200000b8:	0018      	movs	r0, r3
200000ba:	687b      	ldr	r3, [r7, #4]
200000bc:	681a      	ldr	r2, [r3, #0]
200000be:	68fb      	ldr	r3, [r7, #12]
200000c0:	3304      	adds	r3, #4
200000c2:	005b      	lsls	r3, r3, #1
200000c4:	18d3      	adds	r3, r2, r3
200000c6:	3305      	adds	r3, #5
200000c8:	781b      	ldrb	r3, [r3, #0]
200000ca:	001a      	movs	r2, r3
200000cc:	687b      	ldr	r3, [r7, #4]
200000ce:	691b      	ldr	r3, [r3, #16]
200000d0:	18d3      	adds	r3, r2, r3
200000d2:	0019      	movs	r1, r3
200000d4:	f000 fefe 	bl	20000ed4 <pixel>
    for (int i = 0; i < o->geo->numpoints; i++)
200000d8:	68fb      	ldr	r3, [r7, #12]
200000da:	3301      	adds	r3, #1
200000dc:	60fb      	str	r3, [r7, #12]
200000de:	687b      	ldr	r3, [r7, #4]
200000e0:	681b      	ldr	r3, [r3, #0]
200000e2:	681b      	ldr	r3, [r3, #0]
200000e4:	68fa      	ldr	r2, [r7, #12]
200000e6:	429a      	cmp	r2, r3
200000e8:	dbda      	blt.n	200000a0 <clear_object+0xe>
        
}
200000ea:	46c0      	nop			; (mov r8, r8)
200000ec:	46c0      	nop			; (mov r8, r8)
200000ee:	46bd      	mov	sp, r7
200000f0:	b004      	add	sp, #16
200000f2:	bd80      	pop	{r7, pc}

200000f4 <move_object>:

void move_object(POBJECT o){
200000f4:	b580      	push	{r7, lr}
200000f6:	b082      	sub	sp, #8
200000f8:	af00      	add	r7, sp, #0
200000fa:	6078      	str	r0, [r7, #4]
    //clear_object(o);
    
    o->posx = o->posx + o->dirx;
200000fc:	687b      	ldr	r3, [r7, #4]
200000fe:	68da      	ldr	r2, [r3, #12]
20000100:	687b      	ldr	r3, [r7, #4]
20000102:	685b      	ldr	r3, [r3, #4]
20000104:	18d2      	adds	r2, r2, r3
20000106:	687b      	ldr	r3, [r7, #4]
20000108:	60da      	str	r2, [r3, #12]
    o->posy = o->posy + o->diry;
2000010a:	687b      	ldr	r3, [r7, #4]
2000010c:	691a      	ldr	r2, [r3, #16]
2000010e:	687b      	ldr	r3, [r7, #4]
20000110:	689b      	ldr	r3, [r3, #8]
20000112:	18d2      	adds	r2, r2, r3
20000114:	687b      	ldr	r3, [r7, #4]
20000116:	611a      	str	r2, [r3, #16]
    
    /*Position static if direction makes ball go out of bounds*/
    //Bounce left wall
    if((o->posx+o->dirx)<1){
20000118:	687b      	ldr	r3, [r7, #4]
2000011a:	68da      	ldr	r2, [r3, #12]
2000011c:	687b      	ldr	r3, [r7, #4]
2000011e:	685b      	ldr	r3, [r3, #4]
20000120:	18d3      	adds	r3, r2, r3
20000122:	2b00      	cmp	r3, #0
20000124:	dc07      	bgt.n	20000136 <move_object+0x42>
        o->dirx *= -1;
20000126:	687b      	ldr	r3, [r7, #4]
20000128:	685b      	ldr	r3, [r3, #4]
2000012a:	425a      	negs	r2, r3
2000012c:	687b      	ldr	r3, [r7, #4]
2000012e:	605a      	str	r2, [r3, #4]
        o->posx = 1;
20000130:	687b      	ldr	r3, [r7, #4]
20000132:	2201      	movs	r2, #1
20000134:	60da      	str	r2, [r3, #12]
    }
    //Bounce right wall
    if((o->posx+o->dirx)>128){
20000136:	687b      	ldr	r3, [r7, #4]
20000138:	68da      	ldr	r2, [r3, #12]
2000013a:	687b      	ldr	r3, [r7, #4]
2000013c:	685b      	ldr	r3, [r3, #4]
2000013e:	18d3      	adds	r3, r2, r3
20000140:	2b80      	cmp	r3, #128	; 0x80
20000142:	dd07      	ble.n	20000154 <move_object+0x60>
        o->dirx *= -1;
20000144:	687b      	ldr	r3, [r7, #4]
20000146:	685b      	ldr	r3, [r3, #4]
20000148:	425a      	negs	r2, r3
2000014a:	687b      	ldr	r3, [r7, #4]
2000014c:	605a      	str	r2, [r3, #4]
        o->posx=127;
2000014e:	687b      	ldr	r3, [r7, #4]
20000150:	227f      	movs	r2, #127	; 0x7f
20000152:	60da      	str	r2, [r3, #12]
    }
    //bounce upper wall
    if((o->posy+o->diry)<1){
20000154:	687b      	ldr	r3, [r7, #4]
20000156:	691a      	ldr	r2, [r3, #16]
20000158:	687b      	ldr	r3, [r7, #4]
2000015a:	689b      	ldr	r3, [r3, #8]
2000015c:	18d3      	adds	r3, r2, r3
2000015e:	2b00      	cmp	r3, #0
20000160:	dc07      	bgt.n	20000172 <move_object+0x7e>
        o->diry *= -1;
20000162:	687b      	ldr	r3, [r7, #4]
20000164:	689b      	ldr	r3, [r3, #8]
20000166:	425a      	negs	r2, r3
20000168:	687b      	ldr	r3, [r7, #4]
2000016a:	609a      	str	r2, [r3, #8]
        o->posy = 1;
2000016c:	687b      	ldr	r3, [r7, #4]
2000016e:	2201      	movs	r2, #1
20000170:	611a      	str	r2, [r3, #16]
    }
    //bounce lower wall
    if((o->posy+o->diry)>64){
20000172:	687b      	ldr	r3, [r7, #4]
20000174:	691a      	ldr	r2, [r3, #16]
20000176:	687b      	ldr	r3, [r7, #4]
20000178:	689b      	ldr	r3, [r3, #8]
2000017a:	18d3      	adds	r3, r2, r3
2000017c:	2b40      	cmp	r3, #64	; 0x40
2000017e:	dd07      	ble.n	20000190 <move_object+0x9c>
        o->diry *= -1;
20000180:	687b      	ldr	r3, [r7, #4]
20000182:	689b      	ldr	r3, [r3, #8]
20000184:	425a      	negs	r2, r3
20000186:	687b      	ldr	r3, [r7, #4]
20000188:	609a      	str	r2, [r3, #8]
        o->posy = 63;
2000018a:	687b      	ldr	r3, [r7, #4]
2000018c:	223f      	movs	r2, #63	; 0x3f
2000018e:	611a      	str	r2, [r3, #16]
    }
    draw_object(o);
20000190:	687b      	ldr	r3, [r7, #4]
20000192:	0018      	movs	r0, r3
20000194:	f7ff ff4c 	bl	20000030 <draw_object>
}
20000198:	46c0      	nop			; (mov r8, r8)
2000019a:	46bd      	mov	sp, r7
2000019c:	b002      	add	sp, #8
2000019e:	bd80      	pop	{r7, pc}

200001a0 <load_sprite>:
    clear_object,
    move_object,
    set_object_speed
};

static void load_sprite(sprite* s, unsigned char* data, int width, int height){
200001a0:	b580      	push	{r7, lr}
200001a2:	b084      	sub	sp, #16
200001a4:	af00      	add	r7, sp, #0
200001a6:	60f8      	str	r0, [r7, #12]
200001a8:	60b9      	str	r1, [r7, #8]
200001aa:	607a      	str	r2, [r7, #4]
200001ac:	603b      	str	r3, [r7, #0]
    s->width = width;
200001ae:	687b      	ldr	r3, [r7, #4]
200001b0:	b2da      	uxtb	r2, r3
200001b2:	68fb      	ldr	r3, [r7, #12]
200001b4:	701a      	strb	r2, [r3, #0]
    s->height = height;
200001b6:	683b      	ldr	r3, [r7, #0]
200001b8:	b2da      	uxtb	r2, r3
200001ba:	68fb      	ldr	r3, [r7, #12]
200001bc:	705a      	strb	r2, [r3, #1]
    s->data = data;
200001be:	68fb      	ldr	r3, [r7, #12]
200001c0:	68ba      	ldr	r2, [r7, #8]
200001c2:	605a      	str	r2, [r3, #4]
}
200001c4:	46c0      	nop			; (mov r8, r8)
200001c6:	46bd      	mov	sp, r7
200001c8:	b004      	add	sp, #16
200001ca:	bd80      	pop	{r7, pc}

200001cc <draw_sprite>:

void draw_sprite(sprite* s, int x, int y){
200001cc:	b580      	push	{r7, lr}
200001ce:	b08a      	sub	sp, #40	; 0x28
200001d0:	af00      	add	r7, sp, #0
200001d2:	60f8      	str	r0, [r7, #12]
200001d4:	60b9      	str	r1, [r7, #8]
200001d6:	607a      	str	r2, [r7, #4]
    int i,j,k, width_in_bytes;
    
    if(s->width % 8 == 0){
200001d8:	68fb      	ldr	r3, [r7, #12]
200001da:	781b      	ldrb	r3, [r3, #0]
200001dc:	2207      	movs	r2, #7
200001de:	4013      	ands	r3, r2
200001e0:	b2db      	uxtb	r3, r3
200001e2:	2b00      	cmp	r3, #0
200001e4:	d105      	bne.n	200001f2 <draw_sprite+0x26>
        width_in_bytes = s->width/8;
200001e6:	68fb      	ldr	r3, [r7, #12]
200001e8:	781b      	ldrb	r3, [r3, #0]
200001ea:	08db      	lsrs	r3, r3, #3
200001ec:	b2db      	uxtb	r3, r3
200001ee:	61bb      	str	r3, [r7, #24]
200001f0:	e005      	b.n	200001fe <draw_sprite+0x32>
    }else{
        width_in_bytes = s->width/8 + 1;
200001f2:	68fb      	ldr	r3, [r7, #12]
200001f4:	781b      	ldrb	r3, [r3, #0]
200001f6:	08db      	lsrs	r3, r3, #3
200001f8:	b2db      	uxtb	r3, r3
200001fa:	3301      	adds	r3, #1
200001fc:	61bb      	str	r3, [r7, #24]
    }
    
    for (i = 0; i < s->height; i++){
200001fe:	2300      	movs	r3, #0
20000200:	627b      	str	r3, [r7, #36]	; 0x24
20000202:	e039      	b.n	20000278 <draw_sprite+0xac>
        for (j = 0; j < width_in_bytes; j++){
20000204:	2300      	movs	r3, #0
20000206:	623b      	str	r3, [r7, #32]
20000208:	e02f      	b.n	2000026a <draw_sprite+0x9e>
            unsigned char byte = s->data[i*width_in_bytes +j];
2000020a:	68fb      	ldr	r3, [r7, #12]
2000020c:	685b      	ldr	r3, [r3, #4]
2000020e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
20000210:	69b9      	ldr	r1, [r7, #24]
20000212:	4351      	muls	r1, r2
20000214:	6a3a      	ldr	r2, [r7, #32]
20000216:	188a      	adds	r2, r1, r2
20000218:	189a      	adds	r2, r3, r2
2000021a:	2317      	movs	r3, #23
2000021c:	18fb      	adds	r3, r7, r3
2000021e:	7812      	ldrb	r2, [r2, #0]
20000220:	701a      	strb	r2, [r3, #0]
            for (k = 0; k < 8; k++){
20000222:	2300      	movs	r3, #0
20000224:	61fb      	str	r3, [r7, #28]
20000226:	e01a      	b.n	2000025e <draw_sprite+0x92>
                if (byte & (1<<k))
20000228:	2317      	movs	r3, #23
2000022a:	18fb      	adds	r3, r7, r3
2000022c:	781a      	ldrb	r2, [r3, #0]
2000022e:	69fb      	ldr	r3, [r7, #28]
20000230:	411a      	asrs	r2, r3
20000232:	0013      	movs	r3, r2
20000234:	2201      	movs	r2, #1
20000236:	4013      	ands	r3, r2
20000238:	d00e      	beq.n	20000258 <draw_sprite+0x8c>
                    pixel(8 * j + k + x + 1, i + y + 1);
2000023a:	6a3b      	ldr	r3, [r7, #32]
2000023c:	00da      	lsls	r2, r3, #3
2000023e:	69fb      	ldr	r3, [r7, #28]
20000240:	18d2      	adds	r2, r2, r3
20000242:	68bb      	ldr	r3, [r7, #8]
20000244:	18d3      	adds	r3, r2, r3
20000246:	3301      	adds	r3, #1
20000248:	0018      	movs	r0, r3
2000024a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
2000024c:	687b      	ldr	r3, [r7, #4]
2000024e:	18d3      	adds	r3, r2, r3
20000250:	3301      	adds	r3, #1
20000252:	0019      	movs	r1, r3
20000254:	f000 fe3e 	bl	20000ed4 <pixel>
            for (k = 0; k < 8; k++){
20000258:	69fb      	ldr	r3, [r7, #28]
2000025a:	3301      	adds	r3, #1
2000025c:	61fb      	str	r3, [r7, #28]
2000025e:	69fb      	ldr	r3, [r7, #28]
20000260:	2b07      	cmp	r3, #7
20000262:	dde1      	ble.n	20000228 <draw_sprite+0x5c>
        for (j = 0; j < width_in_bytes; j++){
20000264:	6a3b      	ldr	r3, [r7, #32]
20000266:	3301      	adds	r3, #1
20000268:	623b      	str	r3, [r7, #32]
2000026a:	6a3a      	ldr	r2, [r7, #32]
2000026c:	69bb      	ldr	r3, [r7, #24]
2000026e:	429a      	cmp	r2, r3
20000270:	dbcb      	blt.n	2000020a <draw_sprite+0x3e>
    for (i = 0; i < s->height; i++){
20000272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20000274:	3301      	adds	r3, #1
20000276:	627b      	str	r3, [r7, #36]	; 0x24
20000278:	68fb      	ldr	r3, [r7, #12]
2000027a:	785b      	ldrb	r3, [r3, #1]
2000027c:	001a      	movs	r2, r3
2000027e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20000280:	4293      	cmp	r3, r2
20000282:	dbbf      	blt.n	20000204 <draw_sprite+0x38>
            }
        }
    }
}
20000284:	46c0      	nop			; (mov r8, r8)
20000286:	46c0      	nop			; (mov r8, r8)
20000288:	46bd      	mov	sp, r7
2000028a:	b00a      	add	sp, #40	; 0x28
2000028c:	bd80      	pop	{r7, pc}

2000028e <draw_snake>:

void draw_snake(POBJECT s){
2000028e:	b580      	push	{r7, lr}
20000290:	b084      	sub	sp, #16
20000292:	af00      	add	r7, sp, #0
20000294:	6078      	str	r0, [r7, #4]
    if (s[0].dirx != 0 || s[0].diry != 0)
20000296:	687b      	ldr	r3, [r7, #4]
20000298:	685b      	ldr	r3, [r3, #4]
2000029a:	2b00      	cmp	r3, #0
2000029c:	d103      	bne.n	200002a6 <draw_snake+0x18>
2000029e:	687b      	ldr	r3, [r7, #4]
200002a0:	689b      	ldr	r3, [r3, #8]
200002a2:	2b00      	cmp	r3, #0
200002a4:	d003      	beq.n	200002ae <draw_snake+0x20>
            follow_leader(s);
200002a6:	687b      	ldr	r3, [r7, #4]
200002a8:	0018      	movs	r0, r3
200002aa:	f000 f83b 	bl	20000324 <follow_leader>
    for (int i = 0; i <= snakeSize - 1; i++){
200002ae:	2300      	movs	r3, #0
200002b0:	60fb      	str	r3, [r7, #12]
200002b2:	e015      	b.n	200002e0 <draw_snake+0x52>
        s[i].move(&s[i]);
200002b4:	68fa      	ldr	r2, [r7, #12]
200002b6:	0013      	movs	r3, r2
200002b8:	00db      	lsls	r3, r3, #3
200002ba:	189b      	adds	r3, r3, r2
200002bc:	009b      	lsls	r3, r3, #2
200002be:	001a      	movs	r2, r3
200002c0:	687b      	ldr	r3, [r7, #4]
200002c2:	189b      	adds	r3, r3, r2
200002c4:	69d9      	ldr	r1, [r3, #28]
200002c6:	68fa      	ldr	r2, [r7, #12]
200002c8:	0013      	movs	r3, r2
200002ca:	00db      	lsls	r3, r3, #3
200002cc:	189b      	adds	r3, r3, r2
200002ce:	009b      	lsls	r3, r3, #2
200002d0:	001a      	movs	r2, r3
200002d2:	687b      	ldr	r3, [r7, #4]
200002d4:	189b      	adds	r3, r3, r2
200002d6:	0018      	movs	r0, r3
200002d8:	4788      	blx	r1
    for (int i = 0; i <= snakeSize - 1; i++){
200002da:	68fb      	ldr	r3, [r7, #12]
200002dc:	3301      	adds	r3, #1
200002de:	60fb      	str	r3, [r7, #12]
200002e0:	4b04      	ldr	r3, [pc, #16]	; (200002f4 <draw_snake+0x66>)
200002e2:	681b      	ldr	r3, [r3, #0]
200002e4:	68fa      	ldr	r2, [r7, #12]
200002e6:	429a      	cmp	r2, r3
200002e8:	dbe4      	blt.n	200002b4 <draw_snake+0x26>
    }
}
200002ea:	46c0      	nop			; (mov r8, r8)
200002ec:	46c0      	nop			; (mov r8, r8)
200002ee:	46bd      	mov	sp, r7
200002f0:	b004      	add	sp, #16
200002f2:	bd80      	pop	{r7, pc}
200002f4:	20002370 	andcs	r2, r0, r0, ror r3

200002f8 <draw_food>:

void draw_food(POBJECT f){
200002f8:	b580      	push	{r7, lr}
200002fa:	b084      	sub	sp, #16
200002fc:	af00      	add	r7, sp, #0
200002fe:	6078      	str	r0, [r7, #4]
    int current_x = f->posx; 
20000300:	687b      	ldr	r3, [r7, #4]
20000302:	68db      	ldr	r3, [r3, #12]
20000304:	60fb      	str	r3, [r7, #12]
    int current_y = f->posy;
20000306:	687b      	ldr	r3, [r7, #4]
20000308:	691b      	ldr	r3, [r3, #16]
2000030a:	60bb      	str	r3, [r7, #8]
    
    f->move(&food_obj);
2000030c:	687b      	ldr	r3, [r7, #4]
2000030e:	69db      	ldr	r3, [r3, #28]
20000310:	4a03      	ldr	r2, [pc, #12]	; (20000320 <draw_food+0x28>)
20000312:	0010      	movs	r0, r2
20000314:	4798      	blx	r3
}
20000316:	46c0      	nop			; (mov r8, r8)
20000318:	46bd      	mov	sp, r7
2000031a:	b004      	add	sp, #16
2000031c:	bd80      	pop	{r7, pc}
2000031e:	46c0      	nop			; (mov r8, r8)
20000320:	20003620 	andcs	r3, r0, r0, lsr #12

20000324 <follow_leader>:

void follow_leader(POBJECT s){
20000324:	b580      	push	{r7, lr}
20000326:	b086      	sub	sp, #24
20000328:	af00      	add	r7, sp, #0
2000032a:	6078      	str	r0, [r7, #4]
    int next_x = s[0].posx;
2000032c:	687b      	ldr	r3, [r7, #4]
2000032e:	68db      	ldr	r3, [r3, #12]
20000330:	617b      	str	r3, [r7, #20]
    int next_y = s[0].posy;
20000332:	687b      	ldr	r3, [r7, #4]
20000334:	691b      	ldr	r3, [r3, #16]
20000336:	613b      	str	r3, [r7, #16]
    for(int i = 0; i < snakeSize; i++){
20000338:	2300      	movs	r3, #0
2000033a:	60fb      	str	r3, [r7, #12]
2000033c:	e02e      	b.n	2000039c <follow_leader+0x78>
        int current = s[i].posx;
2000033e:	68fa      	ldr	r2, [r7, #12]
20000340:	0013      	movs	r3, r2
20000342:	00db      	lsls	r3, r3, #3
20000344:	189b      	adds	r3, r3, r2
20000346:	009b      	lsls	r3, r3, #2
20000348:	001a      	movs	r2, r3
2000034a:	687b      	ldr	r3, [r7, #4]
2000034c:	189b      	adds	r3, r3, r2
2000034e:	68db      	ldr	r3, [r3, #12]
20000350:	60bb      	str	r3, [r7, #8]
        s[i].posx = next_x;
20000352:	68fa      	ldr	r2, [r7, #12]
20000354:	0013      	movs	r3, r2
20000356:	00db      	lsls	r3, r3, #3
20000358:	189b      	adds	r3, r3, r2
2000035a:	009b      	lsls	r3, r3, #2
2000035c:	001a      	movs	r2, r3
2000035e:	687b      	ldr	r3, [r7, #4]
20000360:	189b      	adds	r3, r3, r2
20000362:	697a      	ldr	r2, [r7, #20]
20000364:	60da      	str	r2, [r3, #12]
        next_x = current;
20000366:	68bb      	ldr	r3, [r7, #8]
20000368:	617b      	str	r3, [r7, #20]
        
        current = s[i].posy;
2000036a:	68fa      	ldr	r2, [r7, #12]
2000036c:	0013      	movs	r3, r2
2000036e:	00db      	lsls	r3, r3, #3
20000370:	189b      	adds	r3, r3, r2
20000372:	009b      	lsls	r3, r3, #2
20000374:	001a      	movs	r2, r3
20000376:	687b      	ldr	r3, [r7, #4]
20000378:	189b      	adds	r3, r3, r2
2000037a:	691b      	ldr	r3, [r3, #16]
2000037c:	60bb      	str	r3, [r7, #8]
        s[i].posy = next_y;
2000037e:	68fa      	ldr	r2, [r7, #12]
20000380:	0013      	movs	r3, r2
20000382:	00db      	lsls	r3, r3, #3
20000384:	189b      	adds	r3, r3, r2
20000386:	009b      	lsls	r3, r3, #2
20000388:	001a      	movs	r2, r3
2000038a:	687b      	ldr	r3, [r7, #4]
2000038c:	189b      	adds	r3, r3, r2
2000038e:	693a      	ldr	r2, [r7, #16]
20000390:	611a      	str	r2, [r3, #16]
        next_y = current;
20000392:	68bb      	ldr	r3, [r7, #8]
20000394:	613b      	str	r3, [r7, #16]
    for(int i = 0; i < snakeSize; i++){
20000396:	68fb      	ldr	r3, [r7, #12]
20000398:	3301      	adds	r3, #1
2000039a:	60fb      	str	r3, [r7, #12]
2000039c:	4b04      	ldr	r3, [pc, #16]	; (200003b0 <follow_leader+0x8c>)
2000039e:	681b      	ldr	r3, [r3, #0]
200003a0:	68fa      	ldr	r2, [r7, #12]
200003a2:	429a      	cmp	r2, r3
200003a4:	dbcb      	blt.n	2000033e <follow_leader+0x1a>
    }
}
200003a6:	46c0      	nop			; (mov r8, r8)
200003a8:	46c0      	nop			; (mov r8, r8)
200003aa:	46bd      	mov	sp, r7
200003ac:	b006      	add	sp, #24
200003ae:	bd80      	pop	{r7, pc}
200003b0:	20002370 	andcs	r2, r0, r0, ror r3

200003b4 <turn>:

void turn(int dir, POBJECT s){
200003b4:	b580      	push	{r7, lr}
200003b6:	b084      	sub	sp, #16
200003b8:	af00      	add	r7, sp, #0
200003ba:	6078      	str	r0, [r7, #4]
200003bc:	6039      	str	r1, [r7, #0]
    int next_x = 0, next_y = 0;
200003be:	2300      	movs	r3, #0
200003c0:	60fb      	str	r3, [r7, #12]
200003c2:	2300      	movs	r3, #0
200003c4:	60bb      	str	r3, [r7, #8]
     switch(dir){
200003c6:	687b      	ldr	r3, [r7, #4]
200003c8:	2b08      	cmp	r3, #8
200003ca:	d03b      	beq.n	20000444 <turn+0x90>
200003cc:	687b      	ldr	r3, [r7, #4]
200003ce:	2b08      	cmp	r3, #8
200003d0:	dc4d      	bgt.n	2000046e <turn+0xba>
200003d2:	687b      	ldr	r3, [r7, #4]
200003d4:	2b06      	cmp	r3, #6
200003d6:	d009      	beq.n	200003ec <turn+0x38>
200003d8:	687b      	ldr	r3, [r7, #4]
200003da:	2b06      	cmp	r3, #6
200003dc:	dc47      	bgt.n	2000046e <turn+0xba>
200003de:	687b      	ldr	r3, [r7, #4]
200003e0:	2b02      	cmp	r3, #2
200003e2:	d020      	beq.n	20000426 <turn+0x72>
200003e4:	687b      	ldr	r3, [r7, #4]
200003e6:	2b04      	cmp	r3, #4
200003e8:	d00e      	beq.n	20000408 <turn+0x54>
            }
            break;
    }
    
    /*if hit food*/
}
200003ea:	e040      	b.n	2000046e <turn+0xba>
            if(s[0].dirx == 0){
200003ec:	683b      	ldr	r3, [r7, #0]
200003ee:	685b      	ldr	r3, [r3, #4]
200003f0:	2b00      	cmp	r3, #0
200003f2:	d135      	bne.n	20000460 <turn+0xac>
                s->set_speed(s,4,0);
200003f4:	683b      	ldr	r3, [r7, #0]
200003f6:	6a1b      	ldr	r3, [r3, #32]
200003f8:	6838      	ldr	r0, [r7, #0]
200003fa:	2200      	movs	r2, #0
200003fc:	2104      	movs	r1, #4
200003fe:	4798      	blx	r3
                s[0].geo = &snakehead_geometry_RIGHT;
20000400:	683b      	ldr	r3, [r7, #0]
20000402:	4a1d      	ldr	r2, [pc, #116]	; (20000478 <turn+0xc4>)
20000404:	601a      	str	r2, [r3, #0]
            break;
20000406:	e02b      	b.n	20000460 <turn+0xac>
            if(s[0].dirx == 0){
20000408:	683b      	ldr	r3, [r7, #0]
2000040a:	685b      	ldr	r3, [r3, #4]
2000040c:	2b00      	cmp	r3, #0
2000040e:	d129      	bne.n	20000464 <turn+0xb0>
                s->set_speed(s,-4,0);
20000410:	683b      	ldr	r3, [r7, #0]
20000412:	6a1b      	ldr	r3, [r3, #32]
20000414:	2204      	movs	r2, #4
20000416:	4251      	negs	r1, r2
20000418:	6838      	ldr	r0, [r7, #0]
2000041a:	2200      	movs	r2, #0
2000041c:	4798      	blx	r3
                s[0].geo = &snakehead_geometry_LEFT;
2000041e:	683b      	ldr	r3, [r7, #0]
20000420:	4a16      	ldr	r2, [pc, #88]	; (2000047c <turn+0xc8>)
20000422:	601a      	str	r2, [r3, #0]
            break;
20000424:	e01e      	b.n	20000464 <turn+0xb0>
            if(s[0].diry == 0){
20000426:	683b      	ldr	r3, [r7, #0]
20000428:	689b      	ldr	r3, [r3, #8]
2000042a:	2b00      	cmp	r3, #0
2000042c:	d11c      	bne.n	20000468 <turn+0xb4>
                s->set_speed(s,0,-4);
2000042e:	683b      	ldr	r3, [r7, #0]
20000430:	6a1b      	ldr	r3, [r3, #32]
20000432:	2204      	movs	r2, #4
20000434:	4252      	negs	r2, r2
20000436:	6838      	ldr	r0, [r7, #0]
20000438:	2100      	movs	r1, #0
2000043a:	4798      	blx	r3
                s[0].geo = &snakehead_geometry_UP;
2000043c:	683b      	ldr	r3, [r7, #0]
2000043e:	4a10      	ldr	r2, [pc, #64]	; (20000480 <turn+0xcc>)
20000440:	601a      	str	r2, [r3, #0]
            break;
20000442:	e011      	b.n	20000468 <turn+0xb4>
            if(s[0].diry == 0){
20000444:	683b      	ldr	r3, [r7, #0]
20000446:	689b      	ldr	r3, [r3, #8]
20000448:	2b00      	cmp	r3, #0
2000044a:	d10f      	bne.n	2000046c <turn+0xb8>
                s->set_speed(s,0,4);
2000044c:	683b      	ldr	r3, [r7, #0]
2000044e:	6a1b      	ldr	r3, [r3, #32]
20000450:	6838      	ldr	r0, [r7, #0]
20000452:	2204      	movs	r2, #4
20000454:	2100      	movs	r1, #0
20000456:	4798      	blx	r3
                s[0].geo = &snakehead_geometry_DOWN;
20000458:	683b      	ldr	r3, [r7, #0]
2000045a:	4a0a      	ldr	r2, [pc, #40]	; (20000484 <turn+0xd0>)
2000045c:	601a      	str	r2, [r3, #0]
            break;
2000045e:	e005      	b.n	2000046c <turn+0xb8>
            break;
20000460:	46c0      	nop			; (mov r8, r8)
20000462:	e004      	b.n	2000046e <turn+0xba>
            break;
20000464:	46c0      	nop			; (mov r8, r8)
20000466:	e002      	b.n	2000046e <turn+0xba>
            break;
20000468:	46c0      	nop			; (mov r8, r8)
2000046a:	e000      	b.n	2000046e <turn+0xba>
            break;
2000046c:	46c0      	nop			; (mov r8, r8)
}
2000046e:	46c0      	nop			; (mov r8, r8)
20000470:	46bd      	mov	sp, r7
20000472:	b004      	add	sp, #16
20000474:	bd80      	pop	{r7, pc}
20000476:	46c0      	nop			; (mov r8, r8)
20000478:	20003544 	andcs	r3, r0, r4, asr #10
2000047c:	20003518 	andcs	r3, r0, r8, lsl r5
20000480:	2000359c 	mulcs	r0, ip, r5
20000484:	20003570 	andcs	r3, r0, r0, ror r5

20000488 <init_app>:

void init_app(void){/**/
20000488:	b580      	push	{r7, lr}
2000048a:	af00      	add	r7, sp, #0
        /*starta klockor på port D & E*/
        * ( (unsigned long *) 0x40023830) = 0x18;
        __asm volatile("  LDR R0,=0x08000209\n BLX R0 \n");
    #endif
    
    *GPIO_E_MODER = 0x55555555;
2000048c:	4b0f      	ldr	r3, [pc, #60]	; (200004cc <init_app+0x44>)
2000048e:	4a10      	ldr	r2, [pc, #64]	; (200004d0 <init_app+0x48>)
20000490:	601a      	str	r2, [r3, #0]
    *GPIO_E_OTYPER = 0x00000000;
20000492:	4b10      	ldr	r3, [pc, #64]	; (200004d4 <init_app+0x4c>)
20000494:	2200      	movs	r2, #0
20000496:	801a      	strh	r2, [r3, #0]
    *GPIO_E_OSPEEDR = 0x00000000;
20000498:	4b0f      	ldr	r3, [pc, #60]	; (200004d8 <init_app+0x50>)
2000049a:	2200      	movs	r2, #0
2000049c:	601a      	str	r2, [r3, #0]
    
    *GPIO_D_MODER = 0;
2000049e:	4b0f      	ldr	r3, [pc, #60]	; (200004dc <init_app+0x54>)
200004a0:	2200      	movs	r2, #0
200004a2:	601a      	str	r2, [r3, #0]
    *GPIO_D_MODER = 0x55000000;
200004a4:	4b0d      	ldr	r3, [pc, #52]	; (200004dc <init_app+0x54>)
200004a6:	22aa      	movs	r2, #170	; 0xaa
200004a8:	05d2      	lsls	r2, r2, #23
200004aa:	601a      	str	r2, [r3, #0]
    *GPIO_D_PUPDR = 0;
200004ac:	4b0c      	ldr	r3, [pc, #48]	; (200004e0 <init_app+0x58>)
200004ae:	2200      	movs	r2, #0
200004b0:	601a      	str	r2, [r3, #0]
    *GPIO_D_PUPDR |= 0xAA000000;
200004b2:	4b0b      	ldr	r3, [pc, #44]	; (200004e0 <init_app+0x58>)
200004b4:	681a      	ldr	r2, [r3, #0]
200004b6:	4b0a      	ldr	r3, [pc, #40]	; (200004e0 <init_app+0x58>)
200004b8:	21aa      	movs	r1, #170	; 0xaa
200004ba:	0609      	lsls	r1, r1, #24
200004bc:	430a      	orrs	r2, r1
200004be:	601a      	str	r2, [r3, #0]
    *GPIO_D_OTYPER = 0;
200004c0:	4b08      	ldr	r3, [pc, #32]	; (200004e4 <init_app+0x5c>)
200004c2:	2200      	movs	r2, #0
200004c4:	801a      	strh	r2, [r3, #0]
}
200004c6:	46c0      	nop			; (mov r8, r8)
200004c8:	46bd      	mov	sp, r7
200004ca:	bd80      	pop	{r7, pc}
200004cc:	40021000 	andmi	r1, r2, r0
200004d0:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab
200004d4:	40021004 	andmi	r1, r2, r4
200004d8:	40021008 	andmi	r1, r2, r8
200004dc:	40020c00 	andmi	r0, r2, r0, lsl #24
200004e0:	40020c0c 	andmi	r0, r2, ip, lsl #24
200004e4:	40020c04 	andmi	r0, r2, r4, lsl #24

200004e8 <init_snake>:

void init_snake(POBJECT s){
200004e8:	b580      	push	{r7, lr}
200004ea:	b084      	sub	sp, #16
200004ec:	af00      	add	r7, sp, #0
200004ee:	6078      	str	r0, [r7, #4]
    int j = 0;
200004f0:	2300      	movs	r3, #0
200004f2:	60fb      	str	r3, [r7, #12]
    for (int i = 3; i >= 0; i--, j++){
200004f4:	2303      	movs	r3, #3
200004f6:	60bb      	str	r3, [r7, #8]
200004f8:	e074      	b.n	200005e4 <init_snake+0xfc>
        if(i == 0){ 
200004fa:	68bb      	ldr	r3, [r7, #8]
200004fc:	2b00      	cmp	r3, #0
200004fe:	d10a      	bne.n	20000516 <init_snake+0x2e>
            s[i].geo = &snakehead_geometry_RIGHT;
20000500:	68ba      	ldr	r2, [r7, #8]
20000502:	0013      	movs	r3, r2
20000504:	00db      	lsls	r3, r3, #3
20000506:	189b      	adds	r3, r3, r2
20000508:	009b      	lsls	r3, r3, #2
2000050a:	001a      	movs	r2, r3
2000050c:	687b      	ldr	r3, [r7, #4]
2000050e:	189b      	adds	r3, r3, r2
20000510:	4a38      	ldr	r2, [pc, #224]	; (200005f4 <init_snake+0x10c>)
20000512:	601a      	str	r2, [r3, #0]
20000514:	e009      	b.n	2000052a <init_snake+0x42>
        } else{ 
            s[i].geo = &snakebody_geometry;
20000516:	68ba      	ldr	r2, [r7, #8]
20000518:	0013      	movs	r3, r2
2000051a:	00db      	lsls	r3, r3, #3
2000051c:	189b      	adds	r3, r3, r2
2000051e:	009b      	lsls	r3, r3, #2
20000520:	001a      	movs	r2, r3
20000522:	687b      	ldr	r3, [r7, #4]
20000524:	189b      	adds	r3, r3, r2
20000526:	4a34      	ldr	r2, [pc, #208]	; (200005f8 <init_snake+0x110>)
20000528:	601a      	str	r2, [r3, #0]
        }
        s[i].posx = (j+1) * 4;
2000052a:	68fb      	ldr	r3, [r7, #12]
2000052c:	1c59      	adds	r1, r3, #1
2000052e:	68ba      	ldr	r2, [r7, #8]
20000530:	0013      	movs	r3, r2
20000532:	00db      	lsls	r3, r3, #3
20000534:	189b      	adds	r3, r3, r2
20000536:	009b      	lsls	r3, r3, #2
20000538:	001a      	movs	r2, r3
2000053a:	687b      	ldr	r3, [r7, #4]
2000053c:	189b      	adds	r3, r3, r2
2000053e:	008a      	lsls	r2, r1, #2
20000540:	60da      	str	r2, [r3, #12]
        s[i].posy = 1;
20000542:	68ba      	ldr	r2, [r7, #8]
20000544:	0013      	movs	r3, r2
20000546:	00db      	lsls	r3, r3, #3
20000548:	189b      	adds	r3, r3, r2
2000054a:	009b      	lsls	r3, r3, #2
2000054c:	001a      	movs	r2, r3
2000054e:	687b      	ldr	r3, [r7, #4]
20000550:	189b      	adds	r3, r3, r2
20000552:	2201      	movs	r2, #1
20000554:	611a      	str	r2, [r3, #16]
        s[i].dirx = 0;
20000556:	68ba      	ldr	r2, [r7, #8]
20000558:	0013      	movs	r3, r2
2000055a:	00db      	lsls	r3, r3, #3
2000055c:	189b      	adds	r3, r3, r2
2000055e:	009b      	lsls	r3, r3, #2
20000560:	001a      	movs	r2, r3
20000562:	687b      	ldr	r3, [r7, #4]
20000564:	189b      	adds	r3, r3, r2
20000566:	2200      	movs	r2, #0
20000568:	605a      	str	r2, [r3, #4]
        s[i].diry = 0;
2000056a:	68ba      	ldr	r2, [r7, #8]
2000056c:	0013      	movs	r3, r2
2000056e:	00db      	lsls	r3, r3, #3
20000570:	189b      	adds	r3, r3, r2
20000572:	009b      	lsls	r3, r3, #2
20000574:	001a      	movs	r2, r3
20000576:	687b      	ldr	r3, [r7, #4]
20000578:	189b      	adds	r3, r3, r2
2000057a:	2200      	movs	r2, #0
2000057c:	609a      	str	r2, [r3, #8]
        s[i].move = move_object;
2000057e:	68ba      	ldr	r2, [r7, #8]
20000580:	0013      	movs	r3, r2
20000582:	00db      	lsls	r3, r3, #3
20000584:	189b      	adds	r3, r3, r2
20000586:	009b      	lsls	r3, r3, #2
20000588:	001a      	movs	r2, r3
2000058a:	687b      	ldr	r3, [r7, #4]
2000058c:	189b      	adds	r3, r3, r2
2000058e:	4a1b      	ldr	r2, [pc, #108]	; (200005fc <init_snake+0x114>)
20000590:	61da      	str	r2, [r3, #28]
        s[i].clear = clear_object;
20000592:	68ba      	ldr	r2, [r7, #8]
20000594:	0013      	movs	r3, r2
20000596:	00db      	lsls	r3, r3, #3
20000598:	189b      	adds	r3, r3, r2
2000059a:	009b      	lsls	r3, r3, #2
2000059c:	001a      	movs	r2, r3
2000059e:	687b      	ldr	r3, [r7, #4]
200005a0:	189b      	adds	r3, r3, r2
200005a2:	4a17      	ldr	r2, [pc, #92]	; (20000600 <init_snake+0x118>)
200005a4:	619a      	str	r2, [r3, #24]
        s[i].draw = draw_object;
200005a6:	68ba      	ldr	r2, [r7, #8]
200005a8:	0013      	movs	r3, r2
200005aa:	00db      	lsls	r3, r3, #3
200005ac:	189b      	adds	r3, r3, r2
200005ae:	009b      	lsls	r3, r3, #2
200005b0:	001a      	movs	r2, r3
200005b2:	687b      	ldr	r3, [r7, #4]
200005b4:	189b      	adds	r3, r3, r2
200005b6:	4a13      	ldr	r2, [pc, #76]	; (20000604 <init_snake+0x11c>)
200005b8:	615a      	str	r2, [r3, #20]
        s[i].set_speed = set_object_speed;
200005ba:	68ba      	ldr	r2, [r7, #8]
200005bc:	0013      	movs	r3, r2
200005be:	00db      	lsls	r3, r3, #3
200005c0:	189b      	adds	r3, r3, r2
200005c2:	009b      	lsls	r3, r3, #2
200005c4:	001a      	movs	r2, r3
200005c6:	687b      	ldr	r3, [r7, #4]
200005c8:	189b      	adds	r3, r3, r2
200005ca:	4a0f      	ldr	r2, [pc, #60]	; (20000608 <init_snake+0x120>)
200005cc:	621a      	str	r2, [r3, #32]
        snakeSize++;
200005ce:	4b0f      	ldr	r3, [pc, #60]	; (2000060c <init_snake+0x124>)
200005d0:	681b      	ldr	r3, [r3, #0]
200005d2:	1c5a      	adds	r2, r3, #1
200005d4:	4b0d      	ldr	r3, [pc, #52]	; (2000060c <init_snake+0x124>)
200005d6:	601a      	str	r2, [r3, #0]
    for (int i = 3; i >= 0; i--, j++){
200005d8:	68bb      	ldr	r3, [r7, #8]
200005da:	3b01      	subs	r3, #1
200005dc:	60bb      	str	r3, [r7, #8]
200005de:	68fb      	ldr	r3, [r7, #12]
200005e0:	3301      	adds	r3, #1
200005e2:	60fb      	str	r3, [r7, #12]
200005e4:	68bb      	ldr	r3, [r7, #8]
200005e6:	2b00      	cmp	r3, #0
200005e8:	da87      	bge.n	200004fa <init_snake+0x12>
    }
}
200005ea:	46c0      	nop			; (mov r8, r8)
200005ec:	46c0      	nop			; (mov r8, r8)
200005ee:	46bd      	mov	sp, r7
200005f0:	b004      	add	sp, #16
200005f2:	bd80      	pop	{r7, pc}
200005f4:	20003544 	andcs	r3, r0, r4, asr #10
200005f8:	200035c8 	andcs	r3, r0, r8, asr #11
200005fc:	200000f5 	strdcs	r0, [r0], -r5
20000600:	20000093 	mulcs	r0, r3, r0
20000604:	20000031 	andcs	r0, r0, r1, lsr r0
20000608:	20000011 	andcs	r0, r0, r1, lsl r0
2000060c:	20002370 	andcs	r2, r0, r0, ror r3

20000610 <init_food>:

void init_food(POBJECT f){
20000610:	b580      	push	{r7, lr}
20000612:	b082      	sub	sp, #8
20000614:	af00      	add	r7, sp, #0
20000616:	6078      	str	r0, [r7, #4]
    f->geo = &food_geometry;
20000618:	687b      	ldr	r3, [r7, #4]
2000061a:	4a0c      	ldr	r2, [pc, #48]	; (2000064c <init_food+0x3c>)
2000061c:	601a      	str	r2, [r3, #0]
    f->posx = 4; 
2000061e:	687b      	ldr	r3, [r7, #4]
20000620:	2204      	movs	r2, #4
20000622:	60da      	str	r2, [r3, #12]
    f->posy = 8;
20000624:	687b      	ldr	r3, [r7, #4]
20000626:	2208      	movs	r2, #8
20000628:	611a      	str	r2, [r3, #16]
    f->draw = draw_object; 
2000062a:	687b      	ldr	r3, [r7, #4]
2000062c:	4a08      	ldr	r2, [pc, #32]	; (20000650 <init_food+0x40>)
2000062e:	615a      	str	r2, [r3, #20]
    f->clear = clear_object;
20000630:	687b      	ldr	r3, [r7, #4]
20000632:	4a08      	ldr	r2, [pc, #32]	; (20000654 <init_food+0x44>)
20000634:	619a      	str	r2, [r3, #24]
    f->move = move_object;
20000636:	687b      	ldr	r3, [r7, #4]
20000638:	4a07      	ldr	r2, [pc, #28]	; (20000658 <init_food+0x48>)
2000063a:	61da      	str	r2, [r3, #28]
    f->set_speed = set_object_speed;
2000063c:	687b      	ldr	r3, [r7, #4]
2000063e:	4a07      	ldr	r2, [pc, #28]	; (2000065c <init_food+0x4c>)
20000640:	621a      	str	r2, [r3, #32]
}
20000642:	46c0      	nop			; (mov r8, r8)
20000644:	46bd      	mov	sp, r7
20000646:	b002      	add	sp, #8
20000648:	bd80      	pop	{r7, pc}
2000064a:	46c0      	nop			; (mov r8, r8)
2000064c:	200035f4 	strdcs	r3, [r0], -r4
20000650:	20000031 	andcs	r0, r0, r1, lsr r0
20000654:	20000093 	mulcs	r0, r3, r0
20000658:	200000f5 	strdcs	r0, [r0], -r5
2000065c:	20000011 	andcs	r0, r0, r1, lsl r0

20000660 <restart_game>:

void restart_game(){
20000660:	b580      	push	{r7, lr}
20000662:	af00      	add	r7, sp, #0
        clear_backbuffer();
20000664:	f000 fc1b 	bl	20000e9e <clear_backbuffer>
        graphic_draw_screen();
20000668:	f000 fc76 	bl	20000f58 <graphic_draw_screen>
        points = 0;
2000066c:	4b04      	ldr	r3, [pc, #16]	; (20000680 <restart_game+0x20>)
2000066e:	2200      	movs	r2, #0
20000670:	601a      	str	r2, [r3, #0]
        snakeSize = 0;
20000672:	4b04      	ldr	r3, [pc, #16]	; (20000684 <restart_game+0x24>)
20000674:	2200      	movs	r2, #0
20000676:	601a      	str	r2, [r3, #0]
}
20000678:	46c0      	nop			; (mov r8, r8)
2000067a:	46bd      	mov	sp, r7
2000067c:	bd80      	pop	{r7, pc}
2000067e:	46c0      	nop			; (mov r8, r8)
20000680:	2000236c 	andcs	r2, r0, ip, ror #6
20000684:	20002370 	andcs	r2, r0, r0, ror r3

20000688 <main>:

void main(int argc, char **argv){
20000688:	b5b0      	push	{r4, r5, r7, lr}
2000068a:	4c43      	ldr	r4, [pc, #268]	; (20000798 <main+0x110>)
2000068c:	44a5      	add	sp, r4
2000068e:	af00      	add	r7, sp, #0
20000690:	6078      	str	r0, [r7, #4]
20000692:	6039      	str	r1, [r7, #0]
    int game = 1, restart = 2;
20000694:	2301      	movs	r3, #1
20000696:	4a41      	ldr	r2, [pc, #260]	; (2000079c <main+0x114>)
20000698:	18ba      	adds	r2, r7, r2
2000069a:	6013      	str	r3, [r2, #0]
2000069c:	2302      	movs	r3, #2
2000069e:	4a40      	ldr	r2, [pc, #256]	; (200007a0 <main+0x118>)
200006a0:	18ba      	adds	r2, r7, r2
200006a2:	6013      	str	r3, [r2, #0]
    char key_stroke;
    
    POBJECT food = &food_obj;
200006a4:	4b3f      	ldr	r3, [pc, #252]	; (200007a4 <main+0x11c>)
200006a6:	4a40      	ldr	r2, [pc, #256]	; (200007a8 <main+0x120>)
200006a8:	18ba      	adds	r2, r7, r2
200006aa:	6013      	str	r3, [r2, #0]
    OBJECT snake[200];
    
        
    init_app();
200006ac:	f7ff feec 	bl	20000488 <init_app>
    graphic_init();
200006b0:	f000 fa28 	bl	20000b04 <graphic_init>
    ascii_init();
200006b4:	f000 f880 	bl	200007b8 <ascii_init>
    
    while(game){
200006b8:	e063      	b.n	20000782 <main+0xfa>
        //while(keyb() != 5){
            //char[] *s = "You have :" 
            //ascii_write_char(*s++)
        //}
        
        if(restart == 2){
200006ba:	4c39      	ldr	r4, [pc, #228]	; (200007a0 <main+0x118>)
200006bc:	193b      	adds	r3, r7, r4
200006be:	681b      	ldr	r3, [r3, #0]
200006c0:	2b02      	cmp	r3, #2
200006c2:	d158      	bne.n	20000776 <main+0xee>
            restart_game();
200006c4:	f7ff ffcc 	bl	20000660 <restart_game>
            restart = 1;
200006c8:	2301      	movs	r3, #1
200006ca:	193a      	adds	r2, r7, r4
200006cc:	6013      	str	r3, [r2, #0]
            init_snake(snake);
200006ce:	2308      	movs	r3, #8
200006d0:	18fb      	adds	r3, r7, r3
200006d2:	0018      	movs	r0, r3
200006d4:	f7ff ff08 	bl	200004e8 <init_snake>
            init_food(food);
200006d8:	4b33      	ldr	r3, [pc, #204]	; (200007a8 <main+0x120>)
200006da:	18fb      	adds	r3, r7, r3
200006dc:	681b      	ldr	r3, [r3, #0]
200006de:	0018      	movs	r0, r3
200006e0:	f7ff ff96 	bl	20000610 <init_food>
        }

        while(restart == 1){
200006e4:	e047      	b.n	20000776 <main+0xee>
            clear_backbuffer();
200006e6:	f000 fbda 	bl	20000e9e <clear_backbuffer>
            /*KOD HÄR*/
            
            draw_snake(snake);
200006ea:	2308      	movs	r3, #8
200006ec:	18fb      	adds	r3, r7, r3
200006ee:	0018      	movs	r0, r3
200006f0:	f7ff fdcd 	bl	2000028e <draw_snake>
            draw_food(food);
200006f4:	4b2c      	ldr	r3, [pc, #176]	; (200007a8 <main+0x120>)
200006f6:	18fb      	adds	r3, r7, r3
200006f8:	681b      	ldr	r3, [r3, #0]
200006fa:	0018      	movs	r0, r3
200006fc:	f7ff fdfc 	bl	200002f8 <draw_food>
                        
            graphic_draw_screen();
20000700:	f000 fc2a 	bl	20000f58 <graphic_draw_screen>

            //delay_milli(40);
            key_stroke = keyb();
20000704:	4d29      	ldr	r5, [pc, #164]	; (200007ac <main+0x124>)
20000706:	197c      	adds	r4, r7, r5
20000708:	f000 fcc2 	bl	20001090 <keyb>
2000070c:	0003      	movs	r3, r0
2000070e:	7023      	strb	r3, [r4, #0]
            switch(key_stroke){
20000710:	197b      	adds	r3, r7, r5
20000712:	781b      	ldrb	r3, [r3, #0]
20000714:	2b0d      	cmp	r3, #13
20000716:	d82f      	bhi.n	20000778 <main+0xf0>
20000718:	009a      	lsls	r2, r3, #2
2000071a:	4b25      	ldr	r3, [pc, #148]	; (200007b0 <main+0x128>)
2000071c:	18d3      	adds	r3, r2, r3
2000071e:	681b      	ldr	r3, [r3, #0]
20000720:	469f      	mov	pc, r3
                case RIGHT: turn(RIGHT, snake); break; /*dirx = +, diry = 0*/
20000722:	2308      	movs	r3, #8
20000724:	18fb      	adds	r3, r7, r3
20000726:	0019      	movs	r1, r3
20000728:	2006      	movs	r0, #6
2000072a:	f7ff fe43 	bl	200003b4 <turn>
2000072e:	e023      	b.n	20000778 <main+0xf0>
                case LEFT: turn(LEFT, snake); break; /*dirx = -, diry = 0*/
20000730:	2308      	movs	r3, #8
20000732:	18fb      	adds	r3, r7, r3
20000734:	0019      	movs	r1, r3
20000736:	2004      	movs	r0, #4
20000738:	f7ff fe3c 	bl	200003b4 <turn>
2000073c:	e01c      	b.n	20000778 <main+0xf0>
                case UP: turn(UP, snake); break; /*dirx = 0, diry = -*/
2000073e:	2308      	movs	r3, #8
20000740:	18fb      	adds	r3, r7, r3
20000742:	0019      	movs	r1, r3
20000744:	2002      	movs	r0, #2
20000746:	f7ff fe35 	bl	200003b4 <turn>
2000074a:	e015      	b.n	20000778 <main+0xf0>
                case DOWN: turn(DOWN, snake); break; /*dirx = 0, diry = +*/
2000074c:	2308      	movs	r3, #8
2000074e:	18fb      	adds	r3, r7, r3
20000750:	0019      	movs	r1, r3
20000752:	2008      	movs	r0, #8
20000754:	f7ff fe2e 	bl	200003b4 <turn>
20000758:	e00e      	b.n	20000778 <main+0xf0>
                case QUIT: game = 0; restart = 0; break;
2000075a:	2300      	movs	r3, #0
2000075c:	4a0f      	ldr	r2, [pc, #60]	; (2000079c <main+0x114>)
2000075e:	18ba      	adds	r2, r7, r2
20000760:	6013      	str	r3, [r2, #0]
20000762:	2300      	movs	r3, #0
20000764:	4a0e      	ldr	r2, [pc, #56]	; (200007a0 <main+0x118>)
20000766:	18ba      	adds	r2, r7, r2
20000768:	6013      	str	r3, [r2, #0]
2000076a:	e005      	b.n	20000778 <main+0xf0>
                case RESTART: restart = 2; break;
2000076c:	2302      	movs	r3, #2
2000076e:	4a0c      	ldr	r2, [pc, #48]	; (200007a0 <main+0x118>)
20000770:	18ba      	adds	r2, r7, r2
20000772:	6013      	str	r3, [r2, #0]
20000774:	e000      	b.n	20000778 <main+0xf0>
        while(restart == 1){
20000776:	46c0      	nop			; (mov r8, r8)
20000778:	4b09      	ldr	r3, [pc, #36]	; (200007a0 <main+0x118>)
2000077a:	18fb      	adds	r3, r7, r3
2000077c:	681b      	ldr	r3, [r3, #0]
2000077e:	2b01      	cmp	r3, #1
20000780:	d0b1      	beq.n	200006e6 <main+0x5e>
    while(game){
20000782:	4b06      	ldr	r3, [pc, #24]	; (2000079c <main+0x114>)
20000784:	18fb      	adds	r3, r7, r3
20000786:	681b      	ldr	r3, [r3, #0]
20000788:	2b00      	cmp	r3, #0
2000078a:	d196      	bne.n	200006ba <main+0x32>
            }

        }
    }
}
2000078c:	46c0      	nop			; (mov r8, r8)
2000078e:	46c0      	nop			; (mov r8, r8)
20000790:	46bd      	mov	sp, r7
20000792:	4b08      	ldr	r3, [pc, #32]	; (200007b4 <main+0x12c>)
20000794:	449d      	add	sp, r3
20000796:	bdb0      	pop	{r4, r5, r7, pc}
20000798:	ffffe3c8 			; <UNDEFINED> instruction: 0xffffe3c8
2000079c:	00001c34 	andeq	r1, r0, r4, lsr ip
200007a0:	00001c30 	andeq	r1, r0, r0, lsr ip
200007a4:	20003620 	andcs	r3, r0, r0, lsr #12
200007a8:	00001c2c 	andeq	r1, r0, ip, lsr #24
200007ac:	00001c2b 	andeq	r1, r0, fp, lsr #24
200007b0:	20003648 	andcs	r3, r0, r8, asr #12
200007b4:	00001c38 	andeq	r1, r0, r8, lsr ip

200007b8 <ascii_init>:
#include <defines.h>
#include <asciidisplay.h>

void ascii_init(void){ /**/
200007b8:	b580      	push	{r7, lr}
200007ba:	af00      	add	r7, sp, #0
    /*function set*/
    funtion_set();
200007bc:	f000 f8ef 	bl	2000099e <funtion_set>
    
    /*Display Control*/
    display_control();
200007c0:	f000 f904 	bl	200009cc <display_control>
    
    /*Clear Display*/
    clear_display();
200007c4:	f000 f8d4 	bl	20000970 <clear_display>
    
    /*Entry mode set*/
    entry_mode_set();
200007c8:	f000 f917 	bl	200009fa <entry_mode_set>
}
200007cc:	46c0      	nop			; (mov r8, r8)
200007ce:	46bd      	mov	sp, r7
200007d0:	bd80      	pop	{r7, pc}

200007d2 <ascii_ctrl_bit_set>:

/*adressera ASCII-display, ettställ de bitar som är 1 i x*/
void ascii_ctrl_bit_set(unsigned char x){
200007d2:	b580      	push	{r7, lr}
200007d4:	b082      	sub	sp, #8
200007d6:	af00      	add	r7, sp, #0
200007d8:	0002      	movs	r2, r0
200007da:	1dfb      	adds	r3, r7, #7
200007dc:	701a      	strb	r2, [r3, #0]
    *GPIO_E_ODR_LOW |= ( B_SELECT | x );
200007de:	4b08      	ldr	r3, [pc, #32]	; (20000800 <ascii_ctrl_bit_set+0x2e>)
200007e0:	781b      	ldrb	r3, [r3, #0]
200007e2:	b2da      	uxtb	r2, r3
200007e4:	1dfb      	adds	r3, r7, #7
200007e6:	781b      	ldrb	r3, [r3, #0]
200007e8:	4313      	orrs	r3, r2
200007ea:	b2db      	uxtb	r3, r3
200007ec:	4a04      	ldr	r2, [pc, #16]	; (20000800 <ascii_ctrl_bit_set+0x2e>)
200007ee:	2104      	movs	r1, #4
200007f0:	430b      	orrs	r3, r1
200007f2:	b2db      	uxtb	r3, r3
200007f4:	7013      	strb	r3, [r2, #0]
}
200007f6:	46c0      	nop			; (mov r8, r8)
200007f8:	46bd      	mov	sp, r7
200007fa:	b002      	add	sp, #8
200007fc:	bd80      	pop	{r7, pc}
200007fe:	46c0      	nop			; (mov r8, r8)
20000800:	40021014 	andmi	r1, r2, r4, lsl r0

20000804 <ascii_ctrl_bit_clear>:

/*adressera ASCII-display, nollställ de bitar som är 1 i x*/
void ascii_ctrl_bit_clear(unsigned char x){
20000804:	b580      	push	{r7, lr}
20000806:	b082      	sub	sp, #8
20000808:	af00      	add	r7, sp, #0
2000080a:	0002      	movs	r2, r0
2000080c:	1dfb      	adds	r3, r7, #7
2000080e:	701a      	strb	r2, [r3, #0]
    *GPIO_E_ODR_LOW &= ( B_SELECT | ~x);
20000810:	4b0a      	ldr	r3, [pc, #40]	; (2000083c <ascii_ctrl_bit_clear+0x38>)
20000812:	781b      	ldrb	r3, [r3, #0]
20000814:	b2db      	uxtb	r3, r3
20000816:	b25b      	sxtb	r3, r3
20000818:	1dfa      	adds	r2, r7, #7
2000081a:	7812      	ldrb	r2, [r2, #0]
2000081c:	b252      	sxtb	r2, r2
2000081e:	43d2      	mvns	r2, r2
20000820:	b252      	sxtb	r2, r2
20000822:	2104      	movs	r1, #4
20000824:	430a      	orrs	r2, r1
20000826:	b252      	sxtb	r2, r2
20000828:	4013      	ands	r3, r2
2000082a:	b25a      	sxtb	r2, r3
2000082c:	4b03      	ldr	r3, [pc, #12]	; (2000083c <ascii_ctrl_bit_clear+0x38>)
2000082e:	b2d2      	uxtb	r2, r2
20000830:	701a      	strb	r2, [r3, #0]
    
}
20000832:	46c0      	nop			; (mov r8, r8)
20000834:	46bd      	mov	sp, r7
20000836:	b002      	add	sp, #8
20000838:	bd80      	pop	{r7, pc}
2000083a:	46c0      	nop			; (mov r8, r8)
2000083c:	40021014 	andmi	r1, r2, r4, lsl r0

20000840 <ascii_write_cmd>:

void ascii_write_cmd(unsigned char command){
20000840:	b580      	push	{r7, lr}
20000842:	b082      	sub	sp, #8
20000844:	af00      	add	r7, sp, #0
20000846:	0002      	movs	r2, r0
20000848:	1dfb      	adds	r3, r7, #7
2000084a:	701a      	strb	r2, [r3, #0]
    ascii_ctrl_bit_clear(B_RS);
2000084c:	2001      	movs	r0, #1
2000084e:	f7ff ffd9 	bl	20000804 <ascii_ctrl_bit_clear>
    ascii_ctrl_bit_clear(B_RW);
20000852:	2002      	movs	r0, #2
20000854:	f7ff ffd6 	bl	20000804 <ascii_ctrl_bit_clear>
    ascii_write_controller(command);
20000858:	1dfb      	adds	r3, r7, #7
2000085a:	781b      	ldrb	r3, [r3, #0]
2000085c:	0018      	movs	r0, r3
2000085e:	f000 f819 	bl	20000894 <ascii_write_controller>
}
20000862:	46c0      	nop			; (mov r8, r8)
20000864:	46bd      	mov	sp, r7
20000866:	b002      	add	sp, #8
20000868:	bd80      	pop	{r7, pc}

2000086a <ascii_write_data>:

void ascii_write_data(unsigned char data){
2000086a:	b580      	push	{r7, lr}
2000086c:	b082      	sub	sp, #8
2000086e:	af00      	add	r7, sp, #0
20000870:	0002      	movs	r2, r0
20000872:	1dfb      	adds	r3, r7, #7
20000874:	701a      	strb	r2, [r3, #0]
    ascii_ctrl_bit_set(B_RS);
20000876:	2001      	movs	r0, #1
20000878:	f7ff ffab 	bl	200007d2 <ascii_ctrl_bit_set>
    ascii_ctrl_bit_clear(B_RW);
2000087c:	2002      	movs	r0, #2
2000087e:	f7ff ffc1 	bl	20000804 <ascii_ctrl_bit_clear>
    ascii_write_controller(data);
20000882:	1dfb      	adds	r3, r7, #7
20000884:	781b      	ldrb	r3, [r3, #0]
20000886:	0018      	movs	r0, r3
20000888:	f000 f804 	bl	20000894 <ascii_write_controller>
}
2000088c:	46c0      	nop			; (mov r8, r8)
2000088e:	46bd      	mov	sp, r7
20000890:	b002      	add	sp, #8
20000892:	bd80      	pop	{r7, pc}

20000894 <ascii_write_controller>:

void ascii_write_controller(unsigned char byte){
20000894:	b580      	push	{r7, lr}
20000896:	b082      	sub	sp, #8
20000898:	af00      	add	r7, sp, #0
2000089a:	0002      	movs	r2, r0
2000089c:	1dfb      	adds	r3, r7, #7
2000089e:	701a      	strb	r2, [r3, #0]
    ascii_ctrl_bit_set(B_E);
200008a0:	2040      	movs	r0, #64	; 0x40
200008a2:	f7ff ff96 	bl	200007d2 <ascii_ctrl_bit_set>
    *GPIO_E_ODR_HIGH = byte;
200008a6:	4a06      	ldr	r2, [pc, #24]	; (200008c0 <ascii_write_controller+0x2c>)
200008a8:	1dfb      	adds	r3, r7, #7
200008aa:	781b      	ldrb	r3, [r3, #0]
200008ac:	7013      	strb	r3, [r2, #0]
    delay_250ns();
200008ae:	f000 f8f7 	bl	20000aa0 <delay_250ns>
    ascii_ctrl_bit_clear(B_E);
200008b2:	2040      	movs	r0, #64	; 0x40
200008b4:	f7ff ffa6 	bl	20000804 <ascii_ctrl_bit_clear>
}
200008b8:	46c0      	nop			; (mov r8, r8)
200008ba:	46bd      	mov	sp, r7
200008bc:	b002      	add	sp, #8
200008be:	bd80      	pop	{r7, pc}
200008c0:	40021015 	andmi	r1, r2, r5, lsl r0

200008c4 <ascii_read_controller>:

unsigned char ascii_read_controller(void){
200008c4:	b580      	push	{r7, lr}
200008c6:	b082      	sub	sp, #8
200008c8:	af00      	add	r7, sp, #0
    ascii_ctrl_bit_set(B_E);
200008ca:	2040      	movs	r0, #64	; 0x40
200008cc:	f7ff ff81 	bl	200007d2 <ascii_ctrl_bit_set>
    delay_250ns();
200008d0:	f000 f8e6 	bl	20000aa0 <delay_250ns>
    delay_250ns();
200008d4:	f000 f8e4 	bl	20000aa0 <delay_250ns>
    char retVal = *GPIO_E_IDR_HIGH;
200008d8:	4a06      	ldr	r2, [pc, #24]	; (200008f4 <ascii_read_controller+0x30>)
200008da:	1dfb      	adds	r3, r7, #7
200008dc:	7812      	ldrb	r2, [r2, #0]
200008de:	701a      	strb	r2, [r3, #0]
    ascii_ctrl_bit_clear(B_E);
200008e0:	2040      	movs	r0, #64	; 0x40
200008e2:	f7ff ff8f 	bl	20000804 <ascii_ctrl_bit_clear>
    return retVal;
200008e6:	1dfb      	adds	r3, r7, #7
200008e8:	781b      	ldrb	r3, [r3, #0]
}
200008ea:	0018      	movs	r0, r3
200008ec:	46bd      	mov	sp, r7
200008ee:	b002      	add	sp, #8
200008f0:	bd80      	pop	{r7, pc}
200008f2:	46c0      	nop			; (mov r8, r8)
200008f4:	40021011 	andmi	r1, r2, r1, lsl r0

200008f8 <ascii_read_status>:

unsigned char ascii_read_status(void){
200008f8:	b590      	push	{r4, r7, lr}
200008fa:	b083      	sub	sp, #12
200008fc:	af00      	add	r7, sp, #0
    *(GPIO_E_MODER+0x02) = 0x0000;
200008fe:	4b0b      	ldr	r3, [pc, #44]	; (2000092c <ascii_read_status+0x34>)
20000900:	2200      	movs	r2, #0
20000902:	601a      	str	r2, [r3, #0]
    ascii_ctrl_bit_clear(B_RS);
20000904:	2001      	movs	r0, #1
20000906:	f7ff ff7d 	bl	20000804 <ascii_ctrl_bit_clear>
    ascii_ctrl_bit_set(B_RW);
2000090a:	2002      	movs	r0, #2
2000090c:	f7ff ff61 	bl	200007d2 <ascii_ctrl_bit_set>
    char retStat = ascii_read_controller(); 
20000910:	1dfc      	adds	r4, r7, #7
20000912:	f7ff ffd7 	bl	200008c4 <ascii_read_controller>
20000916:	0003      	movs	r3, r0
20000918:	7023      	strb	r3, [r4, #0]
    *(GPIO_E_MODER+0x02) = 0x5555;
2000091a:	4b04      	ldr	r3, [pc, #16]	; (2000092c <ascii_read_status+0x34>)
2000091c:	4a04      	ldr	r2, [pc, #16]	; (20000930 <ascii_read_status+0x38>)
2000091e:	601a      	str	r2, [r3, #0]
    return retStat;
20000920:	1dfb      	adds	r3, r7, #7
20000922:	781b      	ldrb	r3, [r3, #0]
}
20000924:	0018      	movs	r0, r3
20000926:	46bd      	mov	sp, r7
20000928:	b003      	add	sp, #12
2000092a:	bd90      	pop	{r4, r7, pc}
2000092c:	40021008 	andmi	r1, r2, r8
20000930:	00005555 	andeq	r5, r0, r5, asr r5

20000934 <ascii_read_data>:

unsigned char ascii_read_data(void){
20000934:	b590      	push	{r4, r7, lr}
20000936:	b083      	sub	sp, #12
20000938:	af00      	add	r7, sp, #0
    *(GPIO_E_MODER+0x02) = 0x0000;
2000093a:	4b0b      	ldr	r3, [pc, #44]	; (20000968 <ascii_read_data+0x34>)
2000093c:	2200      	movs	r2, #0
2000093e:	601a      	str	r2, [r3, #0]
    ascii_ctrl_bit_set(B_RS);
20000940:	2001      	movs	r0, #1
20000942:	f7ff ff46 	bl	200007d2 <ascii_ctrl_bit_set>
    ascii_ctrl_bit_set(B_RW);
20000946:	2002      	movs	r0, #2
20000948:	f7ff ff43 	bl	200007d2 <ascii_ctrl_bit_set>
    char retData = ascii_read_controller();
2000094c:	1dfc      	adds	r4, r7, #7
2000094e:	f7ff ffb9 	bl	200008c4 <ascii_read_controller>
20000952:	0003      	movs	r3, r0
20000954:	7023      	strb	r3, [r4, #0]
    *(GPIO_E_MODER+0x02) = 0x5555;
20000956:	4b04      	ldr	r3, [pc, #16]	; (20000968 <ascii_read_data+0x34>)
20000958:	4a04      	ldr	r2, [pc, #16]	; (2000096c <ascii_read_data+0x38>)
2000095a:	601a      	str	r2, [r3, #0]
    return retData;
2000095c:	1dfb      	adds	r3, r7, #7
2000095e:	781b      	ldrb	r3, [r3, #0]
}
20000960:	0018      	movs	r0, r3
20000962:	46bd      	mov	sp, r7
20000964:	b003      	add	sp, #12
20000966:	bd90      	pop	{r4, r7, pc}
20000968:	40021008 	andmi	r1, r2, r8
2000096c:	00005555 	andeq	r5, r0, r5, asr r5

20000970 <clear_display>:

void clear_display(){
20000970:	b580      	push	{r7, lr}
20000972:	af00      	add	r7, sp, #0
    while((ascii_read_status() & 0x80) == 0x80){}
20000974:	46c0      	nop			; (mov r8, r8)
20000976:	f7ff ffbf 	bl	200008f8 <ascii_read_status>
2000097a:	0003      	movs	r3, r0
2000097c:	001a      	movs	r2, r3
2000097e:	2380      	movs	r3, #128	; 0x80
20000980:	4013      	ands	r3, r2
20000982:	2b80      	cmp	r3, #128	; 0x80
20000984:	d0f7      	beq.n	20000976 <clear_display+0x6>
    delay_mikro(8);
20000986:	2008      	movs	r0, #8
20000988:	f000 f894 	bl	20000ab4 <delay_mikro>
    ascii_write_cmd(1); /*clear display*/
2000098c:	2001      	movs	r0, #1
2000098e:	f7ff ff57 	bl	20000840 <ascii_write_cmd>
    delay_milli(2);
20000992:	2002      	movs	r0, #2
20000994:	f000 f896 	bl	20000ac4 <delay_milli>
}
20000998:	46c0      	nop			; (mov r8, r8)
2000099a:	46bd      	mov	sp, r7
2000099c:	bd80      	pop	{r7, pc}

2000099e <funtion_set>:

void funtion_set(){
2000099e:	b580      	push	{r7, lr}
200009a0:	af00      	add	r7, sp, #0
    while((ascii_read_status() & 0x80) == 0x80){}
200009a2:	46c0      	nop			; (mov r8, r8)
200009a4:	f7ff ffa8 	bl	200008f8 <ascii_read_status>
200009a8:	0003      	movs	r3, r0
200009aa:	001a      	movs	r2, r3
200009ac:	2380      	movs	r3, #128	; 0x80
200009ae:	4013      	ands	r3, r2
200009b0:	2b80      	cmp	r3, #128	; 0x80
200009b2:	d0f7      	beq.n	200009a4 <funtion_set+0x6>
    delay_mikro(8);
200009b4:	2008      	movs	r0, #8
200009b6:	f000 f87d 	bl	20000ab4 <delay_mikro>
    ascii_write_cmd(0x38); //0b00111000
200009ba:	2038      	movs	r0, #56	; 0x38
200009bc:	f7ff ff40 	bl	20000840 <ascii_write_cmd>
    delay_mikro(40);
200009c0:	2028      	movs	r0, #40	; 0x28
200009c2:	f000 f877 	bl	20000ab4 <delay_mikro>
}
200009c6:	46c0      	nop			; (mov r8, r8)
200009c8:	46bd      	mov	sp, r7
200009ca:	bd80      	pop	{r7, pc}

200009cc <display_control>:

void display_control(){
200009cc:	b580      	push	{r7, lr}
200009ce:	af00      	add	r7, sp, #0
    while((ascii_read_status() & 0x80) == 0x80){}
200009d0:	46c0      	nop			; (mov r8, r8)
200009d2:	f7ff ff91 	bl	200008f8 <ascii_read_status>
200009d6:	0003      	movs	r3, r0
200009d8:	001a      	movs	r2, r3
200009da:	2380      	movs	r3, #128	; 0x80
200009dc:	4013      	ands	r3, r2
200009de:	2b80      	cmp	r3, #128	; 0x80
200009e0:	d0f7      	beq.n	200009d2 <display_control+0x6>
    delay_mikro(8);
200009e2:	2008      	movs	r0, #8
200009e4:	f000 f866 	bl	20000ab4 <delay_mikro>
    ascii_write_cmd(0xE);
200009e8:	200e      	movs	r0, #14
200009ea:	f7ff ff29 	bl	20000840 <ascii_write_cmd>
    delay_mikro(40);
200009ee:	2028      	movs	r0, #40	; 0x28
200009f0:	f000 f860 	bl	20000ab4 <delay_mikro>
}
200009f4:	46c0      	nop			; (mov r8, r8)
200009f6:	46bd      	mov	sp, r7
200009f8:	bd80      	pop	{r7, pc}

200009fa <entry_mode_set>:

void entry_mode_set(){
200009fa:	b580      	push	{r7, lr}
200009fc:	af00      	add	r7, sp, #0
    while((ascii_read_status() & 0x80) == 0x80){}
200009fe:	46c0      	nop			; (mov r8, r8)
20000a00:	f7ff ff7a 	bl	200008f8 <ascii_read_status>
20000a04:	0003      	movs	r3, r0
20000a06:	001a      	movs	r2, r3
20000a08:	2380      	movs	r3, #128	; 0x80
20000a0a:	4013      	ands	r3, r2
20000a0c:	2b80      	cmp	r3, #128	; 0x80
20000a0e:	d0f7      	beq.n	20000a00 <entry_mode_set+0x6>
    delay_mikro(8);
20000a10:	2008      	movs	r0, #8
20000a12:	f000 f84f 	bl	20000ab4 <delay_mikro>
    ascii_write_cmd(6);
20000a16:	2006      	movs	r0, #6
20000a18:	f7ff ff12 	bl	20000840 <ascii_write_cmd>
    delay_mikro(40);
20000a1c:	2028      	movs	r0, #40	; 0x28
20000a1e:	f000 f849 	bl	20000ab4 <delay_mikro>
}
20000a22:	46c0      	nop			; (mov r8, r8)
20000a24:	46bd      	mov	sp, r7
20000a26:	bd80      	pop	{r7, pc}

20000a28 <ascii_write_char>:

void ascii_write_char(unsigned char c){
20000a28:	b580      	push	{r7, lr}
20000a2a:	b082      	sub	sp, #8
20000a2c:	af00      	add	r7, sp, #0
20000a2e:	0002      	movs	r2, r0
20000a30:	1dfb      	adds	r3, r7, #7
20000a32:	701a      	strb	r2, [r3, #0]
    //while((ascii_read_status() & 0x80) == 0x80){} //Kommentera bort om det ska fungera...
    delay_mikro(8);
20000a34:	2008      	movs	r0, #8
20000a36:	f000 f83d 	bl	20000ab4 <delay_mikro>
    ascii_write_data(c);
20000a3a:	1dfb      	adds	r3, r7, #7
20000a3c:	781b      	ldrb	r3, [r3, #0]
20000a3e:	0018      	movs	r0, r3
20000a40:	f7ff ff13 	bl	2000086a <ascii_write_data>
    delay_mikro(45);
20000a44:	202d      	movs	r0, #45	; 0x2d
20000a46:	f000 f835 	bl	20000ab4 <delay_mikro>
}
20000a4a:	46c0      	nop			; (mov r8, r8)
20000a4c:	46bd      	mov	sp, r7
20000a4e:	b002      	add	sp, #8
20000a50:	bd80      	pop	{r7, pc}

20000a52 <ascii_gotoxy>:

void ascii_gotoxy(int x, int y){ /**/
20000a52:	b580      	push	{r7, lr}
20000a54:	b084      	sub	sp, #16
20000a56:	af00      	add	r7, sp, #0
20000a58:	6078      	str	r0, [r7, #4]
20000a5a:	6039      	str	r1, [r7, #0]
    unsigned char address;
    if(y!=1)
20000a5c:	683b      	ldr	r3, [r7, #0]
20000a5e:	2b01      	cmp	r3, #1
20000a60:	d006      	beq.n	20000a70 <ascii_gotoxy+0x1e>
        address = 0x40 + (x-1);
20000a62:	687b      	ldr	r3, [r7, #4]
20000a64:	b2da      	uxtb	r2, r3
20000a66:	230f      	movs	r3, #15
20000a68:	18fb      	adds	r3, r7, r3
20000a6a:	323f      	adds	r2, #63	; 0x3f
20000a6c:	701a      	strb	r2, [r3, #0]
20000a6e:	e005      	b.n	20000a7c <ascii_gotoxy+0x2a>
    else address=x-1;
20000a70:	687b      	ldr	r3, [r7, #4]
20000a72:	b2da      	uxtb	r2, r3
20000a74:	230f      	movs	r3, #15
20000a76:	18fb      	adds	r3, r7, r3
20000a78:	3a01      	subs	r2, #1
20000a7a:	701a      	strb	r2, [r3, #0]
    
    ascii_write_cmd( 0x80 | address);
20000a7c:	230f      	movs	r3, #15
20000a7e:	18fb      	adds	r3, r7, r3
20000a80:	781b      	ldrb	r3, [r3, #0]
20000a82:	2280      	movs	r2, #128	; 0x80
20000a84:	4252      	negs	r2, r2
20000a86:	4313      	orrs	r3, r2
20000a88:	b2db      	uxtb	r3, r3
20000a8a:	0018      	movs	r0, r3
20000a8c:	f7ff fed8 	bl	20000840 <ascii_write_cmd>
    delay_mikro( 45 );
20000a90:	202d      	movs	r0, #45	; 0x2d
20000a92:	f000 f80f 	bl	20000ab4 <delay_mikro>
20000a96:	46c0      	nop			; (mov r8, r8)
20000a98:	46bd      	mov	sp, r7
20000a9a:	b004      	add	sp, #16
20000a9c:	bd80      	pop	{r7, pc}
20000a9e:	46c0      	nop			; (mov r8, r8)

20000aa0 <delay_250ns>:
#include <defines.h>
#include <delay.h>


void delay_250ns ( void){
20000aa0:	b580      	push	{r7, lr}
20000aa2:	af00      	add	r7, sp, #0
    #ifdef SIMULATOR
        return;
20000aa4:	46c0      	nop			; (mov r8, r8)
    *STK_LOAD = ( (168/4) -1 );
    *STK_VAL = 0;
    *STK_CTRL = 5;
    while( (*STK_CTRL & 0x10000 )== 0 ) {} 
    *STK_CTRL = 0;
}
20000aa6:	46bd      	mov	sp, r7
20000aa8:	bd80      	pop	{r7, pc}

20000aaa <delay_500ns>:

void delay_500ns(void){
20000aaa:	b580      	push	{r7, lr}
20000aac:	af00      	add	r7, sp, #0
    #ifdef SIMULATOR
        return;
20000aae:	46c0      	nop			; (mov r8, r8)
    #endif
    delay_250ns();
    delay_250ns();
}
20000ab0:	46bd      	mov	sp, r7
20000ab2:	bd80      	pop	{r7, pc}

20000ab4 <delay_mikro>:

void delay_mikro(unsigned int us){
20000ab4:	b580      	push	{r7, lr}
20000ab6:	b082      	sub	sp, #8
20000ab8:	af00      	add	r7, sp, #0
20000aba:	6078      	str	r0, [r7, #4]
    #ifdef SIMULATOR
        return;
20000abc:	46c0      	nop			; (mov r8, r8)
        delay_250ns();
        delay_250ns();
        delay_250ns();
        delay_250ns();
    }
}
20000abe:	46bd      	mov	sp, r7
20000ac0:	b002      	add	sp, #8
20000ac2:	bd80      	pop	{r7, pc}

20000ac4 <delay_milli>:

void delay_milli(unsigned int ms){
20000ac4:	b580      	push	{r7, lr}
20000ac6:	b082      	sub	sp, #8
20000ac8:	af00      	add	r7, sp, #0
20000aca:	6078      	str	r0, [r7, #4]
    #ifdef SIMULATOR
        ms = ms / 1000;
20000acc:	687b      	ldr	r3, [r7, #4]
20000ace:	22fa      	movs	r2, #250	; 0xfa
20000ad0:	0091      	lsls	r1, r2, #2
20000ad2:	0018      	movs	r0, r3
20000ad4:	f000 fbbe 	bl	20001254 <__udivsi3>
20000ad8:	0003      	movs	r3, r0
20000ada:	607b      	str	r3, [r7, #4]
        ms++;
20000adc:	687b      	ldr	r3, [r7, #4]
20000ade:	3301      	adds	r3, #1
20000ae0:	607b      	str	r3, [r7, #4]
    #endif
    
    while(ms--){
20000ae2:	e004      	b.n	20000aee <delay_milli+0x2a>
        delay_mikro(1000);
20000ae4:	23fa      	movs	r3, #250	; 0xfa
20000ae6:	009b      	lsls	r3, r3, #2
20000ae8:	0018      	movs	r0, r3
20000aea:	f7ff ffe3 	bl	20000ab4 <delay_mikro>
    while(ms--){
20000aee:	687b      	ldr	r3, [r7, #4]
20000af0:	1e5a      	subs	r2, r3, #1
20000af2:	607a      	str	r2, [r7, #4]
20000af4:	2b00      	cmp	r3, #0
20000af6:	d1f5      	bne.n	20000ae4 <delay_milli+0x20>
    }
20000af8:	46c0      	nop			; (mov r8, r8)
20000afa:	46c0      	nop			; (mov r8, r8)
20000afc:	46bd      	mov	sp, r7
20000afe:	b002      	add	sp, #8
20000b00:	bd80      	pop	{r7, pc}
	...

20000b04 <graphic_init>:
#include <defines.h>
#include <asciidisplay.h>
#include <graphicdisplay.h>


void graphic_init(void){
20000b04:	b580      	push	{r7, lr}
20000b06:	af00      	add	r7, sp, #0
    graphic_ctrl_bit_set(B_E);
20000b08:	2040      	movs	r0, #64	; 0x40
20000b0a:	f000 f851 	bl	20000bb0 <graphic_ctrl_bit_set>
    delay_mikro(10);
20000b0e:	200a      	movs	r0, #10
20000b10:	f7ff ffd0 	bl	20000ab4 <delay_mikro>
    graphic_ctrl_bit_clear(B_CS1|B_CS2|B_RST|B_E);
20000b14:	2078      	movs	r0, #120	; 0x78
20000b16:	f000 f823 	bl	20000b60 <graphic_ctrl_bit_clear>
    delay_milli(30);
20000b1a:	201e      	movs	r0, #30
20000b1c:	f7ff ffd2 	bl	20000ac4 <delay_milli>
    graphic_ctrl_bit_set(B_RST);
20000b20:	2020      	movs	r0, #32
20000b22:	f000 f845 	bl	20000bb0 <graphic_ctrl_bit_set>
    delay_milli(100);
20000b26:	2064      	movs	r0, #100	; 0x64
20000b28:	f7ff ffcc 	bl	20000ac4 <delay_milli>
    graphic_write_command(LCD_OFF, B_CS1|B_CS2);
20000b2c:	2118      	movs	r1, #24
20000b2e:	203e      	movs	r0, #62	; 0x3e
20000b30:	f000 f942 	bl	20000db8 <graphic_write_command>
    graphic_write_command(LCD_ON, B_CS1|B_CS2);
20000b34:	2118      	movs	r1, #24
20000b36:	203f      	movs	r0, #63	; 0x3f
20000b38:	f000 f93e 	bl	20000db8 <graphic_write_command>
    graphic_write_command(LCD_DISP_START, B_CS1|B_CS2);
20000b3c:	2118      	movs	r1, #24
20000b3e:	20c0      	movs	r0, #192	; 0xc0
20000b40:	f000 f93a 	bl	20000db8 <graphic_write_command>
    graphic_write_command(LCD_SET_ADD, B_CS1|B_CS2);
20000b44:	2118      	movs	r1, #24
20000b46:	2040      	movs	r0, #64	; 0x40
20000b48:	f000 f936 	bl	20000db8 <graphic_write_command>
    graphic_write_command(LCD_SET_PAGE, B_CS1|B_CS2);
20000b4c:	2118      	movs	r1, #24
20000b4e:	20b8      	movs	r0, #184	; 0xb8
20000b50:	f000 f932 	bl	20000db8 <graphic_write_command>
    select_controller(0);
20000b54:	2000      	movs	r0, #0
20000b56:	f000 f84d 	bl	20000bf4 <select_controller>
}
20000b5a:	46c0      	nop			; (mov r8, r8)
20000b5c:	46bd      	mov	sp, r7
20000b5e:	bd80      	pop	{r7, pc}

20000b60 <graphic_ctrl_bit_clear>:

void graphic_ctrl_bit_clear(uint8_t x){
20000b60:	b580      	push	{r7, lr}
20000b62:	b084      	sub	sp, #16
20000b64:	af00      	add	r7, sp, #0
20000b66:	0002      	movs	r2, r0
20000b68:	1dfb      	adds	r3, r7, #7
20000b6a:	701a      	strb	r2, [r3, #0]
    //*GPIO_E_ODR_LOW &= ( B_SELECT | ~x);
    //ascii_ctrl_bit_clear(x);
    uint8_t c;
    c =*GPIO_E_ODR_LOW;
20000b6c:	4a0f      	ldr	r2, [pc, #60]	; (20000bac <graphic_ctrl_bit_clear+0x4c>)
20000b6e:	210f      	movs	r1, #15
20000b70:	187b      	adds	r3, r7, r1
20000b72:	7812      	ldrb	r2, [r2, #0]
20000b74:	701a      	strb	r2, [r3, #0]
    c &= ~x;
20000b76:	1dfb      	adds	r3, r7, #7
20000b78:	781b      	ldrb	r3, [r3, #0]
20000b7a:	b25b      	sxtb	r3, r3
20000b7c:	43db      	mvns	r3, r3
20000b7e:	b25b      	sxtb	r3, r3
20000b80:	187a      	adds	r2, r7, r1
20000b82:	7812      	ldrb	r2, [r2, #0]
20000b84:	b252      	sxtb	r2, r2
20000b86:	4013      	ands	r3, r2
20000b88:	b25a      	sxtb	r2, r3
20000b8a:	187b      	adds	r3, r7, r1
20000b8c:	701a      	strb	r2, [r3, #0]
    c &= ~B_SELECT;
20000b8e:	187b      	adds	r3, r7, r1
20000b90:	0008      	movs	r0, r1
20000b92:	187a      	adds	r2, r7, r1
20000b94:	7812      	ldrb	r2, [r2, #0]
20000b96:	2104      	movs	r1, #4
20000b98:	438a      	bics	r2, r1
20000b9a:	701a      	strb	r2, [r3, #0]
    *GPIO_E_ODR_LOW=c;
20000b9c:	4a03      	ldr	r2, [pc, #12]	; (20000bac <graphic_ctrl_bit_clear+0x4c>)
20000b9e:	183b      	adds	r3, r7, r0
20000ba0:	781b      	ldrb	r3, [r3, #0]
20000ba2:	7013      	strb	r3, [r2, #0]

}
20000ba4:	46c0      	nop			; (mov r8, r8)
20000ba6:	46bd      	mov	sp, r7
20000ba8:	b004      	add	sp, #16
20000baa:	bd80      	pop	{r7, pc}
20000bac:	40021014 	andmi	r1, r2, r4, lsl r0

20000bb0 <graphic_ctrl_bit_set>:

void graphic_ctrl_bit_set(uint8_t x){
20000bb0:	b580      	push	{r7, lr}
20000bb2:	b084      	sub	sp, #16
20000bb4:	af00      	add	r7, sp, #0
20000bb6:	0002      	movs	r2, r0
20000bb8:	1dfb      	adds	r3, r7, #7
20000bba:	701a      	strb	r2, [r3, #0]
    //*GPIO_E_ODR_LOW |= (B_SELECT | x );
    //ascii_ctrl_bit_set(x);
    uint8_t c;
    c =*GPIO_E_ODR_LOW;
20000bbc:	4a0c      	ldr	r2, [pc, #48]	; (20000bf0 <graphic_ctrl_bit_set+0x40>)
20000bbe:	200f      	movs	r0, #15
20000bc0:	183b      	adds	r3, r7, r0
20000bc2:	7812      	ldrb	r2, [r2, #0]
20000bc4:	701a      	strb	r2, [r3, #0]
    c |= x; 
20000bc6:	183b      	adds	r3, r7, r0
20000bc8:	1839      	adds	r1, r7, r0
20000bca:	1dfa      	adds	r2, r7, #7
20000bcc:	7809      	ldrb	r1, [r1, #0]
20000bce:	7812      	ldrb	r2, [r2, #0]
20000bd0:	430a      	orrs	r2, r1
20000bd2:	701a      	strb	r2, [r3, #0]
    c &=(~B_SELECT);
20000bd4:	183b      	adds	r3, r7, r0
20000bd6:	183a      	adds	r2, r7, r0
20000bd8:	7812      	ldrb	r2, [r2, #0]
20000bda:	2104      	movs	r1, #4
20000bdc:	438a      	bics	r2, r1
20000bde:	701a      	strb	r2, [r3, #0]
    *GPIO_E_ODR_LOW= c;
20000be0:	4a03      	ldr	r2, [pc, #12]	; (20000bf0 <graphic_ctrl_bit_set+0x40>)
20000be2:	183b      	adds	r3, r7, r0
20000be4:	781b      	ldrb	r3, [r3, #0]
20000be6:	7013      	strb	r3, [r2, #0]
}
20000be8:	46c0      	nop			; (mov r8, r8)
20000bea:	46bd      	mov	sp, r7
20000bec:	b004      	add	sp, #16
20000bee:	bd80      	pop	{r7, pc}
20000bf0:	40021014 	andmi	r1, r2, r4, lsl r0

20000bf4 <select_controller>:

void select_controller(uint8_t controller){
20000bf4:	b580      	push	{r7, lr}
20000bf6:	b082      	sub	sp, #8
20000bf8:	af00      	add	r7, sp, #0
20000bfa:	0002      	movs	r2, r0
20000bfc:	1dfb      	adds	r3, r7, #7
20000bfe:	701a      	strb	r2, [r3, #0]
    switch(controller){
20000c00:	1dfb      	adds	r3, r7, #7
20000c02:	781b      	ldrb	r3, [r3, #0]
20000c04:	2b18      	cmp	r3, #24
20000c06:	d01a      	beq.n	20000c3e <select_controller+0x4a>
20000c08:	dc1d      	bgt.n	20000c46 <select_controller+0x52>
20000c0a:	2b10      	cmp	r3, #16
20000c0c:	d010      	beq.n	20000c30 <select_controller+0x3c>
20000c0e:	dc1a      	bgt.n	20000c46 <select_controller+0x52>
20000c10:	2b00      	cmp	r3, #0
20000c12:	d002      	beq.n	20000c1a <select_controller+0x26>
20000c14:	2b08      	cmp	r3, #8
20000c16:	d004      	beq.n	20000c22 <select_controller+0x2e>
            
        case B_CS1 | B_CS2:
            graphic_ctrl_bit_set(B_CS1|B_CS2);
            break;
    }
}
20000c18:	e015      	b.n	20000c46 <select_controller+0x52>
            graphic_ctrl_bit_clear(B_CS1|B_CS2);
20000c1a:	2018      	movs	r0, #24
20000c1c:	f7ff ffa0 	bl	20000b60 <graphic_ctrl_bit_clear>
            break;
20000c20:	e011      	b.n	20000c46 <select_controller+0x52>
            graphic_ctrl_bit_set(B_CS1);
20000c22:	2008      	movs	r0, #8
20000c24:	f7ff ffc4 	bl	20000bb0 <graphic_ctrl_bit_set>
            graphic_ctrl_bit_clear(B_CS2);
20000c28:	2010      	movs	r0, #16
20000c2a:	f7ff ff99 	bl	20000b60 <graphic_ctrl_bit_clear>
            break;
20000c2e:	e00a      	b.n	20000c46 <select_controller+0x52>
            graphic_ctrl_bit_clear(B_CS1);
20000c30:	2008      	movs	r0, #8
20000c32:	f7ff ff95 	bl	20000b60 <graphic_ctrl_bit_clear>
            graphic_ctrl_bit_set(B_CS2);
20000c36:	2010      	movs	r0, #16
20000c38:	f7ff ffba 	bl	20000bb0 <graphic_ctrl_bit_set>
            break;
20000c3c:	e003      	b.n	20000c46 <select_controller+0x52>
            graphic_ctrl_bit_set(B_CS1|B_CS2);
20000c3e:	2018      	movs	r0, #24
20000c40:	f7ff ffb6 	bl	20000bb0 <graphic_ctrl_bit_set>
            break;
20000c44:	46c0      	nop			; (mov r8, r8)
}
20000c46:	46c0      	nop			; (mov r8, r8)
20000c48:	46bd      	mov	sp, r7
20000c4a:	b002      	add	sp, #8
20000c4c:	bd80      	pop	{r7, pc}

20000c4e <graphic_wait_ready>:

void graphic_wait_ready(void){
20000c4e:	b580      	push	{r7, lr}
20000c50:	af00      	add	r7, sp, #0
    graphic_ctrl_bit_clear(B_E);
20000c52:	2040      	movs	r0, #64	; 0x40
20000c54:	f7ff ff84 	bl	20000b60 <graphic_ctrl_bit_clear>
    *GPIO_E_MODER = 0x00005555;
20000c58:	4b0a      	ldr	r3, [pc, #40]	; (20000c84 <graphic_wait_ready+0x36>)
20000c5a:	4a0b      	ldr	r2, [pc, #44]	; (20000c88 <graphic_wait_ready+0x3a>)
20000c5c:	601a      	str	r2, [r3, #0]
    graphic_ctrl_bit_clear(B_RS);
20000c5e:	2001      	movs	r0, #1
20000c60:	f7ff ff7e 	bl	20000b60 <graphic_ctrl_bit_clear>
    graphic_ctrl_bit_set(B_RW);
20000c64:	2002      	movs	r0, #2
20000c66:	f7ff ffa3 	bl	20000bb0 <graphic_ctrl_bit_set>
    delay_500ns();
20000c6a:	f7ff ff1e 	bl	20000aaa <delay_500ns>
    while(1){
        graphic_ctrl_bit_set(B_E);
20000c6e:	2040      	movs	r0, #64	; 0x40
20000c70:	f7ff ff9e 	bl	20000bb0 <graphic_ctrl_bit_set>
        delay_500ns();
20000c74:	f7ff ff19 	bl	20000aaa <delay_500ns>
        graphic_ctrl_bit_clear(B_E);
20000c78:	2040      	movs	r0, #64	; 0x40
20000c7a:	f7ff ff71 	bl	20000b60 <graphic_ctrl_bit_clear>
        delay_500ns();
20000c7e:	f7ff ff14 	bl	20000aaa <delay_500ns>
        graphic_ctrl_bit_set(B_E);
20000c82:	e7f4      	b.n	20000c6e <graphic_wait_ready+0x20>
20000c84:	40021000 	andmi	r1, r2, r0
20000c88:	00005555 	andeq	r5, r0, r5, asr r5

20000c8c <graphic_read>:
    //graphic_ctrl_bit_set(B_E); // Ej på föreläsning
    *GPIO_E_MODER = 0x55555555;
    
}

unsigned char graphic_read(unsigned char controller){
20000c8c:	b580      	push	{r7, lr}
20000c8e:	b084      	sub	sp, #16
20000c90:	af00      	add	r7, sp, #0
20000c92:	0002      	movs	r2, r0
20000c94:	1dfb      	adds	r3, r7, #7
20000c96:	701a      	strb	r2, [r3, #0]
    graphic_ctrl_bit_clear(B_E);
20000c98:	2040      	movs	r0, #64	; 0x40
20000c9a:	f7ff ff61 	bl	20000b60 <graphic_ctrl_bit_clear>
    *GPIO_E_MODER = 0x00005555;
20000c9e:	4b1a      	ldr	r3, [pc, #104]	; (20000d08 <graphic_read+0x7c>)
20000ca0:	4a1a      	ldr	r2, [pc, #104]	; (20000d0c <graphic_read+0x80>)
20000ca2:	601a      	str	r2, [r3, #0]
    graphic_ctrl_bit_set(B_RS|B_RW);
20000ca4:	2003      	movs	r0, #3
20000ca6:	f7ff ff83 	bl	20000bb0 <graphic_ctrl_bit_set>
    select_controller(controller);              //EJ i Boken
20000caa:	1dfb      	adds	r3, r7, #7
20000cac:	781b      	ldrb	r3, [r3, #0]
20000cae:	0018      	movs	r0, r3
20000cb0:	f7ff ffa0 	bl	20000bf4 <select_controller>
    delay_500ns();
20000cb4:	f7ff fef9 	bl	20000aaa <delay_500ns>
    graphic_ctrl_bit_set(B_E);
20000cb8:	2040      	movs	r0, #64	; 0x40
20000cba:	f7ff ff79 	bl	20000bb0 <graphic_ctrl_bit_set>
    delay_500ns();
20000cbe:	f7ff fef4 	bl	20000aaa <delay_500ns>
    unsigned char retval = *GPIO_E_IDR_HIGH;
20000cc2:	4a13      	ldr	r2, [pc, #76]	; (20000d10 <graphic_read+0x84>)
20000cc4:	230f      	movs	r3, #15
20000cc6:	18fb      	adds	r3, r7, r3
20000cc8:	7812      	ldrb	r2, [r2, #0]
20000cca:	701a      	strb	r2, [r3, #0]
    graphic_ctrl_bit_clear(B_E);
20000ccc:	2040      	movs	r0, #64	; 0x40
20000cce:	f7ff ff47 	bl	20000b60 <graphic_ctrl_bit_clear>
    *GPIO_E_MODER = 0x55555555;
20000cd2:	4b0d      	ldr	r3, [pc, #52]	; (20000d08 <graphic_read+0x7c>)
20000cd4:	4a0f      	ldr	r2, [pc, #60]	; (20000d14 <graphic_read+0x88>)
20000cd6:	601a      	str	r2, [r3, #0]
    
    if (controller & B_CS1){
20000cd8:	1dfb      	adds	r3, r7, #7
20000cda:	781b      	ldrb	r3, [r3, #0]
20000cdc:	2208      	movs	r2, #8
20000cde:	4013      	ands	r3, r2
20000ce0:	d002      	beq.n	20000ce8 <graphic_read+0x5c>
        select_controller(B_CS1);
20000ce2:	2008      	movs	r0, #8
20000ce4:	f7ff ff86 	bl	20000bf4 <select_controller>
        //graphic_wait_ready();
    }
    if (controller & B_CS2){
20000ce8:	1dfb      	adds	r3, r7, #7
20000cea:	781b      	ldrb	r3, [r3, #0]
20000cec:	2210      	movs	r2, #16
20000cee:	4013      	ands	r3, r2
20000cf0:	d002      	beq.n	20000cf8 <graphic_read+0x6c>
        select_controller(B_CS2);
20000cf2:	2010      	movs	r0, #16
20000cf4:	f7ff ff7e 	bl	20000bf4 <select_controller>
        //graphic_wait_ready();
    }
    return retval;
20000cf8:	230f      	movs	r3, #15
20000cfa:	18fb      	adds	r3, r7, r3
20000cfc:	781b      	ldrb	r3, [r3, #0]
}
20000cfe:	0018      	movs	r0, r3
20000d00:	46bd      	mov	sp, r7
20000d02:	b004      	add	sp, #16
20000d04:	bd80      	pop	{r7, pc}
20000d06:	46c0      	nop			; (mov r8, r8)
20000d08:	40021000 	andmi	r1, r2, r0
20000d0c:	00005555 	andeq	r5, r0, r5, asr r5
20000d10:	40021011 	andmi	r1, r2, r1, lsl r0
20000d14:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000d18 <graphic_read_data>:

uint8_t graphic_read_data(uint8_t controller){
20000d18:	b580      	push	{r7, lr}
20000d1a:	b082      	sub	sp, #8
20000d1c:	af00      	add	r7, sp, #0
20000d1e:	0002      	movs	r2, r0
20000d20:	1dfb      	adds	r3, r7, #7
20000d22:	701a      	strb	r2, [r3, #0]
    (void) graphic_read(controller);
20000d24:	1dfb      	adds	r3, r7, #7
20000d26:	781b      	ldrb	r3, [r3, #0]
20000d28:	0018      	movs	r0, r3
20000d2a:	f7ff ffaf 	bl	20000c8c <graphic_read>
    return graphic_read(controller);
20000d2e:	1dfb      	adds	r3, r7, #7
20000d30:	781b      	ldrb	r3, [r3, #0]
20000d32:	0018      	movs	r0, r3
20000d34:	f7ff ffaa 	bl	20000c8c <graphic_read>
20000d38:	0003      	movs	r3, r0
}
20000d3a:	0018      	movs	r0, r3
20000d3c:	46bd      	mov	sp, r7
20000d3e:	b002      	add	sp, #8
20000d40:	bd80      	pop	{r7, pc}

20000d42 <graphic_write>:

void graphic_write(uint8_t value, uint8_t controller){
20000d42:	b580      	push	{r7, lr}
20000d44:	b082      	sub	sp, #8
20000d46:	af00      	add	r7, sp, #0
20000d48:	0002      	movs	r2, r0
20000d4a:	1dfb      	adds	r3, r7, #7
20000d4c:	701a      	strb	r2, [r3, #0]
20000d4e:	1dbb      	adds	r3, r7, #6
20000d50:	1c0a      	adds	r2, r1, #0
20000d52:	701a      	strb	r2, [r3, #0]
    *GPIO_E_ODR_HIGH = value;
20000d54:	4a17      	ldr	r2, [pc, #92]	; (20000db4 <graphic_write+0x72>)
20000d56:	1dfb      	adds	r3, r7, #7
20000d58:	781b      	ldrb	r3, [r3, #0]
20000d5a:	7013      	strb	r3, [r2, #0]
    select_controller(controller);
20000d5c:	1dbb      	adds	r3, r7, #6
20000d5e:	781b      	ldrb	r3, [r3, #0]
20000d60:	0018      	movs	r0, r3
20000d62:	f7ff ff47 	bl	20000bf4 <select_controller>
    delay_500ns();
20000d66:	f7ff fea0 	bl	20000aaa <delay_500ns>
    graphic_ctrl_bit_set(B_E);
20000d6a:	2040      	movs	r0, #64	; 0x40
20000d6c:	f7ff ff20 	bl	20000bb0 <graphic_ctrl_bit_set>
    delay_500ns();
20000d70:	f7ff fe9b 	bl	20000aaa <delay_500ns>
    graphic_ctrl_bit_clear(B_E);
20000d74:	2040      	movs	r0, #64	; 0x40
20000d76:	f7ff fef3 	bl	20000b60 <graphic_ctrl_bit_clear>
    
    if(controller & B_CS1){
20000d7a:	1dbb      	adds	r3, r7, #6
20000d7c:	781b      	ldrb	r3, [r3, #0]
20000d7e:	2208      	movs	r2, #8
20000d80:	4013      	ands	r3, r2
20000d82:	d002      	beq.n	20000d8a <graphic_write+0x48>
        select_controller(B_CS1);
20000d84:	2008      	movs	r0, #8
20000d86:	f7ff ff35 	bl	20000bf4 <select_controller>
        //graphic_wait_ready();
    }
    if(controller & B_CS2){
20000d8a:	1dbb      	adds	r3, r7, #6
20000d8c:	781b      	ldrb	r3, [r3, #0]
20000d8e:	2210      	movs	r2, #16
20000d90:	4013      	ands	r3, r2
20000d92:	d002      	beq.n	20000d9a <graphic_write+0x58>
        select_controller(B_CS2);
20000d94:	2010      	movs	r0, #16
20000d96:	f7ff ff2d 	bl	20000bf4 <select_controller>
        //graphic_wait_ready();
    }
    
    /* INTE på föreläsning*/
    *GPIO_E_ODR_HIGH = 0;
20000d9a:	4b06      	ldr	r3, [pc, #24]	; (20000db4 <graphic_write+0x72>)
20000d9c:	2200      	movs	r2, #0
20000d9e:	701a      	strb	r2, [r3, #0]
    graphic_ctrl_bit_set(B_E);
20000da0:	2040      	movs	r0, #64	; 0x40
20000da2:	f7ff ff05 	bl	20000bb0 <graphic_ctrl_bit_set>
    select_controller(0);
20000da6:	2000      	movs	r0, #0
20000da8:	f7ff ff24 	bl	20000bf4 <select_controller>
      
}
20000dac:	46c0      	nop			; (mov r8, r8)
20000dae:	46bd      	mov	sp, r7
20000db0:	b002      	add	sp, #8
20000db2:	bd80      	pop	{r7, pc}
20000db4:	40021015 	andmi	r1, r2, r5, lsl r0

20000db8 <graphic_write_command>:

void graphic_write_command(uint8_t cmd, uint8_t controller){
20000db8:	b580      	push	{r7, lr}
20000dba:	b082      	sub	sp, #8
20000dbc:	af00      	add	r7, sp, #0
20000dbe:	0002      	movs	r2, r0
20000dc0:	1dfb      	adds	r3, r7, #7
20000dc2:	701a      	strb	r2, [r3, #0]
20000dc4:	1dbb      	adds	r3, r7, #6
20000dc6:	1c0a      	adds	r2, r1, #0
20000dc8:	701a      	strb	r2, [r3, #0]
    graphic_ctrl_bit_clear(B_E);
20000dca:	2040      	movs	r0, #64	; 0x40
20000dcc:	f7ff fec8 	bl	20000b60 <graphic_ctrl_bit_clear>
    select_controller(controller);
20000dd0:	1dbb      	adds	r3, r7, #6
20000dd2:	781b      	ldrb	r3, [r3, #0]
20000dd4:	0018      	movs	r0, r3
20000dd6:	f7ff ff0d 	bl	20000bf4 <select_controller>
    graphic_ctrl_bit_clear(B_RS);
20000dda:	2001      	movs	r0, #1
20000ddc:	f7ff fec0 	bl	20000b60 <graphic_ctrl_bit_clear>
    graphic_ctrl_bit_clear(B_RW);
20000de0:	2002      	movs	r0, #2
20000de2:	f7ff febd 	bl	20000b60 <graphic_ctrl_bit_clear>
    graphic_write(cmd, controller);
20000de6:	1dbb      	adds	r3, r7, #6
20000de8:	781a      	ldrb	r2, [r3, #0]
20000dea:	1dfb      	adds	r3, r7, #7
20000dec:	781b      	ldrb	r3, [r3, #0]
20000dee:	0011      	movs	r1, r2
20000df0:	0018      	movs	r0, r3
20000df2:	f7ff ffa6 	bl	20000d42 <graphic_write>
}
20000df6:	46c0      	nop			; (mov r8, r8)
20000df8:	46bd      	mov	sp, r7
20000dfa:	b002      	add	sp, #8
20000dfc:	bd80      	pop	{r7, pc}

20000dfe <graphic_write_data>:

void graphic_write_data(uint8_t data, uint8_t controller){
20000dfe:	b580      	push	{r7, lr}
20000e00:	b082      	sub	sp, #8
20000e02:	af00      	add	r7, sp, #0
20000e04:	0002      	movs	r2, r0
20000e06:	1dfb      	adds	r3, r7, #7
20000e08:	701a      	strb	r2, [r3, #0]
20000e0a:	1dbb      	adds	r3, r7, #6
20000e0c:	1c0a      	adds	r2, r1, #0
20000e0e:	701a      	strb	r2, [r3, #0]
    graphic_ctrl_bit_clear(B_E);
20000e10:	2040      	movs	r0, #64	; 0x40
20000e12:	f7ff fea5 	bl	20000b60 <graphic_ctrl_bit_clear>
    select_controller(controller);
20000e16:	1dbb      	adds	r3, r7, #6
20000e18:	781b      	ldrb	r3, [r3, #0]
20000e1a:	0018      	movs	r0, r3
20000e1c:	f7ff feea 	bl	20000bf4 <select_controller>
    graphic_ctrl_bit_set(B_RS);
20000e20:	2001      	movs	r0, #1
20000e22:	f7ff fec5 	bl	20000bb0 <graphic_ctrl_bit_set>
    graphic_ctrl_bit_clear(B_RW);
20000e26:	2002      	movs	r0, #2
20000e28:	f7ff fe9a 	bl	20000b60 <graphic_ctrl_bit_clear>
    graphic_write(data, controller);
20000e2c:	1dbb      	adds	r3, r7, #6
20000e2e:	781a      	ldrb	r2, [r3, #0]
20000e30:	1dfb      	adds	r3, r7, #7
20000e32:	781b      	ldrb	r3, [r3, #0]
20000e34:	0011      	movs	r1, r2
20000e36:	0018      	movs	r0, r3
20000e38:	f7ff ff83 	bl	20000d42 <graphic_write>
}
20000e3c:	46c0      	nop			; (mov r8, r8)
20000e3e:	46bd      	mov	sp, r7
20000e40:	b002      	add	sp, #8
20000e42:	bd80      	pop	{r7, pc}

20000e44 <graphic_clear_screen>:

void graphic_clear_screen(void){
20000e44:	b580      	push	{r7, lr}
20000e46:	b082      	sub	sp, #8
20000e48:	af00      	add	r7, sp, #0
    for (int page = 0; page < 8; page++){
20000e4a:	2300      	movs	r3, #0
20000e4c:	607b      	str	r3, [r7, #4]
20000e4e:	e01e      	b.n	20000e8e <graphic_clear_screen+0x4a>
        graphic_write_command(LCD_SET_PAGE | page, B_CS1|B_CS2);
20000e50:	687b      	ldr	r3, [r7, #4]
20000e52:	b25b      	sxtb	r3, r3
20000e54:	2248      	movs	r2, #72	; 0x48
20000e56:	4252      	negs	r2, r2
20000e58:	4313      	orrs	r3, r2
20000e5a:	b25b      	sxtb	r3, r3
20000e5c:	b2db      	uxtb	r3, r3
20000e5e:	2118      	movs	r1, #24
20000e60:	0018      	movs	r0, r3
20000e62:	f7ff ffa9 	bl	20000db8 <graphic_write_command>
        graphic_write_command(LCD_SET_ADD | 0, B_CS1|B_CS2);
20000e66:	2118      	movs	r1, #24
20000e68:	2040      	movs	r0, #64	; 0x40
20000e6a:	f7ff ffa5 	bl	20000db8 <graphic_write_command>
        for (int add = 0; add < 63; add++){
20000e6e:	2300      	movs	r3, #0
20000e70:	603b      	str	r3, [r7, #0]
20000e72:	e006      	b.n	20000e82 <graphic_clear_screen+0x3e>
            graphic_write_data(0, B_CS1|B_CS2);
20000e74:	2118      	movs	r1, #24
20000e76:	2000      	movs	r0, #0
20000e78:	f7ff ffc1 	bl	20000dfe <graphic_write_data>
        for (int add = 0; add < 63; add++){
20000e7c:	683b      	ldr	r3, [r7, #0]
20000e7e:	3301      	adds	r3, #1
20000e80:	603b      	str	r3, [r7, #0]
20000e82:	683b      	ldr	r3, [r7, #0]
20000e84:	2b3e      	cmp	r3, #62	; 0x3e
20000e86:	ddf5      	ble.n	20000e74 <graphic_clear_screen+0x30>
    for (int page = 0; page < 8; page++){
20000e88:	687b      	ldr	r3, [r7, #4]
20000e8a:	3301      	adds	r3, #1
20000e8c:	607b      	str	r3, [r7, #4]
20000e8e:	687b      	ldr	r3, [r7, #4]
20000e90:	2b07      	cmp	r3, #7
20000e92:	dddd      	ble.n	20000e50 <graphic_clear_screen+0xc>
        }
    }
}
20000e94:	46c0      	nop			; (mov r8, r8)
20000e96:	46c0      	nop			; (mov r8, r8)
20000e98:	46bd      	mov	sp, r7
20000e9a:	b002      	add	sp, #8
20000e9c:	bd80      	pop	{r7, pc}

20000e9e <clear_backbuffer>:

void clear_backbuffer(){
20000e9e:	b580      	push	{r7, lr}
20000ea0:	b082      	sub	sp, #8
20000ea2:	af00      	add	r7, sp, #0
    int i;
    for (i = 0; i < 1024; i++)
20000ea4:	2300      	movs	r3, #0
20000ea6:	607b      	str	r3, [r7, #4]
20000ea8:	e007      	b.n	20000eba <clear_backbuffer+0x1c>
        backBuffer[i] = 0;
20000eaa:	4b09      	ldr	r3, [pc, #36]	; (20000ed0 <clear_backbuffer+0x32>)
20000eac:	687a      	ldr	r2, [r7, #4]
20000eae:	0092      	lsls	r2, r2, #2
20000eb0:	2100      	movs	r1, #0
20000eb2:	50d1      	str	r1, [r2, r3]
    for (i = 0; i < 1024; i++)
20000eb4:	687b      	ldr	r3, [r7, #4]
20000eb6:	3301      	adds	r3, #1
20000eb8:	607b      	str	r3, [r7, #4]
20000eba:	687a      	ldr	r2, [r7, #4]
20000ebc:	2380      	movs	r3, #128	; 0x80
20000ebe:	00db      	lsls	r3, r3, #3
20000ec0:	429a      	cmp	r2, r3
20000ec2:	dbf2      	blt.n	20000eaa <clear_backbuffer+0xc>
}
20000ec4:	46c0      	nop			; (mov r8, r8)
20000ec6:	46c0      	nop			; (mov r8, r8)
20000ec8:	46bd      	mov	sp, r7
20000eca:	b002      	add	sp, #8
20000ecc:	bd80      	pop	{r7, pc}
20000ece:	46c0      	nop			; (mov r8, r8)
20000ed0:	20002374 	andcs	r2, r0, r4, ror r3

20000ed4 <pixel>:

void pixel(unsigned x, unsigned y){
20000ed4:	b580      	push	{r7, lr}
20000ed6:	b084      	sub	sp, #16
20000ed8:	af00      	add	r7, sp, #0
20000eda:	6078      	str	r0, [r7, #4]
20000edc:	6039      	str	r1, [r7, #0]
    uint8_t mask;
    int index = 0;
20000ede:	2300      	movs	r3, #0
20000ee0:	60fb      	str	r3, [r7, #12]
    if ((x >128)||(x <1)||(y >64)||(y <1)) return;
20000ee2:	687b      	ldr	r3, [r7, #4]
20000ee4:	2b80      	cmp	r3, #128	; 0x80
20000ee6:	d831      	bhi.n	20000f4c <pixel+0x78>
20000ee8:	687b      	ldr	r3, [r7, #4]
20000eea:	2b00      	cmp	r3, #0
20000eec:	d02e      	beq.n	20000f4c <pixel+0x78>
20000eee:	683b      	ldr	r3, [r7, #0]
20000ef0:	2b40      	cmp	r3, #64	; 0x40
20000ef2:	d82b      	bhi.n	20000f4c <pixel+0x78>
20000ef4:	683b      	ldr	r3, [r7, #0]
20000ef6:	2b00      	cmp	r3, #0
20000ef8:	d028      	beq.n	20000f4c <pixel+0x78>

    mask = 1 << ((y-1)%8);
20000efa:	683b      	ldr	r3, [r7, #0]
20000efc:	3b01      	subs	r3, #1
20000efe:	2207      	movs	r2, #7
20000f00:	4013      	ands	r3, r2
20000f02:	2201      	movs	r2, #1
20000f04:	409a      	lsls	r2, r3
20000f06:	230b      	movs	r3, #11
20000f08:	18fb      	adds	r3, r7, r3
20000f0a:	701a      	strb	r2, [r3, #0]
    
    if(x > 64){
20000f0c:	687b      	ldr	r3, [r7, #4]
20000f0e:	2b40      	cmp	r3, #64	; 0x40
20000f10:	d905      	bls.n	20000f1e <pixel+0x4a>
        x -= 65;
20000f12:	687b      	ldr	r3, [r7, #4]
20000f14:	3b41      	subs	r3, #65	; 0x41
20000f16:	607b      	str	r3, [r7, #4]
        index = 512;
20000f18:	2380      	movs	r3, #128	; 0x80
20000f1a:	009b      	lsls	r3, r3, #2
20000f1c:	60fb      	str	r3, [r7, #12]
    }
    
    index += x + ((y-1)/8)*64;
20000f1e:	683b      	ldr	r3, [r7, #0]
20000f20:	3b01      	subs	r3, #1
20000f22:	08db      	lsrs	r3, r3, #3
20000f24:	019a      	lsls	r2, r3, #6
20000f26:	687b      	ldr	r3, [r7, #4]
20000f28:	18d2      	adds	r2, r2, r3
20000f2a:	68fb      	ldr	r3, [r7, #12]
20000f2c:	18d3      	adds	r3, r2, r3
20000f2e:	60fb      	str	r3, [r7, #12]
    
    backBuffer[index] |= mask;
20000f30:	4b08      	ldr	r3, [pc, #32]	; (20000f54 <pixel+0x80>)
20000f32:	68fa      	ldr	r2, [r7, #12]
20000f34:	0092      	lsls	r2, r2, #2
20000f36:	58d2      	ldr	r2, [r2, r3]
20000f38:	230b      	movs	r3, #11
20000f3a:	18fb      	adds	r3, r7, r3
20000f3c:	781b      	ldrb	r3, [r3, #0]
20000f3e:	431a      	orrs	r2, r3
20000f40:	0011      	movs	r1, r2
20000f42:	4b04      	ldr	r3, [pc, #16]	; (20000f54 <pixel+0x80>)
20000f44:	68fa      	ldr	r2, [r7, #12]
20000f46:	0092      	lsls	r2, r2, #2
20000f48:	50d1      	str	r1, [r2, r3]
20000f4a:	e000      	b.n	20000f4e <pixel+0x7a>
    if ((x >128)||(x <1)||(y >64)||(y <1)) return;
20000f4c:	46c0      	nop			; (mov r8, r8)
}
20000f4e:	46bd      	mov	sp, r7
20000f50:	b004      	add	sp, #16
20000f52:	bd80      	pop	{r7, pc}
20000f54:	20002374 	andcs	r2, r0, r4, ror r3

20000f58 <graphic_draw_screen>:

void graphic_draw_screen(void){
20000f58:	b580      	push	{r7, lr}
20000f5a:	b084      	sub	sp, #16
20000f5c:	af00      	add	r7, sp, #0
    uint8_t i,  j, controller, c;
    unsigned int k = 0;
20000f5e:	2300      	movs	r3, #0
20000f60:	60bb      	str	r3, [r7, #8]
    
    for (c = 0; c < 2; c++){
20000f62:	230d      	movs	r3, #13
20000f64:	18fb      	adds	r3, r7, r3
20000f66:	2200      	movs	r2, #0
20000f68:	701a      	strb	r2, [r3, #0]
20000f6a:	e050      	b.n	2000100e <graphic_draw_screen+0xb6>
        controller = (c==0) ? B_CS1 : B_CS2;
20000f6c:	230d      	movs	r3, #13
20000f6e:	18fb      	adds	r3, r7, r3
20000f70:	781b      	ldrb	r3, [r3, #0]
20000f72:	2b00      	cmp	r3, #0
20000f74:	d101      	bne.n	20000f7a <graphic_draw_screen+0x22>
20000f76:	2208      	movs	r2, #8
20000f78:	e000      	b.n	20000f7c <graphic_draw_screen+0x24>
20000f7a:	2210      	movs	r2, #16
20000f7c:	1dfb      	adds	r3, r7, #7
20000f7e:	701a      	strb	r2, [r3, #0]
        for (j = 0; j < 8; j++){
20000f80:	230e      	movs	r3, #14
20000f82:	18fb      	adds	r3, r7, r3
20000f84:	2200      	movs	r2, #0
20000f86:	701a      	strb	r2, [r3, #0]
20000f88:	e036      	b.n	20000ff8 <graphic_draw_screen+0xa0>
            graphic_write_command(LCD_SET_PAGE | j, controller);
20000f8a:	230e      	movs	r3, #14
20000f8c:	18fb      	adds	r3, r7, r3
20000f8e:	781b      	ldrb	r3, [r3, #0]
20000f90:	2248      	movs	r2, #72	; 0x48
20000f92:	4252      	negs	r2, r2
20000f94:	4313      	orrs	r3, r2
20000f96:	b2da      	uxtb	r2, r3
20000f98:	1dfb      	adds	r3, r7, #7
20000f9a:	781b      	ldrb	r3, [r3, #0]
20000f9c:	0019      	movs	r1, r3
20000f9e:	0010      	movs	r0, r2
20000fa0:	f7ff ff0a 	bl	20000db8 <graphic_write_command>
            graphic_write_command(LCD_SET_ADD | 0, controller);
20000fa4:	1dfb      	adds	r3, r7, #7
20000fa6:	781b      	ldrb	r3, [r3, #0]
20000fa8:	0019      	movs	r1, r3
20000faa:	2040      	movs	r0, #64	; 0x40
20000fac:	f7ff ff04 	bl	20000db8 <graphic_write_command>
            for(i = 0; i <= 63; i++, k++){
20000fb0:	230f      	movs	r3, #15
20000fb2:	18fb      	adds	r3, r7, r3
20000fb4:	2200      	movs	r2, #0
20000fb6:	701a      	strb	r2, [r3, #0]
20000fb8:	e013      	b.n	20000fe2 <graphic_draw_screen+0x8a>
                graphic_write_data(backBuffer[k],controller);  
20000fba:	4b1a      	ldr	r3, [pc, #104]	; (20001024 <graphic_draw_screen+0xcc>)
20000fbc:	68ba      	ldr	r2, [r7, #8]
20000fbe:	0092      	lsls	r2, r2, #2
20000fc0:	58d3      	ldr	r3, [r2, r3]
20000fc2:	b2da      	uxtb	r2, r3
20000fc4:	1dfb      	adds	r3, r7, #7
20000fc6:	781b      	ldrb	r3, [r3, #0]
20000fc8:	0019      	movs	r1, r3
20000fca:	0010      	movs	r0, r2
20000fcc:	f7ff ff17 	bl	20000dfe <graphic_write_data>
            for(i = 0; i <= 63; i++, k++){
20000fd0:	210f      	movs	r1, #15
20000fd2:	187b      	adds	r3, r7, r1
20000fd4:	781a      	ldrb	r2, [r3, #0]
20000fd6:	187b      	adds	r3, r7, r1
20000fd8:	3201      	adds	r2, #1
20000fda:	701a      	strb	r2, [r3, #0]
20000fdc:	68bb      	ldr	r3, [r7, #8]
20000fde:	3301      	adds	r3, #1
20000fe0:	60bb      	str	r3, [r7, #8]
20000fe2:	230f      	movs	r3, #15
20000fe4:	18fb      	adds	r3, r7, r3
20000fe6:	781b      	ldrb	r3, [r3, #0]
20000fe8:	2b3f      	cmp	r3, #63	; 0x3f
20000fea:	d9e6      	bls.n	20000fba <graphic_draw_screen+0x62>
        for (j = 0; j < 8; j++){
20000fec:	210e      	movs	r1, #14
20000fee:	187b      	adds	r3, r7, r1
20000ff0:	781a      	ldrb	r2, [r3, #0]
20000ff2:	187b      	adds	r3, r7, r1
20000ff4:	3201      	adds	r2, #1
20000ff6:	701a      	strb	r2, [r3, #0]
20000ff8:	230e      	movs	r3, #14
20000ffa:	18fb      	adds	r3, r7, r3
20000ffc:	781b      	ldrb	r3, [r3, #0]
20000ffe:	2b07      	cmp	r3, #7
20001000:	d9c3      	bls.n	20000f8a <graphic_draw_screen+0x32>
    for (c = 0; c < 2; c++){
20001002:	210d      	movs	r1, #13
20001004:	187b      	adds	r3, r7, r1
20001006:	781a      	ldrb	r2, [r3, #0]
20001008:	187b      	adds	r3, r7, r1
2000100a:	3201      	adds	r2, #1
2000100c:	701a      	strb	r2, [r3, #0]
2000100e:	230d      	movs	r3, #13
20001010:	18fb      	adds	r3, r7, r3
20001012:	781b      	ldrb	r3, [r3, #0]
20001014:	2b01      	cmp	r3, #1
20001016:	d9a9      	bls.n	20000f6c <graphic_draw_screen+0x14>
            }
        }
    }
}
20001018:	46c0      	nop			; (mov r8, r8)
2000101a:	46c0      	nop			; (mov r8, r8)
2000101c:	46bd      	mov	sp, r7
2000101e:	b004      	add	sp, #16
20001020:	bd80      	pop	{r7, pc}
20001022:	46c0      	nop			; (mov r8, r8)
20001024:	20002374 	andcs	r2, r0, r4, ror r3

20001028 <activate_row>:
#include <defines.h>
#include <keyb.h>

void activate_row(int i){
20001028:	b580      	push	{r7, lr}
2000102a:	b082      	sub	sp, #8
2000102c:	af00      	add	r7, sp, #0
2000102e:	6078      	str	r0, [r7, #4]
    *GPIO_D_ODR_HIGH = 1 << (i+4);
20001030:	687b      	ldr	r3, [r7, #4]
20001032:	3304      	adds	r3, #4
20001034:	2201      	movs	r2, #1
20001036:	409a      	lsls	r2, r3
20001038:	4b03      	ldr	r3, [pc, #12]	; (20001048 <activate_row+0x20>)
2000103a:	b2d2      	uxtb	r2, r2
2000103c:	701a      	strb	r2, [r3, #0]
}
2000103e:	46c0      	nop			; (mov r8, r8)
20001040:	46bd      	mov	sp, r7
20001042:	b002      	add	sp, #8
20001044:	bd80      	pop	{r7, pc}
20001046:	46c0      	nop			; (mov r8, r8)
20001048:	40020c15 	andmi	r0, r2, r5, lsl ip

2000104c <read_coloumn>:

int read_coloumn(){
2000104c:	b580      	push	{r7, lr}
2000104e:	b082      	sub	sp, #8
20001050:	af00      	add	r7, sp, #0
    int j; 
    char input = *GPIO_D_IDR_HIGH;
20001052:	4a0e      	ldr	r2, [pc, #56]	; (2000108c <read_coloumn+0x40>)
20001054:	1cfb      	adds	r3, r7, #3
20001056:	7812      	ldrb	r2, [r2, #0]
20001058:	701a      	strb	r2, [r3, #0]
    for(j = 0; j<4 ; j++){
2000105a:	2300      	movs	r3, #0
2000105c:	607b      	str	r3, [r7, #4]
2000105e:	e00c      	b.n	2000107a <read_coloumn+0x2e>
        if (input&(1<<j)){
20001060:	1cfb      	adds	r3, r7, #3
20001062:	781a      	ldrb	r2, [r3, #0]
20001064:	687b      	ldr	r3, [r7, #4]
20001066:	411a      	asrs	r2, r3
20001068:	0013      	movs	r3, r2
2000106a:	2201      	movs	r2, #1
2000106c:	4013      	ands	r3, r2
2000106e:	d001      	beq.n	20001074 <read_coloumn+0x28>
            return j;
20001070:	687b      	ldr	r3, [r7, #4]
20001072:	e007      	b.n	20001084 <read_coloumn+0x38>
    for(j = 0; j<4 ; j++){
20001074:	687b      	ldr	r3, [r7, #4]
20001076:	3301      	adds	r3, #1
20001078:	607b      	str	r3, [r7, #4]
2000107a:	687b      	ldr	r3, [r7, #4]
2000107c:	2b03      	cmp	r3, #3
2000107e:	ddef      	ble.n	20001060 <read_coloumn+0x14>
        }
    }
    return -1;
20001080:	2301      	movs	r3, #1
20001082:	425b      	negs	r3, r3
}
20001084:	0018      	movs	r0, r3
20001086:	46bd      	mov	sp, r7
20001088:	b002      	add	sp, #8
2000108a:	bd80      	pop	{r7, pc}
2000108c:	40020c11 	andmi	r0, r2, r1, lsl ip

20001090 <keyb>:

/*rader in, kolumner ut*/
unsigned char keyb(void){
20001090:	b590      	push	{r4, r7, lr}
20001092:	b08b      	sub	sp, #44	; 0x2c
20001094:	af00      	add	r7, sp, #0
    unsigned char key_value[] = {0x06,0x5B,0x4F,0x77,0x66,0x6D,0x7D,0x7C,0x07,0x7F,0x6F,0x39,0x79,0x3F,0x71,0xBF};
20001096:	2310      	movs	r3, #16
20001098:	18fb      	adds	r3, r7, r3
2000109a:	4a15      	ldr	r2, [pc, #84]	; (200010f0 <keyb+0x60>)
2000109c:	ca13      	ldmia	r2!, {r0, r1, r4}
2000109e:	c313      	stmia	r3!, {r0, r1, r4}
200010a0:	6812      	ldr	r2, [r2, #0]
200010a2:	601a      	str	r2, [r3, #0]
    unsigned char keyVal[] = {1,2,3,0xA,4,5,6,0xB,7,8,9,0xC,0xE,0,0xF,0xD};
200010a4:	003b      	movs	r3, r7
200010a6:	4a13      	ldr	r2, [pc, #76]	; (200010f4 <keyb+0x64>)
200010a8:	ca13      	ldmia	r2!, {r0, r1, r4}
200010aa:	c313      	stmia	r3!, {r0, r1, r4}
200010ac:	6812      	ldr	r2, [r2, #0]
200010ae:	601a      	str	r2, [r3, #0]
    
        
    int row, coloumn;
    for (row = 0; row < 4; row++){
200010b0:	2300      	movs	r3, #0
200010b2:	627b      	str	r3, [r7, #36]	; 0x24
200010b4:	e014      	b.n	200010e0 <keyb+0x50>
        activate_row(row);
200010b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200010b8:	0018      	movs	r0, r3
200010ba:	f7ff ffb5 	bl	20001028 <activate_row>
        coloumn = read_coloumn();
200010be:	f7ff ffc5 	bl	2000104c <read_coloumn>
200010c2:	0003      	movs	r3, r0
200010c4:	623b      	str	r3, [r7, #32]
        if (coloumn != -1){
200010c6:	6a3b      	ldr	r3, [r7, #32]
200010c8:	3301      	adds	r3, #1
200010ca:	d006      	beq.n	200010da <keyb+0x4a>
            return keyVal[coloumn+row*4];
200010cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200010ce:	009a      	lsls	r2, r3, #2
200010d0:	6a3b      	ldr	r3, [r7, #32]
200010d2:	18d3      	adds	r3, r2, r3
200010d4:	003a      	movs	r2, r7
200010d6:	5cd3      	ldrb	r3, [r2, r3]
200010d8:	e006      	b.n	200010e8 <keyb+0x58>
    for (row = 0; row < 4; row++){
200010da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200010dc:	3301      	adds	r3, #1
200010de:	627b      	str	r3, [r7, #36]	; 0x24
200010e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200010e2:	2b03      	cmp	r3, #3
200010e4:	dde7      	ble.n	200010b6 <keyb+0x26>
        }
    }
    return 0x00;
200010e6:	2300      	movs	r3, #0
}
200010e8:	0018      	movs	r0, r3
200010ea:	46bd      	mov	sp, r7
200010ec:	b00b      	add	sp, #44	; 0x2c
200010ee:	bd90      	pop	{r4, r7, pc}
200010f0:	20003680 	andcs	r3, r0, r0, lsl #13
200010f4:	20003690 	mulcs	r0, r0, r6

200010f8 <out7seg>:

void out7seg(unsigned char c){
200010f8:	b580      	push	{r7, lr}
200010fa:	b082      	sub	sp, #8
200010fc:	af00      	add	r7, sp, #0
200010fe:	0002      	movs	r2, r0
20001100:	1dfb      	adds	r3, r7, #7
20001102:	701a      	strb	r2, [r3, #0]
    
    *GPIO_D_ODR_LOW = c; //0x00 -> 0xFF
20001104:	4a03      	ldr	r2, [pc, #12]	; (20001114 <out7seg+0x1c>)
20001106:	1dfb      	adds	r3, r7, #7
20001108:	781b      	ldrb	r3, [r3, #0]
2000110a:	7013      	strb	r3, [r2, #0]
    
2000110c:	46c0      	nop			; (mov r8, r8)
2000110e:	46bd      	mov	sp, r7
20001110:	b002      	add	sp, #8
20001112:	bd80      	pop	{r7, pc}
20001114:	40020c14 	andmi	r0, r2, r4, lsl ip

20001118 <init_queue>:
POBJECT objArray[MAX];
int front = 0;
int rear = -1;
int itemCount = 0;

void init_queue(){
20001118:	b580      	push	{r7, lr}
2000111a:	b082      	sub	sp, #8
2000111c:	af00      	add	r7, sp, #0
    for(int i = 0; i < MAX; i++)
2000111e:	2300      	movs	r3, #0
20001120:	607b      	str	r3, [r7, #4]
20001122:	e007      	b.n	20001134 <init_queue+0x1c>
        objArray[i] = NULL;
20001124:	4b07      	ldr	r3, [pc, #28]	; (20001144 <init_queue+0x2c>)
20001126:	687a      	ldr	r2, [r7, #4]
20001128:	0092      	lsls	r2, r2, #2
2000112a:	2100      	movs	r1, #0
2000112c:	50d1      	str	r1, [r2, r3]
    for(int i = 0; i < MAX; i++)
2000112e:	687b      	ldr	r3, [r7, #4]
20001130:	3301      	adds	r3, #1
20001132:	607b      	str	r3, [r7, #4]
20001134:	687b      	ldr	r3, [r7, #4]
20001136:	2b63      	cmp	r3, #99	; 0x63
20001138:	ddf4      	ble.n	20001124 <init_queue+0xc>
}
2000113a:	46c0      	nop			; (mov r8, r8)
2000113c:	46c0      	nop			; (mov r8, r8)
2000113e:	46bd      	mov	sp, r7
20001140:	b002      	add	sp, #8
20001142:	bd80      	pop	{r7, pc}
20001144:	2000337c 	andcs	r3, r0, ip, ror r3

20001148 <peek>:

/*returns the head*/
POBJECT peek() {
20001148:	b580      	push	{r7, lr}
2000114a:	af00      	add	r7, sp, #0
   return objArray[front];
2000114c:	4b03      	ldr	r3, [pc, #12]	; (2000115c <peek+0x14>)
2000114e:	681a      	ldr	r2, [r3, #0]
20001150:	4b03      	ldr	r3, [pc, #12]	; (20001160 <peek+0x18>)
20001152:	0092      	lsls	r2, r2, #2
20001154:	58d3      	ldr	r3, [r2, r3]
}
20001156:	0018      	movs	r0, r3
20001158:	46bd      	mov	sp, r7
2000115a:	bd80      	pop	{r7, pc}
2000115c:	20003374 	andcs	r3, r0, r4, ror r3
20001160:	2000337c 	andcs	r3, r0, ip, ror r3

20001164 <isEmpty>:

/*returns true if itemCount == 0*/
bool isEmpty() {
20001164:	b580      	push	{r7, lr}
20001166:	af00      	add	r7, sp, #0
   return itemCount == 0;
20001168:	4b03      	ldr	r3, [pc, #12]	; (20001178 <isEmpty+0x14>)
2000116a:	681b      	ldr	r3, [r3, #0]
2000116c:	425a      	negs	r2, r3
2000116e:	4153      	adcs	r3, r2
20001170:	b2db      	uxtb	r3, r3
}
20001172:	0018      	movs	r0, r3
20001174:	46bd      	mov	sp, r7
20001176:	bd80      	pop	{r7, pc}
20001178:	20003378 	andcs	r3, r0, r8, ror r3

2000117c <isFull>:

/*returns true if itemCount == MAX (512)*/
bool isFull() {
2000117c:	b580      	push	{r7, lr}
2000117e:	af00      	add	r7, sp, #0
   return itemCount == MAX;
20001180:	4b04      	ldr	r3, [pc, #16]	; (20001194 <isFull+0x18>)
20001182:	681b      	ldr	r3, [r3, #0]
20001184:	3b64      	subs	r3, #100	; 0x64
20001186:	425a      	negs	r2, r3
20001188:	4153      	adcs	r3, r2
2000118a:	b2db      	uxtb	r3, r3
}
2000118c:	0018      	movs	r0, r3
2000118e:	46bd      	mov	sp, r7
20001190:	bd80      	pop	{r7, pc}
20001192:	46c0      	nop			; (mov r8, r8)
20001194:	20003378 	andcs	r3, r0, r8, ror r3

20001198 <size>:

/*Returns itemCount*/
int size() {
20001198:	b580      	push	{r7, lr}
2000119a:	af00      	add	r7, sp, #0
   return itemCount;
2000119c:	4b02      	ldr	r3, [pc, #8]	; (200011a8 <size+0x10>)
2000119e:	681b      	ldr	r3, [r3, #0]
}  
200011a0:	0018      	movs	r0, r3
200011a2:	46bd      	mov	sp, r7
200011a4:	bd80      	pop	{r7, pc}
200011a6:	46c0      	nop			; (mov r8, r8)
200011a8:	20003378 	andcs	r3, r0, r8, ror r3

200011ac <insert>:

/*Adds a node in the end of the queue*/
void insert(POBJECT data) {
200011ac:	b580      	push	{r7, lr}
200011ae:	b082      	sub	sp, #8
200011b0:	af00      	add	r7, sp, #0
200011b2:	6078      	str	r0, [r7, #4]

   if(!isFull()) {
200011b4:	f7ff ffe2 	bl	2000117c <isFull>
200011b8:	0003      	movs	r3, r0
200011ba:	001a      	movs	r2, r3
200011bc:	2301      	movs	r3, #1
200011be:	4053      	eors	r3, r2
200011c0:	b2db      	uxtb	r3, r3
200011c2:	2b00      	cmp	r3, #0
200011c4:	d017      	beq.n	200011f6 <insert+0x4a>
	
      if(rear == MAX-1) {
200011c6:	4b0e      	ldr	r3, [pc, #56]	; (20001200 <insert+0x54>)
200011c8:	681b      	ldr	r3, [r3, #0]
200011ca:	2b63      	cmp	r3, #99	; 0x63
200011cc:	d103      	bne.n	200011d6 <insert+0x2a>
         rear = -1;            
200011ce:	4b0c      	ldr	r3, [pc, #48]	; (20001200 <insert+0x54>)
200011d0:	2201      	movs	r2, #1
200011d2:	4252      	negs	r2, r2
200011d4:	601a      	str	r2, [r3, #0]
      }       
      objArray[++rear] = data;
200011d6:	4b0a      	ldr	r3, [pc, #40]	; (20001200 <insert+0x54>)
200011d8:	681b      	ldr	r3, [r3, #0]
200011da:	1c5a      	adds	r2, r3, #1
200011dc:	4b08      	ldr	r3, [pc, #32]	; (20001200 <insert+0x54>)
200011de:	601a      	str	r2, [r3, #0]
200011e0:	4b07      	ldr	r3, [pc, #28]	; (20001200 <insert+0x54>)
200011e2:	681a      	ldr	r2, [r3, #0]
200011e4:	4b07      	ldr	r3, [pc, #28]	; (20001204 <insert+0x58>)
200011e6:	0092      	lsls	r2, r2, #2
200011e8:	6879      	ldr	r1, [r7, #4]
200011ea:	50d1      	str	r1, [r2, r3]
      itemCount++;
200011ec:	4b06      	ldr	r3, [pc, #24]	; (20001208 <insert+0x5c>)
200011ee:	681b      	ldr	r3, [r3, #0]
200011f0:	1c5a      	adds	r2, r3, #1
200011f2:	4b05      	ldr	r3, [pc, #20]	; (20001208 <insert+0x5c>)
200011f4:	601a      	str	r2, [r3, #0]
   }
}
200011f6:	46c0      	nop			; (mov r8, r8)
200011f8:	46bd      	mov	sp, r7
200011fa:	b002      	add	sp, #8
200011fc:	bd80      	pop	{r7, pc}
200011fe:	46c0      	nop			; (mov r8, r8)
20001200:	20003644 	andcs	r3, r0, r4, asr #12
20001204:	2000337c 	andcs	r3, r0, ip, ror r3
20001208:	20003378 	andcs	r3, r0, r8, ror r3

2000120c <remove>:

int remove() {
2000120c:	b580      	push	{r7, lr}
2000120e:	b082      	sub	sp, #8
20001210:	af00      	add	r7, sp, #0
   POBJECT data = objArray[front++];
20001212:	4b0d      	ldr	r3, [pc, #52]	; (20001248 <remove+0x3c>)
20001214:	681b      	ldr	r3, [r3, #0]
20001216:	1c59      	adds	r1, r3, #1
20001218:	4a0b      	ldr	r2, [pc, #44]	; (20001248 <remove+0x3c>)
2000121a:	6011      	str	r1, [r2, #0]
2000121c:	4a0b      	ldr	r2, [pc, #44]	; (2000124c <remove+0x40>)
2000121e:	009b      	lsls	r3, r3, #2
20001220:	589b      	ldr	r3, [r3, r2]
20001222:	607b      	str	r3, [r7, #4]
	
   if(front == MAX) {
20001224:	4b08      	ldr	r3, [pc, #32]	; (20001248 <remove+0x3c>)
20001226:	681b      	ldr	r3, [r3, #0]
20001228:	2b64      	cmp	r3, #100	; 0x64
2000122a:	d102      	bne.n	20001232 <remove+0x26>
      front = 0;
2000122c:	4b06      	ldr	r3, [pc, #24]	; (20001248 <remove+0x3c>)
2000122e:	2200      	movs	r2, #0
20001230:	601a      	str	r2, [r3, #0]
   }
	
   itemCount--;
20001232:	4b07      	ldr	r3, [pc, #28]	; (20001250 <remove+0x44>)
20001234:	681b      	ldr	r3, [r3, #0]
20001236:	1e5a      	subs	r2, r3, #1
20001238:	4b05      	ldr	r3, [pc, #20]	; (20001250 <remove+0x44>)
2000123a:	601a      	str	r2, [r3, #0]
   return (int)data;  
2000123c:	687b      	ldr	r3, [r7, #4]
}
2000123e:	0018      	movs	r0, r3
20001240:	46bd      	mov	sp, r7
20001242:	b002      	add	sp, #8
20001244:	bd80      	pop	{r7, pc}
20001246:	46c0      	nop			; (mov r8, r8)
20001248:	20003374 	andcs	r3, r0, r4, ror r3
2000124c:	2000337c 	andcs	r3, r0, ip, ror r3
20001250:	20003378 	andcs	r3, r0, r8, ror r3

20001254 <__udivsi3>:
20001254:	2200      	movs	r2, #0
20001256:	0843      	lsrs	r3, r0, #1
20001258:	428b      	cmp	r3, r1
2000125a:	d374      	bcc.n	20001346 <__udivsi3+0xf2>
2000125c:	0903      	lsrs	r3, r0, #4
2000125e:	428b      	cmp	r3, r1
20001260:	d35f      	bcc.n	20001322 <__udivsi3+0xce>
20001262:	0a03      	lsrs	r3, r0, #8
20001264:	428b      	cmp	r3, r1
20001266:	d344      	bcc.n	200012f2 <__udivsi3+0x9e>
20001268:	0b03      	lsrs	r3, r0, #12
2000126a:	428b      	cmp	r3, r1
2000126c:	d328      	bcc.n	200012c0 <__udivsi3+0x6c>
2000126e:	0c03      	lsrs	r3, r0, #16
20001270:	428b      	cmp	r3, r1
20001272:	d30d      	bcc.n	20001290 <__udivsi3+0x3c>
20001274:	22ff      	movs	r2, #255	; 0xff
20001276:	0209      	lsls	r1, r1, #8
20001278:	ba12      	rev	r2, r2
2000127a:	0c03      	lsrs	r3, r0, #16
2000127c:	428b      	cmp	r3, r1
2000127e:	d302      	bcc.n	20001286 <__udivsi3+0x32>
20001280:	1212      	asrs	r2, r2, #8
20001282:	0209      	lsls	r1, r1, #8
20001284:	d065      	beq.n	20001352 <__udivsi3+0xfe>
20001286:	0b03      	lsrs	r3, r0, #12
20001288:	428b      	cmp	r3, r1
2000128a:	d319      	bcc.n	200012c0 <__udivsi3+0x6c>
2000128c:	e000      	b.n	20001290 <__udivsi3+0x3c>
2000128e:	0a09      	lsrs	r1, r1, #8
20001290:	0bc3      	lsrs	r3, r0, #15
20001292:	428b      	cmp	r3, r1
20001294:	d301      	bcc.n	2000129a <__udivsi3+0x46>
20001296:	03cb      	lsls	r3, r1, #15
20001298:	1ac0      	subs	r0, r0, r3
2000129a:	4152      	adcs	r2, r2
2000129c:	0b83      	lsrs	r3, r0, #14
2000129e:	428b      	cmp	r3, r1
200012a0:	d301      	bcc.n	200012a6 <__udivsi3+0x52>
200012a2:	038b      	lsls	r3, r1, #14
200012a4:	1ac0      	subs	r0, r0, r3
200012a6:	4152      	adcs	r2, r2
200012a8:	0b43      	lsrs	r3, r0, #13
200012aa:	428b      	cmp	r3, r1
200012ac:	d301      	bcc.n	200012b2 <__udivsi3+0x5e>
200012ae:	034b      	lsls	r3, r1, #13
200012b0:	1ac0      	subs	r0, r0, r3
200012b2:	4152      	adcs	r2, r2
200012b4:	0b03      	lsrs	r3, r0, #12
200012b6:	428b      	cmp	r3, r1
200012b8:	d301      	bcc.n	200012be <__udivsi3+0x6a>
200012ba:	030b      	lsls	r3, r1, #12
200012bc:	1ac0      	subs	r0, r0, r3
200012be:	4152      	adcs	r2, r2
200012c0:	0ac3      	lsrs	r3, r0, #11
200012c2:	428b      	cmp	r3, r1
200012c4:	d301      	bcc.n	200012ca <__udivsi3+0x76>
200012c6:	02cb      	lsls	r3, r1, #11
200012c8:	1ac0      	subs	r0, r0, r3
200012ca:	4152      	adcs	r2, r2
200012cc:	0a83      	lsrs	r3, r0, #10
200012ce:	428b      	cmp	r3, r1
200012d0:	d301      	bcc.n	200012d6 <__udivsi3+0x82>
200012d2:	028b      	lsls	r3, r1, #10
200012d4:	1ac0      	subs	r0, r0, r3
200012d6:	4152      	adcs	r2, r2
200012d8:	0a43      	lsrs	r3, r0, #9
200012da:	428b      	cmp	r3, r1
200012dc:	d301      	bcc.n	200012e2 <__udivsi3+0x8e>
200012de:	024b      	lsls	r3, r1, #9
200012e0:	1ac0      	subs	r0, r0, r3
200012e2:	4152      	adcs	r2, r2
200012e4:	0a03      	lsrs	r3, r0, #8
200012e6:	428b      	cmp	r3, r1
200012e8:	d301      	bcc.n	200012ee <__udivsi3+0x9a>
200012ea:	020b      	lsls	r3, r1, #8
200012ec:	1ac0      	subs	r0, r0, r3
200012ee:	4152      	adcs	r2, r2
200012f0:	d2cd      	bcs.n	2000128e <__udivsi3+0x3a>
200012f2:	09c3      	lsrs	r3, r0, #7
200012f4:	428b      	cmp	r3, r1
200012f6:	d301      	bcc.n	200012fc <__udivsi3+0xa8>
200012f8:	01cb      	lsls	r3, r1, #7
200012fa:	1ac0      	subs	r0, r0, r3
200012fc:	4152      	adcs	r2, r2
200012fe:	0983      	lsrs	r3, r0, #6
20001300:	428b      	cmp	r3, r1
20001302:	d301      	bcc.n	20001308 <__udivsi3+0xb4>
20001304:	018b      	lsls	r3, r1, #6
20001306:	1ac0      	subs	r0, r0, r3
20001308:	4152      	adcs	r2, r2
2000130a:	0943      	lsrs	r3, r0, #5
2000130c:	428b      	cmp	r3, r1
2000130e:	d301      	bcc.n	20001314 <__udivsi3+0xc0>
20001310:	014b      	lsls	r3, r1, #5
20001312:	1ac0      	subs	r0, r0, r3
20001314:	4152      	adcs	r2, r2
20001316:	0903      	lsrs	r3, r0, #4
20001318:	428b      	cmp	r3, r1
2000131a:	d301      	bcc.n	20001320 <__udivsi3+0xcc>
2000131c:	010b      	lsls	r3, r1, #4
2000131e:	1ac0      	subs	r0, r0, r3
20001320:	4152      	adcs	r2, r2
20001322:	08c3      	lsrs	r3, r0, #3
20001324:	428b      	cmp	r3, r1
20001326:	d301      	bcc.n	2000132c <__udivsi3+0xd8>
20001328:	00cb      	lsls	r3, r1, #3
2000132a:	1ac0      	subs	r0, r0, r3
2000132c:	4152      	adcs	r2, r2
2000132e:	0883      	lsrs	r3, r0, #2
20001330:	428b      	cmp	r3, r1
20001332:	d301      	bcc.n	20001338 <__udivsi3+0xe4>
20001334:	008b      	lsls	r3, r1, #2
20001336:	1ac0      	subs	r0, r0, r3
20001338:	4152      	adcs	r2, r2
2000133a:	0843      	lsrs	r3, r0, #1
2000133c:	428b      	cmp	r3, r1
2000133e:	d301      	bcc.n	20001344 <__udivsi3+0xf0>
20001340:	004b      	lsls	r3, r1, #1
20001342:	1ac0      	subs	r0, r0, r3
20001344:	4152      	adcs	r2, r2
20001346:	1a41      	subs	r1, r0, r1
20001348:	d200      	bcs.n	2000134c <__udivsi3+0xf8>
2000134a:	4601      	mov	r1, r0
2000134c:	4152      	adcs	r2, r2
2000134e:	4610      	mov	r0, r2
20001350:	4770      	bx	lr
20001352:	e7ff      	b.n	20001354 <__udivsi3+0x100>
20001354:	b501      	push	{r0, lr}
20001356:	2000      	movs	r0, #0
20001358:	f000 f806 	bl	20001368 <__aeabi_idiv0>
2000135c:	bd02      	pop	{r1, pc}
2000135e:	46c0      	nop			; (mov r8, r8)

20001360 <__aeabi_uidivmod>:
20001360:	2900      	cmp	r1, #0
20001362:	d0f7      	beq.n	20001354 <__udivsi3+0x100>
20001364:	e776      	b.n	20001254 <__udivsi3>
20001366:	4770      	bx	lr

20001368 <__aeabi_idiv0>:
20001368:	4770      	bx	lr
2000136a:	46c0      	nop			; (mov r8, r8)

2000136c <backBuffer>:
	...

2000236c <points>:
2000236c:	00000000 	andeq	r0, r0, r0

20002370 <snakeSize>:
20002370:	00000000 	andeq	r0, r0, r0

20002374 <backBuffer>:
	...

20003374 <front>:
20003374:	00000000 	andeq	r0, r0, r0

20003378 <itemCount>:
20003378:	00000000 	andeq	r0, r0, r0

2000337c <objArray>:
	...

2000350c <image_bits>:
2000350c:	aa889494 	bge	1e228764 <startup-0x1dd789c>
20003510:	beebffeb 	cdplt	15, 14, cr15, cr11, cr11, {7}
20003514:	0000009c 	muleq	r0, ip, r0

20003518 <snakehead_geometry_LEFT>:
20003518:	0000000a 	andeq	r0, r0, sl
2000351c:	00000004 	andeq	r0, r0, r4
20003520:	00000004 	andeq	r0, r0, r4
20003524:	02000100 	andeq	r0, r0, #0, 2
20003528:	02010101 	andeq	r0, r1, #1073741824	; 0x40000000
2000352c:	03020002 	movweq	r0, #8194	; 0x2002
20003530:	01030003 	tsteq	r3, r3
20003534:	03030203 	movweq	r0, #12803	; 0x3203
	...

20003544 <snakehead_geometry_RIGHT>:
20003544:	0000000a 	andeq	r0, r0, sl
20003548:	00000004 	andeq	r0, r0, r4
2000354c:	00000004 	andeq	r0, r0, r4
20003550:	01000000 	mrseq	r0, (UNDEF: 0)
20003554:	03000200 	movweq	r0, #512	; 0x200
20003558:	03010001 	movweq	r0, #4097	; 0x1001
2000355c:	02020102 	andeq	r0, r2, #-2147483648	; 0x80000000
20003560:	02030103 	andeq	r0, r3, #-1073741824	; 0xc0000000
	...

20003570 <snakehead_geometry_DOWN>:
20003570:	0000000a 	andeq	r0, r0, sl
20003574:	00000004 	andeq	r0, r0, r4
20003578:	00000004 	andeq	r0, r0, r4
2000357c:	01000000 	mrseq	r0, (UNDEF: 0)
20003580:	02010001 	andeq	r0, r1, #1
20003584:	00020301 	andeq	r0, r2, r1, lsl #6
20003588:	03020202 	movweq	r0, #8706	; 0x2202
2000358c:	01030003 	tsteq	r3, r3
	...

2000359c <snakehead_geometry_UP>:
2000359c:	0000000a 	andeq	r0, r0, sl
200035a0:	00000004 	andeq	r0, r0, r4
200035a4:	00000004 	andeq	r0, r0, r4
200035a8:	03000200 	movweq	r0, #512	; 0x200
200035ac:	01010001 	tsteq	r1, r1
200035b0:	00020301 	andeq	r0, r2, r1, lsl #6
200035b4:	03020102 	movweq	r0, #8450	; 0x2102
200035b8:	03030203 	movweq	r0, #12803	; 0x3203
	...

200035c8 <snakebody_geometry>:
200035c8:	00000010 	andeq	r0, r0, r0, lsl r0
200035cc:	00000004 	andeq	r0, r0, r4
200035d0:	00000004 	andeq	r0, r0, r4
200035d4:	01000000 	mrseq	r0, (UNDEF: 0)
200035d8:	03000200 	movweq	r0, #512	; 0x200
200035dc:	01010001 	tsteq	r1, r1
200035e0:	03010201 	movweq	r0, #4609	; 0x1201
200035e4:	01020002 	tsteq	r2, r2
200035e8:	03020202 	movweq	r0, #8706	; 0x2202
200035ec:	01030003 	tsteq	r3, r3
200035f0:	03030203 	movweq	r0, #12803	; 0x3203

200035f4 <food_geometry>:
200035f4:	0000000c 	andeq	r0, r0, ip
200035f8:	00000004 	andeq	r0, r0, r4
200035fc:	00000004 	andeq	r0, r0, r4
20003600:	01000000 	mrseq	r0, (UNDEF: 0)
20003604:	03000200 	movweq	r0, #512	; 0x200
20003608:	03010001 	movweq	r0, #4097	; 0x1001
2000360c:	03020002 	movweq	r0, #8194	; 0x2002
20003610:	01030003 	tsteq	r3, r3
20003614:	03030203 	movweq	r0, #12803	; 0x3203
	...

20003620 <food_obj>:
20003620:	200035f4 	strdcs	r3, [r0], -r4
	...
2000362c:	00000001 	andeq	r0, r0, r1
20003630:	00000001 	andeq	r0, r0, r1
20003634:	20000031 	andcs	r0, r0, r1, lsr r0
20003638:	20000093 	mulcs	r0, r3, r0
2000363c:	200000f5 	strdcs	r0, [r0], -r5
20003640:	20000011 	andcs	r0, r0, r1, lsl r0

20003644 <rear>:
20003644:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20003648:	20000778 	andcs	r0, r0, r8, ror r7
2000364c:	20000778 	andcs	r0, r0, r8, ror r7
20003650:	2000073e 	andcs	r0, r0, lr, lsr r7
20003654:	20000778 	andcs	r0, r0, r8, ror r7
20003658:	20000730 	andcs	r0, r0, r0, lsr r7
2000365c:	20000778 	andcs	r0, r0, r8, ror r7
20003660:	20000722 	andcs	r0, r0, r2, lsr #14
20003664:	20000778 	andcs	r0, r0, r8, ror r7
20003668:	2000074c 	andcs	r0, r0, ip, asr #14
2000366c:	20000778 	andcs	r0, r0, r8, ror r7
20003670:	2000075a 	andcs	r0, r0, sl, asr r7
20003674:	20000778 	andcs	r0, r0, r8, ror r7
20003678:	20000778 	andcs	r0, r0, r8, ror r7
2000367c:	2000076c 	andcs	r0, r0, ip, ror #14
20003680:	774f5b06 	strbvc	r5, [pc, -r6, lsl #22]
20003684:	7c7d6d66 	ldclvc	13, cr6, [sp], #-408	; 0xfffffe68
20003688:	396f7f07 	stmdbcc	pc!, {r0, r1, r2, r8, r9, sl, fp, ip, sp, lr}^	; <UNPREDICTABLE>
2000368c:	bf713f79 	svclt	0x00713f79
20003690:	0a030201 	beq	200c3e9c <rear+0xc0858>
20003694:	0b060504 	bleq	20184aac <rear+0x181468>
20003698:	0c090807 	stceq	8, cr0, [r9], {7}
2000369c:	0d0f000e 	stceq	0, cr0, [pc, #-56]	; 2000366c <rear+0x28>

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	00000750 	andeq	r0, r0, r0, asr r7
       4:	00000004 	andeq	r0, r0, r4
       8:	01040000 	mrseq	r0, (UNDEF: 4)
       c:	0000017e 	andeq	r0, r0, lr, ror r1
      10:	0002d40c 	andeq	sp, r2, ip, lsl #8
      14:	0000c700 	andeq	ip, r0, r0, lsl #14
	...
      24:	08010200 	stmdaeq	r1, {r9}
      28:	000000a5 	andeq	r0, r0, r5, lsr #1
      2c:	00004903 	andeq	r4, r0, r3, lsl #18
      30:	00003d00 	andeq	r3, r0, r0, lsl #26
      34:	00420400 	subeq	r0, r2, r0, lsl #8
      38:	03ff0000 	mvnseq	r0, #0
      3c:	002c0500 	eoreq	r0, ip, r0, lsl #10
      40:	04020000 	streq	r0, [r2], #-0
      44:	00066b07 	andeq	r6, r6, r7, lsl #22
      48:	00420500 	subeq	r0, r2, r0, lsl #10
      4c:	2a060000 	bcs	180054 <startup-0x1fe7ffac>
      50:	03000002 	movweq	r0, #2
      54:	003d1e0f 	eorseq	r1, sp, pc, lsl #28
      58:	03050000 	movweq	r0, #20480	; 0x5000
      5c:	2000136c 	andcs	r1, r0, ip, ror #6
      60:	00009107 	andeq	r9, r0, r7, lsl #2
      64:	01020200 	mrseq	r0, R10_usr
      68:	00008410 	andeq	r8, r0, r0, lsl r4
      6c:	00780800 	rsbseq	r0, r8, r0, lsl #16
      70:	25130202 	ldrcs	r0, [r3, #-514]	; 0xfffffdfe
      74:	00000000 	andeq	r0, r0, r0
      78:	02007908 	andeq	r7, r0, #8, 18	; 0x20000
      7c:	00251303 	eoreq	r1, r5, r3, lsl #6
      80:	00010000 	andeq	r0, r1, r0
      84:	00009809 	andeq	r9, r0, r9, lsl #16
      88:	02040200 	andeq	r0, r4, #0, 4
      8c:	00000060 	andeq	r0, r0, r0, rrx
      90:	00016807 	andeq	r6, r1, r7, lsl #16
      94:	08022c00 	stmdaeq	r2, {sl, fp, sp}
      98:	0000d110 	andeq	sp, r0, r0, lsl r1
      9c:	02a30a00 	adceq	r0, r3, #0, 20
      a0:	09020000 	stmdbeq	r2, {}	; <UNPREDICTABLE>
      a4:	0000d109 	andeq	sp, r0, r9, lsl #2
      a8:	720a0000 	andvc	r0, sl, #0
      ac:	02000001 	andeq	r0, r0, #1
      b0:	00d1090a 	sbcseq	r0, r1, sl, lsl #18
      b4:	0a040000 	beq	1000bc <startup-0x1fefff44>
      b8:	00000178 	andeq	r0, r0, r8, ror r1
      bc:	d1090b02 	tstle	r9, r2, lsl #22
      c0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
      c4:	00787008 	rsbseq	r7, r8, r8
      c8:	dd0b0c02 	stcle	12, cr0, [fp, #-8]
      cc:	0c000000 	stceq	0, cr0, [r0], {-0}
      d0:	05040b00 	streq	r0, [r4, #-2816]	; 0xfffff500
      d4:	00746e69 	rsbseq	r6, r4, r9, ror #28
      d8:	0000d105 	andeq	sp, r0, r5, lsl #2
      dc:	00840300 	addeq	r0, r4, r0, lsl #6
      e0:	00ed0000 	rsceq	r0, sp, r0
      e4:	420c0000 	andmi	r0, ip, #0
      e8:	0f000000 	svceq	0x00000000
      ec:	00010900 	andeq	r0, r1, r0, lsl #18
      f0:	0d020000 	stceq	0, cr0, [r2, #-0]
      f4:	00009003 	andeq	r9, r0, r3
      f8:	00000900 	andeq	r0, r0, r0, lsl #18
      fc:	0d020000 	stceq	0, cr0, [r2, #-0]
     100:	0001050e 	andeq	r0, r1, lr, lsl #10
     104:	90040d00 	andls	r0, r4, r0, lsl #26
     108:	07000000 	streq	r0, [r0, -r0]
     10c:	00000285 	andeq	r0, r0, r5, lsl #5
     110:	100f0224 	andne	r0, pc, r4, lsr #4
     114:	0000018e 	andeq	r0, r0, lr, lsl #3
     118:	6f656708 	svcvs	0x00656708
     11c:	0f100200 	svceq	0x00100200
     120:	000000f9 	strdeq	r0, [r0], -r9
     124:	00650a00 	rsbeq	r0, r5, r0, lsl #20
     128:	11020000 	mrsne	r0, (UNDEF: 2)
     12c:	0000d109 	andeq	sp, r0, r9, lsl #2
     130:	6a0a0400 	bvs	281138 <startup-0x1fd7eec8>
     134:	02000000 	andeq	r0, r0, #0
     138:	00d10e11 	sbcseq	r0, r1, r1, lsl lr
     13c:	0a080000 	beq	200144 <startup-0x1fdffebc>
     140:	000000bd 	strheq	r0, [r0], -sp
     144:	d1091202 	tstle	r9, r2, lsl #4
     148:	0c000000 	stceq	0, cr0, [r0], {-0}
     14c:	0000c20a 	andeq	ip, r0, sl, lsl #4
     150:	0e120200 	cdpeq	2, 1, cr0, cr2, cr0, {0}
     154:	000000d1 	ldrdeq	r0, [r0], -r1
     158:	020b0a10 	andeq	r0, fp, #16, 20	; 0x10000
     15c:	13020000 	movwne	r0, #8192	; 0x2000
     160:	00019f0d 	andeq	r9, r1, sp, lsl #30
     164:	740a1400 	strvc	r1, [sl], #-1024	; 0xfffffc00
     168:	02000005 	andeq	r0, r0, #5
     16c:	019f0d14 	orrseq	r0, pc, r4, lsl sp	; <UNPREDICTABLE>
     170:	0a180000 	beq	600178 <startup-0x1f9ffe88>
     174:	00000683 	andeq	r0, r0, r3, lsl #13
     178:	9f0d1502 	svcls	0x000d1502
     17c:	1c000001 	stcne	0, cr0, [r0], {1}
     180:	0000b30a 	andeq	fp, r0, sl, lsl #6
     184:	0d160200 	lfmeq	f0, 4, [r6, #-0]
     188:	000001ba 			; <UNDEFINED> instruction: 0x000001ba
     18c:	990e0020 	stmdbls	lr, {r5}
     190:	0f000001 	svceq	0x00000001
     194:	00000199 	muleq	r0, r9, r1
     198:	0b040d00 	bleq	1035a0 <startup-0x1fefca60>
     19c:	0d000001 	stceq	0, cr0, [r0, #-4]
     1a0:	00018e04 	andeq	r8, r1, r4, lsl #28
     1a4:	01ba0e00 			; <UNDEFINED> instruction: 0x01ba0e00
     1a8:	990f0000 	stmdbls	pc, {}	; <UNPREDICTABLE>
     1ac:	0f000001 	svceq	0x00000001
     1b0:	000000d1 	ldrdeq	r0, [r0], -r1
     1b4:	0000d10f 	andeq	sp, r0, pc, lsl #2
     1b8:	040d0000 	streq	r0, [sp], #-0
     1bc:	000001a5 	andeq	r0, r0, r5, lsr #3
     1c0:	0002cd09 	andeq	ip, r2, r9, lsl #26
     1c4:	03170200 	tsteq	r7, #0, 4
     1c8:	0000010b 	andeq	r0, r0, fp, lsl #2
     1cc:	0002cc09 	andeq	ip, r2, r9, lsl #24
     1d0:	0c170200 	lfmeq	f0, 4, [r7], {-0}
     1d4:	00000199 	muleq	r0, r9, r1
     1d8:	19020810 	stmdbne	r2, {r4, fp}
     1dc:	00020909 	andeq	r0, r2, r9, lsl #18
     1e0:	02240a00 	eoreq	r0, r4, #0, 20
     1e4:	1a020000 	bne	801ec <startup-0x1ff7fe14>
     1e8:	00002513 	andeq	r2, r0, r3, lsl r5
     1ec:	dd0a0000 	stcle	0, cr0, [sl, #-0]
     1f0:	02000000 	andeq	r0, r0, #0
     1f4:	0025131b 	eoreq	r1, r5, fp, lsl r3
     1f8:	0a010000 	beq	40200 <startup-0x1ffbfe00>
     1fc:	000004b7 			; <UNDEFINED> instruction: 0x000004b7
     200:	09141c02 	ldmdbeq	r4, {r1, sl, fp, ip}
     204:	04000002 	streq	r0, [r0], #-2
     208:	25040d00 	strcs	r0, [r4, #-3328]	; 0xfffff300
     20c:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
     210:	00000204 	andeq	r0, r0, r4, lsl #4
     214:	d8021d02 	stmdale	r2, {r1, r8, sl, fp, ip}
     218:	03000001 	movweq	r0, #1
     21c:	00000025 	andeq	r0, r0, r5, lsr #32
     220:	0000022b 	andeq	r0, r0, fp, lsr #4
     224:	0000420c 	andeq	r4, r0, ip, lsl #4
     228:	06000800 	streq	r0, [r0], -r0, lsl #16
     22c:	0000007b 	andeq	r0, r0, fp, ror r0
     230:	1b160304 	blne	580e48 <startup-0x1fa7f1b8>
     234:	05000002 	streq	r0, [r0, #-2]
     238:	00350c03 	eorseq	r0, r5, r3, lsl #24
     23c:	02a60620 	adceq	r0, r6, #32, 12	; 0x2000000
     240:	17010000 	strne	r0, [r1, -r0]
     244:	0000d815 	andeq	sp, r0, r5, lsl r8
     248:	6c030500 	cfstr32vs	mvfx0, [r3], {-0}
     24c:	06200023 	strteq	r0, [r0], -r3, lsr #32
     250:	00000012 	andeq	r0, r0, r2, lsl r0
     254:	d81d1701 	ldmdale	sp, {r0, r8, r9, sl, ip}
     258:	05000000 	streq	r0, [r0, #-0]
     25c:	00237003 	eoreq	r7, r3, r3
     260:	001c1120 	andseq	r1, ip, r0, lsr #2
     264:	51010000 	mrspl	r0, (UNDEF: 1)
     268:	0000ed0a 	andeq	lr, r0, sl, lsl #26
     26c:	18030500 	stmdane	r3, {r8, sl}
     270:	11200035 			; <UNDEFINED> instruction: 0x11200035
     274:	000000f9 	strdeq	r0, [r0], -r9
     278:	ed0a5c01 	stc	12, cr5, [sl, #-4]
     27c:	05000000 	streq	r0, [r0, #-0]
     280:	00354403 	eorseq	r4, r5, r3, lsl #8
     284:	025f1120 	subseq	r1, pc, #32, 2
     288:	67010000 	strvs	r0, [r1, -r0]
     28c:	0000ed0a 	andeq	lr, r0, sl, lsl #26
     290:	70030500 	andvc	r0, r3, r0, lsl #10
     294:	11200035 			; <UNDEFINED> instruction: 0x11200035
     298:	0000004f 	andeq	r0, r0, pc, asr #32
     29c:	ed0a7201 	sfm	f7, 4, [sl, #-4]
     2a0:	05000000 	streq	r0, [r0, #-0]
     2a4:	00359c03 	eorseq	r9, r5, r3, lsl #24
     2a8:	011f1120 	tsteq	pc, r0, lsr #2
     2ac:	7f010000 	svcvc	0x00010000
     2b0:	0000ed0a 	andeq	lr, r0, sl, lsl #26
     2b4:	c8030500 	stmdagt	r3, {r8, sl}
     2b8:	11200035 			; <UNDEFINED> instruction: 0x11200035
     2bc:	00000132 	andeq	r0, r0, r2, lsr r1
     2c0:	ed0a8a01 	vstr	s16, [sl, #-4]
     2c4:	05000000 	streq	r0, [r0, #-0]
     2c8:	0035f403 	eorseq	pc, r5, r3, lsl #8
     2cc:	02100620 	andseq	r0, r0, #32, 12	; 0x2000000
     2d0:	a1010000 	mrsge	r0, (UNDEF: 1)
     2d4:	0001c00f 	andeq	ip, r1, pc
     2d8:	20030500 	andcs	r0, r3, r0, lsl #10
     2dc:	12200036 	eorne	r0, r0, #54	; 0x36
     2e0:	00000140 	andeq	r0, r0, r0, asr #2
     2e4:	06013a01 	streq	r3, [r1], -r1, lsl #20
     2e8:	20000688 	andcs	r0, r0, r8, lsl #13
     2ec:	00000130 	andeq	r0, r0, r0, lsr r1
     2f0:	036a9c01 	cmneq	sl, #256	; 0x100
     2f4:	fa130000 	blx	4c02fc <startup-0x1fb3fd04>
     2f8:	01000001 	tsteq	r0, r1
     2fc:	d10f013a 	tstle	pc, sl, lsr r1	; <UNPREDICTABLE>
     300:	03000000 	movweq	r0, #0
     304:	1347bc91 	movtne	fp, #31889	; 0x7c91
     308:	00000040 	andeq	r0, r0, r0, asr #32
     30c:	1c013a01 			; <UNDEFINED> instruction: 0x1c013a01
     310:	0000036a 	andeq	r0, r0, sl, ror #6
     314:	47b89103 	ldrmi	r9, [r8, r3, lsl #2]!
     318:	00029e14 	andeq	r9, r2, r4, lsl lr
     31c:	013b0100 	teqeq	fp, r0, lsl #2
     320:	0000d109 	andeq	sp, r0, r9, lsl #2
     324:	6c910200 	lfmvs	f0, 4, [r1], {0}
     328:	00014f14 	andeq	r4, r1, r4, lsl pc
     32c:	013b0100 	teqeq	fp, r0, lsl #2
     330:	0000d113 	andeq	sp, r0, r3, lsl r1
     334:	68910200 	ldmvs	r1, {r9}
     338:	00021914 	andeq	r1, r2, r4, lsl r9
     33c:	013c0100 	teqeq	ip, r0, lsl #2
     340:	0003760a 	andeq	r7, r3, sl, lsl #12
     344:	63910200 	orrsvs	r0, r1, #0, 4
     348:	00004a14 	andeq	r4, r0, r4, lsl sl
     34c:	013e0100 	teqeq	lr, r0, lsl #2
     350:	0001cc0d 	andeq	ip, r1, sp, lsl #24
     354:	64910200 	ldrvs	r0, [r1], #512	; 0x200
     358:	00008b14 	andeq	r8, r0, r4, lsl fp
     35c:	013f0100 	teqeq	pc, r0, lsl #2
     360:	00037d0c 	andeq	r7, r3, ip, lsl #26
     364:	c0910300 	addsgt	r0, r1, r0, lsl #6
     368:	040d0047 	streq	r0, [sp], #-71	; 0xffffffb9
     36c:	00000370 	andeq	r0, r0, r0, ror r3
     370:	0376040d 	cmneq	r6, #218103808	; 0xd000000
     374:	01020000 	mrseq	r0, (UNDEF: 2)
     378:	0000ae08 	andeq	sl, r0, r8, lsl #28
     37c:	01c00300 	biceq	r0, r0, r0, lsl #6
     380:	038d0000 	orreq	r0, sp, #0
     384:	420c0000 	andmi	r0, ip, #0
     388:	c7000000 	strgt	r0, [r0, -r0]
     38c:	02961500 	addseq	r1, r6, #0, 10
     390:	33010000 	movwcc	r0, #4096	; 0x1000
     394:	06600601 	strbteq	r0, [r0], -r1, lsl #12
     398:	00282000 	eoreq	r2, r8, r0
     39c:	9c010000 	stcls	0, cr0, [r1], {-0}
     3a0:	00004516 	andeq	r4, r0, r6, lsl r5
     3a4:	01290100 			; <UNDEFINED> instruction: 0x01290100
     3a8:	00061006 	andeq	r1, r6, r6
     3ac:	00005020 	andeq	r5, r0, r0, lsr #32
     3b0:	c69c0100 	ldrgt	r0, [ip], r0, lsl #2
     3b4:	17000003 	strne	r0, [r0, -r3]
     3b8:	29010066 	stmdbcs	r1, {r1, r2, r5, r6}
     3bc:	01cc1801 	biceq	r1, ip, r1, lsl #16
     3c0:	91020000 	mrsls	r0, (UNDEF: 2)
     3c4:	86160074 			; <UNDEFINED> instruction: 0x86160074
     3c8:	01000000 	mrseq	r0, (UNDEF: 0)
     3cc:	e8060115 	stmda	r6, {r0, r2, r4, r8}
     3d0:	28200004 	stmdacs	r0!, {r2}
     3d4:	01000001 	tsteq	r0, r1
     3d8:	0004129c 	muleq	r4, ip, r2
     3dc:	00731700 	rsbseq	r1, r3, r0, lsl #14
     3e0:	19011501 	stmdbne	r1, {r0, r8, sl, ip}
     3e4:	000001cc 	andeq	r0, r0, ip, asr #3
     3e8:	186c9102 	stmdane	ip!, {r1, r8, ip, pc}^
     3ec:	1601006a 	strne	r0, [r1], -sl, rrx
     3f0:	00d10901 	sbcseq	r0, r1, r1, lsl #18
     3f4:	91020000 	mrsls	r0, (UNDEF: 2)
     3f8:	04f41974 	ldrbteq	r1, [r4], #2420	; 0x974
     3fc:	00f62000 	rscseq	r2, r6, r0
     400:	69180000 	ldmdbvs	r8, {}	; <UNPREDICTABLE>
     404:	01170100 	tsteq	r7, r0, lsl #2
     408:	0000d10e 	andeq	sp, r0, lr, lsl #2
     40c:	70910200 	addsvc	r0, r1, r0, lsl #4
     410:	5f1a0000 	svcpl	0x001a0000
     414:	01000001 	tsteq	r0, r1
     418:	88060103 	stmdahi	r6, {r0, r1, r8}
     41c:	60200004 	eorvs	r0, r0, r4
     420:	01000000 	mrseq	r0, (UNDEF: 0)
     424:	02b91b9c 	adcseq	r1, r9, #156, 22	; 0x27000
     428:	e3010000 	movw	r0, #4096	; 0x1000
     42c:	0003b406 	andeq	fp, r3, r6, lsl #8
     430:	0000d420 	andeq	sp, r0, r0, lsr #8
     434:	769c0100 	ldrvc	r0, [ip], r0, lsl #2
     438:	1c000004 	stcne	0, cr0, [r0], {4}
     43c:	00726964 	rsbseq	r6, r2, r4, ror #18
     440:	d10fe301 	tstle	pc, r1, lsl #6
     444:	02000000 	andeq	r0, r0, #0
     448:	731c6c91 	tstvc	ip, #37120	; 0x9100
     44c:	1ce30100 	stfnee	f0, [r3]
     450:	000001cc 	andeq	r0, r0, ip, asr #3
     454:	06689102 	strbteq	r9, [r8], -r2, lsl #2
     458:	00000074 	andeq	r0, r0, r4, ror r0
     45c:	d109e401 	tstle	r9, r1, lsl #8
     460:	02000000 	andeq	r0, r0, #0
     464:	9e067491 	mcrls	4, 0, r7, cr6, cr1, {4}
     468:	01000000 	mrseq	r0, (UNDEF: 0)
     46c:	00d115e4 	sbcseq	r1, r1, r4, ror #11
     470:	91020000 	mrsls	r0, (UNDEF: 2)
     474:	771d0070 			; <UNDEFINED> instruction: 0x771d0070
     478:	01000002 	tsteq	r0, r2
     47c:	032406d5 			; <UNDEFINED> instruction: 0x032406d5
     480:	00902000 	addseq	r2, r0, r0
     484:	9c010000 	stcls	0, cr0, [r1], {-0}
     488:	000004e8 	andeq	r0, r0, r8, ror #9
     48c:	0100731c 	tsteq	r0, ip, lsl r3
     490:	01cc1cd5 	ldrdeq	r1, [ip, #197]	; 0xc5
     494:	91020000 	mrsls	r0, (UNDEF: 2)
     498:	00740664 	rsbseq	r0, r4, r4, ror #12
     49c:	d6010000 	strle	r0, [r1], -r0
     4a0:	0000d109 	andeq	sp, r0, r9, lsl #2
     4a4:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     4a8:	00009e06 	andeq	r9, r0, r6, lsl #28
     4ac:	09d70100 	ldmibeq	r7, {r8}^
     4b0:	000000d1 	ldrdeq	r0, [r0], -r1
     4b4:	19709102 	ldmdbne	r0!, {r1, r8, ip, pc}^
     4b8:	20000338 	andcs	r0, r0, r8, lsr r3
     4bc:	0000006e 	andeq	r0, r0, lr, rrx
     4c0:	0100691e 	tsteq	r0, lr, lsl r9
     4c4:	00d10dd8 	ldrsbeq	r0, [r1], #216	; 0xd8
     4c8:	91020000 	mrsls	r0, (UNDEF: 2)
     4cc:	033e196c 	teqeq	lr, #108, 18	; 0x1b0000
     4d0:	00582000 	subseq	r2, r8, r0
     4d4:	57060000 	strpl	r0, [r6, -r0]
     4d8:	01000001 	tsteq	r0, r1
     4dc:	00d10dd9 	ldrsbeq	r0, [r1], #217	; 0xd9
     4e0:	91020000 	mrsls	r0, (UNDEF: 2)
     4e4:	00000068 	andeq	r0, r0, r8, rrx
     4e8:	0002551b 	andeq	r5, r2, fp, lsl r5
     4ec:	06ce0100 	strbeq	r0, [lr], r0, lsl #2
     4f0:	200002f8 	strdcs	r0, [r0], -r8
     4f4:	0000002c 	andeq	r0, r0, ip, lsr #32
     4f8:	052a9c01 	streq	r9, [sl, #-3073]!	; 0xfffff3ff
     4fc:	661c0000 	ldrvs	r0, [ip], -r0
     500:	18ce0100 	stmiane	lr, {r8}^
     504:	000001cc 	andeq	r0, r0, ip, asr #3
     508:	066c9102 	strbteq	r9, [ip], -r2, lsl #2
     50c:	000000e4 	andeq	r0, r0, r4, ror #1
     510:	d109cf01 	tstle	r9, r1, lsl #30
     514:	02000000 	andeq	r0, r0, #0
     518:	45067491 	strmi	r7, [r6, #-1169]	; 0xfffffb6f
     51c:	01000001 	tsteq	r0, r1
     520:	00d109d0 	ldrsbeq	r0, [r1], #144	; 0x90
     524:	91020000 	mrsls	r0, (UNDEF: 2)
     528:	ee1b0070 	mrc	0, 0, r0, cr11, cr0, {3}
     52c:	01000000 	mrseq	r0, (UNDEF: 0)
     530:	028e06c6 	addeq	r0, lr, #207618048	; 0xc600000
     534:	006a2000 	rsbeq	r2, sl, r0
     538:	9c010000 	stcls	0, cr0, [r1], {-0}
     53c:	00000581 	andeq	r0, r0, r1, lsl #11
     540:	0100731c 	tsteq	r0, ip, lsl r3
     544:	01cc19c6 	biceq	r1, ip, r6, asr #19
     548:	91020000 	mrsls	r0, (UNDEF: 2)
     54c:	02a61f6c 	adceq	r1, r6, #108, 30	; 0x1b0
     550:	00082000 	andeq	r2, r8, r0
     554:	05690000 	strbeq	r0, [r9, #-0]!
     558:	77200000 	strvc	r0, [r0, -r0]!
     55c:	01000002 	tsteq	r0, r2
     560:	00d10dc8 	sbcseq	r0, r1, r8, asr #27
     564:	00210000 	eoreq	r0, r1, r0
     568:	02ae1900 	adceq	r1, lr, #0, 18
     56c:	003c2000 	eorseq	r2, ip, r0
     570:	691e0000 	ldmdbvs	lr, {}	; <UNPREDICTABLE>
     574:	0ec90100 	poleqe	f0, f1, f0
     578:	000000d1 	ldrdeq	r0, [r0], -r1
     57c:	00749102 	rsbseq	r9, r4, r2, lsl #2
     580:	00341b00 	eorseq	r1, r4, r0, lsl #22
     584:	b2010000 	andlt	r0, r1, #0
     588:	0001cc06 	andeq	ip, r1, r6, lsl #24
     58c:	0000c220 	andeq	ip, r0, r0, lsr #4
     590:	0e9c0100 	fmleqe	f0, f4, f0
     594:	1c000006 	stcne	0, cr0, [r0], {6}
     598:	b2010073 	andlt	r0, r1, #115	; 0x73
     59c:	00060e1a 	andeq	r0, r6, sl, lsl lr
     5a0:	5c910200 	lfmpl	f0, 4, [r1], {0}
     5a4:	0100781c 	tsteq	r0, ip, lsl r8
     5a8:	00d121b2 	ldrheq	r2, [r1], #18
     5ac:	91020000 	mrsls	r0, (UNDEF: 2)
     5b0:	00791c58 	rsbseq	r1, r9, r8, asr ip
     5b4:	d128b201 			; <UNDEFINED> instruction: 0xd128b201
     5b8:	02000000 	andeq	r0, r0, #0
     5bc:	691e5491 	ldmdbvs	lr, {r0, r4, r7, sl, ip, lr}
     5c0:	09b30100 	ldmibeq	r3!, {r8}
     5c4:	000000d1 	ldrdeq	r0, [r0], -r1
     5c8:	1e749102 	expnes	f1, f2
     5cc:	b301006a 	movwlt	r0, #4202	; 0x106a
     5d0:	0000d10b 	andeq	sp, r0, fp, lsl #2
     5d4:	70910200 	addsvc	r0, r1, r0, lsl #4
     5d8:	01006b1e 	tsteq	r0, lr, lsl fp
     5dc:	00d10db3 	ldrheq	r0, [r1], #211	; 0xd3
     5e0:	91020000 	mrsls	r0, (UNDEF: 2)
     5e4:	0246066c 	subeq	r0, r6, #108, 12	; 0x6c00000
     5e8:	b3010000 	movwlt	r0, #4096	; 0x1000
     5ec:	0000d110 	andeq	sp, r0, r0, lsl r1
     5f0:	68910200 	ldmvs	r1, {r9}
     5f4:	00020a19 	andeq	r0, r2, r9, lsl sl
     5f8:	00005a20 	andeq	r5, r0, r0, lsr #20
     5fc:	006f0600 	rsbeq	r0, pc, r0, lsl #12
     600:	bd010000 	stclt	0, cr0, [r1, #-0]
     604:	0000251b 	andeq	r2, r0, fp, lsl r5
     608:	67910200 	ldrvs	r0, [r1, r0, lsl #4]
     60c:	040d0000 	streq	r0, [sp], #-0
     610:	0000020f 	andeq	r0, r0, pc, lsl #4
     614:	0001ff22 	andeq	pc, r1, r2, lsr #30
     618:	0dac0100 	stfeqs	f0, [ip]
     61c:	200001a0 	andcs	r0, r0, r0, lsr #3
     620:	0000002c 	andeq	r0, r0, ip, lsr #32
     624:	06659c01 	strbteq	r9, [r5], -r1, lsl #24
     628:	731c0000 	tstvc	ip, #0
     62c:	21ac0100 			; <UNDEFINED> instruction: 0x21ac0100
     630:	0000060e 	andeq	r0, r0, lr, lsl #12
     634:	23749102 	cmncs	r4, #-2147483648	; 0x80000000
     638:	000004b7 			; <UNDEFINED> instruction: 0x000004b7
     63c:	0933ac01 	ldmdbeq	r3!, {r0, sl, fp, sp, pc}
     640:	02000002 	andeq	r0, r0, #2
     644:	24237091 	strtcs	r7, [r3], #-145	; 0xffffff6f
     648:	01000002 	tsteq	r0, r2
     64c:	00d13dac 	sbcseq	r3, r1, ip, lsr #27
     650:	91020000 	mrsls	r0, (UNDEF: 2)
     654:	00dd236c 	sbcseq	r2, sp, ip, ror #6
     658:	ac010000 	stcge	0, cr0, [r1], {-0}
     65c:	0000d148 	andeq	sp, r0, r8, asr #2
     660:	68910200 	ldmvs	r1, {r9}
     664:	02ad1b00 	adceq	r1, sp, #0, 22
     668:	33010000 	movwcc	r0, #4096	; 0x1000
     66c:	0000f406 	andeq	pc, r0, r6, lsl #8
     670:	0000ac20 	andeq	sl, r0, r0, lsr #24
     674:	899c0100 	ldmibhi	ip, {r8}
     678:	1c000006 	stcne	0, cr0, [r0], {6}
     67c:	3301006f 	movwcc	r0, #4207	; 0x106f
     680:	0001cc1a 	andeq	ip, r1, sl, lsl ip
     684:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     688:	01121b00 	tsteq	r2, r0, lsl #22
     68c:	2d010000 	stccs	0, cr0, [r1, #-0]
     690:	00009206 	andeq	r9, r0, r6, lsl #4
     694:	00006220 	andeq	r6, r0, r0, lsr #4
     698:	c49c0100 	ldrgt	r0, [ip], #256	; 0x100
     69c:	1c000006 	stcne	0, cr0, [r0], {6}
     6a0:	2d01006f 	stccs	0, cr0, [r1, #-444]	; 0xfffffe44
     6a4:	0001cc1b 	andeq	ip, r1, fp, lsl ip
     6a8:	6c910200 	lfmvs	f0, 4, [r1], {0}
     6ac:	00009a19 	andeq	r9, r0, r9, lsl sl
     6b0:	00005020 	andeq	r5, r0, r0, lsr #32
     6b4:	00691e00 	rsbeq	r1, r9, r0, lsl #28
     6b8:	d10e2e01 	tstle	lr, r1, lsl #28
     6bc:	02000000 	andeq	r0, r0, #0
     6c0:	00007491 	muleq	r0, r1, r4
     6c4:	00028a1b 	andeq	r8, r2, fp, lsl sl
     6c8:	06270100 	strteq	r0, [r7], -r0, lsl #2
     6cc:	20000030 	andcs	r0, r0, r0, lsr r0
     6d0:	00000062 	andeq	r0, r0, r2, rrx
     6d4:	06ff9c01 	ldrbteq	r9, [pc], r1, lsl #24
     6d8:	6f1c0000 	svcvs	0x001c0000
     6dc:	1a270100 	bne	9c0ae4 <startup-0x1f63f51c>
     6e0:	000001cc 	andeq	r0, r0, ip, asr #3
     6e4:	196c9102 	stmdbne	ip!, {r1, r8, ip, pc}^
     6e8:	20000038 	andcs	r0, r0, r8, lsr r0
     6ec:	00000050 	andeq	r0, r0, r0, asr r0
     6f0:	0100691e 	tsteq	r0, lr, lsl r9
     6f4:	00d10e28 	sbcseq	r0, r1, r8, lsr #28
     6f8:	91020000 	mrsls	r0, (UNDEF: 2)
     6fc:	1d000074 	stcne	0, cr0, [r0, #-464]	; 0xfffffe30
     700:	00000235 	andeq	r0, r0, r5, lsr r2
     704:	10062201 	andne	r2, r6, r1, lsl #4
     708:	20200000 	eorcs	r0, r0, r0
     70c:	01000000 	mrseq	r0, (UNDEF: 0)
     710:	0007419c 	muleq	r7, ip, r1
     714:	006f1c00 	rsbeq	r1, pc, r0, lsl #24
     718:	cc1f2201 	lfmgt	f2, 4, [pc], {1}
     71c:	02000001 	andeq	r0, r0, #1
     720:	be237491 	mcrlt	4, 1, r7, cr3, cr1, {4}
     724:	01000002 	tsteq	r0, r2
     728:	00d12622 	sbcseq	r2, r1, r2, lsr #12
     72c:	91020000 	mrsls	r0, (UNDEF: 2)
     730:	02c52370 	sbceq	r2, r5, #112, 6	; 0xc0000001
     734:	22010000 	andcs	r0, r1, #0
     738:	0000d132 	andeq	sp, r0, r2, lsr r1
     73c:	6c910200 	lfmvs	f0, 4, [r1], {0}
     740:	000a2400 	andeq	r2, sl, r0, lsl #8
     744:	1a010000 	bne	4074c <startup-0x1ffbf8b4>
     748:	00000006 	andeq	r0, r0, r6
     74c:	00000c20 	andeq	r0, r0, r0, lsr #24
     750:	009c0100 	addseq	r0, ip, r0, lsl #2
     754:	000002c7 	andeq	r0, r0, r7, asr #5
     758:	02530004 	subseq	r0, r3, #4
     75c:	01040000 	mrseq	r0, (UNDEF: 4)
     760:	0000017e 	andeq	r0, r0, lr, ror r1
     764:	00032e0c 	andeq	r2, r3, ip, lsl #28
     768:	0000c700 	andeq	ip, r0, r0, lsl #14
     76c:	0007b800 	andeq	fp, r7, r0, lsl #16
     770:	0002e620 	andeq	lr, r2, r0, lsr #12
     774:	00053e00 	andeq	r3, r5, r0, lsl #28
     778:	08010200 	stmdaeq	r1, {r9}
     77c:	000000a5 	andeq	r0, r0, r5, lsr #1
     780:	00030003 	andeq	r0, r3, r3
     784:	066e0100 	strbteq	r0, [lr], -r0, lsl #2
     788:	20000a52 	andcs	r0, r0, r2, asr sl
     78c:	0000004c 	andeq	r0, r0, ip, asr #32
     790:	007a9c01 	rsbseq	r9, sl, r1, lsl #24
     794:	78040000 	stmdavc	r4, {}	; <UNPREDICTABLE>
     798:	176e0100 	strbne	r0, [lr, -r0, lsl #2]!
     79c:	0000007a 	andeq	r0, r0, sl, ror r0
     7a0:	046c9102 	strbteq	r9, [ip], #-258	; 0xfffffefe
     7a4:	6e010079 	mcrvs	0, 0, r0, cr1, cr9, {3}
     7a8:	00007a1e 	andeq	r7, r0, lr, lsl sl
     7ac:	68910200 	ldmvs	r1, {r9}
     7b0:	0003e405 	andeq	lr, r3, r5, lsl #8
     7b4:	136f0100 	cmnne	pc, #0, 2
     7b8:	00000025 	andeq	r0, r0, r5, lsr #32
     7bc:	06779102 	ldrbteq	r9, [r7], -r2, lsl #2
     7c0:	00000322 	andeq	r0, r0, r2, lsr #6
     7c4:	7a054d01 	bvc	153bd0 <startup-0x1feac430>
     7c8:	07000000 	streq	r0, [r0, -r0]
     7cc:	04080000 	streq	r0, [r8], #-0
     7d0:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
     7d4:	04270300 	strteq	r0, [r7], #-768	; 0xfffffd00
     7d8:	67010000 	strvs	r0, [r1, -r0]
     7dc:	000a2806 	andeq	r2, sl, r6, lsl #16
     7e0:	00002a20 	andeq	r2, r0, r0, lsr #20
     7e4:	b39c0100 	orrslt	r0, ip, #0, 2
     7e8:	04000000 	streq	r0, [r0], #-0
     7ec:	67010063 	strvs	r0, [r1, -r3, rrx]
     7f0:	00002525 	andeq	r2, r0, r5, lsr #10
     7f4:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
     7f8:	00032206 	andeq	r2, r3, r6, lsl #4
     7fc:	054d0100 	strbeq	r0, [sp, #-256]	; 0xffffff00
     800:	0000007a 	andeq	r0, r0, sl, ror r0
     804:	09000007 	stmdbeq	r0, {r0, r1, r2}
     808:	00000418 	andeq	r0, r0, r8, lsl r4
     80c:	fa066001 	blx	198818 <startup-0x1fe677e8>
     810:	2e200009 	cdpcs	0, 2, cr0, cr0, cr9, {0}
     814:	01000000 	mrseq	r0, (UNDEF: 0)
     818:	0000d89c 	muleq	r0, ip, r8
     81c:	03220600 			; <UNDEFINED> instruction: 0x03220600
     820:	4d010000 	stcmi	0, cr0, [r1, #-0]
     824:	00007a05 	andeq	r7, r0, r5, lsl #20
     828:	00000700 	andeq	r0, r0, r0, lsl #14
     82c:	0003d409 	andeq	sp, r3, r9, lsl #8
     830:	06590100 	ldrbeq	r0, [r9], -r0, lsl #2
     834:	200009cc 	andcs	r0, r0, ip, asr #19
     838:	0000002e 	andeq	r0, r0, lr, lsr #32
     83c:	00fd9c01 	rscseq	r9, sp, r1, lsl #24
     840:	22060000 	andcs	r0, r6, #0
     844:	01000003 	tsteq	r0, r3
     848:	007a054d 	rsbseq	r0, sl, sp, asr #10
     84c:	00070000 	andeq	r0, r7, r0
     850:	03f40900 	mvnseq	r0, #0, 18
     854:	52010000 	andpl	r0, r1, #0
     858:	00099e06 	andeq	r9, r9, r6, lsl #28
     85c:	00002e20 	andeq	r2, r0, r0, lsr #28
     860:	229c0100 	addscs	r0, ip, #0, 2
     864:	06000001 	streq	r0, [r0], -r1
     868:	00000322 	andeq	r0, r0, r2, lsr #6
     86c:	7a054d01 	bvc	153c78 <startup-0x1feac388>
     870:	07000000 	streq	r0, [r0, -r0]
     874:	7c090000 	stcvc	0, cr0, [r9], {-0}
     878:	01000003 	tsteq	r0, r3
     87c:	0970064b 	ldmdbeq	r0!, {r0, r1, r3, r6, r9, sl}^
     880:	002e2000 	eoreq	r2, lr, r0
     884:	9c010000 	stcls	0, cr0, [r1], {-0}
     888:	00000159 	andeq	r0, r0, r9, asr r1
     88c:	0003220a 	andeq	r2, r3, sl, lsl #4
     890:	054d0100 	strbeq	r0, [sp, #-256]	; 0xffffff00
     894:	0000007a 	andeq	r0, r0, sl, ror r0
     898:	0000014a 	andeq	r0, r0, sl, asr #2
     89c:	f4060007 	vst4.8	{d0-d3}, [r6], r7
     8a0:	01000002 	tsteq	r0, r2
     8a4:	007a054f 	rsbseq	r0, sl, pc, asr #10
     8a8:	00070000 	andeq	r0, r7, r0
     8ac:	03c40b00 	biceq	r0, r4, #0, 22
     8b0:	42010000 	andmi	r0, r1, #0
     8b4:	0000250f 	andeq	r2, r0, pc, lsl #10
     8b8:	00093400 	andeq	r3, r9, r0, lsl #8
     8bc:	00003c20 	andeq	r3, r0, r0, lsr #24
     8c0:	839c0100 	orrshi	r0, ip, #0, 2
     8c4:	05000001 	streq	r0, [r0, #-1]
     8c8:	000003ec 	andeq	r0, r0, ip, ror #7
     8cc:	830a4601 	movwhi	r4, #42497	; 0xa601
     8d0:	02000001 	andeq	r0, r0, #1
     8d4:	02006f91 	andeq	r6, r0, #580	; 0x244
     8d8:	00ae0801 	adceq	r0, lr, r1, lsl #16
     8dc:	6a0b0000 	bvs	2c08e4 <startup-0x1fd3f71c>
     8e0:	01000003 	tsteq	r0, r3
     8e4:	00250f39 	eoreq	r0, r5, r9, lsr pc
     8e8:	08f80000 	ldmeq	r8!, {}^	; <UNPREDICTABLE>
     8ec:	003c2000 	eorseq	r2, ip, r0
     8f0:	9c010000 	stcls	0, cr0, [r1], {-0}
     8f4:	000001b4 			; <UNDEFINED> instruction: 0x000001b4
     8f8:	00041005 	andeq	r1, r4, r5
     8fc:	0a3d0100 	beq	f40d04 <startup-0x1f0bf2fc>
     900:	00000183 	andeq	r0, r0, r3, lsl #3
     904:	006f9102 	rsbeq	r9, pc, r2, lsl #2
     908:	0003ae0b 	andeq	sl, r3, fp, lsl #28
     90c:	0f300100 	svceq	0x00300100
     910:	00000025 	andeq	r0, r0, r5, lsr #32
     914:	200008c4 	andcs	r0, r0, r4, asr #17
     918:	00000034 	andeq	r0, r0, r4, lsr r0
     91c:	01f09c01 	mvnseq	r9, r1, lsl #24
     920:	9b0a0000 	blls	280928 <startup-0x1fd7f6d8>
     924:	01000003 	tsteq	r0, r3
     928:	007a052c 	rsbseq	r0, sl, ip, lsr #10
     92c:	01e00000 	mvneq	r0, r0
     930:	00070000 	andeq	r0, r7, r0
     934:	0003a705 	andeq	sl, r3, r5, lsl #14
     938:	0a340100 	beq	d00d40 <startup-0x1f2ff2c0>
     93c:	00000183 	andeq	r0, r0, r3, lsl #3
     940:	00779102 	rsbseq	r9, r7, r2, lsl #2
     944:	00035303 	andeq	r5, r3, r3, lsl #6
     948:	06290100 	strteq	r0, [r9], -r0, lsl #2
     94c:	20000894 	mulcs	r0, r4, r8
     950:	00000030 	andeq	r0, r0, r0, lsr r0
     954:	02249c01 	eoreq	r9, r4, #256	; 0x100
     958:	6f0c0000 	svcvs	0x000c0000
     95c:	01000000 	mrseq	r0, (UNDEF: 0)
     960:	00252b29 	eoreq	r2, r5, r9, lsr #22
     964:	91020000 	mrsls	r0, (UNDEF: 2)
     968:	039b0677 	orrseq	r0, fp, #124780544	; 0x7700000
     96c:	2c010000 	stccs	0, cr0, [r1], {-0}
     970:	00007a05 	andeq	r7, r0, r5, lsl #20
     974:	00000700 	andeq	r0, r0, r0, lsl #14
     978:	00038a03 	andeq	r8, r3, r3, lsl #20
     97c:	06230100 	strteq	r0, [r3], -r0, lsl #2
     980:	2000086a 	andcs	r0, r0, sl, ror #16
     984:	0000002a 	andeq	r0, r0, sl, lsr #32
     988:	024a9c01 	subeq	r9, sl, #256	; 0x100
     98c:	b70c0000 	strlt	r0, [ip, -r0]
     990:	01000004 	tsteq	r0, r4
     994:	00252523 	eoreq	r2, r5, r3, lsr #10
     998:	91020000 	mrsls	r0, (UNDEF: 2)
     99c:	00030077 	andeq	r0, r3, r7, ror r0
     9a0:	01000004 	tsteq	r0, r4
     9a4:	0840061d 	stmdaeq	r0, {r0, r2, r3, r4, r9, sl}^
     9a8:	002a2000 	eoreq	r2, sl, r0
     9ac:	9c010000 	stcls	0, cr0, [r1], {-0}
     9b0:	00000270 	andeq	r0, r0, r0, ror r2
     9b4:	00048e0c 	andeq	r8, r4, ip, lsl #28
     9b8:	241d0100 	ldrcs	r0, [sp], #-256	; 0xffffff00
     9bc:	00000025 	andeq	r0, r0, r5, lsr #32
     9c0:	00779102 	rsbseq	r9, r7, r2, lsl #2
     9c4:	00030d0d 	andeq	r0, r3, sp, lsl #26
     9c8:	06180100 	ldreq	r0, [r8], -r0, lsl #2
     9cc:	20000804 	andcs	r0, r0, r4, lsl #16
     9d0:	0000003c 	andeq	r0, r0, ip, lsr r0
     9d4:	02949c01 	addseq	r9, r4, #256	; 0x100
     9d8:	78040000 	stmdavc	r4, {}	; <UNPREDICTABLE>
     9dc:	29180100 	ldmdbcs	r8, {r8}
     9e0:	00000025 	andeq	r0, r0, r5, lsr #32
     9e4:	00779102 	rsbseq	r9, r7, r2, lsl #2
     9e8:	0004380d 	andeq	r3, r4, sp, lsl #16
     9ec:	06130100 	ldreq	r0, [r3], -r0, lsl #2
     9f0:	200007d2 	ldrdcs	r0, [r0], -r2
     9f4:	00000032 	andeq	r0, r0, r2, lsr r0
     9f8:	02b89c01 	adcseq	r9, r8, #256	; 0x100
     9fc:	78040000 	stmdavc	r4, {}	; <UNPREDICTABLE>
     a00:	27130100 	ldrcs	r0, [r3, -r0, lsl #2]
     a04:	00000025 	andeq	r0, r0, r5, lsr #32
     a08:	00779102 	rsbseq	r9, r7, r2, lsl #2
     a0c:	00044b0e 	andeq	r4, r4, lr, lsl #22
     a10:	06040100 	streq	r0, [r4], -r0, lsl #2
     a14:	200007b8 			; <UNDEFINED> instruction: 0x200007b8
     a18:	0000001a 	andeq	r0, r0, sl, lsl r0
     a1c:	9e009c01 	cdpls	12, 0, cr9, cr0, cr1, {0}
     a20:	04000000 	streq	r0, [r0], #-0
     a24:	00036700 	andeq	r6, r3, r0, lsl #14
     a28:	7e010400 	cfcpysvc	mvf0, mvf1
     a2c:	0c000001 	stceq	0, cr0, [r0], {1}
     a30:	00000462 	andeq	r0, r0, r2, ror #8
     a34:	000000c7 	andeq	r0, r0, r7, asr #1
     a38:	20000aa0 	andcs	r0, r0, r0, lsr #21
     a3c:	00000062 	andeq	r0, r0, r2, rrx
     a40:	000006d9 	ldrdeq	r0, [r0], -r9
     a44:	a5080102 	strge	r0, [r8, #-258]	; 0xfffffefe
     a48:	03000000 	movweq	r0, #0
     a4c:	000002f4 	strdeq	r0, [r0], -r4
     a50:	c4062601 	strgt	r2, [r6], #-1537	; 0xfffff9ff
     a54:	3e20000a 	cdpcc	0, 2, cr0, cr0, cr10, {0}
     a58:	01000000 	mrseq	r0, (UNDEF: 0)
     a5c:	0000519c 	muleq	r0, ip, r1
     a60:	736d0400 	cmnvc	sp, #0, 8
     a64:	1f260100 	svcne	0x00260100
     a68:	00000051 	andeq	r0, r0, r1, asr r0
     a6c:	00749102 	rsbseq	r9, r4, r2, lsl #2
     a70:	6b070402 	blvs	1c1a80 <startup-0x1fe3e580>
     a74:	05000006 	streq	r0, [r0, #-6]
     a78:	00000322 	andeq	r0, r0, r2, lsr #6
     a7c:	b4061a01 	strlt	r1, [r6], #-2561	; 0xfffff5ff
     a80:	1020000a 	eorne	r0, r0, sl
     a84:	01000000 	mrseq	r0, (UNDEF: 0)
     a88:	00007d9c 	muleq	r0, ip, sp
     a8c:	73750400 	cmnvc	r5, #0, 8
     a90:	1f1a0100 	svcne	0x001a0100
     a94:	00000051 	andeq	r0, r0, r1, asr r0
     a98:	00749102 	rsbseq	r9, r4, r2, lsl #2
     a9c:	00045606 	andeq	r5, r4, r6, lsl #12
     aa0:	06120100 	ldreq	r0, [r2], -r0, lsl #2
     aa4:	20000aaa 	andcs	r0, r0, sl, lsr #21
     aa8:	0000000a 	andeq	r0, r0, sl
     aac:	9b069c01 	blls	1a7ab8 <startup-0x1fe58548>
     ab0:	01000003 	tsteq	r0, r3
     ab4:	0aa00605 	beq	fe8022d0 <rear+0xde7fec8c>
     ab8:	000a2000 	andeq	r2, sl, r0
     abc:	9c010000 	stcls	0, cr0, [r1], {-0}
     ac0:	00038800 	andeq	r8, r3, r0, lsl #16
     ac4:	e9000400 	stmdb	r0, {sl}
     ac8:	04000003 	streq	r0, [r0], #-3
     acc:	00017e01 	andeq	r7, r1, r1, lsl #28
     ad0:	057f0c00 	ldrbeq	r0, [pc, #-3072]!	; fffffed8 <rear+0xdfffc894>
     ad4:	00c70000 	sbceq	r0, r7, r0
     ad8:	0b040000 	bleq	100ae0 <startup-0x1feff520>
     adc:	05242000 	streq	r2, [r4, #-0]!
     ae0:	07580000 	ldrbeq	r0, [r8, -r0]
     ae4:	0d020000 	stceq	0, cr0, [r2, #-0]
     ae8:	03000005 	movweq	r0, #5
     aec:	00311701 	eorseq	r1, r1, r1, lsl #14
     af0:	01030000 	mrseq	r0, (UNDEF: 3)
     af4:	0000a508 	andeq	sl, r0, r8, lsl #10
     af8:	00550400 	subseq	r0, r5, r0, lsl #8
     afc:	00490000 	subeq	r0, r9, r0
     b00:	4e050000 	cdpmi	0, 0, cr0, cr5, cr0, {0}
     b04:	ff000000 			; <UNDEFINED> instruction: 0xff000000
     b08:	38060003 	stmdacc	r6, {r0, r1}
     b0c:	03000000 	movweq	r0, #0
     b10:	066b0704 	strbteq	r0, [fp], -r4, lsl #14
     b14:	4e060000 	cdpmi	0, 0, cr0, cr6, cr0, {0}
     b18:	07000000 	streq	r0, [r0, -r0]
     b1c:	0000022a 	andeq	r0, r0, sl, lsr #4
     b20:	491e0f02 	ldmdbmi	lr, {r1, r8, r9, sl, fp}
     b24:	05000000 	streq	r0, [r0, #-0]
     b28:	00237403 	eoreq	r7, r3, r3, lsl #8
     b2c:	04960820 	ldreq	r0, [r6], #2080	; 0x820
     b30:	b7010000 	strlt	r0, [r1, -r0]
     b34:	000f5806 	andeq	r5, pc, r6, lsl #16
     b38:	0000d020 	andeq	sp, r0, r0, lsr #32
     b3c:	c69c0100 	ldrgt	r0, [ip], r0, lsl #2
     b40:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
     b44:	b8010069 	stmdalt	r1, {r0, r3, r5, r6}
     b48:	0000250d 	andeq	r2, r0, sp, lsl #10
     b4c:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
     b50:	01006a09 	tsteq	r0, r9, lsl #20
     b54:	002511b8 	strhteq	r1, [r5], -r8
     b58:	91020000 	mrsls	r0, (UNDEF: 2)
     b5c:	03b90776 			; <UNDEFINED> instruction: 0x03b90776
     b60:	b8010000 	stmdalt	r1, {}	; <UNPREDICTABLE>
     b64:	00002514 	andeq	r2, r0, r4, lsl r5
     b68:	6f910200 	svcvs	0x00910200
     b6c:	01006309 	tsteq	r0, r9, lsl #6
     b70:	002520b8 	strhteq	r2, [r5], -r8
     b74:	91020000 	mrsls	r0, (UNDEF: 2)
     b78:	006b0975 	rsbeq	r0, fp, r5, ror r9
     b7c:	4e12b901 	vnmlsmi.f16	s22, s4, s2	; <UNPREDICTABLE>
     b80:	02000000 	andeq	r0, r0, #0
     b84:	0a007091 	beq	1cdd0 <startup-0x1ffe3230>
     b88:	000004c9 	andeq	r0, r0, r9, asr #9
     b8c:	d406a601 	strle	sl, [r6], #-1537	; 0xfffff9ff
     b90:	8420000e 	strthi	r0, [r0], #-14
     b94:	01000000 	mrseq	r0, (UNDEF: 0)
     b98:	0001159c 	muleq	r1, ip, r5
     b9c:	00780b00 	rsbseq	r0, r8, r0, lsl #22
     ba0:	4e15a601 	cfmsub32mi	mvax0, mvfx10, mvfx5, mvfx1
     ba4:	02000000 	andeq	r0, r0, #0
     ba8:	790b6c91 	stmdbvc	fp, {r0, r4, r7, sl, fp, sp, lr}
     bac:	21a60100 			; <UNDEFINED> instruction: 0x21a60100
     bb0:	0000004e 	andeq	r0, r0, lr, asr #32
     bb4:	07689102 	strbeq	r9, [r8, -r2, lsl #2]!
     bb8:	00000508 	andeq	r0, r0, r8, lsl #10
     bbc:	250da701 	strcs	sl, [sp, #-1793]	; 0xfffff8ff
     bc0:	02000000 	andeq	r0, r0, #0
     bc4:	35077391 	strcc	r7, [r7, #-913]	; 0xfffffc6f
     bc8:	01000005 	tsteq	r0, r5
     bcc:	011509a8 	tsteq	r5, r8, lsr #19
     bd0:	91020000 	mrsls	r0, (UNDEF: 2)
     bd4:	040c0074 	streq	r0, [ip], #-116	; 0xffffff8c
     bd8:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
     bdc:	04e40d00 	strbteq	r0, [r4], #3328	; 0xd00
     be0:	a0010000 	andge	r0, r1, r0
     be4:	000e9e06 	andeq	r9, lr, r6, lsl #28
     be8:	00003620 	andeq	r3, r0, r0, lsr #12
     bec:	409c0100 	addsmi	r0, ip, r0, lsl #2
     bf0:	09000001 	stmdbeq	r0, {r0}
     bf4:	a1010069 	tstge	r1, r9, rrx
     bf8:	00011509 	andeq	r1, r1, r9, lsl #10
     bfc:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     c00:	053b0800 	ldreq	r0, [fp, #-2048]!	; 0xfffff800
     c04:	96010000 	strls	r0, [r1], -r0
     c08:	000e4406 	andeq	r4, lr, r6, lsl #8
     c0c:	00005a20 	andeq	r5, r0, r0, lsr #20
     c10:	899c0100 	ldmibhi	ip, {r8}
     c14:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
     c18:	20000e4a 	andcs	r0, r0, sl, asr #28
     c1c:	0000004a 	andeq	r0, r0, sl, asr #32
     c20:	00057a07 	andeq	r7, r5, r7, lsl #20
     c24:	0e970100 	fmleqs	f0, f7, f0
     c28:	00000115 	andeq	r0, r0, r5, lsl r1
     c2c:	0e749102 	expeqs	f1, f2
     c30:	20000e6e 	andcs	r0, r0, lr, ror #28
     c34:	0000001a 	andeq	r0, r0, sl, lsl r0
     c38:	64646109 	strbtvs	r6, [r4], #-265	; 0xfffffef7
     c3c:	129a0100 	addsne	r0, sl, #0, 2
     c40:	00000115 	andeq	r0, r0, r5, lsl r1
     c44:	00709102 	rsbseq	r9, r0, r2, lsl #2
     c48:	50080000 	andpl	r0, r8, r0
     c4c:	01000005 	tsteq	r0, r5
     c50:	0dfe068e 	ldcleq	6, cr0, [lr, #568]!	; 0x238
     c54:	00462000 	subeq	r2, r6, r0
     c58:	9c010000 	stcls	0, cr0, [r1], {-0}
     c5c:	000001be 			; <UNDEFINED> instruction: 0x000001be
     c60:	0004b70f 	andeq	fp, r4, pc, lsl #14
     c64:	218e0100 	orrcs	r0, lr, r0, lsl #2
     c68:	00000025 	andeq	r0, r0, r5, lsr #32
     c6c:	0f779102 	svceq	0x00779102
     c70:	000003b9 			; <UNDEFINED> instruction: 0x000003b9
     c74:	252f8e01 	strcs	r8, [pc, #-3585]!	; fffffe7b <rear+0xdfffc837>
     c78:	02000000 	andeq	r0, r0, #0
     c7c:	08007691 	stmdaeq	r0, {r0, r4, r7, r9, sl, ip, sp, lr}
     c80:	00000480 	andeq	r0, r0, r0, lsl #9
     c84:	b8068601 	stmdalt	r6, {r0, r9, sl, pc}
     c88:	4620000d 	strtmi	r0, [r0], -sp
     c8c:	01000000 	mrseq	r0, (UNDEF: 0)
     c90:	0001f39c 	muleq	r1, ip, r3
     c94:	6d630b00 	vstmdbvs	r3!, {d16-d15}
     c98:	86010064 	strhi	r0, [r1], -r4, rrx
     c9c:	00002524 	andeq	r2, r0, r4, lsr #10
     ca0:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
     ca4:	0003b90f 	andeq	fp, r3, pc, lsl #18
     ca8:	31860100 	orrcc	r0, r6, r0, lsl #2
     cac:	00000025 	andeq	r0, r0, r5, lsr #32
     cb0:	00769102 	rsbseq	r9, r6, r2, lsl #2
     cb4:	00051508 	andeq	r1, r5, r8, lsl #10
     cb8:	066e0100 	strbteq	r0, [lr], -r0, lsl #2
     cbc:	20000d42 	andcs	r0, r0, r2, asr #26
     cc0:	00000076 	andeq	r0, r0, r6, ror r0
     cc4:	02369c01 	eorseq	r9, r6, #256	; 0x100
     cc8:	650f0000 	strvs	r0, [pc, #-0]	; cd0 <startup-0x1ffff330>
     ccc:	01000009 	tsteq	r0, r9
     cd0:	00251c6e 	eoreq	r1, r5, lr, ror #24
     cd4:	91020000 	mrsls	r0, (UNDEF: 2)
     cd8:	03b90f77 			; <UNDEFINED> instruction: 0x03b90f77
     cdc:	6e010000 	cdpvs	0, 0, cr0, cr1, cr0, {0}
     ce0:	0000252b 	andeq	r2, r0, fp, lsr #10
     ce4:	76910200 	ldrvc	r0, [r1], r0, lsl #4
     ce8:	00045610 	andeq	r5, r4, r0, lsl r6
     cec:	05450100 	strbeq	r0, [r5, #-256]	; 0xffffff00
     cf0:	00000115 	andeq	r0, r0, r5, lsl r1
     cf4:	12000011 	andne	r0, r0, #17
     cf8:	000004aa 	andeq	r0, r0, sl, lsr #9
     cfc:	25096901 	strcs	r6, [r9, #-2305]	; 0xfffff6ff
     d00:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
     d04:	2a20000d 	bcs	800d40 <startup-0x1f7ff2c0>
     d08:	01000000 	mrseq	r0, (UNDEF: 0)
     d0c:	0002609c 	muleq	r2, ip, r0
     d10:	03b90f00 			; <UNDEFINED> instruction: 0x03b90f00
     d14:	69010000 	stmdbvs	r1, {}	; <UNPREDICTABLE>
     d18:	00002523 	andeq	r2, r0, r3, lsr #10
     d1c:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
     d20:	04bc1200 	ldrteq	r1, [ip], #512	; 0x200
     d24:	52010000 	andpl	r0, r1, #0
     d28:	0000310f 	andeq	r3, r0, pc, lsl #2
     d2c:	000c8c00 	andeq	r8, ip, r0, lsl #24
     d30:	00008c20 	andeq	r8, r0, r0, lsr #24
     d34:	ab9c0100 	blge	fe70113c <rear+0xde6fdaf8>
     d38:	0f000002 	svceq	0x00000002
     d3c:	000003b9 			; <UNDEFINED> instruction: 0x000003b9
     d40:	312a5201 			; <UNDEFINED> instruction: 0x312a5201
     d44:	02000000 	andeq	r0, r0, #0
     d48:	56136f91 	sadd8pl	r6, r3, r1
     d4c:	01000004 	tsteq	r0, r4
     d50:	01150545 	tsteq	r5, r5, asr #10
     d54:	029b0000 	addseq	r0, fp, #0
     d58:	00110000 	andseq	r0, r1, r0
     d5c:	0005b307 	andeq	fp, r5, r7, lsl #6
     d60:	135a0100 	cmpne	sl, #0, 2
     d64:	00000031 	andeq	r0, r0, r1, lsr r0
     d68:	00779102 	rsbseq	r9, r7, r2, lsl #2
     d6c:	0004f508 	andeq	pc, r4, r8, lsl #10
     d70:	06400100 	strbeq	r0, [r0], -r0, lsl #2
     d74:	20000c4e 	andcs	r0, r0, lr, asr #24
     d78:	0000003e 	andeq	r0, r0, lr, lsr r0
     d7c:	02d09c01 	sbcseq	r9, r0, #256	; 0x100
     d80:	56100000 	ldrpl	r0, [r0], -r0
     d84:	01000004 	tsteq	r0, r4
     d88:	01150545 	tsteq	r5, r5, asr #10
     d8c:	00110000 	andseq	r0, r1, r0
     d90:	05230800 	streq	r0, [r3, #-2048]!	; 0xfffff800
     d94:	2a010000 	bcs	40d9c <startup-0x1ffbf264>
     d98:	000bf406 	andeq	pc, fp, r6, lsl #8
     d9c:	00005a20 	andeq	r5, r0, r0, lsr #20
     da0:	f69c0100 			; <UNDEFINED> instruction: 0xf69c0100
     da4:	0f000002 	svceq	0x00000002
     da8:	000003b9 			; <UNDEFINED> instruction: 0x000003b9
     dac:	25202a01 	strcs	r2, [r0, #-2561]!	; 0xfffff5ff
     db0:	02000000 	andeq	r0, r0, #0
     db4:	0a007791 	beq	1ec00 <startup-0x1ffe1400>
     db8:	000004cf 	andeq	r0, r0, pc, asr #9
     dbc:	b0062001 	andlt	r2, r6, r1
     dc0:	4420000b 	strtmi	r0, [r0], #-11
     dc4:	01000000 	mrseq	r0, (UNDEF: 0)
     dc8:	0003279c 	muleq	r3, ip, r7
     dcc:	00780b00 	rsbseq	r0, r8, r0, lsl #22
     dd0:	25232001 	strcs	r2, [r3, #-1]!
     dd4:	02000000 	andeq	r0, r0, #0
     dd8:	63096f91 	movwvs	r6, #40849	; 0x9f91
     ddc:	0d230100 	stfeqs	f0, [r3, #-0]
     de0:	00000025 	andeq	r0, r0, r5, lsr #32
     de4:	00779102 	rsbseq	r9, r7, r2, lsl #2
     de8:	0005630a 	andeq	r6, r5, sl, lsl #6
     dec:	06150100 	ldreq	r0, [r5], -r0, lsl #2
     df0:	20000b60 	andcs	r0, r0, r0, ror #22
     df4:	00000050 	andeq	r0, r0, r0, asr r0
     df8:	03589c01 	cmpeq	r8, #256	; 0x100
     dfc:	780b0000 	stmdavc	fp, {}	; <UNPREDICTABLE>
     e00:	25150100 	ldrcs	r0, [r5, #-256]	; 0xffffff00
     e04:	00000025 	andeq	r0, r0, r5, lsr #32
     e08:	096f9102 	stmdbeq	pc!, {r1, r8, ip, pc}^	; <UNPREDICTABLE>
     e0c:	18010063 	stmdane	r1, {r0, r1, r5, r6}
     e10:	0000250d 	andeq	r2, r0, sp, lsl #10
     e14:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
     e18:	05a61400 	streq	r1, [r6, #1024]!	; 0x400
     e1c:	06010000 	streq	r0, [r1], -r0
     e20:	000b0406 	andeq	r0, fp, r6, lsl #8
     e24:	00005c20 	andeq	r5, r0, r0, lsr #24
     e28:	139c0100 	orrsne	r0, ip, #0, 2
     e2c:	00000322 	andeq	r0, r0, r2, lsr #6
     e30:	15050801 	strne	r0, [r5, #-2049]	; 0xfffff7ff
     e34:	7c000001 	stcvc	0, cr0, [r0], {1}
     e38:	11000003 	tstne	r0, r3
     e3c:	02f41000 	rscseq	r1, r4, #0
     e40:	0a010000 	beq	40e48 <startup-0x1ffbf1b8>
     e44:	00011505 	andeq	r1, r1, r5, lsl #10
     e48:	00001100 	andeq	r1, r0, r0, lsl #2
     e4c:	00012000 	andeq	r2, r1, r0
     e50:	3f000400 	svccc	0x00000400
     e54:	04000005 	streq	r0, [r0], #-5
     e58:	00017e01 	andeq	r7, r1, r1, lsl #28
     e5c:	05e50c00 	strbeq	r0, [r5, #3072]!	; 0xc00
     e60:	00c70000 	sbceq	r0, r7, r0
     e64:	10280000 	eorne	r0, r8, r0
     e68:	00f02000 	rscseq	r2, r0, r0
     e6c:	0a050000 	beq	140e74 <startup-0x1febf18c>
     e70:	01020000 	mrseq	r0, (UNDEF: 2)
     e74:	0000a508 	andeq	sl, r0, r8, lsl #10
     e78:	05c60300 	strbeq	r0, [r6, #768]	; 0x300
     e7c:	24010000 	strcs	r0, [r1], #-0
     e80:	0010f806 	andseq	pc, r0, r6, lsl #16
     e84:	00002020 	andeq	r2, r0, r0, lsr #32
     e88:	509c0100 	addspl	r0, ip, r0, lsl #2
     e8c:	04000000 	streq	r0, [r0], #-0
     e90:	24010063 	strcs	r0, [r1], #-99	; 0xffffff9d
     e94:	0000251c 	andeq	r2, r0, ip, lsl r5
     e98:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
     e9c:	05ba0500 	ldreq	r0, [sl, #1280]!	; 0x500
     ea0:	14010000 	strne	r0, [r1], #-0
     ea4:	0000250f 	andeq	r2, r0, pc, lsl #10
     ea8:	00109000 	andseq	r9, r0, r0
     eac:	00006820 	andeq	r6, r0, r0, lsr #16
     eb0:	a79c0100 	ldrge	r0, [ip, r0, lsl #2]
     eb4:	06000000 	streq	r0, [r0], -r0
     eb8:	000005db 	ldrdeq	r0, [r0], -fp
     ebc:	a7131501 	ldrge	r1, [r3, -r1, lsl #10]
     ec0:	02000000 	andeq	r0, r0, #0
     ec4:	bf065891 	svclt	0x00065891
     ec8:	01000005 	tsteq	r0, r5
     ecc:	00a71316 	adceq	r1, r7, r6, lsl r3
     ed0:	91020000 	mrsls	r0, (UNDEF: 2)
     ed4:	6f720748 	svcvs	0x00720748
     ed8:	19010077 	stmdbne	r1, {r0, r1, r2, r4, r5, r6}
     edc:	0000be09 	andeq	fp, r0, r9, lsl #28
     ee0:	6c910200 	lfmvs	f0, 4, [r1], {0}
     ee4:	0005d306 	andeq	sp, r5, r6, lsl #6
     ee8:	0e190100 	mufeqe	f0, f1, f0
     eec:	000000be 	strheq	r0, [r0], -lr
     ef0:	00689102 	rsbeq	r9, r8, r2, lsl #2
     ef4:	00002508 	andeq	r2, r0, r8, lsl #10
     ef8:	0000b700 	andeq	fp, r0, r0, lsl #14
     efc:	00b70900 	adcseq	r0, r7, r0, lsl #18
     f00:	000f0000 	andeq	r0, pc, r0
     f04:	6b070402 	blvs	1c1f14 <startup-0x1fe3e0ec>
     f08:	0a000006 	beq	f28 <startup-0x1ffff0d8>
     f0c:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
     f10:	ce0b0074 	mcrgt	0, 0, r0, cr11, cr4, {3}
     f14:	01000005 	tsteq	r0, r5
     f18:	00be0508 	adcseq	r0, lr, r8, lsl #10
     f1c:	104c0000 	subne	r0, ip, r0
     f20:	00442000 	subeq	r2, r4, r0
     f24:	9c010000 	stcls	0, cr0, [r1], {-0}
     f28:	000000fc 	strdeq	r0, [r0], -ip
     f2c:	01006a07 	tsteq	r0, r7, lsl #20
     f30:	00be0909 	adcseq	r0, lr, r9, lsl #18
     f34:	91020000 	mrsls	r0, (UNDEF: 2)
     f38:	06020674 			; <UNDEFINED> instruction: 0x06020674
     f3c:	0a010000 	beq	40f44 <startup-0x1ffbf0bc>
     f40:	0000fc0a 	andeq	pc, r0, sl, lsl #24
     f44:	73910200 	orrsvc	r0, r1, #0, 4
     f48:	08010200 	stmdaeq	r1, {r9}
     f4c:	000000ae 	andeq	r0, r0, lr, lsr #1
     f50:	0006080c 	andeq	r0, r6, ip, lsl #16
     f54:	06040100 	streq	r0, [r4], -r0, lsl #2
     f58:	20001028 	andcs	r1, r0, r8, lsr #32
     f5c:	00000024 	andeq	r0, r0, r4, lsr #32
     f60:	69049c01 	stmdbvs	r4, {r0, sl, fp, ip, pc}
     f64:	17040100 	strne	r0, [r4, -r0, lsl #2]
     f68:	000000be 	strheq	r0, [r0], -lr
     f6c:	00749102 	rsbseq	r9, r4, r2, lsl #2
     f70:	000b8f00 	andeq	r8, fp, r0, lsl #30
     f74:	1e000400 	cfcpysne	mvf0, mvf0
     f78:	04000006 	streq	r0, [r0], #-6
     f7c:	00017e01 	andeq	r7, r1, r1, lsl #28
     f80:	07ab0c00 	streq	r0, [fp, r0, lsl #24]!
     f84:	00c70000 	sbceq	r0, r7, r0
     f88:	11180000 	tstne	r8, r0
     f8c:	013c2000 	teqeq	ip, r0
     f90:	0acf0000 	beq	ff3c0f98 <rear+0xdf3bd954>
     f94:	04020000 	streq	r0, [r2], #-0
     f98:	00066b07 	andeq	r6, r6, r7, lsl #22
     f9c:	05040300 	streq	r0, [r4, #-768]	; 0xfffffd00
     fa0:	00746e69 	rsbseq	r6, r4, r9, ror #28
     fa4:	a7060102 	strge	r0, [r6, -r2, lsl #2]
     fa8:	02000000 	andeq	r0, r0, #0
     fac:	00a50801 	adceq	r0, r5, r1, lsl #16
     fb0:	02020000 	andeq	r0, r2, #0
     fb4:	00089c05 	andeq	r9, r8, r5, lsl #24
     fb8:	07020200 	streq	r0, [r2, -r0, lsl #4]
     fbc:	000007ce 	andeq	r0, r0, lr, asr #15
     fc0:	ac050402 	cfstrsge	mvf0, [r5], {2}
     fc4:	02000006 	andeq	r0, r0, #6
     fc8:	06660704 	strbteq	r0, [r6], -r4, lsl #14
     fcc:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
     fd0:	0006a705 	andeq	sl, r6, r5, lsl #14
     fd4:	07080200 	streq	r0, [r8, -r0, lsl #4]
     fd8:	00000661 	andeq	r0, r0, r1, ror #12
     fdc:	00081104 	andeq	r1, r8, r4, lsl #2
     fe0:	19220200 	stmdbne	r2!, {r9}
     fe4:	00000077 	andeq	r0, r0, r7, ror r0
     fe8:	007d0405 	rsbseq	r0, sp, r5, lsl #8
     fec:	5c060000 	stcpl	0, cr0, [r6], {-0}
     ff0:	04000009 	streq	r0, [r0], #-9
     ff4:	00000869 	andeq	r0, r0, r9, ror #16
     ff8:	4f0e2c03 	svcmi	0x000e2c03
     ffc:	04000000 	streq	r0, [r0], #-0
    1000:	00000971 	andeq	r0, r0, r1, ror r9
    1004:	4f0e7203 	svcmi	0x000e7203
    1008:	07000000 	streq	r0, [r0, -r0]
    100c:	00000819 	andeq	r0, r0, r9, lsl r8
    1010:	17015e04 	strne	r5, [r1, -r4, lsl #28]
    1014:	00000025 	andeq	r0, r0, r5, lsr #32
    1018:	a6030408 	strge	r0, [r3], -r8, lsl #8
    101c:	0000c903 	andeq	ip, r0, r3, lsl #18
    1020:	080b0900 	stmdaeq	fp, {r8, fp}
    1024:	a8030000 	stmdage	r3, {}	; <UNPREDICTABLE>
    1028:	00009a0c 	andeq	r9, r0, ip, lsl #20
    102c:	078e0900 	streq	r0, [lr, r0, lsl #18]
    1030:	a9030000 	stmdbge	r3, {}	; <UNPREDICTABLE>
    1034:	0000c913 	andeq	ip, r0, r3, lsl r9
    1038:	3a0a0000 	bcc	281040 <startup-0x1fd7efc0>
    103c:	d9000000 	stmdble	r0, {}	; <UNPREDICTABLE>
    1040:	0b000000 	bleq	1048 <startup-0x1fffefb8>
    1044:	00000025 	andeq	r0, r0, r5, lsr #32
    1048:	080c0003 	stmdaeq	ip, {r0, r1}
    104c:	fd09a303 	stc2	3, cr10, [r9, #-12]
    1050:	0d000000 	stceq	0, cr0, [r0, #-0]
    1054:	00000954 	andeq	r0, r0, r4, asr r9
    1058:	2c07a503 	cfstr32cs	mvfx10, [r7], {3}
    105c:	00000000 	andeq	r0, r0, r0
    1060:	0009630d 	andeq	r6, r9, sp, lsl #6
    1064:	05aa0300 	streq	r0, [sl, #768]!	; 0x300
    1068:	000000a7 	andeq	r0, r0, r7, lsr #1
    106c:	c4040004 	strgt	r0, [r4], #-4
    1070:	03000008 	movweq	r0, #8
    1074:	00d903ab 	sbcseq	r0, r9, fp, lsr #7
    1078:	57040000 	strpl	r0, [r4, -r0]
    107c:	03000007 	movweq	r0, #7
    1080:	006b1baf 	rsbeq	r1, fp, pc, lsr #23
    1084:	040e0000 	streq	r0, [lr], #-0
    1088:	011d0405 	tsteq	sp, r5, lsl #8
    108c:	01020000 	mrseq	r0, (UNDEF: 2)
    1090:	0000ae08 	andeq	sl, r0, r8, lsl #28
    1094:	011d0f00 	tsteq	sp, r0, lsl #30
    1098:	bb040000 	bllt	1010a0 <startup-0x1fefef60>
    109c:	05000009 	streq	r0, [r0, #-9]
    10a0:	00561916 	subseq	r1, r6, r6, lsl r9
    10a4:	68100000 	ldmdavs	r0, {}	; <UNPREDICTABLE>
    10a8:	18000007 	stmdane	r0, {r0, r1, r2}
    10ac:	8f082f05 	svchi	0x00082f05
    10b0:	0d000001 	stceq	0, cr0, [r0, #-4]
    10b4:	000008e5 	andeq	r0, r0, r5, ror #17
    10b8:	8f133105 	svchi	0x00133105
    10bc:	00000001 	andeq	r0, r0, r1
    10c0:	006b5f11 	rsbeq	r5, fp, r1, lsl pc
    10c4:	2c073205 	sfmcs	f3, 4, [r7], {5}
    10c8:	04000000 	streq	r0, [r0], #-0
    10cc:	00093f0d 	andeq	r3, r9, sp, lsl #30
    10d0:	0b320500 	bleq	c824d8 <startup-0x1f37db28>
    10d4:	0000002c 	andeq	r0, r0, ip, lsr #32
    10d8:	07510d08 	ldrbeq	r0, [r1, -r8, lsl #26]
    10dc:	32050000 	andcc	r0, r5, #0
    10e0:	00002c14 	andeq	r2, r0, r4, lsl ip
    10e4:	f60d0c00 			; <UNDEFINED> instruction: 0xf60d0c00
    10e8:	05000009 	streq	r0, [r0, #-9]
    10ec:	002c1b32 	eoreq	r1, ip, r2, lsr fp
    10f0:	11100000 	tstne	r0, r0
    10f4:	0500785f 	streq	r7, [r0, #-2143]	; 0xfffff7a1
    10f8:	01950b33 	orrseq	r0, r5, r3, lsr fp
    10fc:	00140000 	andseq	r0, r4, r0
    1100:	01350405 	teqeq	r5, r5, lsl #8
    1104:	290a0000 	stmdbcs	sl, {}	; <UNPREDICTABLE>
    1108:	a5000001 	strge	r0, [r0, #-1]
    110c:	0b000001 	bleq	1118 <startup-0x1fffeee8>
    1110:	00000025 	andeq	r0, r0, r5, lsr #32
    1114:	89100000 	ldmdbhi	r0, {}	; <UNPREDICTABLE>
    1118:	24000007 	strcs	r0, [r0], #-7
    111c:	28083705 	stmdacs	r8, {r0, r2, r8, r9, sl, ip, sp}
    1120:	0d000002 	stceq	0, cr0, [r0, #-8]
    1124:	0000069e 	muleq	r0, lr, r6
    1128:	2c093905 			; <UNDEFINED> instruction: 0x2c093905
    112c:	00000000 	andeq	r0, r0, r0
    1130:	0009790d 	andeq	r7, r9, sp, lsl #18
    1134:	093a0500 	ldmdbeq	sl!, {r8, sl}
    1138:	0000002c 	andeq	r0, r0, ip, lsr #32
    113c:	06c10d04 	strbeq	r0, [r1], r4, lsl #26
    1140:	3b050000 	blcc	141148 <startup-0x1febeeb8>
    1144:	00002c09 	andeq	r2, r0, r9, lsl #24
    1148:	660d0800 	strvs	r0, [sp], -r0, lsl #16
    114c:	0500000a 	streq	r0, [r0, #-10]
    1150:	002c093c 	eoreq	r0, ip, ip, lsr r9
    1154:	0d0c0000 	stceq	0, cr0, [ip, #-0]
    1158:	0000084d 	andeq	r0, r0, sp, asr #16
    115c:	2c093d05 	stccs	13, cr3, [r9], {5}
    1160:	10000000 	andne	r0, r0, r0
    1164:	0008330d 	andeq	r3, r8, sp, lsl #6
    1168:	093e0500 	ldmdbeq	lr!, {r8, sl}
    116c:	0000002c 	andeq	r0, r0, ip, lsr #32
    1170:	09fb0d14 	ldmibeq	fp!, {r2, r4, r8, sl, fp}^
    1174:	3f050000 	svccc	0x00050000
    1178:	00002c09 	andeq	r2, r0, r9, lsl #24
    117c:	a60d1800 	strge	r1, [sp], -r0, lsl #16
    1180:	05000008 	streq	r0, [r0, #-8]
    1184:	002c0940 	eoreq	r0, ip, r0, asr #18
    1188:	0d1c0000 	ldceq	0, cr0, [ip, #-0]
    118c:	00000a2d 	andeq	r0, r0, sp, lsr #20
    1190:	2c094105 	stfcss	f4, [r9], {5}
    1194:	20000000 	andcs	r0, r0, r0
    1198:	06d01200 	ldrbeq	r1, [r0], r0, lsl #4
    119c:	01080000 	mrseq	r0, (UNDEF: 8)
    11a0:	6d084a05 	vstrvs	s8, [r8, #-20]	; 0xffffffec
    11a4:	0d000002 	stceq	0, cr0, [r0, #-8]
    11a8:	00000744 	andeq	r0, r0, r4, asr #14
    11ac:	6d0a4b05 	vstrvs	d4, [sl, #-20]	; 0xffffffec
    11b0:	00000002 	andeq	r0, r0, r2
    11b4:	0006150d 	andeq	r1, r6, sp, lsl #10
    11b8:	094c0500 	stmdbeq	ip, {r8, sl}^
    11bc:	0000026d 	andeq	r0, r0, sp, ror #4
    11c0:	09ad1380 	stmibeq	sp!, {r7, r8, r9, ip}
    11c4:	4e050000 	cdpmi	0, 0, cr0, cr5, cr0, {0}
    11c8:	0001290a 	andeq	r2, r1, sl, lsl #18
    11cc:	13010000 	movwne	r0, #4096	; 0x1000
    11d0:	000006fd 	strdeq	r0, [r0], -sp
    11d4:	290a5105 	stmdbcs	sl, {r0, r2, r8, ip, lr}
    11d8:	04000001 	streq	r0, [r0], #-1
    11dc:	150a0001 	strne	r0, [sl, #-1]
    11e0:	7d000001 	stcvc	0, cr0, [r0, #-4]
    11e4:	0b000002 	bleq	11f4 <startup-0x1fffee0c>
    11e8:	00000025 	andeq	r0, r0, r5, lsr #32
    11ec:	5612001f 			; <UNDEFINED> instruction: 0x5612001f
    11f0:	90000008 	andls	r0, r0, r8
    11f4:	085d0501 	ldmdaeq	sp, {r0, r8, sl}^
    11f8:	000002c0 	andeq	r0, r0, r0, asr #5
    11fc:	0008e50d 	andeq	lr, r8, sp, lsl #10
    1200:	125e0500 	subsne	r0, lr, #0, 10
    1204:	000002c0 	andeq	r0, r0, r0, asr #5
    1208:	09040d00 	stmdbeq	r4, {r8, sl, fp}
    120c:	5f050000 	svcpl	0x00050000
    1210:	00002c06 	andeq	r2, r0, r6, lsl #24
    1214:	4c0d0400 	cfstrsmi	mvf0, [sp], {-0}
    1218:	05000007 	streq	r0, [r0, #-7]
    121c:	02c60961 	sbceq	r0, r6, #1589248	; 0x184000
    1220:	0d080000 	stceq	0, cr0, [r8, #-0]
    1224:	000006d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1228:	281e6205 	ldmdacs	lr, {r0, r2, r9, sp, lr}
    122c:	88000002 	stmdahi	r0, {r1}
    1230:	7d040500 	cfstr32vc	mvfx0, [r4, #-0]
    1234:	0a000002 	beq	1244 <startup-0x1fffedbc>
    1238:	000002d6 	ldrdeq	r0, [r0], -r6
    123c:	000002d6 	ldrdeq	r0, [r0], -r6
    1240:	0000250b 	andeq	r2, r0, fp, lsl #10
    1244:	05001f00 	streq	r1, [r0, #-3840]	; 0xfffff100
    1248:	0002dc04 	andeq	sp, r2, r4, lsl #24
    124c:	b0101400 	andslt	r1, r0, r0, lsl #8
    1250:	08000008 	stmdaeq	r0, {r3}
    1254:	05087505 	streq	r7, [r8, #-1285]	; 0xfffffafb
    1258:	0d000003 	stceq	0, cr0, [r0, #-12]
    125c:	000006bb 			; <UNDEFINED> instruction: 0x000006bb
    1260:	05117605 	ldreq	r7, [r1, #-1541]	; 0xfffff9fb
    1264:	00000003 	andeq	r0, r0, r3
    1268:	0006280d 	andeq	r2, r6, sp, lsl #16
    126c:	06770500 	ldrbteq	r0, [r7], -r0, lsl #10
    1270:	0000002c 	andeq	r0, r0, ip, lsr #32
    1274:	04050004 	streq	r0, [r5], #-4
    1278:	0000003a 	andeq	r0, r0, sl, lsr r0
    127c:	0008cf10 	andeq	ip, r8, r0, lsl pc
    1280:	b5056800 	strlt	r6, [r5, #-2048]	; 0xfffff800
    1284:	00044e08 	andeq	r4, r4, r8, lsl #28
    1288:	705f1100 	subsvc	r1, pc, r0, lsl #2
    128c:	12b60500 	adcsne	r0, r6, #0, 10
    1290:	00000305 	andeq	r0, r0, r5, lsl #6
    1294:	725f1100 	subsvc	r1, pc, #0, 2
    1298:	07b70500 	ldreq	r0, [r7, r0, lsl #10]!
    129c:	0000002c 	andeq	r0, r0, ip, lsr #32
    12a0:	775f1104 	ldrbvc	r1, [pc, -r4, lsl #2]
    12a4:	07b80500 	ldreq	r0, [r8, r0, lsl #10]!
    12a8:	0000002c 	andeq	r0, r0, ip, lsr #32
    12ac:	06f60d08 	ldrbteq	r0, [r6], r8, lsl #26
    12b0:	b9050000 	stmdblt	r5, {}	; <UNPREDICTABLE>
    12b4:	00004109 	andeq	r4, r0, r9, lsl #2
    12b8:	a50d0c00 	strge	r0, [sp, #-3072]	; 0xfffff400
    12bc:	05000007 	streq	r0, [r0, #-7]
    12c0:	004109ba 	strheq	r0, [r1], #-154	; 0xffffff66
    12c4:	110e0000 	mrsne	r0, (UNDEF: 14)
    12c8:	0066625f 	rsbeq	r6, r6, pc, asr r2
    12cc:	dd11bb05 	vldrle	d11, [r1, #-20]	; 0xffffffec
    12d0:	10000002 	andne	r0, r0, r2
    12d4:	0006780d 	andeq	r7, r6, sp, lsl #16
    12d8:	07bc0500 	ldreq	r0, [ip, r0, lsl #10]!
    12dc:	0000002c 	andeq	r0, r0, ip, lsr #32
    12e0:	06de0d18 			; <UNDEFINED> instruction: 0x06de0d18
    12e4:	c3050000 	movwgt	r0, #20480	; 0x5000
    12e8:	0001150a 	andeq	r1, r1, sl, lsl #10
    12ec:	c30d1c00 	movwgt	r1, #56320	; 0xdc00
    12f0:	05000004 	streq	r0, [r0, #-4]
    12f4:	05c01dc5 	strbeq	r1, [r0, #3525]	; 0xdc5
    12f8:	0d200000 	stceq	0, cr0, [r0, #-0]
    12fc:	0000051c 	andeq	r0, r0, ip, lsl r5
    1300:	ea1dc705 	b	772f1c <startup-0x1f88d0e4>
    1304:	24000005 	strcs	r0, [r0], #-5
    1308:	00096b0d 	andeq	r6, r9, sp, lsl #22
    130c:	0dca0500 	cfstr64eq	mvdx0, [sl]
    1310:	0000060e 	andeq	r0, r0, lr, lsl #12
    1314:	0a470d28 	beq	11c47bc <startup-0x1ee3b844>
    1318:	cb050000 	blgt	141320 <startup-0x1febece0>
    131c:	00062809 	andeq	r2, r6, r9, lsl #16
    1320:	5f112c00 	svcpl	0x00112c00
    1324:	05006275 	streq	r6, [r0, #-629]	; 0xfffffd8b
    1328:	02dd11ce 	sbcseq	r1, sp, #-2147483597	; 0x80000033
    132c:	11300000 	teqne	r0, r0
    1330:	0070755f 	rsbseq	r7, r0, pc, asr r5
    1334:	0512cf05 	ldreq	ip, [r2, #-3845]	; 0xfffff0fb
    1338:	38000003 	stmdacc	r0, {r0, r1}
    133c:	72755f11 	rsbsvc	r5, r5, #17, 30	; 0x44
    1340:	07d00500 	ldrbeq	r0, [r0, r0, lsl #10]
    1344:	0000002c 	andeq	r0, r0, ip, lsr #32
    1348:	06b50d3c 			; <UNDEFINED> instruction: 0x06b50d3c
    134c:	d3050000 	movwle	r0, #20480	; 0x5000
    1350:	00062e11 	andeq	r2, r6, r1, lsl lr
    1354:	1f0d4000 	svcne	0x000d4000
    1358:	0500000a 	streq	r0, [r0, #-10]
    135c:	063e11d4 			; <UNDEFINED> instruction: 0x063e11d4
    1360:	11430000 	mrsne	r0, (UNDEF: 67)
    1364:	00626c5f 	rsbeq	r6, r2, pc, asr ip
    1368:	dd11d705 	ldcle	7, cr13, [r1, #-20]	; 0xffffffec
    136c:	44000002 	strmi	r0, [r0], #-2
    1370:	00070c0d 	andeq	r0, r7, sp, lsl #24
    1374:	07da0500 	ldrbeq	r0, [sl, r0, lsl #10]
    1378:	0000002c 	andeq	r0, r0, ip, lsr #32
    137c:	071d0d4c 	ldreq	r0, [sp, -ip, asr #26]
    1380:	db050000 	blle	141388 <startup-0x1febec78>
    1384:	0000820a 	andeq	r8, r0, sl, lsl #4
    1388:	b60d5000 	strlt	r5, [sp], -r0
    138c:	05000004 	streq	r0, [r0, #-4]
    1390:	046c12de 	strbteq	r1, [ip], #-734	; 0xfffffd22
    1394:	0d540000 	ldcleq	0, cr0, [r4, #-0]
    1398:	0000095d 	andeq	r0, r0, sp, asr r9
    139c:	090ce205 	stmdbeq	ip, {r0, r2, r9, sp, lr, pc}
    13a0:	58000001 	stmdapl	r0, {r0}
    13a4:	0008d70d 	andeq	sp, r8, sp, lsl #14
    13a8:	0ee40500 	cdpeq	5, 14, cr0, cr4, cr0, {0}
    13ac:	000000fd 	strdeq	r0, [r0], -sp
    13b0:	08200d5c 	stmdaeq	r0!, {r2, r3, r4, r6, r8, sl, fp}
    13b4:	e5050000 	str	r0, [r5, #-0]
    13b8:	00002c09 	andeq	r2, r0, r9, lsl #24
    13bc:	15006400 	strne	r6, [r0, #-1024]	; 0xfffffc00
    13c0:	0000002c 	andeq	r0, r0, ip, lsr #32
    13c4:	0000046c 	andeq	r0, r0, ip, ror #8
    13c8:	00046c16 	andeq	r6, r4, r6, lsl ip
    13cc:	01151600 	tsteq	r5, r0, lsl #12
    13d0:	17160000 	ldrne	r0, [r6, -r0]
    13d4:	16000001 	strne	r0, [r0], -r1
    13d8:	0000002c 	andeq	r0, r0, ip, lsr #32
    13dc:	77040500 	strvc	r0, [r4, -r0, lsl #10]
    13e0:	0f000004 	svceq	0x00000004
    13e4:	0000046c 	andeq	r0, r0, ip, ror #8
    13e8:	00094717 	andeq	r4, r9, r7, lsl r7
    13ec:	05042800 	streq	r2, [r4, #-2048]	; 0xfffff800
    13f0:	c0080260 	andgt	r0, r8, r0, ror #4
    13f4:	18000005 	stmdane	r0, {r0, r2}
    13f8:	00000895 	muleq	r0, r5, r8
    13fc:	07026205 	streq	r6, [r2, -r5, lsl #4]
    1400:	0000002c 	andeq	r0, r0, ip, lsr #32
    1404:	07051800 	streq	r1, [r5, -r0, lsl #16]
    1408:	67050000 	strvs	r0, [r5, -r0]
    140c:	069a0b02 	ldreq	r0, [sl], r2, lsl #22
    1410:	18040000 	stmdane	r4, {}	; <UNPREDICTABLE>
    1414:	00000795 	muleq	r0, r5, r7
    1418:	14026705 	strne	r6, [r2], #-1797	; 0xfffff8fb
    141c:	0000069a 	muleq	r0, sl, r6
    1420:	07601808 	strbeq	r1, [r0, -r8, lsl #16]!
    1424:	67050000 	strvs	r0, [r5, -r0]
    1428:	069a1e02 	ldreq	r1, [sl], r2, lsl #28
    142c:	180c0000 	stmdane	ip, {}	; <UNPREDICTABLE>
    1430:	000008ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    1434:	08026905 	stmdaeq	r2, {r0, r2, r8, fp, sp, lr}
    1438:	0000002c 	andeq	r0, r0, ip, lsr #32
    143c:	06361810 			; <UNDEFINED> instruction: 0x06361810
    1440:	6a050000 	bvs	141448 <startup-0x1febebb8>
    1444:	089a0802 	ldmeq	sl, {r1, fp}
    1448:	18140000 	ldmdane	r4, {}	; <UNPREDICTABLE>
    144c:	00000926 	andeq	r0, r0, r6, lsr #18
    1450:	07026d05 	streq	r6, [r2, -r5, lsl #26]
    1454:	0000002c 	andeq	r0, r0, ip, lsr #32
    1458:	09141830 	ldmdbeq	r4, {r4, r5, fp, ip}
    145c:	6e050000 	cdpvs	0, 0, cr0, cr5, cr0, {0}
    1460:	08af1602 	stmiaeq	pc!, {r1, r9, sl, ip}	; <UNPREDICTABLE>
    1464:	18340000 	ldmdane	r4!, {}	; <UNPREDICTABLE>
    1468:	0000085e 	andeq	r0, r0, lr, asr r8
    146c:	07027005 	streq	r7, [r2, -r5]
    1470:	0000002c 	andeq	r0, r0, ip, lsr #32
    1474:	091c1838 	ldmdbeq	ip, {r3, r4, r5, fp, ip}
    1478:	72050000 	andvc	r0, r5, #0
    147c:	08c00a02 	stmiaeq	r0, {r1, r9, fp}^
    1480:	183c0000 	ldmdane	ip!, {}	; <UNPREDICTABLE>
    1484:	00000803 	andeq	r0, r0, r3, lsl #16
    1488:	13027505 	movwne	r7, #9477	; 0x2505
    148c:	0000018f 	andeq	r0, r0, pc, lsl #3
    1490:	077f1840 	ldrbeq	r1, [pc, -r0, asr #16]!
    1494:	76050000 	strvc	r0, [r5], -r0
    1498:	002c0702 	eoreq	r0, ip, r2, lsl #14
    149c:	18440000 	stmdane	r4, {}^	; <UNPREDICTABLE>
    14a0:	00000a61 	andeq	r0, r0, r1, ror #20
    14a4:	13027705 	movwne	r7, #9989	; 0x2705
    14a8:	0000018f 	andeq	r0, r0, pc, lsl #3
    14ac:	08701848 	ldmdaeq	r0!, {r3, r6, fp, ip}^
    14b0:	78050000 	stmdavc	r5, {}	; <UNPREDICTABLE>
    14b4:	08c61402 	stmiaeq	r6, {r1, sl, ip}^
    14b8:	184c0000 	stmdane	ip, {}^	; <UNPREDICTABLE>
    14bc:	0000079d 	muleq	r0, sp, r7
    14c0:	07027b05 	streq	r7, [r2, -r5, lsl #22]
    14c4:	0000002c 	andeq	r0, r0, ip, lsr #32
    14c8:	07151850 			; <UNDEFINED> instruction: 0x07151850
    14cc:	7c050000 	stcvc	0, cr0, [r5], {-0}
    14d0:	01170902 	tsteq	r7, r2, lsl #18
    14d4:	18540000 	ldmdane	r4, {}^	; <UNPREDICTABLE>
    14d8:	0000088e 	andeq	r0, r0, lr, lsl #17
    14dc:	07029f05 	streq	r9, [r2, -r5, lsl #30]
    14e0:	00000875 	andeq	r0, r0, r5, ror r8
    14e4:	08561958 	ldmdaeq	r6, {r3, r4, r6, r8, fp, ip}^
    14e8:	a3050000 	movwge	r0, #20480	; 0x5000
    14ec:	02c01302 	sbceq	r1, r0, #134217728	; 0x8000000
    14f0:	01480000 	mrseq	r0, (UNDEF: 72)
    14f4:	0007e119 	andeq	lr, r7, r9, lsl r1
    14f8:	02a40500 	adceq	r0, r4, #0, 10
    14fc:	00027d12 	andeq	r7, r2, r2, lsl sp
    1500:	19014c00 	stmdbne	r1, {sl, fp, lr}
    1504:	00000a15 	andeq	r0, r0, r5, lsl sl
    1508:	0c02a805 	stceq	8, cr10, [r2], {5}
    150c:	000008d7 	ldrdeq	r0, [r0], -r7
    1510:	e61902dc 			; <UNDEFINED> instruction: 0xe61902dc
    1514:	05000006 	streq	r0, [r0, #-6]
    1518:	5b1002ad 	blpl	401fd4 <startup-0x1fbfe02c>
    151c:	e0000006 	and	r0, r0, r6
    1520:	06cb1902 	strbeq	r1, [fp], r2, lsl #18
    1524:	af050000 	svcge	0x00050000
    1528:	08e30a02 	stmiaeq	r3!, {r1, r9, fp}^
    152c:	02ec0000 	rsceq	r0, ip, #0
    1530:	4e040500 	cfsh32mi	mvfx0, mvfx4, #0
    1534:	15000004 	strne	r0, [r0, #-4]
    1538:	0000002c 	andeq	r0, r0, ip, lsr #32
    153c:	000005e4 	andeq	r0, r0, r4, ror #11
    1540:	00046c16 	andeq	r6, r4, r6, lsl ip
    1544:	01151600 	tsteq	r5, r0, lsl #12
    1548:	e4160000 	ldr	r0, [r6], #-0
    154c:	16000005 	strne	r0, [r0], -r5
    1550:	0000002c 	andeq	r0, r0, ip, lsr #32
    1554:	24040500 	strcs	r0, [r4], #-1280	; 0xfffffb00
    1558:	05000001 	streq	r0, [r0, #-1]
    155c:	0005c604 	andeq	ip, r5, r4, lsl #12
    1560:	008e1500 	addeq	r1, lr, r0, lsl #10
    1564:	060e0000 	streq	r0, [lr], -r0
    1568:	6c160000 	ldcvs	0, cr0, [r6], {-0}
    156c:	16000004 	strne	r0, [r0], -r4
    1570:	00000115 	andeq	r0, r0, r5, lsl r1
    1574:	00008e16 	andeq	r8, r0, r6, lsl lr
    1578:	002c1600 	eoreq	r1, ip, r0, lsl #12
    157c:	05000000 	streq	r0, [r0, #-0]
    1580:	0005f004 	andeq	pc, r5, r4
    1584:	002c1500 	eoreq	r1, ip, r0, lsl #10
    1588:	06280000 	strteq	r0, [r8], -r0
    158c:	6c160000 	ldcvs	0, cr0, [r6], {-0}
    1590:	16000004 	strne	r0, [r0], -r4
    1594:	00000115 	andeq	r0, r0, r5, lsl r1
    1598:	14040500 	strne	r0, [r4], #-1280	; 0xfffffb00
    159c:	0a000006 	beq	15bc <startup-0x1fffea44>
    15a0:	0000003a 	andeq	r0, r0, sl, lsr r0
    15a4:	0000063e 	andeq	r0, r0, lr, lsr r6
    15a8:	0000250b 	andeq	r2, r0, fp, lsl #10
    15ac:	0a000200 	beq	1db4 <startup-0x1fffe24c>
    15b0:	0000003a 	andeq	r0, r0, sl, lsr r0
    15b4:	0000064e 	andeq	r0, r0, lr, asr #12
    15b8:	0000250b 	andeq	r2, r0, fp, lsl #10
    15bc:	07000000 	streq	r0, [r0, -r0]
    15c0:	000008bd 			; <UNDEFINED> instruction: 0x000008bd
    15c4:	1a011f05 	bne	491e0 <startup-0x1ffb6e20>
    15c8:	0000030b 	andeq	r0, r0, fp, lsl #6
    15cc:	000a051a 	andeq	r0, sl, sl, lsl r5
    15d0:	23050c00 	movwcs	r0, #23552	; 0x5c00
    15d4:	06940801 	ldreq	r0, [r4], r1, lsl #16
    15d8:	e5180000 	ldr	r0, [r8, #-0]
    15dc:	05000008 	streq	r0, [r0, #-8]
    15e0:	94110125 	ldrls	r0, [r1], #-293	; 0xfffffedb
    15e4:	00000006 	andeq	r0, r0, r6
    15e8:	00068818 	andeq	r8, r6, r8, lsl r8
    15ec:	01260500 			; <UNDEFINED> instruction: 0x01260500
    15f0:	00002c07 	andeq	r2, r0, r7, lsl #24
    15f4:	b7180400 	ldrlt	r0, [r8, -r0, lsl #8]
    15f8:	05000008 	streq	r0, [r0, #-8]
    15fc:	9a0b0127 	bls	2c1aa0 <startup-0x1fd3e560>
    1600:	08000006 	stmdaeq	r0, {r1, r2}
    1604:	5b040500 	blpl	102a0c <startup-0x1fefd5f4>
    1608:	05000006 	streq	r0, [r0, #-6]
    160c:	00064e04 	andeq	r4, r6, r4, lsl #28
    1610:	062e1a00 	strteq	r1, [lr], -r0, lsl #20
    1614:	050e0000 	streq	r0, [lr, #-0]
    1618:	d908013f 	stmdble	r8, {r0, r1, r2, r3, r4, r5, r8}
    161c:	18000006 	stmdane	r0, {r1, r2}
    1620:	0000094e 	andeq	r0, r0, lr, asr #18
    1624:	12014005 	andne	r4, r1, #5
    1628:	000006d9 	ldrdeq	r0, [r0], -r9
    162c:	098b1800 	stmibeq	fp, {fp, ip}
    1630:	41050000 	mrsmi	r0, (UNDEF: 5)
    1634:	06d91201 	ldrbeq	r1, [r9], r1, lsl #4
    1638:	18060000 	stmdane	r6, {}	; <UNPREDICTABLE>
    163c:	000009b6 			; <UNDEFINED> instruction: 0x000009b6
    1640:	12014205 	andne	r4, r1, #1342177280	; 0x50000000
    1644:	00000048 	andeq	r0, r0, r8, asr #32
    1648:	480a000c 	stmdami	sl, {r2, r3}
    164c:	e9000000 	stmdb	r0, {}	; <UNPREDICTABLE>
    1650:	0b000006 	bleq	1670 <startup-0x1fffe990>
    1654:	00000025 	andeq	r0, r0, r5, lsr #32
    1658:	d01b0002 	andsle	r0, fp, r2
    165c:	07028005 	streq	r8, [r2, -r5]
    1660:	000007fe 	strdeq	r0, [r0], -lr
    1664:	0009e918 	andeq	lr, r9, r8, lsl r9
    1668:	02820500 	addeq	r0, r2, #0, 10
    166c:	00002518 	andeq	r2, r0, r8, lsl r5
    1670:	91180000 	tstls	r8, r0
    1674:	05000009 	streq	r0, [r0, #-9]
    1678:	17120283 	ldrne	r0, [r2, -r3, lsl #5]
    167c:	04000001 	streq	r0, [r0], #-1
    1680:	0007f618 	andeq	pc, r7, r8, lsl r6	; <UNPREDICTABLE>
    1684:	02840500 	addeq	r0, r4, #0, 10
    1688:	0007fe10 	andeq	pc, r7, r0, lsl lr	; <UNPREDICTABLE>
    168c:	38180800 	ldmdacc	r8, {fp}
    1690:	0500000a 	streq	r0, [r0, #-10]
    1694:	a5170285 	ldrge	r0, [r7, #-645]	; 0xfffffd7b
    1698:	24000001 	strcs	r0, [r0], #-1
    169c:	00077018 	andeq	r7, r7, r8, lsl r0
    16a0:	02860500 	addeq	r0, r6, #0, 10
    16a4:	00002c0f 	andeq	r2, r0, pc, lsl #24
    16a8:	e0184800 	ands	r4, r8, r0, lsl #16
    16ac:	05000008 	streq	r0, [r0, #-8]
    16b0:	642c0287 	strtvs	r0, [ip], #-647	; 0xfffffd79
    16b4:	50000000 	andpl	r0, r0, r0
    16b8:	000a4e18 	andeq	r4, sl, r8, lsl lr
    16bc:	02880500 	addeq	r0, r8, #0, 10
    16c0:	0006a01a 	andeq	sl, r6, sl, lsl r0
    16c4:	f2185800 	vadd.i16	d5, d8, d0
    16c8:	05000008 	streq	r0, [r0, #-8]
    16cc:	fd160289 	ldc2	2, cr0, [r6, #-548]	; 0xfffffddc
    16d0:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
    16d4:	000a5318 	andeq	r5, sl, r8, lsl r3
    16d8:	028a0500 	addeq	r0, sl, #0, 10
    16dc:	0000fd16 	andeq	pc, r0, r6, lsl sp	; <UNPREDICTABLE>
    16e0:	7a187000 	bvc	61d6e8 <startup-0x1f9e2918>
    16e4:	05000008 	streq	r0, [r0, #-8]
    16e8:	fd16028b 	ldc2	2, cr0, [r6, #-556]	; 0xfffffdd4
    16ec:	78000000 	stmdavc	r0, {}	; <UNPREDICTABLE>
    16f0:	000a0b18 	andeq	r0, sl, r8, lsl fp
    16f4:	028c0500 	addeq	r0, ip, #0, 10
    16f8:	00080e10 	andeq	r0, r8, r0, lsl lr
    16fc:	ea188000 	b	621704 <startup-0x1f9de8fc>
    1700:	05000007 	streq	r0, [r0, #-7]
    1704:	1e10028d 	cdpne	2, 1, cr0, cr0, cr13, {4}
    1708:	88000008 	stmdahi	r0, {r3}
    170c:	0009c318 	andeq	ip, r9, r8, lsl r3
    1710:	028e0500 	addeq	r0, lr, #0, 10
    1714:	00002c0f 	andeq	r2, r0, pc, lsl #24
    1718:	3618a000 	ldrcc	sl, [r8], -r0
    171c:	05000007 	streq	r0, [r0, #-7]
    1720:	fd16028f 	ldc2	2, cr0, [r6, #-572]	; 0xfffffdc4
    1724:	a4000000 	strge	r0, [r0], #-0
    1728:	00068f18 	andeq	r8, r6, r8, lsl pc
    172c:	02900500 	addseq	r0, r0, #0, 10
    1730:	0000fd16 	andeq	pc, r0, r6, lsl sp	; <UNPREDICTABLE>
    1734:	2518ac00 	ldrcs	sl, [r8, #-3072]	; 0xfffff400
    1738:	05000007 	streq	r0, [r0, #-7]
    173c:	fd160291 	ldc2	2, cr0, [r6, #-580]	; 0xfffffdbc
    1740:	b4000000 	strlt	r0, [r0], #-0
    1744:	00064118 	andeq	r4, r6, r8, lsl r1
    1748:	02920500 	addseq	r0, r2, #0, 10
    174c:	0000fd16 	andeq	pc, r0, r6, lsl sp	; <UNPREDICTABLE>
    1750:	5018bc00 	andspl	fp, r8, r0, lsl #24
    1754:	05000006 	streq	r0, [r0, #-6]
    1758:	fd160293 	ldc2	2, cr0, [r6, #-588]	; 0xfffffdb4
    175c:	c4000000 	strgt	r0, [r0], #-0
    1760:	00089318 	andeq	r9, r8, r8, lsl r3
    1764:	02940500 	addseq	r0, r4, #0, 10
    1768:	00002c08 	andeq	r2, r0, r8, lsl #24
    176c:	0a00cc00 	beq	34774 <startup-0x1ffcb88c>
    1770:	0000011d 	andeq	r0, r0, sp, lsl r1
    1774:	0000080e 	andeq	r0, r0, lr, lsl #16
    1778:	0000250b 	andeq	r2, r0, fp, lsl #10
    177c:	0a001900 	beq	7b84 <startup-0x1fff847c>
    1780:	0000011d 	andeq	r0, r0, sp, lsl r1
    1784:	0000081e 	andeq	r0, r0, lr, lsl r8
    1788:	0000250b 	andeq	r2, r0, fp, lsl #10
    178c:	0a000700 	beq	3394 <startup-0x1fffcc6c>
    1790:	0000011d 	andeq	r0, r0, sp, lsl r1
    1794:	0000082e 	andeq	r0, r0, lr, lsr #16
    1798:	0000250b 	andeq	r2, r0, fp, lsl #10
    179c:	1b001700 	blne	73a4 <startup-0x1fff8c5c>
    17a0:	029905f0 	addseq	r0, r9, #240, 10	; 0x3c000000
    17a4:	00085507 	andeq	r5, r8, r7, lsl #10
    17a8:	08461800 	stmdaeq	r6, {fp, ip}^
    17ac:	9c050000 	stcls	0, cr0, [r5], {-0}
    17b0:	08551b02 	ldmdaeq	r5, {r1, r8, r9, fp, ip}^
    17b4:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    17b8:	0000083d 	andeq	r0, r0, sp, lsr r8
    17bc:	18029d05 	stmdane	r2, {r0, r2, r8, sl, fp, ip, pc}
    17c0:	00000865 	andeq	r0, r0, r5, ror #16
    17c4:	050a0078 	streq	r0, [sl, #-120]	; 0xffffff88
    17c8:	65000003 	strvs	r0, [r0, #-3]
    17cc:	0b000008 	bleq	17f4 <startup-0x1fffe80c>
    17d0:	00000025 	andeq	r0, r0, r5, lsr #32
    17d4:	250a001d 	strcs	r0, [sl, #-29]	; 0xffffffe3
    17d8:	75000000 	strvc	r0, [r0, #-0]
    17dc:	0b000008 	bleq	1804 <startup-0x1fffe7fc>
    17e0:	00000025 	andeq	r0, r0, r5, lsr #32
    17e4:	f01c001d 			; <UNDEFINED> instruction: 0xf01c001d
    17e8:	03027e05 	movweq	r7, #11781	; 0x2e05
    17ec:	0000089a 	muleq	r0, sl, r8
    17f0:	0009471d 	andeq	r4, r9, sp, lsl r7
    17f4:	02950500 	addseq	r0, r5, #0, 10
    17f8:	0006e90b 	andeq	lr, r6, fp, lsl #18
    17fc:	0a251d00 	beq	948c04 <startup-0x1f6b73fc>
    1800:	9e050000 	cdpls	0, 0, cr0, cr5, cr0, {0}
    1804:	082e0b02 	stmdaeq	lr!, {r1, r8, r9, fp}
    1808:	0a000000 	beq	1810 <startup-0x1fffe7f0>
    180c:	0000011d 	andeq	r0, r0, sp, lsl r1
    1810:	000008aa 	andeq	r0, r0, sl, lsr #17
    1814:	0000250b 	andeq	r2, r0, fp, lsl #10
    1818:	06001800 	streq	r1, [r0], -r0, lsl #16
    181c:	00000828 	andeq	r0, r0, r8, lsr #16
    1820:	08aa0405 	stmiaeq	sl!, {r0, r2, sl}
    1824:	c01e0000 	andsgt	r0, lr, r0
    1828:	16000008 	strne	r0, [r0], -r8
    182c:	0000046c 	andeq	r0, r0, ip, ror #8
    1830:	b5040500 	strlt	r0, [r4, #-1280]	; 0xfffffb00
    1834:	05000008 	streq	r0, [r0, #-8]
    1838:	00018f04 	andeq	r8, r1, r4, lsl #30
    183c:	08d71e00 	ldmeq	r7, {r9, sl, fp, ip}^
    1840:	2c160000 	ldccs	0, cr0, [r6], {-0}
    1844:	00000000 	andeq	r0, r0, r0
    1848:	08dd0405 	ldmeq	sp, {r0, r2, sl}^
    184c:	04050000 	streq	r0, [r5], #-0
    1850:	000008cc 	andeq	r0, r0, ip, asr #17
    1854:	00064e0a 	andeq	r4, r6, sl, lsl #28
    1858:	0008f300 	andeq	pc, r8, r0, lsl #6
    185c:	00250b00 	eoreq	r0, r5, r0, lsl #22
    1860:	00020000 	andeq	r0, r2, r0
    1864:	0009dd1f 	andeq	sp, r9, pc, lsl sp
    1868:	032e0500 			; <UNDEFINED> instruction: 0x032e0500
    186c:	00046c17 	andeq	r6, r4, r7, lsl ip
    1870:	09d61f00 	ldmibeq	r6, {r8, r9, sl, fp, ip}^
    1874:	2f050000 	svccs	0x00050000
    1878:	04721d03 	ldrbteq	r1, [r2], #-3331	; 0xfffff2fd
    187c:	91100000 	tstls	r0, r0
    1880:	02000000 	andeq	r0, r0, #0
    1884:	31100106 	tstcc	r0, r6, lsl #2
    1888:	11000009 	tstne	r0, r9
    188c:	02060078 	andeq	r0, r6, #120	; 0x78
    1890:	00003a13 	andeq	r3, r0, r3, lsl sl
    1894:	79110000 	ldmdbvc	r1, {}	; <UNPREDICTABLE>
    1898:	13030600 	movwne	r0, #13824	; 0x3600
    189c:	0000003a 	andeq	r0, r0, sl, lsr r0
    18a0:	98040001 	stmdals	r4, {r0}
    18a4:	06000000 	streq	r0, [r0], -r0
    18a8:	090d0204 	stmdbeq	sp, {r2, r9}
    18ac:	68100000 	ldmdavs	r0, {}	; <UNPREDICTABLE>
    18b0:	2c000001 	stccs	0, cr0, [r0], {1}
    18b4:	7e100806 	cdpvc	8, 1, cr0, cr0, cr6, {0}
    18b8:	0d000009 	stceq	0, cr0, [r0, #-36]	; 0xffffffdc
    18bc:	000002a3 	andeq	r0, r0, r3, lsr #5
    18c0:	2c090906 			; <UNDEFINED> instruction: 0x2c090906
    18c4:	00000000 	andeq	r0, r0, r0
    18c8:	0001720d 	andeq	r7, r1, sp, lsl #4
    18cc:	090a0600 	stmdbeq	sl, {r9, sl}
    18d0:	0000002c 	andeq	r0, r0, ip, lsr #32
    18d4:	01780d04 	cmneq	r8, r4, lsl #26
    18d8:	0b060000 	bleq	1818e0 <startup-0x1fe7e720>
    18dc:	00002c09 	andeq	r2, r0, r9, lsl #24
    18e0:	70110800 	andsvc	r0, r1, r0, lsl #16
    18e4:	0c060078 	stceq	0, cr0, [r6], {120}	; 0x78
    18e8:	00097e0b 	andeq	r7, r9, fp, lsl #28
    18ec:	0a000c00 	beq	48f4 <startup-0x1fffb70c>
    18f0:	00000931 	andeq	r0, r0, r1, lsr r9
    18f4:	0000098e 	andeq	r0, r0, lr, lsl #19
    18f8:	0000250b 	andeq	r2, r0, fp, lsl #10
    18fc:	04000f00 	streq	r0, [r0], #-3840	; 0xfffff100
    1900:	00000000 	andeq	r0, r0, r0
    1904:	9a0e0d06 	bls	384d24 <startup-0x1fc7b2dc>
    1908:	05000009 	streq	r0, [r0, #-9]
    190c:	00093d04 	andeq	r3, r9, r4, lsl #26
    1910:	02851000 	addeq	r1, r5, #0
    1914:	06240000 	strteq	r0, [r4], -r0
    1918:	0a23100f 	beq	8c595c <startup-0x1f73a6a4>
    191c:	67110000 	ldrvs	r0, [r1, -r0]
    1920:	06006f65 	streq	r6, [r0], -r5, ror #30
    1924:	098e0f10 	stmibeq	lr, {r4, r8, r9, sl, fp}
    1928:	0d000000 	stceq	0, cr0, [r0, #-0]
    192c:	00000065 	andeq	r0, r0, r5, rrx
    1930:	2c091106 	stfcss	f1, [r9], {6}
    1934:	04000000 	streq	r0, [r0], #-0
    1938:	00006a0d 	andeq	r6, r0, sp, lsl #20
    193c:	0e110600 	cfmsub32eq	mvax0, mvfx0, mvfx1, mvfx0
    1940:	0000002c 	andeq	r0, r0, ip, lsr #32
    1944:	00bd0d08 	adcseq	r0, sp, r8, lsl #26
    1948:	12060000 	andne	r0, r6, #0
    194c:	00002c09 	andeq	r2, r0, r9, lsl #24
    1950:	c20d0c00 	andgt	r0, sp, #0, 24
    1954:	06000000 	streq	r0, [r0], -r0
    1958:	002c0e12 	eoreq	r0, ip, r2, lsl lr
    195c:	0d100000 	ldceq	0, cr0, [r0, #-0]
    1960:	0000020b 	andeq	r0, r0, fp, lsl #4
    1964:	340d1306 	strcc	r1, [sp], #-774	; 0xfffffcfa
    1968:	1400000a 	strne	r0, [r0], #-10
    196c:	0005740d 	andeq	r7, r5, sp, lsl #8
    1970:	0d140600 	ldceq	6, cr0, [r4, #-0]
    1974:	00000a34 	andeq	r0, r0, r4, lsr sl
    1978:	06830d18 	pkhbteq	r0, r3, r8, lsl #26
    197c:	15060000 	strne	r0, [r6, #-0]
    1980:	000a340d 	andeq	r3, sl, sp, lsl #8
    1984:	b30d1c00 	movwlt	r1, #56320	; 0xdc00
    1988:	06000000 	streq	r0, [r0], -r0
    198c:	0a4f0d16 	beq	13c4dec <startup-0x1ec3b214>
    1990:	00200000 	eoreq	r0, r0, r0
    1994:	000a2e1e 	andeq	r2, sl, lr, lsl lr
    1998:	0a2e1600 	beq	b871a0 <startup-0x1f478e60>
    199c:	05000000 	streq	r0, [r0, #-0]
    19a0:	0009a004 	andeq	sl, r9, r4
    19a4:	23040500 	movwcs	r0, #17664	; 0x4500
    19a8:	1e00000a 	cdpne	0, 0, cr0, cr0, cr10, {0}
    19ac:	00000a4f 	andeq	r0, r0, pc, asr #20
    19b0:	000a2e16 	andeq	r2, sl, r6, lsl lr
    19b4:	002c1600 	eoreq	r1, ip, r0, lsl #12
    19b8:	2c160000 	ldccs	0, cr0, [r6], {-0}
    19bc:	00000000 	andeq	r0, r0, r0
    19c0:	0a3a0405 	beq	e829dc <startup-0x1f17d624>
    19c4:	cc040000 	stcgt	0, cr0, [r4], {-0}
    19c8:	06000002 	streq	r0, [r0], -r2
    19cc:	0a2e0c17 	beq	b84a30 <startup-0x1f47b5d0>
    19d0:	550a0000 	strpl	r0, [sl, #-0]
    19d4:	7100000a 	tstvc	r0, sl
    19d8:	0b00000a 	bleq	1a08 <startup-0x1fffe5f8>
    19dc:	00000025 	andeq	r0, r0, r5, lsr #32
    19e0:	82200063 	eorhi	r0, r0, #99	; 0x63
    19e4:	01000009 	tsteq	r0, r9
    19e8:	0a610905 	beq	1843e04 <startup-0x1e7bc1fc>
    19ec:	03050000 	movweq	r0, #20480	; 0x5000
    19f0:	2000337c 	andcs	r3, r0, ip, ror r3
    19f4:	0009d020 	andeq	sp, r9, r0, lsr #32
    19f8:	05060100 	streq	r0, [r6, #-256]	; 0xffffff00
    19fc:	0000002c 	andeq	r0, r0, ip, lsr #32
    1a00:	33740305 	cmncc	r4, #335544320	; 0x14000000
    1a04:	9e202000 	cdpls	0, 2, cr2, cr0, cr0, {0}
    1a08:	01000009 	tsteq	r0, r9
    1a0c:	002c0507 	eoreq	r0, ip, r7, lsl #10
    1a10:	03050000 	movweq	r0, #20480	; 0x5000
    1a14:	20003644 	andcs	r3, r0, r4, asr #12
    1a18:	0009a320 	andeq	sl, r9, r0, lsr #6
    1a1c:	05080100 	streq	r0, [r8, #-256]	; 0xffffff00
    1a20:	0000002c 	andeq	r0, r0, ip, lsr #32
    1a24:	33780305 	cmncc	r8, #335544320	; 0x14000000
    1a28:	81212000 			; <UNDEFINED> instruction: 0x81212000
    1a2c:	01000006 	tsteq	r0, r6
    1a30:	002c0530 	eoreq	r0, ip, r0, lsr r5
    1a34:	120c0000 	andne	r0, ip, #0
    1a38:	00482000 	subeq	r2, r8, r0
    1a3c:	9c010000 	stcls	0, cr0, [r1], {-0}
    1a40:	00000ae3 	andeq	r0, r0, r3, ror #21
    1a44:	0004b722 	andeq	fp, r4, r2, lsr #14
    1a48:	0c310100 	ldfeqs	f0, [r1], #-0
    1a4c:	00000a55 	andeq	r0, r0, r5, asr sl
    1a50:	00749102 	rsbseq	r9, r4, r2, lsl #2
    1a54:	0008eb23 	andeq	lr, r8, r3, lsr #22
    1a58:	06240100 	strteq	r0, [r4], -r0, lsl #2
    1a5c:	200011ac 	andcs	r1, r0, ip, lsr #3
    1a60:	00000060 	andeq	r0, r0, r0, rrx
    1a64:	0b099c01 	bleq	268a70 <startup-0x1fd97590>
    1a68:	b7240000 	strlt	r0, [r4, -r0]!
    1a6c:	01000004 	tsteq	r0, r4
    1a70:	0a551524 	beq	1546f08 <startup-0x1eab90f8>
    1a74:	91020000 	mrsls	r0, (UNDEF: 2)
    1a78:	29250074 	stmdbcs	r5!, {r2, r4, r5, r6}
    1a7c:	01000006 	tsteq	r0, r6
    1a80:	002c051f 	eoreq	r0, ip, pc, lsl r5
    1a84:	11980000 	orrsne	r0, r8, r0
    1a88:	00142000 	andseq	r2, r4, r0
    1a8c:	9c010000 	stcls	0, cr0, [r1], {-0}
    1a90:	00062125 	andeq	r2, r6, r5, lsr #2
    1a94:	061a0100 	ldreq	r0, [sl], -r0, lsl #2
    1a98:	00000b35 	andeq	r0, r0, r5, lsr fp
    1a9c:	2000117c 	andcs	r1, r0, ip, ror r1
    1aa0:	0000001c 	andeq	r0, r0, ip, lsl r0
    1aa4:	01029c01 	tsteq	r2, r1, lsl #24
    1aa8:	00088802 	andeq	r8, r8, r2, lsl #16
    1aac:	06ee2500 	strbteq	r2, [lr], r0, lsl #10
    1ab0:	15010000 	strne	r0, [r1, #-0]
    1ab4:	000b3506 	andeq	r3, fp, r6, lsl #10
    1ab8:	00116400 	andseq	r6, r1, r0, lsl #8
    1abc:	00001820 	andeq	r1, r0, r0, lsr #16
    1ac0:	259c0100 	ldrcs	r0, [ip, #256]	; 0x100
    1ac4:	000007c9 	andeq	r0, r0, r9, asr #15
    1ac8:	55091001 	strpl	r1, [r9, #-1]
    1acc:	4800000a 	stmdami	r0, {r1, r3}
    1ad0:	1c200011 	stcne	0, cr0, [r0], #-68	; 0xffffffbc
    1ad4:	01000000 	mrseq	r0, (UNDEF: 0)
    1ad8:	0909269c 	stmdbeq	r9, {r2, r3, r4, r7, r9, sl, sp}
    1adc:	0a010000 	beq	41ae4 <startup-0x1ffbe51c>
    1ae0:	00111806 	andseq	r1, r1, r6, lsl #16
    1ae4:	00003020 	andeq	r3, r0, r0, lsr #32
    1ae8:	279c0100 	ldrcs	r0, [ip, r0, lsl #2]
    1aec:	2000111e 	andcs	r1, r0, lr, lsl r1
    1af0:	0000001c 	andeq	r0, r0, ip, lsl r0
    1af4:	01006928 	tsteq	r0, r8, lsr #18
    1af8:	002c0d0b 	eoreq	r0, ip, fp, lsl #26
    1afc:	91020000 	mrsls	r0, (UNDEF: 2)
    1b00:	00000074 	andeq	r0, r0, r4, ror r0

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
   c:	10011117 	andne	r1, r1, r7, lsl r1
  10:	02000017 	andeq	r0, r0, #23
  14:	0b0b0024 	bleq	2c00ac <startup-0x1fd3ff54>
  18:	0e030b3e 	vmoveq.16	d3[0], r0
  1c:	01030000 	mrseq	r0, (UNDEF: 3)
  20:	01134901 	tsteq	r3, r1, lsl #18
  24:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
  28:	13490021 	movtne	r0, #36897	; 0x9021
  2c:	0000052f 	andeq	r0, r0, pc, lsr #10
  30:	49003505 	stmdbmi	r0, {r0, r2, r8, sl, ip, sp}
  34:	06000013 			; <UNDEFINED> instruction: 0x06000013
  38:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
  3c:	0b3b0b3a 	bleq	ec2d2c <startup-0x1f13d2d4>
  40:	13490b39 	movtne	r0, #39737	; 0x9b39
  44:	00001802 	andeq	r1, r0, r2, lsl #16
  48:	03011307 	movweq	r1, #4871	; 0x1307
  4c:	3a0b0b0e 	bcc	2c2c8c <startup-0x1fd3d374>
  50:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  54:	0013010b 	andseq	r0, r3, fp, lsl #2
  58:	000d0800 	andeq	r0, sp, r0, lsl #16
  5c:	0b3a0803 	bleq	e82070 <startup-0x1f17df90>
  60:	0b390b3b 	bleq	e42d54 <startup-0x1f1bd2ac>
  64:	0b381349 	bleq	e04d90 <startup-0x1f1fb270>
  68:	16090000 	strne	r0, [r9], -r0
  6c:	3a0e0300 	bcc	380c74 <startup-0x1fc7f38c>
  70:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  74:	0013490b 	andseq	r4, r3, fp, lsl #18
  78:	000d0a00 	andeq	r0, sp, r0, lsl #20
  7c:	0b3a0e03 	bleq	e83890 <startup-0x1f17c770>
  80:	0b390b3b 	bleq	e42d74 <startup-0x1f1bd28c>
  84:	0b381349 	bleq	e04db0 <startup-0x1f1fb250>
  88:	240b0000 	strcs	r0, [fp], #-0
  8c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
  90:	0008030b 	andeq	r0, r8, fp, lsl #6
  94:	00210c00 	eoreq	r0, r1, r0, lsl #24
  98:	0b2f1349 	bleq	bc4dc4 <startup-0x1f43b23c>
  9c:	0f0d0000 	svceq	0x000d0000
  a0:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
  a4:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
  a8:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
  ac:	00001301 	andeq	r1, r0, r1, lsl #6
  b0:	4900050f 	stmdbmi	r0, {r0, r1, r2, r3, r8, sl}
  b4:	10000013 	andne	r0, r0, r3, lsl r0
  b8:	0b0b0113 	bleq	2c050c <startup-0x1fd3faf4>
  bc:	0b3b0b3a 	bleq	ec2dac <startup-0x1f13d254>
  c0:	13010b39 	movwne	r0, #6969	; 0x1b39
  c4:	34110000 	ldrcc	r0, [r1], #-0
  c8:	3a0e0300 	bcc	380cd0 <startup-0x1fc7f330>
  cc:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  d0:	3f13490b 	svccc	0x0013490b
  d4:	00180219 	andseq	r0, r8, r9, lsl r2
  d8:	012e1200 			; <UNDEFINED> instruction: 0x012e1200
  dc:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
  e0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
  e4:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
  e8:	06120111 			; <UNDEFINED> instruction: 0x06120111
  ec:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
  f0:	00130119 	andseq	r0, r3, r9, lsl r1
  f4:	00051300 	andeq	r1, r5, r0, lsl #6
  f8:	0b3a0e03 	bleq	e8390c <startup-0x1f17c6f4>
  fc:	0b39053b 	bleq	e415f0 <startup-0x1f1bea10>
 100:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 104:	34140000 	ldrcc	r0, [r4], #-0
 108:	3a0e0300 	bcc	380d10 <startup-0x1fc7f2f0>
 10c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 110:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 114:	15000018 	strne	r0, [r0, #-24]	; 0xffffffe8
 118:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 11c:	0b3a0e03 	bleq	e83930 <startup-0x1f17c6d0>
 120:	0b39053b 	bleq	e41614 <startup-0x1f1be9ec>
 124:	06120111 			; <UNDEFINED> instruction: 0x06120111
 128:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 12c:	16000019 			; <UNDEFINED> instruction: 0x16000019
 130:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 134:	0b3a0e03 	bleq	e83948 <startup-0x1f17c6b8>
 138:	0b39053b 	bleq	e4162c <startup-0x1f1be9d4>
 13c:	01111927 	tsteq	r1, r7, lsr #18
 140:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 144:	01194297 			; <UNDEFINED> instruction: 0x01194297
 148:	17000013 	smladne	r0, r3, r0, r0
 14c:	08030005 	stmdaeq	r3, {r0, r2}
 150:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 154:	13490b39 	movtne	r0, #39737	; 0x9b39
 158:	00001802 	andeq	r1, r0, r2, lsl #16
 15c:	03003418 	movweq	r3, #1048	; 0x418
 160:	3b0b3a08 	blcc	2ce988 <startup-0x1fd31678>
 164:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
 168:	00180213 	andseq	r0, r8, r3, lsl r2
 16c:	010b1900 	tsteq	fp, r0, lsl #18
 170:	06120111 			; <UNDEFINED> instruction: 0x06120111
 174:	2e1a0000 	cdpcs	0, 1, cr0, cr10, cr0, {0}
 178:	03193f00 	tsteq	r9, #0, 30
 17c:	3b0b3a0e 	blcc	2ce9bc <startup-0x1fd31644>
 180:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
 184:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 188:	97184006 	ldrls	r4, [r8, -r6]
 18c:	00001942 	andeq	r1, r0, r2, asr #18
 190:	3f012e1b 	svccc	0x00012e1b
 194:	3a0e0319 	bcc	380e00 <startup-0x1fc7f200>
 198:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 19c:	1119270b 	tstne	r9, fp, lsl #14
 1a0:	40061201 	andmi	r1, r6, r1, lsl #4
 1a4:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 1a8:	00001301 	andeq	r1, r0, r1, lsl #6
 1ac:	0300051c 	movweq	r0, #1308	; 0x51c
 1b0:	3b0b3a08 	blcc	2ce9d8 <startup-0x1fd31628>
 1b4:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 1b8:	00180213 	andseq	r0, r8, r3, lsl r2
 1bc:	012e1d00 			; <UNDEFINED> instruction: 0x012e1d00
 1c0:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 1c4:	0b3b0b3a 	bleq	ec2eb4 <startup-0x1f13d14c>
 1c8:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 1cc:	06120111 			; <UNDEFINED> instruction: 0x06120111
 1d0:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 1d4:	00130119 	andseq	r0, r3, r9, lsl r1
 1d8:	00341e00 	eorseq	r1, r4, r0, lsl #28
 1dc:	0b3a0803 	bleq	e821f0 <startup-0x1f17de10>
 1e0:	0b390b3b 	bleq	e42ed4 <startup-0x1f1bd12c>
 1e4:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 1e8:	0b1f0000 	bleq	7c01f0 <startup-0x1f83fe10>
 1ec:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
 1f0:	00130106 	andseq	r0, r3, r6, lsl #2
 1f4:	012e2000 			; <UNDEFINED> instruction: 0x012e2000
 1f8:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 1fc:	0b3b0b3a 	bleq	ec2eec <startup-0x1f13d114>
 200:	13490b39 	movtne	r0, #39737	; 0x9b39
 204:	0000193c 	andeq	r1, r0, ip, lsr r9
 208:	00001821 	andeq	r1, r0, r1, lsr #16
 20c:	012e2200 			; <UNDEFINED> instruction: 0x012e2200
 210:	0b3a0e03 	bleq	e83a24 <startup-0x1f17c5dc>
 214:	0b390b3b 	bleq	e42f08 <startup-0x1f1bd0f8>
 218:	01111927 	tsteq	r1, r7, lsr #18
 21c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 220:	01194297 			; <UNDEFINED> instruction: 0x01194297
 224:	23000013 	movwcs	r0, #19
 228:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 22c:	0b3b0b3a 	bleq	ec2f1c <startup-0x1f13d0e4>
 230:	13490b39 	movtne	r0, #39737	; 0x9b39
 234:	00001802 	andeq	r1, r0, r2, lsl #16
 238:	3f002e24 	svccc	0x00002e24
 23c:	3a0e0319 	bcc	380ea8 <startup-0x1fc7f158>
 240:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 244:	1119270b 	tstne	r9, fp, lsl #14
 248:	40061201 	andmi	r1, r6, r1, lsl #4
 24c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 250:	01000000 	mrseq	r0, (UNDEF: 0)
 254:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 258:	0e030b13 	vmoveq.32	d3[0], r0
 25c:	01110e1b 	tsteq	r1, fp, lsl lr
 260:	17100612 			; <UNDEFINED> instruction: 0x17100612
 264:	24020000 	strcs	r0, [r2], #-0
 268:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 26c:	000e030b 	andeq	r0, lr, fp, lsl #6
 270:	012e0300 			; <UNDEFINED> instruction: 0x012e0300
 274:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 278:	0b3b0b3a 	bleq	ec2f68 <startup-0x1f13d098>
 27c:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 280:	06120111 			; <UNDEFINED> instruction: 0x06120111
 284:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 288:	00130119 	andseq	r0, r3, r9, lsl r1
 28c:	00050400 	andeq	r0, r5, r0, lsl #8
 290:	0b3a0803 	bleq	e822a4 <startup-0x1f17dd5c>
 294:	0b390b3b 	bleq	e42f88 <startup-0x1f1bd078>
 298:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 29c:	34050000 	strcc	r0, [r5], #-0
 2a0:	3a0e0300 	bcc	380ea8 <startup-0x1fc7f158>
 2a4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 2a8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 2ac:	06000018 			; <UNDEFINED> instruction: 0x06000018
 2b0:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 2b4:	0b3a0e03 	bleq	e83ac8 <startup-0x1f17c538>
 2b8:	0b390b3b 	bleq	e42fac <startup-0x1f1bd054>
 2bc:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
 2c0:	18070000 	stmdane	r7, {}	; <UNPREDICTABLE>
 2c4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
 2c8:	0b0b0024 	bleq	2c0360 <startup-0x1fd3fca0>
 2cc:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 2d0:	2e090000 	cdpcs	0, 0, cr0, cr9, cr0, {0}
 2d4:	03193f01 	tsteq	r9, #1, 30
 2d8:	3b0b3a0e 	blcc	2ceb18 <startup-0x1fd314e8>
 2dc:	110b390b 	tstne	fp, fp, lsl #18
 2e0:	40061201 	andmi	r1, r6, r1, lsl #4
 2e4:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 2e8:	00001301 	andeq	r1, r0, r1, lsl #6
 2ec:	3f012e0a 	svccc	0x00012e0a
 2f0:	3a0e0319 	bcc	380f5c <startup-0x1fc7f0a4>
 2f4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 2f8:	3c13490b 			; <UNDEFINED> instruction: 0x3c13490b
 2fc:	00130119 	andseq	r0, r3, r9, lsl r1
 300:	012e0b00 			; <UNDEFINED> instruction: 0x012e0b00
 304:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 308:	0b3b0b3a 	bleq	ec2ff8 <startup-0x1f13d008>
 30c:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 310:	01111349 	tsteq	r1, r9, asr #6
 314:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 318:	01194296 			; <UNDEFINED> instruction: 0x01194296
 31c:	0c000013 	stceq	0, cr0, [r0], {19}
 320:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 324:	0b3b0b3a 	bleq	ec3014 <startup-0x1f13cfec>
 328:	13490b39 	movtne	r0, #39737	; 0x9b39
 32c:	00001802 	andeq	r1, r0, r2, lsl #16
 330:	3f012e0d 	svccc	0x00012e0d
 334:	3a0e0319 	bcc	380fa0 <startup-0x1fc7f060>
 338:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 33c:	1119270b 	tstne	r9, fp, lsl #14
 340:	40061201 	andmi	r1, r6, r1, lsl #4
 344:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 348:	00001301 	andeq	r1, r0, r1, lsl #6
 34c:	3f002e0e 	svccc	0x00002e0e
 350:	3a0e0319 	bcc	380fbc <startup-0x1fc7f044>
 354:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 358:	1119270b 	tstne	r9, fp, lsl #14
 35c:	40061201 	andmi	r1, r6, r1, lsl #4
 360:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 364:	01000000 	mrseq	r0, (UNDEF: 0)
 368:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 36c:	0e030b13 	vmoveq.32	d3[0], r0
 370:	01110e1b 	tsteq	r1, fp, lsl lr
 374:	17100612 			; <UNDEFINED> instruction: 0x17100612
 378:	24020000 	strcs	r0, [r2], #-0
 37c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 380:	000e030b 	andeq	r0, lr, fp, lsl #6
 384:	012e0300 			; <UNDEFINED> instruction: 0x012e0300
 388:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 38c:	0b3b0b3a 	bleq	ec307c <startup-0x1f13cf84>
 390:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 394:	06120111 			; <UNDEFINED> instruction: 0x06120111
 398:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 39c:	00130119 	andseq	r0, r3, r9, lsl r1
 3a0:	00050400 	andeq	r0, r5, r0, lsl #8
 3a4:	0b3a0803 	bleq	e823b8 <startup-0x1f17dc48>
 3a8:	0b390b3b 	bleq	e4309c <startup-0x1f1bcf64>
 3ac:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 3b0:	2e050000 	cdpcs	0, 0, cr0, cr5, cr0, {0}
 3b4:	03193f01 	tsteq	r9, #1, 30
 3b8:	3b0b3a0e 	blcc	2cebf8 <startup-0x1fd31408>
 3bc:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
 3c0:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 3c4:	97184006 	ldrls	r4, [r8, -r6]
 3c8:	13011942 	movwne	r1, #6466	; 0x1942
 3cc:	2e060000 	cdpcs	0, 0, cr0, cr6, cr0, {0}
 3d0:	03193f00 	tsteq	r9, #0, 30
 3d4:	3b0b3a0e 	blcc	2cec14 <startup-0x1fd313ec>
 3d8:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
 3dc:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 3e0:	97184006 	ldrls	r4, [r8, -r6]
 3e4:	00001942 	andeq	r1, r0, r2, asr #18
 3e8:	01110100 	tsteq	r1, r0, lsl #2
 3ec:	0b130e25 	bleq	4c3c88 <startup-0x1fb3c378>
 3f0:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
 3f4:	06120111 			; <UNDEFINED> instruction: 0x06120111
 3f8:	00001710 	andeq	r1, r0, r0, lsl r7
 3fc:	03001602 	movweq	r1, #1538	; 0x602
 400:	3b0b3a0e 	blcc	2cec40 <startup-0x1fd313c0>
 404:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 408:	03000013 	movweq	r0, #19
 40c:	0b0b0024 	bleq	2c04a4 <startup-0x1fd3fb5c>
 410:	0e030b3e 	vmoveq.16	d3[0], r0
 414:	01040000 	mrseq	r0, (UNDEF: 4)
 418:	01134901 	tsteq	r3, r1, lsl #18
 41c:	05000013 	streq	r0, [r0, #-19]	; 0xffffffed
 420:	13490021 	movtne	r0, #36897	; 0x9021
 424:	0000052f 	andeq	r0, r0, pc, lsr #10
 428:	49003506 	stmdbmi	r0, {r1, r2, r8, sl, ip, sp}
 42c:	07000013 	smladeq	r0, r3, r0, r0
 430:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 434:	0b3b0b3a 	bleq	ec3124 <startup-0x1f13cedc>
 438:	13490b39 	movtne	r0, #39737	; 0x9b39
 43c:	00001802 	andeq	r1, r0, r2, lsl #16
 440:	3f012e08 	svccc	0x00012e08
 444:	3a0e0319 	bcc	3810b0 <startup-0x1fc7ef50>
 448:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 44c:	1119270b 	tstne	r9, fp, lsl #14
 450:	40061201 	andmi	r1, r6, r1, lsl #4
 454:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 458:	00001301 	andeq	r1, r0, r1, lsl #6
 45c:	03003409 	movweq	r3, #1033	; 0x409
 460:	3b0b3a08 	blcc	2cec88 <startup-0x1fd31378>
 464:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 468:	00180213 	andseq	r0, r8, r3, lsl r2
 46c:	012e0a00 			; <UNDEFINED> instruction: 0x012e0a00
 470:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 474:	0b3b0b3a 	bleq	ec3164 <startup-0x1f13ce9c>
 478:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 47c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 480:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 484:	00130119 	andseq	r0, r3, r9, lsl r1
 488:	00050b00 	andeq	r0, r5, r0, lsl #22
 48c:	0b3a0803 	bleq	e824a0 <startup-0x1f17db60>
 490:	0b390b3b 	bleq	e43184 <startup-0x1f1bce7c>
 494:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 498:	240c0000 	strcs	r0, [ip], #-0
 49c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 4a0:	0008030b 	andeq	r0, r8, fp, lsl #6
 4a4:	012e0d00 			; <UNDEFINED> instruction: 0x012e0d00
 4a8:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 4ac:	0b3b0b3a 	bleq	ec319c <startup-0x1f13ce64>
 4b0:	01110b39 	tsteq	r1, r9, lsr fp
 4b4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 4b8:	01194297 			; <UNDEFINED> instruction: 0x01194297
 4bc:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
 4c0:	0111010b 	tsteq	r1, fp, lsl #2
 4c4:	00000612 	andeq	r0, r0, r2, lsl r6
 4c8:	0300050f 	movweq	r0, #1295	; 0x50f
 4cc:	3b0b3a0e 	blcc	2ced0c <startup-0x1fd312f4>
 4d0:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 4d4:	00180213 	andseq	r0, r8, r3, lsl r2
 4d8:	012e1000 			; <UNDEFINED> instruction: 0x012e1000
 4dc:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 4e0:	0b3b0b3a 	bleq	ec31d0 <startup-0x1f13ce30>
 4e4:	13490b39 	movtne	r0, #39737	; 0x9b39
 4e8:	0000193c 	andeq	r1, r0, ip, lsr r9
 4ec:	00001811 	andeq	r1, r0, r1, lsl r8
 4f0:	012e1200 			; <UNDEFINED> instruction: 0x012e1200
 4f4:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 4f8:	0b3b0b3a 	bleq	ec31e8 <startup-0x1f13ce18>
 4fc:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 500:	01111349 	tsteq	r1, r9, asr #6
 504:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 508:	01194296 			; <UNDEFINED> instruction: 0x01194296
 50c:	13000013 	movwne	r0, #19
 510:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 514:	0b3a0e03 	bleq	e83d28 <startup-0x1f17c2d8>
 518:	0b390b3b 	bleq	e4320c <startup-0x1f1bcdf4>
 51c:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
 520:	00001301 	andeq	r1, r0, r1, lsl #6
 524:	3f012e14 	svccc	0x00012e14
 528:	3a0e0319 	bcc	381194 <startup-0x1fc7ee6c>
 52c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 530:	1119270b 	tstne	r9, fp, lsl #14
 534:	40061201 	andmi	r1, r6, r1, lsl #4
 538:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 53c:	01000000 	mrseq	r0, (UNDEF: 0)
 540:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 544:	0e030b13 	vmoveq.32	d3[0], r0
 548:	01110e1b 	tsteq	r1, fp, lsl lr
 54c:	17100612 			; <UNDEFINED> instruction: 0x17100612
 550:	24020000 	strcs	r0, [r2], #-0
 554:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 558:	000e030b 	andeq	r0, lr, fp, lsl #6
 55c:	012e0300 			; <UNDEFINED> instruction: 0x012e0300
 560:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 564:	0b3b0b3a 	bleq	ec3254 <startup-0x1f13cdac>
 568:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 56c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 570:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 574:	00130119 	andseq	r0, r3, r9, lsl r1
 578:	00050400 	andeq	r0, r5, r0, lsl #8
 57c:	0b3a0803 	bleq	e82590 <startup-0x1f17da70>
 580:	0b390b3b 	bleq	e43274 <startup-0x1f1bcd8c>
 584:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 588:	2e050000 	cdpcs	0, 0, cr0, cr5, cr0, {0}
 58c:	03193f01 	tsteq	r9, #1, 30
 590:	3b0b3a0e 	blcc	2cedd0 <startup-0x1fd31230>
 594:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
 598:	11134919 	tstne	r3, r9, lsl r9
 59c:	40061201 	andmi	r1, r6, r1, lsl #4
 5a0:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 5a4:	00001301 	andeq	r1, r0, r1, lsl #6
 5a8:	03003406 	movweq	r3, #1030	; 0x406
 5ac:	3b0b3a0e 	blcc	2cedec <startup-0x1fd31214>
 5b0:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 5b4:	00180213 	andseq	r0, r8, r3, lsl r2
 5b8:	00340700 	eorseq	r0, r4, r0, lsl #14
 5bc:	0b3a0803 	bleq	e825d0 <startup-0x1f17da30>
 5c0:	0b390b3b 	bleq	e432b4 <startup-0x1f1bcd4c>
 5c4:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 5c8:	01080000 	mrseq	r0, (UNDEF: 8)
 5cc:	01134901 	tsteq	r3, r1, lsl #18
 5d0:	09000013 	stmdbeq	r0, {r0, r1, r4}
 5d4:	13490021 	movtne	r0, #36897	; 0x9021
 5d8:	00000b2f 	andeq	r0, r0, pc, lsr #22
 5dc:	0b00240a 	bleq	960c <startup-0x1fff69f4>
 5e0:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 5e4:	0b000008 	bleq	60c <startup-0x1ffff9f4>
 5e8:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 5ec:	0b3a0e03 	bleq	e83e00 <startup-0x1f17c200>
 5f0:	0b390b3b 	bleq	e432e4 <startup-0x1f1bcd1c>
 5f4:	01111349 	tsteq	r1, r9, asr #6
 5f8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 5fc:	01194297 			; <UNDEFINED> instruction: 0x01194297
 600:	0c000013 	stceq	0, cr0, [r0], {19}
 604:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 608:	0b3a0e03 	bleq	e83e1c <startup-0x1f17c1e4>
 60c:	0b390b3b 	bleq	e43300 <startup-0x1f1bcd00>
 610:	01111927 	tsteq	r1, r7, lsr #18
 614:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 618:	00194297 	mulseq	r9, r7, r2
 61c:	11010000 	mrsne	r0, (UNDEF: 1)
 620:	130e2501 	movwne	r2, #58625	; 0xe501
 624:	1b0e030b 	blne	381258 <startup-0x1fc7eda8>
 628:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
 62c:	00171006 	andseq	r1, r7, r6
 630:	00240200 	eoreq	r0, r4, r0, lsl #4
 634:	0b3e0b0b 	bleq	f83268 <startup-0x1f07cd98>
 638:	00000e03 	andeq	r0, r0, r3, lsl #28
 63c:	0b002403 	bleq	9650 <startup-0x1fff69b0>
 640:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 644:	04000008 	streq	r0, [r0], #-8
 648:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
 64c:	0b3b0b3a 	bleq	ec333c <startup-0x1f13ccc4>
 650:	13490b39 	movtne	r0, #39737	; 0x9b39
 654:	0f050000 	svceq	0x00050000
 658:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
 65c:	06000013 			; <UNDEFINED> instruction: 0x06000013
 660:	0e030013 	mcreq	0, 0, r0, cr3, cr3, {0}
 664:	0000193c 	andeq	r1, r0, ip, lsr r9
 668:	03001607 	movweq	r1, #1543	; 0x607
 66c:	3b0b3a0e 	blcc	2ceeac <startup-0x1fd31154>
 670:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
 674:	08000013 	stmdaeq	r0, {r0, r1, r4}
 678:	0b0b0117 	bleq	2c0adc <startup-0x1fd3f524>
 67c:	0b3b0b3a 	bleq	ec336c <startup-0x1f13cc94>
 680:	13010b39 	movwne	r0, #6969	; 0x1b39
 684:	0d090000 	stceq	0, cr0, [r9, #-0]
 688:	3a0e0300 	bcc	381290 <startup-0x1fc7ed70>
 68c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 690:	0013490b 	andseq	r4, r3, fp, lsl #18
 694:	01010a00 	tsteq	r1, r0, lsl #20
 698:	13011349 	movwne	r1, #4937	; 0x1349
 69c:	210b0000 	mrscs	r0, (UNDEF: 11)
 6a0:	2f134900 	svccs	0x00134900
 6a4:	0c00000b 	stceq	0, cr0, [r0], {11}
 6a8:	0b0b0113 	bleq	2c0afc <startup-0x1fd3f504>
 6ac:	0b3b0b3a 	bleq	ec339c <startup-0x1f13cc64>
 6b0:	13010b39 	movwne	r0, #6969	; 0x1b39
 6b4:	0d0d0000 	stceq	0, cr0, [sp, #-0]
 6b8:	3a0e0300 	bcc	3812c0 <startup-0x1fc7ed40>
 6bc:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 6c0:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 6c4:	0e00000b 	cdpeq	0, 0, cr0, cr0, cr11, {0}
 6c8:	0b0b000f 	bleq	2c070c <startup-0x1fd3f8f4>
 6cc:	260f0000 	strcs	r0, [pc], -r0
 6d0:	00134900 	andseq	r4, r3, r0, lsl #18
 6d4:	01131000 	tsteq	r3, r0
 6d8:	0b0b0e03 	bleq	2c3eec <startup-0x1fd3c114>
 6dc:	0b3b0b3a 	bleq	ec33cc <startup-0x1f13cc34>
 6e0:	13010b39 	movwne	r0, #6969	; 0x1b39
 6e4:	0d110000 	ldceq	0, cr0, [r1, #-0]
 6e8:	3a080300 	bcc	2012f0 <startup-0x1fdfed10>
 6ec:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 6f0:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 6f4:	1200000b 	andne	r0, r0, #11
 6f8:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
 6fc:	0b3a050b 	bleq	e81b30 <startup-0x1f17e4d0>
 700:	0b390b3b 	bleq	e433f4 <startup-0x1f1bcc0c>
 704:	00001301 	andeq	r1, r0, r1, lsl #6
 708:	03000d13 	movweq	r0, #3347	; 0xd13
 70c:	3b0b3a0e 	blcc	2cef4c <startup-0x1fd310b4>
 710:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 714:	00053813 	andeq	r3, r5, r3, lsl r8
 718:	00151400 	andseq	r1, r5, r0, lsl #8
 71c:	00001927 	andeq	r1, r0, r7, lsr #18
 720:	27011515 	smladcs	r1, r5, r5, r1
 724:	01134919 	tsteq	r3, r9, lsl r9
 728:	16000013 			; <UNDEFINED> instruction: 0x16000013
 72c:	13490005 	movtne	r0, #36869	; 0x9005
 730:	13170000 	tstne	r7, #0
 734:	0b0e0301 	bleq	381340 <startup-0x1fc7ecc0>
 738:	3b0b3a05 	blcc	2cef54 <startup-0x1fd310ac>
 73c:	010b3905 	tsteq	fp, r5, lsl #18
 740:	18000013 	stmdane	r0, {r0, r1, r4}
 744:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 748:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 74c:	13490b39 	movtne	r0, #39737	; 0x9b39
 750:	00000b38 	andeq	r0, r0, r8, lsr fp
 754:	03000d19 	movweq	r0, #3353	; 0xd19
 758:	3b0b3a0e 	blcc	2cef98 <startup-0x1fd31068>
 75c:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
 760:	00053813 	andeq	r3, r5, r3, lsl r8
 764:	01131a00 	tsteq	r3, r0, lsl #20
 768:	0b0b0e03 	bleq	2c3f7c <startup-0x1fd3c084>
 76c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 770:	13010b39 	movwne	r0, #6969	; 0x1b39
 774:	131b0000 	tstne	fp, #0
 778:	3a0b0b01 	bcc	2c3384 <startup-0x1fd3cc7c>
 77c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 780:	0013010b 	andseq	r0, r3, fp, lsl #2
 784:	01171c00 	tsteq	r7, r0, lsl #24
 788:	0b3a0b0b 	bleq	e833bc <startup-0x1f17cc44>
 78c:	0b39053b 	bleq	e41c80 <startup-0x1f1be380>
 790:	00001301 	andeq	r1, r0, r1, lsl #6
 794:	03000d1d 	movweq	r0, #3357	; 0xd1d
 798:	3b0b3a0e 	blcc	2cefd8 <startup-0x1fd31028>
 79c:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
 7a0:	1e000013 	mcrne	0, 0, r0, cr0, cr3, {0}
 7a4:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
 7a8:	00001301 	andeq	r1, r0, r1, lsl #6
 7ac:	0300341f 	movweq	r3, #1055	; 0x41f
 7b0:	3b0b3a0e 	blcc	2ceff0 <startup-0x1fd31010>
 7b4:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
 7b8:	3c193f13 	ldccc	15, cr3, [r9], {19}
 7bc:	20000019 	andcs	r0, r0, r9, lsl r0
 7c0:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 7c4:	0b3b0b3a 	bleq	ec34b4 <startup-0x1f13cb4c>
 7c8:	13490b39 	movtne	r0, #39737	; 0x9b39
 7cc:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 7d0:	2e210000 	cdpcs	0, 2, cr0, cr1, cr0, {0}
 7d4:	03193f01 	tsteq	r9, #1, 30
 7d8:	3b0b3a0e 	blcc	2cf018 <startup-0x1fd30fe8>
 7dc:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 7e0:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 7e4:	97184006 	ldrls	r4, [r8, -r6]
 7e8:	13011942 	movwne	r1, #6466	; 0x1942
 7ec:	34220000 	strtcc	r0, [r2], #-0
 7f0:	3a0e0300 	bcc	3813f8 <startup-0x1fc7ec08>
 7f4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 7f8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 7fc:	23000018 	movwcs	r0, #24
 800:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 804:	0b3a0e03 	bleq	e84018 <startup-0x1f17bfe8>
 808:	0b390b3b 	bleq	e434fc <startup-0x1f1bcb04>
 80c:	01111927 	tsteq	r1, r7, lsr #18
 810:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 814:	01194296 			; <UNDEFINED> instruction: 0x01194296
 818:	24000013 	strcs	r0, [r0], #-19	; 0xffffffed
 81c:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 820:	0b3b0b3a 	bleq	ec3510 <startup-0x1f13caf0>
 824:	13490b39 	movtne	r0, #39737	; 0x9b39
 828:	00001802 	andeq	r1, r0, r2, lsl #16
 82c:	3f002e25 	svccc	0x00002e25
 830:	3a0e0319 	bcc	38149c <startup-0x1fc7eb64>
 834:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 838:	1113490b 	tstne	r3, fp, lsl #18
 83c:	40061201 	andmi	r1, r6, r1, lsl #4
 840:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 844:	2e260000 	cdpcs	0, 2, cr0, cr6, cr0, {0}
 848:	03193f01 	tsteq	r9, #1, 30
 84c:	3b0b3a0e 	blcc	2cf08c <startup-0x1fd30f74>
 850:	110b390b 	tstne	fp, fp, lsl #18
 854:	40061201 	andmi	r1, r6, r1, lsl #4
 858:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 85c:	0b270000 	bleq	9c0864 <startup-0x1f63f79c>
 860:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
 864:	28000006 	stmdacs	r0, {r1, r2}
 868:	08030034 	stmdaeq	r3, {r2, r4, r5}
 86c:	0b3b0b3a 	bleq	ec355c <startup-0x1f13caa4>
 870:	13490b39 	movtne	r0, #39737	; 0x9b39
 874:	00001802 	andeq	r1, r0, r2, lsl #16
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	000007a8 	andeq	r0, r0, r8, lsr #15
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
	...
  28:	0000001c 	andeq	r0, r0, ip, lsl r0
  2c:	07540002 	ldrbeq	r0, [r4, -r2]
  30:	00040000 	andeq	r0, r4, r0
  34:	00000000 	andeq	r0, r0, r0
  38:	200007b8 			; <UNDEFINED> instruction: 0x200007b8
  3c:	000002e6 	andeq	r0, r0, r6, ror #5
	...
  48:	0000001c 	andeq	r0, r0, ip, lsl r0
  4c:	0a1f0002 	beq	7c005c <startup-0x1f83ffa4>
  50:	00040000 	andeq	r0, r4, r0
  54:	00000000 	andeq	r0, r0, r0
  58:	20000aa0 	andcs	r0, r0, r0, lsr #21
  5c:	00000062 	andeq	r0, r0, r2, rrx
	...
  68:	0000001c 	andeq	r0, r0, ip, lsl r0
  6c:	0ac10002 	beq	ff04007c <rear+0xdf03ca38>
  70:	00040000 	andeq	r0, r4, r0
  74:	00000000 	andeq	r0, r0, r0
  78:	20000b04 	andcs	r0, r0, r4, lsl #22
  7c:	00000524 	andeq	r0, r0, r4, lsr #10
	...
  88:	0000001c 	andeq	r0, r0, ip, lsl r0
  8c:	0e4d0002 	cdpeq	0, 4, cr0, cr13, cr2, {0}
  90:	00040000 	andeq	r0, r4, r0
  94:	00000000 	andeq	r0, r0, r0
  98:	20001028 	andcs	r1, r0, r8, lsr #32
  9c:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
	...
  a8:	0000001c 	andeq	r0, r0, ip, lsl r0
  ac:	0f710002 	svceq	0x00710002
  b0:	00040000 	andeq	r0, r4, r0
  b4:	00000000 	andeq	r0, r0, r0
  b8:	20001118 	andcs	r1, r0, r8, lsl r1
  bc:	0000013c 	andeq	r0, r0, ip, lsr r1
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20000010 	andcs	r0, r0, r0, lsl r0
   4:	200007b8 			; <UNDEFINED> instruction: 0x200007b8
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	0000053a 	andeq	r0, r0, sl, lsr r5
   4:	006c0003 	rsbeq	r0, ip, r3
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	43010000 	movwmi	r0, #4096	; 0x1000
  1c:	4f4d2f3a 	svcmi	0x004d2f3a
  20:	4f4d2f50 	svcmi	0x004d2f50
  24:	70532d50 	subsvc	r2, r3, r0, asr sp
  28:	532f6c65 			; <UNDEFINED> instruction: 0x532f6c65
  2c:	656b616e 	strbvs	r6, [fp, #-366]!	; 0xfffffe92
  30:	74730000 	ldrbtvc	r0, [r3], #-0
  34:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
  38:	00632e70 	rsbeq	r2, r3, r0, ror lr
  3c:	67000001 	strvs	r0, [r0, -r1]
  40:	656d6f65 	strbvs	r6, [sp, #-3941]!	; 0xfffff09b
  44:	63697274 	cmnvs	r9, #116, 4	; 0x40000007
  48:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
  4c:	682e7463 	stmdavs	lr!, {r0, r1, r5, r6, sl, ip, sp, lr}
  50:	00000100 	andeq	r0, r0, r0, lsl #2
  54:	70617267 	rsbvc	r7, r1, r7, ror #4
  58:	64636968 	strbtvs	r6, [r3], #-2408	; 0xfffff698
  5c:	6c707369 	ldclvs	3, cr7, [r0], #-420	; 0xfffffe5c
  60:	682e7961 	stmdavs	lr!, {r0, r5, r6, r8, fp, ip, sp, lr}
  64:	00000100 	andeq	r0, r0, r0, lsl #2
  68:	67616d69 	strbvs	r6, [r1, -r9, ror #26]!
  6c:	62782e65 	rsbsvs	r2, r8, #1616	; 0x650
  70:	0001006d 	andeq	r0, r1, sp, rrx
  74:	01050000 	mrseq	r0, (UNDEF: 5)
  78:	00020500 	andeq	r0, r2, r0, lsl #10
  7c:	03200000 	nopeq	{0}	; <UNPREDICTABLE>
  80:	2113011a 	tstcs	r3, sl, lsl r1
  84:	02212f21 	eoreq	r2, r1, #33, 30	; 0x84
  88:	01010003 	tsteq	r1, r3
  8c:	05003905 	streq	r3, [r0, #-2309]	; 0xfffff6fb
  90:	00001002 	andeq	r1, r0, r2
  94:	01210320 			; <UNDEFINED> instruction: 0x01210320
  98:	3d670d05 	stclcc	13, cr0, [r7, #-20]!	; 0xffffffec
  9c:	053d0105 	ldreq	r0, [sp, #-261]!	; 0xfffffefb
  a0:	0e054c1c 	mcreq	12, 0, r4, cr5, cr12, {0}
  a4:	2e05054b 	cfsh32cs	mvfx0, mvfx5, #43
  a8:	02001005 	andeq	r1, r0, #5
  ac:	05210304 	streq	r0, [r1, #-772]!	; 0xfffffcfc
  b0:	0402001c 	streq	r0, [r2], #-28	; 0xffffffe4
  b4:	20052e03 	andcs	r2, r5, r3, lsl #28
  b8:	03040200 	movweq	r0, #16896	; 0x4200
  bc:	001e0574 	andseq	r0, lr, r4, ror r5
  c0:	2e030402 	cdpcs	4, 0, cr0, cr3, cr2, {0}
  c4:	02000905 	andeq	r0, r0, #81920	; 0x14000
  c8:	05200304 	streq	r0, [r0, #-772]!	; 0xfffffcfc
  cc:	04020028 	streq	r0, [r2], #-40	; 0xffffffd8
  d0:	34052003 	strcc	r2, [r5], #-3
  d4:	03040200 	movweq	r0, #16896	; 0x4200
  d8:	0038052e 	eorseq	r0, r8, lr, lsr #10
  dc:	74030402 	strvc	r0, [r3], #-1026	; 0xfffffbfe
  e0:	02003605 	andeq	r3, r0, #5242880	; 0x500000
  e4:	052e0304 	streq	r0, [lr, #-772]!	; 0xfffffcfc
  e8:	04020009 	streq	r0, [r2], #-9
  ec:	2b052003 	blcs	148100 <startup-0x1feb7f00>
  f0:	03040200 	movweq	r0, #16896	; 0x4200
  f4:	0018053b 	andseq	r0, r8, fp, lsr r5
  f8:	3c010402 	cfstrscc	mvf0, [r1], {2}
  fc:	02001d05 	andeq	r1, r0, #320	; 0x140
 100:	052e0104 	streq	r0, [lr, #-260]!	; 0xfffffefc
 104:	04020005 	streq	r0, [r2], #-5
 108:	01052001 	tsteq	r5, r1
 10c:	5a1d053f 	bpl	741610 <startup-0x1f8be9f0>
 110:	054b0e05 	strbeq	r0, [fp, #-3589]	; 0xfffff1fb
 114:	10052e05 	andne	r2, r5, r5, lsl #28
 118:	03040200 	movweq	r0, #16896	; 0x4200
 11c:	001c0521 	andseq	r0, ip, r1, lsr #10
 120:	2e030402 	cdpcs	4, 0, cr0, cr3, cr2, {0}
 124:	02002005 	andeq	r2, r0, #5
 128:	05740304 	ldrbeq	r0, [r4, #-772]!	; 0xfffffcfc
 12c:	0402001e 	streq	r0, [r2], #-30	; 0xffffffe2
 130:	09052e03 	stmdbeq	r5, {r0, r1, r9, sl, fp, sp}
 134:	03040200 	movweq	r0, #16896	; 0x4200
 138:	00280520 	eoreq	r0, r8, r0, lsr #10
 13c:	20030402 	andcs	r0, r3, r2, lsl #8
 140:	02003405 	andeq	r3, r0, #83886080	; 0x5000000
 144:	052e0304 	streq	r0, [lr, #-772]!	; 0xfffffcfc
 148:	04020038 	streq	r0, [r2], #-56	; 0xffffffc8
 14c:	36057403 	strcc	r7, [r5], -r3, lsl #8
 150:	03040200 	movweq	r0, #16896	; 0x4200
 154:	0009052e 	andeq	r0, r9, lr, lsr #10
 158:	20030402 	andcs	r0, r3, r2, lsl #8
 15c:	02002d05 	andeq	r2, r0, #320	; 0x140
 160:	053b0304 	ldreq	r0, [fp, #-772]!	; 0xfffffcfc
 164:	0402001a 	streq	r0, [r2], #-26	; 0xffffffe6
 168:	1f053c01 	svcne	0x00053c01
 16c:	01040200 	mrseq	r0, R12_usr
 170:	0005052e 	andeq	r0, r5, lr, lsr #10
 174:	20010402 	andcs	r0, r1, r2, lsl #8
 178:	053f0105 	ldreq	r0, [pc, #-261]!	; 7b <startup-0x1fffff85>
 17c:	10055a1c 	andne	r5, r5, ip, lsl sl
 180:	2e1a054d 	cfmac32cs	mvfx0, mvfx10, mvfx13
 184:	052e1705 	streq	r1, [lr, #-1797]!	; 0xfffff8fb
 188:	1005200d 	andne	r2, r5, sp
 18c:	2e1a052f 	cfmul64cs	mvdx0, mvdx10, mvdx15
 190:	052e1705 	streq	r1, [lr, #-1797]!	; 0xfffff8fb
 194:	0a05200d 	beq	1481d0 <startup-0x1feb7e30>
 198:	2e120532 	mrccs	5, 0, r0, cr2, cr2, {1}
 19c:	052e1005 	streq	r1, [lr, #-5]!
 1a0:	11052007 	tstne	r5, r7
 1a4:	0a05592f 	beq	156668 <startup-0x1fea9998>
 1a8:	2e12053f 	mrccs	5, 0, r0, cr2, cr15, {1}
 1ac:	052e1005 	streq	r1, [lr, #-5]!
 1b0:	11052007 	tstne	r5, r7
 1b4:	5910052f 	ldmdbpl	r0, {r0, r1, r2, r3, r5, r8, sl}
 1b8:	053f0a05 	ldreq	r0, [pc, #-2565]!	; fffff7bb <rear+0xdfffc177>
 1bc:	10052e12 	andne	r2, r5, r2, lsl lr
 1c0:	2007052e 	andcs	r0, r7, lr, lsr #10
 1c4:	592f1105 	stmdbpl	pc!, {r0, r2, r8, ip}	; <UNPREDICTABLE>
 1c8:	053f0a05 	ldreq	r0, [pc, #-2565]!	; fffff7cb <rear+0xdfffc187>
 1cc:	10052e12 	andne	r2, r5, r2, lsl lr
 1d0:	2007052e 	andcs	r0, r7, lr, lsr #10
 1d4:	592f1105 	stmdbpl	pc!, {r0, r2, r8, ip}	; <UNPREDICTABLE>
 1d8:	053e0505 	ldreq	r0, [lr, #-1285]!	; 0xfffffafb
 1dc:	4f054b01 	svcmi	0x00054b01
 1e0:	4a00dd03 	bmi	375f4 <startup-0x1ffc8a0c>
 1e4:	05750e05 	ldrbeq	r0, [r5, #-3589]!	; 0xfffff1fb
 1e8:	0d054b0f 	vstreq	d4, [r5, #-60]	; 0xffffffc4
 1ec:	3d01054b 	cfstr32cc	mvfx0, [r1, #-300]	; 0xfffffed4
 1f0:	054c2a05 	strbeq	r2, [ip, #-2565]	; 0xfffff5fb
 1f4:	15056909 	strne	r6, [r5, #-2313]	; 0xfffff6f7
 1f8:	3c07052e 	cfstr32cc	mvfx0, [r7], {46}	; 0x2e
 1fc:	052f1b05 	streq	r1, [pc, #-2821]!	; fffff6ff <rear+0xdfffc0bb>
 200:	18052e22 	stmdane	r5, {r1, r5, r9, sl, fp, sp}
 204:	301b052e 	andscc	r0, fp, lr, lsr #10
 208:	052e2205 	streq	r2, [lr, #-517]!	; 0xfffffdfb
 20c:	0c052e18 	stceq	14, cr2, [r5], {24}
 210:	2e050531 	mcrcs	5, 0, r0, cr5, cr1, {1}
 214:	05211005 	streq	r1, [r1, #-5]!
 218:	23052e09 	movwcs	r2, #24073	; 0x5e09
 21c:	2e2b0521 	cfsh64cs	mvdx0, mvdx11, #17
 220:	053c3b05 	ldreq	r3, [ip, #-2821]!	; 0xfffff4fb
 224:	1b052e29 	blne	14bad0 <startup-0x1feb4530>
 228:	4b140520 	blmi	5016b0 <startup-0x1fafe950>
 22c:	052e0d05 	streq	r0, [lr, #-3333]!	; 0xfffff2fb
 230:	14052115 	strne	r2, [r5], #-277	; 0xfffffeeb
 234:	211d0582 	tstcs	sp, r2, lsl #11
 238:	052e2105 	streq	r2, [lr, #-261]!	; 0xfffffefb
 23c:	29052e25 	stmdbcs	r5, {r0, r2, r5, r9, sl, fp, sp}
 240:	2015052e 	andscs	r0, r5, lr, lsr #10
 244:	05203005 	streq	r3, [r0, #-5]!
 248:	15053c34 	strne	r3, [r5, #-3124]	; 0xfffff3cc
 24c:	00210520 	eoreq	r0, r1, r0, lsr #10
 250:	3a020402 	bcc	81260 <startup-0x1ff7eda0>
 254:	02000d05 	andeq	r0, r0, #320	; 0x140
 258:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 25c:	0402002a 	streq	r0, [r2], #-42	; 0xffffffd6
 260:	09053a02 	stmdbeq	r5, {r1, r9, fp, ip, sp}
 264:	01040200 	mrseq	r0, R12_usr
 268:	0021053c 	eoreq	r0, r1, ip, lsr r5
 26c:	49020402 	stmdbmi	r2, {r1, sl}
 270:	02001605 	andeq	r1, r0, #5242880	; 0x500000
 274:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 278:	04020005 	streq	r0, [r2], #-5
 27c:	01053c01 	tsteq	r5, r1, lsl #24
 280:	053c0903 	ldreq	r0, [ip, #-2307]!	; 0xfffff6fd
 284:	0d055a1b 	vstreq	s10, [r5, #-108]	; 0xffffff94
 288:	2e08054b 	cfsh32cs	mvfx0, mvfx8, #43
 28c:	02001f05 	andeq	r1, r0, #5, 30
 290:	052e0104 	streq	r0, [lr, #-260]!	; 0xfffffefc
 294:	04020018 	streq	r0, [r2], #-24	; 0xffffffe8
 298:	0d052e01 	stceq	14, cr2, [r5, #-4]
 29c:	4b0e052f 	blmi	381760 <startup-0x1fc7e8a0>
 2a0:	052e0505 	streq	r0, [lr, #-1285]!	; 0xfffffafb
 2a4:	0402000a 	streq	r0, [r2], #-10
 2a8:	0d052103 	stfeqs	f2, [r5, #-12]
 2ac:	03040200 	movweq	r0, #16896	; 0x4200
 2b0:	00150582 	andseq	r0, r5, r2, lsl #11
 2b4:	20030402 	andcs	r0, r3, r2, lsl #8
 2b8:	02000905 	andeq	r0, r0, #81920	; 0x14000
 2bc:	05660304 	strbeq	r0, [r6, #-772]!	; 0xfffffcfc
 2c0:	0402002a 	streq	r0, [r2], #-42	; 0xffffffd6
 2c4:	17054903 	strne	r4, [r5, -r3, lsl #18]
 2c8:	01040200 	mrseq	r0, R12_usr
 2cc:	0005053c 	andeq	r0, r5, ip, lsr r5
 2d0:	2e010402 	cdpcs	4, 0, cr0, cr1, cr2, {0}
 2d4:	053f0105 	ldreq	r0, [pc, #-261]!	; 1d7 <startup-0x1ffffe29>
 2d8:	0905761a 	stmdbeq	r5, {r1, r3, r4, r9, sl, ip, sp, lr}
 2dc:	06053d4b 	streq	r3, [r5], -fp, asr #26
 2e0:	2e05053e 	mcrcs	5, 0, r0, cr5, cr14, {1}
 2e4:	053d0105 	ldreq	r0, [sp, #-261]!	; 0xfffffefb
 2e8:	0905761e 	stmdbeq	r5, {r1, r2, r3, r4, r9, sl, ip, sp, lr}
 2ec:	0d053d4b 	stceq	13, cr3, [r5, #-300]	; 0xfffffed4
 2f0:	2e05053d 	mcrcs	5, 0, r0, cr5, cr13, {1}
 2f4:	02001805 	andeq	r1, r0, #327680	; 0x50000
 2f8:	05210304 	streq	r0, [r1, #-772]!	; 0xfffffcfc
 2fc:	0402000d 	streq	r0, [r2], #-13
 300:	0a058203 	beq	160b14 <startup-0x1fe9f4ec>
 304:	03040200 	movweq	r0, #16896	; 0x4200
 308:	0013052f 	andseq	r0, r3, pc, lsr #10
 30c:	82030402 	andhi	r0, r3, #33554432	; 0x2000000
 310:	02001005 	andeq	r1, r0, #5
 314:	052f0304 	streq	r0, [pc, #-772]!	; 18 <startup-0x1fffffe8>
 318:	04020014 	streq	r0, [r2], #-20	; 0xffffffec
 31c:	11053003 	tstne	r5, r3
 320:	03040200 	movweq	r0, #16896	; 0x4200
 324:	000a0582 	andeq	r0, sl, r2, lsl #11
 328:	2f030402 	svccs	0x00030402
 32c:	02001305 	andeq	r1, r0, #335544320	; 0x14000000
 330:	05820304 	streq	r0, [r2, #772]	; 0x304
 334:	04020010 	streq	r0, [r2], #-16
 338:	24052f03 	strcs	r2, [r5], #-3843	; 0xfffff0fd
 33c:	03040200 	movweq	r0, #16896	; 0x4200
 340:	052e7903 	streq	r7, [lr, #-2307]!	; 0xfffff6fd
 344:	04020016 	streq	r0, [r2], #-22	; 0xffffffea
 348:	05053c01 	streq	r3, [r5, #-3073]	; 0xfffff3ff
 34c:	01040200 	mrseq	r0, R12_usr
 350:	0301052e 	movweq	r0, #5422	; 0x152e
 354:	1e053c09 	cdpne	12, 0, cr3, cr5, cr9, {0}
 358:	59090576 	stmdbpl	r9, {r1, r2, r4, r5, r6, r8, sl}
 35c:	052e1505 	streq	r1, [lr, #-1285]!	; 0xfffffafb
 360:	01052f06 	tsteq	r5, r6, lsl #30
 364:	20081c03 	andcs	r1, r8, r3, lsl #24
 368:	66031405 	strvs	r1, [r3], -r5, lsl #8
 36c:	2e0f0520 	cfsh32cs	mvfx0, mvfx15, #16
 370:	052f1205 	streq	r1, [pc, #-517]!	; 173 <startup-0x1ffffe8d>
 374:	1a052e11 	bne	14bbc0 <startup-0x1feb4440>
 378:	3e0d054b 	cfsh32cc	mvfx0, mvfx13, #43
 37c:	05221405 	streq	r1, [r2, #-1029]!	; 0xfffffbfb
 380:	12052e0f 	andne	r2, r5, #15, 28	; 0xf0
 384:	2e11052f 	cfmul64cs	mvdx0, mvdx1, mvdx15
 388:	05591a05 	ldrbeq	r1, [r9, #-2565]	; 0xfffff5fb
 38c:	14053e0d 	strne	r3, [r5], #-3597	; 0xfffff1f3
 390:	2e0f0522 	cfsh32cs	mvfx0, mvfx15, #18
 394:	052f1205 	streq	r1, [pc, #-517]!	; 197 <startup-0x1ffffe69>
 398:	1a052e11 	bne	14bbe4 <startup-0x1feb441c>
 39c:	3e0d0559 	cfrshl32cc	mvfx13, mvfx9, r0
 3a0:	05221405 	streq	r1, [r2, #-1029]!	; 0xfffffbfb
 3a4:	12052e0f 	andne	r2, r5, #15, 28	; 0xf0
 3a8:	2e11052f 	cfmul64cs	mvdx0, mvdx1, mvdx15
 3ac:	054b1a05 	strbeq	r1, [fp, #-2565]	; 0xfffff5fb
 3b0:	6e033e0d 	cdpvs	14, 0, cr3, cr3, cr13, {0}
 3b4:	34343420 	ldrtcc	r3, [r4], #-1056	; 0xfffffbe0
 3b8:	05240105 	streq	r0, [r4, #-261]!	; 0xfffffefb
 3bc:	0505ca14 	streq	ip, [r5, #-2580]	; 0xfffff5ec
 3c0:	20130535 	andscs	r0, r3, r5, lsr r5
 3c4:	052f0505 	streq	r0, [pc, #-1285]!	; fffffec7 <rear+0xdfffc883>
 3c8:	05052014 	streq	r2, [r5, #-20]	; 0xffffffec
 3cc:	2015052f 	andscs	r0, r5, pc, lsr #10
 3d0:	05300505 	ldreq	r0, [r0, #-1285]!	; 0xfffffafb
 3d4:	05052013 	streq	r2, [r5, #-19]	; 0xffffffed
 3d8:	2013052f 	andscs	r0, r3, pc, lsr #10
 3dc:	053d0505 	ldreq	r0, [sp, #-1285]!	; 0xfffffafb
 3e0:	052f2013 	streq	r2, [pc, #-19]!	; 3d5 <startup-0x1ffffc2b>
 3e4:	14057505 	strne	r7, [r5], #-1285	; 0xfffffafb
 3e8:	2f010520 	svccs	0x00010520
 3ec:	14081b05 	strne	r1, [r8], #-2821	; 0xfffff4fb
 3f0:	054b0905 	strbeq	r0, [fp, #-2309]	; 0xfffff6fb
 3f4:	05052f0e 	streq	r2, [r5, #-3854]	; 0xfffff0f2
 3f8:	210b052e 	tstcs	fp, lr, lsr #10
 3fc:	053d0e05 	ldreq	r0, [sp, #-3589]!	; 0xfffff1fb
 400:	0e058216 	mcreq	2, 0, r8, cr5, cr6, {0}
 404:	8216053e 	andshi	r0, r6, #260046848	; 0xf800000
 408:	02001705 	andeq	r1, r0, #1310720	; 0x140000
 40c:	05300204 	ldreq	r0, [r0, #-516]!	; 0xfffffdfc
 410:	0402000a 	streq	r0, [r2], #-10
 414:	1b052e02 	blne	14bc24 <startup-0x1feb43dc>
 418:	02040200 	andeq	r0, r4, #0, 4
 41c:	00130582 	andseq	r0, r3, r2, lsl #11
 420:	20020402 	andcs	r0, r2, r2, lsl #8
 424:	02000a05 	andeq	r0, r0, #20480	; 0x5000
 428:	05210204 	streq	r0, [r1, #-516]!	; 0xfffffdfc
 42c:	04020013 	streq	r0, [r2], #-19	; 0xffffffed
 430:	0a058202 	beq	160c40 <startup-0x1fe9f3c0>
 434:	02040200 	andeq	r0, r4, #0, 4
 438:	0013052f 	andseq	r0, r3, pc, lsr #10
 43c:	82020402 	andhi	r0, r2, #33554432	; 0x2000000
 440:	02000a05 	andeq	r0, r0, #20480	; 0x5000
 444:	052f0204 	streq	r0, [pc, #-516]!	; 248 <startup-0x1ffffdb8>
 448:	04020013 	streq	r0, [r2], #-19	; 0xffffffed
 44c:	0a058202 	beq	160c5c <startup-0x1fe9f3a4>
 450:	02040200 	andeq	r0, r4, #0, 4
 454:	0013052f 	andseq	r0, r3, pc, lsr #10
 458:	82020402 	andhi	r0, r2, #33554432	; 0x2000000
 45c:	02000a05 	andeq	r0, r0, #20480	; 0x5000
 460:	052f0204 	streq	r0, [pc, #-516]!	; 264 <startup-0x1ffffd9c>
 464:	04020014 	streq	r0, [r2], #-20	; 0xffffffec
 468:	0a058202 	beq	160c78 <startup-0x1fe9f388>
 46c:	02040200 	andeq	r0, r4, #0, 4
 470:	0013052f 	andseq	r0, r3, pc, lsr #10
 474:	82020402 	andhi	r0, r2, #33554432	; 0x2000000
 478:	02000a05 	andeq	r0, r0, #20480	; 0x5000
 47c:	052f0204 	streq	r0, [pc, #-516]!	; 280 <startup-0x1ffffd80>
 480:	04020018 	streq	r0, [r2], #-24	; 0xffffffe8
 484:	12058202 	andne	r8, r5, #536870912	; 0x20000000
 488:	02040200 	andeq	r0, r4, #0, 4
 48c:	001e052f 	andseq	r0, lr, pc, lsr #10
 490:	03020402 	movweq	r0, #9218	; 0x2402
 494:	23055872 	movwcs	r5, #22642	; 0x5872
 498:	02040200 	andeq	r0, r4, #0, 4
 49c:	0005053c 	andeq	r0, r5, ip, lsr r5
 4a0:	3c010402 	cfstrscc	mvf0, [r1], {2}
 4a4:	10030105 	andne	r0, r3, r5, lsl #2
 4a8:	081a053c 	ldmdaeq	sl, {r2, r3, r4, r5, r8, sl}
 4ac:	4b0c0530 	blmi	301974 <startup-0x1fcfe68c>
 4b0:	3d3d0d05 	ldccc	13, cr0, [sp, #-20]!	; 0xffffffec
 4b4:	3d0e053d 	cfstr32cc	mvfx0, [lr, #-244]	; 0xffffff0c
 4b8:	053d0d05 	ldreq	r0, [sp, #-3333]!	; 0xfffff2fb
 4bc:	01053d12 	tsteq	r5, r2, lsl sp
 4c0:	e614053d 			; <UNDEFINED> instruction: 0xe614053d
 4c4:	2f2f0905 	svccs	0x002f0905
 4c8:	052f1005 	streq	r1, [pc, #-5]!	; 4cb <startup-0x1ffffb35>
 4cc:	01053d13 	tsteq	r5, r3, lsl sp
 4d0:	8421053d 	strthi	r0, [r1], #-1341	; 0xfffffac3
 4d4:	05670905 	strbeq	r0, [r7, #-2309]!	; 0xfffff6fb
 4d8:	0d054a13 	vstreq	s8, [r5, #-76]	; 0xffffffb4
 4dc:	4e05054d 	cfsh32mi	mvfx0, mvfx5, #45
 4e0:	0a052f2f 	beq	14c1a4 <startup-0x1feb3e5c>
 4e4:	030b0530 	movweq	r0, #46384	; 0xb530
 4e8:	0d05200d 	stceq	0, cr2, [r5, #-52]	; 0xffffffcc
 4ec:	2f150559 	svccs	0x00150559
 4f0:	593d0d05 	ldmdbpl	sp!, {r0, r2, r8, sl, fp}
 4f4:	05690e05 	strbeq	r0, [r9, #-3589]!	; 0xfffff1fb
 4f8:	5931210d 	ldmdbpl	r1!, {r0, r2, r3, r8, sp}
 4fc:	311a0568 	tstcc	sl, r8, ror #10
 500:	05670d05 	strbeq	r0, [r7, #-3333]!	; 0xfffff2fb
 504:	1105911d 	tstne	r5, sp, lsl r1
 508:	211c0566 	tstcs	ip, r6, ror #10
 50c:	05661105 	strbeq	r1, [r6, #-261]!	; 0xfffffefb
 510:	1105211a 	tstne	r5, sl, lsl r1
 514:	211c0566 	tstcs	ip, r6, ror #10
 518:	05661105 	strbeq	r1, [r6, #-261]!	; 0xfffffefb
 51c:	2e052121 	adfcssp	f2, f5, f1
 520:	4a11054a 	bmi	441a50 <startup-0x1fbbe5b0>
 524:	05212705 	streq	r2, [r1, #-1797]!	; 0xfffff8fb
 528:	0e054a11 			; <UNDEFINED> instruction: 0x0e054a11
 52c:	05206f03 	streq	r6, [r0, #-3843]!	; 0xfffff0fd
 530:	666c030a 	strbtvs	r0, [ip], -sl, lsl #6
 534:	2a030105 	bcs	c0950 <startup-0x1ff3f6b0>
 538:	00160258 	andseq	r0, r6, r8, asr r2
 53c:	01970101 	orrseq	r0, r7, r1, lsl #2
 540:	00030000 	andeq	r0, r3, r0
 544:	0000003b 	andeq	r0, r0, fp, lsr r0
 548:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
 54c:	0101000d 	tsteq	r1, sp
 550:	00000101 	andeq	r0, r0, r1, lsl #2
 554:	00000100 	andeq	r0, r0, r0, lsl #2
 558:	2f3a4301 	svccs	0x003a4301
 55c:	2f504f4d 	svccs	0x00504f4d
 560:	2d504f4d 	ldclcs	15, cr4, [r0, #-308]	; 0xfffffecc
 564:	6c657053 	stclvs	0, cr7, [r5], #-332	; 0xfffffeb4
 568:	616e532f 	cmnvs	lr, pc, lsr #6
 56c:	0000656b 	andeq	r6, r0, fp, ror #10
 570:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 574:	73696469 	cmnvc	r9, #1761607680	; 0x69000000
 578:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 57c:	0100632e 	tsteq	r0, lr, lsr #6
 580:	05000000 	streq	r0, [r0, #-0]
 584:	02050016 	andeq	r0, r5, #22
 588:	200007b8 			; <UNDEFINED> instruction: 0x200007b8
 58c:	30050515 	andcc	r0, r5, r5, lsl r5
 590:	05313131 	ldreq	r3, [r1, #-305]!	; 0xfffffecf
 594:	29052f01 	stmdbcs	r5, {r0, r8, r9, sl, fp, sp}
 598:	6715053f 			; <UNDEFINED> instruction: 0x6715053f
 59c:	05bb0105 	ldreq	r0, [fp, #261]!	; 0x105
 5a0:	1505772b 	strne	r7, [r5, #-1835]	; 0xfffff8d5
 5a4:	4a230567 	bmi	8c1b48 <startup-0x1f73e4b8>
 5a8:	05821505 	streq	r1, [r2, #1285]	; 0x505
 5ac:	2c055a01 			; <UNDEFINED> instruction: 0x2c055a01
 5b0:	67050576 	smlsdxvs	r5, r6, r5, r0
 5b4:	01053d3d 	tsteq	r5, sp, lsr sp
 5b8:	4c2a0559 	cfstr32mi	mvfx0, [sl], #-356	; 0xfffffe9c
 5bc:	3d670505 	cfstr64cc	mvdx0, [r7, #-20]!	; 0xffffffec
 5c0:	5901053d 	stmdbpl	r1, {r0, r2, r3, r4, r5, r8, sl}
 5c4:	054c3005 	strbeq	r3, [ip, #-5]
 5c8:	053d6705 	ldreq	r6, [sp, #-1797]!	; 0xfffff8fb
 5cc:	05052016 	streq	r2, [r5, #-22]	; 0xffffffea
 5d0:	01052f3d 	tsteq	r5, sp, lsr pc
 5d4:	682a053d 	stmdavs	sl!, {r0, r2, r3, r4, r5, r8, sl}
 5d8:	3d3d0505 	cfldr32cc	mvfx0, [sp, #-20]!	; 0xffffffec
 5dc:	2f13052f 	svccs	0x0013052f
 5e0:	05200a05 	streq	r0, [r0, #-2565]!	; 0xfffff5fb
 5e4:	0c053d05 	stceq	13, cr3, [r5], {5}
 5e8:	2f01053d 	svccs	0x0001053d
 5ec:	05762605 	ldrbeq	r2, [r6, #-1541]!	; 0xfffff9fb
 5f0:	1a053d05 	bne	14fa0c <startup-0x1feb05f4>
 5f4:	2f050520 	svccs	0x00050520
 5f8:	3d14053d 	cfldr32cc	mvfx0, [r4, #-244]	; 0xffffff0c
 5fc:	05590505 	ldrbeq	r0, [r9, #-1285]	; 0xfffffafb
 600:	0c05201a 	stceq	0, cr2, [r5], {26}
 604:	2f01052f 	svccs	0x0001052f
 608:	05842405 	streq	r2, [r4, #1029]	; 0x405
 60c:	1a053d05 	bne	14fa28 <startup-0x1feb05d8>
 610:	2f050520 	svccs	0x00050520
 614:	3d14053d 	cfldr32cc	mvfx0, [r4, #-244]	; 0xffffff0c
 618:	05590505 	ldrbeq	r0, [r9, #-1285]	; 0xfffffafb
 61c:	0c05201a 	stceq	0, cr2, [r5], {26}
 620:	2f01052f 	svccs	0x0001052f
 624:	05841505 	streq	r1, [r4, #1285]	; 0x505
 628:	0c052f0a 	stceq	15, cr2, [r5], {10}
 62c:	01040200 	mrseq	r0, R12_usr
 630:	00200520 	eoreq	r0, r0, r0, lsr #10
 634:	3c010402 	cfstrscc	mvf0, [r1], {2}
 638:	02000a05 	andeq	r0, r0, #20480	; 0x5000
 63c:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 640:	3d3d2f05 	ldccc	15, cr2, [sp, #-20]!	; 0xffffffec
 644:	053d0105 	ldreq	r0, [sp, #-261]!	; 0xfffffefb
 648:	0a053e13 	beq	14fe9c <startup-0x1feb0164>
 64c:	000c052f 	andeq	r0, ip, pc, lsr #10
 650:	20010402 	andcs	r0, r1, r2, lsl #8
 654:	02002005 	andeq	r2, r0, #5
 658:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 65c:	0402000a 	streq	r0, [r2], #-10
 660:	05053c01 	streq	r3, [r5, #-3073]	; 0xfffff3ff
 664:	053d3d2f 	ldreq	r3, [sp, #-3375]!	; 0xfffff2d1
 668:	17053d01 	strne	r3, [r5, -r1, lsl #26]
 66c:	2f0a053e 	svccs	0x000a053e
 670:	02000c05 	andeq	r0, r0, #1280	; 0x500
 674:	05200104 	streq	r0, [r0, #-260]!	; 0xfffffefc
 678:	04020020 	streq	r0, [r2], #-32	; 0xffffffe0
 67c:	0a053c01 	beq	14f688 <startup-0x1feb0978>
 680:	01040200 	mrseq	r0, R12_usr
 684:	2f05053c 	svccs	0x0005053c
 688:	01053d3d 	tsteq	r5, sp, lsr sp
 68c:	3e16053d 	mrccc	5, 0, r0, cr6, cr13, {1}
 690:	052f0a05 	streq	r0, [pc, #-2565]!	; fffffc93 <rear+0xdfffc64f>
 694:	0402000c 	streq	r0, [r2], #-12
 698:	20052001 	andcs	r2, r5, r1
 69c:	01040200 	mrseq	r0, R12_usr
 6a0:	000a053c 	andeq	r0, sl, ip, lsr r5
 6a4:	3c010402 	cfstrscc	mvf0, [r1], {2}
 6a8:	3d2f0505 	cfstr32cc	mvfx0, [pc, #-20]!	; 69c <startup-0x1ffff964>
 6ac:	3d01053d 	cfstr32cc	mvfx0, [r1, #-244]	; 0xffffff0c
 6b0:	053e2705 	ldreq	r2, [lr, #-1797]!	; 0xfffff8fb
 6b4:	593d6805 	ldmdbpl	sp!, {r0, r2, fp, sp, lr}
 6b8:	053d0105 	ldreq	r0, [sp, #-261]!	; 0xfffffefb
 6bc:	07054c20 	streq	r4, [r5, -r0, lsr #24]
 6c0:	3d18055a 	cfldr32cc	mvfx0, [r8, #-360]	; 0xfffffe98
 6c4:	052e1105 	streq	r1, [lr, #-261]!	; 0xfffffefb
 6c8:	11055913 	tstne	r5, r3, lsl r9
 6cc:	4c05052e 	cfstr32mi	mvfx0, [r5], {46}	; 0x2e
 6d0:	3d01059f 	cfstr32cc	mvfx0, [r1, #-636]	; 0xfffffd84
 6d4:	01000402 	tsteq	r0, r2, lsl #8
 6d8:	00007b01 	andeq	r7, r0, r1, lsl #22
 6dc:	34000300 	strcc	r0, [r0], #-768	; 0xfffffd00
 6e0:	02000000 	andeq	r0, r0, #0
 6e4:	0d0efb01 	vstreq	d15, [lr, #-4]
 6e8:	01010100 	mrseq	r0, (UNDEF: 17)
 6ec:	00000001 	andeq	r0, r0, r1
 6f0:	01000001 	tsteq	r0, r1
 6f4:	4d2f3a43 	vstmdbmi	pc!, {s6-s72}
 6f8:	4d2f504f 	stcmi	0, cr5, [pc, #-316]!	; 5c4 <startup-0x1ffffa3c>
 6fc:	532d504f 			; <UNDEFINED> instruction: 0x532d504f
 700:	2f6c6570 	svccs	0x006c6570
 704:	6b616e53 	blvs	185c058 <startup-0x1e7a3fa8>
 708:	64000065 	strvs	r0, [r0], #-101	; 0xffffff9b
 70c:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 710:	0100632e 	tsteq	r0, lr, lsr #6
 714:	05000000 	streq	r0, [r0, #-0]
 718:	02050019 	andeq	r0, r5, #25
 71c:	20000aa0 	andcs	r0, r0, r0, lsr #21
 720:	30090516 	andcc	r0, r9, r6, lsl r5
 724:	09030105 	stmdbeq	r3, {r0, r2, r8}
 728:	30170520 	andscc	r0, r7, r0, lsr #10
 72c:	05300905 	ldreq	r0, [r0, #-2309]!	; 0xfffff6fb
 730:	22052401 	andcs	r2, r5, #16777216	; 0x1000000
 734:	4c090530 	cfstr32mi	mvfx0, [r9], {48}	; 0x30
 738:	05280105 	streq	r0, [r8, #-261]!	; 0xfffffefb
 73c:	0c053e22 	stceq	14, cr3, [r5], {34}	; 0x22
 740:	830b054c 	movwhi	r0, #46412	; 0xb54c
 744:	053f0a05 	ldreq	r0, [pc, #-2565]!	; fffffd47 <rear+0xdfffc703>
 748:	0d052109 	stfeqs	f2, [r5, #-36]	; 0xffffffdc
 74c:	3c0a0557 	cfstr32cc	mvfx0, [sl], {87}	; 0x57
 750:	02310105 	eorseq	r0, r1, #1073741825	; 0x40000001
 754:	01010005 	tsteq	r1, r5
 758:	000002a9 	andeq	r0, r0, r9, lsr #5
 75c:	00620003 	rsbeq	r0, r2, r3
 760:	01020000 	mrseq	r0, (UNDEF: 2)
 764:	000d0efb 	strdeq	r0, [sp], -fp
 768:	01010101 	tsteq	r1, r1, lsl #2
 76c:	01000000 	mrseq	r0, (UNDEF: 0)
 770:	43010000 	movwmi	r0, #4096	; 0x1000
 774:	4f4d2f3a 	svcmi	0x004d2f3a
 778:	4f4d2f50 	svcmi	0x004d2f50
 77c:	70532d50 	subsvc	r2, r3, r0, asr sp
 780:	532f6c65 			; <UNDEFINED> instruction: 0x532f6c65
 784:	656b616e 	strbvs	r6, [fp, #-366]!	; 0xfffffe92
 788:	72670000 	rsbvc	r0, r7, #0
 78c:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 790:	73696463 	cmnvc	r9, #1660944384	; 0x63000000
 794:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 798:	0100632e 	tsteq	r0, lr, lsr #6
 79c:	2f2e0000 	svccs	0x002e0000
 7a0:	70617267 	rsbvc	r7, r1, r7, ror #4
 7a4:	64636968 	strbtvs	r6, [r3], #-2408	; 0xfffff698
 7a8:	6c707369 	ldclvs	3, cr7, [r0], #-420	; 0xfffffe5c
 7ac:	682e7961 	stmdavs	lr!, {r0, r5, r6, r8, fp, ip, sp, lr}
 7b0:	00000000 	andeq	r0, r0, r0
 7b4:	65642f2e 	strbvs	r2, [r4, #-3886]!	; 0xfffff0d2
 7b8:	656e6966 	strbvs	r6, [lr, #-2406]!	; 0xfffff69a
 7bc:	00682e73 	rsbeq	r2, r8, r3, ror lr
 7c0:	00000000 	andeq	r0, r0, r0
 7c4:	05001805 	streq	r1, [r0, #-2053]	; 0xfffff7fb
 7c8:	000b0402 	andeq	r0, fp, r2, lsl #8
 7cc:	05051720 	streq	r1, [r5, #-1824]	; 0xfffff8e0
 7d0:	3d3d3d2f 	ldccc	13, cr3, [sp, #-188]!	; 0xffffff44
 7d4:	4b3d3d3d 	blmi	f4fcd0 <startup-0x1f0b0330>
 7d8:	4b4b4b4b 	blmi	12d350c <startup-0x1ed2caf4>
 7dc:	053d0105 	ldreq	r0, [sp, #-261]!	; 0xfffffefb
 7e0:	08053e27 	stmdaeq	r5, {r0, r1, r2, r5, r9, sl, fp, ip, sp}
 7e4:	2007056a 	andcs	r0, r7, sl, ror #10
 7e8:	0505bb4b 	streq	fp, [r5, #-2891]	; 0xfffff4b5
 7ec:	20140575 	andscs	r0, r4, r5, ror r5
 7f0:	053e0105 	ldreq	r0, [lr, #-261]!	; 0xfffffefb
 7f4:	08056825 	stmdaeq	r5, {r0, r2, r5, fp, sp, lr}
 7f8:	2007056a 	andcs	r0, r7, sl, ror #10
 7fc:	0505754b 	streq	r7, [r5, #-1355]	; 0xfffffab5
 800:	20140567 	andscs	r0, r4, r7, ror #10
 804:	053d0105 	ldreq	r0, [sp, #-261]!	; 0xfffffefb
 808:	0505682b 	streq	r6, [r5, #-2091]	; 0xfffff7d5
 80c:	03010567 	movweq	r0, #5479	; 0x1567
 810:	0d05ba13 	vstreq	s22, [r5, #-76]	; 0xffffffb4
 814:	3d206f03 	stccc	15, cr6, [r0, #-12]!
 818:	233d3d23 	teqcs	sp, #2240	; 0x8c0
 81c:	3d233d3d 	stccc	13, cr3, [r3, #-244]!	; 0xffffff0c
 820:	05220105 	streq	r0, [r2, #-261]!	; 0xfffffefb
 824:	05054c1e 	streq	r4, [r5, #-3102]	; 0xfffff3e2
 828:	13053d2f 	movwne	r3, #23855	; 0x5d2f
 82c:	2f050520 	svccs	0x00050520
 830:	09053d3d 	stmdbeq	r5, {r0, r2, r3, r4, r5, r8, sl, fp, ip, sp}
 834:	01040200 	mrseq	r0, R12_usr
 838:	04020030 	streq	r0, [r2], #-48	; 0xffffffd0
 83c:	02003d01 	andeq	r3, r0, #1, 26	; 0x40
 840:	002f0104 	eoreq	r0, pc, r4, lsl #2
 844:	3d010402 	cfstrscc	mvf0, [r1, #-8]
 848:	01040200 	mrseq	r0, R12_usr
 84c:	0335052b 	teqeq	r5, #180355072	; 0xac00000
 850:	0505580b 	streq	r5, [r5, #-2059]	; 0xfffff7f5
 854:	13053d67 	movwne	r3, #23911	; 0x5d67
 858:	2f050520 	svccs	0x00050520
 85c:	3d2f593d 			; <UNDEFINED> instruction: 0x3d2f593d
 860:	052f1c05 	streq	r1, [pc, #-3077]!	; fffffc63 <rear+0xdfffc61f>
 864:	05052013 	streq	r2, [r5, #-19]	; 0xffffffed
 868:	13053d4b 	movwne	r3, #23883	; 0x5d4b
 86c:	30140520 	andscc	r0, r4, r0, lsr #10
 870:	054a0805 	strbeq	r0, [sl, #-2053]	; 0xfffff7fb
 874:	14052109 	strne	r2, [r5], #-265	; 0xfffffef7
 878:	4a08053f 	bmi	201d7c <startup-0x1fdfe284>
 87c:	05210905 	streq	r0, [r1, #-2309]!	; 0xfffff6fb
 880:	01053f0c 	tsteq	r5, ip, lsl #30
 884:	ca2e053d 	bgt	b81d80 <startup-0x1f47e280>
 888:	59670c05 	stmdbpl	r7!, {r0, r2, sl, fp}^
 88c:	05670105 	strbeq	r0, [r7, #-261]!	; 0xfffffefb
 890:	05054c36 	streq	r4, [r5, #-3126]	; 0xfffff3ca
 894:	20160591 	mulscs	r6, r1, r5
 898:	593d0505 	ldmdbpl	sp!, {r0, r2, r8, sl}
 89c:	052f3d2f 	streq	r3, [pc, #-3375]!	; fffffb75 <rear+0xdfffc531>
 8a0:	07053e13 	smladeq	r5, r3, lr, r3
 8a4:	2109054a 	tstcs	r9, sl, asr #10
 8a8:	053f1305 	ldreq	r1, [pc, #-773]!	; 5ab <startup-0x1ffffa55>
 8ac:	09054a07 	stmdbeq	r5, {r0, r1, r2, r9, fp, lr}
 8b0:	41050521 	tstmi	r5, r1, lsr #10
 8b4:	05201605 	streq	r1, [r0, #-1541]!	; 0xfffff9fb
 8b8:	053d2f05 	ldreq	r2, [sp, #-3845]!	; 0xfffff0fb
 8bc:	3c053e01 	stccc	14, cr3, [r5], {1}
 8c0:	91050568 	tstls	r5, r8, ror #10
 8c4:	3d3d593d 			; <UNDEFINED> instruction: 0x3d3d593d
 8c8:	05830105 	streq	r0, [r3, #261]	; 0x105
 8cc:	05054c3a 	streq	r4, [r5, #-3130]	; 0xfffff3c6
 8d0:	3d593d91 	ldclcc	13, cr3, [r9, #-580]	; 0xfffffdbc
 8d4:	8301053d 	movwhi	r0, #5437	; 0x153d
 8d8:	054c2005 	strbeq	r2, [ip, #-5]
 8dc:	05053d0e 	streq	r3, [r5, #-3342]	; 0xfffff2f2
 8e0:	212c052e 			; <UNDEFINED> instruction: 0x212c052e
 8e4:	59660905 	stmdbpl	r6!, {r0, r2, r8, fp}^
 8e8:	054b1205 	strbeq	r1, [fp, #-517]	; 0xfffffdfb
 8ec:	0d052e09 	stceq	14, cr2, [r5, #-36]	; 0xffffffdc
 8f0:	03040200 	movweq	r0, #16896	; 0x4200
 8f4:	00280521 	eoreq	r0, r8, r1, lsr #10
 8f8:	49030402 	stmdbmi	r3, {r1, sl}
 8fc:	02000905 	andeq	r0, r0, #81920	; 0x14000
 900:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 904:	04020026 	streq	r0, [r2], #-38	; 0xffffffda
 908:	05053902 	streq	r3, [r5, #-2306]	; 0xfffff6fe
 90c:	01040200 	mrseq	r0, R12_usr
 910:	4301053c 	movwmi	r0, #5436	; 0x153c
 914:	055a1805 	ldrbeq	r1, [sl, #-2053]	; 0xfffff7fb
 918:	05053e0c 	streq	r3, [r5, #-3596]	; 0xfffff1f4
 91c:	0017052e 	andseq	r0, r7, lr, lsr #10
 920:	21030402 	tstcs	r3, r2, lsl #8
 924:	02001c05 	andeq	r1, r0, #1280	; 0x500
 928:	05570304 	ldrbeq	r0, [r7, #-772]	; 0xfffffcfc
 92c:	04020005 	streq	r0, [r2], #-5
 930:	01053c01 	tsteq	r5, r1, lsl #24
 934:	8423055a 	strthi	r0, [r3], #-1370	; 0xfffffaa6
 938:	055a0905 	ldrbeq	r0, [sl, #-2309]	; 0xfffff6fb
 93c:	11052f08 	tstne	r5, r8, lsl #30
 940:	02040200 	andeq	r0, r4, #0, 4
 944:	0019053c 	andseq	r0, r9, ip, lsr r5
 948:	3c040402 	cfstrscc	mvf0, [r4], {2}
 94c:	02002205 	andeq	r2, r0, #1342177280	; 0x50000000
 950:	053c0604 	ldreq	r0, [ip, #-1540]!	; 0xfffff9fc
 954:	17053e14 	smladne	r5, r4, lr, r3
 958:	2e0e052e 	cfsh32cs	mvfx0, mvfx14, #30
 95c:	052e0a05 	streq	r0, [lr, #-2565]!	; 0xfffff5fb
 960:	0b053e07 	bleq	150184 <startup-0x1feafe7c>
 964:	3d0f053d 	cfstr32cc	mvfx0, [pc, #-244]	; 878 <startup-0x1ffff788>
 968:	053f1505 	ldreq	r1, [pc, #-1285]!	; 46b <startup-0x1ffffb95>
 96c:	1b052e18 	blne	14c1d4 <startup-0x1feb3e2c>
 970:	20100520 	andscs	r0, r0, r0, lsr #10
 974:	052e0b05 	streq	r0, [lr, #-2821]!	; 0xfffff4fb
 978:	2c053e17 	stccs	14, cr3, [r5], {23}
 97c:	05d67503 	ldrbeq	r7, [r6, #1283]	; 0x503
 980:	200c0301 	andcs	r0, ip, r1, lsl #6
 984:	055a1f05 	ldrbeq	r1, [sl, #-3845]	; 0xfffff0fb
 988:	0c053e12 	stceq	14, cr3, [r5], {18}
 98c:	4a050530 	bmi	141e54 <startup-0x1febe1ac>
 990:	00211405 	eoreq	r1, r1, r5, lsl #8
 994:	06010402 	streq	r0, [r1], -r2, lsl #8
 998:	04020058 	streq	r0, [r2], #-88	; 0xffffffa8
 99c:	02002e02 	andeq	r2, r0, #2, 28
 9a0:	05200404 	streq	r0, [r0, #-1028]!	; 0xfffffbfc
 9a4:	04020010 	streq	r0, [r2], #-16
 9a8:	052f0604 	streq	r0, [pc, #-1540]!	; 3ac <startup-0x1ffffc54>
 9ac:	04020009 	streq	r0, [r2], #-9
 9b0:	0d054a04 	vstreq	s8, [r5, #-16]
 9b4:	1305c921 	movwne	ip, #22817	; 0x5921
 9b8:	4a0d0567 	bmi	341f5c <startup-0x1fcbe0a4>
 9bc:	02002e05 	andeq	r2, r0, #5, 28	; 0x50
 9c0:	05210304 	streq	r0, [r1, #-772]!	; 0xfffffcfc
 9c4:	04020011 	streq	r0, [r2], #-17	; 0xffffffef
 9c8:	22054a03 	andcs	r4, r5, #12288	; 0x3000
 9cc:	03040200 	movweq	r0, #16896	; 0x4200
 9d0:	00270573 	eoreq	r0, r7, r3, ror r5
 9d4:	66030402 	strvs	r0, [r3], -r2, lsl #8
 9d8:	02000d05 	andeq	r0, r0, #320	; 0x140
 9dc:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 9e0:	0402001d 	streq	r0, [r2], #-29	; 0xffffffe3
 9e4:	09055502 	stmdbeq	r5, {r1, r8, sl, ip, lr}
 9e8:	01040200 	mrseq	r0, R12_usr
 9ec:	00190566 	andseq	r0, r9, r6, ror #10
 9f0:	56020402 	strpl	r0, [r2], -r2, lsl #8
 9f4:	02000505 	andeq	r0, r0, #20971520	; 0x1400000
 9f8:	05660104 	strbeq	r0, [r6, #-260]!	; 0xfffffefc
 9fc:	580a0301 	stmdapl	sl, {r0, r8, r9}
 a00:	01000802 	tsteq	r0, r2, lsl #16
 a04:	0000c601 	andeq	ip, r0, r1, lsl #12
 a08:	33000300 	movwcc	r0, #768	; 0x300
 a0c:	02000000 	andeq	r0, r0, #0
 a10:	0d0efb01 	vstreq	d15, [lr, #-4]
 a14:	01010100 	mrseq	r0, (UNDEF: 17)
 a18:	00000001 	andeq	r0, r0, r1
 a1c:	01000001 	tsteq	r0, r1
 a20:	4d2f3a43 	vstmdbmi	pc!, {s6-s72}
 a24:	4d2f504f 	stcmi	0, cr5, [pc, #-316]!	; 8f0 <startup-0x1ffff710>
 a28:	532d504f 			; <UNDEFINED> instruction: 0x532d504f
 a2c:	2f6c6570 	svccs	0x006c6570
 a30:	6b616e53 	blvs	185c384 <startup-0x1e7a3c7c>
 a34:	6b000065 	blvs	bd0 <startup-0x1ffff430>
 a38:	2e627965 	vnmulcs.f16	s15, s4, s11	; <UNPREDICTABLE>
 a3c:	00010063 	andeq	r0, r1, r3, rrx
 a40:	19050000 	stmdbne	r5, {}	; <UNPREDICTABLE>
 a44:	28020500 	stmdacs	r2, {r8, sl}
 a48:	15200010 	strne	r0, [r0, #-16]!
 a4c:	054b1f05 	strbeq	r1, [fp, #-3845]	; 0xfffff0fb
 a50:	05052e1a 	streq	r2, [r5, #-3610]	; 0xfffff1e6
 a54:	2016052e 	andscs	r0, r6, lr, lsr #10
 a58:	052f0105 	streq	r0, [pc, #-261]!	; 95b <startup-0x1ffff6a5>
 a5c:	12057613 	andne	r7, r5, #19922944	; 0x1300000
 a60:	200a053e 	andcs	r0, sl, lr, lsr r5
 a64:	053d0b05 	ldreq	r0, [sp, #-2821]!	; 0xfffff4fb
 a68:	0d052e05 	stceq	14, cr2, [r5, #-20]	; 0xffffffec
 a6c:	740c0521 	strvc	r0, [ip], #-1313	; 0xfffffadf
 a70:	05211405 	streq	r1, [r1, #-1029]!	; 0xfffffbfb
 a74:	04020017 	streq	r0, [r2], #-23	; 0xffffffe9
 a78:	05052c02 	streq	r2, [r5, #-3074]	; 0xfffff3fe
 a7c:	01040200 	mrseq	r0, R12_usr
 a80:	410c053c 	tstmi	ip, ip, lsr r5
 a84:	052f0105 	streq	r0, [pc, #-261]!	; 987 <startup-0x1ffff679>
 a88:	13056919 	movwne	r6, #22809	; 0x5919
 a8c:	0e05753d 	mcreq	5, 0, r7, cr5, cr13, {1}
 a90:	2e05056a 	cfsh32cs	mvfx0, mvfx5, #58
 a94:	05210905 	streq	r0, [r1, #-2309]!	; 0xfffff6fb
 a98:	0c054b13 			; <UNDEFINED> instruction: 0x0c054b13
 a9c:	3d26054b 	cfstr32cc	mvfx0, [r6, #-300]!	; 0xfffffed4
 aa0:	052e2205 	streq	r2, [lr, #-517]!	; 0xfffffdfb
 aa4:	1f052e1a 	svcne	0x00052e1a
 aa8:	02040200 	andeq	r0, r4, #0, 4
 aac:	00050538 	andeq	r0, r5, r8, lsr r5
 ab0:	3c010402 	cfstrscc	mvf0, [r1], {2}
 ab4:	05430c05 	strbeq	r0, [r3, #-3077]	; 0xfffff3fb
 ab8:	04020001 	streq	r0, [r2], #-1
 abc:	1e052101 	adfnes	f2, f5, f1
 ac0:	68050584 	stmdavs	r5, {r2, r7, r8, sl}
 ac4:	05201505 	streq	r1, [r0, #-1285]!	; 0xfffffafb
 ac8:	06023e01 	streq	r3, [r2], -r1, lsl #28
 acc:	8f010100 	svchi	0x00010100
 ad0:	03000001 	movweq	r0, #1
 ad4:	0000f600 	andeq	pc, r0, r0, lsl #12
 ad8:	fb010200 	blx	412e2 <startup-0x1ffbed1e>
 adc:	01000d0e 	tsteq	r0, lr, lsl #26
 ae0:	00010101 	andeq	r0, r1, r1, lsl #2
 ae4:	00010000 	andeq	r0, r1, r0
 ae8:	3a430100 	bcc	10c0ef0 <startup-0x1ef3f110>
 aec:	504f4d2f 	subpl	r4, pc, pc, lsr #26
 af0:	504f4d2f 	subpl	r4, pc, pc, lsr #26
 af4:	6570532d 	ldrbvs	r5, [r0, #-813]!	; 0xfffffcd3
 af8:	6e532f6c 	cdpvs	15, 5, cr2, cr3, cr12, {3}
 afc:	00656b61 	rsbeq	r6, r5, r1, ror #22
 b00:	635c3a63 	cmpvs	ip, #405504	; 0x63000
 b04:	70616573 	rsbvc	r6, r1, r3, ror r5
 b08:	6f635c70 	svcvs	0x00635c70
 b0c:	696c6564 	stmdbvs	ip!, {r2, r5, r6, r8, sl, sp, lr}^
 b10:	745c6574 	ldrbvc	r6, [ip], #-1396	; 0xfffffa8c
 b14:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
 b18:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
 b1c:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
 b20:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
 b24:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
 b28:	61652d65 	cmnvs	r5, r5, ror #26
 b2c:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
 b30:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
 b34:	735c6564 	cmpvc	ip, #100, 10	; 0x19000000
 b38:	63007379 	movwvs	r7, #889	; 0x379
 b3c:	73635c3a 	cmnvc	r3, #14848	; 0x3a00
 b40:	70706165 	rsbsvc	r6, r0, r5, ror #2
 b44:	646f635c 	strbtvs	r6, [pc], #-860	; b4c <startup-0x1ffff4b4>
 b48:	74696c65 	strbtvc	r6, [r9], #-3173	; 0xfffff39b
 b4c:	6f745c65 	svcvs	0x00745c65
 b50:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
 b54:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
 b58:	5c6d7261 	sfmpl	f7, 2, [sp], #-388	; 0xfffffe7c
 b5c:	5c62696c 			; <UNDEFINED> instruction: 0x5c62696c
 b60:	5c636367 	stclpl	3, cr6, [r3], #-412	; 0xfffffe64
 b64:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
 b68:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
 b6c:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
 b70:	2e395c69 	cdpcs	12, 3, cr5, cr9, cr9, {3}
 b74:	5c312e32 	ldcpl	14, cr2, [r1], #-200	; 0xffffff38
 b78:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
 b7c:	00656475 	rsbeq	r6, r5, r5, ror r4
 b80:	65757100 	ldrbvs	r7, [r5, #-256]!	; 0xffffff00
 b84:	632e6575 			; <UNDEFINED> instruction: 0x632e6575
 b88:	00000100 	andeq	r0, r0, r0, lsl #2
 b8c:	6b636f6c 	blvs	18dc944 <startup-0x1e7236bc>
 b90:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
 b94:	745f0000 	ldrbvc	r0, [pc], #-0	; b9c <startup-0x1ffff464>
 b98:	73657079 	cmnvc	r5, #121	; 0x79
 b9c:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
 ba0:	74730000 	ldrbtvc	r0, [r3], #-0
 ba4:	66656464 	strbtvs	r6, [r5], -r4, ror #8
 ba8:	0300682e 	movweq	r6, #2094	; 0x82e
 bac:	65720000 	ldrbvs	r0, [r2, #-0]!
 bb0:	2e746e65 	cdpcs	14, 7, cr6, cr4, cr5, {3}
 bb4:	00020068 	andeq	r0, r2, r8, rrx
 bb8:	6f656700 	svcvs	0x00656700
 bbc:	7274656d 	rsbsvc	r6, r4, #457179136	; 0x1b400000
 bc0:	626f6369 	rsbvs	r6, pc, #-1543503871	; 0xa4000001
 bc4:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 bc8:	0100682e 	tsteq	r0, lr, lsr #16
 bcc:	05000000 	streq	r0, [r0, #-0]
 bd0:	02050012 	andeq	r0, r5, #18
 bd4:	20001118 	andcs	r1, r0, r8, lsl r1
 bd8:	05010903 	streq	r0, [r1, #-2307]	; 0xfffff6fd
 bdc:	05053d0d 	streq	r3, [r5, #-3341]	; 0xfffff2f3
 be0:	0015052e 	andseq	r0, r5, lr, lsr #10
 be4:	21030402 	tstcs	r3, r2, lsl #8
 be8:	02001e05 	andeq	r1, r0, #5, 28	; 0x50
 bec:	05570304 	ldrbeq	r0, [r7, #-772]	; 0xfffffcfc
 bf0:	04020005 	streq	r0, [r2], #-5
 bf4:	01053c01 	tsteq	r5, r1, lsl #24
 bf8:	7710053e 			; <UNDEFINED> instruction: 0x7710053e
 bfc:	052f1305 	streq	r1, [pc, #-773]!	; 8ff <startup-0x1ffff701>
 c00:	10055901 	andne	r5, r5, r1, lsl #18
 c04:	2f150577 	svccs	0x00150577
 c08:	05590105 	ldrbeq	r0, [r9, #-261]	; 0xfffffefb
 c0c:	15055b0f 	strne	r5, [r5, #-2831]	; 0xfffff4f1
 c10:	6701052f 	strvs	r0, [r1, -pc, lsr #10]
 c14:	05690c05 	strbeq	r0, [r9, #-3077]!	; 0xfffff3fb
 c18:	01052f0b 	tsteq	r5, fp, lsl #30
 c1c:	691b052f 	ldmdbvs	fp, {r0, r1, r2, r3, r5, r8, sl}
 c20:	054c0805 	strbeq	r0, [ip, #-2053]	; 0xfffff7fb
 c24:	06054a07 	streq	r4, [r5], -r7, lsl #20
 c28:	300f053c 	andcc	r0, pc, ip, lsr r5	; <UNPREDICTABLE>
 c2c:	052e0905 	streq	r0, [lr, #-2309]!	; 0xfffff6fb
 c30:	10052f0f 	andne	r2, r5, pc, lsl #30
 c34:	3c18054c 	cfldr32cc	mvfx0, [r8], {76}	; 0x4c
 c38:	052e1005 	streq	r1, [lr, #-5]!
 c3c:	10052e18 	andne	r2, r5, r8, lsl lr
 c40:	5a01054b 	bpl	42174 <startup-0x1ffbde8c>
 c44:	05ae0e05 	streq	r0, [lr, #3589]!	; 0xe05
 c48:	0c053d21 	stceq	13, cr3, [r5], {33}	; 0x21
 c4c:	4c0d0558 	cfstr32mi	mvfx0, [sp], {88}	; 0x58
 c50:	052e0605 	streq	r0, [lr, #-1541]!	; 0xfffff9fb
 c54:	053f2f0d 	ldreq	r2, [pc, #-3853]!	; fffffd4f <rear+0xdfffc70b>
 c58:	0105590b 	tsteq	r5, fp, lsl #18
 c5c:	000b0221 	andeq	r0, fp, r1, lsr #4
 c60:	Address 0x00000c60 is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	4f454750 	svcmi	0x00454750
   4:	5254454d 	subspl	r4, r4, #322961408	; 0x13400000
   8:	74730059 	ldrbtvc	r0, [r3], #-89	; 0xffffffa7
   c:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
  10:	6e730070 	mrcvs	0, 3, r0, cr3, cr0, {3}
  14:	53656b61 	cmnpl	r5, #99328	; 0x18400
  18:	00657a69 	rsbeq	r7, r5, r9, ror #20
  1c:	6b616e73 	blvs	185b9f0 <startup-0x1e7a4610>
  20:	61656865 	cmnvs	r5, r5, ror #16
  24:	65675f64 	strbvs	r5, [r7, #-3940]!	; 0xfffff09c
  28:	74656d6f 	strbtvc	r6, [r5], #-3439	; 0xfffff291
  2c:	4c5f7972 	mrrcmi	9, 7, r7, pc, cr2	; <UNPREDICTABLE>
  30:	00544645 	subseq	r4, r4, r5, asr #12
  34:	77617264 	strbvc	r7, [r1, -r4, ror #4]!
  38:	7270735f 	rsbsvc	r7, r0, #2080374785	; 0x7c000001
  3c:	00657469 	rsbeq	r7, r5, r9, ror #8
  40:	76677261 	strbtvc	r7, [r7], -r1, ror #4
  44:	696e6900 	stmdbvs	lr!, {r8, fp, sp, lr}^
  48:	6f665f74 	svcvs	0x00665f74
  4c:	7300646f 	movwvc	r6, #1135	; 0x46f
  50:	656b616e 	strbvs	r6, [fp, #-366]!	; 0xfffffe92
  54:	64616568 	strbtvs	r6, [r1], #-1384	; 0xfffffa98
  58:	6f65675f 	svcvs	0x0065675f
  5c:	7274656d 	rsbsvc	r6, r4, #457179136	; 0x1b400000
  60:	50555f79 	subspl	r5, r5, r9, ror pc
  64:	72696400 	rsbvc	r6, r9, #0, 8
  68:	69640078 	stmdbvs	r4!, {r3, r4, r5, r6}^
  6c:	62007972 	andvs	r7, r0, #1867776	; 0x1c8000
  70:	00657479 	rsbeq	r7, r5, r9, ror r4
  74:	7478656e 	ldrbtvc	r6, [r8], #-1390	; 0xfffffa92
  78:	6900785f 	stmdbvs	r0, {r0, r1, r2, r3, r4, r6, fp, ip, sp, lr}
  7c:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
  80:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
  84:	6e690073 	mcrvs	0, 3, r0, cr9, cr3, {3}
  88:	735f7469 	cmpvc	pc, #1761607680	; 0x69000000
  8c:	656b616e 	strbvs	r6, [fp, #-366]!	; 0xfffffe92
  90:	6f507400 	svcvs	0x00507400
  94:	00746e69 	rsbseq	r6, r4, r9, ror #28
  98:	4e494f50 	mcrmi	15, 2, r4, cr9, cr0, {2}
  9c:	656e0054 	strbvs	r0, [lr, #-84]!	; 0xffffffac
  a0:	795f7478 	ldmdbvc	pc, {r3, r4, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
  a4:	736e7500 	cmnvc	lr, #0, 10
  a8:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
  ac:	68632064 	stmdavs	r3!, {r2, r5, r6, sp}^
  b0:	73007261 	movwvc	r7, #609	; 0x261
  b4:	735f7465 	cmpvc	pc, #1694498816	; 0x65000000
  b8:	64656570 	strbtvs	r6, [r5], #-1392	; 0xfffffa90
  bc:	736f7000 	cmnvc	pc, #0
  c0:	6f700078 	svcvs	0x00700078
  c4:	43007973 	movwmi	r7, #2419	; 0x973
  c8:	4f4d5c3a 	svcmi	0x004d5c3a
  cc:	4f4d5c50 	svcmi	0x004d5c50
  d0:	70532d50 	subsvc	r2, r3, r0, asr sp
  d4:	535c6c65 	cmppl	ip, #25856	; 0x6500
  d8:	656b616e 	strbvs	r6, [fp, #-366]!	; 0xfffffe92
  dc:	69656800 	stmdbvs	r5!, {fp, sp, lr}^
  e0:	00746867 	rsbseq	r6, r4, r7, ror #16
  e4:	72727563 	rsbsvc	r7, r2, #415236096	; 0x18c00000
  e8:	5f746e65 	svcpl	0x00746e65
  ec:	72640078 	rsbvc	r0, r4, #120	; 0x78
  f0:	735f7761 	cmpvc	pc, #25427968	; 0x1840000
  f4:	656b616e 	strbvs	r6, [fp, #-366]!	; 0xfffffe92
  f8:	616e7300 	cmnvs	lr, r0, lsl #6
  fc:	6568656b 	strbvs	r6, [r8, #-1387]!	; 0xfffffa95
 100:	675f6461 	ldrbvs	r6, [pc, -r1, ror #8]
 104:	656d6f65 	strbvs	r6, [sp, #-3941]!	; 0xfffff09b
 108:	5f797274 	svcpl	0x00797274
 10c:	48474952 	stmdami	r7, {r1, r4, r6, r8, fp, lr}^
 110:	6c630054 	stclvs	0, cr0, [r3], #-336	; 0xfffffeb0
 114:	5f726165 	svcpl	0x00726165
 118:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
 11c:	73007463 	movwvc	r7, #1123	; 0x463
 120:	656b616e 	strbvs	r6, [fp, #-366]!	; 0xfffffe92
 124:	79646f62 	stmdbvc	r4!, {r1, r5, r6, r8, r9, sl, fp, sp, lr}^
 128:	6f65675f 	svcvs	0x0065675f
 12c:	7274656d 	rsbsvc	r6, r4, #457179136	; 0x1b400000
 130:	6f660079 	svcvs	0x00660079
 134:	675f646f 	ldrbvs	r6, [pc, -pc, ror #8]
 138:	656d6f65 	strbvs	r6, [sp, #-3941]!	; 0xfffff09b
 13c:	00797274 	rsbseq	r7, r9, r4, ror r2
 140:	6e69616d 	powvsez	f6, f1, #5.0
 144:	72756300 	rsbsvc	r6, r5, #0, 6
 148:	746e6572 	strbtvc	r6, [lr], #-1394	; 0xfffffa8e
 14c:	7200795f 	andvc	r7, r0, #1556480	; 0x17c000
 150:	61747365 	cmnvs	r4, r5, ror #6
 154:	63007472 	movwvs	r7, #1138	; 0x472
 158:	65727275 	ldrbvs	r7, [r2, #-629]!	; 0xfffffd8b
 15c:	6900746e 	stmdbvs	r0, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
 160:	5f74696e 	svcpl	0x0074696e
 164:	00707061 	rsbseq	r7, r0, r1, rrx
 168:	6f654774 	svcvs	0x00654774
 16c:	7274656d 	rsbsvc	r6, r4, #457179136	; 0x1b400000
 170:	69730079 	ldmdbvs	r3!, {r0, r3, r4, r5, r6}^
 174:	0078657a 	rsbseq	r6, r8, sl, ror r5
 178:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0xfffff68d
 17c:	4e470079 	mcrmi	0, 2, r0, cr7, cr9, {3}
 180:	39432055 	stmdbcc	r3, {r0, r2, r4, r6, sp}^
 184:	2e392039 	mrccs	0, 1, r2, cr9, cr9, {1}
 188:	20312e32 	eorscs	r2, r1, r2, lsr lr
 18c:	39313032 	ldmdbcc	r1!, {r1, r4, r5, ip, sp}
 190:	35323031 	ldrcc	r3, [r2, #-49]!	; 0xffffffcf
 194:	65722820 	ldrbvs	r2, [r2, #-2080]!	; 0xfffff7e0
 198:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
 19c:	5b202965 	blpl	80a738 <startup-0x1f7f58c8>
 1a0:	2f4d5241 	svccs	0x004d5241
 1a4:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
 1a8:	72622d39 	rsbvc	r2, r2, #3648	; 0xe40
 1ac:	68636e61 	stmdavs	r3!, {r0, r5, r6, r9, sl, fp, sp, lr}^
 1b0:	76657220 	strbtvc	r7, [r5], -r0, lsr #4
 1b4:	6f697369 	svcvs	0x00697369
 1b8:	3732206e 	ldrcc	r2, [r2, -lr, rrx]!
 1bc:	39393537 	ldmdbcc	r9!, {r0, r1, r2, r4, r5, r8, sl, ip, sp}
 1c0:	6d2d205d 	stcvs	0, cr2, [sp, #-372]!	; 0xfffffe8c
 1c4:	6d756874 	ldclvs	8, cr6, [r5, #-464]!	; 0xfffffe30
 1c8:	6d2d2062 	stcvs	0, cr2, [sp, #-392]!	; 0xfffffe78
 1cc:	616f6c66 	cmnvs	pc, r6, ror #24
 1d0:	62612d74 	rsbvs	r2, r1, #116, 26	; 0x1d00
 1d4:	6f733d69 	svcvs	0x00733d69
 1d8:	2d207466 	cfstrscs	mvf7, [r0, #-408]!	; 0xfffffe68
 1dc:	6372616d 	cmnvs	r2, #1073741851	; 0x4000001b
 1e0:	72613d68 	rsbvc	r3, r1, #104, 26	; 0x1a00
 1e4:	2d36766d 	ldccs	6, cr7, [r6, #-436]!	; 0xfffffe4c
 1e8:	672d206d 	strvs	r2, [sp, -sp, rrx]!
 1ec:	304f2d20 	subcc	r2, pc, r0, lsr #26
 1f0:	74732d20 	ldrbtvc	r2, [r3], #-3360	; 0xfffff2e0
 1f4:	39633d64 	stmdbcc	r3!, {r2, r5, r6, r8, sl, fp, ip, sp}^
 1f8:	72610039 	rsbvc	r0, r1, #57	; 0x39
 1fc:	6c006367 	stcvs	3, cr6, [r0], {103}	; 0x67
 200:	5f64616f 	svcpl	0x0064616f
 204:	69727073 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, ip, sp, lr}^
 208:	64006574 	strvs	r6, [r0], #-1396	; 0xfffffa8c
 20c:	00776172 	rsbseq	r6, r7, r2, ror r1
 210:	646f6f66 	strbtvs	r6, [pc], #-3942	; 218 <startup-0x1ffffde8>
 214:	6a626f5f 	bvs	189bf98 <startup-0x1e764068>
 218:	79656b00 	stmdbvc	r5!, {r8, r9, fp, sp, lr}^
 21c:	7274735f 	rsbsvc	r7, r4, #2080374785	; 0x7c000001
 220:	00656b6f 	rsbeq	r6, r5, pc, ror #22
 224:	74646977 	strbtvc	r6, [r4], #-2423	; 0xfffff689
 228:	61620068 	cmnvs	r2, r8, rrx
 22c:	75426b63 	strbvc	r6, [r2, #-2915]	; 0xfffff49d
 230:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
 234:	74657300 	strbtvc	r7, [r5], #-768	; 0xfffffd00
 238:	6a626f5f 	bvs	189bfbc <startup-0x1e764044>
 23c:	5f746365 	svcpl	0x00746365
 240:	65657073 	strbvs	r7, [r5, #-115]!	; 0xffffff8d
 244:	69770064 	ldmdbvs	r7!, {r2, r5, r6}^
 248:	5f687464 	svcpl	0x00687464
 24c:	625f6e69 	subsvs	r6, pc, #1680	; 0x690
 250:	73657479 	cmnvc	r5, #2030043136	; 0x79000000
 254:	61726400 	cmnvs	r2, r0, lsl #8
 258:	6f665f77 	svcvs	0x00665f77
 25c:	7300646f 	movwvc	r6, #1135	; 0x46f
 260:	656b616e 	strbvs	r6, [fp, #-366]!	; 0xfffffe92
 264:	64616568 	strbtvs	r6, [r1], #-1384	; 0xfffffa98
 268:	6f65675f 	svcvs	0x0065675f
 26c:	7274656d 	rsbsvc	r6, r4, #457179136	; 0x1b400000
 270:	4f445f79 	svcmi	0x00445f79
 274:	66004e57 			; <UNDEFINED> instruction: 0x66004e57
 278:	6f6c6c6f 	svcvs	0x006c6c6f
 27c:	656c5f77 	strbvs	r5, [ip, #-3959]!	; 0xfffff089
 280:	72656461 	rsbvc	r6, r5, #1627389952	; 0x61000000
 284:	624f7400 	subvs	r7, pc, #0, 8
 288:	7264006a 	rsbvc	r0, r4, #106	; 0x6a
 28c:	6f5f7761 	svcvs	0x005f7761
 290:	63656a62 	cmnvs	r5, #401408	; 0x62000
 294:	65720074 	ldrbvs	r0, [r2, #-116]!	; 0xffffff8c
 298:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 29c:	61675f74 	smcvs	30196	; 0x75f4
 2a0:	6e00656d 	cfsh32vs	mvfx6, mvfx0, #61
 2a4:	6f706d75 	svcvs	0x00706d75
 2a8:	73746e69 	cmnvc	r4, #1680	; 0x690
 2ac:	766f6d00 	strbtvc	r6, [pc], -r0, lsl #26
 2b0:	626f5f65 	rsbvs	r5, pc, #404	; 0x194
 2b4:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 2b8:	72757400 	rsbsvc	r7, r5, #0, 8
 2bc:	7073006e 	rsbsvc	r0, r3, lr, rrx
 2c0:	78646565 	stmdavc	r4!, {r0, r2, r5, r6, r8, sl, sp, lr}^
 2c4:	65707300 	ldrbvs	r7, [r0, #-768]!	; 0xfffffd00
 2c8:	00796465 	rsbseq	r6, r9, r5, ror #8
 2cc:	4a424f50 	bmi	1094014 <startup-0x1ef6bfec>
 2d0:	00544345 	subseq	r4, r4, r5, asr #6
 2d4:	4d2f3a43 	vstmdbmi	pc!, {s6-s72}
 2d8:	4d2f504f 	stcmi	0, cr5, [pc, #-316]!	; 1a4 <startup-0x1ffffe5c>
 2dc:	532d504f 			; <UNDEFINED> instruction: 0x532d504f
 2e0:	2f6c6570 	svccs	0x006c6570
 2e4:	6b616e53 	blvs	185bc38 <startup-0x1e7a43c8>
 2e8:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xfffff09b
 2ec:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
 2f0:	00632e70 	rsbeq	r2, r3, r0, ror lr
 2f4:	616c6564 	cmnvs	ip, r4, ror #10
 2f8:	696d5f79 	stmdbvs	sp!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 2fc:	00696c6c 	rsbeq	r6, r9, ip, ror #24
 300:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 304:	6f675f69 	svcvs	0x00675f69
 308:	79786f74 	ldmdbvc	r8!, {r2, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 30c:	63736100 	cmnvs	r3, #0, 2
 310:	635f6969 	cmpvs	pc, #1720320	; 0x1a4000
 314:	5f6c7274 	svcpl	0x006c7274
 318:	5f746962 	svcpl	0x00746962
 31c:	61656c63 	cmnvs	r5, r3, ror #24
 320:	65640072 	strbvs	r0, [r4, #-114]!	; 0xffffff8e
 324:	5f79616c 	svcpl	0x0079616c
 328:	726b696d 	rsbvc	r6, fp, #1785856	; 0x1b4000
 32c:	3a43006f 	bcc	10c04f0 <startup-0x1ef3fb10>
 330:	504f4d2f 	subpl	r4, pc, pc, lsr #26
 334:	504f4d2f 	subpl	r4, pc, pc, lsr #26
 338:	6570532d 	ldrbvs	r5, [r0, #-813]!	; 0xfffffcd3
 33c:	6e532f6c 	cdpvs	15, 5, cr2, cr3, cr12, {3}
 340:	2f656b61 	svccs	0x00656b61
 344:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 348:	73696469 	cmnvc	r9, #1761607680	; 0x69000000
 34c:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 350:	6100632e 	tstvs	r0, lr, lsr #6
 354:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 358:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 35c:	635f6574 	cmpvs	pc, #116, 10	; 0x1d000000
 360:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
 364:	656c6c6f 	strbvs	r6, [ip, #-3183]!	; 0xfffff391
 368:	73610072 	cmnvc	r1, #114	; 0x72
 36c:	5f696963 	svcpl	0x00696963
 370:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
 374:	6174735f 	cmnvs	r4, pc, asr r3
 378:	00737574 	rsbseq	r7, r3, r4, ror r5
 37c:	61656c63 	cmnvs	r5, r3, ror #24
 380:	69645f72 	stmdbvs	r4!, {r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 384:	616c7073 	smcvs	50947	; 0xc703
 388:	73610079 	cmnvc	r1, #121	; 0x79
 38c:	5f696963 	svcpl	0x00696963
 390:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 394:	61645f65 	cmnvs	r4, r5, ror #30
 398:	64006174 	strvs	r6, [r0], #-372	; 0xfffffe8c
 39c:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 3a0:	3035325f 	eorscc	r3, r5, pc, asr r2
 3a4:	7200736e 	andvc	r7, r0, #-1207959551	; 0xb8000001
 3a8:	61567465 	cmpvs	r6, r5, ror #8
 3ac:	7361006c 	cmnvc	r1, #108	; 0x6c
 3b0:	5f696963 	svcpl	0x00696963
 3b4:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
 3b8:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
 3bc:	6c6f7274 	sfmvs	f7, 2, [pc], #-464	; 1f4 <startup-0x1ffffe0c>
 3c0:	0072656c 	rsbseq	r6, r2, ip, ror #10
 3c4:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 3c8:	65725f69 	ldrbvs	r5, [r2, #-3945]!	; 0xfffff097
 3cc:	645f6461 	ldrbvs	r6, [pc], #-1121	; 3d4 <startup-0x1ffffc2c>
 3d0:	00617461 	rsbeq	r7, r1, r1, ror #8
 3d4:	70736964 	rsbsvc	r6, r3, r4, ror #18
 3d8:	5f79616c 	svcpl	0x0079616c
 3dc:	746e6f63 	strbtvc	r6, [lr], #-3939	; 0xfffff09d
 3e0:	006c6f72 	rsbeq	r6, ip, r2, ror pc
 3e4:	72646461 	rsbvc	r6, r4, #1627389952	; 0x61000000
 3e8:	00737365 	rsbseq	r7, r3, r5, ror #6
 3ec:	44746572 	ldrbtmi	r6, [r4], #-1394	; 0xfffffa8e
 3f0:	00617461 	rsbeq	r7, r1, r1, ror #8
 3f4:	746e7566 	strbtvc	r7, [lr], #-1382	; 0xfffffa9a
 3f8:	5f6e6f69 	svcpl	0x006e6f69
 3fc:	00746573 	rsbseq	r6, r4, r3, ror r5
 400:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 404:	72775f69 	rsbsvc	r5, r7, #420	; 0x1a4
 408:	5f657469 	svcpl	0x00657469
 40c:	00646d63 	rsbeq	r6, r4, r3, ror #26
 410:	53746572 	cmnpl	r4, #478150656	; 0x1c800000
 414:	00746174 	rsbseq	r6, r4, r4, ror r1
 418:	72746e65 	rsbsvc	r6, r4, #1616	; 0x650
 41c:	6f6d5f79 	svcvs	0x006d5f79
 420:	735f6564 	cmpvc	pc, #100, 10	; 0x19000000
 424:	61007465 	tstvs	r0, r5, ror #8
 428:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 42c:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 430:	635f6574 	cmpvs	pc, #116, 10	; 0x1d000000
 434:	00726168 	rsbseq	r6, r2, r8, ror #2
 438:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 43c:	74635f69 	strbtvc	r5, [r3], #-3945	; 0xfffff097
 440:	625f6c72 	subsvs	r6, pc, #29184	; 0x7200
 444:	735f7469 	cmpvc	pc, #1761607680	; 0x69000000
 448:	61007465 	tstvs	r0, r5, ror #8
 44c:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 450:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
 454:	65640074 	strbvs	r0, [r4, #-116]!	; 0xffffff8c
 458:	5f79616c 	svcpl	0x0079616c
 45c:	6e303035 	mrcvs	0, 1, r3, cr0, cr5, {1}
 460:	3a430073 	bcc	10c0634 <startup-0x1ef3f9cc>
 464:	504f4d2f 	subpl	r4, pc, pc, lsr #26
 468:	504f4d2f 	subpl	r4, pc, pc, lsr #26
 46c:	6570532d 	ldrbvs	r5, [r0, #-813]!	; 0xfffffcd3
 470:	6e532f6c 	cdpvs	15, 5, cr2, cr3, cr12, {3}
 474:	2f656b61 	svccs	0x00656b61
 478:	616c6564 	cmnvs	ip, r4, ror #10
 47c:	00632e79 	rsbeq	r2, r3, r9, ror lr
 480:	70617267 	rsbvc	r7, r1, r7, ror #4
 484:	5f636968 	svcpl	0x00636968
 488:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 48c:	6f635f65 	svcvs	0x00635f65
 490:	6e616d6d 	cdpvs	13, 6, cr6, cr1, cr13, {3}
 494:	72670064 	rsbvc	r0, r7, #100	; 0x64
 498:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 49c:	72645f63 	rsbvc	r5, r4, #396	; 0x18c
 4a0:	735f7761 	cmpvc	pc, #25427968	; 0x1840000
 4a4:	65657263 	strbvs	r7, [r5, #-611]!	; 0xfffffd9d
 4a8:	7267006e 	rsbvc	r0, r7, #110	; 0x6e
 4ac:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 4b0:	65725f63 	ldrbvs	r5, [r2, #-3939]!	; 0xfffff09d
 4b4:	645f6461 	ldrbvs	r6, [pc], #-1121	; 4bc <startup-0x1ffffb44>
 4b8:	00617461 	rsbeq	r7, r1, r1, ror #8
 4bc:	70617267 	rsbvc	r7, r1, r7, ror #4
 4c0:	5f636968 	svcpl	0x00636968
 4c4:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
 4c8:	78697000 	stmdavc	r9!, {ip, sp, lr}^
 4cc:	67006c65 	strvs	r6, [r0, -r5, ror #24]
 4d0:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 4d4:	635f6369 	cmpvs	pc, #-1543503871	; 0xa4000001
 4d8:	5f6c7274 	svcpl	0x006c7274
 4dc:	5f746962 	svcpl	0x00746962
 4e0:	00746573 	rsbseq	r6, r4, r3, ror r5
 4e4:	61656c63 	cmnvs	r5, r3, ror #24
 4e8:	61625f72 	smcvs	9714	; 0x25f2
 4ec:	75626b63 	strbvc	r6, [r2, #-2915]!	; 0xfffff49d
 4f0:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
 4f4:	61726700 	cmnvs	r2, r0, lsl #14
 4f8:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 4fc:	6961775f 	stmdbvs	r1!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 500:	65725f74 	ldrbvs	r5, [r2, #-3956]!	; 0xfffff08c
 504:	00796461 	rsbseq	r6, r9, r1, ror #8
 508:	6b73616d 	blvs	1cd8ac4 <startup-0x1e32753c>
 50c:	6e697500 	cdpvs	5, 6, cr7, cr9, cr0, {0}
 510:	745f3874 	ldrbvc	r3, [pc], #-2164	; 518 <startup-0x1ffffae8>
 514:	61726700 	cmnvs	r2, r0, lsl #14
 518:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 51c:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 520:	73006574 	movwvc	r6, #1396	; 0x574
 524:	63656c65 	cmnvs	r5, #25856	; 0x6500
 528:	6f635f74 	svcvs	0x00635f74
 52c:	6f72746e 	svcvs	0x0072746e
 530:	72656c6c 	rsbvc	r6, r5, #108, 24	; 0x6c00
 534:	646e6900 	strbtvs	r6, [lr], #-2304	; 0xfffff700
 538:	67007865 	strvs	r7, [r0, -r5, ror #16]
 53c:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 540:	635f6369 	cmpvs	pc, #-1543503871	; 0xa4000001
 544:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
 548:	7263735f 	rsbvc	r7, r3, #2080374785	; 0x7c000001
 54c:	006e6565 	rsbeq	r6, lr, r5, ror #10
 550:	70617267 	rsbvc	r7, r1, r7, ror #4
 554:	5f636968 	svcpl	0x00636968
 558:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 55c:	61645f65 	cmnvs	r4, r5, ror #30
 560:	67006174 	smlsdxvs	r0, r4, r1, r6
 564:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 568:	635f6369 	cmpvs	pc, #-1543503871	; 0xa4000001
 56c:	5f6c7274 	svcpl	0x006c7274
 570:	5f746962 	svcpl	0x00746962
 574:	61656c63 	cmnvs	r5, r3, ror #24
 578:	61700072 	cmnvs	r0, r2, ror r0
 57c:	43006567 	movwmi	r6, #1383	; 0x567
 580:	4f4d2f3a 	svcmi	0x004d2f3a
 584:	4f4d2f50 	svcmi	0x004d2f50
 588:	70532d50 	subsvc	r2, r3, r0, asr sp
 58c:	532f6c65 			; <UNDEFINED> instruction: 0x532f6c65
 590:	656b616e 	strbvs	r6, [fp, #-366]!	; 0xfffffe92
 594:	6172672f 	cmnvs	r2, pc, lsr #14
 598:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 59c:	70736964 	rsbsvc	r6, r3, r4, ror #18
 5a0:	2e79616c 	rpwcsez	f6, f1, #4.0
 5a4:	72670063 	rsbvc	r0, r7, #99	; 0x63
 5a8:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 5ac:	6e695f63 	cdpvs	15, 6, cr5, cr9, cr3, {3}
 5b0:	72007469 	andvc	r7, r0, #1761607680	; 0x69000000
 5b4:	61767465 	cmnvs	r6, r5, ror #8
 5b8:	656b006c 	strbvs	r0, [fp, #-108]!	; 0xffffff94
 5bc:	6b006279 	blvs	18fa8 <startup-0x1ffe7058>
 5c0:	61567965 	cmpvs	r6, r5, ror #18
 5c4:	756f006c 	strbvc	r0, [pc, #-108]!	; 560 <startup-0x1ffffaa0>
 5c8:	65733774 	ldrbvs	r3, [r3, #-1908]!	; 0xfffff88c
 5cc:	65720067 	ldrbvs	r0, [r2, #-103]!	; 0xffffff99
 5d0:	635f6461 	cmpvs	pc, #1627389952	; 0x61000000
 5d4:	756f6c6f 	strbvc	r6, [pc, #-3183]!	; fffff96d <rear+0xdfffc329>
 5d8:	6b006e6d 	blvs	1bf94 <startup-0x1ffe406c>
 5dc:	765f7965 	ldrbvc	r7, [pc], -r5, ror #18
 5e0:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
 5e4:	2f3a4300 	svccs	0x003a4300
 5e8:	2f504f4d 	svccs	0x00504f4d
 5ec:	2d504f4d 	ldclcs	15, cr4, [r0, #-308]	; 0xfffffecc
 5f0:	6c657053 	stclvs	0, cr7, [r5], #-332	; 0xfffffeb4
 5f4:	616e532f 	cmnvs	lr, pc, lsr #6
 5f8:	6b2f656b 	blvs	bd9bac <startup-0x1f426454>
 5fc:	2e627965 	vnmulcs.f16	s15, s4, s11	; <UNPREDICTABLE>
 600:	6e690063 	cdpvs	0, 6, cr0, cr9, cr3, {3}
 604:	00747570 	rsbseq	r7, r4, r0, ror r5
 608:	69746361 	ldmdbvs	r4!, {r0, r5, r6, r8, r9, sp, lr}^
 60c:	65746176 	ldrbvs	r6, [r4, #-374]!	; 0xfffffe8a
 610:	776f725f 			; <UNDEFINED> instruction: 0x776f725f
 614:	73645f00 	cmnvc	r4, #0, 30
 618:	61685f6f 	cmnvs	r8, pc, ror #30
 61c:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0xfffffb92
 620:	46736900 	ldrbtmi	r6, [r3], -r0, lsl #18
 624:	006c6c75 	rsbeq	r6, ip, r5, ror ip
 628:	7a69735f 	bvc	1a5d3ac <startup-0x1e5a2c54>
 62c:	725f0065 	subsvc	r0, pc, #101	; 0x65
 630:	34646e61 	strbtcc	r6, [r4], #-3681	; 0xfffff19f
 634:	655f0038 	ldrbvs	r0, [pc, #-56]	; 604 <startup-0x1ffff9fc>
 638:	6772656d 	ldrbvs	r6, [r2, -sp, ror #10]!
 63c:	79636e65 	stmdbvc	r3!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
 640:	63775f00 	cmnvs	r7, #0, 30
 644:	6d6f7472 	cfstrdvs	mvd7, [pc, #-456]!	; 484 <startup-0x1ffffb7c>
 648:	74735f62 	ldrbtvc	r5, [r3], #-3938	; 0xfffff09e
 64c:	00657461 	rsbeq	r7, r5, r1, ror #8
 650:	7363775f 	cmnvc	r3, #24903680	; 0x17c0000
 654:	6d6f7472 	cfstrdvs	mvd7, [pc, #-456]!	; 494 <startup-0x1ffffb6c>
 658:	735f7362 	cmpvc	pc, #-2013265919	; 0x88000001
 65c:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
 660:	6e6f6c00 	cdpvs	12, 6, cr6, cr15, cr0, {0}
 664:	6f6c2067 	svcvs	0x006c2067
 668:	7520676e 	strvc	r6, [r0, #-1902]!	; 0xfffff892
 66c:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
 670:	2064656e 	rsbcs	r6, r4, lr, ror #10
 674:	00746e69 	rsbseq	r6, r4, r9, ror #28
 678:	66626c5f 			; <UNDEFINED> instruction: 0x66626c5f
 67c:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0xfffff68d
 680:	6d657200 	sfmvs	f7, 2, [r5, #-0]
 684:	0065766f 	rsbeq	r7, r5, pc, ror #12
 688:	6f696e5f 	svcvs	0x00696e5f
 68c:	5f007362 	svcpl	0x00007362
 690:	7472626d 	ldrbtvc	r6, [r2], #-621	; 0xfffffd93
 694:	5f63776f 	svcpl	0x0063776f
 698:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
 69c:	5f5f0065 	svcpl	0x005f0065
 6a0:	735f6d74 	cmpvc	pc, #116, 26	; 0x1d00
 6a4:	6c006365 	stcvs	3, cr6, [r0], {101}	; 0x65
 6a8:	20676e6f 	rsbcs	r6, r7, pc, ror #28
 6ac:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
 6b0:	746e6920 	strbtvc	r6, [lr], #-2336	; 0xfffff6e0
 6b4:	62755f00 	rsbsvs	r5, r5, #0, 30
 6b8:	5f006675 	svcpl	0x00006675
 6bc:	65736162 	ldrbvs	r6, [r3, #-354]!	; 0xfffffe9e
 6c0:	745f5f00 	ldrbvc	r5, [pc], #-3840	; 6c8 <startup-0x1ffff938>
 6c4:	6f685f6d 	svcvs	0x00685f6d
 6c8:	5f007275 	svcpl	0x00007275
 6cc:	0066735f 	rsbeq	r7, r6, pc, asr r3
 6d0:	5f6e6f5f 	svcpl	0x006e6f5f
 6d4:	74697865 	strbtvc	r7, [r9], #-2149	; 0xfffff79b
 6d8:	6772615f 			; <UNDEFINED> instruction: 0x6772615f
 6dc:	635f0073 	cmpvs	pc, #115	; 0x73
 6e0:	696b6f6f 	stmdbvs	fp!, {r0, r1, r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
 6e4:	5f5f0065 	svcpl	0x005f0065
 6e8:	756c6773 	strbvc	r6, [ip, #-1907]!	; 0xfffff88d
 6ec:	73690065 	cmnvc	r9, #101	; 0x65
 6f0:	74706d45 	ldrbtvc	r6, [r0], #-3397	; 0xfffff2bb
 6f4:	665f0079 			; <UNDEFINED> instruction: 0x665f0079
 6f8:	7367616c 	cmnvc	r7, #108, 2
 6fc:	73695f00 	cmnvc	r9, #0, 30
 700:	6178635f 	cmnvs	r8, pc, asr r3
 704:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
 708:	006e6964 	rsbeq	r6, lr, r4, ror #18
 70c:	6b6c625f 	blvs	1b19090 <startup-0x1e4e6f70>
 710:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0xfffff68d
 714:	76635f00 	strbtvc	r5, [r3], -r0, lsl #30
 718:	66756274 			; <UNDEFINED> instruction: 0x66756274
 71c:	666f5f00 	strbtvs	r5, [pc], -r0, lsl #30
 720:	74657366 	strbtvc	r7, [r5], #-870	; 0xfffffc9a
 724:	626d5f00 	rsbvs	r5, sp, #0, 30
 728:	6f747273 	svcvs	0x00747273
 72c:	5f736377 	svcpl	0x00736377
 730:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
 734:	6d5f0065 	ldclvs	0, cr0, [pc, #-404]	; 5a8 <startup-0x1ffffa58>
 738:	656c7262 	strbvs	r7, [ip, #-610]!	; 0xfffffd9e
 73c:	74735f6e 	ldrbtvc	r5, [r3], #-3950	; 0xfffff092
 740:	00657461 	rsbeq	r7, r5, r1, ror #8
 744:	616e665f 	cmnvs	lr, pc, asr r6
 748:	00736772 	rsbseq	r6, r3, r2, ror r7
 74c:	736e665f 	cmnvc	lr, #99614720	; 0x5f00000
 750:	69735f00 	ldmdbvs	r3!, {r8, r9, sl, fp, ip, lr}^
 754:	5f006e67 	svcpl	0x00006e67
 758:	636f6c66 	cmnvs	pc, #26112	; 0x6600
 75c:	00745f6b 	rsbseq	r5, r4, fp, ror #30
 760:	6474735f 	ldrbtvs	r7, [r4], #-863	; 0xfffffca1
 764:	00727265 	rsbseq	r7, r2, r5, ror #4
 768:	6769425f 			; <UNDEFINED> instruction: 0x6769425f
 76c:	00746e69 	rsbseq	r6, r4, r9, ror #28
 770:	6d61675f 	stclvs	7, cr6, [r1, #-380]!	; 0xfffffe84
 774:	735f616d 	cmpvc	pc, #1073741851	; 0x4000001b
 778:	676e6769 	strbvs	r6, [lr, -r9, ror #14]!
 77c:	5f006d61 	svcpl	0x00006d61
 780:	75736572 	ldrbvc	r6, [r3, #-1394]!	; 0xfffffa8e
 784:	6b5f746c 	blvs	17dd93c <startup-0x1e8226c4>
 788:	745f5f00 	ldrbvc	r5, [pc], #-3840	; 790 <startup-0x1ffff870>
 78c:	5f5f006d 	svcpl	0x005f006d
 790:	62686377 	rsbvs	r6, r8, #-603979775	; 0xdc000001
 794:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
 798:	74756f64 	ldrbtvc	r6, [r5], #-3940	; 0xfffff09c
 79c:	76635f00 	strbtvc	r5, [r3], -r0, lsl #30
 7a0:	6e656c74 	mcrvs	12, 3, r6, cr5, cr4, {3}
 7a4:	69665f00 	stmdbvs	r6!, {r8, r9, sl, fp, ip, lr}^
 7a8:	4300656c 	movwmi	r6, #1388	; 0x56c
 7ac:	4f4d2f3a 	svcmi	0x004d2f3a
 7b0:	4f4d2f50 	svcmi	0x004d2f50
 7b4:	70532d50 	subsvc	r2, r3, r0, asr sp
 7b8:	532f6c65 			; <UNDEFINED> instruction: 0x532f6c65
 7bc:	656b616e 	strbvs	r6, [fp, #-366]!	; 0xfffffe92
 7c0:	6575712f 	ldrbvs	r7, [r5, #-303]!	; 0xfffffed1
 7c4:	632e6575 			; <UNDEFINED> instruction: 0x632e6575
 7c8:	65657000 	strbvs	r7, [r5, #-0]!
 7cc:	6873006b 	ldmdavs	r3!, {r0, r1, r3, r5, r6}^
 7d0:	2074726f 	rsbscs	r7, r4, pc, ror #4
 7d4:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
 7d8:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
 7dc:	746e6920 	strbtvc	r6, [lr], #-2336	; 0xfffff6e0
 7e0:	74615f00 	strbtvc	r5, [r1], #-3840	; 0xfffff100
 7e4:	74697865 	strbtvc	r7, [r9], #-2149	; 0xfffff79b
 7e8:	735f0030 	cmpvc	pc, #48	; 0x30
 7ec:	616e6769 	cmnvs	lr, r9, ror #14
 7f0:	75625f6c 	strbvc	r5, [r2, #-3948]!	; 0xfffff094
 7f4:	615f0066 	cmpvs	pc, r6, rrx
 7f8:	69746373 	ldmdbvs	r4!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 7fc:	625f656d 	subsvs	r6, pc, #457179136	; 0x1b400000
 800:	5f006675 	svcpl	0x00006675
 804:	75736572 	ldrbvc	r6, [r3, #-1394]!	; 0xfffffa8e
 808:	5f00746c 	svcpl	0x0000746c
 80c:	6863775f 	stmdavs	r3!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 810:	4f4c5f00 	svcmi	0x004c5f00
 814:	545f4b43 	ldrbpl	r4, [pc], #-2883	; 81c <startup-0x1ffff7e4>
 818:	6e697700 	cdpvs	7, 6, cr7, cr9, cr0, {0}
 81c:	00745f74 	rsbseq	r5, r4, r4, ror pc
 820:	616c665f 	cmnvs	ip, pc, asr r6
 824:	00327367 	eorseq	r7, r2, r7, ror #6
 828:	6f6c5f5f 	svcvs	0x006c5f5f
 82c:	656c6163 	strbvs	r6, [ip, #-355]!	; 0xfffffe9d
 830:	5f00745f 	svcpl	0x0000745f
 834:	5f6d745f 	svcpl	0x006d745f
 838:	72616579 	rsbvc	r6, r1, #507510784	; 0x1e400000
 83c:	6d6e5f00 	stclvs	15, cr5, [lr, #-0]
 840:	6f6c6c61 	svcvs	0x006c6c61
 844:	6e5f0063 	cdpvs	0, 5, cr0, cr15, cr3, {3}
 848:	66747865 	ldrbtvs	r7, [r4], -r5, ror #16
 84c:	745f5f00 	ldrbvc	r5, [pc], #-3840	; 854 <startup-0x1ffff7ac>
 850:	6f6d5f6d 	svcvs	0x006d5f6d
 854:	615f006e 	cmpvs	pc, lr, rrx
 858:	69786574 	ldmdbvs	r8!, {r2, r4, r5, r6, r8, sl, sp, lr}^
 85c:	5f5f0074 	svcpl	0x005f0074
 860:	64696473 	strbtvs	r6, [r9], #-1139	; 0xfffffb8d
 864:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
 868:	666f5f00 	strbtvs	r5, [pc], -r0, lsl #30
 86c:	00745f66 	rsbseq	r5, r4, r6, ror #30
 870:	6572665f 	ldrbvs	r6, [r2, #-1631]!	; 0xfffff9a1
 874:	73696c65 	cmnvc	r9, #25856	; 0x6500
 878:	775f0074 			; <UNDEFINED> instruction: 0x775f0074
 87c:	6d6f7463 	cfstrdvs	mvd7, [pc, #-396]!	; 6f8 <startup-0x1ffff908>
 880:	74735f62 	ldrbtvc	r5, [r3], #-3938	; 0xfffff09e
 884:	00657461 	rsbeq	r7, r5, r1, ror #8
 888:	6f6f425f 	svcvs	0x006f425f
 88c:	6e5f006c 	cdpvs	0, 5, cr0, cr15, cr12, {3}
 890:	5f007765 	svcpl	0x00007765
 894:	72655f68 	rsbvc	r5, r5, #104, 30	; 0x1a0
 898:	006f6e72 	rsbeq	r6, pc, r2, ror lr	; <UNPREDICTABLE>
 89c:	726f6873 	rsbvc	r6, pc, #7536640	; 0x730000
 8a0:	6e692074 	mcrvs	0, 3, r2, cr9, cr4, {3}
 8a4:	5f5f0074 	svcpl	0x005f0074
 8a8:	795f6d74 	ldmdbvc	pc, {r2, r4, r5, r6, r8, sl, fp, sp, lr}^	; <UNPREDICTABLE>
 8ac:	00796164 	rsbseq	r6, r9, r4, ror #2
 8b0:	62735f5f 	rsbsvs	r5, r3, #380	; 0x17c
 8b4:	5f006675 	svcpl	0x00006675
 8b8:	73626f69 	cmnvc	r2, #420	; 0x1a4
 8bc:	465f5f00 	ldrbmi	r5, [pc], -r0, lsl #30
 8c0:	00454c49 	subeq	r4, r5, r9, asr #24
 8c4:	73626d5f 	cmnvc	r2, #6080	; 0x17c0
 8c8:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
 8cc:	5f00745f 	svcpl	0x0000745f
 8d0:	4946735f 	stmdbmi	r6, {r0, r1, r2, r3, r4, r6, r8, r9, ip, sp, lr}^
 8d4:	5f00454c 	svcpl	0x0000454c
 8d8:	7473626d 	ldrbtvc	r6, [r3], #-621	; 0xfffffd93
 8dc:	00657461 	rsbeq	r7, r5, r1, ror #8
 8e0:	6e61725f 	mcrvs	2, 3, r7, cr1, cr15, {2}
 8e4:	656e5f64 	strbvs	r5, [lr, #-3940]!	; 0xfffff09c
 8e8:	69007478 	stmdbvs	r0, {r3, r4, r5, r6, sl, ip, sp, lr}
 8ec:	7265736e 	rsbvc	r7, r5, #-1207959551	; 0xb8000001
 8f0:	6d5f0074 	ldclvs	0, cr0, [pc, #-464]	; 728 <startup-0x1ffff8d8>
 8f4:	6e656c62 	cdpvs	12, 6, cr6, cr5, cr2, {3}
 8f8:	6174735f 	cmnvs	r4, pc, asr r3
 8fc:	5f006574 	svcpl	0x00006574
 900:	00636e69 	rsbeq	r6, r3, r9, ror #28
 904:	646e695f 	strbtvs	r6, [lr], #-2399	; 0xfffff6a1
 908:	696e6900 	stmdbvs	lr!, {r8, fp, sp, lr}^
 90c:	75715f74 	ldrbvc	r5, [r1, #-3956]!	; 0xfffff08c
 910:	00657565 	rsbeq	r7, r5, r5, ror #10
 914:	636f6c5f 	cmnvs	pc, #24320	; 0x5f00
 918:	00656c61 	rsbeq	r6, r5, r1, ror #24
 91c:	6c635f5f 	stclvs	15, cr5, [r3], #-380	; 0xfffffe84
 920:	756e6165 	strbvc	r6, [lr, #-357]!	; 0xfffffe9b
 924:	755f0070 	ldrbvc	r0, [pc, #-112]	; 8bc <startup-0x1ffff744>
 928:	6570736e 	ldrbvs	r7, [r0, #-878]!	; 0xfffffc92
 92c:	69666963 	stmdbvs	r6!, {r0, r1, r5, r6, r8, fp, sp, lr}^
 930:	6c5f6465 	cfldrdvs	mvd6, [pc], {101}	; 0x65
 934:	6c61636f 	stclvs	3, cr6, [r1], #-444	; 0xfffffe44
 938:	6e695f65 	cdpvs	15, 6, cr5, cr9, cr5, {3}
 93c:	5f006f66 	svcpl	0x00006f66
 940:	7778616d 	ldrbvc	r6, [r8, -sp, ror #2]!
 944:	5f007364 	svcpl	0x00007364
 948:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
 94c:	735f0074 	cmpvc	pc, #116	; 0x74
 950:	00646565 	rsbeq	r6, r4, r5, ror #10
 954:	6f635f5f 	svcvs	0x00635f5f
 958:	00746e75 	rsbseq	r6, r4, r5, ror lr
 95c:	6f6c5f5f 	svcvs	0x006c5f5f
 960:	5f006b63 	svcpl	0x00006b63
 964:	6c61765f 	stclvs	6, cr7, [r1], #-380	; 0xfffffe84
 968:	5f006575 	svcpl	0x00006575
 96c:	6b656573 	blvs	1959f40 <startup-0x1e6a60c0>
 970:	70665f00 	rsbvc	r5, r6, r0, lsl #30
 974:	745f736f 	ldrbvc	r7, [pc], #-879	; 97c <startup-0x1ffff684>
 978:	745f5f00 	ldrbvc	r5, [pc], #-3840	; 980 <startup-0x1ffff680>
 97c:	696d5f6d 	stmdbvs	sp!, {r0, r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
 980:	626f006e 	rsbvs	r0, pc, #110	; 0x6e
 984:	7272416a 	rsbsvc	r4, r2, #-2147483622	; 0x8000001a
 988:	5f007961 	svcpl	0x00007961
 98c:	746c756d 	strbtvc	r7, [ip], #-1389	; 0xfffffa93
 990:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
 994:	6b6f7472 	blvs	1bddb64 <startup-0x1e42249c>
 998:	73616c5f 	cmnvc	r1, #24320	; 0x5f00
 99c:	65720074 	ldrbvs	r0, [r2, #-116]!	; 0xffffff8c
 9a0:	69007261 	stmdbvs	r0, {r0, r5, r6, r9, ip, sp, lr}
 9a4:	436d6574 	cmnmi	sp, #116, 10	; 0x1d000000
 9a8:	746e756f 	strbtvc	r7, [lr], #-1391	; 0xfffffa91
 9ac:	6e665f00 	cdpvs	15, 6, cr5, cr6, cr0, {0}
 9b0:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
 9b4:	615f0073 	cmpvs	pc, r3, ror r0	; <UNPREDICTABLE>
 9b8:	5f006464 	svcpl	0x00006464
 9bc:	6f4c555f 	svcvs	0x004c555f
 9c0:	5f00676e 	svcpl	0x0000676e
 9c4:	64746567 	ldrbtvs	r6, [r4], #-1383	; 0xfffffa99
 9c8:	5f657461 	svcpl	0x00657461
 9cc:	00727265 	rsbseq	r7, r2, r5, ror #4
 9d0:	6e6f7266 	cdpvs	2, 6, cr7, cr15, cr6, {3}
 9d4:	675f0074 			; <UNDEFINED> instruction: 0x675f0074
 9d8:	61626f6c 	cmnvs	r2, ip, ror #30
 9dc:	6d695f6c 	stclvs	15, cr5, [r9, #-432]!	; 0xfffffe50
 9e0:	65727570 	ldrbvs	r7, [r2, #-1392]!	; 0xfffffa90
 9e4:	7274705f 	rsbsvc	r7, r4, #95	; 0x5f
 9e8:	6e755f00 	cdpvs	15, 7, cr5, cr5, cr0, {0}
 9ec:	64657375 	strbtvs	r7, [r5], #-885	; 0xfffffc8b
 9f0:	6e61725f 	mcrvs	2, 3, r7, cr1, cr15, {2}
 9f4:	775f0064 	ldrbvc	r0, [pc, -r4, rrx]
 9f8:	5f007364 	svcpl	0x00007364
 9fc:	5f6d745f 	svcpl	0x006d745f
 a00:	79616477 	stmdbvc	r1!, {r0, r1, r2, r4, r5, r6, sl, sp, lr}^
 a04:	6c675f00 	stclvs	15, cr5, [r7], #-0
 a08:	5f006575 	svcpl	0x00006575
 a0c:	6134366c 	teqvs	r4, ip, ror #12
 a10:	6675625f 			; <UNDEFINED> instruction: 0x6675625f
 a14:	69735f00 	ldmdbvs	r3!, {r8, r9, sl, fp, ip, lr}^
 a18:	75665f67 	strbvc	r5, [r6, #-3943]!	; 0xfffff099
 a1c:	5f00636e 	svcpl	0x0000636e
 a20:	6675626e 	ldrbtvs	r6, [r5], -lr, ror #4
 a24:	6e755f00 	cdpvs	15, 7, cr5, cr5, cr0, {0}
 a28:	64657375 	strbtvs	r7, [r5], #-885	; 0xfffffc8b
 a2c:	745f5f00 	ldrbvc	r5, [pc], #-3840	; a34 <startup-0x1ffff5cc>
 a30:	73695f6d 	cmnvc	r9, #436	; 0x1b4
 a34:	00747364 	rsbseq	r7, r4, r4, ror #6
 a38:	636f6c5f 	cmnvs	pc, #24320	; 0x5f00
 a3c:	69746c61 	ldmdbvs	r4!, {r0, r5, r6, sl, fp, sp, lr}^
 a40:	625f656d 	subsvs	r6, pc, #457179136	; 0x1b400000
 a44:	5f006675 	svcpl	0x00006675
 a48:	736f6c63 	cmnvc	pc, #25344	; 0x6300
 a4c:	725f0065 	subsvc	r0, pc, #101	; 0x65
 a50:	5f003834 	svcpl	0x00003834
 a54:	6f74626d 	svcvs	0x0074626d
 a58:	735f6377 	cmpvc	pc, #-603979775	; 0xdc000001
 a5c:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
 a60:	35705f00 	ldrbcc	r5, [r0, #-3840]!	; 0xfffff100
 a64:	5f5f0073 	svcpl	0x005f0073
 a68:	6d5f6d74 	ldclvs	13, cr6, [pc, #-464]	; 8a0 <startup-0x1ffff760>
 a6c:	00796164 	rsbseq	r6, r9, r4, ror #2

Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	206d7241 	rsbcs	r7, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d39 	eorscc	r2, r2, r9, lsr sp
  30:	712d3931 			; <UNDEFINED> instruction: 0x712d3931
  34:	616d2d34 	cmnvs	sp, r4, lsr sp
  38:	29726f6a 	ldmdbcs	r2!, {r1, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
  3c:	322e3920 	eorcc	r3, lr, #32, 18	; 0x80000
  40:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  44:	31393130 	teqcc	r9, r0, lsr r1
  48:	20353230 	eorscs	r3, r5, r0, lsr r2
  4c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  50:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  54:	415b2029 	cmpmi	fp, r9, lsr #32
  58:	612f4d52 			; <UNDEFINED> instruction: 0x612f4d52
  5c:	392d6d72 	pushcc	{r1, r4, r5, r6, r8, sl, fp, sp, lr}
  60:	6172622d 	cmnvs	r2, sp, lsr #4
  64:	2068636e 	rsbcs	r6, r8, lr, ror #6
  68:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
  6c:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
  70:	37373220 	ldrcc	r3, [r7, -r0, lsr #4]!
  74:	5d393935 			; <UNDEFINED> instruction: 0x5d393935
	...

Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002b41 	andeq	r2, r0, r1, asr #22
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000021 	andeq	r0, r0, r1, lsr #32
  10:	2d533605 	ldclcs	6, cr3, [r3, #-20]	; 0xffffffec
  14:	0c06004d 	stceq	0, cr0, [r6], {77}	; 0x4d
  18:	01094d07 	tsteq	r9, r7, lsl #26
  1c:	01140412 	tsteq	r4, r2, lsl r4
  20:	03170115 	tsteq	r7, #1073741829	; 0x40000005
  24:	01190118 	tsteq	r9, r8, lsl r1
  28:	061e011a 			; <UNDEFINED> instruction: 0x061e011a

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000000c 	andeq	r0, r0, ip
  14:	00000000 	andeq	r0, r0, r0
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
  20:	0000001c 	andeq	r0, r0, ip, lsl r0
  24:	00000000 	andeq	r0, r0, r0
  28:	20000010 	andcs	r0, r0, r0, lsl r0
  2c:	00000020 	andeq	r0, r0, r0, lsr #32
  30:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  34:	41018e02 	tstmi	r1, r2, lsl #28
  38:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
  3c:	00000007 	andeq	r0, r0, r7
  40:	0000001c 	andeq	r0, r0, ip, lsl r0
  44:	00000000 	andeq	r0, r0, r0
  48:	20000030 	andcs	r0, r0, r0, lsr r0
  4c:	00000062 	andeq	r0, r0, r2, rrx
  50:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  54:	41018e02 	tstmi	r1, r2, lsl #28
  58:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
  5c:	00000007 	andeq	r0, r0, r7
  60:	0000001c 	andeq	r0, r0, ip, lsl r0
  64:	00000000 	andeq	r0, r0, r0
  68:	20000092 	mulcs	r0, r2, r0
  6c:	00000062 	andeq	r0, r0, r2, rrx
  70:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  74:	41018e02 	tstmi	r1, r2, lsl #28
  78:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
  7c:	00000007 	andeq	r0, r0, r7
  80:	0000001c 	andeq	r0, r0, ip, lsl r0
  84:	00000000 	andeq	r0, r0, r0
  88:	200000f4 	strdcs	r0, [r0], -r4
  8c:	000000ac 	andeq	r0, r0, ip, lsr #1
  90:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  94:	41018e02 	tstmi	r1, r2, lsl #28
  98:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
  9c:	00000007 	andeq	r0, r0, r7
  a0:	0000001c 	andeq	r0, r0, ip, lsl r0
  a4:	00000000 	andeq	r0, r0, r0
  a8:	200001a0 	andcs	r0, r0, r0, lsr #3
  ac:	0000002c 	andeq	r0, r0, ip, lsr #32
  b0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  b4:	41018e02 	tstmi	r1, r2, lsl #28
  b8:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
  bc:	00000007 	andeq	r0, r0, r7
  c0:	0000001c 	andeq	r0, r0, ip, lsl r0
  c4:	00000000 	andeq	r0, r0, r0
  c8:	200001cc 	andcs	r0, r0, ip, asr #3
  cc:	000000c2 	andeq	r0, r0, r2, asr #1
  d0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  d4:	41018e02 	tstmi	r1, r2, lsl #28
  d8:	0d41300e 	stcleq	0, cr3, [r1, #-56]	; 0xffffffc8
  dc:	00000007 	andeq	r0, r0, r7
  e0:	0000001c 	andeq	r0, r0, ip, lsl r0
  e4:	00000000 	andeq	r0, r0, r0
  e8:	2000028e 	andcs	r0, r0, lr, lsl #5
  ec:	0000006a 	andeq	r0, r0, sl, rrx
  f0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  f4:	41018e02 	tstmi	r1, r2, lsl #28
  f8:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
  fc:	00000007 	andeq	r0, r0, r7
 100:	0000001c 	andeq	r0, r0, ip, lsl r0
 104:	00000000 	andeq	r0, r0, r0
 108:	200002f8 	strdcs	r0, [r0], -r8
 10c:	0000002c 	andeq	r0, r0, ip, lsr #32
 110:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 114:	41018e02 	tstmi	r1, r2, lsl #28
 118:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 11c:	00000007 	andeq	r0, r0, r7
 120:	0000001c 	andeq	r0, r0, ip, lsl r0
 124:	00000000 	andeq	r0, r0, r0
 128:	20000324 	andcs	r0, r0, r4, lsr #6
 12c:	00000090 	muleq	r0, r0, r0
 130:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 134:	41018e02 	tstmi	r1, r2, lsl #28
 138:	0d41200e 	stcleq	0, cr2, [r1, #-56]	; 0xffffffc8
 13c:	00000007 	andeq	r0, r0, r7
 140:	0000001c 	andeq	r0, r0, ip, lsl r0
 144:	00000000 	andeq	r0, r0, r0
 148:	200003b4 			; <UNDEFINED> instruction: 0x200003b4
 14c:	000000d4 	ldrdeq	r0, [r0], -r4
 150:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 154:	41018e02 	tstmi	r1, r2, lsl #28
 158:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 15c:	00000007 	andeq	r0, r0, r7
 160:	00000018 	andeq	r0, r0, r8, lsl r0
 164:	00000000 	andeq	r0, r0, r0
 168:	20000488 	andcs	r0, r0, r8, lsl #9
 16c:	00000060 	andeq	r0, r0, r0, rrx
 170:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 174:	41018e02 	tstmi	r1, r2, lsl #28
 178:	0000070d 	andeq	r0, r0, sp, lsl #14
 17c:	0000001c 	andeq	r0, r0, ip, lsl r0
 180:	00000000 	andeq	r0, r0, r0
 184:	200004e8 	andcs	r0, r0, r8, ror #9
 188:	00000128 	andeq	r0, r0, r8, lsr #2
 18c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 190:	41018e02 	tstmi	r1, r2, lsl #28
 194:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 198:	00000007 	andeq	r0, r0, r7
 19c:	0000001c 	andeq	r0, r0, ip, lsl r0
 1a0:	00000000 	andeq	r0, r0, r0
 1a4:	20000610 	andcs	r0, r0, r0, lsl r6
 1a8:	00000050 	andeq	r0, r0, r0, asr r0
 1ac:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 1b0:	41018e02 	tstmi	r1, r2, lsl #28
 1b4:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 1b8:	00000007 	andeq	r0, r0, r7
 1bc:	00000018 	andeq	r0, r0, r8, lsl r0
 1c0:	00000000 	andeq	r0, r0, r0
 1c4:	20000660 	andcs	r0, r0, r0, ror #12
 1c8:	00000028 	andeq	r0, r0, r8, lsr #32
 1cc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 1d0:	41018e02 	tstmi	r1, r2, lsl #28
 1d4:	0000070d 	andeq	r0, r0, sp, lsl #14
 1d8:	00000020 	andeq	r0, r0, r0, lsr #32
 1dc:	00000000 	andeq	r0, r0, r0
 1e0:	20000688 	andcs	r0, r0, r8, lsl #13
 1e4:	00000130 	andeq	r0, r0, r0, lsr r1
 1e8:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
 1ec:	87038504 	strhi	r8, [r3, -r4, lsl #10]
 1f0:	42018e02 	andmi	r8, r1, #2, 28
 1f4:	4138c80e 	teqmi	r8, lr, lsl #16
 1f8:	0000070d 	andeq	r0, r0, sp, lsl #14
 1fc:	0000000c 	andeq	r0, r0, ip
 200:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 204:	7c020001 	stcvc	0, cr0, [r2], {1}
 208:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 20c:	00000018 	andeq	r0, r0, r8, lsl r0
 210:	000001fc 	strdeq	r0, [r0], -ip
 214:	200007b8 			; <UNDEFINED> instruction: 0x200007b8
 218:	0000001a 	andeq	r0, r0, sl, lsl r0
 21c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 220:	41018e02 	tstmi	r1, r2, lsl #28
 224:	0000070d 	andeq	r0, r0, sp, lsl #14
 228:	0000001c 	andeq	r0, r0, ip, lsl r0
 22c:	000001fc 	strdeq	r0, [r0], -ip
 230:	200007d2 	ldrdcs	r0, [r0], -r2
 234:	00000032 	andeq	r0, r0, r2, lsr r0
 238:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 23c:	41018e02 	tstmi	r1, r2, lsl #28
 240:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 244:	00000007 	andeq	r0, r0, r7
 248:	0000001c 	andeq	r0, r0, ip, lsl r0
 24c:	000001fc 	strdeq	r0, [r0], -ip
 250:	20000804 	andcs	r0, r0, r4, lsl #16
 254:	0000003c 	andeq	r0, r0, ip, lsr r0
 258:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 25c:	41018e02 	tstmi	r1, r2, lsl #28
 260:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 264:	00000007 	andeq	r0, r0, r7
 268:	0000001c 	andeq	r0, r0, ip, lsl r0
 26c:	000001fc 	strdeq	r0, [r0], -ip
 270:	20000840 	andcs	r0, r0, r0, asr #16
 274:	0000002a 	andeq	r0, r0, sl, lsr #32
 278:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 27c:	41018e02 	tstmi	r1, r2, lsl #28
 280:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 284:	00000007 	andeq	r0, r0, r7
 288:	0000001c 	andeq	r0, r0, ip, lsl r0
 28c:	000001fc 	strdeq	r0, [r0], -ip
 290:	2000086a 	andcs	r0, r0, sl, ror #16
 294:	0000002a 	andeq	r0, r0, sl, lsr #32
 298:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 29c:	41018e02 	tstmi	r1, r2, lsl #28
 2a0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 2a4:	00000007 	andeq	r0, r0, r7
 2a8:	0000001c 	andeq	r0, r0, ip, lsl r0
 2ac:	000001fc 	strdeq	r0, [r0], -ip
 2b0:	20000894 	mulcs	r0, r4, r8
 2b4:	00000030 	andeq	r0, r0, r0, lsr r0
 2b8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 2bc:	41018e02 	tstmi	r1, r2, lsl #28
 2c0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 2c4:	00000007 	andeq	r0, r0, r7
 2c8:	0000001c 	andeq	r0, r0, ip, lsl r0
 2cc:	000001fc 	strdeq	r0, [r0], -ip
 2d0:	200008c4 	andcs	r0, r0, r4, asr #17
 2d4:	00000034 	andeq	r0, r0, r4, lsr r0
 2d8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 2dc:	41018e02 	tstmi	r1, r2, lsl #28
 2e0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 2e4:	00000007 	andeq	r0, r0, r7
 2e8:	0000001c 	andeq	r0, r0, ip, lsl r0
 2ec:	000001fc 	strdeq	r0, [r0], -ip
 2f0:	200008f8 	strdcs	r0, [r0], -r8
 2f4:	0000003c 	andeq	r0, r0, ip, lsr r0
 2f8:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
 2fc:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 300:	180e4101 	stmdane	lr, {r0, r8, lr}
 304:	00070d41 	andeq	r0, r7, r1, asr #26
 308:	0000001c 	andeq	r0, r0, ip, lsl r0
 30c:	000001fc 	strdeq	r0, [r0], -ip
 310:	20000934 	andcs	r0, r0, r4, lsr r9
 314:	0000003c 	andeq	r0, r0, ip, lsr r0
 318:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
 31c:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 320:	180e4101 	stmdane	lr, {r0, r8, lr}
 324:	00070d41 	andeq	r0, r7, r1, asr #26
 328:	00000018 	andeq	r0, r0, r8, lsl r0
 32c:	000001fc 	strdeq	r0, [r0], -ip
 330:	20000970 	andcs	r0, r0, r0, ror r9
 334:	0000002e 	andeq	r0, r0, lr, lsr #32
 338:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 33c:	41018e02 	tstmi	r1, r2, lsl #28
 340:	0000070d 	andeq	r0, r0, sp, lsl #14
 344:	00000018 	andeq	r0, r0, r8, lsl r0
 348:	000001fc 	strdeq	r0, [r0], -ip
 34c:	2000099e 	mulcs	r0, lr, r9
 350:	0000002e 	andeq	r0, r0, lr, lsr #32
 354:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 358:	41018e02 	tstmi	r1, r2, lsl #28
 35c:	0000070d 	andeq	r0, r0, sp, lsl #14
 360:	00000018 	andeq	r0, r0, r8, lsl r0
 364:	000001fc 	strdeq	r0, [r0], -ip
 368:	200009cc 	andcs	r0, r0, ip, asr #19
 36c:	0000002e 	andeq	r0, r0, lr, lsr #32
 370:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 374:	41018e02 	tstmi	r1, r2, lsl #28
 378:	0000070d 	andeq	r0, r0, sp, lsl #14
 37c:	00000018 	andeq	r0, r0, r8, lsl r0
 380:	000001fc 	strdeq	r0, [r0], -ip
 384:	200009fa 	strdcs	r0, [r0], -sl
 388:	0000002e 	andeq	r0, r0, lr, lsr #32
 38c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 390:	41018e02 	tstmi	r1, r2, lsl #28
 394:	0000070d 	andeq	r0, r0, sp, lsl #14
 398:	0000001c 	andeq	r0, r0, ip, lsl r0
 39c:	000001fc 	strdeq	r0, [r0], -ip
 3a0:	20000a28 	andcs	r0, r0, r8, lsr #20
 3a4:	0000002a 	andeq	r0, r0, sl, lsr #32
 3a8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 3ac:	41018e02 	tstmi	r1, r2, lsl #28
 3b0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 3b4:	00000007 	andeq	r0, r0, r7
 3b8:	0000001c 	andeq	r0, r0, ip, lsl r0
 3bc:	000001fc 	strdeq	r0, [r0], -ip
 3c0:	20000a52 	andcs	r0, r0, r2, asr sl
 3c4:	0000004c 	andeq	r0, r0, ip, asr #32
 3c8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 3cc:	41018e02 	tstmi	r1, r2, lsl #28
 3d0:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 3d4:	00000007 	andeq	r0, r0, r7
 3d8:	0000000c 	andeq	r0, r0, ip
 3dc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 3e0:	7c020001 	stcvc	0, cr0, [r2], {1}
 3e4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 3e8:	00000018 	andeq	r0, r0, r8, lsl r0
 3ec:	000003d8 	ldrdeq	r0, [r0], -r8
 3f0:	20000aa0 	andcs	r0, r0, r0, lsr #21
 3f4:	0000000a 	andeq	r0, r0, sl
 3f8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 3fc:	41018e02 	tstmi	r1, r2, lsl #28
 400:	0000070d 	andeq	r0, r0, sp, lsl #14
 404:	00000018 	andeq	r0, r0, r8, lsl r0
 408:	000003d8 	ldrdeq	r0, [r0], -r8
 40c:	20000aaa 	andcs	r0, r0, sl, lsr #21
 410:	0000000a 	andeq	r0, r0, sl
 414:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 418:	41018e02 	tstmi	r1, r2, lsl #28
 41c:	0000070d 	andeq	r0, r0, sp, lsl #14
 420:	0000001c 	andeq	r0, r0, ip, lsl r0
 424:	000003d8 	ldrdeq	r0, [r0], -r8
 428:	20000ab4 			; <UNDEFINED> instruction: 0x20000ab4
 42c:	00000010 	andeq	r0, r0, r0, lsl r0
 430:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 434:	41018e02 	tstmi	r1, r2, lsl #28
 438:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 43c:	00000007 	andeq	r0, r0, r7
 440:	0000001c 	andeq	r0, r0, ip, lsl r0
 444:	000003d8 	ldrdeq	r0, [r0], -r8
 448:	20000ac4 	andcs	r0, r0, r4, asr #21
 44c:	0000003e 	andeq	r0, r0, lr, lsr r0
 450:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 454:	41018e02 	tstmi	r1, r2, lsl #28
 458:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 45c:	00000007 	andeq	r0, r0, r7
 460:	0000000c 	andeq	r0, r0, ip
 464:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 468:	7c020001 	stcvc	0, cr0, [r2], {1}
 46c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 470:	00000018 	andeq	r0, r0, r8, lsl r0
 474:	00000460 	andeq	r0, r0, r0, ror #8
 478:	20000b04 	andcs	r0, r0, r4, lsl #22
 47c:	0000005c 	andeq	r0, r0, ip, asr r0
 480:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 484:	41018e02 	tstmi	r1, r2, lsl #28
 488:	0000070d 	andeq	r0, r0, sp, lsl #14
 48c:	0000001c 	andeq	r0, r0, ip, lsl r0
 490:	00000460 	andeq	r0, r0, r0, ror #8
 494:	20000b60 	andcs	r0, r0, r0, ror #22
 498:	00000050 	andeq	r0, r0, r0, asr r0
 49c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 4a0:	41018e02 	tstmi	r1, r2, lsl #28
 4a4:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 4a8:	00000007 	andeq	r0, r0, r7
 4ac:	0000001c 	andeq	r0, r0, ip, lsl r0
 4b0:	00000460 	andeq	r0, r0, r0, ror #8
 4b4:	20000bb0 			; <UNDEFINED> instruction: 0x20000bb0
 4b8:	00000044 	andeq	r0, r0, r4, asr #32
 4bc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 4c0:	41018e02 	tstmi	r1, r2, lsl #28
 4c4:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 4c8:	00000007 	andeq	r0, r0, r7
 4cc:	0000001c 	andeq	r0, r0, ip, lsl r0
 4d0:	00000460 	andeq	r0, r0, r0, ror #8
 4d4:	20000bf4 	strdcs	r0, [r0], -r4
 4d8:	0000005a 	andeq	r0, r0, sl, asr r0
 4dc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 4e0:	41018e02 	tstmi	r1, r2, lsl #28
 4e4:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 4e8:	00000007 	andeq	r0, r0, r7
 4ec:	00000018 	andeq	r0, r0, r8, lsl r0
 4f0:	00000460 	andeq	r0, r0, r0, ror #8
 4f4:	20000c4e 	andcs	r0, r0, lr, asr #24
 4f8:	0000003e 	andeq	r0, r0, lr, lsr r0
 4fc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 500:	41018e02 	tstmi	r1, r2, lsl #28
 504:	0000070d 	andeq	r0, r0, sp, lsl #14
 508:	0000001c 	andeq	r0, r0, ip, lsl r0
 50c:	00000460 	andeq	r0, r0, r0, ror #8
 510:	20000c8c 	andcs	r0, r0, ip, lsl #25
 514:	0000008c 	andeq	r0, r0, ip, lsl #1
 518:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 51c:	41018e02 	tstmi	r1, r2, lsl #28
 520:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 524:	00000007 	andeq	r0, r0, r7
 528:	0000001c 	andeq	r0, r0, ip, lsl r0
 52c:	00000460 	andeq	r0, r0, r0, ror #8
 530:	20000d18 	andcs	r0, r0, r8, lsl sp
 534:	0000002a 	andeq	r0, r0, sl, lsr #32
 538:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 53c:	41018e02 	tstmi	r1, r2, lsl #28
 540:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 544:	00000007 	andeq	r0, r0, r7
 548:	0000001c 	andeq	r0, r0, ip, lsl r0
 54c:	00000460 	andeq	r0, r0, r0, ror #8
 550:	20000d42 	andcs	r0, r0, r2, asr #26
 554:	00000076 	andeq	r0, r0, r6, ror r0
 558:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 55c:	41018e02 	tstmi	r1, r2, lsl #28
 560:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 564:	00000007 	andeq	r0, r0, r7
 568:	0000001c 	andeq	r0, r0, ip, lsl r0
 56c:	00000460 	andeq	r0, r0, r0, ror #8
 570:	20000db8 			; <UNDEFINED> instruction: 0x20000db8
 574:	00000046 	andeq	r0, r0, r6, asr #32
 578:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 57c:	41018e02 	tstmi	r1, r2, lsl #28
 580:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 584:	00000007 	andeq	r0, r0, r7
 588:	0000001c 	andeq	r0, r0, ip, lsl r0
 58c:	00000460 	andeq	r0, r0, r0, ror #8
 590:	20000dfe 	strdcs	r0, [r0], -lr
 594:	00000046 	andeq	r0, r0, r6, asr #32
 598:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 59c:	41018e02 	tstmi	r1, r2, lsl #28
 5a0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 5a4:	00000007 	andeq	r0, r0, r7
 5a8:	0000001c 	andeq	r0, r0, ip, lsl r0
 5ac:	00000460 	andeq	r0, r0, r0, ror #8
 5b0:	20000e44 	andcs	r0, r0, r4, asr #28
 5b4:	0000005a 	andeq	r0, r0, sl, asr r0
 5b8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 5bc:	41018e02 	tstmi	r1, r2, lsl #28
 5c0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 5c4:	00000007 	andeq	r0, r0, r7
 5c8:	0000001c 	andeq	r0, r0, ip, lsl r0
 5cc:	00000460 	andeq	r0, r0, r0, ror #8
 5d0:	20000e9e 	mulcs	r0, lr, lr
 5d4:	00000036 	andeq	r0, r0, r6, lsr r0
 5d8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 5dc:	41018e02 	tstmi	r1, r2, lsl #28
 5e0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 5e4:	00000007 	andeq	r0, r0, r7
 5e8:	0000001c 	andeq	r0, r0, ip, lsl r0
 5ec:	00000460 	andeq	r0, r0, r0, ror #8
 5f0:	20000ed4 	ldrdcs	r0, [r0], -r4
 5f4:	00000084 	andeq	r0, r0, r4, lsl #1
 5f8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 5fc:	41018e02 	tstmi	r1, r2, lsl #28
 600:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 604:	00000007 	andeq	r0, r0, r7
 608:	0000001c 	andeq	r0, r0, ip, lsl r0
 60c:	00000460 	andeq	r0, r0, r0, ror #8
 610:	20000f58 	andcs	r0, r0, r8, asr pc
 614:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 618:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 61c:	41018e02 	tstmi	r1, r2, lsl #28
 620:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 624:	00000007 	andeq	r0, r0, r7
 628:	0000000c 	andeq	r0, r0, ip
 62c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 630:	7c020001 	stcvc	0, cr0, [r2], {1}
 634:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 638:	0000001c 	andeq	r0, r0, ip, lsl r0
 63c:	00000628 	andeq	r0, r0, r8, lsr #12
 640:	20001028 	andcs	r1, r0, r8, lsr #32
 644:	00000024 	andeq	r0, r0, r4, lsr #32
 648:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 64c:	41018e02 	tstmi	r1, r2, lsl #28
 650:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 654:	00000007 	andeq	r0, r0, r7
 658:	0000001c 	andeq	r0, r0, ip, lsl r0
 65c:	00000628 	andeq	r0, r0, r8, lsr #12
 660:	2000104c 	andcs	r1, r0, ip, asr #32
 664:	00000044 	andeq	r0, r0, r4, asr #32
 668:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 66c:	41018e02 	tstmi	r1, r2, lsl #28
 670:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 674:	00000007 	andeq	r0, r0, r7
 678:	0000001c 	andeq	r0, r0, ip, lsl r0
 67c:	00000628 	andeq	r0, r0, r8, lsr #12
 680:	20001090 	mulcs	r0, r0, r0
 684:	00000068 	andeq	r0, r0, r8, rrx
 688:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
 68c:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 690:	380e4101 	stmdacc	lr, {r0, r8, lr}
 694:	00070d41 	andeq	r0, r7, r1, asr #26
 698:	0000001c 	andeq	r0, r0, ip, lsl r0
 69c:	00000628 	andeq	r0, r0, r8, lsr #12
 6a0:	200010f8 	strdcs	r1, [r0], -r8
 6a4:	00000020 	andeq	r0, r0, r0, lsr #32
 6a8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 6ac:	41018e02 	tstmi	r1, r2, lsl #28
 6b0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 6b4:	00000007 	andeq	r0, r0, r7
 6b8:	0000000c 	andeq	r0, r0, ip
 6bc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 6c0:	7c020001 	stcvc	0, cr0, [r2], {1}
 6c4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 6c8:	0000001c 	andeq	r0, r0, ip, lsl r0
 6cc:	000006b8 			; <UNDEFINED> instruction: 0x000006b8
 6d0:	20001118 	andcs	r1, r0, r8, lsl r1
 6d4:	00000030 	andeq	r0, r0, r0, lsr r0
 6d8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 6dc:	41018e02 	tstmi	r1, r2, lsl #28
 6e0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 6e4:	00000007 	andeq	r0, r0, r7
 6e8:	00000018 	andeq	r0, r0, r8, lsl r0
 6ec:	000006b8 			; <UNDEFINED> instruction: 0x000006b8
 6f0:	20001148 	andcs	r1, r0, r8, asr #2
 6f4:	0000001c 	andeq	r0, r0, ip, lsl r0
 6f8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 6fc:	41018e02 	tstmi	r1, r2, lsl #28
 700:	0000070d 	andeq	r0, r0, sp, lsl #14
 704:	00000018 	andeq	r0, r0, r8, lsl r0
 708:	000006b8 			; <UNDEFINED> instruction: 0x000006b8
 70c:	20001164 	andcs	r1, r0, r4, ror #2
 710:	00000018 	andeq	r0, r0, r8, lsl r0
 714:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 718:	41018e02 	tstmi	r1, r2, lsl #28
 71c:	0000070d 	andeq	r0, r0, sp, lsl #14
 720:	00000018 	andeq	r0, r0, r8, lsl r0
 724:	000006b8 			; <UNDEFINED> instruction: 0x000006b8
 728:	2000117c 	andcs	r1, r0, ip, ror r1
 72c:	0000001c 	andeq	r0, r0, ip, lsl r0
 730:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 734:	41018e02 	tstmi	r1, r2, lsl #28
 738:	0000070d 	andeq	r0, r0, sp, lsl #14
 73c:	00000018 	andeq	r0, r0, r8, lsl r0
 740:	000006b8 			; <UNDEFINED> instruction: 0x000006b8
 744:	20001198 	mulcs	r0, r8, r1
 748:	00000014 	andeq	r0, r0, r4, lsl r0
 74c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 750:	41018e02 	tstmi	r1, r2, lsl #28
 754:	0000070d 	andeq	r0, r0, sp, lsl #14
 758:	0000001c 	andeq	r0, r0, ip, lsl r0
 75c:	000006b8 			; <UNDEFINED> instruction: 0x000006b8
 760:	200011ac 	andcs	r1, r0, ip, lsr #3
 764:	00000060 	andeq	r0, r0, r0, rrx
 768:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 76c:	41018e02 	tstmi	r1, r2, lsl #28
 770:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 774:	00000007 	andeq	r0, r0, r7
 778:	0000001c 	andeq	r0, r0, ip, lsl r0
 77c:	000006b8 			; <UNDEFINED> instruction: 0x000006b8
 780:	2000120c 	andcs	r1, r0, ip, lsl #4
 784:	00000048 	andeq	r0, r0, r8, asr #32
 788:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 78c:	41018e02 	tstmi	r1, r2, lsl #28
 790:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 794:	00000007 	andeq	r0, r0, r7
 798:	0000000c 	andeq	r0, r0, ip
 79c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 7a0:	7c010001 	stcvc	0, cr0, [r1], {1}
 7a4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 7a8:	0000000c 	andeq	r0, r0, ip
 7ac:	00000798 	muleq	r0, r8, r7
 7b0:	20001255 	andcs	r1, r0, r5, asr r2
 7b4:	0000010a 	andeq	r0, r0, sl, lsl #2
