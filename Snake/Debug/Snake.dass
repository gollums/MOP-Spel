
./Debug/Snake.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:
static volatile int points, snakeSize;

__attribute__((naked)) __attribute__((section (".start_section")) )
void startup ( void )
{
__asm__ volatile(" LDR R0,=0x2001C000\n");		/* set stack */
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <startup+0xc>)
__asm__ volatile(" MOV SP,R0\n");
20000002:	4685      	mov	sp, r0
__asm__ volatile(" BL main\n");					/* call main */
20000004:	f000 fb98 	bl	20000738 <main>
__asm__ volatile(".L1: B .L1\n");				/* never return */
20000008:	e7fe      	b.n	20000008 <startup+0x8>
};
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <set_object_speed>:

void set_object_speed(POBJECT o, int speedx, int speedy){
20000010:	b580      	push	{r7, lr}
20000012:	b084      	sub	sp, #16
20000014:	af00      	add	r7, sp, #0
20000016:	60f8      	str	r0, [r7, #12]
20000018:	60b9      	str	r1, [r7, #8]
2000001a:	607a      	str	r2, [r7, #4]
    o->dirx = speedx;
2000001c:	68fb      	ldr	r3, [r7, #12]
2000001e:	68ba      	ldr	r2, [r7, #8]
20000020:	605a      	str	r2, [r3, #4]
    o->diry = speedy;
20000022:	68fb      	ldr	r3, [r7, #12]
20000024:	687a      	ldr	r2, [r7, #4]
20000026:	609a      	str	r2, [r3, #8]
}
20000028:	46c0      	nop			; (mov r8, r8)
2000002a:	46bd      	mov	sp, r7
2000002c:	b004      	add	sp, #16
2000002e:	bd80      	pop	{r7, pc}

20000030 <draw_object>:

void draw_object(POBJECT o){
20000030:	b580      	push	{r7, lr}
20000032:	b084      	sub	sp, #16
20000034:	af00      	add	r7, sp, #0
20000036:	6078      	str	r0, [r7, #4]
    for (int i = 0; i<o->geo->numpoints; i++)
20000038:	2300      	movs	r3, #0
2000003a:	60fb      	str	r3, [r7, #12]
2000003c:	e01e      	b.n	2000007c <draw_object+0x4c>
        pixel(o->geo->px[i].x+o->posx,o->geo->px[i].y+o->posy);
2000003e:	687b      	ldr	r3, [r7, #4]
20000040:	681a      	ldr	r2, [r3, #0]
20000042:	68fb      	ldr	r3, [r7, #12]
20000044:	3304      	adds	r3, #4
20000046:	005b      	lsls	r3, r3, #1
20000048:	18d3      	adds	r3, r2, r3
2000004a:	3304      	adds	r3, #4
2000004c:	781b      	ldrb	r3, [r3, #0]
2000004e:	001a      	movs	r2, r3
20000050:	687b      	ldr	r3, [r7, #4]
20000052:	68db      	ldr	r3, [r3, #12]
20000054:	18d3      	adds	r3, r2, r3
20000056:	0018      	movs	r0, r3
20000058:	687b      	ldr	r3, [r7, #4]
2000005a:	681a      	ldr	r2, [r3, #0]
2000005c:	68fb      	ldr	r3, [r7, #12]
2000005e:	3304      	adds	r3, #4
20000060:	005b      	lsls	r3, r3, #1
20000062:	18d3      	adds	r3, r2, r3
20000064:	3305      	adds	r3, #5
20000066:	781b      	ldrb	r3, [r3, #0]
20000068:	001a      	movs	r2, r3
2000006a:	687b      	ldr	r3, [r7, #4]
2000006c:	691b      	ldr	r3, [r3, #16]
2000006e:	18d3      	adds	r3, r2, r3
20000070:	0019      	movs	r1, r3
20000072:	f000 fe23 	bl	20000cbc <pixel>
    for (int i = 0; i<o->geo->numpoints; i++)
20000076:	68fb      	ldr	r3, [r7, #12]
20000078:	3301      	adds	r3, #1
2000007a:	60fb      	str	r3, [r7, #12]
2000007c:	687b      	ldr	r3, [r7, #4]
2000007e:	681b      	ldr	r3, [r3, #0]
20000080:	681b      	ldr	r3, [r3, #0]
20000082:	68fa      	ldr	r2, [r7, #12]
20000084:	429a      	cmp	r2, r3
20000086:	dbda      	blt.n	2000003e <draw_object+0xe>
        
}
20000088:	46c0      	nop			; (mov r8, r8)
2000008a:	46c0      	nop			; (mov r8, r8)
2000008c:	46bd      	mov	sp, r7
2000008e:	b004      	add	sp, #16
20000090:	bd80      	pop	{r7, pc}

20000092 <clear_object>:

void clear_object(POBJECT o){
20000092:	b580      	push	{r7, lr}
20000094:	b084      	sub	sp, #16
20000096:	af00      	add	r7, sp, #0
20000098:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < o->geo->numpoints; i++)
2000009a:	2300      	movs	r3, #0
2000009c:	60fb      	str	r3, [r7, #12]
2000009e:	e01e      	b.n	200000de <clear_object+0x4c>
        pixel(o->geo->px[i].x+o->posx,o->geo->px[i].y+o->posy);
200000a0:	687b      	ldr	r3, [r7, #4]
200000a2:	681a      	ldr	r2, [r3, #0]
200000a4:	68fb      	ldr	r3, [r7, #12]
200000a6:	3304      	adds	r3, #4
200000a8:	005b      	lsls	r3, r3, #1
200000aa:	18d3      	adds	r3, r2, r3
200000ac:	3304      	adds	r3, #4
200000ae:	781b      	ldrb	r3, [r3, #0]
200000b0:	001a      	movs	r2, r3
200000b2:	687b      	ldr	r3, [r7, #4]
200000b4:	68db      	ldr	r3, [r3, #12]
200000b6:	18d3      	adds	r3, r2, r3
200000b8:	0018      	movs	r0, r3
200000ba:	687b      	ldr	r3, [r7, #4]
200000bc:	681a      	ldr	r2, [r3, #0]
200000be:	68fb      	ldr	r3, [r7, #12]
200000c0:	3304      	adds	r3, #4
200000c2:	005b      	lsls	r3, r3, #1
200000c4:	18d3      	adds	r3, r2, r3
200000c6:	3305      	adds	r3, #5
200000c8:	781b      	ldrb	r3, [r3, #0]
200000ca:	001a      	movs	r2, r3
200000cc:	687b      	ldr	r3, [r7, #4]
200000ce:	691b      	ldr	r3, [r3, #16]
200000d0:	18d3      	adds	r3, r2, r3
200000d2:	0019      	movs	r1, r3
200000d4:	f000 fdf2 	bl	20000cbc <pixel>
    for (int i = 0; i < o->geo->numpoints; i++)
200000d8:	68fb      	ldr	r3, [r7, #12]
200000da:	3301      	adds	r3, #1
200000dc:	60fb      	str	r3, [r7, #12]
200000de:	687b      	ldr	r3, [r7, #4]
200000e0:	681b      	ldr	r3, [r3, #0]
200000e2:	681b      	ldr	r3, [r3, #0]
200000e4:	68fa      	ldr	r2, [r7, #12]
200000e6:	429a      	cmp	r2, r3
200000e8:	dbda      	blt.n	200000a0 <clear_object+0xe>
        
}
200000ea:	46c0      	nop			; (mov r8, r8)
200000ec:	46c0      	nop			; (mov r8, r8)
200000ee:	46bd      	mov	sp, r7
200000f0:	b004      	add	sp, #16
200000f2:	bd80      	pop	{r7, pc}

200000f4 <move_object>:

void move_object(POBJECT o){
200000f4:	b580      	push	{r7, lr}
200000f6:	b082      	sub	sp, #8
200000f8:	af00      	add	r7, sp, #0
200000fa:	6078      	str	r0, [r7, #4]
    //clear_object(o);
    
    o->posx = o->posx + o->dirx;
200000fc:	687b      	ldr	r3, [r7, #4]
200000fe:	68da      	ldr	r2, [r3, #12]
20000100:	687b      	ldr	r3, [r7, #4]
20000102:	685b      	ldr	r3, [r3, #4]
20000104:	18d2      	adds	r2, r2, r3
20000106:	687b      	ldr	r3, [r7, #4]
20000108:	60da      	str	r2, [r3, #12]
    o->posy = o->posy + o->diry;
2000010a:	687b      	ldr	r3, [r7, #4]
2000010c:	691a      	ldr	r2, [r3, #16]
2000010e:	687b      	ldr	r3, [r7, #4]
20000110:	689b      	ldr	r3, [r3, #8]
20000112:	18d2      	adds	r2, r2, r3
20000114:	687b      	ldr	r3, [r7, #4]
20000116:	611a      	str	r2, [r3, #16]
    
    /*Position static if direction makes ball go out of bounds*/
    //Bounce left wall
    if((o->posx+o->dirx)<1){
20000118:	687b      	ldr	r3, [r7, #4]
2000011a:	68da      	ldr	r2, [r3, #12]
2000011c:	687b      	ldr	r3, [r7, #4]
2000011e:	685b      	ldr	r3, [r3, #4]
20000120:	18d3      	adds	r3, r2, r3
20000122:	2b00      	cmp	r3, #0
20000124:	dc07      	bgt.n	20000136 <move_object+0x42>
        o->dirx *= -1;
20000126:	687b      	ldr	r3, [r7, #4]
20000128:	685b      	ldr	r3, [r3, #4]
2000012a:	425a      	negs	r2, r3
2000012c:	687b      	ldr	r3, [r7, #4]
2000012e:	605a      	str	r2, [r3, #4]
        o->posx = 1;
20000130:	687b      	ldr	r3, [r7, #4]
20000132:	2201      	movs	r2, #1
20000134:	60da      	str	r2, [r3, #12]
    }
    //Bounce right wall
    if((o->posx+o->dirx)>128){
20000136:	687b      	ldr	r3, [r7, #4]
20000138:	68da      	ldr	r2, [r3, #12]
2000013a:	687b      	ldr	r3, [r7, #4]
2000013c:	685b      	ldr	r3, [r3, #4]
2000013e:	18d3      	adds	r3, r2, r3
20000140:	2b80      	cmp	r3, #128	; 0x80
20000142:	dd07      	ble.n	20000154 <move_object+0x60>
        o->dirx *= -1;
20000144:	687b      	ldr	r3, [r7, #4]
20000146:	685b      	ldr	r3, [r3, #4]
20000148:	425a      	negs	r2, r3
2000014a:	687b      	ldr	r3, [r7, #4]
2000014c:	605a      	str	r2, [r3, #4]
        o->posx=127;
2000014e:	687b      	ldr	r3, [r7, #4]
20000150:	227f      	movs	r2, #127	; 0x7f
20000152:	60da      	str	r2, [r3, #12]
    }
    //bounce upper wall
    if((o->posy+o->diry)<1){
20000154:	687b      	ldr	r3, [r7, #4]
20000156:	691a      	ldr	r2, [r3, #16]
20000158:	687b      	ldr	r3, [r7, #4]
2000015a:	689b      	ldr	r3, [r3, #8]
2000015c:	18d3      	adds	r3, r2, r3
2000015e:	2b00      	cmp	r3, #0
20000160:	dc07      	bgt.n	20000172 <move_object+0x7e>
        o->diry *= -1;
20000162:	687b      	ldr	r3, [r7, #4]
20000164:	689b      	ldr	r3, [r3, #8]
20000166:	425a      	negs	r2, r3
20000168:	687b      	ldr	r3, [r7, #4]
2000016a:	609a      	str	r2, [r3, #8]
        o->posy = 1;
2000016c:	687b      	ldr	r3, [r7, #4]
2000016e:	2201      	movs	r2, #1
20000170:	611a      	str	r2, [r3, #16]
    }
    //bounce lower wall
    if((o->posy+o->diry)>64){
20000172:	687b      	ldr	r3, [r7, #4]
20000174:	691a      	ldr	r2, [r3, #16]
20000176:	687b      	ldr	r3, [r7, #4]
20000178:	689b      	ldr	r3, [r3, #8]
2000017a:	18d3      	adds	r3, r2, r3
2000017c:	2b40      	cmp	r3, #64	; 0x40
2000017e:	dd07      	ble.n	20000190 <move_object+0x9c>
        o->diry *= -1;
20000180:	687b      	ldr	r3, [r7, #4]
20000182:	689b      	ldr	r3, [r3, #8]
20000184:	425a      	negs	r2, r3
20000186:	687b      	ldr	r3, [r7, #4]
20000188:	609a      	str	r2, [r3, #8]
        o->posy = 63;
2000018a:	687b      	ldr	r3, [r7, #4]
2000018c:	223f      	movs	r2, #63	; 0x3f
2000018e:	611a      	str	r2, [r3, #16]
    }
    draw_object(o);
20000190:	687b      	ldr	r3, [r7, #4]
20000192:	0018      	movs	r0, r3
20000194:	f7ff ff4c 	bl	20000030 <draw_object>
}
20000198:	46c0      	nop			; (mov r8, r8)
2000019a:	46bd      	mov	sp, r7
2000019c:	b002      	add	sp, #8
2000019e:	bd80      	pop	{r7, pc}

200001a0 <load_sprite>:
    clear_object,
    move_object,
    set_object_speed
};

static void load_sprite(sprite* s, unsigned char* data, int width, int height){
200001a0:	b580      	push	{r7, lr}
200001a2:	b084      	sub	sp, #16
200001a4:	af00      	add	r7, sp, #0
200001a6:	60f8      	str	r0, [r7, #12]
200001a8:	60b9      	str	r1, [r7, #8]
200001aa:	607a      	str	r2, [r7, #4]
200001ac:	603b      	str	r3, [r7, #0]
    s->width = width;
200001ae:	687b      	ldr	r3, [r7, #4]
200001b0:	b2da      	uxtb	r2, r3
200001b2:	68fb      	ldr	r3, [r7, #12]
200001b4:	701a      	strb	r2, [r3, #0]
    s->height = height;
200001b6:	683b      	ldr	r3, [r7, #0]
200001b8:	b2da      	uxtb	r2, r3
200001ba:	68fb      	ldr	r3, [r7, #12]
200001bc:	705a      	strb	r2, [r3, #1]
    s->data = data;
200001be:	68fb      	ldr	r3, [r7, #12]
200001c0:	68ba      	ldr	r2, [r7, #8]
200001c2:	605a      	str	r2, [r3, #4]
}
200001c4:	46c0      	nop			; (mov r8, r8)
200001c6:	46bd      	mov	sp, r7
200001c8:	b004      	add	sp, #16
200001ca:	bd80      	pop	{r7, pc}

200001cc <draw_sprite>:

void draw_sprite(sprite* s, int x, int y){
200001cc:	b580      	push	{r7, lr}
200001ce:	b08a      	sub	sp, #40	; 0x28
200001d0:	af00      	add	r7, sp, #0
200001d2:	60f8      	str	r0, [r7, #12]
200001d4:	60b9      	str	r1, [r7, #8]
200001d6:	607a      	str	r2, [r7, #4]
    int i,j,k, width_in_bytes;
    
    if(s->width % 8 == 0){
200001d8:	68fb      	ldr	r3, [r7, #12]
200001da:	781b      	ldrb	r3, [r3, #0]
200001dc:	2207      	movs	r2, #7
200001de:	4013      	ands	r3, r2
200001e0:	b2db      	uxtb	r3, r3
200001e2:	2b00      	cmp	r3, #0
200001e4:	d105      	bne.n	200001f2 <draw_sprite+0x26>
        width_in_bytes = s->width/8;
200001e6:	68fb      	ldr	r3, [r7, #12]
200001e8:	781b      	ldrb	r3, [r3, #0]
200001ea:	08db      	lsrs	r3, r3, #3
200001ec:	b2db      	uxtb	r3, r3
200001ee:	61bb      	str	r3, [r7, #24]
200001f0:	e005      	b.n	200001fe <draw_sprite+0x32>
    }else{
        width_in_bytes = s->width/8 + 1;
200001f2:	68fb      	ldr	r3, [r7, #12]
200001f4:	781b      	ldrb	r3, [r3, #0]
200001f6:	08db      	lsrs	r3, r3, #3
200001f8:	b2db      	uxtb	r3, r3
200001fa:	3301      	adds	r3, #1
200001fc:	61bb      	str	r3, [r7, #24]
    }
    
    for (i = 0; i < s->height; i++){
200001fe:	2300      	movs	r3, #0
20000200:	627b      	str	r3, [r7, #36]	; 0x24
20000202:	e039      	b.n	20000278 <draw_sprite+0xac>
        for (j = 0; j < width_in_bytes; j++){
20000204:	2300      	movs	r3, #0
20000206:	623b      	str	r3, [r7, #32]
20000208:	e02f      	b.n	2000026a <draw_sprite+0x9e>
            unsigned char byte = s->data[i*width_in_bytes +j];
2000020a:	68fb      	ldr	r3, [r7, #12]
2000020c:	685b      	ldr	r3, [r3, #4]
2000020e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
20000210:	69b9      	ldr	r1, [r7, #24]
20000212:	4351      	muls	r1, r2
20000214:	6a3a      	ldr	r2, [r7, #32]
20000216:	188a      	adds	r2, r1, r2
20000218:	189a      	adds	r2, r3, r2
2000021a:	2317      	movs	r3, #23
2000021c:	18fb      	adds	r3, r7, r3
2000021e:	7812      	ldrb	r2, [r2, #0]
20000220:	701a      	strb	r2, [r3, #0]
            for (k = 0; k < 8; k++){
20000222:	2300      	movs	r3, #0
20000224:	61fb      	str	r3, [r7, #28]
20000226:	e01a      	b.n	2000025e <draw_sprite+0x92>
                if (byte & (1<<k))
20000228:	2317      	movs	r3, #23
2000022a:	18fb      	adds	r3, r7, r3
2000022c:	781a      	ldrb	r2, [r3, #0]
2000022e:	69fb      	ldr	r3, [r7, #28]
20000230:	411a      	asrs	r2, r3
20000232:	0013      	movs	r3, r2
20000234:	2201      	movs	r2, #1
20000236:	4013      	ands	r3, r2
20000238:	d00e      	beq.n	20000258 <draw_sprite+0x8c>
                    pixel(8 * j + k + x + 1, i + y + 1);
2000023a:	6a3b      	ldr	r3, [r7, #32]
2000023c:	00da      	lsls	r2, r3, #3
2000023e:	69fb      	ldr	r3, [r7, #28]
20000240:	18d2      	adds	r2, r2, r3
20000242:	68bb      	ldr	r3, [r7, #8]
20000244:	18d3      	adds	r3, r2, r3
20000246:	3301      	adds	r3, #1
20000248:	0018      	movs	r0, r3
2000024a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
2000024c:	687b      	ldr	r3, [r7, #4]
2000024e:	18d3      	adds	r3, r2, r3
20000250:	3301      	adds	r3, #1
20000252:	0019      	movs	r1, r3
20000254:	f000 fd32 	bl	20000cbc <pixel>
            for (k = 0; k < 8; k++){
20000258:	69fb      	ldr	r3, [r7, #28]
2000025a:	3301      	adds	r3, #1
2000025c:	61fb      	str	r3, [r7, #28]
2000025e:	69fb      	ldr	r3, [r7, #28]
20000260:	2b07      	cmp	r3, #7
20000262:	dde1      	ble.n	20000228 <draw_sprite+0x5c>
        for (j = 0; j < width_in_bytes; j++){
20000264:	6a3b      	ldr	r3, [r7, #32]
20000266:	3301      	adds	r3, #1
20000268:	623b      	str	r3, [r7, #32]
2000026a:	6a3a      	ldr	r2, [r7, #32]
2000026c:	69bb      	ldr	r3, [r7, #24]
2000026e:	429a      	cmp	r2, r3
20000270:	dbcb      	blt.n	2000020a <draw_sprite+0x3e>
    for (i = 0; i < s->height; i++){
20000272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20000274:	3301      	adds	r3, #1
20000276:	627b      	str	r3, [r7, #36]	; 0x24
20000278:	68fb      	ldr	r3, [r7, #12]
2000027a:	785b      	ldrb	r3, [r3, #1]
2000027c:	001a      	movs	r2, r3
2000027e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20000280:	4293      	cmp	r3, r2
20000282:	dbbf      	blt.n	20000204 <draw_sprite+0x38>
            }
        }
    }
}
20000284:	46c0      	nop			; (mov r8, r8)
20000286:	46c0      	nop			; (mov r8, r8)
20000288:	46bd      	mov	sp, r7
2000028a:	b00a      	add	sp, #40	; 0x28
2000028c:	bd80      	pop	{r7, pc}

2000028e <draw_snake>:

void draw_snake(POBJECT s){
2000028e:	b580      	push	{r7, lr}
20000290:	b084      	sub	sp, #16
20000292:	af00      	add	r7, sp, #0
20000294:	6078      	str	r0, [r7, #4]
    if (s[0].dirx != 0 || s[0].diry != 0)
20000296:	687b      	ldr	r3, [r7, #4]
20000298:	685b      	ldr	r3, [r3, #4]
2000029a:	2b00      	cmp	r3, #0
2000029c:	d103      	bne.n	200002a6 <draw_snake+0x18>
2000029e:	687b      	ldr	r3, [r7, #4]
200002a0:	689b      	ldr	r3, [r3, #8]
200002a2:	2b00      	cmp	r3, #0
200002a4:	d003      	beq.n	200002ae <draw_snake+0x20>
            follow_leader(s);
200002a6:	687b      	ldr	r3, [r7, #4]
200002a8:	0018      	movs	r0, r3
200002aa:	f000 f835 	bl	20000318 <follow_leader>
    for (int i = 0; i <= snakeSize - 1; i++){
200002ae:	2300      	movs	r3, #0
200002b0:	60fb      	str	r3, [r7, #12]
200002b2:	e015      	b.n	200002e0 <draw_snake+0x52>
        s[i].move(&s[i]);
200002b4:	68fa      	ldr	r2, [r7, #12]
200002b6:	0013      	movs	r3, r2
200002b8:	00db      	lsls	r3, r3, #3
200002ba:	189b      	adds	r3, r3, r2
200002bc:	009b      	lsls	r3, r3, #2
200002be:	001a      	movs	r2, r3
200002c0:	687b      	ldr	r3, [r7, #4]
200002c2:	189b      	adds	r3, r3, r2
200002c4:	69d9      	ldr	r1, [r3, #28]
200002c6:	68fa      	ldr	r2, [r7, #12]
200002c8:	0013      	movs	r3, r2
200002ca:	00db      	lsls	r3, r3, #3
200002cc:	189b      	adds	r3, r3, r2
200002ce:	009b      	lsls	r3, r3, #2
200002d0:	001a      	movs	r2, r3
200002d2:	687b      	ldr	r3, [r7, #4]
200002d4:	189b      	adds	r3, r3, r2
200002d6:	0018      	movs	r0, r3
200002d8:	4788      	blx	r1
    for (int i = 0; i <= snakeSize - 1; i++){
200002da:	68fb      	ldr	r3, [r7, #12]
200002dc:	3301      	adds	r3, #1
200002de:	60fb      	str	r3, [r7, #12]
200002e0:	4b04      	ldr	r3, [pc, #16]	; (200002f4 <draw_snake+0x66>)
200002e2:	681b      	ldr	r3, [r3, #0]
200002e4:	68fa      	ldr	r2, [r7, #12]
200002e6:	429a      	cmp	r2, r3
200002e8:	dbe4      	blt.n	200002b4 <draw_snake+0x26>
    }
}
200002ea:	46c0      	nop			; (mov r8, r8)
200002ec:	46c0      	nop			; (mov r8, r8)
200002ee:	46bd      	mov	sp, r7
200002f0:	b004      	add	sp, #16
200002f2:	bd80      	pop	{r7, pc}
200002f4:	200025ac 	andcs	r2, r0, ip, lsr #11

200002f8 <draw_food>:

void draw_food(POBJECT f){
200002f8:	b580      	push	{r7, lr}
200002fa:	b082      	sub	sp, #8
200002fc:	af00      	add	r7, sp, #0
200002fe:	6078      	str	r0, [r7, #4]
    
    f->move(&food_obj);
20000300:	687b      	ldr	r3, [r7, #4]
20000302:	69db      	ldr	r3, [r3, #28]
20000304:	4a03      	ldr	r2, [pc, #12]	; (20000314 <draw_food+0x1c>)
20000306:	0010      	movs	r0, r2
20000308:	4798      	blx	r3
}
2000030a:	46c0      	nop			; (mov r8, r8)
2000030c:	46bd      	mov	sp, r7
2000030e:	b002      	add	sp, #8
20000310:	bd80      	pop	{r7, pc}
20000312:	46c0      	nop			; (mov r8, r8)
20000314:	2000385c 	andcs	r3, r0, ip, asr r8

20000318 <follow_leader>:

void follow_leader(POBJECT s){
20000318:	b580      	push	{r7, lr}
2000031a:	b086      	sub	sp, #24
2000031c:	af00      	add	r7, sp, #0
2000031e:	6078      	str	r0, [r7, #4]
    int next_x = s[0].posx;
20000320:	687b      	ldr	r3, [r7, #4]
20000322:	68db      	ldr	r3, [r3, #12]
20000324:	617b      	str	r3, [r7, #20]
    int next_y = s[0].posy;
20000326:	687b      	ldr	r3, [r7, #4]
20000328:	691b      	ldr	r3, [r3, #16]
2000032a:	613b      	str	r3, [r7, #16]
    for(int i = 0; i < snakeSize; i++){
2000032c:	2300      	movs	r3, #0
2000032e:	60fb      	str	r3, [r7, #12]
20000330:	e02e      	b.n	20000390 <follow_leader+0x78>
        int current = s[i].posx;
20000332:	68fa      	ldr	r2, [r7, #12]
20000334:	0013      	movs	r3, r2
20000336:	00db      	lsls	r3, r3, #3
20000338:	189b      	adds	r3, r3, r2
2000033a:	009b      	lsls	r3, r3, #2
2000033c:	001a      	movs	r2, r3
2000033e:	687b      	ldr	r3, [r7, #4]
20000340:	189b      	adds	r3, r3, r2
20000342:	68db      	ldr	r3, [r3, #12]
20000344:	60bb      	str	r3, [r7, #8]
        s[i].posx = next_x;
20000346:	68fa      	ldr	r2, [r7, #12]
20000348:	0013      	movs	r3, r2
2000034a:	00db      	lsls	r3, r3, #3
2000034c:	189b      	adds	r3, r3, r2
2000034e:	009b      	lsls	r3, r3, #2
20000350:	001a      	movs	r2, r3
20000352:	687b      	ldr	r3, [r7, #4]
20000354:	189b      	adds	r3, r3, r2
20000356:	697a      	ldr	r2, [r7, #20]
20000358:	60da      	str	r2, [r3, #12]
        next_x = current;
2000035a:	68bb      	ldr	r3, [r7, #8]
2000035c:	617b      	str	r3, [r7, #20]
        
        current = s[i].posy;
2000035e:	68fa      	ldr	r2, [r7, #12]
20000360:	0013      	movs	r3, r2
20000362:	00db      	lsls	r3, r3, #3
20000364:	189b      	adds	r3, r3, r2
20000366:	009b      	lsls	r3, r3, #2
20000368:	001a      	movs	r2, r3
2000036a:	687b      	ldr	r3, [r7, #4]
2000036c:	189b      	adds	r3, r3, r2
2000036e:	691b      	ldr	r3, [r3, #16]
20000370:	60bb      	str	r3, [r7, #8]
        s[i].posy = next_y;
20000372:	68fa      	ldr	r2, [r7, #12]
20000374:	0013      	movs	r3, r2
20000376:	00db      	lsls	r3, r3, #3
20000378:	189b      	adds	r3, r3, r2
2000037a:	009b      	lsls	r3, r3, #2
2000037c:	001a      	movs	r2, r3
2000037e:	687b      	ldr	r3, [r7, #4]
20000380:	189b      	adds	r3, r3, r2
20000382:	693a      	ldr	r2, [r7, #16]
20000384:	611a      	str	r2, [r3, #16]
        next_y = current;
20000386:	68bb      	ldr	r3, [r7, #8]
20000388:	613b      	str	r3, [r7, #16]
    for(int i = 0; i < snakeSize; i++){
2000038a:	68fb      	ldr	r3, [r7, #12]
2000038c:	3301      	adds	r3, #1
2000038e:	60fb      	str	r3, [r7, #12]
20000390:	4b04      	ldr	r3, [pc, #16]	; (200003a4 <follow_leader+0x8c>)
20000392:	681b      	ldr	r3, [r3, #0]
20000394:	68fa      	ldr	r2, [r7, #12]
20000396:	429a      	cmp	r2, r3
20000398:	dbcb      	blt.n	20000332 <follow_leader+0x1a>
    }
}
2000039a:	46c0      	nop			; (mov r8, r8)
2000039c:	46c0      	nop			; (mov r8, r8)
2000039e:	46bd      	mov	sp, r7
200003a0:	b006      	add	sp, #24
200003a2:	bd80      	pop	{r7, pc}
200003a4:	200025ac 	andcs	r2, r0, ip, lsr #11

200003a8 <turn>:

void turn(int dir, POBJECT s){
200003a8:	b580      	push	{r7, lr}
200003aa:	b084      	sub	sp, #16
200003ac:	af00      	add	r7, sp, #0
200003ae:	6078      	str	r0, [r7, #4]
200003b0:	6039      	str	r1, [r7, #0]
    int next_x = 0, next_y = 0;
200003b2:	2300      	movs	r3, #0
200003b4:	60fb      	str	r3, [r7, #12]
200003b6:	2300      	movs	r3, #0
200003b8:	60bb      	str	r3, [r7, #8]
     switch(dir){
200003ba:	687b      	ldr	r3, [r7, #4]
200003bc:	2b08      	cmp	r3, #8
200003be:	d03b      	beq.n	20000438 <turn+0x90>
200003c0:	687b      	ldr	r3, [r7, #4]
200003c2:	2b08      	cmp	r3, #8
200003c4:	dc4d      	bgt.n	20000462 <turn+0xba>
200003c6:	687b      	ldr	r3, [r7, #4]
200003c8:	2b06      	cmp	r3, #6
200003ca:	d009      	beq.n	200003e0 <turn+0x38>
200003cc:	687b      	ldr	r3, [r7, #4]
200003ce:	2b06      	cmp	r3, #6
200003d0:	dc47      	bgt.n	20000462 <turn+0xba>
200003d2:	687b      	ldr	r3, [r7, #4]
200003d4:	2b02      	cmp	r3, #2
200003d6:	d020      	beq.n	2000041a <turn+0x72>
200003d8:	687b      	ldr	r3, [r7, #4]
200003da:	2b04      	cmp	r3, #4
200003dc:	d00e      	beq.n	200003fc <turn+0x54>
                s->set_speed(s,0,4);
                s[0].geo = &snakehead_geometry_DOWN;
            }
            break;
    }
}
200003de:	e040      	b.n	20000462 <turn+0xba>
            if(s[0].dirx == 0){
200003e0:	683b      	ldr	r3, [r7, #0]
200003e2:	685b      	ldr	r3, [r3, #4]
200003e4:	2b00      	cmp	r3, #0
200003e6:	d135      	bne.n	20000454 <turn+0xac>
                s->set_speed(s,4,0);
200003e8:	683b      	ldr	r3, [r7, #0]
200003ea:	6a1b      	ldr	r3, [r3, #32]
200003ec:	6838      	ldr	r0, [r7, #0]
200003ee:	2200      	movs	r2, #0
200003f0:	2104      	movs	r1, #4
200003f2:	4798      	blx	r3
                s[0].geo = &snakehead_geometry_RIGHT;
200003f4:	683b      	ldr	r3, [r7, #0]
200003f6:	4a1d      	ldr	r2, [pc, #116]	; (2000046c <turn+0xc4>)
200003f8:	601a      	str	r2, [r3, #0]
            break;
200003fa:	e02b      	b.n	20000454 <turn+0xac>
            if(s[0].dirx == 0){
200003fc:	683b      	ldr	r3, [r7, #0]
200003fe:	685b      	ldr	r3, [r3, #4]
20000400:	2b00      	cmp	r3, #0
20000402:	d129      	bne.n	20000458 <turn+0xb0>
                s->set_speed(s,-4,0);
20000404:	683b      	ldr	r3, [r7, #0]
20000406:	6a1b      	ldr	r3, [r3, #32]
20000408:	2204      	movs	r2, #4
2000040a:	4251      	negs	r1, r2
2000040c:	6838      	ldr	r0, [r7, #0]
2000040e:	2200      	movs	r2, #0
20000410:	4798      	blx	r3
                s[0].geo = &snakehead_geometry_LEFT;
20000412:	683b      	ldr	r3, [r7, #0]
20000414:	4a16      	ldr	r2, [pc, #88]	; (20000470 <turn+0xc8>)
20000416:	601a      	str	r2, [r3, #0]
            break;
20000418:	e01e      	b.n	20000458 <turn+0xb0>
            if(s[0].diry == 0){
2000041a:	683b      	ldr	r3, [r7, #0]
2000041c:	689b      	ldr	r3, [r3, #8]
2000041e:	2b00      	cmp	r3, #0
20000420:	d11c      	bne.n	2000045c <turn+0xb4>
                s->set_speed(s,0,-4);
20000422:	683b      	ldr	r3, [r7, #0]
20000424:	6a1b      	ldr	r3, [r3, #32]
20000426:	2204      	movs	r2, #4
20000428:	4252      	negs	r2, r2
2000042a:	6838      	ldr	r0, [r7, #0]
2000042c:	2100      	movs	r1, #0
2000042e:	4798      	blx	r3
                s[0].geo = &snakehead_geometry_UP;
20000430:	683b      	ldr	r3, [r7, #0]
20000432:	4a10      	ldr	r2, [pc, #64]	; (20000474 <turn+0xcc>)
20000434:	601a      	str	r2, [r3, #0]
            break;
20000436:	e011      	b.n	2000045c <turn+0xb4>
            if(s[0].diry == 0){
20000438:	683b      	ldr	r3, [r7, #0]
2000043a:	689b      	ldr	r3, [r3, #8]
2000043c:	2b00      	cmp	r3, #0
2000043e:	d10f      	bne.n	20000460 <turn+0xb8>
                s->set_speed(s,0,4);
20000440:	683b      	ldr	r3, [r7, #0]
20000442:	6a1b      	ldr	r3, [r3, #32]
20000444:	6838      	ldr	r0, [r7, #0]
20000446:	2204      	movs	r2, #4
20000448:	2100      	movs	r1, #0
2000044a:	4798      	blx	r3
                s[0].geo = &snakehead_geometry_DOWN;
2000044c:	683b      	ldr	r3, [r7, #0]
2000044e:	4a0a      	ldr	r2, [pc, #40]	; (20000478 <turn+0xd0>)
20000450:	601a      	str	r2, [r3, #0]
            break;
20000452:	e005      	b.n	20000460 <turn+0xb8>
            break;
20000454:	46c0      	nop			; (mov r8, r8)
20000456:	e004      	b.n	20000462 <turn+0xba>
            break;
20000458:	46c0      	nop			; (mov r8, r8)
2000045a:	e002      	b.n	20000462 <turn+0xba>
            break;
2000045c:	46c0      	nop			; (mov r8, r8)
2000045e:	e000      	b.n	20000462 <turn+0xba>
            break;
20000460:	46c0      	nop			; (mov r8, r8)
}
20000462:	46c0      	nop			; (mov r8, r8)
20000464:	46bd      	mov	sp, r7
20000466:	b004      	add	sp, #16
20000468:	bd80      	pop	{r7, pc}
2000046a:	46c0      	nop			; (mov r8, r8)
2000046c:	20003780 	andcs	r3, r0, r0, lsl #15
20000470:	20003754 	andcs	r3, r0, r4, asr r7
20000474:	200037d8 	ldrdcs	r3, [r0], -r8
20000478:	200037ac 	andcs	r3, r0, ip, lsr #15

2000047c <new_pos_food>:

void new_pos_food(POBJECT f, POBJECT s){
2000047c:	b580      	push	{r7, lr}
2000047e:	b084      	sub	sp, #16
20000480:	af00      	add	r7, sp, #0
20000482:	6078      	str	r0, [r7, #4]
20000484:	6039      	str	r1, [r7, #0]
    int rand_x = randint(126), rand_y = randint(62);
20000486:	207e      	movs	r0, #126	; 0x7e
20000488:	f000 f835 	bl	200004f6 <randint>
2000048c:	0003      	movs	r3, r0
2000048e:	60fb      	str	r3, [r7, #12]
20000490:	203e      	movs	r0, #62	; 0x3e
20000492:	f000 f830 	bl	200004f6 <randint>
20000496:	0003      	movs	r3, r0
20000498:	60bb      	str	r3, [r7, #8]
    
    if (s[0].posx != rand_x && s[0].posy != rand_y){
2000049a:	683b      	ldr	r3, [r7, #0]
2000049c:	68db      	ldr	r3, [r3, #12]
2000049e:	68fa      	ldr	r2, [r7, #12]
200004a0:	429a      	cmp	r2, r3
200004a2:	d024      	beq.n	200004ee <new_pos_food+0x72>
200004a4:	683b      	ldr	r3, [r7, #0]
200004a6:	691b      	ldr	r3, [r3, #16]
200004a8:	68ba      	ldr	r2, [r7, #8]
200004aa:	429a      	cmp	r2, r3
200004ac:	d01f      	beq.n	200004ee <new_pos_food+0x72>
        
        
        while(1){
            if (rand_x % 4 != 0) rand_x++;
200004ae:	68fb      	ldr	r3, [r7, #12]
200004b0:	2203      	movs	r2, #3
200004b2:	4013      	ands	r3, r2
200004b4:	d002      	beq.n	200004bc <new_pos_food+0x40>
200004b6:	68fb      	ldr	r3, [r7, #12]
200004b8:	3301      	adds	r3, #1
200004ba:	60fb      	str	r3, [r7, #12]
            if (rand_y % 4 != 0) rand_y++;
200004bc:	68bb      	ldr	r3, [r7, #8]
200004be:	2203      	movs	r2, #3
200004c0:	4013      	ands	r3, r2
200004c2:	d002      	beq.n	200004ca <new_pos_food+0x4e>
200004c4:	68bb      	ldr	r3, [r7, #8]
200004c6:	3301      	adds	r3, #1
200004c8:	60bb      	str	r3, [r7, #8]
            
            if(rand_x % 4 == 0 && rand_y % 4 == 0) break;
200004ca:	68fb      	ldr	r3, [r7, #12]
200004cc:	2203      	movs	r2, #3
200004ce:	4013      	ands	r3, r2
200004d0:	d1ed      	bne.n	200004ae <new_pos_food+0x32>
200004d2:	68bb      	ldr	r3, [r7, #8]
200004d4:	2203      	movs	r2, #3
200004d6:	4013      	ands	r3, r2
200004d8:	d000      	beq.n	200004dc <new_pos_food+0x60>
            if (rand_x % 4 != 0) rand_x++;
200004da:	e7e8      	b.n	200004ae <new_pos_food+0x32>
            if(rand_x % 4 == 0 && rand_y % 4 == 0) break;
200004dc:	46c0      	nop			; (mov r8, r8)
        }
        f->posx = rand_x+1;
200004de:	68fb      	ldr	r3, [r7, #12]
200004e0:	1c5a      	adds	r2, r3, #1
200004e2:	687b      	ldr	r3, [r7, #4]
200004e4:	60da      	str	r2, [r3, #12]
        f->posy = rand_y+1;
200004e6:	68bb      	ldr	r3, [r7, #8]
200004e8:	1c5a      	adds	r2, r3, #1
200004ea:	687b      	ldr	r3, [r7, #4]
200004ec:	611a      	str	r2, [r3, #16]
    }
    
}
200004ee:	46c0      	nop			; (mov r8, r8)
200004f0:	46bd      	mov	sp, r7
200004f2:	b004      	add	sp, #16
200004f4:	bd80      	pop	{r7, pc}

200004f6 <randint>:

int randint(int n) {
200004f6:	b580      	push	{r7, lr}
200004f8:	b082      	sub	sp, #8
200004fa:	af00      	add	r7, sp, #0
200004fc:	6078      	str	r0, [r7, #4]
    static int next = 3251 ; // Anything you like here - but not
                           // 0000, 0100, 2500, 3792, 7600,
                           // 0540, 2916, 5030 or 3009.
    next = ((next * next) / 100 ) % n ;
200004fe:	4b0c      	ldr	r3, [pc, #48]	; (20000530 <randint+0x3a>)
20000500:	681a      	ldr	r2, [r3, #0]
20000502:	4b0b      	ldr	r3, [pc, #44]	; (20000530 <randint+0x3a>)
20000504:	681b      	ldr	r3, [r3, #0]
20000506:	4353      	muls	r3, r2
20000508:	2164      	movs	r1, #100	; 0x64
2000050a:	0018      	movs	r0, r3
2000050c:	f000 ff60 	bl	200013d0 <__divsi3>
20000510:	0003      	movs	r3, r0
20000512:	6879      	ldr	r1, [r7, #4]
20000514:	0018      	movs	r0, r3
20000516:	f001 f841 	bl	2000159c <__aeabi_idivmod>
2000051a:	000b      	movs	r3, r1
2000051c:	001a      	movs	r2, r3
2000051e:	4b04      	ldr	r3, [pc, #16]	; (20000530 <randint+0x3a>)
20000520:	601a      	str	r2, [r3, #0]
    return next ;
20000522:	4b03      	ldr	r3, [pc, #12]	; (20000530 <randint+0x3a>)
20000524:	681b      	ldr	r3, [r3, #0]
    
}
20000526:	0018      	movs	r0, r3
20000528:	46bd      	mov	sp, r7
2000052a:	b002      	add	sp, #8
2000052c:	bd80      	pop	{r7, pc}
2000052e:	46c0      	nop			; (mov r8, r8)
20000530:	20003880 	andcs	r3, r0, r0, lsl #17

20000534 <init_app>:


void init_app(void){/**/
20000534:	b580      	push	{r7, lr}
20000536:	af00      	add	r7, sp, #0
    #ifdef USBDM
        /*starta klockor på port D & E*/
        * ( (unsigned long *) 0x40023830) = 0x18;
20000538:	4b12      	ldr	r3, [pc, #72]	; (20000584 <init_app+0x50>)
2000053a:	2218      	movs	r2, #24
2000053c:	601a      	str	r2, [r3, #0]
        __asm volatile("  LDR R0,=0x08000209\n BLX R0 \n");
2000053e:	48ea      	ldr	r0, [pc, #936]	; (200008e8 <main+0x1b0>)
20000540:	4780      	blx	r0
    #endif
    
    *GPIO_E_MODER = 0x55555555;
20000542:	4b11      	ldr	r3, [pc, #68]	; (20000588 <init_app+0x54>)
20000544:	4a11      	ldr	r2, [pc, #68]	; (2000058c <init_app+0x58>)
20000546:	601a      	str	r2, [r3, #0]
    *GPIO_E_OTYPER = 0x00000000;
20000548:	4b11      	ldr	r3, [pc, #68]	; (20000590 <init_app+0x5c>)
2000054a:	2200      	movs	r2, #0
2000054c:	801a      	strh	r2, [r3, #0]
    *GPIO_E_OSPEEDR = 0x00000000;
2000054e:	4b11      	ldr	r3, [pc, #68]	; (20000594 <init_app+0x60>)
20000550:	2200      	movs	r2, #0
20000552:	601a      	str	r2, [r3, #0]
    
    *GPIO_D_MODER = 0;
20000554:	4b10      	ldr	r3, [pc, #64]	; (20000598 <init_app+0x64>)
20000556:	2200      	movs	r2, #0
20000558:	601a      	str	r2, [r3, #0]
    *GPIO_D_MODER = 0x55000000;
2000055a:	4b0f      	ldr	r3, [pc, #60]	; (20000598 <init_app+0x64>)
2000055c:	22aa      	movs	r2, #170	; 0xaa
2000055e:	05d2      	lsls	r2, r2, #23
20000560:	601a      	str	r2, [r3, #0]
    *GPIO_D_PUPDR = 0;
20000562:	4b0e      	ldr	r3, [pc, #56]	; (2000059c <init_app+0x68>)
20000564:	2200      	movs	r2, #0
20000566:	601a      	str	r2, [r3, #0]
    *GPIO_D_PUPDR |= 0xAA000000;
20000568:	4b0c      	ldr	r3, [pc, #48]	; (2000059c <init_app+0x68>)
2000056a:	681a      	ldr	r2, [r3, #0]
2000056c:	4b0b      	ldr	r3, [pc, #44]	; (2000059c <init_app+0x68>)
2000056e:	21aa      	movs	r1, #170	; 0xaa
20000570:	0609      	lsls	r1, r1, #24
20000572:	430a      	orrs	r2, r1
20000574:	601a      	str	r2, [r3, #0]
    *GPIO_D_OTYPER = 0;
20000576:	4b0a      	ldr	r3, [pc, #40]	; (200005a0 <init_app+0x6c>)
20000578:	2200      	movs	r2, #0
2000057a:	801a      	strh	r2, [r3, #0]
}
2000057c:	46c0      	nop			; (mov r8, r8)
2000057e:	46bd      	mov	sp, r7
20000580:	bd80      	pop	{r7, pc}
20000582:	46c0      	nop			; (mov r8, r8)
20000584:	40023830 	andmi	r3, r2, r0, lsr r8
20000588:	40021000 	andmi	r1, r2, r0
2000058c:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab
20000590:	40021004 	andmi	r1, r2, r4
20000594:	40021008 	andmi	r1, r2, r8
20000598:	40020c00 	andmi	r0, r2, r0, lsl #24
2000059c:	40020c0c 	andmi	r0, r2, ip, lsl #24
200005a0:	40020c04 	andmi	r0, r2, r4, lsl #24

200005a4 <init_snake>:

void init_snake(POBJECT s){
200005a4:	b580      	push	{r7, lr}
200005a6:	b084      	sub	sp, #16
200005a8:	af00      	add	r7, sp, #0
200005aa:	6078      	str	r0, [r7, #4]
    int j = 0;
200005ac:	2300      	movs	r3, #0
200005ae:	60fb      	str	r3, [r7, #12]
    for (int i = 3; i >= 0; i--, j++){
200005b0:	2303      	movs	r3, #3
200005b2:	60bb      	str	r3, [r7, #8]
200005b4:	e074      	b.n	200006a0 <init_snake+0xfc>
        if(i == 0){ 
200005b6:	68bb      	ldr	r3, [r7, #8]
200005b8:	2b00      	cmp	r3, #0
200005ba:	d10a      	bne.n	200005d2 <init_snake+0x2e>
            s[i].geo = &snakehead_geometry_RIGHT;
200005bc:	68ba      	ldr	r2, [r7, #8]
200005be:	0013      	movs	r3, r2
200005c0:	00db      	lsls	r3, r3, #3
200005c2:	189b      	adds	r3, r3, r2
200005c4:	009b      	lsls	r3, r3, #2
200005c6:	001a      	movs	r2, r3
200005c8:	687b      	ldr	r3, [r7, #4]
200005ca:	189b      	adds	r3, r3, r2
200005cc:	4a38      	ldr	r2, [pc, #224]	; (200006b0 <init_snake+0x10c>)
200005ce:	601a      	str	r2, [r3, #0]
200005d0:	e009      	b.n	200005e6 <init_snake+0x42>
        } else{ 
            s[i].geo = &snakebody_geometry;
200005d2:	68ba      	ldr	r2, [r7, #8]
200005d4:	0013      	movs	r3, r2
200005d6:	00db      	lsls	r3, r3, #3
200005d8:	189b      	adds	r3, r3, r2
200005da:	009b      	lsls	r3, r3, #2
200005dc:	001a      	movs	r2, r3
200005de:	687b      	ldr	r3, [r7, #4]
200005e0:	189b      	adds	r3, r3, r2
200005e2:	4a34      	ldr	r2, [pc, #208]	; (200006b4 <init_snake+0x110>)
200005e4:	601a      	str	r2, [r3, #0]
        }
        s[i].posx = (j+1) * 4;
200005e6:	68fb      	ldr	r3, [r7, #12]
200005e8:	1c59      	adds	r1, r3, #1
200005ea:	68ba      	ldr	r2, [r7, #8]
200005ec:	0013      	movs	r3, r2
200005ee:	00db      	lsls	r3, r3, #3
200005f0:	189b      	adds	r3, r3, r2
200005f2:	009b      	lsls	r3, r3, #2
200005f4:	001a      	movs	r2, r3
200005f6:	687b      	ldr	r3, [r7, #4]
200005f8:	189b      	adds	r3, r3, r2
200005fa:	008a      	lsls	r2, r1, #2
200005fc:	60da      	str	r2, [r3, #12]
        s[i].posy = 1;
200005fe:	68ba      	ldr	r2, [r7, #8]
20000600:	0013      	movs	r3, r2
20000602:	00db      	lsls	r3, r3, #3
20000604:	189b      	adds	r3, r3, r2
20000606:	009b      	lsls	r3, r3, #2
20000608:	001a      	movs	r2, r3
2000060a:	687b      	ldr	r3, [r7, #4]
2000060c:	189b      	adds	r3, r3, r2
2000060e:	2201      	movs	r2, #1
20000610:	611a      	str	r2, [r3, #16]
        s[i].dirx = 0;
20000612:	68ba      	ldr	r2, [r7, #8]
20000614:	0013      	movs	r3, r2
20000616:	00db      	lsls	r3, r3, #3
20000618:	189b      	adds	r3, r3, r2
2000061a:	009b      	lsls	r3, r3, #2
2000061c:	001a      	movs	r2, r3
2000061e:	687b      	ldr	r3, [r7, #4]
20000620:	189b      	adds	r3, r3, r2
20000622:	2200      	movs	r2, #0
20000624:	605a      	str	r2, [r3, #4]
        s[i].diry = 0;
20000626:	68ba      	ldr	r2, [r7, #8]
20000628:	0013      	movs	r3, r2
2000062a:	00db      	lsls	r3, r3, #3
2000062c:	189b      	adds	r3, r3, r2
2000062e:	009b      	lsls	r3, r3, #2
20000630:	001a      	movs	r2, r3
20000632:	687b      	ldr	r3, [r7, #4]
20000634:	189b      	adds	r3, r3, r2
20000636:	2200      	movs	r2, #0
20000638:	609a      	str	r2, [r3, #8]
        s[i].move = move_object;
2000063a:	68ba      	ldr	r2, [r7, #8]
2000063c:	0013      	movs	r3, r2
2000063e:	00db      	lsls	r3, r3, #3
20000640:	189b      	adds	r3, r3, r2
20000642:	009b      	lsls	r3, r3, #2
20000644:	001a      	movs	r2, r3
20000646:	687b      	ldr	r3, [r7, #4]
20000648:	189b      	adds	r3, r3, r2
2000064a:	4a1b      	ldr	r2, [pc, #108]	; (200006b8 <init_snake+0x114>)
2000064c:	61da      	str	r2, [r3, #28]
        s[i].clear = clear_object;
2000064e:	68ba      	ldr	r2, [r7, #8]
20000650:	0013      	movs	r3, r2
20000652:	00db      	lsls	r3, r3, #3
20000654:	189b      	adds	r3, r3, r2
20000656:	009b      	lsls	r3, r3, #2
20000658:	001a      	movs	r2, r3
2000065a:	687b      	ldr	r3, [r7, #4]
2000065c:	189b      	adds	r3, r3, r2
2000065e:	4a17      	ldr	r2, [pc, #92]	; (200006bc <init_snake+0x118>)
20000660:	619a      	str	r2, [r3, #24]
        s[i].draw = draw_object;
20000662:	68ba      	ldr	r2, [r7, #8]
20000664:	0013      	movs	r3, r2
20000666:	00db      	lsls	r3, r3, #3
20000668:	189b      	adds	r3, r3, r2
2000066a:	009b      	lsls	r3, r3, #2
2000066c:	001a      	movs	r2, r3
2000066e:	687b      	ldr	r3, [r7, #4]
20000670:	189b      	adds	r3, r3, r2
20000672:	4a13      	ldr	r2, [pc, #76]	; (200006c0 <init_snake+0x11c>)
20000674:	615a      	str	r2, [r3, #20]
        s[i].set_speed = set_object_speed;
20000676:	68ba      	ldr	r2, [r7, #8]
20000678:	0013      	movs	r3, r2
2000067a:	00db      	lsls	r3, r3, #3
2000067c:	189b      	adds	r3, r3, r2
2000067e:	009b      	lsls	r3, r3, #2
20000680:	001a      	movs	r2, r3
20000682:	687b      	ldr	r3, [r7, #4]
20000684:	189b      	adds	r3, r3, r2
20000686:	4a0f      	ldr	r2, [pc, #60]	; (200006c4 <init_snake+0x120>)
20000688:	621a      	str	r2, [r3, #32]
        snakeSize++;
2000068a:	4b0f      	ldr	r3, [pc, #60]	; (200006c8 <init_snake+0x124>)
2000068c:	681b      	ldr	r3, [r3, #0]
2000068e:	1c5a      	adds	r2, r3, #1
20000690:	4b0d      	ldr	r3, [pc, #52]	; (200006c8 <init_snake+0x124>)
20000692:	601a      	str	r2, [r3, #0]
    for (int i = 3; i >= 0; i--, j++){
20000694:	68bb      	ldr	r3, [r7, #8]
20000696:	3b01      	subs	r3, #1
20000698:	60bb      	str	r3, [r7, #8]
2000069a:	68fb      	ldr	r3, [r7, #12]
2000069c:	3301      	adds	r3, #1
2000069e:	60fb      	str	r3, [r7, #12]
200006a0:	68bb      	ldr	r3, [r7, #8]
200006a2:	2b00      	cmp	r3, #0
200006a4:	da87      	bge.n	200005b6 <init_snake+0x12>
    }
}
200006a6:	46c0      	nop			; (mov r8, r8)
200006a8:	46c0      	nop			; (mov r8, r8)
200006aa:	46bd      	mov	sp, r7
200006ac:	b004      	add	sp, #16
200006ae:	bd80      	pop	{r7, pc}
200006b0:	20003780 	andcs	r3, r0, r0, lsl #15
200006b4:	20003804 	andcs	r3, r0, r4, lsl #16
200006b8:	200000f5 	strdcs	r0, [r0], -r5
200006bc:	20000093 	mulcs	r0, r3, r0
200006c0:	20000031 	andcs	r0, r0, r1, lsr r0
200006c4:	20000011 	andcs	r0, r0, r1, lsl r0
200006c8:	200025ac 	andcs	r2, r0, ip, lsr #11

200006cc <init_food>:

void init_food(POBJECT f){
200006cc:	b580      	push	{r7, lr}
200006ce:	b082      	sub	sp, #8
200006d0:	af00      	add	r7, sp, #0
200006d2:	6078      	str	r0, [r7, #4]
    f->geo = &food_geometry;
200006d4:	687b      	ldr	r3, [r7, #4]
200006d6:	4a09      	ldr	r2, [pc, #36]	; (200006fc <init_food+0x30>)
200006d8:	601a      	str	r2, [r3, #0]
    f->draw = draw_object; 
200006da:	687b      	ldr	r3, [r7, #4]
200006dc:	4a08      	ldr	r2, [pc, #32]	; (20000700 <init_food+0x34>)
200006de:	615a      	str	r2, [r3, #20]
    f->clear = clear_object;
200006e0:	687b      	ldr	r3, [r7, #4]
200006e2:	4a08      	ldr	r2, [pc, #32]	; (20000704 <init_food+0x38>)
200006e4:	619a      	str	r2, [r3, #24]
    f->move = move_object;
200006e6:	687b      	ldr	r3, [r7, #4]
200006e8:	4a07      	ldr	r2, [pc, #28]	; (20000708 <init_food+0x3c>)
200006ea:	61da      	str	r2, [r3, #28]
    f->set_speed = set_object_speed;
200006ec:	687b      	ldr	r3, [r7, #4]
200006ee:	4a07      	ldr	r2, [pc, #28]	; (2000070c <init_food+0x40>)
200006f0:	621a      	str	r2, [r3, #32]
}
200006f2:	46c0      	nop			; (mov r8, r8)
200006f4:	46bd      	mov	sp, r7
200006f6:	b002      	add	sp, #8
200006f8:	bd80      	pop	{r7, pc}
200006fa:	46c0      	nop			; (mov r8, r8)
200006fc:	20003830 	andcs	r3, r0, r0, lsr r8
20000700:	20000031 	andcs	r0, r0, r1, lsr r0
20000704:	20000093 	mulcs	r0, r3, r0
20000708:	200000f5 	strdcs	r0, [r0], -r5
2000070c:	20000011 	andcs	r0, r0, r1, lsl r0

20000710 <restart_game>:

void restart_game(){
20000710:	b580      	push	{r7, lr}
20000712:	af00      	add	r7, sp, #0
        clear_backbuffer();
20000714:	f000 fab7 	bl	20000c86 <clear_backbuffer>
        graphic_draw_screen();
20000718:	f000 fb12 	bl	20000d40 <graphic_draw_screen>
        points = 0;
2000071c:	4b04      	ldr	r3, [pc, #16]	; (20000730 <restart_game+0x20>)
2000071e:	2200      	movs	r2, #0
20000720:	601a      	str	r2, [r3, #0]
        snakeSize = 0;
20000722:	4b04      	ldr	r3, [pc, #16]	; (20000734 <restart_game+0x24>)
20000724:	2200      	movs	r2, #0
20000726:	601a      	str	r2, [r3, #0]
}
20000728:	46c0      	nop			; (mov r8, r8)
2000072a:	46bd      	mov	sp, r7
2000072c:	bd80      	pop	{r7, pc}
2000072e:	46c0      	nop			; (mov r8, r8)
20000730:	200025a8 	andcs	r2, r0, r8, lsr #11
20000734:	200025ac 	andcs	r2, r0, ip, lsr #11

20000738 <main>:

void main(int argc, char **argv){
20000738:	b5b0      	push	{r4, r5, r7, lr}
2000073a:	4c61      	ldr	r4, [pc, #388]	; (200008c0 <main+0x188>)
2000073c:	44a5      	add	sp, r4
2000073e:	af00      	add	r7, sp, #0
20000740:	6078      	str	r0, [r7, #4]
20000742:	6039      	str	r1, [r7, #0]
    int game = 1, restart = 2;
20000744:	2301      	movs	r3, #1
20000746:	4a5f      	ldr	r2, [pc, #380]	; (200008c4 <main+0x18c>)
20000748:	18ba      	adds	r2, r7, r2
2000074a:	6013      	str	r3, [r2, #0]
2000074c:	2302      	movs	r3, #2
2000074e:	4a5e      	ldr	r2, [pc, #376]	; (200008c8 <main+0x190>)
20000750:	18ba      	adds	r2, r7, r2
20000752:	6013      	str	r3, [r2, #0]
    char key_stroke;
    
    POBJECT food = &food_obj;
20000754:	4b5d      	ldr	r3, [pc, #372]	; (200008cc <main+0x194>)
20000756:	4a5e      	ldr	r2, [pc, #376]	; (200008d0 <main+0x198>)
20000758:	18ba      	adds	r2, r7, r2
2000075a:	6013      	str	r3, [r2, #0]
    OBJECT snake[200];
    
        
    init_app();
2000075c:	f7ff feea 	bl	20000534 <init_app>
    graphic_init();
20000760:	f000 f8c4 	bl	200008ec <graphic_init>
    ascii_init();
20000764:	f000 fbf2 	bl	20000f4c <ascii_init>
    
    while(game){
20000768:	e09d      	b.n	200008a6 <main+0x16e>
        #ifndef SIMULATOR
            graphic_clear_screen(); //JAG FÅR VARA MED
2000076a:	f000 fa5f 	bl	20000c2c <graphic_clear_screen>
        //while(keyb() != 5){
            //char[] *s = "You have :" 
            //ascii_write_char(*s++)
        //}
        
        if(restart == 2){
2000076e:	4c56      	ldr	r4, [pc, #344]	; (200008c8 <main+0x190>)
20000770:	193b      	adds	r3, r7, r4
20000772:	681b      	ldr	r3, [r3, #0]
20000774:	2b02      	cmp	r3, #2
20000776:	d10f      	bne.n	20000798 <main+0x60>
            restart_game();
20000778:	f7ff ffca 	bl	20000710 <restart_game>
            restart = 1;
2000077c:	2301      	movs	r3, #1
2000077e:	193a      	adds	r2, r7, r4
20000780:	6013      	str	r3, [r2, #0]
            init_snake(snake);
20000782:	230c      	movs	r3, #12
20000784:	18fb      	adds	r3, r7, r3
20000786:	0018      	movs	r0, r3
20000788:	f7ff ff0c 	bl	200005a4 <init_snake>
            init_food(food);
2000078c:	4b50      	ldr	r3, [pc, #320]	; (200008d0 <main+0x198>)
2000078e:	18fb      	adds	r3, r7, r3
20000790:	681b      	ldr	r3, [r3, #0]
20000792:	0018      	movs	r0, r3
20000794:	f7ff ff9a 	bl	200006cc <init_food>
        }
        
        int t = 0;
20000798:	2300      	movs	r3, #0
2000079a:	4a4e      	ldr	r2, [pc, #312]	; (200008d4 <main+0x19c>)
2000079c:	18ba      	adds	r2, r7, r2
2000079e:	6013      	str	r3, [r2, #0]
        while(restart == 1){
200007a0:	e07b      	b.n	2000089a <main+0x162>
            clear_backbuffer();
200007a2:	f000 fa70 	bl	20000c86 <clear_backbuffer>
            /*KOD HÄR*/
            
            draw_snake(snake);
200007a6:	230c      	movs	r3, #12
200007a8:	18fb      	adds	r3, r7, r3
200007aa:	0018      	movs	r0, r3
200007ac:	f7ff fd6f 	bl	2000028e <draw_snake>
            if (t > 4){
200007b0:	4b48      	ldr	r3, [pc, #288]	; (200008d4 <main+0x19c>)
200007b2:	18fb      	adds	r3, r7, r3
200007b4:	681b      	ldr	r3, [r3, #0]
200007b6:	2b04      	cmp	r3, #4
200007b8:	dd05      	ble.n	200007c6 <main+0x8e>
                draw_food(food);
200007ba:	4b45      	ldr	r3, [pc, #276]	; (200008d0 <main+0x198>)
200007bc:	18fb      	adds	r3, r7, r3
200007be:	681b      	ldr	r3, [r3, #0]
200007c0:	0018      	movs	r0, r3
200007c2:	f7ff fd99 	bl	200002f8 <draw_food>
            }
            t++;
200007c6:	4a43      	ldr	r2, [pc, #268]	; (200008d4 <main+0x19c>)
200007c8:	18bb      	adds	r3, r7, r2
200007ca:	681b      	ldr	r3, [r3, #0]
200007cc:	3301      	adds	r3, #1
200007ce:	18ba      	adds	r2, r7, r2
200007d0:	6013      	str	r3, [r2, #0]
            
            graphic_draw_screen();
200007d2:	f000 fab5 	bl	20000d40 <graphic_draw_screen>
            delay_milli(100);
200007d6:	2064      	movs	r0, #100	; 0x64
200007d8:	f000 fd6e 	bl	200012b8 <delay_milli>

            //delay_milli(40);
            key_stroke = keyb();
200007dc:	4d3e      	ldr	r5, [pc, #248]	; (200008d8 <main+0x1a0>)
200007de:	197c      	adds	r4, r7, r5
200007e0:	f000 fdb2 	bl	20001348 <keyb>
200007e4:	0003      	movs	r3, r0
200007e6:	7023      	strb	r3, [r4, #0]
            switch(key_stroke){
200007e8:	197b      	adds	r3, r7, r5
200007ea:	781b      	ldrb	r3, [r3, #0]
200007ec:	2b0d      	cmp	r3, #13
200007ee:	d82e      	bhi.n	2000084e <main+0x116>
200007f0:	009a      	lsls	r2, r3, #2
200007f2:	4b3a      	ldr	r3, [pc, #232]	; (200008dc <main+0x1a4>)
200007f4:	18d3      	adds	r3, r2, r3
200007f6:	681b      	ldr	r3, [r3, #0]
200007f8:	469f      	mov	pc, r3
                case RIGHT: turn(RIGHT, snake); break; /*dirx = +, diry = 0*/
200007fa:	230c      	movs	r3, #12
200007fc:	18fb      	adds	r3, r7, r3
200007fe:	0019      	movs	r1, r3
20000800:	2006      	movs	r0, #6
20000802:	f7ff fdd1 	bl	200003a8 <turn>
20000806:	e022      	b.n	2000084e <main+0x116>
                case LEFT: turn(LEFT, snake); break; /*dirx = -, diry = 0*/
20000808:	230c      	movs	r3, #12
2000080a:	18fb      	adds	r3, r7, r3
2000080c:	0019      	movs	r1, r3
2000080e:	2004      	movs	r0, #4
20000810:	f7ff fdca 	bl	200003a8 <turn>
20000814:	e01b      	b.n	2000084e <main+0x116>
                case UP: turn(UP, snake); break; /*dirx = 0, diry = -*/
20000816:	230c      	movs	r3, #12
20000818:	18fb      	adds	r3, r7, r3
2000081a:	0019      	movs	r1, r3
2000081c:	2002      	movs	r0, #2
2000081e:	f7ff fdc3 	bl	200003a8 <turn>
20000822:	e014      	b.n	2000084e <main+0x116>
                case DOWN: turn(DOWN, snake); break; /*dirx = 0, diry = +*/
20000824:	230c      	movs	r3, #12
20000826:	18fb      	adds	r3, r7, r3
20000828:	0019      	movs	r1, r3
2000082a:	2008      	movs	r0, #8
2000082c:	f7ff fdbc 	bl	200003a8 <turn>
20000830:	e00d      	b.n	2000084e <main+0x116>
                case QUIT: game = 0; restart = 0; break;
20000832:	2300      	movs	r3, #0
20000834:	4a23      	ldr	r2, [pc, #140]	; (200008c4 <main+0x18c>)
20000836:	18ba      	adds	r2, r7, r2
20000838:	6013      	str	r3, [r2, #0]
2000083a:	2300      	movs	r3, #0
2000083c:	4a22      	ldr	r2, [pc, #136]	; (200008c8 <main+0x190>)
2000083e:	18ba      	adds	r2, r7, r2
20000840:	6013      	str	r3, [r2, #0]
20000842:	e004      	b.n	2000084e <main+0x116>
                case RESTART: restart = 2; break;
20000844:	2302      	movs	r3, #2
20000846:	4a20      	ldr	r2, [pc, #128]	; (200008c8 <main+0x190>)
20000848:	18ba      	adds	r2, r7, r2
2000084a:	6013      	str	r3, [r2, #0]
2000084c:	46c0      	nop			; (mov r8, r8)
            }
            
            /*snake eats food*/
            if(snake[0].posx == food->posx && snake[0].posy == food->posy){
2000084e:	4b24      	ldr	r3, [pc, #144]	; (200008e0 <main+0x1a8>)
20000850:	22e2      	movs	r2, #226	; 0xe2
20000852:	0152      	lsls	r2, r2, #5
20000854:	4694      	mov	ip, r2
20000856:	44bc      	add	ip, r7
20000858:	4463      	add	r3, ip
2000085a:	68da      	ldr	r2, [r3, #12]
2000085c:	491c      	ldr	r1, [pc, #112]	; (200008d0 <main+0x198>)
2000085e:	187b      	adds	r3, r7, r1
20000860:	681b      	ldr	r3, [r3, #0]
20000862:	68db      	ldr	r3, [r3, #12]
20000864:	429a      	cmp	r2, r3
20000866:	d118      	bne.n	2000089a <main+0x162>
20000868:	4b1d      	ldr	r3, [pc, #116]	; (200008e0 <main+0x1a8>)
2000086a:	22e2      	movs	r2, #226	; 0xe2
2000086c:	0152      	lsls	r2, r2, #5
2000086e:	4694      	mov	ip, r2
20000870:	44bc      	add	ip, r7
20000872:	4463      	add	r3, ip
20000874:	691a      	ldr	r2, [r3, #16]
20000876:	187b      	adds	r3, r7, r1
20000878:	681b      	ldr	r3, [r3, #0]
2000087a:	691b      	ldr	r3, [r3, #16]
2000087c:	429a      	cmp	r2, r3
2000087e:	d10c      	bne.n	2000089a <main+0x162>
                points++;
20000880:	4b18      	ldr	r3, [pc, #96]	; (200008e4 <main+0x1ac>)
20000882:	681b      	ldr	r3, [r3, #0]
20000884:	1c5a      	adds	r2, r3, #1
20000886:	4b17      	ldr	r3, [pc, #92]	; (200008e4 <main+0x1ac>)
20000888:	601a      	str	r2, [r3, #0]
                new_pos_food(food, snake);
2000088a:	230c      	movs	r3, #12
2000088c:	18fa      	adds	r2, r7, r3
2000088e:	187b      	adds	r3, r7, r1
20000890:	681b      	ldr	r3, [r3, #0]
20000892:	0011      	movs	r1, r2
20000894:	0018      	movs	r0, r3
20000896:	f7ff fdf1 	bl	2000047c <new_pos_food>
        while(restart == 1){
2000089a:	4b0b      	ldr	r3, [pc, #44]	; (200008c8 <main+0x190>)
2000089c:	18fb      	adds	r3, r7, r3
2000089e:	681b      	ldr	r3, [r3, #0]
200008a0:	2b01      	cmp	r3, #1
200008a2:	d100      	bne.n	200008a6 <main+0x16e>
200008a4:	e77d      	b.n	200007a2 <main+0x6a>
    while(game){
200008a6:	4b07      	ldr	r3, [pc, #28]	; (200008c4 <main+0x18c>)
200008a8:	18fb      	adds	r3, r7, r3
200008aa:	681b      	ldr	r3, [r3, #0]
200008ac:	2b00      	cmp	r3, #0
200008ae:	d000      	beq.n	200008b2 <main+0x17a>
200008b0:	e75b      	b.n	2000076a <main+0x32>
            }
                
            
        }
    }
}
200008b2:	46c0      	nop			; (mov r8, r8)
200008b4:	46c0      	nop			; (mov r8, r8)
200008b6:	46bd      	mov	sp, r7
200008b8:	23e2      	movs	r3, #226	; 0xe2
200008ba:	015b      	lsls	r3, r3, #5
200008bc:	449d      	add	sp, r3
200008be:	bdb0      	pop	{r4, r5, r7, pc}
200008c0:	ffffe3c0 			; <UNDEFINED> instruction: 0xffffe3c0
200008c4:	00001c3c 	andeq	r1, r0, ip, lsr ip
200008c8:	00001c38 	andeq	r1, r0, r8, lsr ip
200008cc:	2000385c 	andcs	r3, r0, ip, asr r8
200008d0:	00001c30 	andeq	r1, r0, r0, lsr ip
200008d4:	00001c34 	andeq	r1, r0, r4, lsr ip
200008d8:	00001c2f 	andeq	r1, r0, pc, lsr #24
200008dc:	20003888 	andcs	r3, r0, r8, lsl #17
200008e0:	ffffe3cc 			; <UNDEFINED> instruction: 0xffffe3cc
200008e4:	200025a8 	andcs	r2, r0, r8, lsr #11
200008e8:	08000209 	stmdaeq	r0, {r0, r3, r9}

200008ec <graphic_init>:
#include <defines.h>
#include <asciidisplay.h>
#include <graphicdisplay.h>


void graphic_init(void){
200008ec:	b580      	push	{r7, lr}
200008ee:	af00      	add	r7, sp, #0
    graphic_ctrl_bit_set(B_E);
200008f0:	2040      	movs	r0, #64	; 0x40
200008f2:	f000 f851 	bl	20000998 <graphic_ctrl_bit_set>
    delay_mikro(10);
200008f6:	200a      	movs	r0, #10
200008f8:	f000 fcc7 	bl	2000128a <delay_mikro>
    graphic_ctrl_bit_clear(B_CS1|B_CS2|B_RST|B_E);
200008fc:	2078      	movs	r0, #120	; 0x78
200008fe:	f000 f823 	bl	20000948 <graphic_ctrl_bit_clear>
    delay_milli(30);
20000902:	201e      	movs	r0, #30
20000904:	f000 fcd8 	bl	200012b8 <delay_milli>
    graphic_ctrl_bit_set(B_RST);
20000908:	2020      	movs	r0, #32
2000090a:	f000 f845 	bl	20000998 <graphic_ctrl_bit_set>
    delay_milli(100);
2000090e:	2064      	movs	r0, #100	; 0x64
20000910:	f000 fcd2 	bl	200012b8 <delay_milli>
    graphic_write_command(LCD_OFF, B_CS1|B_CS2);
20000914:	2118      	movs	r1, #24
20000916:	203e      	movs	r0, #62	; 0x3e
20000918:	f000 f942 	bl	20000ba0 <graphic_write_command>
    graphic_write_command(LCD_ON, B_CS1|B_CS2);
2000091c:	2118      	movs	r1, #24
2000091e:	203f      	movs	r0, #63	; 0x3f
20000920:	f000 f93e 	bl	20000ba0 <graphic_write_command>
    graphic_write_command(LCD_DISP_START, B_CS1|B_CS2);
20000924:	2118      	movs	r1, #24
20000926:	20c0      	movs	r0, #192	; 0xc0
20000928:	f000 f93a 	bl	20000ba0 <graphic_write_command>
    graphic_write_command(LCD_SET_ADD, B_CS1|B_CS2);
2000092c:	2118      	movs	r1, #24
2000092e:	2040      	movs	r0, #64	; 0x40
20000930:	f000 f936 	bl	20000ba0 <graphic_write_command>
    graphic_write_command(LCD_SET_PAGE, B_CS1|B_CS2);
20000934:	2118      	movs	r1, #24
20000936:	20b8      	movs	r0, #184	; 0xb8
20000938:	f000 f932 	bl	20000ba0 <graphic_write_command>
    select_controller(0);
2000093c:	2000      	movs	r0, #0
2000093e:	f000 f84d 	bl	200009dc <select_controller>
}
20000942:	46c0      	nop			; (mov r8, r8)
20000944:	46bd      	mov	sp, r7
20000946:	bd80      	pop	{r7, pc}

20000948 <graphic_ctrl_bit_clear>:

void graphic_ctrl_bit_clear(uint8_t x){
20000948:	b580      	push	{r7, lr}
2000094a:	b084      	sub	sp, #16
2000094c:	af00      	add	r7, sp, #0
2000094e:	0002      	movs	r2, r0
20000950:	1dfb      	adds	r3, r7, #7
20000952:	701a      	strb	r2, [r3, #0]
    //*GPIO_E_ODR_LOW &= ( B_SELECT | ~x);
    //ascii_ctrl_bit_clear(x);
    uint8_t c;
    c =*GPIO_E_ODR_LOW;
20000954:	4a0f      	ldr	r2, [pc, #60]	; (20000994 <graphic_ctrl_bit_clear+0x4c>)
20000956:	210f      	movs	r1, #15
20000958:	187b      	adds	r3, r7, r1
2000095a:	7812      	ldrb	r2, [r2, #0]
2000095c:	701a      	strb	r2, [r3, #0]
    c &= ~x;
2000095e:	1dfb      	adds	r3, r7, #7
20000960:	781b      	ldrb	r3, [r3, #0]
20000962:	b25b      	sxtb	r3, r3
20000964:	43db      	mvns	r3, r3
20000966:	b25b      	sxtb	r3, r3
20000968:	187a      	adds	r2, r7, r1
2000096a:	7812      	ldrb	r2, [r2, #0]
2000096c:	b252      	sxtb	r2, r2
2000096e:	4013      	ands	r3, r2
20000970:	b25a      	sxtb	r2, r3
20000972:	187b      	adds	r3, r7, r1
20000974:	701a      	strb	r2, [r3, #0]
    c &= ~B_SELECT;
20000976:	187b      	adds	r3, r7, r1
20000978:	0008      	movs	r0, r1
2000097a:	187a      	adds	r2, r7, r1
2000097c:	7812      	ldrb	r2, [r2, #0]
2000097e:	2104      	movs	r1, #4
20000980:	438a      	bics	r2, r1
20000982:	701a      	strb	r2, [r3, #0]
    *GPIO_E_ODR_LOW=c;
20000984:	4a03      	ldr	r2, [pc, #12]	; (20000994 <graphic_ctrl_bit_clear+0x4c>)
20000986:	183b      	adds	r3, r7, r0
20000988:	781b      	ldrb	r3, [r3, #0]
2000098a:	7013      	strb	r3, [r2, #0]

}
2000098c:	46c0      	nop			; (mov r8, r8)
2000098e:	46bd      	mov	sp, r7
20000990:	b004      	add	sp, #16
20000992:	bd80      	pop	{r7, pc}
20000994:	40021014 	andmi	r1, r2, r4, lsl r0

20000998 <graphic_ctrl_bit_set>:

void graphic_ctrl_bit_set(uint8_t x){
20000998:	b580      	push	{r7, lr}
2000099a:	b084      	sub	sp, #16
2000099c:	af00      	add	r7, sp, #0
2000099e:	0002      	movs	r2, r0
200009a0:	1dfb      	adds	r3, r7, #7
200009a2:	701a      	strb	r2, [r3, #0]
    //*GPIO_E_ODR_LOW |= (B_SELECT | x );
    //ascii_ctrl_bit_set(x);
    uint8_t c;
    c =*GPIO_E_ODR_LOW;
200009a4:	4a0c      	ldr	r2, [pc, #48]	; (200009d8 <graphic_ctrl_bit_set+0x40>)
200009a6:	200f      	movs	r0, #15
200009a8:	183b      	adds	r3, r7, r0
200009aa:	7812      	ldrb	r2, [r2, #0]
200009ac:	701a      	strb	r2, [r3, #0]
    c |= x; 
200009ae:	183b      	adds	r3, r7, r0
200009b0:	1839      	adds	r1, r7, r0
200009b2:	1dfa      	adds	r2, r7, #7
200009b4:	7809      	ldrb	r1, [r1, #0]
200009b6:	7812      	ldrb	r2, [r2, #0]
200009b8:	430a      	orrs	r2, r1
200009ba:	701a      	strb	r2, [r3, #0]
    c &=(~B_SELECT);
200009bc:	183b      	adds	r3, r7, r0
200009be:	183a      	adds	r2, r7, r0
200009c0:	7812      	ldrb	r2, [r2, #0]
200009c2:	2104      	movs	r1, #4
200009c4:	438a      	bics	r2, r1
200009c6:	701a      	strb	r2, [r3, #0]
    *GPIO_E_ODR_LOW= c;
200009c8:	4a03      	ldr	r2, [pc, #12]	; (200009d8 <graphic_ctrl_bit_set+0x40>)
200009ca:	183b      	adds	r3, r7, r0
200009cc:	781b      	ldrb	r3, [r3, #0]
200009ce:	7013      	strb	r3, [r2, #0]
}
200009d0:	46c0      	nop			; (mov r8, r8)
200009d2:	46bd      	mov	sp, r7
200009d4:	b004      	add	sp, #16
200009d6:	bd80      	pop	{r7, pc}
200009d8:	40021014 	andmi	r1, r2, r4, lsl r0

200009dc <select_controller>:

void select_controller(uint8_t controller){
200009dc:	b580      	push	{r7, lr}
200009de:	b082      	sub	sp, #8
200009e0:	af00      	add	r7, sp, #0
200009e2:	0002      	movs	r2, r0
200009e4:	1dfb      	adds	r3, r7, #7
200009e6:	701a      	strb	r2, [r3, #0]
    switch(controller){
200009e8:	1dfb      	adds	r3, r7, #7
200009ea:	781b      	ldrb	r3, [r3, #0]
200009ec:	2b18      	cmp	r3, #24
200009ee:	d01a      	beq.n	20000a26 <select_controller+0x4a>
200009f0:	dc1d      	bgt.n	20000a2e <select_controller+0x52>
200009f2:	2b10      	cmp	r3, #16
200009f4:	d010      	beq.n	20000a18 <select_controller+0x3c>
200009f6:	dc1a      	bgt.n	20000a2e <select_controller+0x52>
200009f8:	2b00      	cmp	r3, #0
200009fa:	d002      	beq.n	20000a02 <select_controller+0x26>
200009fc:	2b08      	cmp	r3, #8
200009fe:	d004      	beq.n	20000a0a <select_controller+0x2e>
            
        case B_CS1 | B_CS2:
            graphic_ctrl_bit_set(B_CS1|B_CS2);
            break;
    }
}
20000a00:	e015      	b.n	20000a2e <select_controller+0x52>
            graphic_ctrl_bit_clear(B_CS1|B_CS2);
20000a02:	2018      	movs	r0, #24
20000a04:	f7ff ffa0 	bl	20000948 <graphic_ctrl_bit_clear>
            break;
20000a08:	e011      	b.n	20000a2e <select_controller+0x52>
            graphic_ctrl_bit_set(B_CS1);
20000a0a:	2008      	movs	r0, #8
20000a0c:	f7ff ffc4 	bl	20000998 <graphic_ctrl_bit_set>
            graphic_ctrl_bit_clear(B_CS2);
20000a10:	2010      	movs	r0, #16
20000a12:	f7ff ff99 	bl	20000948 <graphic_ctrl_bit_clear>
            break;
20000a16:	e00a      	b.n	20000a2e <select_controller+0x52>
            graphic_ctrl_bit_clear(B_CS1);
20000a18:	2008      	movs	r0, #8
20000a1a:	f7ff ff95 	bl	20000948 <graphic_ctrl_bit_clear>
            graphic_ctrl_bit_set(B_CS2);
20000a1e:	2010      	movs	r0, #16
20000a20:	f7ff ffba 	bl	20000998 <graphic_ctrl_bit_set>
            break;
20000a24:	e003      	b.n	20000a2e <select_controller+0x52>
            graphic_ctrl_bit_set(B_CS1|B_CS2);
20000a26:	2018      	movs	r0, #24
20000a28:	f7ff ffb6 	bl	20000998 <graphic_ctrl_bit_set>
            break;
20000a2c:	46c0      	nop			; (mov r8, r8)
}
20000a2e:	46c0      	nop			; (mov r8, r8)
20000a30:	46bd      	mov	sp, r7
20000a32:	b002      	add	sp, #8
20000a34:	bd80      	pop	{r7, pc}

20000a36 <graphic_wait_ready>:

void graphic_wait_ready(void){
20000a36:	b580      	push	{r7, lr}
20000a38:	af00      	add	r7, sp, #0
    graphic_ctrl_bit_clear(B_E);
20000a3a:	2040      	movs	r0, #64	; 0x40
20000a3c:	f7ff ff84 	bl	20000948 <graphic_ctrl_bit_clear>
    *GPIO_E_MODER = 0x00005555;
20000a40:	4b0a      	ldr	r3, [pc, #40]	; (20000a6c <graphic_wait_ready+0x36>)
20000a42:	4a0b      	ldr	r2, [pc, #44]	; (20000a70 <graphic_wait_ready+0x3a>)
20000a44:	601a      	str	r2, [r3, #0]
    graphic_ctrl_bit_clear(B_RS);
20000a46:	2001      	movs	r0, #1
20000a48:	f7ff ff7e 	bl	20000948 <graphic_ctrl_bit_clear>
    graphic_ctrl_bit_set(B_RW);
20000a4c:	2002      	movs	r0, #2
20000a4e:	f7ff ffa3 	bl	20000998 <graphic_ctrl_bit_set>
    delay_500ns();
20000a52:	f000 fc11 	bl	20001278 <delay_500ns>
    while(1){
        graphic_ctrl_bit_set(B_E);
20000a56:	2040      	movs	r0, #64	; 0x40
20000a58:	f7ff ff9e 	bl	20000998 <graphic_ctrl_bit_set>
        delay_500ns();
20000a5c:	f000 fc0c 	bl	20001278 <delay_500ns>
        graphic_ctrl_bit_clear(B_E);
20000a60:	2040      	movs	r0, #64	; 0x40
20000a62:	f7ff ff71 	bl	20000948 <graphic_ctrl_bit_clear>
        delay_500ns();
20000a66:	f000 fc07 	bl	20001278 <delay_500ns>
        graphic_ctrl_bit_set(B_E);
20000a6a:	e7f4      	b.n	20000a56 <graphic_wait_ready+0x20>
20000a6c:	40021000 	andmi	r1, r2, r0
20000a70:	00005555 	andeq	r5, r0, r5, asr r5

20000a74 <graphic_read>:
    //graphic_ctrl_bit_set(B_E); // Ej på föreläsning
    *GPIO_E_MODER = 0x55555555;
    
}

unsigned char graphic_read(unsigned char controller){
20000a74:	b580      	push	{r7, lr}
20000a76:	b084      	sub	sp, #16
20000a78:	af00      	add	r7, sp, #0
20000a7a:	0002      	movs	r2, r0
20000a7c:	1dfb      	adds	r3, r7, #7
20000a7e:	701a      	strb	r2, [r3, #0]
    graphic_ctrl_bit_clear(B_E);
20000a80:	2040      	movs	r0, #64	; 0x40
20000a82:	f7ff ff61 	bl	20000948 <graphic_ctrl_bit_clear>
    *GPIO_E_MODER = 0x00005555;
20000a86:	4b1a      	ldr	r3, [pc, #104]	; (20000af0 <graphic_read+0x7c>)
20000a88:	4a1a      	ldr	r2, [pc, #104]	; (20000af4 <graphic_read+0x80>)
20000a8a:	601a      	str	r2, [r3, #0]
    graphic_ctrl_bit_set(B_RS|B_RW);
20000a8c:	2003      	movs	r0, #3
20000a8e:	f7ff ff83 	bl	20000998 <graphic_ctrl_bit_set>
    select_controller(controller);              //EJ i Boken
20000a92:	1dfb      	adds	r3, r7, #7
20000a94:	781b      	ldrb	r3, [r3, #0]
20000a96:	0018      	movs	r0, r3
20000a98:	f7ff ffa0 	bl	200009dc <select_controller>
    delay_500ns();
20000a9c:	f000 fbec 	bl	20001278 <delay_500ns>
    graphic_ctrl_bit_set(B_E);
20000aa0:	2040      	movs	r0, #64	; 0x40
20000aa2:	f7ff ff79 	bl	20000998 <graphic_ctrl_bit_set>
    delay_500ns();
20000aa6:	f000 fbe7 	bl	20001278 <delay_500ns>
    unsigned char retval = *GPIO_E_IDR_HIGH;
20000aaa:	4a13      	ldr	r2, [pc, #76]	; (20000af8 <graphic_read+0x84>)
20000aac:	230f      	movs	r3, #15
20000aae:	18fb      	adds	r3, r7, r3
20000ab0:	7812      	ldrb	r2, [r2, #0]
20000ab2:	701a      	strb	r2, [r3, #0]
    graphic_ctrl_bit_clear(B_E);
20000ab4:	2040      	movs	r0, #64	; 0x40
20000ab6:	f7ff ff47 	bl	20000948 <graphic_ctrl_bit_clear>
    *GPIO_E_MODER = 0x55555555;
20000aba:	4b0d      	ldr	r3, [pc, #52]	; (20000af0 <graphic_read+0x7c>)
20000abc:	4a0f      	ldr	r2, [pc, #60]	; (20000afc <graphic_read+0x88>)
20000abe:	601a      	str	r2, [r3, #0]
    
    if (controller & B_CS1){
20000ac0:	1dfb      	adds	r3, r7, #7
20000ac2:	781b      	ldrb	r3, [r3, #0]
20000ac4:	2208      	movs	r2, #8
20000ac6:	4013      	ands	r3, r2
20000ac8:	d002      	beq.n	20000ad0 <graphic_read+0x5c>
        select_controller(B_CS1);
20000aca:	2008      	movs	r0, #8
20000acc:	f7ff ff86 	bl	200009dc <select_controller>
        //graphic_wait_ready();
    }
    if (controller & B_CS2){
20000ad0:	1dfb      	adds	r3, r7, #7
20000ad2:	781b      	ldrb	r3, [r3, #0]
20000ad4:	2210      	movs	r2, #16
20000ad6:	4013      	ands	r3, r2
20000ad8:	d002      	beq.n	20000ae0 <graphic_read+0x6c>
        select_controller(B_CS2);
20000ada:	2010      	movs	r0, #16
20000adc:	f7ff ff7e 	bl	200009dc <select_controller>
        //graphic_wait_ready();
    }
    return retval;
20000ae0:	230f      	movs	r3, #15
20000ae2:	18fb      	adds	r3, r7, r3
20000ae4:	781b      	ldrb	r3, [r3, #0]
}
20000ae6:	0018      	movs	r0, r3
20000ae8:	46bd      	mov	sp, r7
20000aea:	b004      	add	sp, #16
20000aec:	bd80      	pop	{r7, pc}
20000aee:	46c0      	nop			; (mov r8, r8)
20000af0:	40021000 	andmi	r1, r2, r0
20000af4:	00005555 	andeq	r5, r0, r5, asr r5
20000af8:	40021011 	andmi	r1, r2, r1, lsl r0
20000afc:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000b00 <graphic_read_data>:

uint8_t graphic_read_data(uint8_t controller){
20000b00:	b580      	push	{r7, lr}
20000b02:	b082      	sub	sp, #8
20000b04:	af00      	add	r7, sp, #0
20000b06:	0002      	movs	r2, r0
20000b08:	1dfb      	adds	r3, r7, #7
20000b0a:	701a      	strb	r2, [r3, #0]
    (void) graphic_read(controller);
20000b0c:	1dfb      	adds	r3, r7, #7
20000b0e:	781b      	ldrb	r3, [r3, #0]
20000b10:	0018      	movs	r0, r3
20000b12:	f7ff ffaf 	bl	20000a74 <graphic_read>
    return graphic_read(controller);
20000b16:	1dfb      	adds	r3, r7, #7
20000b18:	781b      	ldrb	r3, [r3, #0]
20000b1a:	0018      	movs	r0, r3
20000b1c:	f7ff ffaa 	bl	20000a74 <graphic_read>
20000b20:	0003      	movs	r3, r0
}
20000b22:	0018      	movs	r0, r3
20000b24:	46bd      	mov	sp, r7
20000b26:	b002      	add	sp, #8
20000b28:	bd80      	pop	{r7, pc}

20000b2a <graphic_write>:

void graphic_write(uint8_t value, uint8_t controller){
20000b2a:	b580      	push	{r7, lr}
20000b2c:	b082      	sub	sp, #8
20000b2e:	af00      	add	r7, sp, #0
20000b30:	0002      	movs	r2, r0
20000b32:	1dfb      	adds	r3, r7, #7
20000b34:	701a      	strb	r2, [r3, #0]
20000b36:	1dbb      	adds	r3, r7, #6
20000b38:	1c0a      	adds	r2, r1, #0
20000b3a:	701a      	strb	r2, [r3, #0]
    *GPIO_E_ODR_HIGH = value;
20000b3c:	4a17      	ldr	r2, [pc, #92]	; (20000b9c <graphic_write+0x72>)
20000b3e:	1dfb      	adds	r3, r7, #7
20000b40:	781b      	ldrb	r3, [r3, #0]
20000b42:	7013      	strb	r3, [r2, #0]
    select_controller(controller);
20000b44:	1dbb      	adds	r3, r7, #6
20000b46:	781b      	ldrb	r3, [r3, #0]
20000b48:	0018      	movs	r0, r3
20000b4a:	f7ff ff47 	bl	200009dc <select_controller>
    delay_500ns();
20000b4e:	f000 fb93 	bl	20001278 <delay_500ns>
    graphic_ctrl_bit_set(B_E);
20000b52:	2040      	movs	r0, #64	; 0x40
20000b54:	f7ff ff20 	bl	20000998 <graphic_ctrl_bit_set>
    delay_500ns();
20000b58:	f000 fb8e 	bl	20001278 <delay_500ns>
    graphic_ctrl_bit_clear(B_E);
20000b5c:	2040      	movs	r0, #64	; 0x40
20000b5e:	f7ff fef3 	bl	20000948 <graphic_ctrl_bit_clear>
    
    if(controller & B_CS1){
20000b62:	1dbb      	adds	r3, r7, #6
20000b64:	781b      	ldrb	r3, [r3, #0]
20000b66:	2208      	movs	r2, #8
20000b68:	4013      	ands	r3, r2
20000b6a:	d002      	beq.n	20000b72 <graphic_write+0x48>
        select_controller(B_CS1);
20000b6c:	2008      	movs	r0, #8
20000b6e:	f7ff ff35 	bl	200009dc <select_controller>
        //graphic_wait_ready();
    }
    if(controller & B_CS2){
20000b72:	1dbb      	adds	r3, r7, #6
20000b74:	781b      	ldrb	r3, [r3, #0]
20000b76:	2210      	movs	r2, #16
20000b78:	4013      	ands	r3, r2
20000b7a:	d002      	beq.n	20000b82 <graphic_write+0x58>
        select_controller(B_CS2);
20000b7c:	2010      	movs	r0, #16
20000b7e:	f7ff ff2d 	bl	200009dc <select_controller>
        //graphic_wait_ready();
    }
    
    /* INTE på föreläsning*/
    *GPIO_E_ODR_HIGH = 0;
20000b82:	4b06      	ldr	r3, [pc, #24]	; (20000b9c <graphic_write+0x72>)
20000b84:	2200      	movs	r2, #0
20000b86:	701a      	strb	r2, [r3, #0]
    graphic_ctrl_bit_set(B_E);
20000b88:	2040      	movs	r0, #64	; 0x40
20000b8a:	f7ff ff05 	bl	20000998 <graphic_ctrl_bit_set>
    select_controller(0);
20000b8e:	2000      	movs	r0, #0
20000b90:	f7ff ff24 	bl	200009dc <select_controller>
      
}
20000b94:	46c0      	nop			; (mov r8, r8)
20000b96:	46bd      	mov	sp, r7
20000b98:	b002      	add	sp, #8
20000b9a:	bd80      	pop	{r7, pc}
20000b9c:	40021015 	andmi	r1, r2, r5, lsl r0

20000ba0 <graphic_write_command>:

void graphic_write_command(uint8_t cmd, uint8_t controller){
20000ba0:	b580      	push	{r7, lr}
20000ba2:	b082      	sub	sp, #8
20000ba4:	af00      	add	r7, sp, #0
20000ba6:	0002      	movs	r2, r0
20000ba8:	1dfb      	adds	r3, r7, #7
20000baa:	701a      	strb	r2, [r3, #0]
20000bac:	1dbb      	adds	r3, r7, #6
20000bae:	1c0a      	adds	r2, r1, #0
20000bb0:	701a      	strb	r2, [r3, #0]
    graphic_ctrl_bit_clear(B_E);
20000bb2:	2040      	movs	r0, #64	; 0x40
20000bb4:	f7ff fec8 	bl	20000948 <graphic_ctrl_bit_clear>
    select_controller(controller);
20000bb8:	1dbb      	adds	r3, r7, #6
20000bba:	781b      	ldrb	r3, [r3, #0]
20000bbc:	0018      	movs	r0, r3
20000bbe:	f7ff ff0d 	bl	200009dc <select_controller>
    graphic_ctrl_bit_clear(B_RS);
20000bc2:	2001      	movs	r0, #1
20000bc4:	f7ff fec0 	bl	20000948 <graphic_ctrl_bit_clear>
    graphic_ctrl_bit_clear(B_RW);
20000bc8:	2002      	movs	r0, #2
20000bca:	f7ff febd 	bl	20000948 <graphic_ctrl_bit_clear>
    graphic_write(cmd, controller);
20000bce:	1dbb      	adds	r3, r7, #6
20000bd0:	781a      	ldrb	r2, [r3, #0]
20000bd2:	1dfb      	adds	r3, r7, #7
20000bd4:	781b      	ldrb	r3, [r3, #0]
20000bd6:	0011      	movs	r1, r2
20000bd8:	0018      	movs	r0, r3
20000bda:	f7ff ffa6 	bl	20000b2a <graphic_write>
}
20000bde:	46c0      	nop			; (mov r8, r8)
20000be0:	46bd      	mov	sp, r7
20000be2:	b002      	add	sp, #8
20000be4:	bd80      	pop	{r7, pc}

20000be6 <graphic_write_data>:

void graphic_write_data(uint8_t data, uint8_t controller){
20000be6:	b580      	push	{r7, lr}
20000be8:	b082      	sub	sp, #8
20000bea:	af00      	add	r7, sp, #0
20000bec:	0002      	movs	r2, r0
20000bee:	1dfb      	adds	r3, r7, #7
20000bf0:	701a      	strb	r2, [r3, #0]
20000bf2:	1dbb      	adds	r3, r7, #6
20000bf4:	1c0a      	adds	r2, r1, #0
20000bf6:	701a      	strb	r2, [r3, #0]
    graphic_ctrl_bit_clear(B_E);
20000bf8:	2040      	movs	r0, #64	; 0x40
20000bfa:	f7ff fea5 	bl	20000948 <graphic_ctrl_bit_clear>
    select_controller(controller);
20000bfe:	1dbb      	adds	r3, r7, #6
20000c00:	781b      	ldrb	r3, [r3, #0]
20000c02:	0018      	movs	r0, r3
20000c04:	f7ff feea 	bl	200009dc <select_controller>
    graphic_ctrl_bit_set(B_RS);
20000c08:	2001      	movs	r0, #1
20000c0a:	f7ff fec5 	bl	20000998 <graphic_ctrl_bit_set>
    graphic_ctrl_bit_clear(B_RW);
20000c0e:	2002      	movs	r0, #2
20000c10:	f7ff fe9a 	bl	20000948 <graphic_ctrl_bit_clear>
    graphic_write(data, controller);
20000c14:	1dbb      	adds	r3, r7, #6
20000c16:	781a      	ldrb	r2, [r3, #0]
20000c18:	1dfb      	adds	r3, r7, #7
20000c1a:	781b      	ldrb	r3, [r3, #0]
20000c1c:	0011      	movs	r1, r2
20000c1e:	0018      	movs	r0, r3
20000c20:	f7ff ff83 	bl	20000b2a <graphic_write>
}
20000c24:	46c0      	nop			; (mov r8, r8)
20000c26:	46bd      	mov	sp, r7
20000c28:	b002      	add	sp, #8
20000c2a:	bd80      	pop	{r7, pc}

20000c2c <graphic_clear_screen>:

void graphic_clear_screen(void){
20000c2c:	b580      	push	{r7, lr}
20000c2e:	b082      	sub	sp, #8
20000c30:	af00      	add	r7, sp, #0
    for (int page = 0; page < 8; page++){
20000c32:	2300      	movs	r3, #0
20000c34:	607b      	str	r3, [r7, #4]
20000c36:	e01e      	b.n	20000c76 <graphic_clear_screen+0x4a>
        graphic_write_command(LCD_SET_PAGE | page, B_CS1|B_CS2);
20000c38:	687b      	ldr	r3, [r7, #4]
20000c3a:	b25b      	sxtb	r3, r3
20000c3c:	2248      	movs	r2, #72	; 0x48
20000c3e:	4252      	negs	r2, r2
20000c40:	4313      	orrs	r3, r2
20000c42:	b25b      	sxtb	r3, r3
20000c44:	b2db      	uxtb	r3, r3
20000c46:	2118      	movs	r1, #24
20000c48:	0018      	movs	r0, r3
20000c4a:	f7ff ffa9 	bl	20000ba0 <graphic_write_command>
        graphic_write_command(LCD_SET_ADD | 0, B_CS1|B_CS2);
20000c4e:	2118      	movs	r1, #24
20000c50:	2040      	movs	r0, #64	; 0x40
20000c52:	f7ff ffa5 	bl	20000ba0 <graphic_write_command>
        for (int add = 0; add < 63; add++){
20000c56:	2300      	movs	r3, #0
20000c58:	603b      	str	r3, [r7, #0]
20000c5a:	e006      	b.n	20000c6a <graphic_clear_screen+0x3e>
            graphic_write_data(0, B_CS1|B_CS2);
20000c5c:	2118      	movs	r1, #24
20000c5e:	2000      	movs	r0, #0
20000c60:	f7ff ffc1 	bl	20000be6 <graphic_write_data>
        for (int add = 0; add < 63; add++){
20000c64:	683b      	ldr	r3, [r7, #0]
20000c66:	3301      	adds	r3, #1
20000c68:	603b      	str	r3, [r7, #0]
20000c6a:	683b      	ldr	r3, [r7, #0]
20000c6c:	2b3e      	cmp	r3, #62	; 0x3e
20000c6e:	ddf5      	ble.n	20000c5c <graphic_clear_screen+0x30>
    for (int page = 0; page < 8; page++){
20000c70:	687b      	ldr	r3, [r7, #4]
20000c72:	3301      	adds	r3, #1
20000c74:	607b      	str	r3, [r7, #4]
20000c76:	687b      	ldr	r3, [r7, #4]
20000c78:	2b07      	cmp	r3, #7
20000c7a:	dddd      	ble.n	20000c38 <graphic_clear_screen+0xc>
        }
    }
}
20000c7c:	46c0      	nop			; (mov r8, r8)
20000c7e:	46c0      	nop			; (mov r8, r8)
20000c80:	46bd      	mov	sp, r7
20000c82:	b002      	add	sp, #8
20000c84:	bd80      	pop	{r7, pc}

20000c86 <clear_backbuffer>:

void clear_backbuffer(){
20000c86:	b580      	push	{r7, lr}
20000c88:	b082      	sub	sp, #8
20000c8a:	af00      	add	r7, sp, #0
    int i;
    for (i = 0; i < 1024; i++)
20000c8c:	2300      	movs	r3, #0
20000c8e:	607b      	str	r3, [r7, #4]
20000c90:	e007      	b.n	20000ca2 <clear_backbuffer+0x1c>
        backBuffer[i] = 0;
20000c92:	4b09      	ldr	r3, [pc, #36]	; (20000cb8 <clear_backbuffer+0x32>)
20000c94:	687a      	ldr	r2, [r7, #4]
20000c96:	0092      	lsls	r2, r2, #2
20000c98:	2100      	movs	r1, #0
20000c9a:	50d1      	str	r1, [r2, r3]
    for (i = 0; i < 1024; i++)
20000c9c:	687b      	ldr	r3, [r7, #4]
20000c9e:	3301      	adds	r3, #1
20000ca0:	607b      	str	r3, [r7, #4]
20000ca2:	687a      	ldr	r2, [r7, #4]
20000ca4:	2380      	movs	r3, #128	; 0x80
20000ca6:	00db      	lsls	r3, r3, #3
20000ca8:	429a      	cmp	r2, r3
20000caa:	dbf2      	blt.n	20000c92 <clear_backbuffer+0xc>
}
20000cac:	46c0      	nop			; (mov r8, r8)
20000cae:	46c0      	nop			; (mov r8, r8)
20000cb0:	46bd      	mov	sp, r7
20000cb2:	b002      	add	sp, #8
20000cb4:	bd80      	pop	{r7, pc}
20000cb6:	46c0      	nop			; (mov r8, r8)
20000cb8:	200025b0 			; <UNDEFINED> instruction: 0x200025b0

20000cbc <pixel>:

void pixel(unsigned x, unsigned y){
20000cbc:	b580      	push	{r7, lr}
20000cbe:	b084      	sub	sp, #16
20000cc0:	af00      	add	r7, sp, #0
20000cc2:	6078      	str	r0, [r7, #4]
20000cc4:	6039      	str	r1, [r7, #0]
    uint8_t mask;
    int index = 0;
20000cc6:	2300      	movs	r3, #0
20000cc8:	60fb      	str	r3, [r7, #12]
    if ((x >128)||(x <1)||(y >64)||(y <1)) return;
20000cca:	687b      	ldr	r3, [r7, #4]
20000ccc:	2b80      	cmp	r3, #128	; 0x80
20000cce:	d831      	bhi.n	20000d34 <pixel+0x78>
20000cd0:	687b      	ldr	r3, [r7, #4]
20000cd2:	2b00      	cmp	r3, #0
20000cd4:	d02e      	beq.n	20000d34 <pixel+0x78>
20000cd6:	683b      	ldr	r3, [r7, #0]
20000cd8:	2b40      	cmp	r3, #64	; 0x40
20000cda:	d82b      	bhi.n	20000d34 <pixel+0x78>
20000cdc:	683b      	ldr	r3, [r7, #0]
20000cde:	2b00      	cmp	r3, #0
20000ce0:	d028      	beq.n	20000d34 <pixel+0x78>

    mask = 1 << ((y-1)%8);
20000ce2:	683b      	ldr	r3, [r7, #0]
20000ce4:	3b01      	subs	r3, #1
20000ce6:	2207      	movs	r2, #7
20000ce8:	4013      	ands	r3, r2
20000cea:	2201      	movs	r2, #1
20000cec:	409a      	lsls	r2, r3
20000cee:	230b      	movs	r3, #11
20000cf0:	18fb      	adds	r3, r7, r3
20000cf2:	701a      	strb	r2, [r3, #0]
    
    if(x > 64){
20000cf4:	687b      	ldr	r3, [r7, #4]
20000cf6:	2b40      	cmp	r3, #64	; 0x40
20000cf8:	d905      	bls.n	20000d06 <pixel+0x4a>
        x -= 65;
20000cfa:	687b      	ldr	r3, [r7, #4]
20000cfc:	3b41      	subs	r3, #65	; 0x41
20000cfe:	607b      	str	r3, [r7, #4]
        index = 512;
20000d00:	2380      	movs	r3, #128	; 0x80
20000d02:	009b      	lsls	r3, r3, #2
20000d04:	60fb      	str	r3, [r7, #12]
    }
    
    index += x + ((y-1)/8)*64;
20000d06:	683b      	ldr	r3, [r7, #0]
20000d08:	3b01      	subs	r3, #1
20000d0a:	08db      	lsrs	r3, r3, #3
20000d0c:	019a      	lsls	r2, r3, #6
20000d0e:	687b      	ldr	r3, [r7, #4]
20000d10:	18d2      	adds	r2, r2, r3
20000d12:	68fb      	ldr	r3, [r7, #12]
20000d14:	18d3      	adds	r3, r2, r3
20000d16:	60fb      	str	r3, [r7, #12]
    
    backBuffer[index] |= mask;
20000d18:	4b08      	ldr	r3, [pc, #32]	; (20000d3c <pixel+0x80>)
20000d1a:	68fa      	ldr	r2, [r7, #12]
20000d1c:	0092      	lsls	r2, r2, #2
20000d1e:	58d2      	ldr	r2, [r2, r3]
20000d20:	230b      	movs	r3, #11
20000d22:	18fb      	adds	r3, r7, r3
20000d24:	781b      	ldrb	r3, [r3, #0]
20000d26:	431a      	orrs	r2, r3
20000d28:	0011      	movs	r1, r2
20000d2a:	4b04      	ldr	r3, [pc, #16]	; (20000d3c <pixel+0x80>)
20000d2c:	68fa      	ldr	r2, [r7, #12]
20000d2e:	0092      	lsls	r2, r2, #2
20000d30:	50d1      	str	r1, [r2, r3]
20000d32:	e000      	b.n	20000d36 <pixel+0x7a>
    if ((x >128)||(x <1)||(y >64)||(y <1)) return;
20000d34:	46c0      	nop			; (mov r8, r8)
}
20000d36:	46bd      	mov	sp, r7
20000d38:	b004      	add	sp, #16
20000d3a:	bd80      	pop	{r7, pc}
20000d3c:	200025b0 			; <UNDEFINED> instruction: 0x200025b0

20000d40 <graphic_draw_screen>:

void graphic_draw_screen(void){
20000d40:	b580      	push	{r7, lr}
20000d42:	b084      	sub	sp, #16
20000d44:	af00      	add	r7, sp, #0
    uint8_t i,  j, controller, c;
    unsigned int k = 0;
20000d46:	2300      	movs	r3, #0
20000d48:	60bb      	str	r3, [r7, #8]
    
    for (c = 0; c < 2; c++){
20000d4a:	230d      	movs	r3, #13
20000d4c:	18fb      	adds	r3, r7, r3
20000d4e:	2200      	movs	r2, #0
20000d50:	701a      	strb	r2, [r3, #0]
20000d52:	e050      	b.n	20000df6 <graphic_draw_screen+0xb6>
        controller = (c==0) ? B_CS1 : B_CS2;
20000d54:	230d      	movs	r3, #13
20000d56:	18fb      	adds	r3, r7, r3
20000d58:	781b      	ldrb	r3, [r3, #0]
20000d5a:	2b00      	cmp	r3, #0
20000d5c:	d101      	bne.n	20000d62 <graphic_draw_screen+0x22>
20000d5e:	2208      	movs	r2, #8
20000d60:	e000      	b.n	20000d64 <graphic_draw_screen+0x24>
20000d62:	2210      	movs	r2, #16
20000d64:	1dfb      	adds	r3, r7, #7
20000d66:	701a      	strb	r2, [r3, #0]
        for (j = 0; j < 8; j++){
20000d68:	230e      	movs	r3, #14
20000d6a:	18fb      	adds	r3, r7, r3
20000d6c:	2200      	movs	r2, #0
20000d6e:	701a      	strb	r2, [r3, #0]
20000d70:	e036      	b.n	20000de0 <graphic_draw_screen+0xa0>
            graphic_write_command(LCD_SET_PAGE | j, controller);
20000d72:	230e      	movs	r3, #14
20000d74:	18fb      	adds	r3, r7, r3
20000d76:	781b      	ldrb	r3, [r3, #0]
20000d78:	2248      	movs	r2, #72	; 0x48
20000d7a:	4252      	negs	r2, r2
20000d7c:	4313      	orrs	r3, r2
20000d7e:	b2da      	uxtb	r2, r3
20000d80:	1dfb      	adds	r3, r7, #7
20000d82:	781b      	ldrb	r3, [r3, #0]
20000d84:	0019      	movs	r1, r3
20000d86:	0010      	movs	r0, r2
20000d88:	f7ff ff0a 	bl	20000ba0 <graphic_write_command>
            graphic_write_command(LCD_SET_ADD | 0, controller);
20000d8c:	1dfb      	adds	r3, r7, #7
20000d8e:	781b      	ldrb	r3, [r3, #0]
20000d90:	0019      	movs	r1, r3
20000d92:	2040      	movs	r0, #64	; 0x40
20000d94:	f7ff ff04 	bl	20000ba0 <graphic_write_command>
            for(i = 0; i <= 63; i++, k++){
20000d98:	230f      	movs	r3, #15
20000d9a:	18fb      	adds	r3, r7, r3
20000d9c:	2200      	movs	r2, #0
20000d9e:	701a      	strb	r2, [r3, #0]
20000da0:	e013      	b.n	20000dca <graphic_draw_screen+0x8a>
                graphic_write_data(backBuffer[k],controller);  
20000da2:	4b1a      	ldr	r3, [pc, #104]	; (20000e0c <graphic_draw_screen+0xcc>)
20000da4:	68ba      	ldr	r2, [r7, #8]
20000da6:	0092      	lsls	r2, r2, #2
20000da8:	58d3      	ldr	r3, [r2, r3]
20000daa:	b2da      	uxtb	r2, r3
20000dac:	1dfb      	adds	r3, r7, #7
20000dae:	781b      	ldrb	r3, [r3, #0]
20000db0:	0019      	movs	r1, r3
20000db2:	0010      	movs	r0, r2
20000db4:	f7ff ff17 	bl	20000be6 <graphic_write_data>
            for(i = 0; i <= 63; i++, k++){
20000db8:	210f      	movs	r1, #15
20000dba:	187b      	adds	r3, r7, r1
20000dbc:	781a      	ldrb	r2, [r3, #0]
20000dbe:	187b      	adds	r3, r7, r1
20000dc0:	3201      	adds	r2, #1
20000dc2:	701a      	strb	r2, [r3, #0]
20000dc4:	68bb      	ldr	r3, [r7, #8]
20000dc6:	3301      	adds	r3, #1
20000dc8:	60bb      	str	r3, [r7, #8]
20000dca:	230f      	movs	r3, #15
20000dcc:	18fb      	adds	r3, r7, r3
20000dce:	781b      	ldrb	r3, [r3, #0]
20000dd0:	2b3f      	cmp	r3, #63	; 0x3f
20000dd2:	d9e6      	bls.n	20000da2 <graphic_draw_screen+0x62>
        for (j = 0; j < 8; j++){
20000dd4:	210e      	movs	r1, #14
20000dd6:	187b      	adds	r3, r7, r1
20000dd8:	781a      	ldrb	r2, [r3, #0]
20000dda:	187b      	adds	r3, r7, r1
20000ddc:	3201      	adds	r2, #1
20000dde:	701a      	strb	r2, [r3, #0]
20000de0:	230e      	movs	r3, #14
20000de2:	18fb      	adds	r3, r7, r3
20000de4:	781b      	ldrb	r3, [r3, #0]
20000de6:	2b07      	cmp	r3, #7
20000de8:	d9c3      	bls.n	20000d72 <graphic_draw_screen+0x32>
    for (c = 0; c < 2; c++){
20000dea:	210d      	movs	r1, #13
20000dec:	187b      	adds	r3, r7, r1
20000dee:	781a      	ldrb	r2, [r3, #0]
20000df0:	187b      	adds	r3, r7, r1
20000df2:	3201      	adds	r2, #1
20000df4:	701a      	strb	r2, [r3, #0]
20000df6:	230d      	movs	r3, #13
20000df8:	18fb      	adds	r3, r7, r3
20000dfa:	781b      	ldrb	r3, [r3, #0]
20000dfc:	2b01      	cmp	r3, #1
20000dfe:	d9a9      	bls.n	20000d54 <graphic_draw_screen+0x14>
            }
        }
    }
}
20000e00:	46c0      	nop			; (mov r8, r8)
20000e02:	46c0      	nop			; (mov r8, r8)
20000e04:	46bd      	mov	sp, r7
20000e06:	b004      	add	sp, #16
20000e08:	bd80      	pop	{r7, pc}
20000e0a:	46c0      	nop			; (mov r8, r8)
20000e0c:	200025b0 			; <UNDEFINED> instruction: 0x200025b0

20000e10 <init_queue>:
POBJECT objArray[MAX];
int front = 0;
int rear = -1;
int itemCount = 0;

void init_queue(){
20000e10:	b580      	push	{r7, lr}
20000e12:	b082      	sub	sp, #8
20000e14:	af00      	add	r7, sp, #0
    for(int i = 0; i < MAX; i++)
20000e16:	2300      	movs	r3, #0
20000e18:	607b      	str	r3, [r7, #4]
20000e1a:	e007      	b.n	20000e2c <init_queue+0x1c>
        objArray[i] = NULL;
20000e1c:	4b07      	ldr	r3, [pc, #28]	; (20000e3c <init_queue+0x2c>)
20000e1e:	687a      	ldr	r2, [r7, #4]
20000e20:	0092      	lsls	r2, r2, #2
20000e22:	2100      	movs	r1, #0
20000e24:	50d1      	str	r1, [r2, r3]
    for(int i = 0; i < MAX; i++)
20000e26:	687b      	ldr	r3, [r7, #4]
20000e28:	3301      	adds	r3, #1
20000e2a:	607b      	str	r3, [r7, #4]
20000e2c:	687b      	ldr	r3, [r7, #4]
20000e2e:	2b63      	cmp	r3, #99	; 0x63
20000e30:	ddf4      	ble.n	20000e1c <init_queue+0xc>
}
20000e32:	46c0      	nop			; (mov r8, r8)
20000e34:	46c0      	nop			; (mov r8, r8)
20000e36:	46bd      	mov	sp, r7
20000e38:	b002      	add	sp, #8
20000e3a:	bd80      	pop	{r7, pc}
20000e3c:	200035b8 			; <UNDEFINED> instruction: 0x200035b8

20000e40 <peek>:

/*returns the head*/
POBJECT peek() {
20000e40:	b580      	push	{r7, lr}
20000e42:	af00      	add	r7, sp, #0
   return objArray[front];
20000e44:	4b03      	ldr	r3, [pc, #12]	; (20000e54 <peek+0x14>)
20000e46:	681a      	ldr	r2, [r3, #0]
20000e48:	4b03      	ldr	r3, [pc, #12]	; (20000e58 <peek+0x18>)
20000e4a:	0092      	lsls	r2, r2, #2
20000e4c:	58d3      	ldr	r3, [r2, r3]
}
20000e4e:	0018      	movs	r0, r3
20000e50:	46bd      	mov	sp, r7
20000e52:	bd80      	pop	{r7, pc}
20000e54:	200035b0 			; <UNDEFINED> instruction: 0x200035b0
20000e58:	200035b8 			; <UNDEFINED> instruction: 0x200035b8

20000e5c <isEmpty>:

/*returns true if itemCount == 0*/
bool isEmpty() {
20000e5c:	b580      	push	{r7, lr}
20000e5e:	af00      	add	r7, sp, #0
   return itemCount == 0;
20000e60:	4b03      	ldr	r3, [pc, #12]	; (20000e70 <isEmpty+0x14>)
20000e62:	681b      	ldr	r3, [r3, #0]
20000e64:	425a      	negs	r2, r3
20000e66:	4153      	adcs	r3, r2
20000e68:	b2db      	uxtb	r3, r3
}
20000e6a:	0018      	movs	r0, r3
20000e6c:	46bd      	mov	sp, r7
20000e6e:	bd80      	pop	{r7, pc}
20000e70:	200035b4 			; <UNDEFINED> instruction: 0x200035b4

20000e74 <isFull>:

/*returns true if itemCount == MAX (512)*/
bool isFull() {
20000e74:	b580      	push	{r7, lr}
20000e76:	af00      	add	r7, sp, #0
   return itemCount == MAX;
20000e78:	4b04      	ldr	r3, [pc, #16]	; (20000e8c <isFull+0x18>)
20000e7a:	681b      	ldr	r3, [r3, #0]
20000e7c:	3b64      	subs	r3, #100	; 0x64
20000e7e:	425a      	negs	r2, r3
20000e80:	4153      	adcs	r3, r2
20000e82:	b2db      	uxtb	r3, r3
}
20000e84:	0018      	movs	r0, r3
20000e86:	46bd      	mov	sp, r7
20000e88:	bd80      	pop	{r7, pc}
20000e8a:	46c0      	nop			; (mov r8, r8)
20000e8c:	200035b4 			; <UNDEFINED> instruction: 0x200035b4

20000e90 <size>:

/*Returns itemCount*/
int size() {
20000e90:	b580      	push	{r7, lr}
20000e92:	af00      	add	r7, sp, #0
   return itemCount;
20000e94:	4b02      	ldr	r3, [pc, #8]	; (20000ea0 <size+0x10>)
20000e96:	681b      	ldr	r3, [r3, #0]
}  
20000e98:	0018      	movs	r0, r3
20000e9a:	46bd      	mov	sp, r7
20000e9c:	bd80      	pop	{r7, pc}
20000e9e:	46c0      	nop			; (mov r8, r8)
20000ea0:	200035b4 			; <UNDEFINED> instruction: 0x200035b4

20000ea4 <insert>:

/*Adds a node in the end of the queue*/
void insert(POBJECT data) {
20000ea4:	b580      	push	{r7, lr}
20000ea6:	b082      	sub	sp, #8
20000ea8:	af00      	add	r7, sp, #0
20000eaa:	6078      	str	r0, [r7, #4]

   if(!isFull()) {
20000eac:	f7ff ffe2 	bl	20000e74 <isFull>
20000eb0:	0003      	movs	r3, r0
20000eb2:	001a      	movs	r2, r3
20000eb4:	2301      	movs	r3, #1
20000eb6:	4053      	eors	r3, r2
20000eb8:	b2db      	uxtb	r3, r3
20000eba:	2b00      	cmp	r3, #0
20000ebc:	d017      	beq.n	20000eee <insert+0x4a>
	
      if(rear == MAX-1) {
20000ebe:	4b0e      	ldr	r3, [pc, #56]	; (20000ef8 <insert+0x54>)
20000ec0:	681b      	ldr	r3, [r3, #0]
20000ec2:	2b63      	cmp	r3, #99	; 0x63
20000ec4:	d103      	bne.n	20000ece <insert+0x2a>
         rear = -1;            
20000ec6:	4b0c      	ldr	r3, [pc, #48]	; (20000ef8 <insert+0x54>)
20000ec8:	2201      	movs	r2, #1
20000eca:	4252      	negs	r2, r2
20000ecc:	601a      	str	r2, [r3, #0]
      }       
      objArray[++rear] = data;
20000ece:	4b0a      	ldr	r3, [pc, #40]	; (20000ef8 <insert+0x54>)
20000ed0:	681b      	ldr	r3, [r3, #0]
20000ed2:	1c5a      	adds	r2, r3, #1
20000ed4:	4b08      	ldr	r3, [pc, #32]	; (20000ef8 <insert+0x54>)
20000ed6:	601a      	str	r2, [r3, #0]
20000ed8:	4b07      	ldr	r3, [pc, #28]	; (20000ef8 <insert+0x54>)
20000eda:	681a      	ldr	r2, [r3, #0]
20000edc:	4b07      	ldr	r3, [pc, #28]	; (20000efc <insert+0x58>)
20000ede:	0092      	lsls	r2, r2, #2
20000ee0:	6879      	ldr	r1, [r7, #4]
20000ee2:	50d1      	str	r1, [r2, r3]
      itemCount++;
20000ee4:	4b06      	ldr	r3, [pc, #24]	; (20000f00 <insert+0x5c>)
20000ee6:	681b      	ldr	r3, [r3, #0]
20000ee8:	1c5a      	adds	r2, r3, #1
20000eea:	4b05      	ldr	r3, [pc, #20]	; (20000f00 <insert+0x5c>)
20000eec:	601a      	str	r2, [r3, #0]
   }
}
20000eee:	46c0      	nop			; (mov r8, r8)
20000ef0:	46bd      	mov	sp, r7
20000ef2:	b002      	add	sp, #8
20000ef4:	bd80      	pop	{r7, pc}
20000ef6:	46c0      	nop			; (mov r8, r8)
20000ef8:	20003884 	andcs	r3, r0, r4, lsl #17
20000efc:	200035b8 			; <UNDEFINED> instruction: 0x200035b8
20000f00:	200035b4 			; <UNDEFINED> instruction: 0x200035b4

20000f04 <remove>:

int remove() {
20000f04:	b580      	push	{r7, lr}
20000f06:	b082      	sub	sp, #8
20000f08:	af00      	add	r7, sp, #0
   POBJECT data = objArray[front++];
20000f0a:	4b0d      	ldr	r3, [pc, #52]	; (20000f40 <remove+0x3c>)
20000f0c:	681b      	ldr	r3, [r3, #0]
20000f0e:	1c59      	adds	r1, r3, #1
20000f10:	4a0b      	ldr	r2, [pc, #44]	; (20000f40 <remove+0x3c>)
20000f12:	6011      	str	r1, [r2, #0]
20000f14:	4a0b      	ldr	r2, [pc, #44]	; (20000f44 <remove+0x40>)
20000f16:	009b      	lsls	r3, r3, #2
20000f18:	589b      	ldr	r3, [r3, r2]
20000f1a:	607b      	str	r3, [r7, #4]
	
   if(front == MAX) {
20000f1c:	4b08      	ldr	r3, [pc, #32]	; (20000f40 <remove+0x3c>)
20000f1e:	681b      	ldr	r3, [r3, #0]
20000f20:	2b64      	cmp	r3, #100	; 0x64
20000f22:	d102      	bne.n	20000f2a <remove+0x26>
      front = 0;
20000f24:	4b06      	ldr	r3, [pc, #24]	; (20000f40 <remove+0x3c>)
20000f26:	2200      	movs	r2, #0
20000f28:	601a      	str	r2, [r3, #0]
   }
	
   itemCount--;
20000f2a:	4b07      	ldr	r3, [pc, #28]	; (20000f48 <remove+0x44>)
20000f2c:	681b      	ldr	r3, [r3, #0]
20000f2e:	1e5a      	subs	r2, r3, #1
20000f30:	4b05      	ldr	r3, [pc, #20]	; (20000f48 <remove+0x44>)
20000f32:	601a      	str	r2, [r3, #0]
   return (int)data;  
20000f34:	687b      	ldr	r3, [r7, #4]
}
20000f36:	0018      	movs	r0, r3
20000f38:	46bd      	mov	sp, r7
20000f3a:	b002      	add	sp, #8
20000f3c:	bd80      	pop	{r7, pc}
20000f3e:	46c0      	nop			; (mov r8, r8)
20000f40:	200035b0 			; <UNDEFINED> instruction: 0x200035b0
20000f44:	200035b8 			; <UNDEFINED> instruction: 0x200035b8
20000f48:	200035b4 			; <UNDEFINED> instruction: 0x200035b4

20000f4c <ascii_init>:
#include <defines.h>
#include <asciidisplay.h>

void ascii_init(void){ /**/
20000f4c:	b580      	push	{r7, lr}
20000f4e:	af00      	add	r7, sp, #0
    /*function set*/
    funtion_set();
20000f50:	f000 f8ef 	bl	20001132 <funtion_set>
    
    /*Display Control*/
    display_control();
20000f54:	f000 f904 	bl	20001160 <display_control>
    
    /*Clear Display*/
    clear_display();
20000f58:	f000 f8d4 	bl	20001104 <clear_display>
    
    /*Entry mode set*/
    entry_mode_set();
20000f5c:	f000 f917 	bl	2000118e <entry_mode_set>
}
20000f60:	46c0      	nop			; (mov r8, r8)
20000f62:	46bd      	mov	sp, r7
20000f64:	bd80      	pop	{r7, pc}

20000f66 <ascii_ctrl_bit_set>:

/*adressera ASCII-display, ettställ de bitar som är 1 i x*/
void ascii_ctrl_bit_set(unsigned char x){
20000f66:	b580      	push	{r7, lr}
20000f68:	b082      	sub	sp, #8
20000f6a:	af00      	add	r7, sp, #0
20000f6c:	0002      	movs	r2, r0
20000f6e:	1dfb      	adds	r3, r7, #7
20000f70:	701a      	strb	r2, [r3, #0]
    *GPIO_E_ODR_LOW |= ( B_SELECT | x );
20000f72:	4b08      	ldr	r3, [pc, #32]	; (20000f94 <ascii_ctrl_bit_set+0x2e>)
20000f74:	781b      	ldrb	r3, [r3, #0]
20000f76:	b2da      	uxtb	r2, r3
20000f78:	1dfb      	adds	r3, r7, #7
20000f7a:	781b      	ldrb	r3, [r3, #0]
20000f7c:	4313      	orrs	r3, r2
20000f7e:	b2db      	uxtb	r3, r3
20000f80:	4a04      	ldr	r2, [pc, #16]	; (20000f94 <ascii_ctrl_bit_set+0x2e>)
20000f82:	2104      	movs	r1, #4
20000f84:	430b      	orrs	r3, r1
20000f86:	b2db      	uxtb	r3, r3
20000f88:	7013      	strb	r3, [r2, #0]
}
20000f8a:	46c0      	nop			; (mov r8, r8)
20000f8c:	46bd      	mov	sp, r7
20000f8e:	b002      	add	sp, #8
20000f90:	bd80      	pop	{r7, pc}
20000f92:	46c0      	nop			; (mov r8, r8)
20000f94:	40021014 	andmi	r1, r2, r4, lsl r0

20000f98 <ascii_ctrl_bit_clear>:

/*adressera ASCII-display, nollställ de bitar som är 1 i x*/
void ascii_ctrl_bit_clear(unsigned char x){
20000f98:	b580      	push	{r7, lr}
20000f9a:	b082      	sub	sp, #8
20000f9c:	af00      	add	r7, sp, #0
20000f9e:	0002      	movs	r2, r0
20000fa0:	1dfb      	adds	r3, r7, #7
20000fa2:	701a      	strb	r2, [r3, #0]
    *GPIO_E_ODR_LOW &= ( B_SELECT | ~x);
20000fa4:	4b0a      	ldr	r3, [pc, #40]	; (20000fd0 <ascii_ctrl_bit_clear+0x38>)
20000fa6:	781b      	ldrb	r3, [r3, #0]
20000fa8:	b2db      	uxtb	r3, r3
20000faa:	b25b      	sxtb	r3, r3
20000fac:	1dfa      	adds	r2, r7, #7
20000fae:	7812      	ldrb	r2, [r2, #0]
20000fb0:	b252      	sxtb	r2, r2
20000fb2:	43d2      	mvns	r2, r2
20000fb4:	b252      	sxtb	r2, r2
20000fb6:	2104      	movs	r1, #4
20000fb8:	430a      	orrs	r2, r1
20000fba:	b252      	sxtb	r2, r2
20000fbc:	4013      	ands	r3, r2
20000fbe:	b25a      	sxtb	r2, r3
20000fc0:	4b03      	ldr	r3, [pc, #12]	; (20000fd0 <ascii_ctrl_bit_clear+0x38>)
20000fc2:	b2d2      	uxtb	r2, r2
20000fc4:	701a      	strb	r2, [r3, #0]
    
}
20000fc6:	46c0      	nop			; (mov r8, r8)
20000fc8:	46bd      	mov	sp, r7
20000fca:	b002      	add	sp, #8
20000fcc:	bd80      	pop	{r7, pc}
20000fce:	46c0      	nop			; (mov r8, r8)
20000fd0:	40021014 	andmi	r1, r2, r4, lsl r0

20000fd4 <ascii_write_cmd>:

void ascii_write_cmd(unsigned char command){
20000fd4:	b580      	push	{r7, lr}
20000fd6:	b082      	sub	sp, #8
20000fd8:	af00      	add	r7, sp, #0
20000fda:	0002      	movs	r2, r0
20000fdc:	1dfb      	adds	r3, r7, #7
20000fde:	701a      	strb	r2, [r3, #0]
    ascii_ctrl_bit_clear(B_RS);
20000fe0:	2001      	movs	r0, #1
20000fe2:	f7ff ffd9 	bl	20000f98 <ascii_ctrl_bit_clear>
    ascii_ctrl_bit_clear(B_RW);
20000fe6:	2002      	movs	r0, #2
20000fe8:	f7ff ffd6 	bl	20000f98 <ascii_ctrl_bit_clear>
    ascii_write_controller(command);
20000fec:	1dfb      	adds	r3, r7, #7
20000fee:	781b      	ldrb	r3, [r3, #0]
20000ff0:	0018      	movs	r0, r3
20000ff2:	f000 f819 	bl	20001028 <ascii_write_controller>
}
20000ff6:	46c0      	nop			; (mov r8, r8)
20000ff8:	46bd      	mov	sp, r7
20000ffa:	b002      	add	sp, #8
20000ffc:	bd80      	pop	{r7, pc}

20000ffe <ascii_write_data>:

void ascii_write_data(unsigned char data){
20000ffe:	b580      	push	{r7, lr}
20001000:	b082      	sub	sp, #8
20001002:	af00      	add	r7, sp, #0
20001004:	0002      	movs	r2, r0
20001006:	1dfb      	adds	r3, r7, #7
20001008:	701a      	strb	r2, [r3, #0]
    ascii_ctrl_bit_set(B_RS);
2000100a:	2001      	movs	r0, #1
2000100c:	f7ff ffab 	bl	20000f66 <ascii_ctrl_bit_set>
    ascii_ctrl_bit_clear(B_RW);
20001010:	2002      	movs	r0, #2
20001012:	f7ff ffc1 	bl	20000f98 <ascii_ctrl_bit_clear>
    ascii_write_controller(data);
20001016:	1dfb      	adds	r3, r7, #7
20001018:	781b      	ldrb	r3, [r3, #0]
2000101a:	0018      	movs	r0, r3
2000101c:	f000 f804 	bl	20001028 <ascii_write_controller>
}
20001020:	46c0      	nop			; (mov r8, r8)
20001022:	46bd      	mov	sp, r7
20001024:	b002      	add	sp, #8
20001026:	bd80      	pop	{r7, pc}

20001028 <ascii_write_controller>:

void ascii_write_controller(unsigned char byte){
20001028:	b580      	push	{r7, lr}
2000102a:	b082      	sub	sp, #8
2000102c:	af00      	add	r7, sp, #0
2000102e:	0002      	movs	r2, r0
20001030:	1dfb      	adds	r3, r7, #7
20001032:	701a      	strb	r2, [r3, #0]
    ascii_ctrl_bit_set(B_E);
20001034:	2040      	movs	r0, #64	; 0x40
20001036:	f7ff ff96 	bl	20000f66 <ascii_ctrl_bit_set>
    *GPIO_E_ODR_HIGH = byte;
2000103a:	4a06      	ldr	r2, [pc, #24]	; (20001054 <ascii_write_controller+0x2c>)
2000103c:	1dfb      	adds	r3, r7, #7
2000103e:	781b      	ldrb	r3, [r3, #0]
20001040:	7013      	strb	r3, [r2, #0]
    delay_250ns();
20001042:	f000 f8f7 	bl	20001234 <delay_250ns>
    ascii_ctrl_bit_clear(B_E);
20001046:	2040      	movs	r0, #64	; 0x40
20001048:	f7ff ffa6 	bl	20000f98 <ascii_ctrl_bit_clear>
}
2000104c:	46c0      	nop			; (mov r8, r8)
2000104e:	46bd      	mov	sp, r7
20001050:	b002      	add	sp, #8
20001052:	bd80      	pop	{r7, pc}
20001054:	40021015 	andmi	r1, r2, r5, lsl r0

20001058 <ascii_read_controller>:

unsigned char ascii_read_controller(void){
20001058:	b580      	push	{r7, lr}
2000105a:	b082      	sub	sp, #8
2000105c:	af00      	add	r7, sp, #0
    ascii_ctrl_bit_set(B_E);
2000105e:	2040      	movs	r0, #64	; 0x40
20001060:	f7ff ff81 	bl	20000f66 <ascii_ctrl_bit_set>
    delay_250ns();
20001064:	f000 f8e6 	bl	20001234 <delay_250ns>
    delay_250ns();
20001068:	f000 f8e4 	bl	20001234 <delay_250ns>
    char retVal = *GPIO_E_IDR_HIGH;
2000106c:	4a06      	ldr	r2, [pc, #24]	; (20001088 <ascii_read_controller+0x30>)
2000106e:	1dfb      	adds	r3, r7, #7
20001070:	7812      	ldrb	r2, [r2, #0]
20001072:	701a      	strb	r2, [r3, #0]
    ascii_ctrl_bit_clear(B_E);
20001074:	2040      	movs	r0, #64	; 0x40
20001076:	f7ff ff8f 	bl	20000f98 <ascii_ctrl_bit_clear>
    return retVal;
2000107a:	1dfb      	adds	r3, r7, #7
2000107c:	781b      	ldrb	r3, [r3, #0]
}
2000107e:	0018      	movs	r0, r3
20001080:	46bd      	mov	sp, r7
20001082:	b002      	add	sp, #8
20001084:	bd80      	pop	{r7, pc}
20001086:	46c0      	nop			; (mov r8, r8)
20001088:	40021011 	andmi	r1, r2, r1, lsl r0

2000108c <ascii_read_status>:

unsigned char ascii_read_status(void){
2000108c:	b590      	push	{r4, r7, lr}
2000108e:	b083      	sub	sp, #12
20001090:	af00      	add	r7, sp, #0
    *(GPIO_E_MODER+0x02) = 0x0000;
20001092:	4b0b      	ldr	r3, [pc, #44]	; (200010c0 <ascii_read_status+0x34>)
20001094:	2200      	movs	r2, #0
20001096:	601a      	str	r2, [r3, #0]
    ascii_ctrl_bit_clear(B_RS);
20001098:	2001      	movs	r0, #1
2000109a:	f7ff ff7d 	bl	20000f98 <ascii_ctrl_bit_clear>
    ascii_ctrl_bit_set(B_RW);
2000109e:	2002      	movs	r0, #2
200010a0:	f7ff ff61 	bl	20000f66 <ascii_ctrl_bit_set>
    char retStat = ascii_read_controller(); 
200010a4:	1dfc      	adds	r4, r7, #7
200010a6:	f7ff ffd7 	bl	20001058 <ascii_read_controller>
200010aa:	0003      	movs	r3, r0
200010ac:	7023      	strb	r3, [r4, #0]
    *(GPIO_E_MODER+0x02) = 0x5555;
200010ae:	4b04      	ldr	r3, [pc, #16]	; (200010c0 <ascii_read_status+0x34>)
200010b0:	4a04      	ldr	r2, [pc, #16]	; (200010c4 <ascii_read_status+0x38>)
200010b2:	601a      	str	r2, [r3, #0]
    return retStat;
200010b4:	1dfb      	adds	r3, r7, #7
200010b6:	781b      	ldrb	r3, [r3, #0]
}
200010b8:	0018      	movs	r0, r3
200010ba:	46bd      	mov	sp, r7
200010bc:	b003      	add	sp, #12
200010be:	bd90      	pop	{r4, r7, pc}
200010c0:	40021008 	andmi	r1, r2, r8
200010c4:	00005555 	andeq	r5, r0, r5, asr r5

200010c8 <ascii_read_data>:

unsigned char ascii_read_data(void){
200010c8:	b590      	push	{r4, r7, lr}
200010ca:	b083      	sub	sp, #12
200010cc:	af00      	add	r7, sp, #0
    *(GPIO_E_MODER+0x02) = 0x0000;
200010ce:	4b0b      	ldr	r3, [pc, #44]	; (200010fc <ascii_read_data+0x34>)
200010d0:	2200      	movs	r2, #0
200010d2:	601a      	str	r2, [r3, #0]
    ascii_ctrl_bit_set(B_RS);
200010d4:	2001      	movs	r0, #1
200010d6:	f7ff ff46 	bl	20000f66 <ascii_ctrl_bit_set>
    ascii_ctrl_bit_set(B_RW);
200010da:	2002      	movs	r0, #2
200010dc:	f7ff ff43 	bl	20000f66 <ascii_ctrl_bit_set>
    char retData = ascii_read_controller();
200010e0:	1dfc      	adds	r4, r7, #7
200010e2:	f7ff ffb9 	bl	20001058 <ascii_read_controller>
200010e6:	0003      	movs	r3, r0
200010e8:	7023      	strb	r3, [r4, #0]
    *(GPIO_E_MODER+0x02) = 0x5555;
200010ea:	4b04      	ldr	r3, [pc, #16]	; (200010fc <ascii_read_data+0x34>)
200010ec:	4a04      	ldr	r2, [pc, #16]	; (20001100 <ascii_read_data+0x38>)
200010ee:	601a      	str	r2, [r3, #0]
    return retData;
200010f0:	1dfb      	adds	r3, r7, #7
200010f2:	781b      	ldrb	r3, [r3, #0]
}
200010f4:	0018      	movs	r0, r3
200010f6:	46bd      	mov	sp, r7
200010f8:	b003      	add	sp, #12
200010fa:	bd90      	pop	{r4, r7, pc}
200010fc:	40021008 	andmi	r1, r2, r8
20001100:	00005555 	andeq	r5, r0, r5, asr r5

20001104 <clear_display>:

void clear_display(){
20001104:	b580      	push	{r7, lr}
20001106:	af00      	add	r7, sp, #0
    while((ascii_read_status() & 0x80) == 0x80){}
20001108:	46c0      	nop			; (mov r8, r8)
2000110a:	f7ff ffbf 	bl	2000108c <ascii_read_status>
2000110e:	0003      	movs	r3, r0
20001110:	001a      	movs	r2, r3
20001112:	2380      	movs	r3, #128	; 0x80
20001114:	4013      	ands	r3, r2
20001116:	2b80      	cmp	r3, #128	; 0x80
20001118:	d0f7      	beq.n	2000110a <clear_display+0x6>
    delay_mikro(8);
2000111a:	2008      	movs	r0, #8
2000111c:	f000 f8b5 	bl	2000128a <delay_mikro>
    ascii_write_cmd(1); /*clear display*/
20001120:	2001      	movs	r0, #1
20001122:	f7ff ff57 	bl	20000fd4 <ascii_write_cmd>
    delay_milli(2);
20001126:	2002      	movs	r0, #2
20001128:	f000 f8c6 	bl	200012b8 <delay_milli>
}
2000112c:	46c0      	nop			; (mov r8, r8)
2000112e:	46bd      	mov	sp, r7
20001130:	bd80      	pop	{r7, pc}

20001132 <funtion_set>:

void funtion_set(){
20001132:	b580      	push	{r7, lr}
20001134:	af00      	add	r7, sp, #0
    while((ascii_read_status() & 0x80) == 0x80){}
20001136:	46c0      	nop			; (mov r8, r8)
20001138:	f7ff ffa8 	bl	2000108c <ascii_read_status>
2000113c:	0003      	movs	r3, r0
2000113e:	001a      	movs	r2, r3
20001140:	2380      	movs	r3, #128	; 0x80
20001142:	4013      	ands	r3, r2
20001144:	2b80      	cmp	r3, #128	; 0x80
20001146:	d0f7      	beq.n	20001138 <funtion_set+0x6>
    delay_mikro(8);
20001148:	2008      	movs	r0, #8
2000114a:	f000 f89e 	bl	2000128a <delay_mikro>
    ascii_write_cmd(0x38); //0b00111000
2000114e:	2038      	movs	r0, #56	; 0x38
20001150:	f7ff ff40 	bl	20000fd4 <ascii_write_cmd>
    delay_mikro(40);
20001154:	2028      	movs	r0, #40	; 0x28
20001156:	f000 f898 	bl	2000128a <delay_mikro>
}
2000115a:	46c0      	nop			; (mov r8, r8)
2000115c:	46bd      	mov	sp, r7
2000115e:	bd80      	pop	{r7, pc}

20001160 <display_control>:

void display_control(){
20001160:	b580      	push	{r7, lr}
20001162:	af00      	add	r7, sp, #0
    while((ascii_read_status() & 0x80) == 0x80){}
20001164:	46c0      	nop			; (mov r8, r8)
20001166:	f7ff ff91 	bl	2000108c <ascii_read_status>
2000116a:	0003      	movs	r3, r0
2000116c:	001a      	movs	r2, r3
2000116e:	2380      	movs	r3, #128	; 0x80
20001170:	4013      	ands	r3, r2
20001172:	2b80      	cmp	r3, #128	; 0x80
20001174:	d0f7      	beq.n	20001166 <display_control+0x6>
    delay_mikro(8);
20001176:	2008      	movs	r0, #8
20001178:	f000 f887 	bl	2000128a <delay_mikro>
    ascii_write_cmd(0xE);
2000117c:	200e      	movs	r0, #14
2000117e:	f7ff ff29 	bl	20000fd4 <ascii_write_cmd>
    delay_mikro(40);
20001182:	2028      	movs	r0, #40	; 0x28
20001184:	f000 f881 	bl	2000128a <delay_mikro>
}
20001188:	46c0      	nop			; (mov r8, r8)
2000118a:	46bd      	mov	sp, r7
2000118c:	bd80      	pop	{r7, pc}

2000118e <entry_mode_set>:

void entry_mode_set(){
2000118e:	b580      	push	{r7, lr}
20001190:	af00      	add	r7, sp, #0
    while((ascii_read_status() & 0x80) == 0x80){}
20001192:	46c0      	nop			; (mov r8, r8)
20001194:	f7ff ff7a 	bl	2000108c <ascii_read_status>
20001198:	0003      	movs	r3, r0
2000119a:	001a      	movs	r2, r3
2000119c:	2380      	movs	r3, #128	; 0x80
2000119e:	4013      	ands	r3, r2
200011a0:	2b80      	cmp	r3, #128	; 0x80
200011a2:	d0f7      	beq.n	20001194 <entry_mode_set+0x6>
    delay_mikro(8);
200011a4:	2008      	movs	r0, #8
200011a6:	f000 f870 	bl	2000128a <delay_mikro>
    ascii_write_cmd(6);
200011aa:	2006      	movs	r0, #6
200011ac:	f7ff ff12 	bl	20000fd4 <ascii_write_cmd>
    delay_mikro(40);
200011b0:	2028      	movs	r0, #40	; 0x28
200011b2:	f000 f86a 	bl	2000128a <delay_mikro>
}
200011b6:	46c0      	nop			; (mov r8, r8)
200011b8:	46bd      	mov	sp, r7
200011ba:	bd80      	pop	{r7, pc}

200011bc <ascii_write_char>:

void ascii_write_char(unsigned char c){
200011bc:	b580      	push	{r7, lr}
200011be:	b082      	sub	sp, #8
200011c0:	af00      	add	r7, sp, #0
200011c2:	0002      	movs	r2, r0
200011c4:	1dfb      	adds	r3, r7, #7
200011c6:	701a      	strb	r2, [r3, #0]
    //while((ascii_read_status() & 0x80) == 0x80){} //Kommentera bort om det ska fungera...
    delay_mikro(8);
200011c8:	2008      	movs	r0, #8
200011ca:	f000 f85e 	bl	2000128a <delay_mikro>
    ascii_write_data(c);
200011ce:	1dfb      	adds	r3, r7, #7
200011d0:	781b      	ldrb	r3, [r3, #0]
200011d2:	0018      	movs	r0, r3
200011d4:	f7ff ff13 	bl	20000ffe <ascii_write_data>
    delay_mikro(45);
200011d8:	202d      	movs	r0, #45	; 0x2d
200011da:	f000 f856 	bl	2000128a <delay_mikro>
}
200011de:	46c0      	nop			; (mov r8, r8)
200011e0:	46bd      	mov	sp, r7
200011e2:	b002      	add	sp, #8
200011e4:	bd80      	pop	{r7, pc}

200011e6 <ascii_gotoxy>:

void ascii_gotoxy(int x, int y){ /**/
200011e6:	b580      	push	{r7, lr}
200011e8:	b084      	sub	sp, #16
200011ea:	af00      	add	r7, sp, #0
200011ec:	6078      	str	r0, [r7, #4]
200011ee:	6039      	str	r1, [r7, #0]
    unsigned char address;
    if(y!=1)
200011f0:	683b      	ldr	r3, [r7, #0]
200011f2:	2b01      	cmp	r3, #1
200011f4:	d006      	beq.n	20001204 <ascii_gotoxy+0x1e>
        address = 0x40 + (x-1);
200011f6:	687b      	ldr	r3, [r7, #4]
200011f8:	b2da      	uxtb	r2, r3
200011fa:	230f      	movs	r3, #15
200011fc:	18fb      	adds	r3, r7, r3
200011fe:	323f      	adds	r2, #63	; 0x3f
20001200:	701a      	strb	r2, [r3, #0]
20001202:	e005      	b.n	20001210 <ascii_gotoxy+0x2a>
    else address=x-1;
20001204:	687b      	ldr	r3, [r7, #4]
20001206:	b2da      	uxtb	r2, r3
20001208:	230f      	movs	r3, #15
2000120a:	18fb      	adds	r3, r7, r3
2000120c:	3a01      	subs	r2, #1
2000120e:	701a      	strb	r2, [r3, #0]
    
    ascii_write_cmd( 0x80 | address);
20001210:	230f      	movs	r3, #15
20001212:	18fb      	adds	r3, r7, r3
20001214:	781b      	ldrb	r3, [r3, #0]
20001216:	2280      	movs	r2, #128	; 0x80
20001218:	4252      	negs	r2, r2
2000121a:	4313      	orrs	r3, r2
2000121c:	b2db      	uxtb	r3, r3
2000121e:	0018      	movs	r0, r3
20001220:	f7ff fed8 	bl	20000fd4 <ascii_write_cmd>
    delay_mikro( 45 );
20001224:	202d      	movs	r0, #45	; 0x2d
20001226:	f000 f830 	bl	2000128a <delay_mikro>
2000122a:	46c0      	nop			; (mov r8, r8)
2000122c:	46bd      	mov	sp, r7
2000122e:	b004      	add	sp, #16
20001230:	bd80      	pop	{r7, pc}
20001232:	46c0      	nop			; (mov r8, r8)

20001234 <delay_250ns>:
#include <defines.h>
#include <delay.h>


void delay_250ns ( void){
20001234:	b580      	push	{r7, lr}
20001236:	af00      	add	r7, sp, #0
    #ifdef SIMULATOR
        return;
    #endif
    /* SystemCoreClock = 168000000 */ 
    *STK_CTRL = 0;
20001238:	4b0c      	ldr	r3, [pc, #48]	; (2000126c <delay_250ns+0x38>)
2000123a:	2200      	movs	r2, #0
2000123c:	601a      	str	r2, [r3, #0]
    *STK_LOAD = ( (168/4) -1 );
2000123e:	4b0c      	ldr	r3, [pc, #48]	; (20001270 <delay_250ns+0x3c>)
20001240:	2229      	movs	r2, #41	; 0x29
20001242:	601a      	str	r2, [r3, #0]
    *STK_VAL = 0;
20001244:	4b0b      	ldr	r3, [pc, #44]	; (20001274 <delay_250ns+0x40>)
20001246:	2200      	movs	r2, #0
20001248:	601a      	str	r2, [r3, #0]
    *STK_CTRL = 5;
2000124a:	4b08      	ldr	r3, [pc, #32]	; (2000126c <delay_250ns+0x38>)
2000124c:	2205      	movs	r2, #5
2000124e:	601a      	str	r2, [r3, #0]
    while( (*STK_CTRL & 0x10000 )== 0 ) {} 
20001250:	46c0      	nop			; (mov r8, r8)
20001252:	4b06      	ldr	r3, [pc, #24]	; (2000126c <delay_250ns+0x38>)
20001254:	681a      	ldr	r2, [r3, #0]
20001256:	2380      	movs	r3, #128	; 0x80
20001258:	025b      	lsls	r3, r3, #9
2000125a:	4013      	ands	r3, r2
2000125c:	d0f9      	beq.n	20001252 <delay_250ns+0x1e>
    *STK_CTRL = 0;
2000125e:	4b03      	ldr	r3, [pc, #12]	; (2000126c <delay_250ns+0x38>)
20001260:	2200      	movs	r2, #0
20001262:	601a      	str	r2, [r3, #0]
}
20001264:	46c0      	nop			; (mov r8, r8)
20001266:	46bd      	mov	sp, r7
20001268:	bd80      	pop	{r7, pc}
2000126a:	46c0      	nop			; (mov r8, r8)
2000126c:	e000e010 	and	lr, r0, r0, lsl r0
20001270:	e000e014 	and	lr, r0, r4, lsl r0
20001274:	e000e018 	and	lr, r0, r8, lsl r0

20001278 <delay_500ns>:

void delay_500ns(void){
20001278:	b580      	push	{r7, lr}
2000127a:	af00      	add	r7, sp, #0
    #ifdef SIMULATOR
        return;
    #endif
    delay_250ns();
2000127c:	f7ff ffda 	bl	20001234 <delay_250ns>
    delay_250ns();
20001280:	f7ff ffd8 	bl	20001234 <delay_250ns>
}
20001284:	46c0      	nop			; (mov r8, r8)
20001286:	46bd      	mov	sp, r7
20001288:	bd80      	pop	{r7, pc}

2000128a <delay_mikro>:

void delay_mikro(unsigned int us){
2000128a:	b580      	push	{r7, lr}
2000128c:	b082      	sub	sp, #8
2000128e:	af00      	add	r7, sp, #0
20001290:	6078      	str	r0, [r7, #4]
    #ifdef SIMULATOR
        return;
    #endif
    while(us--){
20001292:	e007      	b.n	200012a4 <delay_mikro+0x1a>
        delay_250ns();
20001294:	f7ff ffce 	bl	20001234 <delay_250ns>
        delay_250ns();
20001298:	f7ff ffcc 	bl	20001234 <delay_250ns>
        delay_250ns();
2000129c:	f7ff ffca 	bl	20001234 <delay_250ns>
        delay_250ns();
200012a0:	f7ff ffc8 	bl	20001234 <delay_250ns>
    while(us--){
200012a4:	687b      	ldr	r3, [r7, #4]
200012a6:	1e5a      	subs	r2, r3, #1
200012a8:	607a      	str	r2, [r7, #4]
200012aa:	2b00      	cmp	r3, #0
200012ac:	d1f2      	bne.n	20001294 <delay_mikro+0xa>
    }
}
200012ae:	46c0      	nop			; (mov r8, r8)
200012b0:	46c0      	nop			; (mov r8, r8)
200012b2:	46bd      	mov	sp, r7
200012b4:	b002      	add	sp, #8
200012b6:	bd80      	pop	{r7, pc}

200012b8 <delay_milli>:

void delay_milli(unsigned int ms){
200012b8:	b580      	push	{r7, lr}
200012ba:	b082      	sub	sp, #8
200012bc:	af00      	add	r7, sp, #0
200012be:	6078      	str	r0, [r7, #4]
    #ifdef SIMULATOR
        ms = ms / 1000;
        ms++;
    #endif
    
    while(ms--){
200012c0:	e004      	b.n	200012cc <delay_milli+0x14>
        delay_mikro(1000);
200012c2:	23fa      	movs	r3, #250	; 0xfa
200012c4:	009b      	lsls	r3, r3, #2
200012c6:	0018      	movs	r0, r3
200012c8:	f7ff ffdf 	bl	2000128a <delay_mikro>
    while(ms--){
200012cc:	687b      	ldr	r3, [r7, #4]
200012ce:	1e5a      	subs	r2, r3, #1
200012d0:	607a      	str	r2, [r7, #4]
200012d2:	2b00      	cmp	r3, #0
200012d4:	d1f5      	bne.n	200012c2 <delay_milli+0xa>
    }
200012d6:	46c0      	nop			; (mov r8, r8)
200012d8:	46c0      	nop			; (mov r8, r8)
200012da:	46bd      	mov	sp, r7
200012dc:	b002      	add	sp, #8
200012de:	bd80      	pop	{r7, pc}

200012e0 <activate_row>:
#include <defines.h>
#include <keyb.h>

void activate_row(int i){
200012e0:	b580      	push	{r7, lr}
200012e2:	b082      	sub	sp, #8
200012e4:	af00      	add	r7, sp, #0
200012e6:	6078      	str	r0, [r7, #4]
    *GPIO_D_ODR_HIGH = 1 << (i+4);
200012e8:	687b      	ldr	r3, [r7, #4]
200012ea:	3304      	adds	r3, #4
200012ec:	2201      	movs	r2, #1
200012ee:	409a      	lsls	r2, r3
200012f0:	4b03      	ldr	r3, [pc, #12]	; (20001300 <activate_row+0x20>)
200012f2:	b2d2      	uxtb	r2, r2
200012f4:	701a      	strb	r2, [r3, #0]
}
200012f6:	46c0      	nop			; (mov r8, r8)
200012f8:	46bd      	mov	sp, r7
200012fa:	b002      	add	sp, #8
200012fc:	bd80      	pop	{r7, pc}
200012fe:	46c0      	nop			; (mov r8, r8)
20001300:	40020c15 	andmi	r0, r2, r5, lsl ip

20001304 <read_coloumn>:

int read_coloumn(){
20001304:	b580      	push	{r7, lr}
20001306:	b082      	sub	sp, #8
20001308:	af00      	add	r7, sp, #0
    int j; 
    char input = *GPIO_D_IDR_HIGH;
2000130a:	4a0e      	ldr	r2, [pc, #56]	; (20001344 <read_coloumn+0x40>)
2000130c:	1cfb      	adds	r3, r7, #3
2000130e:	7812      	ldrb	r2, [r2, #0]
20001310:	701a      	strb	r2, [r3, #0]
    for(j = 0; j<4 ; j++){
20001312:	2300      	movs	r3, #0
20001314:	607b      	str	r3, [r7, #4]
20001316:	e00c      	b.n	20001332 <read_coloumn+0x2e>
        if (input&(1<<j)){
20001318:	1cfb      	adds	r3, r7, #3
2000131a:	781a      	ldrb	r2, [r3, #0]
2000131c:	687b      	ldr	r3, [r7, #4]
2000131e:	411a      	asrs	r2, r3
20001320:	0013      	movs	r3, r2
20001322:	2201      	movs	r2, #1
20001324:	4013      	ands	r3, r2
20001326:	d001      	beq.n	2000132c <read_coloumn+0x28>
            return j;
20001328:	687b      	ldr	r3, [r7, #4]
2000132a:	e007      	b.n	2000133c <read_coloumn+0x38>
    for(j = 0; j<4 ; j++){
2000132c:	687b      	ldr	r3, [r7, #4]
2000132e:	3301      	adds	r3, #1
20001330:	607b      	str	r3, [r7, #4]
20001332:	687b      	ldr	r3, [r7, #4]
20001334:	2b03      	cmp	r3, #3
20001336:	ddef      	ble.n	20001318 <read_coloumn+0x14>
        }
    }
    return -1;
20001338:	2301      	movs	r3, #1
2000133a:	425b      	negs	r3, r3
}
2000133c:	0018      	movs	r0, r3
2000133e:	46bd      	mov	sp, r7
20001340:	b002      	add	sp, #8
20001342:	bd80      	pop	{r7, pc}
20001344:	40020c11 	andmi	r0, r2, r1, lsl ip

20001348 <keyb>:

/*rader in, kolumner ut*/
unsigned char keyb(void){
20001348:	b590      	push	{r4, r7, lr}
2000134a:	b08b      	sub	sp, #44	; 0x2c
2000134c:	af00      	add	r7, sp, #0
    unsigned char key_value[] = {0x06,0x5B,0x4F,0x77,0x66,0x6D,0x7D,0x7C,0x07,0x7F,0x6F,0x39,0x79,0x3F,0x71,0xBF};
2000134e:	2310      	movs	r3, #16
20001350:	18fb      	adds	r3, r7, r3
20001352:	4a15      	ldr	r2, [pc, #84]	; (200013a8 <keyb+0x60>)
20001354:	ca13      	ldmia	r2!, {r0, r1, r4}
20001356:	c313      	stmia	r3!, {r0, r1, r4}
20001358:	6812      	ldr	r2, [r2, #0]
2000135a:	601a      	str	r2, [r3, #0]
    unsigned char keyVal[] = {1,2,3,0xA,4,5,6,0xB,7,8,9,0xC,0xE,0,0xF,0xD};
2000135c:	003b      	movs	r3, r7
2000135e:	4a13      	ldr	r2, [pc, #76]	; (200013ac <keyb+0x64>)
20001360:	ca13      	ldmia	r2!, {r0, r1, r4}
20001362:	c313      	stmia	r3!, {r0, r1, r4}
20001364:	6812      	ldr	r2, [r2, #0]
20001366:	601a      	str	r2, [r3, #0]
    
        
    int row, coloumn;
    for (row = 0; row < 4; row++){
20001368:	2300      	movs	r3, #0
2000136a:	627b      	str	r3, [r7, #36]	; 0x24
2000136c:	e014      	b.n	20001398 <keyb+0x50>
        activate_row(row);
2000136e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001370:	0018      	movs	r0, r3
20001372:	f7ff ffb5 	bl	200012e0 <activate_row>
        coloumn = read_coloumn();
20001376:	f7ff ffc5 	bl	20001304 <read_coloumn>
2000137a:	0003      	movs	r3, r0
2000137c:	623b      	str	r3, [r7, #32]
        if (coloumn != -1){
2000137e:	6a3b      	ldr	r3, [r7, #32]
20001380:	3301      	adds	r3, #1
20001382:	d006      	beq.n	20001392 <keyb+0x4a>
            return keyVal[coloumn+row*4];
20001384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001386:	009a      	lsls	r2, r3, #2
20001388:	6a3b      	ldr	r3, [r7, #32]
2000138a:	18d3      	adds	r3, r2, r3
2000138c:	003a      	movs	r2, r7
2000138e:	5cd3      	ldrb	r3, [r2, r3]
20001390:	e006      	b.n	200013a0 <keyb+0x58>
    for (row = 0; row < 4; row++){
20001392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001394:	3301      	adds	r3, #1
20001396:	627b      	str	r3, [r7, #36]	; 0x24
20001398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2000139a:	2b03      	cmp	r3, #3
2000139c:	dde7      	ble.n	2000136e <keyb+0x26>
        }
    }
    return 0x00;
2000139e:	2300      	movs	r3, #0
}
200013a0:	0018      	movs	r0, r3
200013a2:	46bd      	mov	sp, r7
200013a4:	b00b      	add	sp, #44	; 0x2c
200013a6:	bd90      	pop	{r4, r7, pc}
200013a8:	200038c0 	andcs	r3, r0, r0, asr #17
200013ac:	200038d0 	ldrdcs	r3, [r0], -r0

200013b0 <out7seg>:

void out7seg(unsigned char c){
200013b0:	b580      	push	{r7, lr}
200013b2:	b082      	sub	sp, #8
200013b4:	af00      	add	r7, sp, #0
200013b6:	0002      	movs	r2, r0
200013b8:	1dfb      	adds	r3, r7, #7
200013ba:	701a      	strb	r2, [r3, #0]
    
    *GPIO_D_ODR_LOW = c; //0x00 -> 0xFF
200013bc:	4a03      	ldr	r2, [pc, #12]	; (200013cc <out7seg+0x1c>)
200013be:	1dfb      	adds	r3, r7, #7
200013c0:	781b      	ldrb	r3, [r3, #0]
200013c2:	7013      	strb	r3, [r2, #0]
    
200013c4:	46c0      	nop			; (mov r8, r8)
200013c6:	46bd      	mov	sp, r7
200013c8:	b002      	add	sp, #8
200013ca:	bd80      	pop	{r7, pc}
200013cc:	40020c14 	andmi	r0, r2, r4, lsl ip

200013d0 <__divsi3>:
200013d0:	4603      	mov	r3, r0
200013d2:	430b      	orrs	r3, r1
200013d4:	d47f      	bmi.n	200014d6 <__divsi3+0x106>
200013d6:	2200      	movs	r2, #0
200013d8:	0843      	lsrs	r3, r0, #1
200013da:	428b      	cmp	r3, r1
200013dc:	d374      	bcc.n	200014c8 <__divsi3+0xf8>
200013de:	0903      	lsrs	r3, r0, #4
200013e0:	428b      	cmp	r3, r1
200013e2:	d35f      	bcc.n	200014a4 <__divsi3+0xd4>
200013e4:	0a03      	lsrs	r3, r0, #8
200013e6:	428b      	cmp	r3, r1
200013e8:	d344      	bcc.n	20001474 <__divsi3+0xa4>
200013ea:	0b03      	lsrs	r3, r0, #12
200013ec:	428b      	cmp	r3, r1
200013ee:	d328      	bcc.n	20001442 <__divsi3+0x72>
200013f0:	0c03      	lsrs	r3, r0, #16
200013f2:	428b      	cmp	r3, r1
200013f4:	d30d      	bcc.n	20001412 <__divsi3+0x42>
200013f6:	22ff      	movs	r2, #255	; 0xff
200013f8:	0209      	lsls	r1, r1, #8
200013fa:	ba12      	rev	r2, r2
200013fc:	0c03      	lsrs	r3, r0, #16
200013fe:	428b      	cmp	r3, r1
20001400:	d302      	bcc.n	20001408 <__divsi3+0x38>
20001402:	1212      	asrs	r2, r2, #8
20001404:	0209      	lsls	r1, r1, #8
20001406:	d065      	beq.n	200014d4 <__divsi3+0x104>
20001408:	0b03      	lsrs	r3, r0, #12
2000140a:	428b      	cmp	r3, r1
2000140c:	d319      	bcc.n	20001442 <__divsi3+0x72>
2000140e:	e000      	b.n	20001412 <__divsi3+0x42>
20001410:	0a09      	lsrs	r1, r1, #8
20001412:	0bc3      	lsrs	r3, r0, #15
20001414:	428b      	cmp	r3, r1
20001416:	d301      	bcc.n	2000141c <__divsi3+0x4c>
20001418:	03cb      	lsls	r3, r1, #15
2000141a:	1ac0      	subs	r0, r0, r3
2000141c:	4152      	adcs	r2, r2
2000141e:	0b83      	lsrs	r3, r0, #14
20001420:	428b      	cmp	r3, r1
20001422:	d301      	bcc.n	20001428 <__divsi3+0x58>
20001424:	038b      	lsls	r3, r1, #14
20001426:	1ac0      	subs	r0, r0, r3
20001428:	4152      	adcs	r2, r2
2000142a:	0b43      	lsrs	r3, r0, #13
2000142c:	428b      	cmp	r3, r1
2000142e:	d301      	bcc.n	20001434 <__divsi3+0x64>
20001430:	034b      	lsls	r3, r1, #13
20001432:	1ac0      	subs	r0, r0, r3
20001434:	4152      	adcs	r2, r2
20001436:	0b03      	lsrs	r3, r0, #12
20001438:	428b      	cmp	r3, r1
2000143a:	d301      	bcc.n	20001440 <__divsi3+0x70>
2000143c:	030b      	lsls	r3, r1, #12
2000143e:	1ac0      	subs	r0, r0, r3
20001440:	4152      	adcs	r2, r2
20001442:	0ac3      	lsrs	r3, r0, #11
20001444:	428b      	cmp	r3, r1
20001446:	d301      	bcc.n	2000144c <__divsi3+0x7c>
20001448:	02cb      	lsls	r3, r1, #11
2000144a:	1ac0      	subs	r0, r0, r3
2000144c:	4152      	adcs	r2, r2
2000144e:	0a83      	lsrs	r3, r0, #10
20001450:	428b      	cmp	r3, r1
20001452:	d301      	bcc.n	20001458 <__divsi3+0x88>
20001454:	028b      	lsls	r3, r1, #10
20001456:	1ac0      	subs	r0, r0, r3
20001458:	4152      	adcs	r2, r2
2000145a:	0a43      	lsrs	r3, r0, #9
2000145c:	428b      	cmp	r3, r1
2000145e:	d301      	bcc.n	20001464 <__divsi3+0x94>
20001460:	024b      	lsls	r3, r1, #9
20001462:	1ac0      	subs	r0, r0, r3
20001464:	4152      	adcs	r2, r2
20001466:	0a03      	lsrs	r3, r0, #8
20001468:	428b      	cmp	r3, r1
2000146a:	d301      	bcc.n	20001470 <__divsi3+0xa0>
2000146c:	020b      	lsls	r3, r1, #8
2000146e:	1ac0      	subs	r0, r0, r3
20001470:	4152      	adcs	r2, r2
20001472:	d2cd      	bcs.n	20001410 <__divsi3+0x40>
20001474:	09c3      	lsrs	r3, r0, #7
20001476:	428b      	cmp	r3, r1
20001478:	d301      	bcc.n	2000147e <__divsi3+0xae>
2000147a:	01cb      	lsls	r3, r1, #7
2000147c:	1ac0      	subs	r0, r0, r3
2000147e:	4152      	adcs	r2, r2
20001480:	0983      	lsrs	r3, r0, #6
20001482:	428b      	cmp	r3, r1
20001484:	d301      	bcc.n	2000148a <__divsi3+0xba>
20001486:	018b      	lsls	r3, r1, #6
20001488:	1ac0      	subs	r0, r0, r3
2000148a:	4152      	adcs	r2, r2
2000148c:	0943      	lsrs	r3, r0, #5
2000148e:	428b      	cmp	r3, r1
20001490:	d301      	bcc.n	20001496 <__divsi3+0xc6>
20001492:	014b      	lsls	r3, r1, #5
20001494:	1ac0      	subs	r0, r0, r3
20001496:	4152      	adcs	r2, r2
20001498:	0903      	lsrs	r3, r0, #4
2000149a:	428b      	cmp	r3, r1
2000149c:	d301      	bcc.n	200014a2 <__divsi3+0xd2>
2000149e:	010b      	lsls	r3, r1, #4
200014a0:	1ac0      	subs	r0, r0, r3
200014a2:	4152      	adcs	r2, r2
200014a4:	08c3      	lsrs	r3, r0, #3
200014a6:	428b      	cmp	r3, r1
200014a8:	d301      	bcc.n	200014ae <__divsi3+0xde>
200014aa:	00cb      	lsls	r3, r1, #3
200014ac:	1ac0      	subs	r0, r0, r3
200014ae:	4152      	adcs	r2, r2
200014b0:	0883      	lsrs	r3, r0, #2
200014b2:	428b      	cmp	r3, r1
200014b4:	d301      	bcc.n	200014ba <__divsi3+0xea>
200014b6:	008b      	lsls	r3, r1, #2
200014b8:	1ac0      	subs	r0, r0, r3
200014ba:	4152      	adcs	r2, r2
200014bc:	0843      	lsrs	r3, r0, #1
200014be:	428b      	cmp	r3, r1
200014c0:	d301      	bcc.n	200014c6 <__divsi3+0xf6>
200014c2:	004b      	lsls	r3, r1, #1
200014c4:	1ac0      	subs	r0, r0, r3
200014c6:	4152      	adcs	r2, r2
200014c8:	1a41      	subs	r1, r0, r1
200014ca:	d200      	bcs.n	200014ce <__divsi3+0xfe>
200014cc:	4601      	mov	r1, r0
200014ce:	4152      	adcs	r2, r2
200014d0:	4610      	mov	r0, r2
200014d2:	4770      	bx	lr
200014d4:	e05d      	b.n	20001592 <__divsi3+0x1c2>
200014d6:	0fca      	lsrs	r2, r1, #31
200014d8:	d000      	beq.n	200014dc <__divsi3+0x10c>
200014da:	4249      	negs	r1, r1
200014dc:	1003      	asrs	r3, r0, #32
200014de:	d300      	bcc.n	200014e2 <__divsi3+0x112>
200014e0:	4240      	negs	r0, r0
200014e2:	4053      	eors	r3, r2
200014e4:	2200      	movs	r2, #0
200014e6:	469c      	mov	ip, r3
200014e8:	0903      	lsrs	r3, r0, #4
200014ea:	428b      	cmp	r3, r1
200014ec:	d32d      	bcc.n	2000154a <__divsi3+0x17a>
200014ee:	0a03      	lsrs	r3, r0, #8
200014f0:	428b      	cmp	r3, r1
200014f2:	d312      	bcc.n	2000151a <__divsi3+0x14a>
200014f4:	22fc      	movs	r2, #252	; 0xfc
200014f6:	0189      	lsls	r1, r1, #6
200014f8:	ba12      	rev	r2, r2
200014fa:	0a03      	lsrs	r3, r0, #8
200014fc:	428b      	cmp	r3, r1
200014fe:	d30c      	bcc.n	2000151a <__divsi3+0x14a>
20001500:	0189      	lsls	r1, r1, #6
20001502:	1192      	asrs	r2, r2, #6
20001504:	428b      	cmp	r3, r1
20001506:	d308      	bcc.n	2000151a <__divsi3+0x14a>
20001508:	0189      	lsls	r1, r1, #6
2000150a:	1192      	asrs	r2, r2, #6
2000150c:	428b      	cmp	r3, r1
2000150e:	d304      	bcc.n	2000151a <__divsi3+0x14a>
20001510:	0189      	lsls	r1, r1, #6
20001512:	d03a      	beq.n	2000158a <__divsi3+0x1ba>
20001514:	1192      	asrs	r2, r2, #6
20001516:	e000      	b.n	2000151a <__divsi3+0x14a>
20001518:	0989      	lsrs	r1, r1, #6
2000151a:	09c3      	lsrs	r3, r0, #7
2000151c:	428b      	cmp	r3, r1
2000151e:	d301      	bcc.n	20001524 <__divsi3+0x154>
20001520:	01cb      	lsls	r3, r1, #7
20001522:	1ac0      	subs	r0, r0, r3
20001524:	4152      	adcs	r2, r2
20001526:	0983      	lsrs	r3, r0, #6
20001528:	428b      	cmp	r3, r1
2000152a:	d301      	bcc.n	20001530 <__divsi3+0x160>
2000152c:	018b      	lsls	r3, r1, #6
2000152e:	1ac0      	subs	r0, r0, r3
20001530:	4152      	adcs	r2, r2
20001532:	0943      	lsrs	r3, r0, #5
20001534:	428b      	cmp	r3, r1
20001536:	d301      	bcc.n	2000153c <__divsi3+0x16c>
20001538:	014b      	lsls	r3, r1, #5
2000153a:	1ac0      	subs	r0, r0, r3
2000153c:	4152      	adcs	r2, r2
2000153e:	0903      	lsrs	r3, r0, #4
20001540:	428b      	cmp	r3, r1
20001542:	d301      	bcc.n	20001548 <__divsi3+0x178>
20001544:	010b      	lsls	r3, r1, #4
20001546:	1ac0      	subs	r0, r0, r3
20001548:	4152      	adcs	r2, r2
2000154a:	08c3      	lsrs	r3, r0, #3
2000154c:	428b      	cmp	r3, r1
2000154e:	d301      	bcc.n	20001554 <__divsi3+0x184>
20001550:	00cb      	lsls	r3, r1, #3
20001552:	1ac0      	subs	r0, r0, r3
20001554:	4152      	adcs	r2, r2
20001556:	0883      	lsrs	r3, r0, #2
20001558:	428b      	cmp	r3, r1
2000155a:	d301      	bcc.n	20001560 <__divsi3+0x190>
2000155c:	008b      	lsls	r3, r1, #2
2000155e:	1ac0      	subs	r0, r0, r3
20001560:	4152      	adcs	r2, r2
20001562:	d2d9      	bcs.n	20001518 <__divsi3+0x148>
20001564:	0843      	lsrs	r3, r0, #1
20001566:	428b      	cmp	r3, r1
20001568:	d301      	bcc.n	2000156e <__divsi3+0x19e>
2000156a:	004b      	lsls	r3, r1, #1
2000156c:	1ac0      	subs	r0, r0, r3
2000156e:	4152      	adcs	r2, r2
20001570:	1a41      	subs	r1, r0, r1
20001572:	d200      	bcs.n	20001576 <__divsi3+0x1a6>
20001574:	4601      	mov	r1, r0
20001576:	4663      	mov	r3, ip
20001578:	4152      	adcs	r2, r2
2000157a:	105b      	asrs	r3, r3, #1
2000157c:	4610      	mov	r0, r2
2000157e:	d301      	bcc.n	20001584 <__divsi3+0x1b4>
20001580:	4240      	negs	r0, r0
20001582:	2b00      	cmp	r3, #0
20001584:	d500      	bpl.n	20001588 <__divsi3+0x1b8>
20001586:	4249      	negs	r1, r1
20001588:	4770      	bx	lr
2000158a:	4663      	mov	r3, ip
2000158c:	105b      	asrs	r3, r3, #1
2000158e:	d300      	bcc.n	20001592 <__divsi3+0x1c2>
20001590:	4240      	negs	r0, r0
20001592:	b501      	push	{r0, lr}
20001594:	2000      	movs	r0, #0
20001596:	f000 f805 	bl	200015a4 <__aeabi_idiv0>
2000159a:	bd02      	pop	{r1, pc}

2000159c <__aeabi_idivmod>:
2000159c:	2900      	cmp	r1, #0
2000159e:	d0f8      	beq.n	20001592 <__divsi3+0x1c2>
200015a0:	e716      	b.n	200013d0 <__divsi3>
200015a2:	4770      	bx	lr

200015a4 <__aeabi_idiv0>:
200015a4:	4770      	bx	lr
200015a6:	46c0      	nop			; (mov r8, r8)

200015a8 <backBuffer>:
	...

200025a8 <points>:
200025a8:	00000000 	andeq	r0, r0, r0

200025ac <snakeSize>:
200025ac:	00000000 	andeq	r0, r0, r0

200025b0 <backBuffer>:
	...

200035b0 <front>:
200035b0:	00000000 	andeq	r0, r0, r0

200035b4 <itemCount>:
200035b4:	00000000 	andeq	r0, r0, r0

200035b8 <objArray>:
	...

20003748 <image_bits>:
20003748:	aa889494 	bge	1e2289a0 <startup-0x1dd7660>
2000374c:	beebffeb 	cdplt	15, 14, cr15, cr11, cr11, {7}
20003750:	0000009c 	muleq	r0, ip, r0

20003754 <snakehead_geometry_LEFT>:
20003754:	0000000a 	andeq	r0, r0, sl
20003758:	00000004 	andeq	r0, r0, r4
2000375c:	00000004 	andeq	r0, r0, r4
20003760:	02000100 	andeq	r0, r0, #0, 2
20003764:	02010101 	andeq	r0, r1, #1073741824	; 0x40000000
20003768:	03020002 	movweq	r0, #8194	; 0x2002
2000376c:	01030003 	tsteq	r3, r3
20003770:	03030203 	movweq	r0, #12803	; 0x3203
	...

20003780 <snakehead_geometry_RIGHT>:
20003780:	0000000a 	andeq	r0, r0, sl
20003784:	00000004 	andeq	r0, r0, r4
20003788:	00000004 	andeq	r0, r0, r4
2000378c:	01000000 	mrseq	r0, (UNDEF: 0)
20003790:	03000200 	movweq	r0, #512	; 0x200
20003794:	03010001 	movweq	r0, #4097	; 0x1001
20003798:	02020102 	andeq	r0, r2, #-2147483648	; 0x80000000
2000379c:	02030103 	andeq	r0, r3, #-1073741824	; 0xc0000000
	...

200037ac <snakehead_geometry_DOWN>:
200037ac:	0000000a 	andeq	r0, r0, sl
200037b0:	00000004 	andeq	r0, r0, r4
200037b4:	00000004 	andeq	r0, r0, r4
200037b8:	01000000 	mrseq	r0, (UNDEF: 0)
200037bc:	02010001 	andeq	r0, r1, #1
200037c0:	00020301 	andeq	r0, r2, r1, lsl #6
200037c4:	03020202 	movweq	r0, #8706	; 0x2202
200037c8:	01030003 	tsteq	r3, r3
	...

200037d8 <snakehead_geometry_UP>:
200037d8:	0000000a 	andeq	r0, r0, sl
200037dc:	00000004 	andeq	r0, r0, r4
200037e0:	00000004 	andeq	r0, r0, r4
200037e4:	03000200 	movweq	r0, #512	; 0x200
200037e8:	01010001 	tsteq	r1, r1
200037ec:	00020301 	andeq	r0, r2, r1, lsl #6
200037f0:	03020102 	movweq	r0, #8450	; 0x2102
200037f4:	03030203 	movweq	r0, #12803	; 0x3203
	...

20003804 <snakebody_geometry>:
20003804:	00000010 	andeq	r0, r0, r0, lsl r0
20003808:	00000004 	andeq	r0, r0, r4
2000380c:	00000004 	andeq	r0, r0, r4
20003810:	01000000 	mrseq	r0, (UNDEF: 0)
20003814:	03000200 	movweq	r0, #512	; 0x200
20003818:	01010001 	tsteq	r1, r1
2000381c:	03010201 	movweq	r0, #4609	; 0x1201
20003820:	01020002 	tsteq	r2, r2
20003824:	03020202 	movweq	r0, #8706	; 0x2202
20003828:	01030003 	tsteq	r3, r3
2000382c:	03030203 	movweq	r0, #12803	; 0x3203

20003830 <food_geometry>:
20003830:	0000000c 	andeq	r0, r0, ip
20003834:	00000004 	andeq	r0, r0, r4
20003838:	00000004 	andeq	r0, r0, r4
2000383c:	01000000 	mrseq	r0, (UNDEF: 0)
20003840:	03000200 	movweq	r0, #512	; 0x200
20003844:	03010001 	movweq	r0, #4097	; 0x1001
20003848:	03020002 	movweq	r0, #8194	; 0x2002
2000384c:	01030003 	tsteq	r3, r3
20003850:	03030203 	movweq	r0, #12803	; 0x3203
	...

2000385c <food_obj>:
2000385c:	20003830 	andcs	r3, r0, r0, lsr r8
	...
20003868:	00000001 	andeq	r0, r0, r1
2000386c:	00000001 	andeq	r0, r0, r1
20003870:	20000031 	andcs	r0, r0, r1, lsr r0
20003874:	20000093 	mulcs	r0, r3, r0
20003878:	200000f5 	strdcs	r0, [r0], -r5
2000387c:	20000011 	andcs	r0, r0, r1, lsl r0

20003880 <next.4791>:
20003880:	00000cb3 			; <UNDEFINED> instruction: 0x00000cb3

20003884 <rear>:
20003884:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20003888:	2000084e 	andcs	r0, r0, lr, asr #16
2000388c:	2000084e 	andcs	r0, r0, lr, asr #16
20003890:	20000816 	andcs	r0, r0, r6, lsl r8
20003894:	2000084e 	andcs	r0, r0, lr, asr #16
20003898:	20000808 	andcs	r0, r0, r8, lsl #16
2000389c:	2000084e 	andcs	r0, r0, lr, asr #16
200038a0:	200007fa 	strdcs	r0, [r0], -sl
200038a4:	2000084e 	andcs	r0, r0, lr, asr #16
200038a8:	20000824 	andcs	r0, r0, r4, lsr #16
200038ac:	2000084e 	andcs	r0, r0, lr, asr #16
200038b0:	20000832 	andcs	r0, r0, r2, lsr r8
200038b4:	2000084e 	andcs	r0, r0, lr, asr #16
200038b8:	2000084e 	andcs	r0, r0, lr, asr #16
200038bc:	20000844 	andcs	r0, r0, r4, asr #16
200038c0:	774f5b06 	strbvc	r5, [pc, -r6, lsl #22]
200038c4:	7c7d6d66 	ldclvc	13, cr6, [sp], #-408	; 0xfffffe68
200038c8:	396f7f07 	stmdbcc	pc!, {r0, r1, r2, r8, r9, sl, fp, ip, sp, lr}^	; <UNPREDICTABLE>
200038cc:	bf713f79 	svclt	0x00713f79
200038d0:	0a030201 	beq	200c40dc <rear+0xc0858>
200038d4:	0b060504 	bleq	20184cec <rear+0x181468>
200038d8:	0c090807 	stceq	8, cr0, [r9], {7}
200038dc:	0d0f000e 	stceq	0, cr0, [pc, #-56]	; 200038ac <rear+0x28>

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	000010ae 	andeq	r1, r0, lr, lsr #1
       4:	00000004 	andeq	r0, r0, r4
       8:	01040000 	mrseq	r0, (UNDEF: 4)
       c:	00000601 	andeq	r0, r0, r1, lsl #12
      10:	0001f60c 	andeq	pc, r1, ip, lsl #12
      14:	0003d300 	andeq	sp, r3, r0, lsl #6
	...
      24:	07040200 	streq	r0, [r4, -r0, lsl #4]
      28:	00000075 	andeq	r0, r0, r5, ror r0
      2c:	00002503 	andeq	r2, r0, r3, lsl #10
      30:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
      34:	00746e69 	rsbseq	r6, r4, r9, ror #28
      38:	00003103 	andeq	r3, r0, r3, lsl #2
      3c:	06010200 	streq	r0, [r1], -r0, lsl #4
      40:	000003f7 	strdeq	r0, [r0], -r7
      44:	f5080102 			; <UNDEFINED> instruction: 0xf5080102
      48:	02000003 	andeq	r0, r0, #3
      4c:	043a0502 	ldrteq	r0, [sl], #-1282	; 0xfffffafe
      50:	02020000 	andeq	r0, r2, #0
      54:	0002c107 	andeq	ip, r2, r7, lsl #2
      58:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
      5c:	000000f5 	strdeq	r0, [r0], -r5
      60:	70070402 	andvc	r0, r7, r2, lsl #8
      64:	02000000 	andeq	r0, r0, #0
      68:	00f00508 	rscseq	r0, r0, r8, lsl #10
      6c:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
      70:	00006b07 	andeq	r6, r0, r7, lsl #22
      74:	03270500 			; <UNDEFINED> instruction: 0x03270500
      78:	22020000 	andcs	r0, r2, #0
      7c:	00008119 	andeq	r8, r0, r9, lsl r1
      80:	87040600 	strhi	r0, [r4, -r0, lsl #12]
      84:	07000000 	streq	r0, [r0, -r0]
      88:	0000050e 	andeq	r0, r0, lr, lsl #10
      8c:	0003aa05 	andeq	sl, r3, r5, lsl #20
      90:	0e2c0300 	cdpeq	3, 2, cr0, cr12, cr0, {0}
      94:	00000059 	andeq	r0, r0, r9, asr r0
      98:	00052305 	andeq	r2, r5, r5, lsl #6
      9c:	0e720300 	cdpeq	3, 7, cr0, cr2, cr0, {0}
      a0:	00000059 	andeq	r0, r0, r9, asr r0
      a4:	00032f08 	andeq	r2, r3, r8, lsl #30
      a8:	015e0400 	cmpeq	lr, r0, lsl #8
      ac:	00002517 	andeq	r2, r0, r7, lsl r5
      b0:	03040900 	movweq	r0, #18688	; 0x4900
      b4:	00d303a6 	sbcseq	r0, r3, r6, lsr #7
      b8:	210a0000 	mrscs	r0, (UNDEF: 10)
      bc:	03000003 	movweq	r0, #3
      c0:	00a40ca8 	adceq	r0, r4, r8, lsr #25
      c4:	740a0000 	strvc	r0, [sl], #-0
      c8:	03000002 	movweq	r0, #2
      cc:	00d313a9 	sbcseq	r1, r3, r9, lsr #7
      d0:	0b000000 	bleq	d8 <startup-0x1fffff28>
      d4:	00000044 	andeq	r0, r0, r4, asr #32
      d8:	000000e3 	andeq	r0, r0, r3, ror #1
      dc:	0000250c 	andeq	r2, r0, ip, lsl #10
      e0:	0d000300 	stceq	3, cr0, [r0, #-0]
      e4:	09a30308 	stmibeq	r3!, {r3, r8, r9}
      e8:	00000107 	andeq	r0, r0, r7, lsl #2
      ec:	0005060e 	andeq	r0, r5, lr, lsl #12
      f0:	07a50300 	streq	r0, [r5, r0, lsl #6]!
      f4:	00000031 	andeq	r0, r0, r1, lsr r0
      f8:	05150e00 	ldreq	r0, [r5, #-3584]	; 0xfffff200
      fc:	aa030000 	bge	c0104 <startup-0x1ff3fefc>
     100:	0000b105 	andeq	fp, r0, r5, lsl #2
     104:	05000400 	streq	r0, [r0, #-1024]	; 0xfffffc00
     108:	00000462 	andeq	r0, r0, r2, ror #8
     10c:	e303ab03 	movw	sl, #15107	; 0x3b03
     110:	05000000 	streq	r0, [r0, #-0]
     114:	00000228 	andeq	r0, r0, r8, lsr #4
     118:	751baf03 	ldrvc	sl, [fp, #-3843]	; 0xfffff0fd
     11c:	0f000000 	svceq	0x00000000
     120:	27040604 	strcs	r0, [r4, -r4, lsl #12]
     124:	02000001 	andeq	r0, r0, #1
     128:	03fe0801 	mvnseq	r0, #65536	; 0x10000
     12c:	27100000 	ldrcs	r0, [r0, -r0]
     130:	05000001 	streq	r0, [r0, #-1]
     134:	00000590 	muleq	r0, r0, r5
     138:	60191605 	andsvs	r1, r9, r5, lsl #12
     13c:	11000000 	mrsne	r0, (UNDEF: 0)
     140:	00000239 	andeq	r0, r0, r9, lsr r2
     144:	082f0518 	stmdaeq	pc!, {r3, r4, r8, sl}	; <UNPREDICTABLE>
     148:	00000199 	muleq	r0, r9, r1
     14c:	0004830e 	andeq	r8, r4, lr, lsl #6
     150:	13310500 	teqne	r1, #0, 10
     154:	00000199 	muleq	r0, r9, r1
     158:	6b5f1200 	blvs	17c4960 <startup-0x1e83b6a0>
     15c:	07320500 	ldreq	r0, [r2, -r0, lsl #10]!
     160:	00000031 	andeq	r0, r0, r1, lsr r0
     164:	04d90e04 	ldrbeq	r0, [r9], #3588	; 0xe04
     168:	32050000 	andcc	r0, r5, #0
     16c:	0000310b 	andeq	r3, r0, fp, lsl #2
     170:	220e0800 	andcs	r0, lr, #0, 16
     174:	05000002 	streq	r0, [r0, #-2]
     178:	00311432 	eorseq	r1, r1, r2, lsr r4
     17c:	0e0c0000 	cdpeq	0, 0, cr0, cr12, cr0, {0}
     180:	000005df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
     184:	311b3205 	tstcc	fp, r5, lsl #4
     188:	10000000 	andne	r0, r0, r0
     18c:	00785f12 	rsbseq	r5, r8, r2, lsl pc
     190:	9f0b3305 	svcls	0x000b3305
     194:	14000001 	strne	r0, [r0], #-1
     198:	3f040600 	svccc	0x00040600
     19c:	0b000001 	bleq	1a8 <startup-0x1ffffe58>
     1a0:	00000133 	andeq	r0, r0, r3, lsr r1
     1a4:	000001af 	andeq	r0, r0, pc, lsr #3
     1a8:	0000250c 	andeq	r2, r0, ip, lsl #10
     1ac:	11000000 	mrsne	r0, (UNDEF: 0)
     1b0:	0000025a 	andeq	r0, r0, sl, asr r2
     1b4:	08370524 	ldmdaeq	r7!, {r2, r5, r8, sl}
     1b8:	00000232 	andeq	r0, r0, r2, lsr r2
     1bc:	0000da0e 	andeq	sp, r0, lr, lsl #20
     1c0:	09390500 	ldmdbeq	r9!, {r8, sl}
     1c4:	00000031 	andeq	r0, r0, r1, lsr r0
     1c8:	052b0e00 	streq	r0, [fp, #-3584]!	; 0xfffff200
     1cc:	3a050000 	bcc	1401d4 <startup-0x1febfe2c>
     1d0:	00003109 	andeq	r3, r0, r9, lsl #2
     1d4:	140e0400 	strne	r0, [lr], #-1024	; 0xfffffc00
     1d8:	05000001 	streq	r0, [r0, #-1]
     1dc:	0031093b 	eorseq	r0, r1, fp, lsr r9
     1e0:	0e080000 	cdpeq	0, 0, cr0, cr8, cr0, {0}
     1e4:	000006fd 	strdeq	r0, [r0], -sp
     1e8:	31093c05 	tstcc	r9, r5, lsl #24
     1ec:	0c000000 	stceq	0, cr0, [r0], {-0}
     1f0:	0003840e 	andeq	r8, r3, lr, lsl #8
     1f4:	093d0500 	ldmdbeq	sp!, {r8, sl}
     1f8:	00000031 	andeq	r0, r0, r1, lsr r0
     1fc:	033e0e10 	teqeq	lr, #16, 28	; 0x100
     200:	3e050000 	cdpcc	0, 0, cr0, cr5, cr0, {0}
     204:	00003109 	andeq	r3, r0, r9, lsl #2
     208:	e40e1400 	str	r1, [lr], #-1024	; 0xfffffc00
     20c:	05000005 	streq	r0, [r0, #-5]
     210:	0031093f 	eorseq	r0, r1, pc, lsr r9
     214:	0e180000 	cdpeq	0, 1, cr0, cr8, cr0, {0}
     218:	00000444 	andeq	r0, r0, r4, asr #8
     21c:	31094005 	tstcc	r9, r5
     220:	1c000000 	stcne	0, cr0, [r0], {-0}
     224:	0006ae0e 	andeq	sl, r6, lr, lsl #28
     228:	09410500 	stmdbeq	r1, {r8, sl}^
     22c:	00000031 	andeq	r0, r0, r1, lsr r0
     230:	36130020 	ldrcc	r0, [r3], -r0, lsr #32
     234:	08000001 	stmdaeq	r0, {r0}
     238:	084a0501 	stmdaeq	sl, {r0, r8, sl}^
     23c:	00000277 	andeq	r0, r0, r7, ror r2
     240:	0001d90e 	andeq	sp, r1, lr, lsl #18
     244:	0a4b0500 	beq	12c164c <startup-0x1ed3e9b4>
     248:	00000277 	andeq	r0, r0, r7, ror r2
     24c:	00000e00 	andeq	r0, r0, r0, lsl #28
     250:	4c050000 	stcmi	0, cr0, [r5], {-0}
     254:	00027709 	andeq	r7, r2, r9, lsl #14
     258:	58148000 	ldmdapl	r4, {pc}
     25c:	05000005 	streq	r0, [r0, #-5]
     260:	01330a4e 	teqeq	r3, lr, asr #20
     264:	01000000 	mrseq	r0, (UNDEF: 0)
     268:	00016214 	andeq	r6, r1, r4, lsl r2
     26c:	0a510500 	beq	1441674 <startup-0x1ebbe98c>
     270:	00000133 	andeq	r0, r0, r3, lsr r1
     274:	0b000104 	bleq	68c <startup-0x1ffff974>
     278:	0000011f 	andeq	r0, r0, pc, lsl r1
     27c:	00000287 	andeq	r0, r0, r7, lsl #5
     280:	0000250c 	andeq	r2, r0, ip, lsl #10
     284:	13001f00 	movwne	r1, #3840	; 0xf00
     288:	0000038d 	andeq	r0, r0, sp, lsl #7
     28c:	5d050190 	stfpls	f0, [r5, #-576]	; 0xfffffdc0
     290:	0002ca08 	andeq	ip, r2, r8, lsl #20
     294:	04830e00 	streq	r0, [r3], #3584	; 0xe00
     298:	5e050000 	cdppl	0, 0, cr0, cr5, cr0, {0}
     29c:	0002ca12 	andeq	ip, r2, r2, lsl sl
     2a0:	9b0e0000 	blls	3802a8 <startup-0x1fc7fd58>
     2a4:	05000004 	streq	r0, [r0, #-4]
     2a8:	0031065f 	eorseq	r0, r1, pc, asr r6
     2ac:	0e040000 	cdpeq	0, 0, cr0, cr4, cr0, {0}
     2b0:	000001f1 	strdeq	r0, [r0], -r1
     2b4:	d0096105 	andle	r6, r9, r5, lsl #2
     2b8:	08000002 	stmdaeq	r0, {r1}
     2bc:	0001360e 	andeq	r3, r1, lr, lsl #12
     2c0:	1e620500 	cdpne	5, 6, cr0, cr2, cr0, {0}
     2c4:	00000232 	andeq	r0, r0, r2, lsr r2
     2c8:	04060088 	streq	r0, [r6], #-136	; 0xffffff78
     2cc:	00000287 	andeq	r0, r0, r7, lsl #5
     2d0:	0002e00b 	andeq	lr, r2, fp
     2d4:	0002e000 	andeq	lr, r2, r0
     2d8:	00250c00 	eoreq	r0, r5, r0, lsl #24
     2dc:	001f0000 	andseq	r0, pc, r0
     2e0:	02e60406 	rsceq	r0, r6, #100663296	; 0x6000000
     2e4:	11150000 	tstne	r5, r0
     2e8:	0000044e 	andeq	r0, r0, lr, asr #8
     2ec:	08750508 	ldmdaeq	r5!, {r3, r8, sl}^
     2f0:	0000030f 	andeq	r0, r0, pc, lsl #6
     2f4:	00010e0e 	andeq	r0, r1, lr, lsl #28
     2f8:	11760500 	cmnne	r6, r0, lsl #10
     2fc:	0000030f 	andeq	r0, r0, pc, lsl #6
     300:	000c0e00 	andeq	r0, ip, r0, lsl #28
     304:	77050000 	strvc	r0, [r5, -r0]
     308:	00003106 	andeq	r3, r0, r6, lsl #2
     30c:	06000400 	streq	r0, [r0], -r0, lsl #8
     310:	00004404 	andeq	r4, r0, r4, lsl #8
     314:	046d1100 	strbteq	r1, [sp], #-256	; 0xffffff00
     318:	05680000 	strbeq	r0, [r8, #-0]!
     31c:	045808b5 	ldrbeq	r0, [r8], #-2229	; 0xfffff74b
     320:	5f120000 	svcpl	0x00120000
     324:	b6050070 			; <UNDEFINED> instruction: 0xb6050070
     328:	00030f12 	andeq	r0, r3, r2, lsl pc
     32c:	5f120000 	svcpl	0x00120000
     330:	b7050072 	smlsdxlt	r5, r2, r0, r0
     334:	00003107 	andeq	r3, r0, r7, lsl #2
     338:	5f120400 	svcpl	0x00120400
     33c:	b8050077 	stmdalt	r5, {r0, r1, r2, r4, r5, r6}
     340:	00003107 	andeq	r3, r0, r7, lsl #2
     344:	5b0e0800 	blpl	38234c <startup-0x1fc7dcb4>
     348:	05000001 	streq	r0, [r0, #-1]
     34c:	004b09b9 	strheq	r0, [fp], #-153	; 0xffffff67
     350:	0e0c0000 	cdpeq	0, 0, cr0, cr12, cr0, {0}
     354:	00000292 	muleq	r0, r2, r2
     358:	4b09ba05 	blmi	26eb74 <startup-0x1fd9148c>
     35c:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
     360:	66625f12 	uqadd16vs	r5, r2, r2
     364:	11bb0500 			; <UNDEFINED> instruction: 0x11bb0500
     368:	000002e7 	andeq	r0, r0, r7, ror #5
     36c:	008c0e10 	addeq	r0, ip, r0, lsl lr
     370:	bc050000 	stclt	0, cr0, [r5], {-0}
     374:	00003107 	andeq	r3, r0, r7, lsl #2
     378:	440e1800 	strmi	r1, [lr], #-2048	; 0xfffff800
     37c:	05000001 	streq	r0, [r0, #-1]
     380:	011f0ac3 	tsteq	pc, r3, asr #21
     384:	0e1c0000 	cdpeq	0, 1, cr0, cr12, cr0, {0}
     388:	00000740 	andeq	r0, r0, r0, asr #14
     38c:	ca1dc505 	bgt	7717a8 <startup-0x1f88e858>
     390:	20000005 	andcs	r0, r0, r5
     394:	0007a50e 	andeq	sl, r7, lr, lsl #10
     398:	1dc70500 	cfstr64ne	mvdx0, [r7]
     39c:	000005f4 	strdeq	r0, [r0], -r4
     3a0:	051d0e24 	ldreq	r0, [sp, #-3620]	; 0xfffff1dc
     3a4:	ca050000 	bgt	1403ac <startup-0x1febfc54>
     3a8:	0006180d 	andeq	r1, r6, sp, lsl #16
     3ac:	c80e2800 	stmdagt	lr, {fp, sp}
     3b0:	05000006 	streq	r0, [r0, #-6]
     3b4:	063209cb 	ldrteq	r0, [r2], -fp, asr #19
     3b8:	122c0000 	eorne	r0, ip, #0
     3bc:	0062755f 	rsbeq	r7, r2, pc, asr r5
     3c0:	e711ce05 	ldr	ip, [r1, -r5, lsl #28]
     3c4:	30000002 	andcc	r0, r0, r2
     3c8:	70755f12 	rsbsvc	r5, r5, r2, lsl pc
     3cc:	12cf0500 	sbcne	r0, pc, #0, 10
     3d0:	0000030f 	andeq	r0, r0, pc, lsl #6
     3d4:	755f1238 	ldrbvc	r1, [pc, #-568]	; 1a4 <startup-0x1ffffe5c>
     3d8:	d0050072 	andle	r0, r5, r2, ror r0
     3dc:	00003107 	andeq	r3, r0, r7, lsl #2
     3e0:	080e3c00 	stmdaeq	lr, {sl, fp, ip, sp}
     3e4:	05000001 	streq	r0, [r0, #-1]
     3e8:	063811d3 			; <UNDEFINED> instruction: 0x063811d3
     3ec:	0e400000 	cdpeq	0, 4, cr0, cr0, cr0, {0}
     3f0:	00000696 	muleq	r0, r6, r6
     3f4:	4811d405 	ldmdami	r1, {r0, r2, sl, ip, lr, pc}
     3f8:	43000006 	movwmi	r0, #6
     3fc:	626c5f12 	rsbvs	r5, ip, #18, 30	; 0x48
     400:	11d70500 	bicsne	r0, r7, r0, lsl #10
     404:	000002e7 	andeq	r0, r0, r7, ror #5
     408:	01870e44 	orreq	r0, r7, r4, asr #28
     40c:	da050000 	ble	140414 <startup-0x1febfbec>
     410:	00003107 	andeq	r3, r0, r7, lsl #2
     414:	ac0e4c00 	stcge	12, cr4, [lr], {-0}
     418:	05000001 	streq	r0, [r0, #-1]
     41c:	008c0adb 	ldrdeq	r0, [ip], fp
     420:	0e500000 	cdpeq	0, 5, cr0, cr0, cr0, {0}
     424:	00000733 	andeq	r0, r0, r3, lsr r7
     428:	7612de05 	ldrvc	sp, [r2], -r5, lsl #28
     42c:	54000004 	strpl	r0, [r0], #-4
     430:	00050f0e 	andeq	r0, r5, lr, lsl #30
     434:	0ce20500 	cfstr64eq	mvdx0, [r2]
     438:	00000113 	andeq	r0, r0, r3, lsl r1
     43c:	04750e58 	ldrbteq	r0, [r5], #-3672	; 0xfffff1a8
     440:	e4050000 	str	r0, [r5], #-0
     444:	0001070e 	andeq	r0, r1, lr, lsl #14
     448:	360e5c00 	strcc	r5, [lr], -r0, lsl #24
     44c:	05000003 	streq	r0, [r0, #-3]
     450:	003109e5 	eorseq	r0, r1, r5, ror #19
     454:	00640000 	rsbeq	r0, r4, r0
     458:	00003116 	andeq	r3, r0, r6, lsl r1
     45c:	00047600 	andeq	r7, r4, r0, lsl #12
     460:	04761700 	ldrbteq	r1, [r6], #-1792	; 0xfffff900
     464:	1f170000 	svcne	0x00170000
     468:	17000001 	strne	r0, [r0, -r1]
     46c:	00000121 	andeq	r0, r0, r1, lsr #2
     470:	00003117 	andeq	r3, r0, r7, lsl r1
     474:	04060000 	streq	r0, [r6], #-0
     478:	00000481 	andeq	r0, r0, r1, lsl #9
     47c:	00047610 	andeq	r7, r4, r0, lsl r6
     480:	04e11800 	strbteq	r1, [r1], #2048	; 0x800
     484:	04280000 	strteq	r0, [r8], #-0
     488:	08026005 	stmdaeq	r2, {r0, r2, sp, lr}
     48c:	000005ca 	andeq	r0, r0, sl, asr #11
     490:	00043319 	andeq	r3, r4, r9, lsl r3
     494:	02620500 	rsbeq	r0, r2, #0, 10
     498:	00003107 	andeq	r3, r0, r7, lsl #2
     49c:	6a190000 	bvs	6404a4 <startup-0x1f9bfb5c>
     4a0:	05000001 	streq	r0, [r0, #-1]
     4a4:	a40b0267 	strge	r0, [fp], #-615	; 0xfffffd99
     4a8:	04000006 	streq	r0, [r0], #-6
     4ac:	00027b19 	andeq	r7, r2, r9, lsl fp
     4b0:	02670500 	rsbeq	r0, r7, #0, 10
     4b4:	0006a414 	andeq	sl, r6, r4, lsl r4
     4b8:	31190800 	tstcc	r9, r0, lsl #16
     4bc:	05000002 	streq	r0, [r0, #-2]
     4c0:	a41e0267 	ldrge	r0, [lr], #-615	; 0xfffffd99
     4c4:	0c000006 	stceq	0, cr0, [r0], {6}
     4c8:	00049619 	andeq	r9, r4, r9, lsl r6
     4cc:	02690500 	rsbeq	r0, r9, #0, 10
     4d0:	00003108 	andeq	r3, r0, r8, lsl #2
     4d4:	24191000 	ldrcs	r1, [r9], #-0
     4d8:	05000000 	streq	r0, [r0, #-0]
     4dc:	a408026a 	strge	r0, [r8], #-618	; 0xfffffd96
     4e0:	14000008 	strne	r0, [r0], #-8
     4e4:	0004c019 	andeq	ip, r4, r9, lsl r0
     4e8:	026d0500 	rsbeq	r0, sp, #0, 10
     4ec:	00003107 	andeq	r3, r0, r7, lsl #2
     4f0:	ae193000 	cdpge	0, 1, cr3, cr9, cr0, {0}
     4f4:	05000004 	streq	r0, [r0, #-4]
     4f8:	b916026e 	ldmdblt	r6, {r1, r2, r3, r5, r6, r9}
     4fc:	34000008 	strcc	r0, [r0], #-8
     500:	00039f19 	andeq	r9, r3, r9, lsl pc
     504:	02700500 	rsbseq	r0, r0, #0, 10
     508:	00003107 	andeq	r3, r0, r7, lsl #2
     50c:	b6193800 	ldrlt	r3, [r9], -r0, lsl #16
     510:	05000004 	streq	r0, [r0, #-4]
     514:	ca0a0272 	bgt	280ee4 <startup-0x1fd7f11c>
     518:	3c000008 	stccc	0, cr0, [r0], {8}
     51c:	00031919 	andeq	r1, r3, r9, lsl r9
     520:	02750500 	rsbseq	r0, r5, #0, 10
     524:	00019913 	andeq	r9, r1, r3, lsl r9
     528:	50194000 	andspl	r4, r9, r0
     52c:	05000002 	streq	r0, [r0, #-2]
     530:	31070276 	tstcc	r7, r6, ror r2
     534:	44000000 	strmi	r0, [r0], #-0
     538:	0006e819 	andeq	lr, r6, r9, lsl r8
     53c:	02770500 	rsbseq	r0, r7, #0, 10
     540:	00019913 	andeq	r9, r1, r3, lsl r9
     544:	bb194800 	bllt	65254c <startup-0x1f9adab4>
     548:	05000003 	streq	r0, [r0, #-3]
     54c:	d0140278 	andsle	r0, r4, r8, ror r2
     550:	4c000008 	stcmi	0, cr0, [r0], {8}
     554:	00028a19 	andeq	r8, r2, r9, lsl sl
     558:	027b0500 	rsbseq	r0, fp, #0, 10
     55c:	00003107 	andeq	r3, r0, r7, lsl #2
     560:	a4195000 	ldrge	r5, [r9], #-0
     564:	05000001 	streq	r0, [r0, #-1]
     568:	2109027c 	tstcs	r9, ip, ror r2
     56c:	54000001 	strpl	r0, [r0], #-1
     570:	00040319 	andeq	r0, r4, r9, lsl r3
     574:	029f0500 	addseq	r0, pc, #0, 10
     578:	00087f07 	andeq	r7, r8, r7, lsl #30
     57c:	8d1a5800 	ldchi	8, cr5, [sl, #-0]
     580:	05000003 	streq	r0, [r0, #-3]
     584:	ca1302a3 	bgt	4c1018 <startup-0x1fb3efe8>
     588:	48000002 	stmdami	r0, {r1}
     58c:	02e91a01 	rsceq	r1, r9, #4096	; 0x1000
     590:	a4050000 	strge	r0, [r5], #-0
     594:	02871202 	addeq	r1, r7, #536870912	; 0x20000000
     598:	014c0000 	mrseq	r0, (UNDEF: 76)
     59c:	0006871a 	andeq	r8, r6, sl, lsl r7
     5a0:	02a80500 	adceq	r0, r8, #0, 10
     5a4:	0008e10c 	andeq	lr, r8, ip, lsl #2
     5a8:	1a02dc00 	bne	b75b0 <startup-0x1ff48a50>
     5ac:	0000014c 	andeq	r0, r0, ip, asr #2
     5b0:	1002ad05 	andne	sl, r2, r5, lsl #26
     5b4:	00000665 	andeq	r0, r0, r5, ror #12
     5b8:	311a02e0 	tstcc	sl, r0, ror #5
     5bc:	05000001 	streq	r0, [r0, #-1]
     5c0:	ed0a02af 	sfm	f0, 4, [sl, #-700]	; 0xfffffd44
     5c4:	ec000008 	stc	0, cr0, [r0], {8}
     5c8:	04060002 	streq	r0, [r6], #-2
     5cc:	00000458 	andeq	r0, r0, r8, asr r4
     5d0:	00003116 	andeq	r3, r0, r6, lsl r1
     5d4:	0005ee00 	andeq	lr, r5, r0, lsl #28
     5d8:	04761700 	ldrbteq	r1, [r6], #-1792	; 0xfffff900
     5dc:	1f170000 	svcne	0x00170000
     5e0:	17000001 	strne	r0, [r0, -r1]
     5e4:	000005ee 	andeq	r0, r0, lr, ror #11
     5e8:	00003117 	andeq	r3, r0, r7, lsl r1
     5ec:	04060000 	streq	r0, [r6], #-0
     5f0:	0000012e 	andeq	r0, r0, lr, lsr #2
     5f4:	05d00406 	ldrbeq	r0, [r0, #1030]	; 0x406
     5f8:	98160000 	ldmdals	r6, {}	; <UNPREDICTABLE>
     5fc:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
     600:	17000006 	strne	r0, [r0, -r6]
     604:	00000476 	andeq	r0, r0, r6, ror r4
     608:	00011f17 	andeq	r1, r1, r7, lsl pc
     60c:	00981700 	addseq	r1, r8, r0, lsl #14
     610:	31170000 	tstcc	r7, r0
     614:	00000000 	andeq	r0, r0, r0
     618:	05fa0406 	ldrbeq	r0, [sl, #1030]!	; 0x406
     61c:	31160000 	tstcc	r6, r0
     620:	32000000 	andcc	r0, r0, #0
     624:	17000006 	strne	r0, [r0, -r6]
     628:	00000476 	andeq	r0, r0, r6, ror r4
     62c:	00011f17 	andeq	r1, r1, r7, lsl pc
     630:	04060000 	streq	r0, [r6], #-0
     634:	0000061e 	andeq	r0, r0, lr, lsl r6
     638:	0000440b 	andeq	r4, r0, fp, lsl #8
     63c:	00064800 	andeq	r4, r6, r0, lsl #16
     640:	00250c00 	eoreq	r0, r5, r0, lsl #24
     644:	00020000 	andeq	r0, r2, r0
     648:	0000440b 	andeq	r4, r0, fp, lsl #8
     64c:	00065800 	andeq	r5, r6, r0, lsl #16
     650:	00250c00 	eoreq	r0, r5, r0, lsl #24
     654:	00000000 	andeq	r0, r0, r0
     658:	00045b08 	andeq	r5, r4, r8, lsl #22
     65c:	011f0500 	tsteq	pc, r0, lsl #10
     660:	0003151a 	andeq	r1, r3, sl, lsl r5
     664:	05ee1b00 	strbeq	r1, [lr, #2816]!	; 0xb00
     668:	050c0000 	streq	r0, [ip, #-0]
     66c:	9e080123 	adflsep	f0, f0, f3
     670:	19000006 	stmdbne	r0, {r1, r2}
     674:	00000483 	andeq	r0, r0, r3, lsl #9
     678:	11012505 	tstne	r1, r5, lsl #10
     67c:	0000069e 	muleq	r0, lr, r6
     680:	02ad1900 	adceq	r1, sp, #0, 18
     684:	26050000 	strcs	r0, [r5], -r0
     688:	00310701 	eorseq	r0, r1, r1, lsl #14
     68c:	19040000 	stmdbne	r4, {}	; <UNPREDICTABLE>
     690:	00000455 	andeq	r0, r0, r5, asr r4
     694:	0b012705 	bleq	4a2b0 <startup-0x1ffb5d50>
     698:	000006a4 	andeq	r0, r0, r4, lsr #13
     69c:	04060008 	streq	r0, [r6], #-8
     6a0:	00000665 	andeq	r0, r0, r5, ror #12
     6a4:	06580406 	ldrbeq	r0, [r8], -r6, lsl #8
     6a8:	1c1b0000 	ldcne	0, cr0, [fp], {-0}
     6ac:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
     6b0:	08013f05 	stmdaeq	r1, {r0, r2, r8, r9, sl, fp, ip, sp}
     6b4:	000006e3 	andeq	r0, r0, r3, ror #13
     6b8:	0004e819 	andeq	lr, r4, r9, lsl r8
     6bc:	01400500 	cmpeq	r0, r0, lsl #10
     6c0:	0006e312 	andeq	lr, r6, r2, lsl r3
     6c4:	45190000 	ldrmi	r0, [r9, #-0]
     6c8:	05000005 	streq	r0, [r0, #-5]
     6cc:	e3120141 	tst	r2, #1073741840	; 0x40000010
     6d0:	06000006 	streq	r0, [r0], -r6
     6d4:	00057219 	andeq	r7, r5, r9, lsl r2
     6d8:	01420500 	cmpeq	r2, r0, lsl #10
     6dc:	00005212 	andeq	r5, r0, r2, lsl r2
     6e0:	0b000c00 	bleq	36e8 <startup-0x1fffc918>
     6e4:	00000052 	andeq	r0, r0, r2, asr r0
     6e8:	000006f3 	strdeq	r0, [r0], -r3
     6ec:	0000250c 	andeq	r2, r0, ip, lsl #10
     6f0:	1c000200 	sfmne	f0, 4, [r0], {-0}
     6f4:	028005d0 	addeq	r0, r0, #208, 10	; 0x34000000
     6f8:	00080807 	andeq	r0, r8, r7, lsl #16
     6fc:	05d21900 	ldrbeq	r1, [r2, #2304]	; 0x900
     700:	82050000 	andhi	r0, r5, #0
     704:	00251802 	eoreq	r1, r5, r2, lsl #16
     708:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
     70c:	0000054b 	andeq	r0, r0, fp, asr #10
     710:	12028305 	andne	r8, r2, #335544320	; 0x14000000
     714:	00000121 	andeq	r0, r0, r1, lsr #2
     718:	02fe1904 	rscseq	r1, lr, #4, 18	; 0x10000
     71c:	84050000 	strhi	r0, [r5], #-0
     720:	08081002 	stmdaeq	r8, {r1, ip}
     724:	19080000 	stmdbne	r8, {}	; <UNPREDICTABLE>
     728:	000006b9 			; <UNDEFINED> instruction: 0x000006b9
     72c:	17028505 	strne	r8, [r2, -r5, lsl #10]
     730:	000001af 	andeq	r0, r0, pc, lsr #3
     734:	02411924 	subeq	r1, r1, #36, 18	; 0x90000
     738:	86050000 	strhi	r0, [r5], -r0
     73c:	00310f02 	eorseq	r0, r1, r2, lsl #30
     740:	19480000 	stmdbne	r8, {}^	; <UNPREDICTABLE>
     744:	0000047e 	andeq	r0, r0, lr, ror r4
     748:	2c028705 	stccs	7, cr8, [r2], {5}
     74c:	0000006e 	andeq	r0, r0, lr, rrx
     750:	06d51950 			; <UNDEFINED> instruction: 0x06d51950
     754:	88050000 	stmdahi	r5, {}	; <UNPREDICTABLE>
     758:	06aa1a02 	strteq	r1, [sl], r2, lsl #20
     75c:	19580000 	ldmdbne	r8, {}^	; <UNPREDICTABLE>
     760:	00000489 	andeq	r0, r0, r9, lsl #9
     764:	16028905 	strne	r8, [r2], -r5, lsl #18
     768:	00000107 	andeq	r0, r0, r7, lsl #2
     76c:	06da1968 	ldrbeq	r1, [sl], r8, ror #18
     770:	8a050000 	bhi	140778 <startup-0x1febf888>
     774:	01071602 	tsteq	r7, r2, lsl #12
     778:	19700000 	ldmdbne	r0!, {}^	; <UNPREDICTABLE>
     77c:	000003c5 	andeq	r0, r0, r5, asr #7
     780:	16028b05 	strne	r8, [r2], -r5, lsl #22
     784:	00000107 	andeq	r0, r0, r7, lsl #2
     788:	067d1978 			; <UNDEFINED> instruction: 0x067d1978
     78c:	8c050000 	stchi	0, cr0, [r5], {-0}
     790:	08181002 	ldmdaeq	r8, {r1, ip}
     794:	19800000 	stmibne	r0, {}	; <UNPREDICTABLE>
     798:	000002f2 	strdeq	r0, [r0], -r2
     79c:	10028d05 	andne	r8, r2, r5, lsl #26
     7a0:	00000828 	andeq	r0, r0, r8, lsr #16
     7a4:	05981988 	ldreq	r1, [r8, #2440]	; 0x988
     7a8:	8e050000 	cdphi	0, 0, cr0, cr5, cr0, {0}
     7ac:	00310f02 	eorseq	r0, r1, r2, lsl #30
     7b0:	19a00000 	stmibne	r0!, {}	; <UNPREDICTABLE>
     7b4:	000001cb 	andeq	r0, r0, fp, asr #3
     7b8:	16028f05 	strne	r8, [r2], -r5, lsl #30
     7bc:	00000107 	andeq	r0, r0, r7, lsl #2
     7c0:	00cb19a4 	sbceq	r1, fp, r4, lsr #19
     7c4:	90050000 	andls	r0, r5, r0
     7c8:	01071602 	tsteq	r7, r2, lsl #12
     7cc:	19ac0000 	stmibne	ip!, {}	; <UNPREDICTABLE>
     7d0:	000001b4 			; <UNDEFINED> instruction: 0x000001b4
     7d4:	16029105 	strne	r9, [r2], -r5, lsl #2
     7d8:	00000107 	andeq	r0, r0, r7, lsl #2
     7dc:	004b19b4 	strheq	r1, [fp], #-148	; 0xffffff6c
     7e0:	92050000 	andls	r0, r5, #0
     7e4:	01071602 	tsteq	r7, r2, lsl #12
     7e8:	19bc0000 	ldmibne	ip!, {}	; <UNPREDICTABLE>
     7ec:	0000005a 	andeq	r0, r0, sl, asr r0
     7f0:	16029305 	strne	r9, [r2], -r5, lsl #6
     7f4:	00000107 	andeq	r0, r0, r7, lsl #2
     7f8:	043119c4 	ldrteq	r1, [r1], #-2500	; 0xfffff63c
     7fc:	94050000 	strls	r0, [r5], #-0
     800:	00310802 	eorseq	r0, r1, r2, lsl #16
     804:	00cc0000 	sbceq	r0, ip, r0
     808:	0001270b 	andeq	r2, r1, fp, lsl #14
     80c:	00081800 	andeq	r1, r8, r0, lsl #16
     810:	00250c00 	eoreq	r0, r5, r0, lsl #24
     814:	00190000 	andseq	r0, r9, r0
     818:	0001270b 	andeq	r2, r1, fp, lsl #14
     81c:	00082800 	andeq	r2, r8, r0, lsl #16
     820:	00250c00 	eoreq	r0, r5, r0, lsl #24
     824:	00070000 	andeq	r0, r7, r0
     828:	0001270b 	andeq	r2, r1, fp, lsl #14
     82c:	00083800 	andeq	r3, r8, r0, lsl #16
     830:	00250c00 	eoreq	r0, r5, r0, lsl #24
     834:	00170000 	andseq	r0, r7, r0
     838:	9905f01c 	stmdbls	r5, {r2, r3, r4, ip, sp, lr, pc}
     83c:	085f0702 	ldmdaeq	pc, {r1, r8, r9, sl}^	; <UNPREDICTABLE>
     840:	7d190000 	ldcvc	0, cr0, [r9, #-0]
     844:	05000003 	streq	r0, [r0, #-3]
     848:	5f1b029c 	svcpl	0x001b029c
     84c:	00000008 	andeq	r0, r0, r8
     850:	00035519 	andeq	r5, r3, r9, lsl r5
     854:	029d0500 	addseq	r0, sp, #0, 10
     858:	00086f18 	andeq	r6, r8, r8, lsl pc
     85c:	0b007800 	bleq	1e864 <startup-0x1ffe179c>
     860:	0000030f 	andeq	r0, r0, pc, lsl #6
     864:	0000086f 	andeq	r0, r0, pc, ror #16
     868:	0000250c 	andeq	r2, r0, ip, lsl #10
     86c:	0b001d00 	bleq	7c74 <startup-0x1fff838c>
     870:	00000025 	andeq	r0, r0, r5, lsr #32
     874:	0000087f 	andeq	r0, r0, pc, ror r8
     878:	0000250c 	andeq	r2, r0, ip, lsl #10
     87c:	1d001d00 	stcne	13, cr1, [r0, #-0]
     880:	027e05f0 	rsbseq	r0, lr, #240, 10	; 0x3c000000
     884:	0008a403 	andeq	sl, r8, r3, lsl #8
     888:	04e11e00 	strbteq	r1, [r1], #3584	; 0xe00
     88c:	95050000 	strls	r0, [r5, #-0]
     890:	06f30b02 	ldrbteq	r0, [r3], r2, lsl #22
     894:	9c1e0000 	ldcls	0, cr0, [lr], {-0}
     898:	05000006 	streq	r0, [r0, #-6]
     89c:	380b029e 	stmdacc	fp, {r1, r2, r3, r4, r7, r9}
     8a0:	00000008 	andeq	r0, r0, r8
     8a4:	0001270b 	andeq	r2, r1, fp, lsl #14
     8a8:	0008b400 	andeq	fp, r8, r0, lsl #8
     8ac:	00250c00 	eoreq	r0, r5, r0, lsl #24
     8b0:	00180000 	andseq	r0, r8, r0
     8b4:	00009c07 	andeq	r9, r0, r7, lsl #24
     8b8:	b4040600 	strlt	r0, [r4], #-1536	; 0xfffffa00
     8bc:	1f000008 	svcne	0x00000008
     8c0:	000008ca 	andeq	r0, r0, sl, asr #17
     8c4:	00047617 	andeq	r7, r4, r7, lsl r6
     8c8:	04060000 	streq	r0, [r6], #-0
     8cc:	000008bf 			; <UNDEFINED> instruction: 0x000008bf
     8d0:	01990406 	orrseq	r0, r9, r6, lsl #8
     8d4:	e11f0000 	tst	pc, r0
     8d8:	17000008 	strne	r0, [r0, -r8]
     8dc:	00000031 	andeq	r0, r0, r1, lsr r0
     8e0:	e7040600 	str	r0, [r4, -r0, lsl #12]
     8e4:	06000008 	streq	r0, [r0], -r8
     8e8:	0008d604 	andeq	sp, r8, r4, lsl #12
     8ec:	06580b00 	ldrbeq	r0, [r8], -r0, lsl #22
     8f0:	08fd0000 	ldmeq	sp!, {}^	; <UNPREDICTABLE>
     8f4:	250c0000 	strcs	r0, [ip, #-0]
     8f8:	02000000 	andeq	r0, r0, #0
     8fc:	05b92000 	ldreq	r2, [r9, #0]!
     900:	2e050000 	cdpcs	0, 0, cr0, cr5, cr0, {0}
     904:	04761703 	ldrbteq	r1, [r6], #-1795	; 0xfffff8fd
     908:	b2200000 	eorlt	r0, r0, #0
     90c:	05000005 	streq	r0, [r0, #-5]
     910:	7c1d032f 	ldcvc	3, cr0, [sp], {47}	; 0x2f
     914:	0b000004 	bleq	92c <startup-0x1ffff6d4>
     918:	0000002c 	andeq	r0, r0, ip, lsr #32
     91c:	00000928 	andeq	r0, r0, r8, lsr #18
     920:	00002521 	andeq	r2, r0, r1, lsr #10
     924:	0003ff00 	andeq	pc, r3, r0, lsl #30
     928:	00091703 	andeq	r1, r9, r3, lsl #14
     92c:	01e12200 	mvneq	r2, r0, lsl #4
     930:	0f070000 	svceq	0x00070000
     934:	0009281e 	andeq	r2, r9, lr, lsl r8
     938:	a8030500 	stmdage	r3, {r8, sl}
     93c:	11200015 			; <UNDEFINED> instruction: 0x11200015
     940:	000005fa 	strdeq	r0, [r0], -sl
     944:	10010602 	andne	r0, r1, r2, lsl #12
     948:	00000963 	andeq	r0, r0, r3, ror #18
     94c:	06007812 			; <UNDEFINED> instruction: 0x06007812
     950:	00441302 	subeq	r1, r4, r2, lsl #6
     954:	12000000 	andne	r0, r0, #0
     958:	03060079 	movweq	r0, #24697	; 0x6079
     95c:	00004413 	andeq	r4, r0, r3, lsl r4
     960:	05000100 	streq	r0, [r0, #-256]	; 0xffffff00
     964:	000001c5 	andeq	r0, r0, r5, asr #3
     968:	3f020406 	svccc	0x00020406
     96c:	11000009 	tstne	r0, r9
     970:	00000012 	andeq	r0, r0, r2, lsl r0
     974:	1008062c 	andne	r0, r8, ip, lsr #12
     978:	000009b0 			; <UNDEFINED> instruction: 0x000009b0
     97c:	0000fe0e 	andeq	pc, r0, lr, lsl #28
     980:	09090600 	stmdbeq	r9, {r9, sl}
     984:	00000031 	andeq	r0, r0, r1, lsr r0
     988:	05f40e00 	ldrbeq	r0, [r4, #3584]!	; 0xe00
     98c:	0a060000 	beq	180994 <startup-0x1fe7f66c>
     990:	00003109 	andeq	r3, r0, r9, lsl #2
     994:	cf0e0400 	svcgt	0x000e0400
     998:	06000006 	streq	r0, [r0], -r6
     99c:	0031090b 	eorseq	r0, r1, fp, lsl #18
     9a0:	12080000 	andne	r0, r8, #0
     9a4:	06007870 			; <UNDEFINED> instruction: 0x06007870
     9a8:	09b00b0c 	ldmibeq	r0!, {r2, r3, r8, r9, fp}
     9ac:	000c0000 	andeq	r0, ip, r0
     9b0:	0009630b 	andeq	r6, r9, fp, lsl #6
     9b4:	0009c000 	andeq	ip, r9, r0
     9b8:	00250c00 	eoreq	r0, r5, r0, lsl #24
     9bc:	000f0000 	andeq	r0, pc, r0
     9c0:	00039605 	andeq	r9, r3, r5, lsl #12
     9c4:	030d0600 	movweq	r0, #54784	; 0xd600
     9c8:	0000096f 	andeq	r0, r0, pc, ror #18
     9cc:	00039505 	andeq	r9, r3, r5, lsl #10
     9d0:	0e0d0600 	cfmadd32eq	mvax0, mvfx0, mvfx13, mvfx0
     9d4:	000009d8 	ldrdeq	r0, [r0], -r8
     9d8:	096f0406 	stmdbeq	pc!, {r1, r2, sl}^	; <UNPREDICTABLE>
     9dc:	6d110000 	ldcvs	0, cr0, [r1, #-0]
     9e0:	24000005 	strcs	r0, [r0], #-5
     9e4:	61100f06 	tstvs	r0, r6, lsl #30
     9e8:	1200000a 	andne	r0, r0, #10
     9ec:	006f6567 	rsbeq	r6, pc, r7, ror #10
     9f0:	cc0f1006 	stcgt	0, cr1, [pc], {6}
     9f4:	00000009 	andeq	r0, r0, r9
     9f8:	00002f0e 	andeq	r2, r0, lr, lsl #30
     9fc:	09110600 	ldmdbeq	r1, {r9, sl}
     a00:	00000031 	andeq	r0, r0, r1, lsr r0
     a04:	00340e04 	eorseq	r0, r4, r4, lsl #28
     a08:	11060000 	mrsne	r0, (UNDEF: 6)
     a0c:	0000310e 	andeq	r3, r0, lr, lsl #2
     a10:	910e0800 	tstls	lr, r0, lsl #16
     a14:	06000006 	streq	r0, [r0], -r6
     a18:	00310912 	eorseq	r0, r1, r2, lsl r9
     a1c:	0e0c0000 	cdpeq	0, 0, cr0, cr12, cr0, {0}
     a20:	000006a4 	andeq	r0, r0, r4, lsr #13
     a24:	310e1206 	tstcc	lr, r6, lsl #4
     a28:	10000000 	andne	r0, r0, r0
     a2c:	0005ad0e 	andeq	sl, r5, lr, lsl #26
     a30:	0d130600 	ldceq	6, cr0, [r3, #-0]
     a34:	00000a72 	andeq	r0, r0, r2, ror sl
     a38:	07fd0e14 			; <UNDEFINED> instruction: 0x07fd0e14
     a3c:	14060000 	strne	r0, [r6], #-0
     a40:	000a720d 	andeq	r7, sl, sp, lsl #4
     a44:	a40e1800 	strge	r1, [lr], #-2048	; 0xfffff800
     a48:	06000008 	streq	r0, [r0], -r8
     a4c:	0a720d15 	beq	1c83ea8 <startup-0x1e37c158>
     a50:	0e1c0000 	cdpeq	0, 1, cr0, cr12, cr0, {0}
     a54:	00000082 	andeq	r0, r0, r2, lsl #1
     a58:	8d0d1606 	stchi	6, cr1, [sp, #-24]	; 0xffffffe8
     a5c:	2000000a 	andcs	r0, r0, sl
     a60:	0a6c1f00 	beq	1b08668 <startup-0x1e4f7998>
     a64:	6c170000 	ldcvs	0, cr0, [r7], {-0}
     a68:	0000000a 	andeq	r0, r0, sl
     a6c:	09de0406 	ldmibeq	lr, {r1, r2, sl}^
     a70:	04060000 	streq	r0, [r6], #-0
     a74:	00000a61 	andeq	r0, r0, r1, ror #20
     a78:	000a8d1f 	andeq	r8, sl, pc, lsl sp
     a7c:	0a6c1700 	beq	1b06684 <startup-0x1e4f997c>
     a80:	31170000 	tstcc	r7, r0
     a84:	17000000 	strne	r0, [r0, -r0]
     a88:	00000031 	andeq	r0, r0, r1, lsr r0
     a8c:	78040600 	stmdavc	r4, {r9, sl}
     a90:	0500000a 	streq	r0, [r0, #-10]
     a94:	00000376 	andeq	r0, r0, r6, ror r3
     a98:	de031706 	cdple	7, 0, cr1, cr3, cr6, {0}
     a9c:	05000009 	streq	r0, [r0, #-9]
     aa0:	00000375 	andeq	r0, r0, r5, ror r3
     aa4:	6c0c1706 	stcvs	7, cr1, [ip], {6}
     aa8:	0d00000a 	stceq	0, cr0, [r0, #-40]	; 0xffffffd8
     aac:	09190608 	ldmdbeq	r9, {r3, r9, sl}
     ab0:	00000adc 	ldrdeq	r0, [r0], -ip
     ab4:	0002b40e 	andeq	fp, r2, lr, lsl #8
     ab8:	131a0600 	tstne	sl, #0, 12
     abc:	00000044 	andeq	r0, r0, r4, asr #32
     ac0:	02830e00 	addeq	r0, r3, #0, 28
     ac4:	1b060000 	blne	180acc <startup-0x1fe7f534>
     ac8:	00004413 	andeq	r4, r0, r3, lsl r4
     acc:	340e0100 	strcc	r0, [lr], #-256	; 0xffffff00
     ad0:	06000007 	streq	r0, [r0], -r7
     ad4:	030f141c 	movweq	r1, #62492	; 0xf41c
     ad8:	00040000 	andeq	r0, r4, r0
     adc:	00036305 	andeq	r6, r3, r5, lsl #6
     ae0:	021d0600 	andseq	r0, sp, #0, 12
     ae4:	00000aab 	andeq	r0, r0, fp, lsr #21
     ae8:	0000440b 	andeq	r4, r0, fp, lsl #8
     aec:	000af800 	andeq	pc, sl, r0, lsl #16
     af0:	00250c00 	eoreq	r0, r5, r0, lsl #24
     af4:	00080000 	andeq	r0, r8, r0
     af8:	0006ed22 	andeq	lr, r6, r2, lsr #26
     afc:	16030800 	strne	r0, [r3], -r0, lsl #16
     b00:	00000ae8 	andeq	r0, r0, r8, ror #21
     b04:	37480305 	strbcc	r0, [r8, -r5, lsl #6]
     b08:	01222000 			; <UNDEFINED> instruction: 0x01222000
     b0c:	01000001 	tsteq	r0, r1
     b10:	00381519 	eorseq	r1, r8, r9, lsl r5
     b14:	03050000 	movweq	r0, #20480	; 0x5000
     b18:	200025a8 	andcs	r2, r0, r8, lsr #11
     b1c:	0002d422 	andeq	sp, r2, r2, lsr #8
     b20:	1d190100 	ldfnes	f0, [r9, #-0]
     b24:	00000038 	andeq	r0, r0, r8, lsr r0
     b28:	25ac0305 	strcs	r0, [ip, #773]!	; 0x305
     b2c:	ee232000 	cdp	0, 2, cr2, cr3, cr0, {0}
     b30:	01000004 	tsteq	r0, r4
     b34:	09c00a53 	stmibeq	r0, {r0, r1, r4, r6, r9, fp}^
     b38:	03050000 	movweq	r0, #20480	; 0x5000
     b3c:	20003754 	andcs	r3, r0, r4, asr r7
     b40:	00057723 	andeq	r7, r5, r3, lsr #14
     b44:	0a5e0100 	beq	1780f4c <startup-0x1e87f0b4>
     b48:	000009c0 	andeq	r0, r0, r0, asr #19
     b4c:	37800305 	strcc	r0, [r0, r5, lsl #6]
     b50:	08232000 	stmdaeq	r3!, {sp}
     b54:	01000004 	tsteq	r0, r4
     b58:	09c00a69 	stmibeq	r0, {r0, r3, r5, r6, r9, fp}^
     b5c:	03050000 	movweq	r0, #20480	; 0x5000
     b60:	200037ac 	andcs	r3, r0, ip, lsr #15
     b64:	00017123 	andeq	r7, r1, r3, lsr #2
     b68:	0a740100 	beq	1d00f70 <startup-0x1e2ff090>
     b6c:	000009c0 	andeq	r0, r0, r0, asr #19
     b70:	37d80305 	ldrbcc	r0, [r8, r5, lsl #6]
     b74:	1e232000 	cdpne	0, 2, cr2, cr3, cr0, {0}
     b78:	01000001 	tsteq	r0, r1
     b7c:	09c00a81 	stmibeq	r0, {r0, r7, r9, fp}^
     b80:	03050000 	movweq	r0, #20480	; 0x5000
     b84:	20003804 	andcs	r3, r0, r4, lsl #16
     b88:	0000b623 	andeq	fp, r0, r3, lsr #12
     b8c:	0a8c0100 	beq	fe300f94 <rear+0xde2fd710>
     b90:	000009c0 	andeq	r0, r0, r0, asr #19
     b94:	38300305 	ldmdacc	r0!, {r0, r2, r8, r9}
     b98:	6b222000 	blvs	888ba0 <startup-0x1f777460>
     b9c:	01000002 	tsteq	r0, r2
     ba0:	0a930fa3 	beq	fe4c4a34 <rear+0xde4c11b0>
     ba4:	03050000 	movweq	r0, #20480	; 0x5000
     ba8:	2000385c 	andcs	r3, r0, ip, asr r8
     bac:	0006f824 	andeq	pc, r6, r4, lsr #16
     bb0:	01520100 	cmpeq	r2, r0, lsl #2
     bb4:	00073806 	andeq	r3, r7, r6, lsl #16
     bb8:	0001b020 	andeq	fp, r1, r0, lsr #32
     bbc:	4f9c0100 	svcmi	0x009c0100
     bc0:	2500000c 	strcs	r0, [r0, #-12]
     bc4:	000006a9 	andeq	r0, r0, r9, lsr #13
     bc8:	0f015201 	svceq	0x00015201
     bcc:	00000031 	andeq	r0, r0, r1, lsr r0
     bd0:	47b49103 	ldrmi	r9, [r4, r3, lsl #2]!
     bd4:	0005cd25 	andeq	ip, r5, r5, lsr #26
     bd8:	01520100 	cmpeq	r2, r0, lsl #2
     bdc:	000c4f1c 	andeq	r4, ip, ip, lsl pc
     be0:	b0910300 	addslt	r0, r1, r0, lsl #6
     be4:	03502647 	cmpeq	r0, #74448896	; 0x4700000
     be8:	53010000 	movwpl	r0, #4096	; 0x1000
     bec:	00310901 	eorseq	r0, r1, r1, lsl #18
     bf0:	91020000 	mrsls	r0, (UNDEF: 2)
     bf4:	05a5266c 	streq	r2, [r5, #1644]!	; 0x66c
     bf8:	53010000 	movwpl	r0, #4096	; 0x1000
     bfc:	00311301 	eorseq	r1, r1, r1, lsl #6
     c00:	91020000 	mrsls	r0, (UNDEF: 2)
     c04:	02a22668 	adceq	r2, r2, #104, 12	; 0x6800000
     c08:	54010000 	strpl	r0, [r1], #-0
     c0c:	01270a01 			; <UNDEFINED> instruction: 0x01270a01
     c10:	91020000 	mrsls	r0, (UNDEF: 2)
     c14:	00eb265f 	rsceq	r2, fp, pc, asr r6
     c18:	56010000 	strpl	r0, [r1], -r0
     c1c:	0a9f0d01 	beq	fe7c4028 <rear+0xde7c07a4>
     c20:	91020000 	mrsls	r0, (UNDEF: 2)
     c24:	036f2660 	cmneq	pc, #96, 12	; 0x6000000
     c28:	57010000 	strpl	r0, [r1, -r0]
     c2c:	0c550c01 	mrrceq	12, 0, r0, r5, cr1
     c30:	91030000 	mrsls	r0, (UNDEF: 3)
     c34:	6a2747bc 	bvs	9d2b2c <startup-0x1f62d4d4>
     c38:	3c200007 	stccc	0, cr0, [r0], #-28	; 0xffffffe4
     c3c:	28000001 	stmdacs	r0, {r0}
     c40:	72010074 	andvc	r0, r1, #116	; 0x74
     c44:	00310d01 	eorseq	r0, r1, r1, lsl #26
     c48:	91020000 	mrsls	r0, (UNDEF: 2)
     c4c:	06000064 	streq	r0, [r0], -r4, rrx
     c50:	00012104 	andeq	r2, r1, r4, lsl #2
     c54:	0a930b00 	beq	fe4c385c <rear+0xde4bffd8>
     c58:	0c650000 	stcleq	0, cr0, [r5], #-0
     c5c:	250c0000 	strcs	r0, [ip, #-0]
     c60:	c7000000 	strgt	r0, [r0, -r0]
     c64:	03482900 	movteq	r2, #35072	; 0x8900
     c68:	4b010000 	blmi	40c70 <startup-0x1ffbf390>
     c6c:	07100601 	ldreq	r0, [r0, -r1, lsl #12]
     c70:	00282000 	eoreq	r2, r8, r0
     c74:	9c010000 	stcls	0, cr0, [r1], {-0}
     c78:	0003b12a 	andeq	fp, r3, sl, lsr #2
     c7c:	01430100 	mrseq	r0, (UNDEF: 83)
     c80:	0006cc06 	andeq	ip, r6, r6, lsl #24
     c84:	00004420 	andeq	r4, r0, r0, lsr #8
     c88:	9e9c0100 	fmllse	f0, f4, f0
     c8c:	2b00000c 	blcs	cc4 <startup-0x1ffff33c>
     c90:	43010066 	movwmi	r0, #4198	; 0x1066
     c94:	0a9f1801 	beq	fe7c6ca0 <rear+0xde7c341c>
     c98:	91020000 	mrsls	r0, (UNDEF: 2)
     c9c:	6a2a0074 	bvs	a80e74 <startup-0x1f57f18c>
     ca0:	01000003 	tsteq	r0, r3
     ca4:	a406012f 	strge	r0, [r6], #-303	; 0xfffffed1
     ca8:	28200005 	stmdacs	r0!, {r0, r2}
     cac:	01000001 	tsteq	r0, r1
     cb0:	000cea9c 	muleq	ip, ip, sl
     cb4:	00732b00 	rsbseq	r2, r3, r0, lsl #22
     cb8:	19012f01 	stmdbne	r1, {r0, r8, r9, sl, fp, sp}
     cbc:	00000a9f 	muleq	r0, pc, sl	; <UNPREDICTABLE>
     cc0:	286c9102 	stmdacs	ip!, {r1, r8, ip, pc}^
     cc4:	3001006a 	andcc	r0, r1, sl, rrx
     cc8:	00310901 	eorseq	r0, r1, r1, lsl #18
     ccc:	91020000 	mrsls	r0, (UNDEF: 2)
     cd0:	05b02774 	ldreq	r2, [r0, #1908]!	; 0x774
     cd4:	00f62000 	rscseq	r2, r6, r0
     cd8:	69280000 	stmdbvs	r8!, {}	; <UNPREDICTABLE>
     cdc:	01310100 	teqeq	r1, r0, lsl #2
     ce0:	0000310e 	andeq	r3, r0, lr, lsl #2
     ce4:	70910200 	addsvc	r0, r1, r0, lsl #4
     ce8:	3c2c0000 	stccc	0, cr0, [ip], #-0
     cec:	01000005 	tsteq	r0, r5
     cf0:	3406011d 	strcc	r0, [r6], #-285	; 0xfffffee3
     cf4:	70200005 	eorvc	r0, r0, r5
     cf8:	01000000 	mrseq	r0, (UNDEF: 0)
     cfc:	01902d9c 			; <UNDEFINED> instruction: 0x01902d9c
     d00:	13010000 	movwne	r0, #4096	; 0x1000
     d04:	00310501 	eorseq	r0, r1, r1, lsl #10
     d08:	04f60000 	ldrbteq	r0, [r6], #0
     d0c:	003e2000 	eorseq	r2, lr, r0
     d10:	9c010000 	stcls	0, cr0, [r1], {-0}
     d14:	00000d3a 	andeq	r0, r0, sl, lsr sp
     d18:	01006e2b 	tsteq	r0, fp, lsr #28
     d1c:	31110113 	tstcc	r1, r3, lsl r1
     d20:	02000000 	andeq	r0, r0, #0
     d24:	84267491 	strthi	r7, [r6], #-1169	; 0xfffffb6f
     d28:	01000004 	tsteq	r0, r4
     d2c:	31100114 	tstcc	r0, r4, lsl r1
     d30:	05000000 	streq	r0, [r0, #-0]
     d34:	00388003 	eorseq	r8, r8, r3
     d38:	e3240020 			; <UNDEFINED> instruction: 0xe3240020
     d3c:	01000000 	mrseq	r0, (UNDEF: 0)
     d40:	7c060101 	stfvcs	f0, [r6], {1}
     d44:	7a200004 	bvc	800d5c <startup-0x1f7ff2a4>
     d48:	01000000 	mrseq	r0, (UNDEF: 0)
     d4c:	000da19c 	muleq	sp, ip, r1
     d50:	00662b00 	rsbeq	r2, r6, r0, lsl #22
     d54:	1b010101 	blne	41160 <startup-0x1ffbeea0>
     d58:	00000a9f 	muleq	r0, pc, sl	; <UNPREDICTABLE>
     d5c:	2b6c9102 	blcs	1b2516c <startup-0x1e4dae94>
     d60:	01010073 	tsteq	r1, r3, ror r0
     d64:	0a9f2601 	beq	fe7ca570 <rear+0xde7c6cec>
     d68:	91020000 	mrsls	r0, (UNDEF: 2)
     d6c:	02ba2668 	adcseq	r2, sl, #104, 12	; 0x6800000
     d70:	02010000 	andeq	r0, r1, #0
     d74:	00310901 	eorseq	r0, r1, r1, lsl #18
     d78:	91020000 	mrsls	r0, (UNDEF: 2)
     d7c:	01902e74 	orrseq	r2, r0, r4, ror lr
     d80:	02010000 	andeq	r0, r1, #0
     d84:	00311201 	eorseq	r1, r1, r1, lsl #4
     d88:	0d900000 	ldceq	0, cr0, [r0]
     d8c:	002f0000 	eoreq	r0, pc, r0
     d90:	00009526 	andeq	r9, r0, r6, lsr #10
     d94:	01020100 	mrseq	r0, (UNDEF: 18)
     d98:	00003120 	andeq	r3, r0, r0, lsr #2
     d9c:	70910200 	addsvc	r0, r1, r0, lsl #4
     da0:	00463000 	subeq	r3, r6, r0
     da4:	e3010000 	movw	r0, #4096	; 0x1000
     da8:	0003a806 	andeq	sl, r3, r6, lsl #16
     dac:	0000d420 	andeq	sp, r0, r0, lsr #8
     db0:	f29c0100 	vaddw.s16	q0, q6, d0
     db4:	3100000d 	tstcc	r0, sp
     db8:	00726964 	rsbseq	r6, r2, r4, ror #18
     dbc:	310fe301 	tstcc	pc, r1, lsl #6
     dc0:	02000000 	andeq	r0, r0, #0
     dc4:	73316c91 	teqvc	r1, #37120	; 0x9100
     dc8:	1ce30100 	stfnee	f0, [r3]
     dcc:	00000a9f 	muleq	r0, pc, sl	; <UNPREDICTABLE>
     dd0:	22689102 	rsbcs	r9, r8, #-2147483648	; 0x80000000
     dd4:	000000c4 	andeq	r0, r0, r4, asr #1
     dd8:	3109e401 	tstcc	r9, r1, lsl #8
     ddc:	02000000 	andeq	r0, r0, #0
     de0:	54227491 	strtpl	r7, [r2], #-1169	; 0xfffffb6f
     de4:	01000001 	tsteq	r0, r1
     de8:	003115e4 	eorseq	r1, r1, r4, ror #11
     dec:	91020000 	mrsls	r0, (UNDEF: 2)
     df0:	a0320070 	eorsge	r0, r2, r0, ror r0
     df4:	01000004 	tsteq	r0, r4
     df8:	031806d5 	tsteq	r8, #223346688	; 0xd500000
     dfc:	00902000 	addseq	r2, r0, r0
     e00:	9c010000 	stcls	0, cr0, [r1], {-0}
     e04:	00000e64 	andeq	r0, r0, r4, ror #28
     e08:	01007331 	tsteq	r0, r1, lsr r3
     e0c:	0a9f1cd5 	beq	fe7c8168 <rear+0xde7c48e4>
     e10:	91020000 	mrsls	r0, (UNDEF: 2)
     e14:	00c42264 	sbceq	r2, r4, r4, ror #4
     e18:	d6010000 	strle	r0, [r1], -r0
     e1c:	00003109 	andeq	r3, r0, r9, lsl #2
     e20:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     e24:	00015422 	andeq	r5, r1, r2, lsr #8
     e28:	09d70100 	ldmibeq	r7, {r8}^
     e2c:	00000031 	andeq	r0, r0, r1, lsr r0
     e30:	27709102 	ldrbcs	r9, [r0, -r2, lsl #2]!
     e34:	2000032c 	andcs	r0, r0, ip, lsr #6
     e38:	0000006e 	andeq	r0, r0, lr, rrx
     e3c:	01006933 	tsteq	r0, r3, lsr r9
     e40:	00310dd8 	ldrsbteq	r0, [r1], -r8
     e44:	91020000 	mrsls	r0, (UNDEF: 2)
     e48:	0332276c 	teqeq	r2, #108, 14	; 0x1b00000
     e4c:	00582000 	subseq	r2, r8, r0
     e50:	c5220000 	strgt	r0, [r2, #-0]!
     e54:	01000005 	tsteq	r0, r5
     e58:	00310dd9 	ldrsbteq	r0, [r1], -r9
     e5c:	91020000 	mrsls	r0, (UNDEF: 2)
     e60:	00000068 	andeq	r0, r0, r8, rrx
     e64:	00029830 	andeq	r9, r2, r0, lsr r8
     e68:	06d00100 	ldrbeq	r0, [r0], r0, lsl #2
     e6c:	200002f8 	strdcs	r0, [r0], -r8
     e70:	00000020 	andeq	r0, r0, r0, lsr #32
     e74:	0e889c01 	cdpeq	12, 8, cr9, cr8, cr1, {0}
     e78:	66310000 	ldrtvs	r0, [r1], -r0
     e7c:	18d00100 	ldmne	r0, {r8}^
     e80:	00000a9f 	muleq	r0, pc, sl	; <UNPREDICTABLE>
     e84:	00749102 	rsbseq	r9, r4, r2, lsl #2
     e88:	0002de30 	andeq	sp, r2, r0, lsr lr
     e8c:	06c80100 	strbeq	r0, [r8], r0, lsl #2
     e90:	2000028e 	andcs	r0, r0, lr, lsl #5
     e94:	0000006a 	andeq	r0, r0, sl, rrx
     e98:	0edf9c01 	cdpeq	12, 13, cr9, cr15, cr1, {0}
     e9c:	73310000 	teqvc	r1, #0
     ea0:	19c80100 	stmibne	r8, {r8}^
     ea4:	00000a9f 	muleq	r0, pc, sl	; <UNPREDICTABLE>
     ea8:	346c9102 	strbtcc	r9, [ip], #-258	; 0xfffffefe
     eac:	200002a6 	andcs	r0, r0, r6, lsr #5
     eb0:	00000008 	andeq	r0, r0, r8
     eb4:	00000ec7 	andeq	r0, r0, r7, asr #29
     eb8:	0004a035 	andeq	sl, r4, r5, lsr r0
     ebc:	0dca0100 	stfeqe	f0, [sl]
     ec0:	00000031 	andeq	r0, r0, r1, lsr r0
     ec4:	2700002f 	strcs	r0, [r0, -pc, lsr #32]
     ec8:	200002ae 	andcs	r0, r0, lr, lsr #5
     ecc:	0000003c 	andeq	r0, r0, ip, lsr r0
     ed0:	01006933 	tsteq	r0, r3, lsr r9
     ed4:	00310ecb 	eorseq	r0, r1, fp, asr #29
     ed8:	91020000 	mrsls	r0, (UNDEF: 2)
     edc:	30000074 	andcc	r0, r0, r4, ror r0
     ee0:	00000561 	andeq	r0, r0, r1, ror #10
     ee4:	cc06b401 	cfstrsgt	mvf11, [r6], {1}
     ee8:	c2200001 	eorgt	r0, r0, #1
     eec:	01000000 	mrseq	r0, (UNDEF: 0)
     ef0:	000f6c9c 	muleq	pc, ip, ip	; <UNPREDICTABLE>
     ef4:	00733100 	rsbseq	r3, r3, r0, lsl #2
     ef8:	6c1ab401 	cfldrsvs	mvf11, [sl], {1}
     efc:	0200000f 	andeq	r0, r0, #15
     f00:	78315c91 	ldmdavc	r1!, {r0, r4, r7, sl, fp, ip, lr}
     f04:	21b40100 			; <UNDEFINED> instruction: 0x21b40100
     f08:	00000031 	andeq	r0, r0, r1, lsr r0
     f0c:	31589102 	cmpcc	r8, r2, lsl #2
     f10:	b4010079 	strlt	r0, [r1], #-121	; 0xffffff87
     f14:	00003128 	andeq	r3, r0, r8, lsr #2
     f18:	54910200 	ldrpl	r0, [r1], #512	; 0x200
     f1c:	01006933 	tsteq	r0, r3, lsr r9
     f20:	003109b5 	ldrhteq	r0, [r1], -r5
     f24:	91020000 	mrsls	r0, (UNDEF: 2)
     f28:	006a3374 	rsbeq	r3, sl, r4, ror r3
     f2c:	310bb501 	tstcc	fp, r1, lsl #10
     f30:	02000000 	andeq	r0, r0, #0
     f34:	6b337091 	blvs	cdd180 <startup-0x1f322e80>
     f38:	0db50100 	ldfeqs	f0, [r5]
     f3c:	00000031 	andeq	r0, r0, r1, lsr r0
     f40:	226c9102 	rsbcs	r9, ip, #-2147483648	; 0x80000000
     f44:	000000a7 	andeq	r0, r0, r7, lsr #1
     f48:	3110b501 	tstcc	r0, r1, lsl #10
     f4c:	02000000 	andeq	r0, r0, #0
     f50:	0a276891 	beq	9db19c <startup-0x1f624e64>
     f54:	5a200002 	bpl	800f64 <startup-0x1f7ff09c>
     f58:	22000000 	andcs	r0, r0, #0
     f5c:	000001ec 	andeq	r0, r0, ip, ror #3
     f60:	441bbf01 	ldrmi	fp, [fp], #-3841	; 0xfffff0ff
     f64:	02000000 	andeq	r0, r0, #0
     f68:	00006791 	muleq	r0, r1, r7
     f6c:	0adc0406 	beq	ff701f8c <rear+0xdf6fe708>
     f70:	5e360000 	cdppl	0, 3, cr0, cr6, cr0, {0}
     f74:	01000003 	tsteq	r0, r3
     f78:	01a00dae 	lsreq	r0, lr, #27
     f7c:	002c2000 	eoreq	r2, ip, r0
     f80:	9c010000 	stcls	0, cr0, [r1], {-0}
     f84:	00000fc3 	andeq	r0, r0, r3, asr #31
     f88:	01007331 	tsteq	r0, r1, lsr r3
     f8c:	0f6c21ae 	svceq	0x006c21ae
     f90:	91020000 	mrsls	r0, (UNDEF: 2)
     f94:	07343774 			; <UNDEFINED> instruction: 0x07343774
     f98:	ae010000 	cdpge	0, 0, cr0, cr1, cr0, {0}
     f9c:	00030f33 	andeq	r0, r3, r3, lsr pc
     fa0:	70910200 	addsvc	r0, r1, r0, lsl #4
     fa4:	0002b437 	andeq	fp, r2, r7, lsr r4
     fa8:	3dae0100 	stfccs	f0, [lr]
     fac:	00000031 	andeq	r0, r0, r1, lsr r0
     fb0:	376c9102 	strbcc	r9, [ip, -r2, lsl #2]!
     fb4:	00000283 	andeq	r0, r0, r3, lsl #5
     fb8:	3148ae01 	cmpcc	r8, r1, lsl #28
     fbc:	02000000 	andeq	r0, r0, #0
     fc0:	30006891 	mulcc	r0, r1, r8
     fc4:	00000198 	muleq	r0, r8, r1
     fc8:	f4063501 	vst3.8	{d3,d5,d7}, [r6], r1
     fcc:	ac200000 	stcge	0, cr0, [r0], #-0
     fd0:	01000000 	mrseq	r0, (UNDEF: 0)
     fd4:	000fe79c 	muleq	pc, ip, r7	; <UNPREDICTABLE>
     fd8:	006f3100 	rsbeq	r3, pc, r0, lsl #2
     fdc:	9f1a3501 	svcls	0x001a3501
     fe0:	0200000a 	andeq	r0, r0, #10
     fe4:	30007491 	mulcc	r0, r1, r4
     fe8:	00000039 	andeq	r0, r0, r9, lsr r0
     fec:	92062f01 	andls	r2, r6, #1, 30
     ff0:	62200000 	eorvs	r0, r0, #0
     ff4:	01000000 	mrseq	r0, (UNDEF: 0)
     ff8:	0010229c 	mulseq	r0, ip, r2
     ffc:	006f3100 	rsbeq	r3, pc, r0, lsl #2
    1000:	9f1b2f01 	svcls	0x001b2f01
    1004:	0200000a 	andeq	r0, r0, #10
    1008:	9a276c91 	bls	9dc254 <startup-0x1f623dac>
    100c:	50200000 	eorpl	r0, r0, r0
    1010:	33000000 	movwcc	r0, #0
    1014:	30010069 	andcc	r0, r1, r9, rrx
    1018:	0000310e 	andeq	r3, r0, lr, lsl #2
    101c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1020:	5f300000 	svcpl	0x00300000
    1024:	01000002 	tsteq	r0, r2
    1028:	00300629 	eorseq	r0, r0, r9, lsr #12
    102c:	00622000 	rsbeq	r2, r2, r0
    1030:	9c010000 	stcls	0, cr0, [r1], {-0}
    1034:	0000105d 	andeq	r1, r0, sp, asr r0
    1038:	01006f31 	tsteq	r0, r1, lsr pc
    103c:	0a9f1a29 	beq	fe7c78e8 <rear+0xde7c4064>
    1040:	91020000 	mrsls	r0, (UNDEF: 2)
    1044:	0038276c 	eorseq	r2, r8, ip, ror #14
    1048:	00502000 	subseq	r2, r0, r0
    104c:	69330000 	ldmdbvs	r3!, {}	; <UNPREDICTABLE>
    1050:	0e2a0100 	sufeqe	f0, f2, f0
    1054:	00000031 	andeq	r0, r0, r1, lsr r0
    1058:	00749102 	rsbseq	r9, r4, r2, lsl #2
    105c:	04203200 	strteq	r3, [r0], #-512	; 0xfffffe00
    1060:	24010000 	strcs	r0, [r1], #-0
    1064:	00001006 	andeq	r1, r0, r6
    1068:	00002020 	andeq	r2, r0, r0, lsr #32
    106c:	9f9c0100 	svcls	0x009c0100
    1070:	31000010 	tstcc	r0, r0, lsl r0
    1074:	2401006f 	strcs	r0, [r1], #-111	; 0xffffff91
    1078:	000a9f1f 	andeq	r9, sl, pc, lsl pc
    107c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1080:	00030b37 	andeq	r0, r3, r7, lsr fp
    1084:	26240100 	strtcs	r0, [r4], -r0, lsl #2
    1088:	00000031 	andeq	r0, r0, r1, lsr r0
    108c:	37709102 	ldrbcc	r9, [r0, -r2, lsl #2]!
    1090:	00000312 	andeq	r0, r0, r2, lsl r3
    1094:	31322401 	teqcc	r2, r1, lsl #8
    1098:	02000000 	andeq	r0, r0, #0
    109c:	38006c91 	stmdacc	r0, {r0, r4, r7, sl, fp, sp, lr}
    10a0:	00000534 	andeq	r0, r0, r4, lsr r5
    10a4:	00061c01 	andeq	r1, r6, r1, lsl #24
    10a8:	0c200000 	stceq	0, cr0, [r0], #-0
    10ac:	01000000 	mrseq	r0, (UNDEF: 0)
    10b0:	0388009c 	orreq	r0, r8, #156	; 0x9c
    10b4:	00040000 	andeq	r0, r4, r0
    10b8:	00000382 	andeq	r0, r0, r2, lsl #7
    10bc:	06010104 	streq	r0, [r1], -r4, lsl #2
    10c0:	030c0000 	movweq	r0, #49152	; 0xc000
    10c4:	d3000008 	movwle	r0, #8
    10c8:	ec000003 	stc	0, cr0, [r0], {3}
    10cc:	24200008 	strtcs	r0, [r0], #-8
    10d0:	a2000005 	andge	r0, r0, #5
    10d4:	02000006 	andeq	r0, r0, #6
    10d8:	00000796 	muleq	r0, r6, r7
    10dc:	31170103 	tstcc	r7, r3, lsl #2
    10e0:	03000000 	movweq	r0, #0
    10e4:	03f50801 	mvnseq	r0, #65536	; 0x10000
    10e8:	55040000 	strpl	r0, [r4, #-0]
    10ec:	49000000 	stmdbmi	r0, {}	; <UNPREDICTABLE>
    10f0:	05000000 	streq	r0, [r0, #-0]
    10f4:	0000004e 	andeq	r0, r0, lr, asr #32
    10f8:	060003ff 			; <UNDEFINED> instruction: 0x060003ff
    10fc:	00000038 	andeq	r0, r0, r8, lsr r0
    1100:	75070403 	strvc	r0, [r7, #-1027]	; 0xfffffbfd
    1104:	06000000 	streq	r0, [r0], -r0
    1108:	0000004e 	andeq	r0, r0, lr, asr #32
    110c:	0001e107 	andeq	lr, r1, r7, lsl #2
    1110:	1e0f0200 	cdpne	2, 0, cr0, cr15, cr0, {0}
    1114:	00000049 	andeq	r0, r0, r9, asr #32
    1118:	25b00305 	ldrcs	r0, [r0, #773]!	; 0x305
    111c:	13082000 	movwne	r2, #32768	; 0x8000
    1120:	01000007 	tsteq	r0, r7
    1124:	0d4006b7 	stcleq	6, cr0, [r0, #-732]	; 0xfffffd24
    1128:	00d02000 	sbcseq	r2, r0, r0
    112c:	9c010000 	stcls	0, cr0, [r1], {-0}
    1130:	000000c6 	andeq	r0, r0, r6, asr #1
    1134:	01006909 	tsteq	r0, r9, lsl #18
    1138:	00250db8 	strhteq	r0, [r5], -r8
    113c:	91020000 	mrsls	r0, (UNDEF: 2)
    1140:	006a0977 	rsbeq	r0, sl, r7, ror r9
    1144:	2511b801 	ldrcs	fp, [r1, #-2049]	; 0xfffff7ff
    1148:	02000000 	andeq	r0, r0, #0
    114c:	7c077691 	stcvc	6, cr7, [r7], {145}	; 0x91
    1150:	01000009 	tsteq	r0, r9
    1154:	002514b8 	strhteq	r1, [r5], -r8
    1158:	91020000 	mrsls	r0, (UNDEF: 2)
    115c:	0063096f 	rsbeq	r0, r3, pc, ror #18
    1160:	2520b801 	strcs	fp, [r0, #-2049]!	; 0xfffff7ff
    1164:	02000000 	andeq	r0, r0, #0
    1168:	6b097591 	blvs	25e7b4 <startup-0x1fda184c>
    116c:	12b90100 	adcsne	r0, r9, #0, 2
    1170:	0000004e 	andeq	r0, r0, lr, asr #32
    1174:	00709102 	rsbseq	r9, r0, r2, lsl #2
    1178:	0007460a 	andeq	r4, r7, sl, lsl #12
    117c:	06a60100 	strteq	r0, [r6], r0, lsl #2
    1180:	20000cbc 			; <UNDEFINED> instruction: 0x20000cbc
    1184:	00000084 	andeq	r0, r0, r4, lsl #1
    1188:	01159c01 	tsteq	r5, r1, lsl #24
    118c:	780b0000 	stmdavc	fp, {}	; <UNPREDICTABLE>
    1190:	15a60100 	strne	r0, [r6, #256]!	; 0x100
    1194:	0000004e 	andeq	r0, r0, lr, asr #32
    1198:	0b6c9102 	bleq	1b255a8 <startup-0x1e4daa58>
    119c:	a6010079 			; <UNDEFINED> instruction: 0xa6010079
    11a0:	00004e21 	andeq	r4, r0, r1, lsr #28
    11a4:	68910200 	ldmvs	r1, {r9}
    11a8:	00079107 	andeq	r9, r7, r7, lsl #2
    11ac:	0da70100 	stfeqs	f0, [r7]
    11b0:	00000025 	andeq	r0, r0, r5, lsr #32
    11b4:	07739102 	ldrbeq	r9, [r3, -r2, lsl #2]!
    11b8:	000007be 			; <UNDEFINED> instruction: 0x000007be
    11bc:	1509a801 	strne	sl, [r9, #-2049]	; 0xfffff7ff
    11c0:	02000001 	andeq	r0, r0, #1
    11c4:	0c007491 	cfstrseq	mvf7, [r0], {145}	; 0x91
    11c8:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    11cc:	610d0074 	tstvs	sp, r4, ror r0
    11d0:	01000007 	tsteq	r0, r7
    11d4:	0c8606a0 	stceq	6, cr0, [r6], {160}	; 0xa0
    11d8:	00362000 	eorseq	r2, r6, r0
    11dc:	9c010000 	stcls	0, cr0, [r1], {-0}
    11e0:	00000140 	andeq	r0, r0, r0, asr #2
    11e4:	01006909 	tsteq	r0, r9, lsl #18
    11e8:	011509a1 	tsteq	r5, r1, lsr #19
    11ec:	91020000 	mrsls	r0, (UNDEF: 2)
    11f0:	c4080074 	strgt	r0, [r8], #-116	; 0xffffff8c
    11f4:	01000007 	tsteq	r0, r7
    11f8:	0c2c0696 	stceq	6, cr0, [ip], #-600	; 0xfffffda8
    11fc:	005a2000 	subseq	r2, sl, r0
    1200:	9c010000 	stcls	0, cr0, [r1], {-0}
    1204:	00000189 	andeq	r0, r0, r9, lsl #3
    1208:	000c320e 	andeq	r3, ip, lr, lsl #4
    120c:	00004a20 	andeq	r4, r0, r0, lsr #20
    1210:	08360700 	ldmdaeq	r6!, {r8, r9, sl}
    1214:	97010000 	strls	r0, [r1, -r0]
    1218:	0001150e 	andeq	r1, r1, lr, lsl #10
    121c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1220:	000c560e 	andeq	r5, ip, lr, lsl #12
    1224:	00001a20 	andeq	r1, r0, r0, lsr #20
    1228:	64610900 	strbtvs	r0, [r1], #-2304	; 0xfffff700
    122c:	9a010064 	bls	413c4 <startup-0x1ffbec3c>
    1230:	00011512 	andeq	r1, r1, r2, lsl r5
    1234:	70910200 	addsvc	r0, r1, r0, lsl #4
    1238:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    123c:	000007d9 	ldrdeq	r0, [r0], -r9
    1240:	e6068e01 	str	r8, [r6], -r1, lsl #28
    1244:	4620000b 	strtmi	r0, [r0], -fp
    1248:	01000000 	mrseq	r0, (UNDEF: 0)
    124c:	0001be9c 	muleq	r1, ip, lr
    1250:	07340f00 	ldreq	r0, [r4, -r0, lsl #30]!
    1254:	8e010000 	cdphi	0, 0, cr0, cr1, cr0, {0}
    1258:	00002521 	andeq	r2, r0, r1, lsr #10
    125c:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    1260:	00097c0f 	andeq	r7, r9, pc, lsl #24
    1264:	2f8e0100 	svccs	0x008e0100
    1268:	00000025 	andeq	r0, r0, r5, lsr #32
    126c:	00769102 	rsbseq	r9, r6, r2, lsl #2
    1270:	00083b08 	andeq	r3, r8, r8, lsl #22
    1274:	06860100 	streq	r0, [r6], r0, lsl #2
    1278:	20000ba0 	andcs	r0, r0, r0, lsr #23
    127c:	00000046 	andeq	r0, r0, r6, asr #32
    1280:	01f39c01 	mvnseq	r9, r1, lsl #24
    1284:	630b0000 	movwvs	r0, #45056	; 0xb000
    1288:	0100646d 	tsteq	r0, sp, ror #8
    128c:	00252486 	eoreq	r2, r5, r6, lsl #9
    1290:	91020000 	mrsls	r0, (UNDEF: 2)
    1294:	097c0f77 	ldmdbeq	ip!, {r0, r1, r2, r4, r5, r6, r8, r9, sl, fp}^
    1298:	86010000 	strhi	r0, [r1], -r0
    129c:	00002531 	andeq	r2, r0, r1, lsr r5
    12a0:	76910200 	ldrvc	r0, [r1], r0, lsl #4
    12a4:	079e0800 	ldreq	r0, [lr, r0, lsl #16]
    12a8:	6e010000 	cdpvs	0, 0, cr0, cr1, cr0, {0}
    12ac:	000b2a06 	andeq	r2, fp, r6, lsl #20
    12b0:	00007620 	andeq	r7, r0, r0, lsr #12
    12b4:	369c0100 	ldrcc	r0, [ip], r0, lsl #2
    12b8:	0f000002 	svceq	0x00000002
    12bc:	00000517 	andeq	r0, r0, r7, lsl r5
    12c0:	251c6e01 	ldrcs	r6, [ip, #-3585]	; 0xfffff1ff
    12c4:	02000000 	andeq	r0, r0, #0
    12c8:	7c0f7791 	stcvc	7, cr7, [pc], {145}	; 0x91
    12cc:	01000009 	tsteq	r0, r9
    12d0:	00252b6e 	eoreq	r2, r5, lr, ror #22
    12d4:	91020000 	mrsls	r0, (UNDEF: 2)
    12d8:	07721076 			; <UNDEFINED> instruction: 0x07721076
    12dc:	45010000 	strmi	r0, [r1, #-0]
    12e0:	00011505 	andeq	r1, r1, r5, lsl #10
    12e4:	00001100 	andeq	r1, r0, r0, lsl #2
    12e8:	00072712 	andeq	r2, r7, r2, lsl r7
    12ec:	09690100 	stmdbeq	r9!, {r8}^
    12f0:	00000025 	andeq	r0, r0, r5, lsr #32
    12f4:	20000b00 	andcs	r0, r0, r0, lsl #22
    12f8:	0000002a 	andeq	r0, r0, sl, lsr #32
    12fc:	02609c01 	rsbeq	r9, r0, #256	; 0x100
    1300:	7c0f0000 	stcvc	0, cr0, [pc], {-0}
    1304:	01000009 	tsteq	r0, r9
    1308:	00252369 	eoreq	r2, r5, r9, ror #6
    130c:	91020000 	mrsls	r0, (UNDEF: 2)
    1310:	39120077 	ldmdbcc	r2, {r0, r1, r2, r4, r5, r6}
    1314:	01000007 	tsteq	r0, r7
    1318:	00310f52 	eorseq	r0, r1, r2, asr pc
    131c:	0a740000 	beq	1d01324 <startup-0x1e2fecdc>
    1320:	008c2000 	addeq	r2, ip, r0
    1324:	9c010000 	stcls	0, cr0, [r1], {-0}
    1328:	000002ab 	andeq	r0, r0, fp, lsr #5
    132c:	00097c0f 	andeq	r7, r9, pc, lsl #24
    1330:	2a520100 	bcs	1481738 <startup-0x1eb7e8c8>
    1334:	00000031 	andeq	r0, r0, r1, lsr r0
    1338:	136f9102 	cmnne	pc, #-2147483648	; 0x80000000
    133c:	00000772 	andeq	r0, r0, r2, ror r7
    1340:	15054501 	strne	r4, [r5, #-1281]	; 0xfffffaff
    1344:	9b000001 	blls	1350 <startup-0x1fffecb0>
    1348:	11000002 	tstne	r0, r2
    134c:	086a0700 	stmdaeq	sl!, {r8, r9, sl}^
    1350:	5a010000 	bpl	41358 <startup-0x1ffbeca8>
    1354:	00003113 	andeq	r3, r0, r3, lsl r1
    1358:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    135c:	077e0800 	ldrbeq	r0, [lr, -r0, lsl #16]!
    1360:	40010000 	andmi	r0, r1, r0
    1364:	000a3606 	andeq	r3, sl, r6, lsl #12
    1368:	00003e20 	andeq	r3, r0, r0, lsr #28
    136c:	d09c0100 	addsle	r0, ip, r0, lsl #2
    1370:	10000002 	andne	r0, r0, r2
    1374:	00000772 	andeq	r0, r0, r2, ror r7
    1378:	15054501 	strne	r4, [r5, #-1281]	; 0xfffffaff
    137c:	11000001 	tstne	r0, r1
    1380:	ac080000 	stcge	0, cr0, [r8], {-0}
    1384:	01000007 	tsteq	r0, r7
    1388:	09dc062a 	ldmibeq	ip, {r1, r3, r5, r9, sl}^
    138c:	005a2000 	subseq	r2, sl, r0
    1390:	9c010000 	stcls	0, cr0, [r1], {-0}
    1394:	000002f6 	strdeq	r0, [r0], -r6
    1398:	00097c0f 	andeq	r7, r9, pc, lsl #24
    139c:	202a0100 	eorcs	r0, sl, r0, lsl #2
    13a0:	00000025 	andeq	r0, r0, r5, lsr #32
    13a4:	00779102 	rsbseq	r9, r7, r2, lsl #2
    13a8:	00074c0a 	andeq	r4, r7, sl, lsl #24
    13ac:	06200100 	strteq	r0, [r0], -r0, lsl #2
    13b0:	20000998 	mulcs	r0, r8, r9
    13b4:	00000044 	andeq	r0, r0, r4, asr #32
    13b8:	03279c01 			; <UNDEFINED> instruction: 0x03279c01
    13bc:	780b0000 	stmdavc	fp, {}	; <UNPREDICTABLE>
    13c0:	23200100 	nopcs	{0}	; <UNPREDICTABLE>
    13c4:	00000025 	andeq	r0, r0, r5, lsr #32
    13c8:	096f9102 	stmdbeq	pc!, {r1, r8, ip, pc}^	; <UNPREDICTABLE>
    13cc:	23010063 	movwcs	r0, #4195	; 0x1063
    13d0:	0000250d 	andeq	r2, r0, sp, lsl #10
    13d4:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    13d8:	07ec0a00 	strbeq	r0, [ip, r0, lsl #20]!
    13dc:	15010000 	strne	r0, [r1, #-0]
    13e0:	00094806 	andeq	r4, r9, r6, lsl #16
    13e4:	00005020 	andeq	r5, r0, r0, lsr #32
    13e8:	589c0100 	ldmpl	ip, {r8}
    13ec:	0b000003 	bleq	1400 <startup-0x1fffec00>
    13f0:	15010078 	strne	r0, [r1, #-120]	; 0xffffff88
    13f4:	00002525 	andeq	r2, r0, r5, lsr #10
    13f8:	6f910200 	svcvs	0x00910200
    13fc:	01006309 	tsteq	r0, r9, lsl #6
    1400:	00250d18 	eoreq	r0, r5, r8, lsl sp
    1404:	91020000 	mrsls	r0, (UNDEF: 2)
    1408:	5d140077 	ldcpl	0, cr0, [r4, #-476]	; 0xfffffe24
    140c:	01000008 	tsteq	r0, r8
    1410:	08ec0606 	stmiaeq	ip!, {r1, r2, r9, sl}^
    1414:	005c2000 	subseq	r2, ip, r0
    1418:	9c010000 	stcls	0, cr0, [r1], {-0}
    141c:	00070713 	andeq	r0, r7, r3, lsl r7
    1420:	05080100 	streq	r0, [r8, #-256]	; 0xffffff00
    1424:	00000115 	andeq	r0, r0, r5, lsl r1
    1428:	0000037c 	andeq	r0, r0, ip, ror r3
    142c:	51100011 	tstpl	r0, r1, lsl r0
    1430:	01000008 	tsteq	r0, r8
    1434:	0115050a 	tsteq	r5, sl, lsl #10
    1438:	00110000 	andseq	r0, r1, r0
    143c:	0b8f0000 	bleq	fe3c1444 <rear+0xde3bdbc0>
    1440:	00040000 	andeq	r0, r4, r0
    1444:	000004d8 	ldrdeq	r0, [r0], -r8
    1448:	06010104 	streq	r0, [r1], -r4, lsl #2
    144c:	710c0000 	mrsvc	r0, (UNDEF: 12)
    1450:	d3000008 	movwle	r0, #8
    1454:	10000003 	andne	r0, r0, r3
    1458:	3c20000e 	stccc	0, cr0, [r0], #-56	; 0xffffffc8
    145c:	5b000001 	blpl	1468 <startup-0x1fffeb98>
    1460:	02000009 	andeq	r0, r0, #9
    1464:	00750704 	rsbseq	r0, r5, r4, lsl #14
    1468:	04030000 	streq	r0, [r3], #-0
    146c:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    1470:	06010200 	streq	r0, [r1], -r0, lsl #4
    1474:	000003f7 	strdeq	r0, [r0], -r7
    1478:	f5080102 			; <UNDEFINED> instruction: 0xf5080102
    147c:	02000003 	andeq	r0, r0, #3
    1480:	043a0502 	ldrteq	r0, [sl], #-1282	; 0xfffffafe
    1484:	02020000 	andeq	r0, r2, #0
    1488:	0002c107 	andeq	ip, r2, r7, lsl #2
    148c:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    1490:	000000f5 	strdeq	r0, [r0], -r5
    1494:	70070402 	andvc	r0, r7, r2, lsl #8
    1498:	02000000 	andeq	r0, r0, #0
    149c:	00f00508 	rscseq	r0, r0, r8, lsl #10
    14a0:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    14a4:	00006b07 	andeq	r6, r0, r7, lsl #22
    14a8:	03270400 			; <UNDEFINED> instruction: 0x03270400
    14ac:	22020000 	andcs	r0, r2, #0
    14b0:	00007719 	andeq	r7, r0, r9, lsl r7
    14b4:	7d040500 	cfstr32vc	mvfx0, [r4, #-0]
    14b8:	06000000 	streq	r0, [r0], -r0
    14bc:	0000050e 	andeq	r0, r0, lr, lsl #10
    14c0:	0003aa04 	andeq	sl, r3, r4, lsl #20
    14c4:	0e2c0300 	cdpeq	3, 2, cr0, cr12, cr0, {0}
    14c8:	0000004f 	andeq	r0, r0, pc, asr #32
    14cc:	00052304 	andeq	r2, r5, r4, lsl #6
    14d0:	0e720300 	cdpeq	3, 7, cr0, cr2, cr0, {0}
    14d4:	0000004f 	andeq	r0, r0, pc, asr #32
    14d8:	00032f07 	andeq	r2, r3, r7, lsl #30
    14dc:	015e0400 	cmpeq	lr, r0, lsl #8
    14e0:	00002517 	andeq	r2, r0, r7, lsl r5
    14e4:	03040800 	movweq	r0, #18432	; 0x4800
    14e8:	00c903a6 	sbceq	r0, r9, r6, lsr #7
    14ec:	21090000 	mrscs	r0, (UNDEF: 9)
    14f0:	03000003 	movweq	r0, #3
    14f4:	009a0ca8 	addseq	r0, sl, r8, lsr #25
    14f8:	74090000 	strvc	r0, [r9], #-0
    14fc:	03000002 	movweq	r0, #2
    1500:	00c913a9 	sbceq	r1, r9, r9, lsr #7
    1504:	0a000000 	beq	150c <startup-0x1fffeaf4>
    1508:	0000003a 	andeq	r0, r0, sl, lsr r0
    150c:	000000d9 	ldrdeq	r0, [r0], -r9
    1510:	0000250b 	andeq	r2, r0, fp, lsl #10
    1514:	0c000300 	stceq	3, cr0, [r0], {-0}
    1518:	09a30308 	stmibeq	r3!, {r3, r8, r9}
    151c:	000000fd 	strdeq	r0, [r0], -sp
    1520:	0005060d 	andeq	r0, r5, sp, lsl #12
    1524:	07a50300 	streq	r0, [r5, r0, lsl #6]!
    1528:	0000002c 	andeq	r0, r0, ip, lsr #32
    152c:	05150d00 	ldreq	r0, [r5, #-3328]	; 0xfffff300
    1530:	aa030000 	bge	c1538 <startup-0x1ff3eac8>
    1534:	0000a705 	andeq	sl, r0, r5, lsl #14
    1538:	04000400 	streq	r0, [r0], #-1024	; 0xfffffc00
    153c:	00000462 	andeq	r0, r0, r2, ror #8
    1540:	d903ab03 	stmdble	r3, {r0, r1, r8, r9, fp, sp, pc}
    1544:	04000000 	streq	r0, [r0], #-0
    1548:	00000228 	andeq	r0, r0, r8, lsr #4
    154c:	6b1baf03 	blvs	6ed160 <startup-0x1f912ea0>
    1550:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    1554:	1d040504 	cfstr32ne	mvfx0, [r4, #-16]
    1558:	02000001 	andeq	r0, r0, #1
    155c:	03fe0801 	mvnseq	r0, #65536	; 0x10000
    1560:	1d0f0000 	stcne	0, cr0, [pc, #-0]	; 1568 <startup-0x1fffea98>
    1564:	04000001 	streq	r0, [r0], #-1
    1568:	00000590 	muleq	r0, r0, r5
    156c:	56191605 	ldrpl	r1, [r9], -r5, lsl #12
    1570:	10000000 	andne	r0, r0, r0
    1574:	00000239 	andeq	r0, r0, r9, lsr r2
    1578:	082f0518 	stmdaeq	pc!, {r3, r4, r8, sl}	; <UNPREDICTABLE>
    157c:	0000018f 	andeq	r0, r0, pc, lsl #3
    1580:	0004830d 	andeq	r8, r4, sp, lsl #6
    1584:	13310500 	teqne	r1, #0, 10
    1588:	0000018f 	andeq	r0, r0, pc, lsl #3
    158c:	6b5f1100 	blvs	17c5994 <startup-0x1e83a66c>
    1590:	07320500 	ldreq	r0, [r2, -r0, lsl #10]!
    1594:	0000002c 	andeq	r0, r0, ip, lsr #32
    1598:	04d90d04 	ldrbeq	r0, [r9], #3332	; 0xd04
    159c:	32050000 	andcc	r0, r5, #0
    15a0:	00002c0b 	andeq	r2, r0, fp, lsl #24
    15a4:	220d0800 	andcs	r0, sp, #0, 16
    15a8:	05000002 	streq	r0, [r0, #-2]
    15ac:	002c1432 	eoreq	r1, ip, r2, lsr r4
    15b0:	0d0c0000 	stceq	0, cr0, [ip, #-0]
    15b4:	000005df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    15b8:	2c1b3205 	lfmcs	f3, 4, [fp], {5}
    15bc:	10000000 	andne	r0, r0, r0
    15c0:	00785f11 	rsbseq	r5, r8, r1, lsl pc
    15c4:	950b3305 	strls	r3, [fp, #-773]	; 0xfffffcfb
    15c8:	14000001 	strne	r0, [r0], #-1
    15cc:	35040500 	strcc	r0, [r4, #-1280]	; 0xfffffb00
    15d0:	0a000001 	beq	15dc <startup-0x1fffea24>
    15d4:	00000129 	andeq	r0, r0, r9, lsr #2
    15d8:	000001a5 	andeq	r0, r0, r5, lsr #3
    15dc:	0000250b 	andeq	r2, r0, fp, lsl #10
    15e0:	10000000 	andne	r0, r0, r0
    15e4:	0000025a 	andeq	r0, r0, sl, asr r2
    15e8:	08370524 	ldmdaeq	r7!, {r2, r5, r8, sl}
    15ec:	00000228 	andeq	r0, r0, r8, lsr #4
    15f0:	0000da0d 	andeq	sp, r0, sp, lsl #20
    15f4:	09390500 	ldmdbeq	r9!, {r8, sl}
    15f8:	0000002c 	andeq	r0, r0, ip, lsr #32
    15fc:	052b0d00 	streq	r0, [fp, #-3328]!	; 0xfffff300
    1600:	3a050000 	bcc	141608 <startup-0x1febe9f8>
    1604:	00002c09 	andeq	r2, r0, r9, lsl #24
    1608:	140d0400 	strne	r0, [sp], #-1024	; 0xfffffc00
    160c:	05000001 	streq	r0, [r0, #-1]
    1610:	002c093b 	eoreq	r0, ip, fp, lsr r9
    1614:	0d080000 	stceq	0, cr0, [r8, #-0]
    1618:	000006fd 	strdeq	r0, [r0], -sp
    161c:	2c093c05 	stccs	12, cr3, [r9], {5}
    1620:	0c000000 	stceq	0, cr0, [r0], {-0}
    1624:	0003840d 	andeq	r8, r3, sp, lsl #8
    1628:	093d0500 	ldmdbeq	sp!, {r8, sl}
    162c:	0000002c 	andeq	r0, r0, ip, lsr #32
    1630:	033e0d10 	teqeq	lr, #16, 26	; 0x400
    1634:	3e050000 	cdpcc	0, 0, cr0, cr5, cr0, {0}
    1638:	00002c09 	andeq	r2, r0, r9, lsl #24
    163c:	e40d1400 	str	r1, [sp], #-1024	; 0xfffffc00
    1640:	05000005 	streq	r0, [r0, #-5]
    1644:	002c093f 	eoreq	r0, ip, pc, lsr r9
    1648:	0d180000 	ldceq	0, cr0, [r8, #-0]
    164c:	00000444 	andeq	r0, r0, r4, asr #8
    1650:	2c094005 	stccs	0, cr4, [r9], {5}
    1654:	1c000000 	stcne	0, cr0, [r0], {-0}
    1658:	0006ae0d 	andeq	sl, r6, sp, lsl #28
    165c:	09410500 	stmdbeq	r1, {r8, sl}^
    1660:	0000002c 	andeq	r0, r0, ip, lsr #32
    1664:	36120020 	ldrcc	r0, [r2], -r0, lsr #32
    1668:	08000001 	stmdaeq	r0, {r0}
    166c:	084a0501 	stmdaeq	sl, {r0, r8, sl}^
    1670:	0000026d 	andeq	r0, r0, sp, ror #4
    1674:	0001d90d 	andeq	sp, r1, sp, lsl #18
    1678:	0a4b0500 	beq	12c2a80 <startup-0x1ed3d580>
    167c:	0000026d 	andeq	r0, r0, sp, ror #4
    1680:	00000d00 	andeq	r0, r0, r0, lsl #26
    1684:	4c050000 	stcmi	0, cr0, [r5], {-0}
    1688:	00026d09 	andeq	r6, r2, r9, lsl #26
    168c:	58138000 	ldmdapl	r3, {pc}
    1690:	05000005 	streq	r0, [r0, #-5]
    1694:	01290a4e 			; <UNDEFINED> instruction: 0x01290a4e
    1698:	01000000 	mrseq	r0, (UNDEF: 0)
    169c:	00016213 	andeq	r6, r1, r3, lsl r2
    16a0:	0a510500 	beq	1442aa8 <startup-0x1ebbd558>
    16a4:	00000129 	andeq	r0, r0, r9, lsr #2
    16a8:	0a000104 	beq	1ac0 <startup-0x1fffe540>
    16ac:	00000115 	andeq	r0, r0, r5, lsl r1
    16b0:	0000027d 	andeq	r0, r0, sp, ror r2
    16b4:	0000250b 	andeq	r2, r0, fp, lsl #10
    16b8:	12001f00 	andne	r1, r0, #0, 30
    16bc:	0000038d 	andeq	r0, r0, sp, lsl #7
    16c0:	5d050190 	stfpls	f0, [r5, #-576]	; 0xfffffdc0
    16c4:	0002c008 	andeq	ip, r2, r8
    16c8:	04830d00 	streq	r0, [r3], #3328	; 0xd00
    16cc:	5e050000 	cdppl	0, 0, cr0, cr5, cr0, {0}
    16d0:	0002c012 	andeq	ip, r2, r2, lsl r0
    16d4:	9b0d0000 	blls	3416dc <startup-0x1fcbe924>
    16d8:	05000004 	streq	r0, [r0, #-4]
    16dc:	002c065f 	eoreq	r0, ip, pc, asr r6
    16e0:	0d040000 	stceq	0, cr0, [r4, #-0]
    16e4:	000001f1 	strdeq	r0, [r0], -r1
    16e8:	c6096105 	strgt	r6, [r9], -r5, lsl #2
    16ec:	08000002 	stmdaeq	r0, {r1}
    16f0:	0001360d 	andeq	r3, r1, sp, lsl #12
    16f4:	1e620500 	cdpne	5, 6, cr0, cr2, cr0, {0}
    16f8:	00000228 	andeq	r0, r0, r8, lsr #4
    16fc:	04050088 	streq	r0, [r5], #-136	; 0xffffff78
    1700:	0000027d 	andeq	r0, r0, sp, ror r2
    1704:	0002d60a 	andeq	sp, r2, sl, lsl #12
    1708:	0002d600 	andeq	sp, r2, r0, lsl #12
    170c:	00250b00 	eoreq	r0, r5, r0, lsl #22
    1710:	001f0000 	andseq	r0, pc, r0
    1714:	02dc0405 	sbcseq	r0, ip, #83886080	; 0x5000000
    1718:	10140000 	andsne	r0, r4, r0
    171c:	0000044e 	andeq	r0, r0, lr, asr #8
    1720:	08750508 	ldmdaeq	r5!, {r3, r8, sl}^
    1724:	00000305 	andeq	r0, r0, r5, lsl #6
    1728:	00010e0d 	andeq	r0, r1, sp, lsl #28
    172c:	11760500 	cmnne	r6, r0, lsl #10
    1730:	00000305 	andeq	r0, r0, r5, lsl #6
    1734:	000c0d00 	andeq	r0, ip, r0, lsl #26
    1738:	77050000 	strvc	r0, [r5, -r0]
    173c:	00002c06 	andeq	r2, r0, r6, lsl #24
    1740:	05000400 	streq	r0, [r0, #-1024]	; 0xfffffc00
    1744:	00003a04 	andeq	r3, r0, r4, lsl #20
    1748:	046d1000 	strbteq	r1, [sp], #-0
    174c:	05680000 	strbeq	r0, [r8, #-0]!
    1750:	044e08b5 	strbeq	r0, [lr], #-2229	; 0xfffff74b
    1754:	5f110000 	svcpl	0x00110000
    1758:	b6050070 			; <UNDEFINED> instruction: 0xb6050070
    175c:	00030512 	andeq	r0, r3, r2, lsl r5
    1760:	5f110000 	svcpl	0x00110000
    1764:	b7050072 	smlsdxlt	r5, r2, r0, r0
    1768:	00002c07 	andeq	r2, r0, r7, lsl #24
    176c:	5f110400 	svcpl	0x00110400
    1770:	b8050077 	stmdalt	r5, {r0, r1, r2, r4, r5, r6}
    1774:	00002c07 	andeq	r2, r0, r7, lsl #24
    1778:	5b0d0800 	blpl	343780 <startup-0x1fcbc880>
    177c:	05000001 	streq	r0, [r0, #-1]
    1780:	004109b9 	strheq	r0, [r1], #-153	; 0xffffff67
    1784:	0d0c0000 	stceq	0, cr0, [ip, #-0]
    1788:	00000292 	muleq	r0, r2, r2
    178c:	4109ba05 	tstmi	r9, r5, lsl #20
    1790:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    1794:	66625f11 	uqadd16vs	r5, r2, r1
    1798:	11bb0500 			; <UNDEFINED> instruction: 0x11bb0500
    179c:	000002dd 	ldrdeq	r0, [r0], -sp
    17a0:	008c0d10 	addeq	r0, ip, r0, lsl sp
    17a4:	bc050000 	stclt	0, cr0, [r5], {-0}
    17a8:	00002c07 	andeq	r2, r0, r7, lsl #24
    17ac:	440d1800 	strmi	r1, [sp], #-2048	; 0xfffff800
    17b0:	05000001 	streq	r0, [r0, #-1]
    17b4:	01150ac3 	tsteq	r5, r3, asr #21
    17b8:	0d1c0000 	ldceq	0, cr0, [ip, #-0]
    17bc:	00000740 	andeq	r0, r0, r0, asr #14
    17c0:	c01dc505 	andsgt	ip, sp, r5, lsl #10
    17c4:	20000005 	andcs	r0, r0, r5
    17c8:	0007a50d 	andeq	sl, r7, sp, lsl #10
    17cc:	1dc70500 	cfstr64ne	mvdx0, [r7]
    17d0:	000005ea 	andeq	r0, r0, sl, ror #11
    17d4:	051d0d24 	ldreq	r0, [sp, #-3364]	; 0xfffff2dc
    17d8:	ca050000 	bgt	1417e0 <startup-0x1febe820>
    17dc:	00060e0d 	andeq	r0, r6, sp, lsl #28
    17e0:	c80d2800 	stmdagt	sp, {fp, sp}
    17e4:	05000006 	streq	r0, [r0, #-6]
    17e8:	062809cb 	strteq	r0, [r8], -fp, asr #19
    17ec:	112c0000 			; <UNDEFINED> instruction: 0x112c0000
    17f0:	0062755f 	rsbeq	r7, r2, pc, asr r5
    17f4:	dd11ce05 	ldcle	14, cr12, [r1, #-20]	; 0xffffffec
    17f8:	30000002 	andcc	r0, r0, r2
    17fc:	70755f11 	rsbsvc	r5, r5, r1, lsl pc
    1800:	12cf0500 	sbcne	r0, pc, #0, 10
    1804:	00000305 	andeq	r0, r0, r5, lsl #6
    1808:	755f1138 	ldrbvc	r1, [pc, #-312]	; 16d8 <startup-0x1fffe928>
    180c:	d0050072 	andle	r0, r5, r2, ror r0
    1810:	00002c07 	andeq	r2, r0, r7, lsl #24
    1814:	080d3c00 	stmdaeq	sp, {sl, fp, ip, sp}
    1818:	05000001 	streq	r0, [r0, #-1]
    181c:	062e11d3 			; <UNDEFINED> instruction: 0x062e11d3
    1820:	0d400000 	stcleq	0, cr0, [r0, #-0]
    1824:	00000696 	muleq	r0, r6, r6
    1828:	3e11d405 	cfmulscc	mvf13, mvf1, mvf5
    182c:	43000006 	movwmi	r0, #6
    1830:	626c5f11 	rsbvs	r5, ip, #17, 30	; 0x44
    1834:	11d70500 	bicsne	r0, r7, r0, lsl #10
    1838:	000002dd 	ldrdeq	r0, [r0], -sp
    183c:	01870d44 	orreq	r0, r7, r4, asr #26
    1840:	da050000 	ble	141848 <startup-0x1febe7b8>
    1844:	00002c07 	andeq	r2, r0, r7, lsl #24
    1848:	ac0d4c00 	stcge	12, cr4, [sp], {-0}
    184c:	05000001 	streq	r0, [r0, #-1]
    1850:	00820adb 	ldrdeq	r0, [r2], fp
    1854:	0d500000 	ldcleq	0, cr0, [r0, #-0]
    1858:	00000733 	andeq	r0, r0, r3, lsr r7
    185c:	6c12de05 	ldcvs	14, cr13, [r2], {5}
    1860:	54000004 	strpl	r0, [r0], #-4
    1864:	00050f0d 	andeq	r0, r5, sp, lsl #30
    1868:	0ce20500 	cfstr64eq	mvdx0, [r2]
    186c:	00000109 	andeq	r0, r0, r9, lsl #2
    1870:	04750d58 	ldrbteq	r0, [r5], #-3416	; 0xfffff2a8
    1874:	e4050000 	str	r0, [r5], #-0
    1878:	0000fd0e 	andeq	pc, r0, lr, lsl #26
    187c:	360d5c00 	strcc	r5, [sp], -r0, lsl #24
    1880:	05000003 	streq	r0, [r0, #-3]
    1884:	002c09e5 	eoreq	r0, ip, r5, ror #19
    1888:	00640000 	rsbeq	r0, r4, r0
    188c:	00002c15 	andeq	r2, r0, r5, lsl ip
    1890:	00046c00 	andeq	r6, r4, r0, lsl #24
    1894:	046c1600 	strbteq	r1, [ip], #-1536	; 0xfffffa00
    1898:	15160000 	ldrne	r0, [r6, #-0]
    189c:	16000001 	strne	r0, [r0], -r1
    18a0:	00000117 	andeq	r0, r0, r7, lsl r1
    18a4:	00002c16 	andeq	r2, r0, r6, lsl ip
    18a8:	04050000 	streq	r0, [r5], #-0
    18ac:	00000477 	andeq	r0, r0, r7, ror r4
    18b0:	00046c0f 	andeq	r6, r4, pc, lsl #24
    18b4:	04e11700 	strbteq	r1, [r1], #1792	; 0x700
    18b8:	04280000 	strteq	r0, [r8], #-0
    18bc:	08026005 	stmdaeq	r2, {r0, r2, sp, lr}
    18c0:	000005c0 	andeq	r0, r0, r0, asr #11
    18c4:	00043318 	andeq	r3, r4, r8, lsl r3
    18c8:	02620500 	rsbeq	r0, r2, #0, 10
    18cc:	00002c07 	andeq	r2, r0, r7, lsl #24
    18d0:	6a180000 	bvs	6018d8 <startup-0x1f9fe728>
    18d4:	05000001 	streq	r0, [r0, #-1]
    18d8:	9a0b0267 	bls	2c227c <startup-0x1fd3dd84>
    18dc:	04000006 	streq	r0, [r0], #-6
    18e0:	00027b18 	andeq	r7, r2, r8, lsl fp
    18e4:	02670500 	rsbeq	r0, r7, #0, 10
    18e8:	00069a14 	andeq	r9, r6, r4, lsl sl
    18ec:	31180800 	tstcc	r8, r0, lsl #16
    18f0:	05000002 	streq	r0, [r0, #-2]
    18f4:	9a1e0267 	bls	782298 <startup-0x1f87dd68>
    18f8:	0c000006 	stceq	0, cr0, [r0], {6}
    18fc:	00049618 	andeq	r9, r4, r8, lsl r6
    1900:	02690500 	rsbeq	r0, r9, #0, 10
    1904:	00002c08 	andeq	r2, r0, r8, lsl #24
    1908:	24181000 	ldrcs	r1, [r8], #-0
    190c:	05000000 	streq	r0, [r0, #-0]
    1910:	9a08026a 	bls	2022c0 <startup-0x1fdfdd40>
    1914:	14000008 	strne	r0, [r0], #-8
    1918:	0004c018 	andeq	ip, r4, r8, lsl r0
    191c:	026d0500 	rsbeq	r0, sp, #0, 10
    1920:	00002c07 	andeq	r2, r0, r7, lsl #24
    1924:	ae183000 	cdpge	0, 1, cr3, cr8, cr0, {0}
    1928:	05000004 	streq	r0, [r0, #-4]
    192c:	af16026e 	svcge	0x0016026e
    1930:	34000008 	strcc	r0, [r0], #-8
    1934:	00039f18 	andeq	r9, r3, r8, lsl pc
    1938:	02700500 	rsbseq	r0, r0, #0, 10
    193c:	00002c07 	andeq	r2, r0, r7, lsl #24
    1940:	b6183800 	ldrlt	r3, [r8], -r0, lsl #16
    1944:	05000004 	streq	r0, [r0, #-4]
    1948:	c00a0272 	andgt	r0, sl, r2, ror r2
    194c:	3c000008 	stccc	0, cr0, [r0], {8}
    1950:	00031918 	andeq	r1, r3, r8, lsl r9
    1954:	02750500 	rsbseq	r0, r5, #0, 10
    1958:	00018f13 	andeq	r8, r1, r3, lsl pc
    195c:	50184000 	andspl	r4, r8, r0
    1960:	05000002 	streq	r0, [r0, #-2]
    1964:	2c070276 	sfmcs	f0, 4, [r7], {118}	; 0x76
    1968:	44000000 	strmi	r0, [r0], #-0
    196c:	0006e818 	andeq	lr, r6, r8, lsl r8
    1970:	02770500 	rsbseq	r0, r7, #0, 10
    1974:	00018f13 	andeq	r8, r1, r3, lsl pc
    1978:	bb184800 	bllt	613980 <startup-0x1f9ec680>
    197c:	05000003 	streq	r0, [r0, #-3]
    1980:	c6140278 			; <UNDEFINED> instruction: 0xc6140278
    1984:	4c000008 	stcmi	0, cr0, [r0], {8}
    1988:	00028a18 	andeq	r8, r2, r8, lsl sl
    198c:	027b0500 	rsbseq	r0, fp, #0, 10
    1990:	00002c07 	andeq	r2, r0, r7, lsl #24
    1994:	a4185000 	ldrge	r5, [r8], #-0
    1998:	05000001 	streq	r0, [r0, #-1]
    199c:	1709027c 	smlsdxne	r9, ip, r2, r0
    19a0:	54000001 	strpl	r0, [r0], #-1
    19a4:	00040318 	andeq	r0, r4, r8, lsl r3
    19a8:	029f0500 	addseq	r0, pc, #0, 10
    19ac:	00087507 	andeq	r7, r8, r7, lsl #10
    19b0:	8d195800 	ldchi	8, cr5, [r9, #-0]
    19b4:	05000003 	streq	r0, [r0, #-3]
    19b8:	c01302a3 	andsgt	r0, r3, r3, lsr #5
    19bc:	48000002 	stmdami	r0, {r1}
    19c0:	02e91901 	rsceq	r1, r9, #16384	; 0x4000
    19c4:	a4050000 	strge	r0, [r5], #-0
    19c8:	027d1202 	rsbseq	r1, sp, #536870912	; 0x20000000
    19cc:	014c0000 	mrseq	r0, (UNDEF: 76)
    19d0:	00068719 	andeq	r8, r6, r9, lsl r7
    19d4:	02a80500 	adceq	r0, r8, #0, 10
    19d8:	0008d70c 	andeq	sp, r8, ip, lsl #14
    19dc:	1902dc00 	stmdbne	r2, {sl, fp, ip, lr, pc}
    19e0:	0000014c 	andeq	r0, r0, ip, asr #2
    19e4:	1002ad05 	andne	sl, r2, r5, lsl #26
    19e8:	0000065b 	andeq	r0, r0, fp, asr r6
    19ec:	311902e0 	tstcc	r9, r0, ror #5
    19f0:	05000001 	streq	r0, [r0, #-1]
    19f4:	e30a02af 	movw	r0, #41647	; 0xa2af
    19f8:	ec000008 	stc	0, cr0, [r0], {8}
    19fc:	04050002 	streq	r0, [r5], #-2
    1a00:	0000044e 	andeq	r0, r0, lr, asr #8
    1a04:	00002c15 	andeq	r2, r0, r5, lsl ip
    1a08:	0005e400 	andeq	lr, r5, r0, lsl #8
    1a0c:	046c1600 	strbteq	r1, [ip], #-1536	; 0xfffffa00
    1a10:	15160000 	ldrne	r0, [r6, #-0]
    1a14:	16000001 	strne	r0, [r0], -r1
    1a18:	000005e4 	andeq	r0, r0, r4, ror #11
    1a1c:	00002c16 	andeq	r2, r0, r6, lsl ip
    1a20:	04050000 	streq	r0, [r5], #-0
    1a24:	00000124 	andeq	r0, r0, r4, lsr #2
    1a28:	05c60405 	strbeq	r0, [r6, #1029]	; 0x405
    1a2c:	8e150000 	cdphi	0, 1, cr0, cr5, cr0, {0}
    1a30:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    1a34:	16000006 	strne	r0, [r0], -r6
    1a38:	0000046c 	andeq	r0, r0, ip, ror #8
    1a3c:	00011516 	andeq	r1, r1, r6, lsl r5
    1a40:	008e1600 	addeq	r1, lr, r0, lsl #12
    1a44:	2c160000 	ldccs	0, cr0, [r6], {-0}
    1a48:	00000000 	andeq	r0, r0, r0
    1a4c:	05f00405 	ldrbeq	r0, [r0, #1029]!	; 0x405
    1a50:	2c150000 	ldccs	0, cr0, [r5], {-0}
    1a54:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    1a58:	16000006 	strne	r0, [r0], -r6
    1a5c:	0000046c 	andeq	r0, r0, ip, ror #8
    1a60:	00011516 	andeq	r1, r1, r6, lsl r5
    1a64:	04050000 	streq	r0, [r5], #-0
    1a68:	00000614 	andeq	r0, r0, r4, lsl r6
    1a6c:	00003a0a 	andeq	r3, r0, sl, lsl #20
    1a70:	00063e00 	andeq	r3, r6, r0, lsl #28
    1a74:	00250b00 	eoreq	r0, r5, r0, lsl #22
    1a78:	00020000 	andeq	r0, r2, r0
    1a7c:	00003a0a 	andeq	r3, r0, sl, lsl #20
    1a80:	00064e00 	andeq	r4, r6, r0, lsl #28
    1a84:	00250b00 	eoreq	r0, r5, r0, lsl #22
    1a88:	00000000 	andeq	r0, r0, r0
    1a8c:	00045b07 	andeq	r5, r4, r7, lsl #22
    1a90:	011f0500 	tsteq	pc, r0, lsl #10
    1a94:	00030b1a 	andeq	r0, r3, sl, lsl fp
    1a98:	05ee1a00 	strbeq	r1, [lr, #2560]!	; 0xa00
    1a9c:	050c0000 	streq	r0, [ip, #-0]
    1aa0:	94080123 	strls	r0, [r8], #-291	; 0xfffffedd
    1aa4:	18000006 	stmdane	r0, {r1, r2}
    1aa8:	00000483 	andeq	r0, r0, r3, lsl #9
    1aac:	11012505 	tstne	r1, r5, lsl #10
    1ab0:	00000694 	muleq	r0, r4, r6
    1ab4:	02ad1800 	adceq	r1, sp, #0, 16
    1ab8:	26050000 	strcs	r0, [r5], -r0
    1abc:	002c0701 	eoreq	r0, ip, r1, lsl #14
    1ac0:	18040000 	stmdane	r4, {}	; <UNPREDICTABLE>
    1ac4:	00000455 	andeq	r0, r0, r5, asr r4
    1ac8:	0b012705 	bleq	4b6e4 <startup-0x1ffb491c>
    1acc:	0000069a 	muleq	r0, sl, r6
    1ad0:	04050008 	streq	r0, [r5], #-8
    1ad4:	0000065b 	andeq	r0, r0, fp, asr r6
    1ad8:	064e0405 	strbeq	r0, [lr], -r5, lsl #8
    1adc:	1c1a0000 	ldcne	0, cr0, [sl], {-0}
    1ae0:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    1ae4:	08013f05 	stmdaeq	r1, {r0, r2, r8, r9, sl, fp, ip, sp}
    1ae8:	000006d9 	ldrdeq	r0, [r0], -r9
    1aec:	0004e818 	andeq	lr, r4, r8, lsl r8
    1af0:	01400500 	cmpeq	r0, r0, lsl #10
    1af4:	0006d912 	andeq	sp, r6, r2, lsl r9
    1af8:	45180000 	ldrmi	r0, [r8, #-0]
    1afc:	05000005 	streq	r0, [r0, #-5]
    1b00:	d9120141 	ldmdble	r2, {r0, r6, r8}
    1b04:	06000006 	streq	r0, [r0], -r6
    1b08:	00057218 	andeq	r7, r5, r8, lsl r2
    1b0c:	01420500 	cmpeq	r2, r0, lsl #10
    1b10:	00004812 	andeq	r4, r0, r2, lsl r8
    1b14:	0a000c00 	beq	4b1c <startup-0x1fffb4e4>
    1b18:	00000048 	andeq	r0, r0, r8, asr #32
    1b1c:	000006e9 	andeq	r0, r0, r9, ror #13
    1b20:	0000250b 	andeq	r2, r0, fp, lsl #10
    1b24:	1b000200 	blne	232c <startup-0x1fffdcd4>
    1b28:	028005d0 	addeq	r0, r0, #208, 10	; 0x34000000
    1b2c:	0007fe07 	andeq	pc, r7, r7, lsl #28
    1b30:	05d21800 	ldrbeq	r1, [r2, #2048]	; 0x800
    1b34:	82050000 	andhi	r0, r5, #0
    1b38:	00251802 	eoreq	r1, r5, r2, lsl #16
    1b3c:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    1b40:	0000054b 	andeq	r0, r0, fp, asr #10
    1b44:	12028305 	andne	r8, r2, #335544320	; 0x14000000
    1b48:	00000117 	andeq	r0, r0, r7, lsl r1
    1b4c:	02fe1804 	rscseq	r1, lr, #4, 16	; 0x40000
    1b50:	84050000 	strhi	r0, [r5], #-0
    1b54:	07fe1002 	ldrbeq	r1, [lr, r2]!
    1b58:	18080000 	stmdane	r8, {}	; <UNPREDICTABLE>
    1b5c:	000006b9 			; <UNDEFINED> instruction: 0x000006b9
    1b60:	17028505 	strne	r8, [r2, -r5, lsl #10]
    1b64:	000001a5 	andeq	r0, r0, r5, lsr #3
    1b68:	02411824 	subeq	r1, r1, #36, 16	; 0x240000
    1b6c:	86050000 	strhi	r0, [r5], -r0
    1b70:	002c0f02 	eoreq	r0, ip, r2, lsl #30
    1b74:	18480000 	stmdane	r8, {}^	; <UNPREDICTABLE>
    1b78:	0000047e 	andeq	r0, r0, lr, ror r4
    1b7c:	2c028705 	stccs	7, cr8, [r2], {5}
    1b80:	00000064 	andeq	r0, r0, r4, rrx
    1b84:	06d51850 			; <UNDEFINED> instruction: 0x06d51850
    1b88:	88050000 	stmdahi	r5, {}	; <UNPREDICTABLE>
    1b8c:	06a01a02 	strteq	r1, [r0], r2, lsl #20
    1b90:	18580000 	ldmdane	r8, {}^	; <UNPREDICTABLE>
    1b94:	00000489 	andeq	r0, r0, r9, lsl #9
    1b98:	16028905 	strne	r8, [r2], -r5, lsl #18
    1b9c:	000000fd 	strdeq	r0, [r0], -sp
    1ba0:	06da1868 	ldrbeq	r1, [sl], r8, ror #16
    1ba4:	8a050000 	bhi	141bac <startup-0x1febe454>
    1ba8:	00fd1602 	rscseq	r1, sp, r2, lsl #12
    1bac:	18700000 	ldmdane	r0!, {}^	; <UNPREDICTABLE>
    1bb0:	000003c5 	andeq	r0, r0, r5, asr #7
    1bb4:	16028b05 	strne	r8, [r2], -r5, lsl #22
    1bb8:	000000fd 	strdeq	r0, [r0], -sp
    1bbc:	067d1878 			; <UNDEFINED> instruction: 0x067d1878
    1bc0:	8c050000 	stchi	0, cr0, [r5], {-0}
    1bc4:	080e1002 	stmdaeq	lr, {r1, ip}
    1bc8:	18800000 	stmne	r0, {}	; <UNPREDICTABLE>
    1bcc:	000002f2 	strdeq	r0, [r0], -r2
    1bd0:	10028d05 	andne	r8, r2, r5, lsl #26
    1bd4:	0000081e 	andeq	r0, r0, lr, lsl r8
    1bd8:	05981888 	ldreq	r1, [r8, #2184]	; 0x888
    1bdc:	8e050000 	cdphi	0, 0, cr0, cr5, cr0, {0}
    1be0:	002c0f02 	eoreq	r0, ip, r2, lsl #30
    1be4:	18a00000 	stmiane	r0!, {}	; <UNPREDICTABLE>
    1be8:	000001cb 	andeq	r0, r0, fp, asr #3
    1bec:	16028f05 	strne	r8, [r2], -r5, lsl #30
    1bf0:	000000fd 	strdeq	r0, [r0], -sp
    1bf4:	00cb18a4 	sbceq	r1, fp, r4, lsr #17
    1bf8:	90050000 	andls	r0, r5, r0
    1bfc:	00fd1602 	rscseq	r1, sp, r2, lsl #12
    1c00:	18ac0000 	stmiane	ip!, {}	; <UNPREDICTABLE>
    1c04:	000001b4 			; <UNDEFINED> instruction: 0x000001b4
    1c08:	16029105 	strne	r9, [r2], -r5, lsl #2
    1c0c:	000000fd 	strdeq	r0, [r0], -sp
    1c10:	004b18b4 	strheq	r1, [fp], #-132	; 0xffffff7c
    1c14:	92050000 	andls	r0, r5, #0
    1c18:	00fd1602 	rscseq	r1, sp, r2, lsl #12
    1c1c:	18bc0000 	ldmne	ip!, {}	; <UNPREDICTABLE>
    1c20:	0000005a 	andeq	r0, r0, sl, asr r0
    1c24:	16029305 	strne	r9, [r2], -r5, lsl #6
    1c28:	000000fd 	strdeq	r0, [r0], -sp
    1c2c:	043118c4 	ldrteq	r1, [r1], #-2244	; 0xfffff73c
    1c30:	94050000 	strls	r0, [r5], #-0
    1c34:	002c0802 	eoreq	r0, ip, r2, lsl #16
    1c38:	00cc0000 	sbceq	r0, ip, r0
    1c3c:	00011d0a 	andeq	r1, r1, sl, lsl #26
    1c40:	00080e00 	andeq	r0, r8, r0, lsl #28
    1c44:	00250b00 	eoreq	r0, r5, r0, lsl #22
    1c48:	00190000 	andseq	r0, r9, r0
    1c4c:	00011d0a 	andeq	r1, r1, sl, lsl #26
    1c50:	00081e00 	andeq	r1, r8, r0, lsl #28
    1c54:	00250b00 	eoreq	r0, r5, r0, lsl #22
    1c58:	00070000 	andeq	r0, r7, r0
    1c5c:	00011d0a 	andeq	r1, r1, sl, lsl #26
    1c60:	00082e00 	andeq	r2, r8, r0, lsl #28
    1c64:	00250b00 	eoreq	r0, r5, r0, lsl #22
    1c68:	00170000 	andseq	r0, r7, r0
    1c6c:	9905f01b 	stmdbls	r5, {r0, r1, r3, r4, ip, sp, lr, pc}
    1c70:	08550702 	ldmdaeq	r5, {r1, r8, r9, sl}^
    1c74:	7d180000 	ldcvc	0, cr0, [r8, #-0]
    1c78:	05000003 	streq	r0, [r0, #-3]
    1c7c:	551b029c 	ldrpl	r0, [fp, #-668]	; 0xfffffd64
    1c80:	00000008 	andeq	r0, r0, r8
    1c84:	00035518 	andeq	r5, r3, r8, lsl r5
    1c88:	029d0500 	addseq	r0, sp, #0, 10
    1c8c:	00086518 	andeq	r6, r8, r8, lsl r5
    1c90:	0a007800 	beq	1fc98 <startup-0x1ffe0368>
    1c94:	00000305 	andeq	r0, r0, r5, lsl #6
    1c98:	00000865 	andeq	r0, r0, r5, ror #16
    1c9c:	0000250b 	andeq	r2, r0, fp, lsl #10
    1ca0:	0a001d00 	beq	90a8 <startup-0x1fff6f58>
    1ca4:	00000025 	andeq	r0, r0, r5, lsr #32
    1ca8:	00000875 	andeq	r0, r0, r5, ror r8
    1cac:	0000250b 	andeq	r2, r0, fp, lsl #10
    1cb0:	1c001d00 	stcne	13, cr1, [r0], {-0}
    1cb4:	027e05f0 	rsbseq	r0, lr, #240, 10	; 0x3c000000
    1cb8:	00089a03 	andeq	r9, r8, r3, lsl #20
    1cbc:	04e11d00 	strbteq	r1, [r1], #3328	; 0xd00
    1cc0:	95050000 	strls	r0, [r5, #-0]
    1cc4:	06e90b02 	strbteq	r0, [r9], r2, lsl #22
    1cc8:	9c1d0000 	ldcls	0, cr0, [sp], {-0}
    1ccc:	05000006 	streq	r0, [r0, #-6]
    1cd0:	2e0b029e 	mcrcs	2, 0, r0, cr11, cr14, {4}
    1cd4:	00000008 	andeq	r0, r0, r8
    1cd8:	00011d0a 	andeq	r1, r1, sl, lsl #26
    1cdc:	0008aa00 	andeq	sl, r8, r0, lsl #20
    1ce0:	00250b00 	eoreq	r0, r5, r0, lsl #22
    1ce4:	00180000 	andseq	r0, r8, r0
    1ce8:	00009c06 	andeq	r9, r0, r6, lsl #24
    1cec:	aa040500 	bge	1030f4 <startup-0x1fefcf0c>
    1cf0:	1e000008 	cdpne	0, 0, cr0, cr0, cr8, {0}
    1cf4:	000008c0 	andeq	r0, r0, r0, asr #17
    1cf8:	00046c16 	andeq	r6, r4, r6, lsl ip
    1cfc:	04050000 	streq	r0, [r5], #-0
    1d00:	000008b5 			; <UNDEFINED> instruction: 0x000008b5
    1d04:	018f0405 	orreq	r0, pc, r5, lsl #8
    1d08:	d71e0000 	ldrle	r0, [lr, -r0]
    1d0c:	16000008 	strne	r0, [r0], -r8
    1d10:	0000002c 	andeq	r0, r0, ip, lsr #32
    1d14:	dd040500 	cfstr32le	mvfx0, [r4, #-0]
    1d18:	05000008 	streq	r0, [r0, #-8]
    1d1c:	0008cc04 	andeq	ip, r8, r4, lsl #24
    1d20:	064e0a00 	strbeq	r0, [lr], -r0, lsl #20
    1d24:	08f30000 	ldmeq	r3!, {}^	; <UNPREDICTABLE>
    1d28:	250b0000 	strcs	r0, [fp, #-0]
    1d2c:	02000000 	andeq	r0, r0, #0
    1d30:	05b91f00 	ldreq	r1, [r9, #3840]!	; 0xf00
    1d34:	2e050000 	cdpcs	0, 0, cr0, cr5, cr0, {0}
    1d38:	046c1703 	strbteq	r1, [ip], #-1795	; 0xfffff8fd
    1d3c:	b21f0000 	andslt	r0, pc, #0
    1d40:	05000005 	streq	r0, [r0, #-5]
    1d44:	721d032f 	andsvc	r0, sp, #-1140850688	; 0xbc000000
    1d48:	10000004 	andne	r0, r0, r4
    1d4c:	000005fa 	strdeq	r0, [r0], -sl
    1d50:	10010602 	andne	r0, r1, r2, lsl #12
    1d54:	00000931 	andeq	r0, r0, r1, lsr r9
    1d58:	06007811 			; <UNDEFINED> instruction: 0x06007811
    1d5c:	003a1302 	eorseq	r1, sl, r2, lsl #6
    1d60:	11000000 	mrsne	r0, (UNDEF: 0)
    1d64:	03060079 	movweq	r0, #24697	; 0x6079
    1d68:	00003a13 	andeq	r3, r0, r3, lsl sl
    1d6c:	04000100 	streq	r0, [r0], #-256	; 0xffffff00
    1d70:	000001c5 	andeq	r0, r0, r5, asr #3
    1d74:	0d020406 	cfstrseq	mvf0, [r2, #-24]	; 0xffffffe8
    1d78:	10000009 	andne	r0, r0, r9
    1d7c:	00000012 	andeq	r0, r0, r2, lsl r0
    1d80:	1008062c 	andne	r0, r8, ip, lsr #12
    1d84:	0000097e 	andeq	r0, r0, lr, ror r9
    1d88:	0000fe0d 	andeq	pc, r0, sp, lsl #28
    1d8c:	09090600 	stmdbeq	r9, {r9, sl}
    1d90:	0000002c 	andeq	r0, r0, ip, lsr #32
    1d94:	05f40d00 	ldrbeq	r0, [r4, #3328]!	; 0xd00
    1d98:	0a060000 	beq	181da0 <startup-0x1fe7e260>
    1d9c:	00002c09 	andeq	r2, r0, r9, lsl #24
    1da0:	cf0d0400 	svcgt	0x000d0400
    1da4:	06000006 	streq	r0, [r0], -r6
    1da8:	002c090b 	eoreq	r0, ip, fp, lsl #18
    1dac:	11080000 	mrsne	r0, (UNDEF: 8)
    1db0:	06007870 			; <UNDEFINED> instruction: 0x06007870
    1db4:	097e0b0c 	ldmdbeq	lr!, {r2, r3, r8, r9, fp}^
    1db8:	000c0000 	andeq	r0, ip, r0
    1dbc:	0009310a 	andeq	r3, r9, sl, lsl #2
    1dc0:	00098e00 	andeq	r8, r9, r0, lsl #28
    1dc4:	00250b00 	eoreq	r0, r5, r0, lsl #22
    1dc8:	000f0000 	andeq	r0, pc, r0
    1dcc:	00039504 	andeq	r9, r3, r4, lsl #10
    1dd0:	0e0d0600 	cfmadd32eq	mvax0, mvfx0, mvfx13, mvfx0
    1dd4:	0000099a 	muleq	r0, sl, r9
    1dd8:	093d0405 	ldmdbeq	sp!, {r0, r2, sl}
    1ddc:	6d100000 	ldcvs	0, cr0, [r0, #-0]
    1de0:	24000005 	strcs	r0, [r0], #-5
    1de4:	23100f06 	tstcs	r0, #6, 30
    1de8:	1100000a 	tstne	r0, sl
    1dec:	006f6567 	rsbeq	r6, pc, r7, ror #10
    1df0:	8e0f1006 	cdphi	0, 0, cr1, cr15, cr6, {0}
    1df4:	00000009 	andeq	r0, r0, r9
    1df8:	00002f0d 	andeq	r2, r0, sp, lsl #30
    1dfc:	09110600 	ldmdbeq	r1, {r9, sl}
    1e00:	0000002c 	andeq	r0, r0, ip, lsr #32
    1e04:	00340d04 	eorseq	r0, r4, r4, lsl #26
    1e08:	11060000 	mrsne	r0, (UNDEF: 6)
    1e0c:	00002c0e 	andeq	r2, r0, lr, lsl #24
    1e10:	910d0800 	tstls	sp, r0, lsl #16
    1e14:	06000006 	streq	r0, [r0], -r6
    1e18:	002c0912 	eoreq	r0, ip, r2, lsl r9
    1e1c:	0d0c0000 	stceq	0, cr0, [ip, #-0]
    1e20:	000006a4 	andeq	r0, r0, r4, lsr #13
    1e24:	2c0e1206 	sfmcs	f1, 4, [lr], {6}
    1e28:	10000000 	andne	r0, r0, r0
    1e2c:	0005ad0d 	andeq	sl, r5, sp, lsl #26
    1e30:	0d130600 	ldceq	6, cr0, [r3, #-0]
    1e34:	00000a34 	andeq	r0, r0, r4, lsr sl
    1e38:	07fd0d14 			; <UNDEFINED> instruction: 0x07fd0d14
    1e3c:	14060000 	strne	r0, [r6], #-0
    1e40:	000a340d 	andeq	r3, sl, sp, lsl #8
    1e44:	a40d1800 	strge	r1, [sp], #-2048	; 0xfffff800
    1e48:	06000008 	streq	r0, [r0], -r8
    1e4c:	0a340d15 	beq	d052a8 <startup-0x1f2fad58>
    1e50:	0d1c0000 	ldceq	0, cr0, [ip, #-0]
    1e54:	00000082 	andeq	r0, r0, r2, lsl #1
    1e58:	4f0d1606 	svcmi	0x000d1606
    1e5c:	2000000a 	andcs	r0, r0, sl
    1e60:	0a2e1e00 	beq	b89668 <startup-0x1f476998>
    1e64:	2e160000 	cdpcs	0, 1, cr0, cr6, cr0, {0}
    1e68:	0000000a 	andeq	r0, r0, sl
    1e6c:	09a00405 	stmibeq	r0!, {r0, r2, sl}
    1e70:	04050000 	streq	r0, [r5], #-0
    1e74:	00000a23 	andeq	r0, r0, r3, lsr #20
    1e78:	000a4f1e 	andeq	r4, sl, lr, lsl pc
    1e7c:	0a2e1600 	beq	b87684 <startup-0x1f47897c>
    1e80:	2c160000 	ldccs	0, cr0, [r6], {-0}
    1e84:	16000000 	strne	r0, [r0], -r0
    1e88:	0000002c 	andeq	r0, r0, ip, lsr #32
    1e8c:	3a040500 	bcc	103294 <startup-0x1fefcd6c>
    1e90:	0400000a 	streq	r0, [r0], #-10
    1e94:	00000375 	andeq	r0, r0, r5, ror r3
    1e98:	2e0c1706 	cdpcs	7, 0, cr1, cr12, cr6, {0}
    1e9c:	0a00000a 	beq	1ecc <startup-0x1fffe134>
    1ea0:	00000a55 	andeq	r0, r0, r5, asr sl
    1ea4:	00000a71 	andeq	r0, r0, r1, ror sl
    1ea8:	0000250b 	andeq	r2, r0, fp, lsl #10
    1eac:	20006300 	andcs	r6, r0, r0, lsl #6
    1eb0:	000008ce 	andeq	r0, r0, lr, asr #17
    1eb4:	61090501 	tstvs	r9, r1, lsl #10
    1eb8:	0500000a 	streq	r0, [r0, #-10]
    1ebc:	0035b803 	eorseq	fp, r5, r3, lsl #16
    1ec0:	08e62020 	stmiaeq	r6!, {r5, sp}^
    1ec4:	06010000 	streq	r0, [r1], -r0
    1ec8:	00002c05 	andeq	r2, r0, r5, lsl #24
    1ecc:	b0030500 	andlt	r0, r3, r0, lsl #10
    1ed0:	20200035 	eorcs	r0, r0, r5, lsr r0
    1ed4:	000008d7 	ldrdeq	r0, [r0], -r7
    1ed8:	2c050701 	stccs	7, cr0, [r5], {1}
    1edc:	05000000 	streq	r0, [r0, #-0]
    1ee0:	00388403 	eorseq	r8, r8, r3, lsl #8
    1ee4:	08dc2020 	ldmeq	ip, {r5, sp}^
    1ee8:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
    1eec:	00002c05 	andeq	r2, r0, r5, lsl #24
    1ef0:	b4030500 	strlt	r0, [r3], #-1280	; 0xfffffb00
    1ef4:	21200035 			; <UNDEFINED> instruction: 0x21200035
    1ef8:	000008a2 	andeq	r0, r0, r2, lsr #17
    1efc:	2c053001 	stccs	0, cr3, [r5], {1}
    1f00:	04000000 	streq	r0, [r0], #-0
    1f04:	4820000f 	stmdami	r0!, {r0, r1, r2, r3}
    1f08:	01000000 	mrseq	r0, (UNDEF: 0)
    1f0c:	000ae39c 	muleq	sl, ip, r3
    1f10:	07342200 	ldreq	r2, [r4, -r0, lsl #4]!
    1f14:	31010000 	mrscc	r0, (UNDEF: 1)
    1f18:	000a550c 	andeq	r5, sl, ip, lsl #10
    1f1c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1f20:	08bc2300 	ldmeq	ip!, {r8, r9, sp}
    1f24:	24010000 	strcs	r0, [r1], #-0
    1f28:	000ea406 	andeq	sl, lr, r6, lsl #8
    1f2c:	00006020 	andeq	r6, r0, r0, lsr #32
    1f30:	099c0100 	ldmibeq	ip, {r8}
    1f34:	2400000b 	strcs	r0, [r0], #-11
    1f38:	00000734 	andeq	r0, r0, r4, lsr r7
    1f3c:	55152401 	ldrpl	r2, [r5, #-1025]	; 0xfffffbff
    1f40:	0200000a 	andeq	r0, r0, #10
    1f44:	25007491 	strcs	r7, [r0, #-1169]	; 0xfffffb6f
    1f48:	0000000d 	andeq	r0, r0, sp
    1f4c:	2c051f01 	stccs	15, cr1, [r5], {1}
    1f50:	90000000 	andls	r0, r0, r0
    1f54:	1420000e 	strtne	r0, [r0], #-14
    1f58:	01000000 	mrseq	r0, (UNDEF: 0)
    1f5c:	089b259c 	ldmeq	fp, {r2, r3, r4, r7, r8, sl, sp}
    1f60:	1a010000 	bne	41f68 <startup-0x1ffbe098>
    1f64:	000b3506 	andeq	r3, fp, r6, lsl #10
    1f68:	000e7400 	andeq	r7, lr, r0, lsl #8
    1f6c:	00001c20 	andeq	r1, r0, r0, lsr #24
    1f70:	029c0100 	addseq	r0, ip, #0, 2
    1f74:	08b60201 	ldmeq	r6!, {r0, r9}
    1f78:	a9250000 	stmdbge	r5!, {}	; <UNPREDICTABLE>
    1f7c:	01000008 	tsteq	r0, r8
    1f80:	0b350615 	bleq	d437dc <startup-0x1f2bc824>
    1f84:	0e5c0000 	cdpeq	0, 5, cr0, cr12, cr0, {0}
    1f88:	00182000 	andseq	r2, r8, r0
    1f8c:	9c010000 	stcls	0, cr0, [r1], {-0}
    1f90:	0008b125 	andeq	fp, r8, r5, lsr #2
    1f94:	09100100 	ldmdbeq	r0, {r8}
    1f98:	00000a55 	andeq	r0, r0, r5, asr sl
    1f9c:	20000e40 	andcs	r0, r0, r0, asr #28
    1fa0:	0000001c 	andeq	r0, r0, ip, lsl r0
    1fa4:	c3269c01 			; <UNDEFINED> instruction: 0xc3269c01
    1fa8:	01000008 	tsteq	r0, r8
    1fac:	0e10060a 	cfmsub32eq	mvax0, mvfx0, mvfx0, mvfx10
    1fb0:	00302000 	eorseq	r2, r0, r0
    1fb4:	9c010000 	stcls	0, cr0, [r1], {-0}
    1fb8:	000e1627 	andeq	r1, lr, r7, lsr #12
    1fbc:	00001c20 	andeq	r1, r0, r0, lsr #24
    1fc0:	00692800 	rsbeq	r2, r9, r0, lsl #16
    1fc4:	2c0d0b01 			; <UNDEFINED> instruction: 0x2c0d0b01
    1fc8:	02000000 	andeq	r0, r0, #0
    1fcc:	00007491 	muleq	r0, r1, r4
    1fd0:	0002c700 	andeq	ip, r2, r0, lsl #14
    1fd4:	33000400 	movwcc	r0, #1024	; 0x400
    1fd8:	04000007 	streq	r0, [r0], #-7
    1fdc:	00060101 	andeq	r0, r6, r1, lsl #2
    1fe0:	09bb0c00 	ldmibeq	fp!, {sl, fp}
    1fe4:	03d30000 	bicseq	r0, r3, #0
    1fe8:	0f4c0000 	svceq	0x004c0000
    1fec:	02e62000 	rsceq	r2, r6, #0
    1ff0:	0afa0000 	beq	ffe81ff8 <rear+0xdfe7e774>
    1ff4:	01020000 	mrseq	r0, (UNDEF: 2)
    1ff8:	0003f508 	andeq	pc, r3, r8, lsl #10
    1ffc:	08ec0300 	stmiaeq	ip!, {r8, r9}^
    2000:	6e010000 	cdpvs	0, 0, cr0, cr1, cr0, {0}
    2004:	0011e606 	andseq	lr, r1, r6, lsl #12
    2008:	00004c20 	andeq	r4, r0, r0, lsr #24
    200c:	7a9c0100 	bvc	fe702414 <rear+0xde6feb90>
    2010:	04000000 	streq	r0, [r0], #-0
    2014:	6e010078 	mcrvs	0, 0, r0, cr1, cr8, {3}
    2018:	00007a17 	andeq	r7, r0, r7, lsl sl
    201c:	6c910200 	lfmvs	f0, 4, [r1], {0}
    2020:	01007904 	tsteq	r0, r4, lsl #18
    2024:	007a1e6e 	rsbseq	r1, sl, lr, ror #28
    2028:	91020000 	mrsls	r0, (UNDEF: 2)
    202c:	09690568 	stmdbeq	r9!, {r3, r5, r6, r8, sl}^
    2030:	6f010000 	svcvs	0x00010000
    2034:	00002513 	andeq	r2, r0, r3, lsl r5
    2038:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    203c:	00070706 	andeq	r0, r7, r6, lsl #14
    2040:	054d0100 	strbeq	r0, [sp, #-256]	; 0xffffff00
    2044:	0000007a 	andeq	r0, r0, sl, ror r0
    2048:	08000007 	stmdaeq	r0, {r0, r1, r2}
    204c:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    2050:	13030074 	movwne	r0, #12404	; 0x3074
    2054:	0100000a 	tsteq	r0, sl
    2058:	11bc0667 			; <UNDEFINED> instruction: 0x11bc0667
    205c:	002a2000 	eoreq	r2, sl, r0
    2060:	9c010000 	stcls	0, cr0, [r1], {-0}
    2064:	000000b3 	strheq	r0, [r0], -r3
    2068:	01006304 	tsteq	r0, r4, lsl #6
    206c:	00252567 	eoreq	r2, r5, r7, ror #10
    2070:	91020000 	mrsls	r0, (UNDEF: 2)
    2074:	07070677 	smlsdxeq	r7, r7, r6, r0
    2078:	4d010000 	stcmi	0, cr0, [r1, #-0]
    207c:	00007a05 	andeq	r7, r0, r5, lsl #20
    2080:	00000700 	andeq	r0, r0, r0, lsl #14
    2084:	000a0409 	andeq	r0, sl, r9, lsl #8
    2088:	06600100 	strbteq	r0, [r0], -r0, lsl #2
    208c:	2000118e 	andcs	r1, r0, lr, lsl #3
    2090:	0000002e 	andeq	r0, r0, lr, lsr #32
    2094:	00d89c01 	sbcseq	r9, r8, r1, lsl #24
    2098:	07060000 	streq	r0, [r6, -r0]
    209c:	01000007 	tsteq	r0, r7
    20a0:	007a054d 	rsbseq	r0, sl, sp, asr #10
    20a4:	00070000 	andeq	r0, r7, r0
    20a8:	09970900 	ldmibeq	r7, {r8, fp}
    20ac:	59010000 	stmdbpl	r1, {}	; <UNPREDICTABLE>
    20b0:	00116006 	andseq	r6, r1, r6
    20b4:	00002e20 	andeq	r2, r0, r0, lsr #28
    20b8:	fd9c0100 	ldc2	1, cr0, [ip]
    20bc:	06000000 	streq	r0, [r0], -r0
    20c0:	00000707 	andeq	r0, r0, r7, lsl #14
    20c4:	7a054d01 	bvc	1554d0 <startup-0x1feaab30>
    20c8:	07000000 	streq	r0, [r0, -r0]
    20cc:	af090000 	svcge	0x00090000
    20d0:	01000009 	tsteq	r0, r9
    20d4:	11320652 	teqne	r2, r2, asr r6
    20d8:	002e2000 	eoreq	r2, lr, r0
    20dc:	9c010000 	stcls	0, cr0, [r1], {-0}
    20e0:	00000122 	andeq	r0, r0, r2, lsr #2
    20e4:	00070706 	andeq	r0, r7, r6, lsl #14
    20e8:	054d0100 	strbeq	r0, [sp, #-256]	; 0xffffff00
    20ec:	0000007a 	andeq	r0, r0, sl, ror r0
    20f0:	09000007 	stmdbeq	r0, {r0, r1, r2}
    20f4:	00000937 	andeq	r0, r0, r7, lsr r9
    20f8:	04064b01 	streq	r4, [r6], #-2817	; 0xfffff4ff
    20fc:	2e200011 	miacs	acc0, r1, r0
    2100:	01000000 	mrseq	r0, (UNDEF: 0)
    2104:	0001599c 	muleq	r1, ip, r9
    2108:	07070a00 	streq	r0, [r7, -r0, lsl #20]
    210c:	4d010000 	stcmi	0, cr0, [r1, #-0]
    2110:	00007a05 	andeq	r7, r0, r5, lsl #20
    2114:	00014a00 	andeq	r4, r1, r0, lsl #20
    2118:	06000700 	streq	r0, [r0], -r0, lsl #14
    211c:	00000851 	andeq	r0, r0, r1, asr r8
    2120:	7a054f01 	bvc	155d2c <startup-0x1feaa2d4>
    2124:	07000000 	streq	r0, [r0, -r0]
    2128:	870b0000 	strhi	r0, [fp, -r0]
    212c:	01000009 	tsteq	r0, r9
    2130:	00250f42 	eoreq	r0, r5, r2, asr #30
    2134:	10c80000 	sbcne	r0, r8, r0
    2138:	003c2000 	eorseq	r2, ip, r0
    213c:	9c010000 	stcls	0, cr0, [r1], {-0}
    2140:	00000183 	andeq	r0, r0, r3, lsl #3
    2144:	0009a705 	andeq	sl, r9, r5, lsl #14
    2148:	0a460100 	beq	1182550 <startup-0x1ee7dab0>
    214c:	00000183 	andeq	r0, r0, r3, lsl #3
    2150:	006f9102 	rsbeq	r9, pc, r2, lsl #2
    2154:	fe080102 	cdp2	1, 0, cr0, cr8, cr2, {0}
    2158:	0b000003 	bleq	216c <startup-0x1fffde94>
    215c:	00000925 	andeq	r0, r0, r5, lsr #18
    2160:	250f3901 	strcs	r3, [pc, #-2305]	; 1867 <startup-0x1fffe799>
    2164:	8c000000 	stchi	0, cr0, [r0], {-0}
    2168:	3c200010 	stccc	0, cr0, [r0], #-64	; 0xffffffc0
    216c:	01000000 	mrseq	r0, (UNDEF: 0)
    2170:	0001b49c 	muleq	r1, ip, r4
    2174:	09fc0500 	ldmibeq	ip!, {r8, sl}^
    2178:	3d010000 	stccc	0, cr0, [r1, #-0]
    217c:	0001830a 	andeq	r8, r1, sl, lsl #6
    2180:	6f910200 	svcvs	0x00910200
    2184:	09710b00 	ldmdbeq	r1!, {r8, r9, fp}^
    2188:	30010000 	andcc	r0, r1, r0
    218c:	0000250f 	andeq	r2, r0, pc, lsl #10
    2190:	00105800 	andseq	r5, r0, r0, lsl #16
    2194:	00003420 	andeq	r3, r0, r0, lsr #8
    2198:	f09c0100 			; <UNDEFINED> instruction: 0xf09c0100
    219c:	0a000001 	beq	21a8 <startup-0x1fffde58>
    21a0:	00000956 	andeq	r0, r0, r6, asr r9
    21a4:	7a052c01 	bvc	14d1b0 <startup-0x1feb2e50>
    21a8:	e0000000 	and	r0, r0, r0
    21ac:	07000001 	streq	r0, [r0, -r1]
    21b0:	09620500 	stmdbeq	r2!, {r8, sl}^
    21b4:	34010000 	strcc	r0, [r1], #-0
    21b8:	0001830a 	andeq	r8, r1, sl, lsl #6
    21bc:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    21c0:	090e0300 	stmdbeq	lr, {r8, r9}
    21c4:	29010000 	stmdbcs	r1, {}	; <UNPREDICTABLE>
    21c8:	00102806 	andseq	r2, r0, r6, lsl #16
    21cc:	00003020 	andeq	r3, r0, r0, lsr #32
    21d0:	249c0100 	ldrcs	r0, [ip], #256	; 0x100
    21d4:	0c000002 	stceq	0, cr0, [r0], {2}
    21d8:	000001ec 	andeq	r0, r0, ip, ror #3
    21dc:	252b2901 	strcs	r2, [fp, #-2305]!	; 0xfffff6ff
    21e0:	02000000 	andeq	r0, r0, #0
    21e4:	56067791 			; <UNDEFINED> instruction: 0x56067791
    21e8:	01000009 	tsteq	r0, r9
    21ec:	007a052c 	rsbseq	r0, sl, ip, lsr #10
    21f0:	00070000 	andeq	r0, r7, r0
    21f4:	09450300 	stmdbeq	r5, {r8, r9}^
    21f8:	23010000 	movwcs	r0, #4096	; 0x1000
    21fc:	000ffe06 	andeq	pc, pc, r6, lsl #28
    2200:	00002a20 	andeq	r2, r0, r0, lsr #20
    2204:	4a9c0100 	bmi	fe70260c <rear+0xde6fed88>
    2208:	0c000002 	stceq	0, cr0, [r0], {2}
    220c:	00000734 	andeq	r0, r0, r4, lsr r7
    2210:	25252301 	strcs	r2, [r5, #-769]!	; 0xfffffcff
    2214:	02000000 	andeq	r0, r0, #0
    2218:	03007791 	movweq	r7, #1937	; 0x791
    221c:	000009ec 	andeq	r0, r0, ip, ror #19
    2220:	d4061d01 	strle	r1, [r6], #-3329	; 0xfffff2ff
    2224:	2a20000f 	bcs	802268 <startup-0x1f7fdd98>
    2228:	01000000 	mrseq	r0, (UNDEF: 0)
    222c:	0002709c 	muleq	r2, ip, r0
    2230:	08490c00 	stmdaeq	r9, {sl, fp}^
    2234:	1d010000 	stcne	0, cr0, [r1, #-0]
    2238:	00002524 	andeq	r2, r0, r4, lsr #10
    223c:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    2240:	08f90d00 	ldmeq	r9!, {r8, sl, fp}^
    2244:	18010000 	stmdane	r1, {}	; <UNPREDICTABLE>
    2248:	000f9806 	andeq	r9, pc, r6, lsl #16
    224c:	00003c20 	andeq	r3, r0, r0, lsr #24
    2250:	949c0100 	ldrls	r0, [ip], #256	; 0x100
    2254:	04000002 	streq	r0, [r0], #-2
    2258:	18010078 	stmdane	r1, {r3, r4, r5, r6}
    225c:	00002529 	andeq	r2, r0, r9, lsr #10
    2260:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    2264:	0a240d00 	beq	90566c <startup-0x1f6fa994>
    2268:	13010000 	movwne	r0, #4096	; 0x1000
    226c:	000f6606 	andeq	r6, pc, r6, lsl #12
    2270:	00003220 	andeq	r3, r0, r0, lsr #4
    2274:	b89c0100 	ldmlt	ip, {r8}
    2278:	04000002 	streq	r0, [r0], #-2
    227c:	13010078 	movwne	r0, #4216	; 0x1078
    2280:	00002527 	andeq	r2, r0, r7, lsr #10
    2284:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    2288:	0a370e00 	beq	dc5a90 <startup-0x1f23a570>
    228c:	04010000 	streq	r0, [r1], #-0
    2290:	000f4c06 	andeq	r4, pc, r6, lsl #24
    2294:	00001a20 	andeq	r1, r0, r0, lsr #20
    2298:	009c0100 	addseq	r0, ip, r0, lsl #2
    229c:	0000009e 	muleq	r0, lr, r0
    22a0:	08470004 	stmdaeq	r7, {r2}^
    22a4:	01040000 	mrseq	r0, (UNDEF: 4)
    22a8:	00000601 	andeq	r0, r0, r1, lsl #12
    22ac:	000a420c 	andeq	r4, sl, ip, lsl #4
    22b0:	0003d300 	andeq	sp, r3, r0, lsl #6
    22b4:	00123400 	andseq	r3, r2, r0, lsl #8
    22b8:	0000ac20 	andeq	sl, r0, r0, lsr #24
    22bc:	000ca100 	andeq	sl, ip, r0, lsl #2
    22c0:	08010200 	stmdaeq	r1, {r9}
    22c4:	000003f5 	strdeq	r0, [r0], -r5
    22c8:	00085103 	andeq	r5, r8, r3, lsl #2
    22cc:	06260100 	strteq	r0, [r6], -r0, lsl #2
    22d0:	200012b8 			; <UNDEFINED> instruction: 0x200012b8
    22d4:	00000028 	andeq	r0, r0, r8, lsr #32
    22d8:	00519c01 	subseq	r9, r1, r1, lsl #24
    22dc:	6d040000 	stcvs	0, cr0, [r4, #-0]
    22e0:	26010073 			; <UNDEFINED> instruction: 0x26010073
    22e4:	0000511f 	andeq	r5, r0, pc, lsl r1
    22e8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    22ec:	07040200 	streq	r0, [r4, -r0, lsl #4]
    22f0:	00000075 	andeq	r0, r0, r5, ror r0
    22f4:	00070703 	andeq	r0, r7, r3, lsl #14
    22f8:	061a0100 	ldreq	r0, [sl], -r0, lsl #2
    22fc:	2000128a 	andcs	r1, r0, sl, lsl #5
    2300:	0000002e 	andeq	r0, r0, lr, lsr #32
    2304:	007d9c01 	rsbseq	r9, sp, r1, lsl #24
    2308:	75040000 	strvc	r0, [r4, #-0]
    230c:	1a010073 	bne	424e0 <startup-0x1ffbdb20>
    2310:	0000511f 	andeq	r5, r0, pc, lsl r1
    2314:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    2318:	07720500 	ldrbeq	r0, [r2, -r0, lsl #10]!
    231c:	12010000 	andne	r0, r1, #0
    2320:	00127806 	andseq	r7, r2, r6, lsl #16
    2324:	00001220 	andeq	r1, r0, r0, lsr #4
    2328:	069c0100 	ldreq	r0, [ip], r0, lsl #2
    232c:	00000956 	andeq	r0, r0, r6, asr r9
    2330:	34060501 	strcc	r0, [r6], #-1281	; 0xfffffaff
    2334:	44200012 	strtmi	r0, [r0], #-18	; 0xffffffee
    2338:	01000000 	mrseq	r0, (UNDEF: 0)
    233c:	0120009c 			; <UNDEFINED> instruction: 0x0120009c
    2340:	00040000 	andeq	r0, r4, r0
    2344:	000008c7 	andeq	r0, r0, r7, asr #17
    2348:	06010104 	streq	r0, [r1], -r4, lsl #2
    234c:	6c0c0000 	stcvs	0, cr0, [ip], {-0}
    2350:	d300000a 	movwle	r0, #10
    2354:	e0000003 	and	r0, r0, r3
    2358:	f0200012 			; <UNDEFINED> instruction: 0xf0200012
    235c:	64000000 	strvs	r0, [r0], #-0
    2360:	0200000d 	andeq	r0, r0, #13
    2364:	03f50801 	mvnseq	r0, #65536	; 0x10000
    2368:	a7030000 	strge	r0, [r3, -r0]
    236c:	0100000a 	tsteq	r0, sl
    2370:	13b00624 	movsne	r0, #36, 12	; 0x2400000
    2374:	00202000 	eoreq	r2, r0, r0
    2378:	9c010000 	stcls	0, cr0, [r1], {-0}
    237c:	00000050 	andeq	r0, r0, r0, asr r0
    2380:	01006304 	tsteq	r0, r4, lsl #6
    2384:	00251c24 	eoreq	r1, r5, r4, lsr #24
    2388:	91020000 	mrsls	r0, (UNDEF: 2)
    238c:	95050077 	strls	r0, [r5, #-119]	; 0xffffff89
    2390:	0100000a 	tsteq	r0, sl
    2394:	00250f14 	eoreq	r0, r5, r4, lsl pc
    2398:	13480000 	movtne	r0, #32768	; 0x8000
    239c:	00682000 	rsbeq	r2, r8, r0
    23a0:	9c010000 	stcls	0, cr0, [r1], {-0}
    23a4:	000000a7 	andeq	r0, r0, r7, lsr #1
    23a8:	000ac906 	andeq	ip, sl, r6, lsl #18
    23ac:	13150100 	tstne	r5, #0, 2
    23b0:	000000a7 	andeq	r0, r0, r7, lsr #1
    23b4:	06589102 	ldrbeq	r9, [r8], -r2, lsl #2
    23b8:	00000aa0 	andeq	r0, r0, r0, lsr #21
    23bc:	a7131601 	ldrge	r1, [r3, -r1, lsl #12]
    23c0:	02000000 	andeq	r0, r0, #0
    23c4:	72074891 	andvc	r4, r7, #9502720	; 0x910000
    23c8:	0100776f 	tsteq	r0, pc, ror #14
    23cc:	00be0919 	adcseq	r0, lr, r9, lsl r9
    23d0:	91020000 	mrsls	r0, (UNDEF: 2)
    23d4:	0ab4066c 	beq	fed03d8c <rear+0xded00508>
    23d8:	19010000 	stmdbne	r1, {}	; <UNPREDICTABLE>
    23dc:	0000be0e 	andeq	fp, r0, lr, lsl #28
    23e0:	68910200 	ldmvs	r1, {r9}
    23e4:	00250800 	eoreq	r0, r5, r0, lsl #16
    23e8:	00b70000 	adcseq	r0, r7, r0
    23ec:	b7090000 	strlt	r0, [r9, -r0]
    23f0:	0f000000 	svceq	0x00000000
    23f4:	07040200 	streq	r0, [r4, -r0, lsl #4]
    23f8:	00000075 	andeq	r0, r0, r5, ror r0
    23fc:	6905040a 	stmdbvs	r5, {r1, r3, sl}
    2400:	0b00746e 	bleq	1f5c0 <startup-0x1ffe0a40>
    2404:	00000aaf 	andeq	r0, r0, pc, lsr #21
    2408:	be050801 	cdplt	8, 0, cr0, cr5, cr1, {0}
    240c:	04000000 	streq	r0, [r0], #-0
    2410:	44200013 	strtmi	r0, [r0], #-19	; 0xffffffed
    2414:	01000000 	mrseq	r0, (UNDEF: 0)
    2418:	0000fc9c 	muleq	r0, ip, ip
    241c:	006a0700 	rsbeq	r0, sl, r0, lsl #14
    2420:	be090901 	vmlalt.f16	s0, s18, s2	; <UNPREDICTABLE>
    2424:	02000000 	andeq	r0, r0, #0
    2428:	9a067491 	bls	19f674 <startup-0x1fe6098c>
    242c:	0100000a 	tsteq	r0, sl
    2430:	00fc0a0a 	rscseq	r0, ip, sl, lsl #20
    2434:	91020000 	mrsls	r0, (UNDEF: 2)
    2438:	01020073 	tsteq	r2, r3, ror r0
    243c:	0003fe08 	andeq	pc, r3, r8, lsl #28
    2440:	0abc0c00 	beq	fef05448 <rear+0xdef01bc4>
    2444:	04010000 	streq	r0, [r1], #-0
    2448:	0012e006 	andseq	lr, r2, r6
    244c:	00002420 	andeq	r2, r0, r0, lsr #8
    2450:	049c0100 	ldreq	r0, [ip], #256	; 0x100
    2454:	04010069 	streq	r0, [r1], #-105	; 0xffffff97
    2458:	0000be17 	andeq	fp, r0, r7, lsl lr
    245c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
	...

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
   c:	10011117 	andne	r1, r1, r7, lsl r1
  10:	02000017 	andeq	r0, r0, #23
  14:	0b0b0024 	bleq	2c00ac <startup-0x1fd3ff54>
  18:	0e030b3e 	vmoveq.16	d3[0], r0
  1c:	35030000 	strcc	r0, [r3, #-0]
  20:	00134900 	andseq	r4, r3, r0, lsl #18
  24:	00240400 	eoreq	r0, r4, r0, lsl #8
  28:	0b3e0b0b 	bleq	f82c5c <startup-0x1f07d3a4>
  2c:	00000803 	andeq	r0, r0, r3, lsl #16
  30:	03001605 	movweq	r1, #1541	; 0x605
  34:	3b0b3a0e 	blcc	2ce874 <startup-0x1fd3178c>
  38:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
  3c:	06000013 			; <UNDEFINED> instruction: 0x06000013
  40:	0b0b000f 	bleq	2c0084 <startup-0x1fd3ff7c>
  44:	00001349 	andeq	r1, r0, r9, asr #6
  48:	03001307 	movweq	r1, #775	; 0x307
  4c:	00193c0e 	andseq	r3, r9, lr, lsl #24
  50:	00160800 	andseq	r0, r6, r0, lsl #16
  54:	0b3a0e03 	bleq	e83868 <startup-0x1f17c798>
  58:	0b39053b 	bleq	e4154c <startup-0x1f1beab4>
  5c:	00001349 	andeq	r1, r0, r9, asr #6
  60:	0b011709 	bleq	45c8c <startup-0x1ffba374>
  64:	3b0b3a0b 	blcc	2ce898 <startup-0x1fd31768>
  68:	010b390b 	tsteq	fp, fp, lsl #18
  6c:	0a000013 	beq	c0 <startup-0x1fffff40>
  70:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
  74:	0b3b0b3a 	bleq	ec2d64 <startup-0x1f13d29c>
  78:	13490b39 	movtne	r0, #39737	; 0x9b39
  7c:	010b0000 	mrseq	r0, (UNDEF: 11)
  80:	01134901 	tsteq	r3, r1, lsl #18
  84:	0c000013 	stceq	0, cr0, [r0], {19}
  88:	13490021 	movtne	r0, #36897	; 0x9021
  8c:	00000b2f 	andeq	r0, r0, pc, lsr #22
  90:	0b01130d 	bleq	44ccc <startup-0x1ffbb334>
  94:	3b0b3a0b 	blcc	2ce8c8 <startup-0x1fd31738>
  98:	010b390b 	tsteq	fp, fp, lsl #18
  9c:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
  a0:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
  a4:	0b3b0b3a 	bleq	ec2d94 <startup-0x1f13d26c>
  a8:	13490b39 	movtne	r0, #39737	; 0x9b39
  ac:	00000b38 	andeq	r0, r0, r8, lsr fp
  b0:	0b000f0f 	bleq	3cf4 <startup-0x1fffc30c>
  b4:	1000000b 	andne	r0, r0, fp
  b8:	13490026 	movtne	r0, #36902	; 0x9026
  bc:	13110000 	tstne	r1, #0
  c0:	0b0e0301 	bleq	380ccc <startup-0x1fc7f334>
  c4:	3b0b3a0b 	blcc	2ce8f8 <startup-0x1fd31708>
  c8:	010b390b 	tsteq	fp, fp, lsl #18
  cc:	12000013 	andne	r0, r0, #19
  d0:	0803000d 	stmdaeq	r3, {r0, r2, r3}
  d4:	0b3b0b3a 	bleq	ec2dc4 <startup-0x1f13d23c>
  d8:	13490b39 	movtne	r0, #39737	; 0x9b39
  dc:	00000b38 	andeq	r0, r0, r8, lsr fp
  e0:	03011313 	movweq	r1, #4883	; 0x1313
  e4:	3a050b0e 	bcc	142d24 <startup-0x1febd2dc>
  e8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  ec:	0013010b 	andseq	r0, r3, fp, lsl #2
  f0:	000d1400 	andeq	r1, sp, r0, lsl #8
  f4:	0b3a0e03 	bleq	e83908 <startup-0x1f17c6f8>
  f8:	0b390b3b 	bleq	e42dec <startup-0x1f1bd214>
  fc:	05381349 	ldreq	r1, [r8, #-841]!	; 0xfffffcb7
 100:	15150000 	ldrne	r0, [r5, #-0]
 104:	00192700 	andseq	r2, r9, r0, lsl #14
 108:	01151600 	tsteq	r5, r0, lsl #12
 10c:	13491927 	movtne	r1, #39207	; 0x9927
 110:	00001301 	andeq	r1, r0, r1, lsl #6
 114:	49000517 	stmdbmi	r0, {r0, r1, r2, r4, r8, sl}
 118:	18000013 	stmdane	r0, {r0, r1, r4}
 11c:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
 120:	0b3a050b 	bleq	e81554 <startup-0x1f17eaac>
 124:	0b39053b 	bleq	e41618 <startup-0x1f1be9e8>
 128:	00001301 	andeq	r1, r0, r1, lsl #6
 12c:	03000d19 	movweq	r0, #3353	; 0xd19
 130:	3b0b3a0e 	blcc	2ce970 <startup-0x1fd31690>
 134:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
 138:	000b3813 	andeq	r3, fp, r3, lsl r8
 13c:	000d1a00 	andeq	r1, sp, r0, lsl #20
 140:	0b3a0e03 	bleq	e83954 <startup-0x1f17c6ac>
 144:	0b39053b 	bleq	e41638 <startup-0x1f1be9c8>
 148:	05381349 	ldreq	r1, [r8, #-841]!	; 0xfffffcb7
 14c:	131b0000 	tstne	fp, #0
 150:	0b0e0301 	bleq	380d5c <startup-0x1fc7f2a4>
 154:	3b0b3a0b 	blcc	2ce988 <startup-0x1fd31678>
 158:	010b3905 	tsteq	fp, r5, lsl #18
 15c:	1c000013 	stcne	0, cr0, [r0], {19}
 160:	0b0b0113 	bleq	2c05b4 <startup-0x1fd3fa4c>
 164:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 168:	13010b39 	movwne	r0, #6969	; 0x1b39
 16c:	171d0000 	ldrne	r0, [sp, -r0]
 170:	3a0b0b01 	bcc	2c2d7c <startup-0x1fd3d284>
 174:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 178:	0013010b 	andseq	r0, r3, fp, lsl #2
 17c:	000d1e00 	andeq	r1, sp, r0, lsl #28
 180:	0b3a0e03 	bleq	e83994 <startup-0x1f17c66c>
 184:	0b39053b 	bleq	e41678 <startup-0x1f1be988>
 188:	00001349 	andeq	r1, r0, r9, asr #6
 18c:	2701151f 	smladcs	r1, pc, r5, r1	; <UNPREDICTABLE>
 190:	00130119 	andseq	r0, r3, r9, lsl r1
 194:	00342000 	eorseq	r2, r4, r0
 198:	0b3a0e03 	bleq	e839ac <startup-0x1f17c654>
 19c:	0b39053b 	bleq	e41690 <startup-0x1f1be970>
 1a0:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 1a4:	0000193c 	andeq	r1, r0, ip, lsr r9
 1a8:	49002121 	stmdbmi	r0, {r0, r5, r8, sp}
 1ac:	00052f13 	andeq	r2, r5, r3, lsl pc
 1b0:	00342200 	eorseq	r2, r4, r0, lsl #4
 1b4:	0b3a0e03 	bleq	e839c8 <startup-0x1f17c638>
 1b8:	0b390b3b 	bleq	e42eac <startup-0x1f1bd154>
 1bc:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 1c0:	34230000 	strtcc	r0, [r3], #-0
 1c4:	3a0e0300 	bcc	380dcc <startup-0x1fc7f234>
 1c8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 1cc:	3f13490b 	svccc	0x0013490b
 1d0:	00180219 	andseq	r0, r8, r9, lsl r2
 1d4:	012e2400 			; <UNDEFINED> instruction: 0x012e2400
 1d8:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 1dc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 1e0:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 1e4:	06120111 			; <UNDEFINED> instruction: 0x06120111
 1e8:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 1ec:	00130119 	andseq	r0, r3, r9, lsl r1
 1f0:	00052500 	andeq	r2, r5, r0, lsl #10
 1f4:	0b3a0e03 	bleq	e83a08 <startup-0x1f17c5f8>
 1f8:	0b39053b 	bleq	e416ec <startup-0x1f1be914>
 1fc:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 200:	34260000 	strtcc	r0, [r6], #-0
 204:	3a0e0300 	bcc	380e0c <startup-0x1fc7f1f4>
 208:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 20c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 210:	27000018 	smladcs	r0, r8, r0, r0
 214:	0111010b 	tsteq	r1, fp, lsl #2
 218:	00000612 	andeq	r0, r0, r2, lsl r6
 21c:	03003428 	movweq	r3, #1064	; 0x428
 220:	3b0b3a08 	blcc	2cea48 <startup-0x1fd315b8>
 224:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
 228:	00180213 	andseq	r0, r8, r3, lsl r2
 22c:	002e2900 	eoreq	r2, lr, r0, lsl #18
 230:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 234:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 238:	01110b39 	tsteq	r1, r9, lsr fp
 23c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 240:	00194296 	mulseq	r9, r6, r2
 244:	012e2a00 			; <UNDEFINED> instruction: 0x012e2a00
 248:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 24c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 250:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 254:	06120111 			; <UNDEFINED> instruction: 0x06120111
 258:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 25c:	00130119 	andseq	r0, r3, r9, lsl r1
 260:	00052b00 	andeq	r2, r5, r0, lsl #22
 264:	0b3a0803 	bleq	e82278 <startup-0x1f17dd88>
 268:	0b39053b 	bleq	e4175c <startup-0x1f1be8a4>
 26c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 270:	2e2c0000 	cdpcs	0, 2, cr0, cr12, cr0, {0}
 274:	03193f00 	tsteq	r9, #0, 30
 278:	3b0b3a0e 	blcc	2ceab8 <startup-0x1fd31548>
 27c:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
 280:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 284:	97184006 	ldrls	r4, [r8, -r6]
 288:	00001942 	andeq	r1, r0, r2, asr #18
 28c:	3f012e2d 	svccc	0x00012e2d
 290:	3a0e0319 	bcc	380efc <startup-0x1fc7f104>
 294:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 298:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 29c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 2a0:	96184006 	ldrls	r4, [r8], -r6
 2a4:	13011942 	movwne	r1, #6466	; 0x1942
 2a8:	2e2e0000 	cdpcs	0, 2, cr0, cr14, cr0, {0}
 2ac:	03193f01 	tsteq	r9, #1, 30
 2b0:	3b0b3a0e 	blcc	2ceaf0 <startup-0x1fd31510>
 2b4:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
 2b8:	01193c13 	tsteq	r9, r3, lsl ip
 2bc:	2f000013 	svccs	0x00000013
 2c0:	00000018 	andeq	r0, r0, r8, lsl r0
 2c4:	3f012e30 	svccc	0x00012e30
 2c8:	3a0e0319 	bcc	380f34 <startup-0x1fc7f0cc>
 2cc:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 2d0:	1119270b 	tstne	r9, fp, lsl #14
 2d4:	40061201 	andmi	r1, r6, r1, lsl #4
 2d8:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 2dc:	00001301 	andeq	r1, r0, r1, lsl #6
 2e0:	03000531 	movweq	r0, #1329	; 0x531
 2e4:	3b0b3a08 	blcc	2ceb0c <startup-0x1fd314f4>
 2e8:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 2ec:	00180213 	andseq	r0, r8, r3, lsl r2
 2f0:	012e3200 			; <UNDEFINED> instruction: 0x012e3200
 2f4:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 2f8:	0b3b0b3a 	bleq	ec2fe8 <startup-0x1f13d018>
 2fc:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 300:	06120111 			; <UNDEFINED> instruction: 0x06120111
 304:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 308:	00130119 	andseq	r0, r3, r9, lsl r1
 30c:	00343300 	eorseq	r3, r4, r0, lsl #6
 310:	0b3a0803 	bleq	e82324 <startup-0x1f17dcdc>
 314:	0b390b3b 	bleq	e43008 <startup-0x1f1bcff8>
 318:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 31c:	0b340000 	bleq	d00324 <startup-0x1f2ffcdc>
 320:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
 324:	00130106 	andseq	r0, r3, r6, lsl #2
 328:	012e3500 			; <UNDEFINED> instruction: 0x012e3500
 32c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 330:	0b3b0b3a 	bleq	ec3020 <startup-0x1f13cfe0>
 334:	13490b39 	movtne	r0, #39737	; 0x9b39
 338:	0000193c 	andeq	r1, r0, ip, lsr r9
 33c:	03012e36 	movweq	r2, #7734	; 0x1e36
 340:	3b0b3a0e 	blcc	2ceb80 <startup-0x1fd31480>
 344:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
 348:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 34c:	97184006 	ldrls	r4, [r8, -r6]
 350:	13011942 	movwne	r1, #6466	; 0x1942
 354:	05370000 	ldreq	r0, [r7, #-0]!
 358:	3a0e0300 	bcc	380f60 <startup-0x1fc7f0a0>
 35c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 360:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 364:	38000018 	stmdacc	r0, {r3, r4}
 368:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 36c:	0b3a0e03 	bleq	e83b80 <startup-0x1f17c480>
 370:	0b390b3b 	bleq	e43064 <startup-0x1f1bcf9c>
 374:	01111927 	tsteq	r1, r7, lsr #18
 378:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 37c:	00194297 	mulseq	r9, r7, r2
 380:	11010000 	mrsne	r0, (UNDEF: 1)
 384:	130e2501 	movwne	r2, #58625	; 0xe501
 388:	1b0e030b 	blne	380fbc <startup-0x1fc7f044>
 38c:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
 390:	00171006 	andseq	r1, r7, r6
 394:	00160200 	andseq	r0, r6, r0, lsl #4
 398:	0b3a0e03 	bleq	e83bac <startup-0x1f17c454>
 39c:	0b390b3b 	bleq	e43090 <startup-0x1f1bcf70>
 3a0:	00001349 	andeq	r1, r0, r9, asr #6
 3a4:	0b002403 	bleq	93b8 <startup-0x1fff6c48>
 3a8:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 3ac:	0400000e 	streq	r0, [r0], #-14
 3b0:	13490101 	movtne	r0, #37121	; 0x9101
 3b4:	00001301 	andeq	r1, r0, r1, lsl #6
 3b8:	49002105 	stmdbmi	r0, {r0, r2, r8, sp}
 3bc:	00052f13 	andeq	r2, r5, r3, lsl pc
 3c0:	00350600 	eorseq	r0, r5, r0, lsl #12
 3c4:	00001349 	andeq	r1, r0, r9, asr #6
 3c8:	03003407 	movweq	r3, #1031	; 0x407
 3cc:	3b0b3a0e 	blcc	2cec0c <startup-0x1fd313f4>
 3d0:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 3d4:	00180213 	andseq	r0, r8, r3, lsl r2
 3d8:	012e0800 			; <UNDEFINED> instruction: 0x012e0800
 3dc:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 3e0:	0b3b0b3a 	bleq	ec30d0 <startup-0x1f13cf30>
 3e4:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 3e8:	06120111 			; <UNDEFINED> instruction: 0x06120111
 3ec:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 3f0:	00130119 	andseq	r0, r3, r9, lsl r1
 3f4:	00340900 	eorseq	r0, r4, r0, lsl #18
 3f8:	0b3a0803 	bleq	e8240c <startup-0x1f17dbf4>
 3fc:	0b390b3b 	bleq	e430f0 <startup-0x1f1bcf10>
 400:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 404:	2e0a0000 	cdpcs	0, 0, cr0, cr10, cr0, {0}
 408:	03193f01 	tsteq	r9, #1, 30
 40c:	3b0b3a0e 	blcc	2cec4c <startup-0x1fd313b4>
 410:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
 414:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 418:	97184006 	ldrls	r4, [r8, -r6]
 41c:	13011942 	movwne	r1, #6466	; 0x1942
 420:	050b0000 	streq	r0, [fp, #-0]
 424:	3a080300 	bcc	20102c <startup-0x1fdfefd4>
 428:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 42c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 430:	0c000018 	stceq	0, cr0, [r0], {24}
 434:	0b0b0024 	bleq	2c04cc <startup-0x1fd3fb34>
 438:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 43c:	2e0d0000 	cdpcs	0, 0, cr0, cr13, cr0, {0}
 440:	03193f01 	tsteq	r9, #1, 30
 444:	3b0b3a0e 	blcc	2cec84 <startup-0x1fd3137c>
 448:	110b390b 	tstne	fp, fp, lsl #18
 44c:	40061201 	andmi	r1, r6, r1, lsl #4
 450:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 454:	00001301 	andeq	r1, r0, r1, lsl #6
 458:	11010b0e 	tstne	r1, lr, lsl #22
 45c:	00061201 	andeq	r1, r6, r1, lsl #4
 460:	00050f00 	andeq	r0, r5, r0, lsl #30
 464:	0b3a0e03 	bleq	e83c78 <startup-0x1f17c388>
 468:	0b390b3b 	bleq	e4315c <startup-0x1f1bcea4>
 46c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 470:	2e100000 	cdpcs	0, 1, cr0, cr0, cr0, {0}
 474:	03193f01 	tsteq	r9, #1, 30
 478:	3b0b3a0e 	blcc	2cecb8 <startup-0x1fd31348>
 47c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 480:	00193c13 	andseq	r3, r9, r3, lsl ip
 484:	00181100 	andseq	r1, r8, r0, lsl #2
 488:	2e120000 	cdpcs	0, 1, cr0, cr2, cr0, {0}
 48c:	03193f01 	tsteq	r9, #1, 30
 490:	3b0b3a0e 	blcc	2cecd0 <startup-0x1fd31330>
 494:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
 498:	11134919 	tstne	r3, r9, lsl r9
 49c:	40061201 	andmi	r1, r6, r1, lsl #4
 4a0:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 4a4:	00001301 	andeq	r1, r0, r1, lsl #6
 4a8:	3f012e13 	svccc	0x00012e13
 4ac:	3a0e0319 	bcc	381118 <startup-0x1fc7eee8>
 4b0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 4b4:	3c13490b 			; <UNDEFINED> instruction: 0x3c13490b
 4b8:	00130119 	andseq	r0, r3, r9, lsl r1
 4bc:	012e1400 			; <UNDEFINED> instruction: 0x012e1400
 4c0:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 4c4:	0b3b0b3a 	bleq	ec31b4 <startup-0x1f13ce4c>
 4c8:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 4cc:	06120111 			; <UNDEFINED> instruction: 0x06120111
 4d0:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 4d4:	00000019 	andeq	r0, r0, r9, lsl r0
 4d8:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
 4dc:	030b130e 	movweq	r1, #45838	; 0xb30e
 4e0:	110e1b0e 	tstne	lr, lr, lsl #22
 4e4:	10061201 	andne	r1, r6, r1, lsl #4
 4e8:	02000017 	andeq	r0, r0, #23
 4ec:	0b0b0024 	bleq	2c0584 <startup-0x1fd3fa7c>
 4f0:	0e030b3e 	vmoveq.16	d3[0], r0
 4f4:	24030000 	strcs	r0, [r3], #-0
 4f8:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 4fc:	0008030b 	andeq	r0, r8, fp, lsl #6
 500:	00160400 	andseq	r0, r6, r0, lsl #8
 504:	0b3a0e03 	bleq	e83d18 <startup-0x1f17c2e8>
 508:	0b390b3b 	bleq	e431fc <startup-0x1f1bce04>
 50c:	00001349 	andeq	r1, r0, r9, asr #6
 510:	0b000f05 	bleq	412c <startup-0x1fffbed4>
 514:	0013490b 	andseq	r4, r3, fp, lsl #18
 518:	00130600 	andseq	r0, r3, r0, lsl #12
 51c:	193c0e03 	ldmdbne	ip!, {r0, r1, r9, sl, fp}
 520:	16070000 	strne	r0, [r7], -r0
 524:	3a0e0300 	bcc	38112c <startup-0x1fc7eed4>
 528:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 52c:	0013490b 	andseq	r4, r3, fp, lsl #18
 530:	01170800 	tsteq	r7, r0, lsl #16
 534:	0b3a0b0b 	bleq	e83168 <startup-0x1f17ce98>
 538:	0b390b3b 	bleq	e4322c <startup-0x1f1bcdd4>
 53c:	00001301 	andeq	r1, r0, r1, lsl #6
 540:	03000d09 	movweq	r0, #3337	; 0xd09
 544:	3b0b3a0e 	blcc	2ced84 <startup-0x1fd3127c>
 548:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 54c:	0a000013 	beq	5a0 <startup-0x1ffffa60>
 550:	13490101 	movtne	r0, #37121	; 0x9101
 554:	00001301 	andeq	r1, r0, r1, lsl #6
 558:	4900210b 	stmdbmi	r0, {r0, r1, r3, r8, sp}
 55c:	000b2f13 	andeq	r2, fp, r3, lsl pc
 560:	01130c00 	tsteq	r3, r0, lsl #24
 564:	0b3a0b0b 	bleq	e83198 <startup-0x1f17ce68>
 568:	0b390b3b 	bleq	e4325c <startup-0x1f1bcda4>
 56c:	00001301 	andeq	r1, r0, r1, lsl #6
 570:	03000d0d 	movweq	r0, #3341	; 0xd0d
 574:	3b0b3a0e 	blcc	2cedb4 <startup-0x1fd3124c>
 578:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 57c:	000b3813 	andeq	r3, fp, r3, lsl r8
 580:	000f0e00 	andeq	r0, pc, r0, lsl #28
 584:	00000b0b 	andeq	r0, r0, fp, lsl #22
 588:	4900260f 	stmdbmi	r0, {r0, r1, r2, r3, r9, sl, sp}
 58c:	10000013 	andne	r0, r0, r3, lsl r0
 590:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
 594:	0b3a0b0b 	bleq	e831c8 <startup-0x1f17ce38>
 598:	0b390b3b 	bleq	e4328c <startup-0x1f1bcd74>
 59c:	00001301 	andeq	r1, r0, r1, lsl #6
 5a0:	03000d11 	movweq	r0, #3345	; 0xd11
 5a4:	3b0b3a08 	blcc	2cedcc <startup-0x1fd31234>
 5a8:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 5ac:	000b3813 	andeq	r3, fp, r3, lsl r8
 5b0:	01131200 	tsteq	r3, r0, lsl #4
 5b4:	050b0e03 	streq	r0, [fp, #-3587]	; 0xfffff1fd
 5b8:	0b3b0b3a 	bleq	ec32a8 <startup-0x1f13cd58>
 5bc:	13010b39 	movwne	r0, #6969	; 0x1b39
 5c0:	0d130000 	ldceq	0, cr0, [r3, #-0]
 5c4:	3a0e0300 	bcc	3811cc <startup-0x1fc7ee34>
 5c8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 5cc:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 5d0:	14000005 	strne	r0, [r0], #-5
 5d4:	19270015 	stmdbne	r7!, {r0, r2, r4}
 5d8:	15150000 	ldrne	r0, [r5, #-0]
 5dc:	49192701 	ldmdbmi	r9, {r0, r8, r9, sl, sp}
 5e0:	00130113 	andseq	r0, r3, r3, lsl r1
 5e4:	00051600 	andeq	r1, r5, r0, lsl #12
 5e8:	00001349 	andeq	r1, r0, r9, asr #6
 5ec:	03011317 	movweq	r1, #4887	; 0x1317
 5f0:	3a050b0e 	bcc	143230 <startup-0x1febcdd0>
 5f4:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 5f8:	0013010b 	andseq	r0, r3, fp, lsl #2
 5fc:	000d1800 	andeq	r1, sp, r0, lsl #16
 600:	0b3a0e03 	bleq	e83e14 <startup-0x1f17c1ec>
 604:	0b39053b 	bleq	e41af8 <startup-0x1f1be508>
 608:	0b381349 	bleq	e05334 <startup-0x1f1faccc>
 60c:	0d190000 	ldceq	0, cr0, [r9, #-0]
 610:	3a0e0300 	bcc	381218 <startup-0x1fc7ede8>
 614:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 618:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 61c:	1a000005 	bne	638 <startup-0x1ffff9c8>
 620:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
 624:	0b3a0b0b 	bleq	e83258 <startup-0x1f17cda8>
 628:	0b39053b 	bleq	e41b1c <startup-0x1f1be4e4>
 62c:	00001301 	andeq	r1, r0, r1, lsl #6
 630:	0b01131b 	bleq	452a4 <startup-0x1ffbad5c>
 634:	3b0b3a0b 	blcc	2cee68 <startup-0x1fd31198>
 638:	010b3905 	tsteq	fp, r5, lsl #18
 63c:	1c000013 	stcne	0, cr0, [r0], {19}
 640:	0b0b0117 	bleq	2c0aa4 <startup-0x1fd3f55c>
 644:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 648:	13010b39 	movwne	r0, #6969	; 0x1b39
 64c:	0d1d0000 	ldceq	0, cr0, [sp, #-0]
 650:	3a0e0300 	bcc	381258 <startup-0x1fc7eda8>
 654:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 658:	0013490b 	andseq	r4, r3, fp, lsl #18
 65c:	01151e00 	tsteq	r5, r0, lsl #28
 660:	13011927 	movwne	r1, #6439	; 0x1927
 664:	341f0000 	ldrcc	r0, [pc], #-0	; 66c <startup-0x1ffff994>
 668:	3a0e0300 	bcc	381270 <startup-0x1fc7ed90>
 66c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 670:	3f13490b 	svccc	0x0013490b
 674:	00193c19 	andseq	r3, r9, r9, lsl ip
 678:	00342000 	eorseq	r2, r4, r0
 67c:	0b3a0e03 	bleq	e83e90 <startup-0x1f17c170>
 680:	0b390b3b 	bleq	e43374 <startup-0x1f1bcc8c>
 684:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 688:	00001802 	andeq	r1, r0, r2, lsl #16
 68c:	3f012e21 	svccc	0x00012e21
 690:	3a0e0319 	bcc	3812fc <startup-0x1fc7ed04>
 694:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 698:	1113490b 	tstne	r3, fp, lsl #18
 69c:	40061201 	andmi	r1, r6, r1, lsl #4
 6a0:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 6a4:	00001301 	andeq	r1, r0, r1, lsl #6
 6a8:	03003422 	movweq	r3, #1058	; 0x422
 6ac:	3b0b3a0e 	blcc	2ceeec <startup-0x1fd31114>
 6b0:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 6b4:	00180213 	andseq	r0, r8, r3, lsl r2
 6b8:	012e2300 			; <UNDEFINED> instruction: 0x012e2300
 6bc:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 6c0:	0b3b0b3a 	bleq	ec33b0 <startup-0x1f13cc50>
 6c4:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 6c8:	06120111 			; <UNDEFINED> instruction: 0x06120111
 6cc:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 6d0:	00130119 	andseq	r0, r3, r9, lsl r1
 6d4:	00052400 	andeq	r2, r5, r0, lsl #8
 6d8:	0b3a0e03 	bleq	e83eec <startup-0x1f17c114>
 6dc:	0b390b3b 	bleq	e433d0 <startup-0x1f1bcc30>
 6e0:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 6e4:	2e250000 	cdpcs	0, 2, cr0, cr5, cr0, {0}
 6e8:	03193f00 	tsteq	r9, #0, 30
 6ec:	3b0b3a0e 	blcc	2cef2c <startup-0x1fd310d4>
 6f0:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 6f4:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 6f8:	97184006 	ldrls	r4, [r8, -r6]
 6fc:	00001942 	andeq	r1, r0, r2, asr #18
 700:	3f012e26 	svccc	0x00012e26
 704:	3a0e0319 	bcc	381370 <startup-0x1fc7ec90>
 708:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 70c:	1201110b 	andne	r1, r1, #-1073741822	; 0xc0000002
 710:	97184006 	ldrls	r4, [r8, -r6]
 714:	00001942 	andeq	r1, r0, r2, asr #18
 718:	11010b27 	tstne	r1, r7, lsr #22
 71c:	00061201 	andeq	r1, r6, r1, lsl #4
 720:	00342800 	eorseq	r2, r4, r0, lsl #16
 724:	0b3a0803 	bleq	e82738 <startup-0x1f17d8c8>
 728:	0b390b3b 	bleq	e4341c <startup-0x1f1bcbe4>
 72c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 730:	01000000 	mrseq	r0, (UNDEF: 0)
 734:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 738:	0e030b13 	vmoveq.32	d3[0], r0
 73c:	01110e1b 	tsteq	r1, fp, lsl lr
 740:	17100612 			; <UNDEFINED> instruction: 0x17100612
 744:	24020000 	strcs	r0, [r2], #-0
 748:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 74c:	000e030b 	andeq	r0, lr, fp, lsl #6
 750:	012e0300 			; <UNDEFINED> instruction: 0x012e0300
 754:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 758:	0b3b0b3a 	bleq	ec3448 <startup-0x1f13cbb8>
 75c:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 760:	06120111 			; <UNDEFINED> instruction: 0x06120111
 764:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 768:	00130119 	andseq	r0, r3, r9, lsl r1
 76c:	00050400 	andeq	r0, r5, r0, lsl #8
 770:	0b3a0803 	bleq	e82784 <startup-0x1f17d87c>
 774:	0b390b3b 	bleq	e43468 <startup-0x1f1bcb98>
 778:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 77c:	34050000 	strcc	r0, [r5], #-0
 780:	3a0e0300 	bcc	381388 <startup-0x1fc7ec78>
 784:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 788:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 78c:	06000018 			; <UNDEFINED> instruction: 0x06000018
 790:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 794:	0b3a0e03 	bleq	e83fa8 <startup-0x1f17c058>
 798:	0b390b3b 	bleq	e4348c <startup-0x1f1bcb74>
 79c:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
 7a0:	18070000 	stmdane	r7, {}	; <UNPREDICTABLE>
 7a4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
 7a8:	0b0b0024 	bleq	2c0840 <startup-0x1fd3f7c0>
 7ac:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 7b0:	2e090000 	cdpcs	0, 0, cr0, cr9, cr0, {0}
 7b4:	03193f01 	tsteq	r9, #1, 30
 7b8:	3b0b3a0e 	blcc	2ceff8 <startup-0x1fd31008>
 7bc:	110b390b 	tstne	fp, fp, lsl #18
 7c0:	40061201 	andmi	r1, r6, r1, lsl #4
 7c4:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 7c8:	00001301 	andeq	r1, r0, r1, lsl #6
 7cc:	3f012e0a 	svccc	0x00012e0a
 7d0:	3a0e0319 	bcc	38143c <startup-0x1fc7ebc4>
 7d4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 7d8:	3c13490b 			; <UNDEFINED> instruction: 0x3c13490b
 7dc:	00130119 	andseq	r0, r3, r9, lsl r1
 7e0:	012e0b00 			; <UNDEFINED> instruction: 0x012e0b00
 7e4:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 7e8:	0b3b0b3a 	bleq	ec34d8 <startup-0x1f13cb28>
 7ec:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 7f0:	01111349 	tsteq	r1, r9, asr #6
 7f4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 7f8:	01194296 			; <UNDEFINED> instruction: 0x01194296
 7fc:	0c000013 	stceq	0, cr0, [r0], {19}
 800:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 804:	0b3b0b3a 	bleq	ec34f4 <startup-0x1f13cb0c>
 808:	13490b39 	movtne	r0, #39737	; 0x9b39
 80c:	00001802 	andeq	r1, r0, r2, lsl #16
 810:	3f012e0d 	svccc	0x00012e0d
 814:	3a0e0319 	bcc	381480 <startup-0x1fc7eb80>
 818:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 81c:	1119270b 	tstne	r9, fp, lsl #14
 820:	40061201 	andmi	r1, r6, r1, lsl #4
 824:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 828:	00001301 	andeq	r1, r0, r1, lsl #6
 82c:	3f002e0e 	svccc	0x00002e0e
 830:	3a0e0319 	bcc	38149c <startup-0x1fc7eb64>
 834:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 838:	1119270b 	tstne	r9, fp, lsl #14
 83c:	40061201 	andmi	r1, r6, r1, lsl #4
 840:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 844:	01000000 	mrseq	r0, (UNDEF: 0)
 848:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 84c:	0e030b13 	vmoveq.32	d3[0], r0
 850:	01110e1b 	tsteq	r1, fp, lsl lr
 854:	17100612 			; <UNDEFINED> instruction: 0x17100612
 858:	24020000 	strcs	r0, [r2], #-0
 85c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 860:	000e030b 	andeq	r0, lr, fp, lsl #6
 864:	012e0300 			; <UNDEFINED> instruction: 0x012e0300
 868:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 86c:	0b3b0b3a 	bleq	ec355c <startup-0x1f13caa4>
 870:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 874:	06120111 			; <UNDEFINED> instruction: 0x06120111
 878:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 87c:	00130119 	andseq	r0, r3, r9, lsl r1
 880:	00050400 	andeq	r0, r5, r0, lsl #8
 884:	0b3a0803 	bleq	e82898 <startup-0x1f17d768>
 888:	0b390b3b 	bleq	e4357c <startup-0x1f1bca84>
 88c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 890:	2e050000 	cdpcs	0, 0, cr0, cr5, cr0, {0}
 894:	03193f00 	tsteq	r9, #0, 30
 898:	3b0b3a0e 	blcc	2cf0d8 <startup-0x1fd30f28>
 89c:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
 8a0:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 8a4:	96184006 	ldrls	r4, [r8], -r6
 8a8:	00001942 	andeq	r1, r0, r2, asr #18
 8ac:	3f002e06 	svccc	0x00002e06
 8b0:	3a0e0319 	bcc	38151c <startup-0x1fc7eae4>
 8b4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 8b8:	1119270b 	tstne	r9, fp, lsl #14
 8bc:	40061201 	andmi	r1, r6, r1, lsl #4
 8c0:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 8c4:	01000000 	mrseq	r0, (UNDEF: 0)
 8c8:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 8cc:	0e030b13 	vmoveq.32	d3[0], r0
 8d0:	01110e1b 	tsteq	r1, fp, lsl lr
 8d4:	17100612 			; <UNDEFINED> instruction: 0x17100612
 8d8:	24020000 	strcs	r0, [r2], #-0
 8dc:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 8e0:	000e030b 	andeq	r0, lr, fp, lsl #6
 8e4:	012e0300 			; <UNDEFINED> instruction: 0x012e0300
 8e8:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 8ec:	0b3b0b3a 	bleq	ec35dc <startup-0x1f13ca24>
 8f0:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 8f4:	06120111 			; <UNDEFINED> instruction: 0x06120111
 8f8:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 8fc:	00130119 	andseq	r0, r3, r9, lsl r1
 900:	00050400 	andeq	r0, r5, r0, lsl #8
 904:	0b3a0803 	bleq	e82918 <startup-0x1f17d6e8>
 908:	0b390b3b 	bleq	e435fc <startup-0x1f1bca04>
 90c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 910:	2e050000 	cdpcs	0, 0, cr0, cr5, cr0, {0}
 914:	03193f01 	tsteq	r9, #1, 30
 918:	3b0b3a0e 	blcc	2cf158 <startup-0x1fd30ea8>
 91c:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
 920:	11134919 	tstne	r3, r9, lsl r9
 924:	40061201 	andmi	r1, r6, r1, lsl #4
 928:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 92c:	00001301 	andeq	r1, r0, r1, lsl #6
 930:	03003406 	movweq	r3, #1030	; 0x406
 934:	3b0b3a0e 	blcc	2cf174 <startup-0x1fd30e8c>
 938:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 93c:	00180213 	andseq	r0, r8, r3, lsl r2
 940:	00340700 	eorseq	r0, r4, r0, lsl #14
 944:	0b3a0803 	bleq	e82958 <startup-0x1f17d6a8>
 948:	0b390b3b 	bleq	e4363c <startup-0x1f1bc9c4>
 94c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 950:	01080000 	mrseq	r0, (UNDEF: 8)
 954:	01134901 	tsteq	r3, r1, lsl #18
 958:	09000013 	stmdbeq	r0, {r0, r1, r4}
 95c:	13490021 	movtne	r0, #36897	; 0x9021
 960:	00000b2f 	andeq	r0, r0, pc, lsr #22
 964:	0b00240a 	bleq	9994 <startup-0x1fff666c>
 968:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 96c:	0b000008 	bleq	994 <startup-0x1ffff66c>
 970:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 974:	0b3a0e03 	bleq	e84188 <startup-0x1f17be78>
 978:	0b390b3b 	bleq	e4366c <startup-0x1f1bc994>
 97c:	01111349 	tsteq	r1, r9, asr #6
 980:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 984:	01194297 			; <UNDEFINED> instruction: 0x01194297
 988:	0c000013 	stceq	0, cr0, [r0], {19}
 98c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 990:	0b3a0e03 	bleq	e841a4 <startup-0x1f17be5c>
 994:	0b390b3b 	bleq	e43688 <startup-0x1f1bc978>
 998:	01111927 	tsteq	r1, r7, lsr #18
 99c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 9a0:	00194297 	mulseq	r9, r7, r2
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	000008d8 	ldrdeq	r0, [r0], -r8
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
	...
  28:	0000001c 	andeq	r0, r0, ip, lsl r0
  2c:	10b20002 	adcsne	r0, r2, r2
  30:	00040000 	andeq	r0, r4, r0
  34:	00000000 	andeq	r0, r0, r0
  38:	200008ec 	andcs	r0, r0, ip, ror #17
  3c:	00000524 	andeq	r0, r0, r4, lsr #10
	...
  48:	0000001c 	andeq	r0, r0, ip, lsl r0
  4c:	143e0002 	ldrtne	r0, [lr], #-2
  50:	00040000 	andeq	r0, r4, r0
  54:	00000000 	andeq	r0, r0, r0
  58:	20000e10 	andcs	r0, r0, r0, lsl lr
  5c:	0000013c 	andeq	r0, r0, ip, lsr r1
	...
  68:	0000001c 	andeq	r0, r0, ip, lsl r0
  6c:	1fd10002 	svcne	0x00d10002
  70:	00040000 	andeq	r0, r4, r0
  74:	00000000 	andeq	r0, r0, r0
  78:	20000f4c 	andcs	r0, r0, ip, asr #30
  7c:	000002e6 	andeq	r0, r0, r6, ror #5
	...
  88:	0000001c 	andeq	r0, r0, ip, lsl r0
  8c:	229c0002 	addscs	r0, ip, #2
  90:	00040000 	andeq	r0, r4, r0
  94:	00000000 	andeq	r0, r0, r0
  98:	20001234 	andcs	r1, r0, r4, lsr r2
  9c:	000000ac 	andeq	r0, r0, ip, lsr #1
	...
  a8:	0000001c 	andeq	r0, r0, ip, lsl r0
  ac:	233e0002 	teqcs	lr, #2
  b0:	00040000 	andeq	r0, r4, r0
  b4:	00000000 	andeq	r0, r0, r0
  b8:	200012e0 	andcs	r1, r0, r0, ror #5
  bc:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20000010 	andcs	r0, r0, r0, lsl r0
   4:	200008e8 	andcs	r0, r0, r8, ror #17
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	0000069e 	muleq	r0, lr, r6
   4:	01250003 			; <UNDEFINED> instruction: 0x01250003
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	5a010000 	bpl	40020 <startup-0x1ffbffe0>
  1c:	6f6d2f3a 	svcvs	0x006d2f3a
  20:	4f4d2f70 	svcmi	0x004d2f70
  24:	70532d50 	subsvc	r2, r3, r0, asr sp
  28:	31286c65 			; <UNDEFINED> instruction: 0x31286c65
  2c:	4f4d2f29 	svcmi	0x004d2f29
  30:	70532d50 	subsvc	r2, r3, r0, asr sp
  34:	532f6c65 			; <UNDEFINED> instruction: 0x532f6c65
  38:	656b616e 	strbvs	r6, [fp, #-366]!	; 0xfffffe92
  3c:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
  40:	61657363 	cmnvs	r5, r3, ror #6
  44:	635c7070 	cmpvs	ip, #112	; 0x70
  48:	6c65646f 	cfstrdvs	mvd6, [r5], #-444	; 0xfffffe44
  4c:	5c657469 	cfstrdpl	mvd7, [r5], #-420	; 0xfffffe5c
  50:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; fffffe88 <rear+0xdfffc604>
  54:	63675c73 	cmnvs	r7, #29440	; 0x7300
  58:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
  5c:	72615c6d 	rsbvc	r5, r1, #27904	; 0x6d00
  60:	6f6e2d6d 	svcvs	0x006e2d6d
  64:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
  68:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
  6c:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
  70:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
  74:	00737973 	rsbseq	r7, r3, r3, ror r9
  78:	635c3a63 	cmpvs	ip, #405504	; 0x63000
  7c:	70616573 	rsbvc	r6, r1, r3, ror r5
  80:	6f635c70 	svcvs	0x00635c70
  84:	696c6564 	stmdbvs	ip!, {r2, r5, r6, r8, sl, sp, lr}^
  88:	745c6574 	ldrbvc	r6, [ip], #-1396	; 0xfffffa8c
  8c:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
  90:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
  94:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
  98:	62696c5c 	rsbvs	r6, r9, #92, 24	; 0x5c00
  9c:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
  a0:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
  a4:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
  a8:	61652d65 	cmnvs	r5, r5, ror #26
  ac:	395c6962 	ldmdbcc	ip, {r1, r5, r6, r8, fp, sp, lr}^
  b0:	312e322e 			; <UNDEFINED> instruction: 0x312e322e
  b4:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
  b8:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
  bc:	74730000 	ldrbtvc	r0, [r3], #-0
  c0:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
  c4:	00632e70 	rsbeq	r2, r3, r0, ror lr
  c8:	6c000001 	stcvs	0, cr0, [r0], {1}
  cc:	2e6b636f 	cdpcs	3, 6, cr6, cr11, cr15, {3}
  d0:	00020068 	andeq	r0, r2, r8, rrx
  d4:	79745f00 	ldmdbvc	r4!, {r8, r9, sl, fp, ip, lr}^
  d8:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
  dc:	00020068 	andeq	r0, r2, r8, rrx
  e0:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
  e4:	2e666564 	cdpcs	5, 6, cr6, cr6, cr4, {3}
  e8:	00030068 	andeq	r0, r3, r8, rrx
  ec:	65657200 	strbvs	r7, [r5, #-512]!	; 0xfffffe00
  f0:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
  f4:	00000200 	andeq	r0, r0, r0, lsl #4
  f8:	6d6f6567 	cfstr64vs	mvdx6, [pc, #-412]!	; ffffff64 <rear+0xdfffc6e0>
  fc:	69727465 	ldmdbvs	r2!, {r0, r2, r5, r6, sl, ip, sp, lr}^
 100:	6a626f63 	bvs	189be94 <startup-0x1e76416c>
 104:	2e746365 	cdpcs	3, 7, cr6, cr4, cr5, {3}
 108:	00010068 	andeq	r0, r1, r8, rrx
 10c:	61726700 	cmnvs	r2, r0, lsl #14
 110:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 114:	70736964 	rsbsvc	r6, r3, r4, ror #18
 118:	2e79616c 	rpwcsez	f6, f1, #4.0
 11c:	00010068 	andeq	r0, r1, r8, rrx
 120:	616d6900 	cmnvs	sp, r0, lsl #18
 124:	782e6567 	stmdavc	lr!, {r0, r1, r2, r5, r6, r8, sl, sp, lr}
 128:	01006d62 	tsteq	r0, r2, ror #26
 12c:	05000000 	streq	r0, [r0, #-0]
 130:	02050001 	andeq	r0, r5, #1
 134:	20000000 	andcs	r0, r0, r0
 138:	13011c03 	movwne	r1, #7171	; 0x1c03
 13c:	212f2121 			; <UNDEFINED> instruction: 0x212f2121
 140:	01000302 	tsteq	r0, r2, lsl #6
 144:	00390501 	eorseq	r0, r9, r1, lsl #10
 148:	00100205 	andseq	r0, r0, r5, lsl #4
 14c:	23032000 	movwcs	r2, #12288	; 0x3000
 150:	670d0501 	strvs	r0, [sp, -r1, lsl #10]
 154:	3d01053d 	cfstr32cc	mvfx0, [r1, #-244]	; 0xffffff0c
 158:	054c1c05 	strbeq	r1, [ip, #-3077]	; 0xfffff3fb
 15c:	05054b0e 	streq	r4, [r5, #-2830]	; 0xfffff4f2
 160:	0010052e 	andseq	r0, r0, lr, lsr #10
 164:	21030402 	tstcs	r3, r2, lsl #8
 168:	02001c05 	andeq	r1, r0, #1280	; 0x500
 16c:	052e0304 	streq	r0, [lr, #-772]!	; 0xfffffcfc
 170:	04020020 	streq	r0, [r2], #-32	; 0xffffffe0
 174:	1e057403 	cdpne	4, 0, cr7, cr5, cr3, {0}
 178:	03040200 	movweq	r0, #16896	; 0x4200
 17c:	0009052e 	andeq	r0, r9, lr, lsr #10
 180:	20030402 	andcs	r0, r3, r2, lsl #8
 184:	02002805 	andeq	r2, r0, #327680	; 0x50000
 188:	05200304 	streq	r0, [r0, #-772]!	; 0xfffffcfc
 18c:	04020034 	streq	r0, [r2], #-52	; 0xffffffcc
 190:	38052e03 	stmdacc	r5, {r0, r1, r9, sl, fp, sp}
 194:	03040200 	movweq	r0, #16896	; 0x4200
 198:	00360574 	eorseq	r0, r6, r4, ror r5
 19c:	2e030402 	cdpcs	4, 0, cr0, cr3, cr2, {0}
 1a0:	02000905 	andeq	r0, r0, #81920	; 0x14000
 1a4:	05200304 	streq	r0, [r0, #-772]!	; 0xfffffcfc
 1a8:	0402002b 	streq	r0, [r2], #-43	; 0xffffffd5
 1ac:	18053b03 	stmdane	r5, {r0, r1, r8, r9, fp, ip, sp}
 1b0:	01040200 	mrseq	r0, R12_usr
 1b4:	001d053c 	andseq	r0, sp, ip, lsr r5
 1b8:	2e010402 	cdpcs	4, 0, cr0, cr1, cr2, {0}
 1bc:	02000505 	andeq	r0, r0, #20971520	; 0x1400000
 1c0:	05200104 	streq	r0, [r0, #-260]!	; 0xfffffefc
 1c4:	1d053f01 	stcne	15, cr3, [r5, #-4]
 1c8:	4b0e055a 	blmi	381738 <startup-0x1fc7e8c8>
 1cc:	052e0505 	streq	r0, [lr, #-1285]!	; 0xfffffafb
 1d0:	04020010 	streq	r0, [r2], #-16
 1d4:	1c052103 	stfnes	f2, [r5], {3}
 1d8:	03040200 	movweq	r0, #16896	; 0x4200
 1dc:	0020052e 	eoreq	r0, r0, lr, lsr #10
 1e0:	74030402 	strvc	r0, [r3], #-1026	; 0xfffffbfe
 1e4:	02001e05 	andeq	r1, r0, #5, 28	; 0x50
 1e8:	052e0304 	streq	r0, [lr, #-772]!	; 0xfffffcfc
 1ec:	04020009 	streq	r0, [r2], #-9
 1f0:	28052003 	stmdacs	r5, {r0, r1, sp}
 1f4:	03040200 	movweq	r0, #16896	; 0x4200
 1f8:	00340520 	eorseq	r0, r4, r0, lsr #10
 1fc:	2e030402 	cdpcs	4, 0, cr0, cr3, cr2, {0}
 200:	02003805 	andeq	r3, r0, #327680	; 0x50000
 204:	05740304 	ldrbeq	r0, [r4, #-772]!	; 0xfffffcfc
 208:	04020036 	streq	r0, [r2], #-54	; 0xffffffca
 20c:	09052e03 	stmdbeq	r5, {r0, r1, r9, sl, fp, sp}
 210:	03040200 	movweq	r0, #16896	; 0x4200
 214:	002d0520 	eoreq	r0, sp, r0, lsr #10
 218:	3b030402 	blcc	c1228 <startup-0x1ff3edd8>
 21c:	02001a05 	andeq	r1, r0, #20480	; 0x5000
 220:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 224:	0402001f 	streq	r0, [r2], #-31	; 0xffffffe1
 228:	05052e01 	streq	r2, [r5, #-3585]	; 0xfffff1ff
 22c:	01040200 	mrseq	r0, R12_usr
 230:	3f010520 	svccc	0x00010520
 234:	055a1c05 	ldrbeq	r1, [sl, #-3077]	; 0xfffff3fb
 238:	1a054d10 	bne	153680 <startup-0x1feac980>
 23c:	2e17052e 	cfmul64cs	mvdx0, mvdx7, mvdx14
 240:	05200d05 	streq	r0, [r0, #-3333]!	; 0xfffff2fb
 244:	1a052f10 	bne	14be8c <startup-0x1feb4174>
 248:	2e17052e 	cfmul64cs	mvdx0, mvdx7, mvdx14
 24c:	05200d05 	streq	r0, [r0, #-3333]!	; 0xfffff2fb
 250:	1205320a 	andne	r3, r5, #-1610612736	; 0xa0000000
 254:	2e10052e 	cfmul64cs	mvdx0, mvdx0, mvdx14
 258:	05200705 	streq	r0, [r0, #-1797]!	; 0xfffff8fb
 25c:	05592f11 	ldrbeq	r2, [r9, #-3857]	; 0xfffff0ef
 260:	12053f0a 	andne	r3, r5, #10, 30	; 0x28
 264:	2e10052e 	cfmul64cs	mvdx0, mvdx0, mvdx14
 268:	05200705 	streq	r0, [r0, #-1797]!	; 0xfffff8fb
 26c:	10052f11 	andne	r2, r5, r1, lsl pc
 270:	3f0a0559 	svccc	0x000a0559
 274:	052e1205 	streq	r1, [lr, #-517]!	; 0xfffffdfb
 278:	07052e10 	smladeq	r5, r0, lr, r2
 27c:	2f110520 	svccs	0x00110520
 280:	3f0a0559 	svccc	0x000a0559
 284:	052e1205 	streq	r1, [lr, #-517]!	; 0xfffffdfb
 288:	07052e10 	smladeq	r5, r0, lr, r2
 28c:	2f110520 	svccs	0x00110520
 290:	3e050559 	cfrshl32cc	mvfx5, mvfx9, r0
 294:	054b0105 	strbeq	r0, [fp, #-261]	; 0xfffffefb
 298:	00dd034f 	sbcseq	r0, sp, pc, asr #6
 29c:	750e054a 	strvc	r0, [lr, #-1354]	; 0xfffffab6
 2a0:	054b0f05 	strbeq	r0, [fp, #-3845]	; 0xfffff0fb
 2a4:	01054b0d 	tsteq	r5, sp, lsl #22
 2a8:	4c2a053d 	cfstr32mi	mvfx0, [sl], #-244	; 0xffffff0c
 2ac:	05690905 	strbeq	r0, [r9, #-2309]!	; 0xfffff6fb
 2b0:	07052e15 	smladeq	r5, r5, lr, r2
 2b4:	2f1b053c 	svccs	0x001b053c
 2b8:	052e2205 	streq	r2, [lr, #-517]!	; 0xfffffdfb
 2bc:	1b052e18 	blne	14bb24 <startup-0x1feb44dc>
 2c0:	2e220530 	mcrcs	5, 1, r0, cr2, cr0, {1}
 2c4:	052e1805 	streq	r1, [lr, #-2053]!	; 0xfffff7fb
 2c8:	0505310c 	streq	r3, [r5, #-268]	; 0xfffffef4
 2cc:	2110052e 	tstcs	r0, lr, lsr #10
 2d0:	052e0905 	streq	r0, [lr, #-2309]!	; 0xfffff6fb
 2d4:	2b052123 	blcs	148768 <startup-0x1feb7898>
 2d8:	3c3b052e 	cfldr32cc	mvfx0, [fp], #-184	; 0xffffff48
 2dc:	052e2905 	streq	r2, [lr, #-2309]!	; 0xfffff6fb
 2e0:	1405201b 	strne	r2, [r5], #-27	; 0xffffffe5
 2e4:	2e0d054b 	cfsh32cs	mvfx0, mvfx13, #43
 2e8:	05211505 	streq	r1, [r1, #-1285]!	; 0xfffffafb
 2ec:	1d058214 	sfmne	f0, 1, [r5, #-80]	; 0xffffffb0
 2f0:	2e210521 	cfsh64cs	mvdx0, mvdx1, #17
 2f4:	052e2505 	streq	r2, [lr, #-1285]!	; 0xfffffafb
 2f8:	15052e29 	strne	r2, [r5, #-3625]	; 0xfffff1d7
 2fc:	20300520 	eorscs	r0, r0, r0, lsr #10
 300:	053c3405 	ldreq	r3, [ip, #-1029]!	; 0xfffffbfb
 304:	21052015 	tstcs	r5, r5, lsl r0
 308:	02040200 	andeq	r0, r4, #0, 4
 30c:	000d053a 	andeq	r0, sp, sl, lsr r5
 310:	3c010402 	cfstrscc	mvf0, [r1], {2}
 314:	02002a05 	andeq	r2, r0, #20480	; 0x5000
 318:	053a0204 	ldreq	r0, [sl, #-516]!	; 0xfffffdfc
 31c:	04020009 	streq	r0, [r2], #-9
 320:	21053c01 	tstcs	r5, r1, lsl #24
 324:	02040200 	andeq	r0, r4, #0, 4
 328:	00160549 	andseq	r0, r6, r9, asr #10
 32c:	3c010402 	cfstrscc	mvf0, [r1], {2}
 330:	02000505 	andeq	r0, r0, #20971520	; 0x1400000
 334:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 338:	3c090301 	stccc	3, cr0, [r9], {1}
 33c:	055a1b05 	ldrbeq	r1, [sl, #-2821]	; 0xfffff4fb
 340:	08054b0d 	stmdaeq	r5, {r0, r2, r3, r8, r9, fp, lr}
 344:	001f052e 	andseq	r0, pc, lr, lsr #10
 348:	2e010402 	cdpcs	4, 0, cr0, cr1, cr2, {0}
 34c:	02001805 	andeq	r1, r0, #327680	; 0x50000
 350:	052e0104 	streq	r0, [lr, #-260]!	; 0xfffffefc
 354:	0e052f0d 	cdpeq	15, 0, cr2, cr5, cr13, {0}
 358:	2e05054b 	cfsh32cs	mvfx0, mvfx5, #43
 35c:	02000a05 	andeq	r0, r0, #20480	; 0x5000
 360:	05210304 	streq	r0, [r1, #-772]!	; 0xfffffcfc
 364:	0402000d 	streq	r0, [r2], #-13
 368:	15058203 	strne	r8, [r5, #-515]	; 0xfffffdfd
 36c:	03040200 	movweq	r0, #16896	; 0x4200
 370:	00090520 	andeq	r0, r9, r0, lsr #10
 374:	66030402 	strvs	r0, [r3], -r2, lsl #8
 378:	02002a05 	andeq	r2, r0, #20480	; 0x5000
 37c:	05490304 	strbeq	r0, [r9, #-772]	; 0xfffffcfc
 380:	04020017 	streq	r0, [r2], #-23	; 0xffffffe9
 384:	05053c01 	streq	r3, [r5, #-3073]	; 0xfffff3ff
 388:	01040200 	mrseq	r0, R12_usr
 38c:	3f01052e 	svccc	0x0001052e
 390:	05761a05 	ldrbeq	r1, [r6, #-2565]!	; 0xfffff5fb
 394:	05054c06 	streq	r4, [r5, #-3078]	; 0xfffff3fa
 398:	3d01052e 	cfstr32cc	mvfx0, [r1, #-184]	; 0xffffff48
 39c:	05761e05 	ldrbeq	r1, [r6, #-3589]!	; 0xfffff1fb
 3a0:	053d4b09 	ldreq	r4, [sp, #-2825]!	; 0xfffff4f7
 3a4:	05053d0d 	streq	r3, [r5, #-3341]	; 0xfffff2f3
 3a8:	0018052e 	andseq	r0, r8, lr, lsr #10
 3ac:	21030402 	tstcs	r3, r2, lsl #8
 3b0:	02000d05 	andeq	r0, r0, #320	; 0x140
 3b4:	05820304 	streq	r0, [r2, #772]	; 0x304
 3b8:	0402000a 	streq	r0, [r2], #-10
 3bc:	13052f03 	movwne	r2, #24323	; 0x5f03
 3c0:	03040200 	movweq	r0, #16896	; 0x4200
 3c4:	00100582 	andseq	r0, r0, r2, lsl #11
 3c8:	2f030402 	svccs	0x00030402
 3cc:	02001405 	andeq	r1, r0, #83886080	; 0x5000000
 3d0:	05300304 	ldreq	r0, [r0, #-772]!	; 0xfffffcfc
 3d4:	04020011 	streq	r0, [r2], #-17	; 0xffffffef
 3d8:	0a058203 	beq	160bec <startup-0x1fe9f414>
 3dc:	03040200 	movweq	r0, #16896	; 0x4200
 3e0:	0013052f 	andseq	r0, r3, pc, lsr #10
 3e4:	82030402 	andhi	r0, r3, #33554432	; 0x2000000
 3e8:	02001005 	andeq	r1, r0, #5
 3ec:	052f0304 	streq	r0, [pc, #-772]!	; f0 <startup-0x1fffff10>
 3f0:	04020024 	streq	r0, [r2], #-36	; 0xffffffdc
 3f4:	2e790303 	cdpcs	3, 7, cr0, cr9, cr3, {0}
 3f8:	02001605 	andeq	r1, r0, #5242880	; 0x500000
 3fc:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 400:	04020005 	streq	r0, [r2], #-5
 404:	01052e01 	tsteq	r5, r1, lsl #28
 408:	053c0903 	ldreq	r0, [ip, #-2307]!	; 0xfffff6fd
 40c:	0905761e 	stmdbeq	r5, {r1, r2, r3, r4, r9, sl, ip, sp, lr}
 410:	2e150559 	mrccs	5, 0, r0, cr5, cr9, {2}
 414:	052f0605 	streq	r0, [pc, #-1541]!	; fffffe17 <rear+0xdfffc593>
 418:	081a0301 	ldmdaeq	sl, {r0, r8, r9}
 41c:	03140520 	tsteq	r4, #32, 10	; 0x8000000
 420:	0f052068 	svceq	0x00052068
 424:	2f12052e 	svccs	0x0012052e
 428:	052e1105 	streq	r1, [lr, #-261]!	; 0xfffffefb
 42c:	0d054b1a 	vstreq	d4, [r5, #-104]	; 0xffffff98
 430:	2214053e 	andscs	r0, r4, #260046848	; 0xf800000
 434:	052e0f05 	streq	r0, [lr, #-3845]!	; 0xfffff0fb
 438:	11052f12 	tstne	r5, r2, lsl pc
 43c:	591a052e 	ldmdbpl	sl, {r1, r2, r3, r5, r8, sl}
 440:	053e0d05 	ldreq	r0, [lr, #-3333]!	; 0xfffff2fb
 444:	0f052214 	svceq	0x00052214
 448:	2f12052e 	svccs	0x0012052e
 44c:	052e1105 	streq	r1, [lr, #-261]!	; 0xfffffefb
 450:	0d05591a 	vstreq.16	s10, [r5, #-52]	; 0xffffffcc	; <UNPREDICTABLE>
 454:	2214053e 	andscs	r0, r4, #260046848	; 0xf800000
 458:	052e0f05 	streq	r0, [lr, #-3845]!	; 0xfffff0fb
 45c:	11052f12 	tstne	r5, r2, lsl pc
 460:	4b1a052e 	blmi	681920 <startup-0x1f97e6e0>
 464:	033e0d05 	teqeq	lr, #320	; 0x140
 468:	3434206e 	ldrtcc	r2, [r4], #-110	; 0xffffff92
 46c:	22010534 	andcs	r0, r1, #52, 10	; 0xd000000
 470:	05ca2805 	strbeq	r2, [sl, #2053]	; 0x805
 474:	29055912 	stmdbcs	r5, {r1, r4, r8, fp, ip, lr}
 478:	5a0d0558 	bpl	3419e0 <startup-0x1fcbe620>
 47c:	052e0805 	streq	r0, [lr, #-2053]!	; 0xfffff7fb
 480:	04020024 	streq	r0, [r2], #-36	; 0xffffffdc
 484:	1d053c01 	stcne	12, cr3, [r5, #-4]
 488:	01040200 	mrseq	r0, R12_usr
 48c:	401c052e 	andsmi	r0, ip, lr, lsr #10
 490:	053c1005 	ldreq	r1, [ip, #-5]!
 494:	04020028 	streq	r0, [r2], #-40	; 0xffffffd8
 498:	1c052001 	stcne	0, cr2, [r5], {1}
 49c:	3c10053d 	cfldr32cc	mvfx0, [r0], {61}	; 0x3d
 4a0:	02002805 	andeq	r2, r0, #327680	; 0x50000
 4a4:	05200104 	streq	r0, [r0, #-260]!	; 0xfffffefc
 4a8:	0f053e1b 	svceq	0x00053e1b
 4ac:	002e053c 	eoreq	r0, lr, ip, lsr r5
 4b0:	20010402 	andcs	r0, r1, r2, lsl #8
 4b4:	02002005 	andeq	r2, r0, #5
 4b8:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 4bc:	0d051d10 	stceq	13, cr1, [r5, #-64]	; 0xffffffc0
 4c0:	22190523 	andscs	r0, r9, #146800640	; 0x8c00000
 4c4:	052e1105 	streq	r1, [lr, #-261]!	; 0xfffffefb
 4c8:	11052f19 	tstne	r5, r9, lsl pc
 4cc:	3101052e 	tstcc	r1, lr, lsr #10
 4d0:	054c1405 	strbeq	r1, [ip, #-1029]	; 0xfffffbfb
 4d4:	1b054e13 	blne	153d28 <startup-0x1feac2d8>
 4d8:	58230558 	stmdapl	r3!, {r3, r4, r6, r8, sl}
 4dc:	05660a05 	strbeq	r0, [r6, #-2565]!	; 0xfffff5fb
 4e0:	01052f0c 	tsteq	r5, ip, lsl #30
 4e4:	77140530 			; <UNDEFINED> instruction: 0x77140530
 4e8:	05310905 	ldreq	r0, [r1, #-2309]!	; 0xfffff6fb
 4ec:	0905202b 	stmdbeq	r5, {r0, r1, r3, r5, sp}
 4f0:	3105052f 	tstcc	r5, pc, lsr #10
 4f4:	05201305 	streq	r1, [r0, #-773]!	; 0xfffffcfb
 4f8:	14052f05 	strne	r2, [r5], #-3845	; 0xfffff0fb
 4fc:	2f050520 	svccs	0x00050520
 500:	05201505 	streq	r1, [r0, #-1285]!	; 0xfffffafb
 504:	13053005 	movwne	r3, #20485	; 0x5005
 508:	2f050520 	svccs	0x00050520
 50c:	05201305 	streq	r1, [r0, #-773]!	; 0xfffffcfb
 510:	13053d05 	movwne	r3, #23813	; 0x5d05
 514:	05052f20 	streq	r2, [r5, #-3872]	; 0xfffff0e0
 518:	20140575 	andscs	r0, r4, r5, ror r5
 51c:	052f0105 	streq	r0, [pc, #-261]!	; 41f <startup-0x1ffffbe1>
 520:	053e081b 	ldreq	r0, [lr, #-2075]!	; 0xfffff7e5
 524:	0e054b09 	vmlaeq.f64	d4, d5, d9
 528:	2e05052f 	cfsh32cs	mvfx0, mvfx5, #31
 52c:	05210b05 	streq	r0, [r1, #-2821]!	; 0xfffff4fb
 530:	16053d0e 	strne	r3, [r5], -lr, lsl #26
 534:	3e0e0582 	cfsh32cc	mvfx0, mvfx14, #-62
 538:	05821605 	streq	r1, [r2, #1541]	; 0x605
 53c:	04020017 	streq	r0, [r2], #-23	; 0xffffffe9
 540:	0a053002 	beq	14c550 <startup-0x1feb3ab0>
 544:	02040200 	andeq	r0, r4, #0, 4
 548:	001b052e 	andseq	r0, fp, lr, lsr #10
 54c:	82020402 	andhi	r0, r2, #33554432	; 0x2000000
 550:	02001305 	andeq	r1, r0, #335544320	; 0x14000000
 554:	05200204 	streq	r0, [r0, #-516]!	; 0xfffffdfc
 558:	0402000a 	streq	r0, [r2], #-10
 55c:	13052102 	movwne	r2, #20738	; 0x5102
 560:	02040200 	andeq	r0, r4, #0, 4
 564:	000a0582 	andeq	r0, sl, r2, lsl #11
 568:	2f020402 	svccs	0x00020402
 56c:	02001305 	andeq	r1, r0, #335544320	; 0x14000000
 570:	05820204 	streq	r0, [r2, #516]	; 0x204
 574:	0402000a 	streq	r0, [r2], #-10
 578:	13052f02 	movwne	r2, #24322	; 0x5f02
 57c:	02040200 	andeq	r0, r4, #0, 4
 580:	000a0582 	andeq	r0, sl, r2, lsl #11
 584:	2f020402 	svccs	0x00020402
 588:	02001305 	andeq	r1, r0, #335544320	; 0x14000000
 58c:	05820204 	streq	r0, [r2, #516]	; 0x204
 590:	0402000a 	streq	r0, [r2], #-10
 594:	14052f02 	strne	r2, [r5], #-3842	; 0xfffff0fe
 598:	02040200 	andeq	r0, r4, #0, 4
 59c:	000a0582 	andeq	r0, sl, r2, lsl #11
 5a0:	2f020402 	svccs	0x00020402
 5a4:	02001305 	andeq	r1, r0, #335544320	; 0x14000000
 5a8:	05820204 	streq	r0, [r2, #516]	; 0x204
 5ac:	0402000a 	streq	r0, [r2], #-10
 5b0:	18052f02 	stmdane	r5, {r1, r8, r9, sl, fp, sp}
 5b4:	02040200 	andeq	r0, r4, #0, 4
 5b8:	00120582 	andseq	r0, r2, r2, lsl #11
 5bc:	2f020402 	svccs	0x00020402
 5c0:	02001e05 	andeq	r1, r0, #5, 28	; 0x50
 5c4:	72030204 	andvc	r0, r3, #4, 4	; 0x40000000
 5c8:	00230558 	eoreq	r0, r3, r8, asr r5
 5cc:	3c020402 	cfstrscc	mvf0, [r2], {2}
 5d0:	02000505 	andeq	r0, r0, #20971520	; 0x1400000
 5d4:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 5d8:	3c100301 	ldccc	3, cr0, [r0], {1}
 5dc:	30081a05 	andcc	r1, r8, r5, lsl #20
 5e0:	054b0c05 	strbeq	r0, [fp, #-3077]	; 0xfffff3fb
 5e4:	0e053d0d 	cdpeq	13, 0, cr3, cr5, cr13, {0}
 5e8:	3d0d053d 	cfstr32cc	mvfx0, [sp, #-244]	; 0xffffff0c
 5ec:	053d1205 	ldreq	r1, [sp, #-517]!	; 0xfffffdfb
 5f0:	14053d01 	strne	r3, [r5], #-3329	; 0xfffff2ff
 5f4:	2f0905e6 	svccs	0x000905e6
 5f8:	2f10052f 	svccs	0x0010052f
 5fc:	053d1305 	ldreq	r1, [sp, #-773]!	; 0xfffffcfb
 600:	21053d01 	tstcs	r5, r1, lsl #26
 604:	67090584 	strvs	r0, [r9, -r4, lsl #11]
 608:	054a1305 	strbeq	r1, [sl, #-773]	; 0xfffffcfb
 60c:	05054d0d 	streq	r4, [r5, #-3341]	; 0xfffff2f3
 610:	052f2f4e 	streq	r2, [pc, #-3918]!	; fffff6ca <rear+0xdfffbe46>
 614:	0d05300a 	stceq	0, cr3, [r5, #-40]	; 0xffffffd8
 618:	030b0522 	movweq	r0, #46370	; 0xb522
 61c:	0d052e0b 	stceq	14, cr2, [r5, #-44]	; 0xffffffd4
 620:	2f150559 	svccs	0x00150559
 624:	593d0d05 	ldmdbpl	sp!, {r0, r2, r8, sl, fp}
 628:	4b0e0569 	blmi	381bd4 <startup-0x1fc7e42c>
 62c:	31210d05 			; <UNDEFINED> instruction: 0x31210d05
 630:	05591005 	ldrbeq	r1, [r9, #-5]
 634:	0e055911 			; <UNDEFINED> instruction: 0x0e055911
 638:	680d0568 	stmdavs	sp, {r3, r5, r6, r8, sl}
 63c:	3f1a052f 	svccc	0x001a052f
 640:	05670d05 	strbeq	r0, [r7, #-3333]!	; 0xfffff2fb
 644:	1105911d 	tstne	r5, sp, lsl r1
 648:	211c0566 	tstcs	ip, r6, ror #10
 64c:	05661105 	strbeq	r1, [r6, #-261]!	; 0xfffffefb
 650:	1105211a 	tstne	r5, sl, lsl r1
 654:	211c0566 	tstcs	ip, r6, ror #10
 658:	05661105 	strbeq	r1, [r6, #-261]!	; 0xfffffefb
 65c:	2e052121 	adfcssp	f2, f5, f1
 660:	4a11054a 	bmi	441b90 <startup-0x1fbbe470>
 664:	05212705 	streq	r2, [r1, #-1797]!	; 0xfffff8fb
 668:	18054a11 	stmdane	r5, {r0, r4, r9, fp, lr}
 66c:	74250524 	strtvc	r0, [r5], #-1316	; 0xfffffadc
 670:	054a0f05 	strbeq	r0, [sl, #-3845]	; 0xfffff0fb
 674:	04020037 	streq	r0, [r2], #-55	; 0xffffffc9
 678:	44052e01 	strmi	r2, [r5], #-3585	; 0xfffff1ff
 67c:	01040200 	mrseq	r0, R12_usr
 680:	002c0574 	eoreq	r0, ip, r4, ror r5
 684:	3c010402 	cfstrscc	mvf0, [r1], {2}
 688:	052f1705 	streq	r1, [pc, #-1797]!	; ffffff8b <rear+0xdfffc707>
 68c:	0e055911 			; <UNDEFINED> instruction: 0x0e055911
 690:	05826503 	streq	r6, [r2, #1283]	; 0x503
 694:	666b030a 	strbtvs	r0, [fp], -sl, lsl #6
 698:	37030105 	strcc	r0, [r3, -r5, lsl #2]
 69c:	001d0266 	andseq	r0, sp, r6, ror #4
 6a0:	02b50101 	adcseq	r0, r5, #1073741824	; 0x40000000
 6a4:	00030000 	andeq	r0, r3, r0
 6a8:	0000006e 	andeq	r0, r0, lr, rrx
 6ac:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
 6b0:	0101000d 	tsteq	r1, sp
 6b4:	00000101 	andeq	r0, r0, r1, lsl #2
 6b8:	00000100 	andeq	r0, r0, r0, lsl #2
 6bc:	2f3a5a01 	svccs	0x003a5a01
 6c0:	2f706f6d 	svccs	0x00706f6d
 6c4:	2d504f4d 	ldclcs	15, cr4, [r0, #-308]	; 0xfffffecc
 6c8:	6c657053 	stclvs	0, cr7, [r5], #-332	; 0xfffffeb4
 6cc:	2f293128 	svccs	0x00293128
 6d0:	2d504f4d 	ldclcs	15, cr4, [r0, #-308]	; 0xfffffecc
 6d4:	6c657053 	stclvs	0, cr7, [r5], #-332	; 0xfffffeb4
 6d8:	616e532f 	cmnvs	lr, pc, lsr #6
 6dc:	0000656b 	andeq	r6, r0, fp, ror #10
 6e0:	70617267 	rsbvc	r7, r1, r7, ror #4
 6e4:	64636968 	strbtvs	r6, [r3], #-2408	; 0xfffff698
 6e8:	6c707369 	ldclvs	3, cr7, [r0], #-420	; 0xfffffe5c
 6ec:	632e7961 			; <UNDEFINED> instruction: 0x632e7961
 6f0:	00000100 	andeq	r0, r0, r0, lsl #2
 6f4:	72672f2e 	rsbvc	r2, r7, #46, 30	; 0xb8
 6f8:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 6fc:	73696463 	cmnvc	r9, #1660944384	; 0x63000000
 700:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 704:	0000682e 	andeq	r6, r0, lr, lsr #16
 708:	2f2e0000 	svccs	0x002e0000
 70c:	69666564 	stmdbvs	r6!, {r2, r5, r6, r8, sl, sp, lr}^
 710:	2e73656e 	cdpcs	5, 7, cr6, cr3, cr14, {3}
 714:	00000068 	andeq	r0, r0, r8, rrx
 718:	18050000 	stmdane	r5, {}	; <UNPREDICTABLE>
 71c:	ec020500 	cfstr32	mvfx0, [r2], {-0}
 720:	17200008 	strne	r0, [r0, -r8]!
 724:	3d2f0505 	cfstr32cc	mvfx0, [pc, #-20]!	; 718 <startup-0x1ffff8e8>
 728:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
 72c:	4b4b4b3d 	blmi	12d3428 <startup-0x1ed2cbd8>
 730:	01054b4b 	tsteq	r5, fp, asr #22
 734:	3e27053d 	mcrcc	5, 1, r0, cr7, cr13, {1}
 738:	056a0805 	strbeq	r0, [sl, #-2053]!	; 0xfffff7fb
 73c:	bb4b2007 	bllt	12c8760 <startup-0x1ed378a0>
 740:	05750505 	ldrbeq	r0, [r5, #-1285]!	; 0xfffffafb
 744:	01052014 	tsteq	r5, r4, lsl r0
 748:	6825053e 	stmdavs	r5!, {r1, r2, r3, r4, r5, r8, sl}
 74c:	056a0805 	strbeq	r0, [sl, #-2053]!	; 0xfffff7fb
 750:	754b2007 	strbvc	r2, [fp, #-7]
 754:	05670505 	strbeq	r0, [r7, #-1285]!	; 0xfffffafb
 758:	01052014 	tsteq	r5, r4, lsl r0
 75c:	682b053d 	stmdavs	fp!, {r0, r2, r3, r4, r5, r8, sl}
 760:	05670505 	strbeq	r0, [r7, #-1285]!	; 0xfffffafb
 764:	ba130301 	blt	4c1370 <startup-0x1fb3ec90>
 768:	6f030d05 	svcvs	0x00030d05
 76c:	3d233d20 	stccc	13, cr3, [r3, #-128]!	; 0xffffff80
 770:	3d3d233d 	ldccc	3, cr2, [sp, #-244]!	; 0xffffff0c
 774:	01053d23 	tsteq	r5, r3, lsr #26
 778:	4c1e0522 	cfldr32mi	mvfx0, [lr], {34}	; 0x22
 77c:	3d2f0505 	cfstr32cc	mvfx0, [pc, #-20]!	; 770 <startup-0x1ffff890>
 780:	05201305 	streq	r1, [r0, #-773]!	; 0xfffffcfb
 784:	3d3d2f05 	ldccc	15, cr2, [sp, #-20]!	; 0xffffffec
 788:	02000905 	andeq	r0, r0, #81920	; 0x14000
 78c:	00300104 	eorseq	r0, r0, r4, lsl #2
 790:	3d010402 	cfstrscc	mvf0, [r1, #-8]
 794:	01040200 	mrseq	r0, R12_usr
 798:	0402002f 	streq	r0, [r2], #-47	; 0xffffffd1
 79c:	02003d01 	andeq	r3, r0, #1, 26	; 0x40
 7a0:	052b0104 	streq	r0, [fp, #-260]!	; 0xfffffefc
 7a4:	580b0335 	stmdapl	fp, {r0, r2, r4, r5, r8, r9}
 7a8:	3d670505 	cfstr64cc	mvdx0, [r7, #-20]!	; 0xffffffec
 7ac:	05201305 	streq	r1, [r0, #-773]!	; 0xfffffcfb
 7b0:	593d2f05 	ldmdbpl	sp!, {r0, r2, r8, r9, sl, fp, sp}
 7b4:	1c053d2f 	stcne	13, cr3, [r5], {47}	; 0x2f
 7b8:	2013052f 	andscs	r0, r3, pc, lsr #10
 7bc:	3d4b0505 	cfstr64cc	mvdx0, [fp, #-20]	; 0xffffffec
 7c0:	05201305 	streq	r1, [r0, #-773]!	; 0xfffffcfb
 7c4:	08053014 	stmdaeq	r5, {r2, r4, ip, sp}
 7c8:	2109054a 	tstcs	r9, sl, asr #10
 7cc:	053f1405 	ldreq	r1, [pc, #-1029]!	; 3cf <startup-0x1ffffc31>
 7d0:	09054a08 	stmdbeq	r5, {r3, r9, fp, lr}
 7d4:	3f0c0521 	svccc	0x000c0521
 7d8:	053d0105 	ldreq	r0, [sp, #-261]!	; 0xfffffefb
 7dc:	0c05ca2e 			; <UNDEFINED> instruction: 0x0c05ca2e
 7e0:	01055967 	tsteq	r5, r7, ror #18
 7e4:	4c360567 	cfldr32mi	mvfx0, [r6], #-412	; 0xfffffe64
 7e8:	05910505 	ldreq	r0, [r1, #1285]	; 0x505
 7ec:	05052016 	streq	r2, [r5, #-22]	; 0xffffffea
 7f0:	3d2f593d 			; <UNDEFINED> instruction: 0x3d2f593d
 7f4:	3e13052f 	cfmul64cc	mvdx0, mvdx3, mvdx15
 7f8:	054a0705 	strbeq	r0, [sl, #-1797]	; 0xfffff8fb
 7fc:	13052109 	movwne	r2, #20745	; 0x5109
 800:	4a07053f 	bmi	1c1d04 <startup-0x1fe3e2fc>
 804:	05210905 	streq	r0, [r1, #-2309]!	; 0xfffff6fb
 808:	16054105 	strne	r4, [r5], -r5, lsl #2
 80c:	2f050520 	svccs	0x00050520
 810:	3e01053d 	mcrcc	5, 0, r0, cr1, cr13, {1}
 814:	05683c05 	strbeq	r3, [r8, #-3077]!	; 0xfffff3fb
 818:	593d9105 	ldmdbpl	sp!, {r0, r2, r8, ip, pc}
 81c:	01053d3d 	tsteq	r5, sp, lsr sp
 820:	4c3a0583 	cfldr32mi	mvfx0, [sl], #-524	; 0xfffffdf4
 824:	3d910505 	cfldr32cc	mvfx0, [r1, #20]
 828:	053d3d59 	ldreq	r3, [sp, #-3417]!	; 0xfffff2a7
 82c:	20058301 	andcs	r8, r5, r1, lsl #6
 830:	3d0e054c 	cfstr32cc	mvfx0, [lr, #-304]	; 0xfffffed0
 834:	052e0505 	streq	r0, [lr, #-1285]!	; 0xfffffafb
 838:	0905212c 	stmdbeq	r5, {r2, r3, r5, r8, sp}
 83c:	12055966 	andne	r5, r5, #1671168	; 0x198000
 840:	2e09054b 	cfsh32cs	mvfx0, mvfx9, #43
 844:	02000d05 	andeq	r0, r0, #320	; 0x140
 848:	05210304 	streq	r0, [r1, #-772]!	; 0xfffffcfc
 84c:	04020028 	streq	r0, [r2], #-40	; 0xffffffd8
 850:	09054903 	stmdbeq	r5, {r0, r1, r8, fp, lr}
 854:	01040200 	mrseq	r0, R12_usr
 858:	0026053c 	eoreq	r0, r6, ip, lsr r5
 85c:	39020402 	stmdbcc	r2, {r1, sl}
 860:	02000505 	andeq	r0, r0, #20971520	; 0x1400000
 864:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 868:	18054301 	stmdane	r5, {r0, r8, r9, lr}
 86c:	3e0c055a 	cfrshl32cc	mvfx12, mvfx10, r0
 870:	052e0505 	streq	r0, [lr, #-1285]!	; 0xfffffafb
 874:	04020017 	streq	r0, [r2], #-23	; 0xffffffe9
 878:	1c052103 	stfnes	f2, [r5], {3}
 87c:	03040200 	movweq	r0, #16896	; 0x4200
 880:	00050557 	andeq	r0, r5, r7, asr r5
 884:	3c010402 	cfstrscc	mvf0, [r1], {2}
 888:	055a0105 	ldrbeq	r0, [sl, #-261]	; 0xfffffefb
 88c:	09058423 	stmdbeq	r5, {r0, r1, r5, sl, pc}
 890:	2f08055a 	svccs	0x0008055a
 894:	02001105 	andeq	r1, r0, #1073741825	; 0x40000001
 898:	053c0204 	ldreq	r0, [ip, #-516]!	; 0xfffffdfc
 89c:	04020019 	streq	r0, [r2], #-25	; 0xffffffe7
 8a0:	22053c04 	andcs	r3, r5, #4, 24	; 0x400
 8a4:	06040200 	streq	r0, [r4], -r0, lsl #4
 8a8:	3e14053c 	mrccc	5, 0, r0, cr4, cr12, {1}
 8ac:	052e1705 	streq	r1, [lr, #-1797]!	; 0xfffff8fb
 8b0:	0a052e0e 	beq	14c0f0 <startup-0x1feb3f10>
 8b4:	3e07052e 	cfsh32cc	mvfx0, mvfx7, #30
 8b8:	053d0b05 	ldreq	r0, [sp, #-2821]!	; 0xfffff4fb
 8bc:	15053d0f 	strne	r3, [r5, #-3343]	; 0xfffff2f1
 8c0:	2e18053f 	mrccs	5, 0, r0, cr8, cr15, {1}
 8c4:	05201b05 	streq	r1, [r0, #-2821]!	; 0xfffff4fb
 8c8:	0b052010 	bleq	148910 <startup-0x1feb76f0>
 8cc:	3e17052e 	cfmul64cc	mvdx0, mvdx7, mvdx14
 8d0:	75032c05 	strvc	r2, [r3, #-3077]	; 0xfffff3fb
 8d4:	030105d6 	movweq	r0, #5590	; 0x15d6
 8d8:	1f05200c 	svcne	0x0005200c
 8dc:	3e12055a 	mrccc	5, 0, r0, cr2, cr10, {2}
 8e0:	05300c05 	ldreq	r0, [r0, #-3077]!	; 0xfffff3fb
 8e4:	14054a05 	strne	r4, [r5], #-2565	; 0xfffff5fb
 8e8:	04020021 	streq	r0, [r2], #-33	; 0xffffffdf
 8ec:	00580601 	subseq	r0, r8, r1, lsl #12
 8f0:	2e020402 	cdpcs	4, 0, cr0, cr2, cr2, {0}
 8f4:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
 8f8:	00100520 	andseq	r0, r0, r0, lsr #10
 8fc:	06040402 	streq	r0, [r4], -r2, lsl #8
 900:	0009052f 	andeq	r0, r9, pc, lsr #10
 904:	4a040402 	bmi	101914 <startup-0x1fefe6ec>
 908:	c9210d05 	stmdbgt	r1!, {r0, r2, r8, sl, fp}
 90c:	05671305 	strbeq	r1, [r7, #-773]!	; 0xfffffcfb
 910:	2e054a0d 	vmlacs.f32	s8, s10, s26
 914:	03040200 	movweq	r0, #16896	; 0x4200
 918:	00110521 	andseq	r0, r1, r1, lsr #10
 91c:	4a030402 	bmi	c192c <startup-0x1ff3e6d4>
 920:	02002205 	andeq	r2, r0, #1342177280	; 0x50000000
 924:	05730304 	ldrbeq	r0, [r3, #-772]!	; 0xfffffcfc
 928:	04020027 	streq	r0, [r2], #-39	; 0xffffffd9
 92c:	0d056603 	stceq	6, cr6, [r5, #-12]
 930:	01040200 	mrseq	r0, R12_usr
 934:	001d053c 	andseq	r0, sp, ip, lsr r5
 938:	55020402 	strpl	r0, [r2, #-1026]	; 0xfffffbfe
 93c:	02000905 	andeq	r0, r0, #81920	; 0x14000
 940:	05660104 	strbeq	r0, [r6, #-260]!	; 0xfffffefc
 944:	04020019 	streq	r0, [r2], #-25	; 0xffffffe7
 948:	05055602 	streq	r5, [r5, #-1538]	; 0xfffff9fe
 94c:	01040200 	mrseq	r0, R12_usr
 950:	03010566 	movweq	r0, #5478	; 0x1566
 954:	0802580a 	stmdaeq	r2, {r1, r3, fp, ip, lr}
 958:	9b010100 	blls	40d60 <startup-0x1ffbf2a0>
 95c:	03000001 	movweq	r0, #1
 960:	00010200 	andeq	r0, r1, r0, lsl #4
 964:	fb010200 	blx	4116e <startup-0x1ffbee92>
 968:	01000d0e 	tsteq	r0, lr, lsl #26
 96c:	00010101 	andeq	r0, r1, r1, lsl #2
 970:	00010000 	andeq	r0, r1, r0
 974:	3a5a0100 	bcc	1680d7c <startup-0x1e97f284>
 978:	706f6d2f 	rsbvc	r6, pc, pc, lsr #26
 97c:	504f4d2f 	subpl	r4, pc, pc, lsr #26
 980:	6570532d 	ldrbvs	r5, [r0, #-813]!	; 0xfffffcd3
 984:	2931286c 	ldmdbcs	r1!, {r2, r3, r5, r6, fp, sp}
 988:	504f4d2f 	subpl	r4, pc, pc, lsr #26
 98c:	6570532d 	ldrbvs	r5, [r0, #-813]!	; 0xfffffcd3
 990:	6e532f6c 	cdpvs	15, 5, cr2, cr3, cr12, {3}
 994:	00656b61 	rsbeq	r6, r5, r1, ror #22
 998:	635c3a63 	cmpvs	ip, #405504	; 0x63000
 99c:	70616573 	rsbvc	r6, r1, r3, ror r5
 9a0:	6f635c70 	svcvs	0x00635c70
 9a4:	696c6564 	stmdbvs	ip!, {r2, r5, r6, r8, sl, sp, lr}^
 9a8:	745c6574 	ldrbvc	r6, [ip], #-1396	; 0xfffffa8c
 9ac:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
 9b0:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
 9b4:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
 9b8:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
 9bc:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
 9c0:	61652d65 	cmnvs	r5, r5, ror #26
 9c4:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
 9c8:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
 9cc:	735c6564 	cmpvc	ip, #100, 10	; 0x19000000
 9d0:	63007379 	movwvs	r7, #889	; 0x379
 9d4:	73635c3a 	cmnvc	r3, #14848	; 0x3a00
 9d8:	70706165 	rsbsvc	r6, r0, r5, ror #2
 9dc:	646f635c 	strbtvs	r6, [pc], #-860	; 9e4 <startup-0x1ffff61c>
 9e0:	74696c65 	strbtvc	r6, [r9], #-3173	; 0xfffff39b
 9e4:	6f745c65 	svcvs	0x00745c65
 9e8:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
 9ec:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
 9f0:	5c6d7261 	sfmpl	f7, 2, [sp], #-388	; 0xfffffe7c
 9f4:	5c62696c 			; <UNDEFINED> instruction: 0x5c62696c
 9f8:	5c636367 	stclpl	3, cr6, [r3], #-412	; 0xfffffe64
 9fc:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
 a00:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
 a04:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
 a08:	2e395c69 	cdpcs	12, 3, cr5, cr9, cr9, {3}
 a0c:	5c312e32 	ldcpl	14, cr2, [r1], #-200	; 0xffffff38
 a10:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
 a14:	00656475 	rsbeq	r6, r5, r5, ror r4
 a18:	65757100 	ldrbvs	r7, [r5, #-256]!	; 0xffffff00
 a1c:	632e6575 			; <UNDEFINED> instruction: 0x632e6575
 a20:	00000100 	andeq	r0, r0, r0, lsl #2
 a24:	6b636f6c 	blvs	18dc7dc <startup-0x1e723824>
 a28:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
 a2c:	745f0000 	ldrbvc	r0, [pc], #-0	; a34 <startup-0x1ffff5cc>
 a30:	73657079 	cmnvc	r5, #121	; 0x79
 a34:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
 a38:	74730000 	ldrbtvc	r0, [r3], #-0
 a3c:	66656464 	strbtvs	r6, [r5], -r4, ror #8
 a40:	0300682e 	movweq	r6, #2094	; 0x82e
 a44:	65720000 	ldrbvs	r0, [r2, #-0]!
 a48:	2e746e65 	cdpcs	14, 7, cr6, cr4, cr5, {3}
 a4c:	00020068 	andeq	r0, r2, r8, rrx
 a50:	6f656700 	svcvs	0x00656700
 a54:	7274656d 	rsbsvc	r6, r4, #457179136	; 0x1b400000
 a58:	626f6369 	rsbvs	r6, pc, #-1543503871	; 0xa4000001
 a5c:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 a60:	0100682e 	tsteq	r0, lr, lsr #16
 a64:	05000000 	streq	r0, [r0, #-0]
 a68:	02050012 	andeq	r0, r5, #18
 a6c:	20000e10 	andcs	r0, r0, r0, lsl lr
 a70:	05010903 	streq	r0, [r1, #-2307]	; 0xfffff6fd
 a74:	05053d0d 	streq	r3, [r5, #-3341]	; 0xfffff2f3
 a78:	0015052e 	andseq	r0, r5, lr, lsr #10
 a7c:	21030402 	tstcs	r3, r2, lsl #8
 a80:	02001e05 	andeq	r1, r0, #5, 28	; 0x50
 a84:	05570304 	ldrbeq	r0, [r7, #-772]	; 0xfffffcfc
 a88:	04020005 	streq	r0, [r2], #-5
 a8c:	01053c01 	tsteq	r5, r1, lsl #24
 a90:	7710053e 			; <UNDEFINED> instruction: 0x7710053e
 a94:	052f1305 	streq	r1, [pc, #-773]!	; 797 <startup-0x1ffff869>
 a98:	10055901 	andne	r5, r5, r1, lsl #18
 a9c:	2f150577 	svccs	0x00150577
 aa0:	05590105 	ldrbeq	r0, [r9, #-261]	; 0xfffffefb
 aa4:	15055b0f 	strne	r5, [r5, #-2831]	; 0xfffff4f1
 aa8:	6701052f 	strvs	r0, [r1, -pc, lsr #10]
 aac:	05690c05 	strbeq	r0, [r9, #-3077]!	; 0xfffff3fb
 ab0:	01052f0b 	tsteq	r5, fp, lsl #30
 ab4:	691b052f 	ldmdbvs	fp, {r0, r1, r2, r3, r5, r8, sl}
 ab8:	054c0805 	strbeq	r0, [ip, #-2053]	; 0xfffff7fb
 abc:	06054a07 	streq	r4, [r5], -r7, lsl #20
 ac0:	300f053c 	andcc	r0, pc, ip, lsr r5	; <UNPREDICTABLE>
 ac4:	052e0905 	streq	r0, [lr, #-2309]!	; 0xfffff6fb
 ac8:	10052f0f 	andne	r2, r5, pc, lsl #30
 acc:	3c18054c 	cfldr32cc	mvfx0, [r8], {76}	; 0x4c
 ad0:	052e1005 	streq	r1, [lr, #-5]!
 ad4:	10052e18 	andne	r2, r5, r8, lsl lr
 ad8:	5a01054b 	bpl	4200c <startup-0x1ffbdff4>
 adc:	05ae0e05 	streq	r0, [lr, #3589]!	; 0xe05
 ae0:	0c053d21 	stceq	13, cr3, [r5], {33}	; 0x21
 ae4:	4c0d0558 	cfstr32mi	mvfx0, [sp], {88}	; 0x58
 ae8:	052e0605 	streq	r0, [lr, #-1541]!	; 0xfffff9fb
 aec:	053f2f0d 	ldreq	r2, [pc, #-3853]!	; fffffbe7 <rear+0xdfffc363>
 af0:	0105590b 	tsteq	r5, fp, lsl #18
 af4:	000b0221 	andeq	r0, fp, r1, lsr #4
 af8:	01a30101 			; <UNDEFINED> instruction: 0x01a30101
 afc:	00030000 	andeq	r0, r3, r0
 b00:	00000047 	andeq	r0, r0, r7, asr #32
 b04:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
 b08:	0101000d 	tsteq	r1, sp
 b0c:	00000101 	andeq	r0, r0, r1, lsl #2
 b10:	00000100 	andeq	r0, r0, r0, lsl #2
 b14:	2f3a5a01 	svccs	0x003a5a01
 b18:	2f706f6d 	svccs	0x00706f6d
 b1c:	2d504f4d 	ldclcs	15, cr4, [r0, #-308]	; 0xfffffecc
 b20:	6c657053 	stclvs	0, cr7, [r5], #-332	; 0xfffffeb4
 b24:	2f293128 	svccs	0x00293128
 b28:	2d504f4d 	ldclcs	15, cr4, [r0, #-308]	; 0xfffffecc
 b2c:	6c657053 	stclvs	0, cr7, [r5], #-332	; 0xfffffeb4
 b30:	616e532f 	cmnvs	lr, pc, lsr #6
 b34:	0000656b 	andeq	r6, r0, fp, ror #10
 b38:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 b3c:	73696469 	cmnvc	r9, #1761607680	; 0x69000000
 b40:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 b44:	0100632e 	tsteq	r0, lr, lsr #6
 b48:	05000000 	streq	r0, [r0, #-0]
 b4c:	02050016 	andeq	r0, r5, #22
 b50:	20000f4c 	andcs	r0, r0, ip, asr #30
 b54:	30050515 	andcc	r0, r5, r5, lsl r5
 b58:	05313131 	ldreq	r3, [r1, #-305]!	; 0xfffffecf
 b5c:	29052f01 	stmdbcs	r5, {r0, r8, r9, sl, fp, sp}
 b60:	6715053f 			; <UNDEFINED> instruction: 0x6715053f
 b64:	05bb0105 	ldreq	r0, [fp, #261]!	; 0x105
 b68:	1505772b 	strne	r7, [r5, #-1835]	; 0xfffff8d5
 b6c:	4a230567 	bmi	8c2110 <startup-0x1f73def0>
 b70:	05821505 	streq	r1, [r2, #1285]	; 0x505
 b74:	2c055a01 			; <UNDEFINED> instruction: 0x2c055a01
 b78:	67050576 	smlsdxvs	r5, r6, r5, r0
 b7c:	01053d3d 	tsteq	r5, sp, lsr sp
 b80:	4c2a0559 	cfstr32mi	mvfx0, [sl], #-356	; 0xfffffe9c
 b84:	3d670505 	cfstr64cc	mvdx0, [r7, #-20]!	; 0xffffffec
 b88:	5901053d 	stmdbpl	r1, {r0, r2, r3, r4, r5, r8, sl}
 b8c:	054c3005 	strbeq	r3, [ip, #-5]
 b90:	053d6705 	ldreq	r6, [sp, #-1797]!	; 0xfffff8fb
 b94:	05052016 	streq	r2, [r5, #-22]	; 0xffffffea
 b98:	01052f3d 	tsteq	r5, sp, lsr pc
 b9c:	682a053d 	stmdavs	sl!, {r0, r2, r3, r4, r5, r8, sl}
 ba0:	3d3d0505 	cfldr32cc	mvfx0, [sp, #-20]!	; 0xffffffec
 ba4:	2f13052f 	svccs	0x0013052f
 ba8:	05200a05 	streq	r0, [r0, #-2565]!	; 0xfffff5fb
 bac:	0c053d05 	stceq	13, cr3, [r5], {5}
 bb0:	2f01053d 	svccs	0x0001053d
 bb4:	05762605 	ldrbeq	r2, [r6, #-1541]!	; 0xfffff9fb
 bb8:	1a053d05 	bne	14ffd4 <startup-0x1feb002c>
 bbc:	2f050520 	svccs	0x00050520
 bc0:	3d14053d 	cfldr32cc	mvfx0, [r4, #-244]	; 0xffffff0c
 bc4:	05590505 	ldrbeq	r0, [r9, #-1285]	; 0xfffffafb
 bc8:	0c05201a 	stceq	0, cr2, [r5], {26}
 bcc:	2f01052f 	svccs	0x0001052f
 bd0:	05842405 	streq	r2, [r4, #1029]	; 0x405
 bd4:	1a053d05 	bne	14fff0 <startup-0x1feb0010>
 bd8:	2f050520 	svccs	0x00050520
 bdc:	3d14053d 	cfldr32cc	mvfx0, [r4, #-244]	; 0xffffff0c
 be0:	05590505 	ldrbeq	r0, [r9, #-1285]	; 0xfffffafb
 be4:	0c05201a 	stceq	0, cr2, [r5], {26}
 be8:	2f01052f 	svccs	0x0001052f
 bec:	05841505 	streq	r1, [r4, #1285]	; 0x505
 bf0:	0c052f0a 	stceq	15, cr2, [r5], {10}
 bf4:	01040200 	mrseq	r0, R12_usr
 bf8:	00200520 	eoreq	r0, r0, r0, lsr #10
 bfc:	3c010402 	cfstrscc	mvf0, [r1], {2}
 c00:	02000a05 	andeq	r0, r0, #20480	; 0x5000
 c04:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 c08:	3d3d2f05 	ldccc	15, cr2, [sp, #-20]!	; 0xffffffec
 c0c:	053d0105 	ldreq	r0, [sp, #-261]!	; 0xfffffefb
 c10:	0a053e13 	beq	150464 <startup-0x1feafb9c>
 c14:	000c052f 	andeq	r0, ip, pc, lsr #10
 c18:	20010402 	andcs	r0, r1, r2, lsl #8
 c1c:	02002005 	andeq	r2, r0, #5
 c20:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 c24:	0402000a 	streq	r0, [r2], #-10
 c28:	05053c01 	streq	r3, [r5, #-3073]	; 0xfffff3ff
 c2c:	053d3d2f 	ldreq	r3, [sp, #-3375]!	; 0xfffff2d1
 c30:	17053d01 	strne	r3, [r5, -r1, lsl #26]
 c34:	2f0a053e 	svccs	0x000a053e
 c38:	02000c05 	andeq	r0, r0, #1280	; 0x500
 c3c:	05200104 	streq	r0, [r0, #-260]!	; 0xfffffefc
 c40:	04020020 	streq	r0, [r2], #-32	; 0xffffffe0
 c44:	0a053c01 	beq	14fc50 <startup-0x1feb03b0>
 c48:	01040200 	mrseq	r0, R12_usr
 c4c:	2f05053c 	svccs	0x0005053c
 c50:	01053d3d 	tsteq	r5, sp, lsr sp
 c54:	3e16053d 	mrccc	5, 0, r0, cr6, cr13, {1}
 c58:	052f0a05 	streq	r0, [pc, #-2565]!	; 25b <startup-0x1ffffda5>
 c5c:	0402000c 	streq	r0, [r2], #-12
 c60:	20052001 	andcs	r2, r5, r1
 c64:	01040200 	mrseq	r0, R12_usr
 c68:	000a053c 	andeq	r0, sl, ip, lsr r5
 c6c:	3c010402 	cfstrscc	mvf0, [r1], {2}
 c70:	3d2f0505 	cfstr32cc	mvfx0, [pc, #-20]!	; c64 <startup-0x1ffff39c>
 c74:	3d01053d 	cfstr32cc	mvfx0, [r1, #-244]	; 0xffffff0c
 c78:	053e2705 	ldreq	r2, [lr, #-1797]!	; 0xfffff8fb
 c7c:	593d6805 	ldmdbpl	sp!, {r0, r2, fp, sp, lr}
 c80:	053d0105 	ldreq	r0, [sp, #-261]!	; 0xfffffefb
 c84:	07054c20 	streq	r4, [r5, -r0, lsr #24]
 c88:	3d18055a 	cfldr32cc	mvfx0, [r8, #-360]	; 0xfffffe98
 c8c:	052e1105 	streq	r1, [lr, #-261]!	; 0xfffffefb
 c90:	11055913 	tstne	r5, r3, lsl r9
 c94:	4c05052e 	cfstr32mi	mvfx0, [r5], {46}	; 0x2e
 c98:	3d01059f 	cfstr32cc	mvfx0, [r1, #-636]	; 0xfffffd84
 c9c:	01000402 	tsteq	r0, r2, lsl #8
 ca0:	0000bf01 	andeq	fp, r0, r1, lsl #30
 ca4:	40000300 	andmi	r0, r0, r0, lsl #6
 ca8:	02000000 	andeq	r0, r0, #0
 cac:	0d0efb01 	vstreq	d15, [lr, #-4]
 cb0:	01010100 	mrseq	r0, (UNDEF: 17)
 cb4:	00000001 	andeq	r0, r0, r1
 cb8:	01000001 	tsteq	r0, r1
 cbc:	6d2f3a5a 	vstmdbvs	pc!, {s6-s95}
 cc0:	4d2f706f 	stcmi	0, cr7, [pc, #-444]!	; b0c <startup-0x1ffff4f4>
 cc4:	532d504f 			; <UNDEFINED> instruction: 0x532d504f
 cc8:	286c6570 	stmdacs	ip!, {r4, r5, r6, r8, sl, sp, lr}^
 ccc:	4d2f2931 			; <UNDEFINED> instruction: 0x4d2f2931
 cd0:	532d504f 			; <UNDEFINED> instruction: 0x532d504f
 cd4:	2f6c6570 	svccs	0x006c6570
 cd8:	6b616e53 	blvs	185c62c <startup-0x1e7a39d4>
 cdc:	64000065 	strvs	r0, [r0], #-101	; 0xffffff9b
 ce0:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 ce4:	0100632e 	tsteq	r0, lr, lsr #6
 ce8:	05000000 	streq	r0, [r0, #-0]
 cec:	02050019 	andeq	r0, r5, #25
 cf0:	20001234 	andcs	r1, r0, r4, lsr r2
 cf4:	33050516 	movwcc	r0, #21782	; 0x5516
 cf8:	05200f05 	streq	r0, [r0, #-3845]!	; 0xfffff0fb
 cfc:	0f052f05 	svceq	0x00052f05
 d00:	2f050520 	svccs	0x00050520
 d04:	05200e05 	streq	r0, [r0, #-3589]!	; 0xfffff1fb
 d08:	0f052f05 	svceq	0x00052f05
 d0c:	2f0a0520 	svccs	0x000a0520
 d10:	02000d05 	andeq	r0, r0, #320	; 0x140
 d14:	05200104 	streq	r0, [r0, #-260]!	; 0xfffffefc
 d18:	04020017 	streq	r0, [r2], #-23	; 0xffffffe9
 d1c:	0a052e01 	beq	14c528 <startup-0x1feb3ad8>
 d20:	01040200 	mrseq	r0, R12_usr
 d24:	2105053c 	tstcs	r5, ip, lsr r5
 d28:	05200f05 	streq	r0, [r0, #-3845]!	; 0xfffff0fb
 d2c:	17052f01 	strne	r2, [r5, -r1, lsl #30]
 d30:	320505a0 	andcc	r0, r5, #160, 10	; 0x28000000
 d34:	2f01052f 	svccs	0x0001052f
 d38:	053e2205 	ldreq	r2, [lr, #-517]!	; 0xfffffdfb
 d3c:	09054e0a 	stmdbeq	r5, {r1, r3, r9, sl, fp, lr}
 d40:	2f2f2f21 	svccs	0x002f2f21
 d44:	052a0d05 	streq	r0, [sl, #-3333]!	; 0xfffff2fb
 d48:	01053c0a 	tsteq	r5, sl, lsl #24
 d4c:	5a220534 	bpl	882224 <startup-0x1f77dddc>
 d50:	05500a05 	ldrbeq	r0, [r0, #-2565]	; 0xfffff5fb
 d54:	0d052109 	stfeqs	f2, [r5, #-36]	; 0xffffffdc
 d58:	3c0a0557 	cfstr32cc	mvfx0, [sl], {87}	; 0x57
 d5c:	02310105 	eorseq	r0, r1, #1073741825	; 0x40000001
 d60:	01010005 	tsteq	r1, r5
 d64:	000000d2 	ldrdeq	r0, [r0], -r2
 d68:	003f0003 	eorseq	r0, pc, r3
 d6c:	01020000 	mrseq	r0, (UNDEF: 2)
 d70:	000d0efb 	strdeq	r0, [sp], -fp
 d74:	01010101 	tsteq	r1, r1, lsl #2
 d78:	01000000 	mrseq	r0, (UNDEF: 0)
 d7c:	5a010000 	bpl	40d84 <startup-0x1ffbf27c>
 d80:	6f6d2f3a 	svcvs	0x006d2f3a
 d84:	4f4d2f70 	svcmi	0x004d2f70
 d88:	70532d50 	subsvc	r2, r3, r0, asr sp
 d8c:	31286c65 			; <UNDEFINED> instruction: 0x31286c65
 d90:	4f4d2f29 	svcmi	0x004d2f29
 d94:	70532d50 	subsvc	r2, r3, r0, asr sp
 d98:	532f6c65 			; <UNDEFINED> instruction: 0x532f6c65
 d9c:	656b616e 	strbvs	r6, [fp, #-366]!	; 0xfffffe92
 da0:	656b0000 	strbvs	r0, [fp, #-0]!
 da4:	632e6279 			; <UNDEFINED> instruction: 0x632e6279
 da8:	00000100 	andeq	r0, r0, r0, lsl #2
 dac:	00190500 	andseq	r0, r9, r0, lsl #10
 db0:	12e00205 	rscne	r0, r0, #1342177280	; 0x50000000
 db4:	05152000 	ldreq	r2, [r5, #-0]
 db8:	1a054b1f 	bne	153a3c <startup-0x1feac5c4>
 dbc:	2e05052e 	cfsh32cs	mvfx0, mvfx5, #30
 dc0:	05201605 	streq	r1, [r0, #-1541]!	; 0xfffff9fb
 dc4:	13052f01 	movwne	r2, #24321	; 0x5f01
 dc8:	3e120576 	mrccc	5, 0, r0, cr2, cr6, {3}
 dcc:	05200a05 	streq	r0, [r0, #-2565]!	; 0xfffff5fb
 dd0:	05053d0b 	streq	r3, [r5, #-3339]	; 0xfffff2f5
 dd4:	210d052e 	tstcs	sp, lr, lsr #10
 dd8:	05740c05 	ldrbeq	r0, [r4, #-3077]!	; 0xfffff3fb
 ddc:	17052114 	smladne	r5, r4, r1, r2
 de0:	02040200 	andeq	r0, r4, #0, 4
 de4:	0005052c 	andeq	r0, r5, ip, lsr #10
 de8:	3c010402 	cfstrscc	mvf0, [r1], {2}
 dec:	05410c05 	strbeq	r0, [r1, #-3077]	; 0xfffff3fb
 df0:	19052f01 	stmdbne	r5, {r0, r8, r9, sl, fp, sp}
 df4:	3d130569 	cfldr32cc	mvfx0, [r3, #-420]	; 0xfffffe5c
 df8:	6a0e0575 	bvs	3823d4 <startup-0x1fc7dc2c>
 dfc:	052e0505 	streq	r0, [lr, #-1285]!	; 0xfffffafb
 e00:	13052109 	movwne	r2, #20745	; 0x5109
 e04:	4b0c054b 	blmi	302338 <startup-0x1fcfdcc8>
 e08:	053d2605 	ldreq	r2, [sp, #-1541]!	; 0xfffff9fb
 e0c:	1a052e22 	bne	14c69c <startup-0x1feb3964>
 e10:	001f052e 	andseq	r0, pc, lr, lsr #10
 e14:	38020402 	stmdacc	r2, {r1, sl}
 e18:	02000505 	andeq	r0, r0, #20971520	; 0x1400000
 e1c:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 e20:	0105430c 	tsteq	r5, ip, lsl #6
 e24:	01040200 	mrseq	r0, R12_usr
 e28:	841e0521 	ldrhi	r0, [lr], #-1313	; 0xfffffadf
 e2c:	05680505 	strbeq	r0, [r8, #-1285]!	; 0xfffffafb
 e30:	01052015 	tsteq	r5, r5, lsl r0
 e34:	0006023e 	andeq	r0, r6, lr, lsr r2
 e38:	Address 0x00000e38 is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	6f73645f 	svcvs	0x0073645f
   4:	6e61685f 	mcrvs	8, 3, r6, cr1, cr15, {2}
   8:	00656c64 	rsbeq	r6, r5, r4, ror #24
   c:	7a69735f 	bvc	1a5cd90 <startup-0x1e5a3270>
  10:	47740065 	ldrbmi	r0, [r4, -r5, rrx]!
  14:	656d6f65 	strbvs	r6, [sp, #-3941]!	; 0xfffff09b
  18:	00797274 	rsbseq	r7, r9, r4, ror r2
  1c:	6e61725f 	mcrvs	2, 3, r7, cr1, cr15, {2}
  20:	00383464 	eorseq	r3, r8, r4, ror #8
  24:	656d655f 	strbvs	r6, [sp, #-1375]!	; 0xfffffaa1
  28:	6e656772 	mcrvs	7, 3, r6, cr5, cr2, {3}
  2c:	64007963 	strvs	r7, [r0], #-2403	; 0xfffff69d
  30:	00787269 	rsbseq	r7, r8, r9, ror #4
  34:	79726964 	ldmdbvc	r2!, {r2, r5, r6, r8, fp, sp, lr}^
  38:	656c6300 	strbvs	r6, [ip, #-768]!	; 0xfffffd00
  3c:	6f5f7261 	svcvs	0x005f7261
  40:	63656a62 	cmnvs	r5, #401408	; 0x62000
  44:	75740074 	ldrbvc	r0, [r4, #-116]!	; 0xffffff8c
  48:	5f006e72 	svcpl	0x00006e72
  4c:	74726377 	ldrbtvc	r6, [r2], #-887	; 0xfffffc89
  50:	5f626d6f 	svcpl	0x00626d6f
  54:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
  58:	775f0065 	ldrbvc	r0, [pc, -r5, rrx]
  5c:	74727363 	ldrbtvc	r7, [r2], #-867	; 0xfffffc9d
  60:	73626d6f 	cmnvc	r2, #7104	; 0x1bc0
  64:	6174735f 	cmnvs	r4, pc, asr r3
  68:	6c006574 	cfstr32vs	mvfx6, [r0], {116}	; 0x74
  6c:	20676e6f 	rsbcs	r6, r7, pc, ror #28
  70:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
  74:	736e7520 	cmnvc	lr, #32, 10	; 0x8000000
  78:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
  7c:	6e692064 	cdpvs	0, 6, cr2, cr9, cr4, {3}
  80:	65730074 	ldrbvs	r0, [r3, #-116]!	; 0xffffff8c
  84:	70735f74 	rsbsvc	r5, r3, r4, ror pc
  88:	00646565 	rsbeq	r6, r4, r5, ror #10
  8c:	66626c5f 			; <UNDEFINED> instruction: 0x66626c5f
  90:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0xfffff68d
  94:	6e617200 	cdpvs	2, 6, cr7, cr1, cr0, {0}
  98:	00795f64 	rsbseq	r5, r9, r4, ror #30
  9c:	6f6c5f5f 	svcvs	0x006c5f5f
  a0:	656c6163 	strbvs	r6, [ip, #-355]!	; 0xfffffe9d
  a4:	7700745f 	smlsdvc	r0, pc, r4, r7	; <UNPREDICTABLE>
  a8:	68746469 	ldmdavs	r4!, {r0, r3, r5, r6, sl, sp, lr}^
  ac:	5f6e695f 	svcpl	0x006e695f
  b0:	65747962 	ldrbvs	r7, [r4, #-2402]!	; 0xfffff69e
  b4:	6f660073 	svcvs	0x00660073
  b8:	675f646f 	ldrbvs	r6, [pc, -pc, ror #8]
  bc:	656d6f65 	strbvs	r6, [sp, #-3941]!	; 0xfffff09b
  c0:	00797274 	rsbseq	r7, r9, r4, ror r2
  c4:	7478656e 	ldrbtvc	r6, [r8], #-1390	; 0xfffffa92
  c8:	5f00785f 	svcpl	0x0000785f
  cc:	7472626d 	ldrbtvc	r6, [r2], #-621	; 0xfffffd93
  d0:	5f63776f 	svcpl	0x0063776f
  d4:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
  d8:	5f5f0065 	svcpl	0x005f0065
  dc:	735f6d74 	cmpvc	pc, #116, 26	; 0x1d00
  e0:	6e006365 	cdpvs	3, 0, cr6, cr0, cr5, {3}
  e4:	705f7765 	subsvc	r7, pc, r5, ror #14
  e8:	665f736f 	ldrbvs	r7, [pc], -pc, ror #6
  ec:	00646f6f 	rsbeq	r6, r4, pc, ror #30
  f0:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
  f4:	6e6f6c20 	cdpvs	12, 6, cr6, cr15, cr0, {1}
  f8:	6e692067 	cdpvs	0, 6, cr2, cr9, cr7, {3}
  fc:	756e0074 	strbvc	r0, [lr, #-116]!	; 0xffffff8c
 100:	696f706d 	stmdbvs	pc!, {r0, r2, r3, r5, r6, ip, sp, lr}^	; <UNPREDICTABLE>
 104:	0073746e 	rsbseq	r7, r3, lr, ror #8
 108:	7562755f 	strbvc	r7, [r2, #-1375]!	; 0xfffffaa1
 10c:	625f0066 	subsvs	r0, pc, #102	; 0x66
 110:	00657361 	rsbeq	r7, r5, r1, ror #6
 114:	6d745f5f 	ldclvs	15, cr5, [r4, #-380]!	; 0xfffffe84
 118:	756f685f 	strbvc	r6, [pc, #-2143]!	; fffff8c1 <rear+0xdfffc03d>
 11c:	6e730072 	mrcvs	0, 3, r0, cr3, cr2, {3}
 120:	62656b61 	rsbvs	r6, r5, #99328	; 0x18400
 124:	5f79646f 	svcpl	0x0079646f
 128:	6d6f6567 	cfstr64vs	mvdx6, [pc, #-412]!	; ffffff94 <rear+0xdfffc710>
 12c:	79727465 	ldmdbvc	r2!, {r0, r2, r5, r6, sl, ip, sp, lr}^
 130:	735f5f00 	cmpvc	pc, #0, 30
 134:	6f5f0066 	svcvs	0x005f0066
 138:	78655f6e 	stmdavc	r5!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
 13c:	615f7469 	cmpvs	pc, r9, ror #8
 140:	00736772 	rsbseq	r6, r3, r2, ror r7
 144:	6f6f635f 	svcvs	0x006f635f
 148:	0065696b 	rsbeq	r6, r5, fp, ror #18
 14c:	67735f5f 			; <UNDEFINED> instruction: 0x67735f5f
 150:	0065756c 	rsbeq	r7, r5, ip, ror #10
 154:	7478656e 	ldrbtvc	r6, [r8], #-1390	; 0xfffffa92
 158:	5f00795f 	svcpl	0x0000795f
 15c:	67616c66 	strbvs	r6, [r1, -r6, ror #24]!
 160:	695f0073 	ldmdbvs	pc, {r0, r1, r4, r5, r6}^	; <UNPREDICTABLE>
 164:	78635f73 	stmdavc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 168:	735f0061 	cmpvc	pc, #97	; 0x61
 16c:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
 170:	616e7300 	cmnvs	lr, r0, lsl #6
 174:	6568656b 	strbvs	r6, [r8, #-1387]!	; 0xfffffa95
 178:	675f6461 	ldrbvs	r6, [pc, -r1, ror #8]
 17c:	656d6f65 	strbvs	r6, [sp, #-3941]!	; 0xfffff09b
 180:	5f797274 	svcpl	0x00797274
 184:	5f005055 	svcpl	0x00005055
 188:	736b6c62 	cmnvc	fp, #25088	; 0x6200
 18c:	00657a69 	rsbeq	r7, r5, r9, ror #20
 190:	646e6172 	strbtvs	r6, [lr], #-370	; 0xfffffe8e
 194:	00746e69 	rsbseq	r6, r4, r9, ror #28
 198:	65766f6d 	ldrbvs	r6, [r6, #-3949]!	; 0xfffff093
 19c:	6a626f5f 	bvs	189bf20 <startup-0x1e7640e0>
 1a0:	00746365 	rsbseq	r6, r4, r5, ror #6
 1a4:	7476635f 	ldrbtvc	r6, [r6], #-863	; 0xfffffca1
 1a8:	00667562 	rsbeq	r7, r6, r2, ror #10
 1ac:	66666f5f 	uqsaxvs	r6, r6, pc	; <UNPREDICTABLE>
 1b0:	00746573 	rsbseq	r6, r4, r3, ror r5
 1b4:	73626d5f 	cmnvc	r2, #6080	; 0x17c0
 1b8:	776f7472 			; <UNDEFINED> instruction: 0x776f7472
 1bc:	735f7363 	cmpvc	pc, #-1946157055	; 0x8c000001
 1c0:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
 1c4:	494f5000 	stmdbmi	pc, {ip, lr}^	; <UNPREDICTABLE>
 1c8:	5f00544e 	svcpl	0x0000544e
 1cc:	6c72626d 	lfmvs	f6, 2, [r2], #-436	; 0xfffffe4c
 1d0:	735f6e65 	cmpvc	pc, #1616	; 0x650
 1d4:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
 1d8:	6e665f00 	cdpvs	15, 6, cr5, cr6, cr0, {0}
 1dc:	73677261 	cmnvc	r7, #268435462	; 0x10000006
 1e0:	63616200 	cmnvs	r1, #0, 4
 1e4:	6675426b 	ldrbtvs	r4, [r5], -fp, ror #4
 1e8:	00726566 	rsbseq	r6, r2, r6, ror #10
 1ec:	65747962 	ldrbvs	r7, [r4, #-2402]!	; 0xfffff69e
 1f0:	6e665f00 	cdpvs	15, 6, cr5, cr6, cr0, {0}
 1f4:	3a5a0073 	bcc	16803c8 <startup-0x1e97fc38>
 1f8:	706f6d2f 	rsbvc	r6, pc, pc, lsr #26
 1fc:	504f4d2f 	subpl	r4, pc, pc, lsr #26
 200:	6570532d 	ldrbvs	r5, [r0, #-813]!	; 0xfffffcd3
 204:	2931286c 	ldmdbcs	r1!, {r2, r3, r5, r6, fp, sp}
 208:	504f4d2f 	subpl	r4, pc, pc, lsr #26
 20c:	6570532d 	ldrbvs	r5, [r0, #-813]!	; 0xfffffcd3
 210:	6e532f6c 	cdpvs	15, 5, cr2, cr3, cr12, {3}
 214:	2f656b61 	svccs	0x00656b61
 218:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 21c:	2e707574 	mrccs	5, 3, r7, cr0, cr4, {3}
 220:	735f0063 	cmpvc	pc, #99	; 0x63
 224:	006e6769 	rsbeq	r6, lr, r9, ror #14
 228:	6f6c665f 	svcvs	0x006c665f
 22c:	745f6b63 	ldrbvc	r6, [pc], #-2915	; 234 <startup-0x1ffffdcc>
 230:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
 234:	72726564 	rsbsvc	r6, r2, #100, 10	; 0x19000000
 238:	69425f00 	stmdbvs	r2, {r8, r9, sl, fp, ip, lr}^
 23c:	746e6967 	strbtvc	r6, [lr], #-2407	; 0xfffff699
 240:	61675f00 	cmnvs	r7, r0, lsl #30
 244:	5f616d6d 	svcpl	0x00616d6d
 248:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
 24c:	006d6167 	rsbeq	r6, sp, r7, ror #2
 250:	7365725f 	cmnvc	r5, #-268435451	; 0xf0000005
 254:	5f746c75 	svcpl	0x00746c75
 258:	5f5f006b 	svcpl	0x005f006b
 25c:	64006d74 	strvs	r6, [r0], #-3444	; 0xfffff28c
 260:	5f776172 	svcpl	0x00776172
 264:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
 268:	66007463 	strvs	r7, [r0], -r3, ror #8
 26c:	5f646f6f 	svcpl	0x00646f6f
 270:	006a626f 	rsbeq	r6, sl, pc, ror #4
 274:	63775f5f 	cmnvs	r7, #380	; 0x17c
 278:	5f006268 	svcpl	0x00006268
 27c:	6f647473 	svcvs	0x00647473
 280:	68007475 	stmdavs	r0, {r0, r2, r4, r5, r6, sl, ip, sp, lr}
 284:	68676965 	stmdavs	r7!, {r0, r2, r5, r6, r8, fp, sp, lr}^
 288:	635f0074 	cmpvs	pc, #116	; 0x74
 28c:	656c7476 	strbvs	r7, [ip, #-1142]!	; 0xfffffb8a
 290:	665f006e 	ldrbvs	r0, [pc], -lr, rrx
 294:	00656c69 	rsbeq	r6, r5, r9, ror #24
 298:	77617264 	strbvc	r7, [r1, -r4, ror #4]!
 29c:	6f6f665f 	svcvs	0x006f665f
 2a0:	656b0064 	strbvs	r0, [fp, #-100]!	; 0xffffff9c
 2a4:	74735f79 	ldrbtvc	r5, [r3], #-3961	; 0xfffff087
 2a8:	656b6f72 	strbvs	r6, [fp, #-3954]!	; 0xfffff08e
 2ac:	696e5f00 	stmdbvs	lr!, {r8, r9, sl, fp, ip, lr}^
 2b0:	0073626f 	rsbseq	r6, r3, pc, ror #4
 2b4:	74646977 	strbtvc	r6, [r4], #-2423	; 0xfffff689
 2b8:	61720068 	cmnvs	r2, r8, rrx
 2bc:	785f646e 	ldmdavc	pc, {r1, r2, r3, r5, r6, sl, sp, lr}^	; <UNPREDICTABLE>
 2c0:	6f687300 	svcvs	0x00687300
 2c4:	75207472 	strvc	r7, [r0, #-1138]!	; 0xfffffb8e
 2c8:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
 2cc:	2064656e 	rsbcs	r6, r4, lr, ror #10
 2d0:	00746e69 	rsbseq	r6, r4, r9, ror #28
 2d4:	6b616e73 	blvs	185bca8 <startup-0x1e7a4358>
 2d8:	7a695365 	bvc	1a55074 <startup-0x1e5aaf8c>
 2dc:	72640065 	rsbvc	r0, r4, #101	; 0x65
 2e0:	735f7761 	cmpvc	pc, #25427968	; 0x1840000
 2e4:	656b616e 	strbvs	r6, [fp, #-366]!	; 0xfffffe92
 2e8:	74615f00 	strbtvc	r5, [r1], #-3840	; 0xfffff100
 2ec:	74697865 	strbtvc	r7, [r9], #-2149	; 0xfffff79b
 2f0:	735f0030 	cmpvc	pc, #48	; 0x30
 2f4:	616e6769 	cmnvs	lr, r9, ror #14
 2f8:	75625f6c 	strbvc	r5, [r2, #-3948]!	; 0xfffff094
 2fc:	615f0066 	cmpvs	pc, r6, rrx
 300:	69746373 	ldmdbvs	r4!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 304:	625f656d 	subsvs	r6, pc, #457179136	; 0x1b400000
 308:	73006675 	movwvc	r6, #1653	; 0x675
 30c:	64656570 	strbtvs	r6, [r5], #-1392	; 0xfffffa90
 310:	70730078 	rsbsvc	r0, r3, r8, ror r0
 314:	79646565 	stmdbvc	r4!, {r0, r2, r5, r6, r8, sl, sp, lr}^
 318:	65725f00 	ldrbvs	r5, [r2, #-3840]!	; 0xfffff100
 31c:	746c7573 	strbtvc	r7, [ip], #-1395	; 0xfffffa8d
 320:	775f5f00 	ldrbvc	r5, [pc, -r0, lsl #30]
 324:	5f006863 	svcpl	0x00006863
 328:	4b434f4c 	blmi	10d4060 <startup-0x1ef2bfa0>
 32c:	7700545f 	smlsdvc	r0, pc, r4, r5	; <UNPREDICTABLE>
 330:	5f746e69 	svcpl	0x00746e69
 334:	665f0074 			; <UNDEFINED> instruction: 0x665f0074
 338:	7367616c 	cmnvc	r7, #108, 2
 33c:	5f5f0032 	svcpl	0x005f0032
 340:	795f6d74 	ldmdbvc	pc, {r2, r4, r5, r6, r8, sl, fp, sp, lr}^	; <UNPREDICTABLE>
 344:	00726165 	rsbseq	r6, r2, r5, ror #2
 348:	74736572 	ldrbtvc	r6, [r3], #-1394	; 0xfffffa8e
 34c:	5f747261 	svcpl	0x00747261
 350:	656d6167 	strbvs	r6, [sp, #-359]!	; 0xfffffe99
 354:	6d6e5f00 	stclvs	15, cr5, [lr, #-0]
 358:	6f6c6c61 	svcvs	0x006c6c61
 35c:	6f6c0063 	svcvs	0x006c0063
 360:	735f6461 	cmpvc	pc, #1627389952	; 0x61000000
 364:	74697270 	strbtvc	r7, [r9], #-624	; 0xfffffd90
 368:	6e690065 	cdpvs	0, 6, cr0, cr9, cr5, {3}
 36c:	735f7469 	cmpvc	pc, #1761607680	; 0x69000000
 370:	656b616e 	strbvs	r6, [fp, #-366]!	; 0xfffffe92
 374:	424f5000 	submi	r5, pc, #0
 378:	5443454a 	strbpl	r4, [r3], #-1354	; 0xfffffab6
 37c:	656e5f00 	strbvs	r5, [lr, #-3840]!	; 0xfffff100
 380:	00667478 	rsbeq	r7, r6, r8, ror r4
 384:	6d745f5f 	ldclvs	15, cr5, [r4, #-380]!	; 0xfffffe84
 388:	6e6f6d5f 	mcrvs	13, 3, r6, cr15, cr15, {2}
 38c:	74615f00 	strbtvc	r5, [r1], #-3840	; 0xfffff100
 390:	74697865 	strbtvc	r7, [r9], #-2149	; 0xfffff79b
 394:	45475000 	strbmi	r5, [r7, #-0]
 398:	54454d4f 	strbpl	r4, [r5], #-3407	; 0xfffff2b1
 39c:	5f005952 	svcpl	0x00005952
 3a0:	6964735f 	stmdbvs	r4!, {r0, r1, r2, r3, r4, r6, r8, r9, ip, sp, lr}^
 3a4:	696e6964 	stmdbvs	lr!, {r2, r5, r6, r8, fp, sp, lr}^
 3a8:	6f5f0074 	svcvs	0x005f0074
 3ac:	745f6666 	ldrbvc	r6, [pc], #-1638	; 3b4 <startup-0x1ffffc4c>
 3b0:	696e6900 	stmdbvs	lr!, {r8, fp, sp, lr}^
 3b4:	6f665f74 	svcvs	0x00665f74
 3b8:	5f00646f 	svcpl	0x0000646f
 3bc:	65657266 	strbvs	r7, [r5, #-614]!	; 0xfffffd9a
 3c0:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
 3c4:	63775f00 	cmnvs	r7, #0, 30
 3c8:	626d6f74 	rsbvs	r6, sp, #116, 30	; 0x1d0
 3cc:	6174735f 	cmnvs	r4, pc, asr r3
 3d0:	5a006574 	bpl	199a8 <startup-0x1ffe6658>
 3d4:	6f6d5c3a 	svcvs	0x006d5c3a
 3d8:	4f4d5c70 	svcmi	0x004d5c70
 3dc:	70532d50 	subsvc	r2, r3, r0, asr sp
 3e0:	31286c65 			; <UNDEFINED> instruction: 0x31286c65
 3e4:	4f4d5c29 	svcmi	0x004d5c29
 3e8:	70532d50 	subsvc	r2, r3, r0, asr sp
 3ec:	535c6c65 	cmppl	ip, #25856	; 0x6500
 3f0:	656b616e 	strbvs	r6, [fp, #-366]!	; 0xfffffe92
 3f4:	736e7500 	cmnvc	lr, #0, 10
 3f8:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
 3fc:	68632064 	stmdavs	r3!, {r2, r5, r6, sp}^
 400:	5f007261 	svcpl	0x00007261
 404:	0077656e 	rsbseq	r6, r7, lr, ror #10
 408:	6b616e73 	blvs	185bddc <startup-0x1e7a4224>
 40c:	61656865 	cmnvs	r5, r5, ror #16
 410:	65675f64 	strbvs	r5, [r7, #-3940]!	; 0xfffff09c
 414:	74656d6f 	strbtvc	r6, [r5], #-3439	; 0xfffff291
 418:	445f7972 	ldrbmi	r7, [pc], #-2418	; 420 <startup-0x1ffffbe0>
 41c:	004e574f 	subeq	r5, lr, pc, asr #14
 420:	5f746573 	svcpl	0x00746573
 424:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
 428:	735f7463 	cmpvc	pc, #1660944384	; 0x63000000
 42c:	64656570 	strbtvs	r6, [r5], #-1392	; 0xfffffa90
 430:	5f685f00 	svcpl	0x00685f00
 434:	6e727265 	cdpvs	2, 7, cr7, cr2, cr5, {3}
 438:	6873006f 	ldmdavs	r3!, {r0, r1, r2, r3, r5, r6}^
 43c:	2074726f 	rsbscs	r7, r4, pc, ror #4
 440:	00746e69 	rsbseq	r6, r4, r9, ror #28
 444:	6d745f5f 	ldclvs	15, cr5, [r4, #-380]!	; 0xfffffe84
 448:	6164795f 	cmnvs	r4, pc, asr r9
 44c:	5f5f0079 	svcpl	0x005f0079
 450:	66756273 			; <UNDEFINED> instruction: 0x66756273
 454:	6f695f00 	svcvs	0x00695f00
 458:	5f007362 	svcpl	0x00007362
 45c:	4c49465f 	mcrrmi	6, 5, r4, r9, cr15
 460:	6d5f0045 	ldclvs	0, cr0, [pc, #-276]	; 354 <startup-0x1ffffcac>
 464:	61747362 	cmnvs	r4, r2, ror #6
 468:	745f6574 	ldrbvc	r6, [pc], #-1396	; 470 <startup-0x1ffffb90>
 46c:	735f5f00 	cmpvc	pc, #0, 30
 470:	454c4946 	strbmi	r4, [ip, #-2374]	; 0xfffff6ba
 474:	626d5f00 	rsbvs	r5, sp, #0, 30
 478:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
 47c:	725f0065 	subsvc	r0, pc, #101	; 0x65
 480:	5f646e61 	svcpl	0x00646e61
 484:	7478656e 	ldrbtvc	r6, [r8], #-1390	; 0xfffffa92
 488:	626d5f00 	rsbvs	r5, sp, #0, 30
 48c:	5f6e656c 	svcpl	0x006e656c
 490:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
 494:	695f0065 	ldmdbvs	pc, {r0, r2, r5, r6}^	; <UNPREDICTABLE>
 498:	5f00636e 	svcpl	0x0000636e
 49c:	00646e69 	rsbeq	r6, r4, r9, ror #28
 4a0:	6c6c6f66 	stclvs	15, cr6, [ip], #-408	; 0xfffffe68
 4a4:	6c5f776f 	mrrcvs	7, 6, r7, pc, cr15	; <UNPREDICTABLE>
 4a8:	65646165 	strbvs	r6, [r4, #-357]!	; 0xfffffe9b
 4ac:	6c5f0072 	mrrcvs	0, 7, r0, pc, cr2	; <UNPREDICTABLE>
 4b0:	6c61636f 	stclvs	3, cr6, [r1], #-444	; 0xfffffe44
 4b4:	5f5f0065 	svcpl	0x005f0065
 4b8:	61656c63 	cmnvs	r5, r3, ror #24
 4bc:	0070756e 	rsbseq	r7, r0, lr, ror #10
 4c0:	736e755f 	cmnvc	lr, #398458880	; 0x17c00000
 4c4:	69636570 	stmdbvs	r3!, {r4, r5, r6, r8, sl, sp, lr}^
 4c8:	64656966 	strbtvs	r6, [r5], #-2406	; 0xfffff69a
 4cc:	636f6c5f 	cmnvs	pc, #24320	; 0x5f00
 4d0:	5f656c61 	svcpl	0x00656c61
 4d4:	6f666e69 	svcvs	0x00666e69
 4d8:	616d5f00 	cmnvs	sp, r0, lsl #30
 4dc:	73647778 	cmnvc	r4, #120, 14	; 0x1e00000
 4e0:	65725f00 	ldrbvs	r5, [r2, #-3840]!	; 0xfffff100
 4e4:	00746e65 	rsbseq	r6, r4, r5, ror #28
 4e8:	6565735f 	strbvs	r7, [r5, #-863]!	; 0xfffffca1
 4ec:	6e730064 	cdpvs	0, 7, cr0, cr3, cr4, {3}
 4f0:	68656b61 	stmdavs	r5!, {r0, r5, r6, r8, r9, fp, sp, lr}^
 4f4:	5f646165 	svcpl	0x00646165
 4f8:	6d6f6567 	cfstr64vs	mvdx6, [pc, #-412]!	; 364 <startup-0x1ffffc9c>
 4fc:	79727465 	ldmdbvc	r2!, {r0, r2, r5, r6, sl, ip, sp, lr}^
 500:	46454c5f 			; <UNDEFINED> instruction: 0x46454c5f
 504:	5f5f0054 	svcpl	0x005f0054
 508:	6e756f63 	cdpvs	15, 7, cr6, cr5, cr3, {3}
 50c:	5f5f0074 	svcpl	0x005f0074
 510:	6b636f6c 	blvs	18dc2c8 <startup-0x1e723d38>
 514:	765f5f00 	ldrbvc	r5, [pc], -r0, lsl #30
 518:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
 51c:	65735f00 	ldrbvs	r5, [r3, #-3840]!	; 0xfffff100
 520:	5f006b65 	svcpl	0x00006b65
 524:	736f7066 	cmnvc	pc, #102	; 0x66
 528:	5f00745f 	svcpl	0x0000745f
 52c:	5f6d745f 	svcpl	0x006d745f
 530:	006e696d 	rsbeq	r6, lr, sp, ror #18
 534:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 538:	00707574 	rsbseq	r7, r0, r4, ror r5
 53c:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
 540:	7070615f 	rsbsvc	r6, r0, pc, asr r1
 544:	756d5f00 	strbvc	r5, [sp, #-3840]!	; 0xfffff100
 548:	5f00746c 	svcpl	0x0000746c
 54c:	74727473 	ldrbtvc	r7, [r2], #-1139	; 0xfffffb8d
 550:	6c5f6b6f 	mrrcvs	11, 6, r6, pc, cr15	; <UNPREDICTABLE>
 554:	00747361 	rsbseq	r7, r4, r1, ror #6
 558:	746e665f 	strbtvc	r6, [lr], #-1631	; 0xfffff9a1
 55c:	73657079 	cmnvc	r5, #121	; 0x79
 560:	61726400 	cmnvs	r2, r0, lsl #8
 564:	70735f77 	rsbsvc	r5, r3, r7, ror pc
 568:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 56c:	624f7400 	subvs	r7, pc, #0, 8
 570:	615f006a 	cmpvs	pc, sl, rrx
 574:	73006464 	movwvc	r6, #1124	; 0x464
 578:	656b616e 	strbvs	r6, [fp, #-366]!	; 0xfffffe92
 57c:	64616568 	strbtvs	r6, [r1], #-1384	; 0xfffffa98
 580:	6f65675f 	svcvs	0x0065675f
 584:	7274656d 	rsbsvc	r6, r4, #457179136	; 0x1b400000
 588:	49525f79 	ldmdbmi	r2, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 58c:	00544847 	subseq	r4, r4, r7, asr #16
 590:	4c555f5f 	mrrcmi	15, 5, r5, r5, cr15	; <UNPREDICTABLE>
 594:	00676e6f 	rsbeq	r6, r7, pc, ror #28
 598:	7465675f 	strbtvc	r6, [r5], #-1887	; 0xfffff8a1
 59c:	65746164 	ldrbvs	r6, [r4, #-356]!	; 0xfffffe9c
 5a0:	7272655f 	rsbsvc	r6, r2, #398458880	; 0x17c00000
 5a4:	73657200 	cmnvc	r5, #0, 4
 5a8:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
 5ac:	61726400 	cmnvs	r2, r0, lsl #8
 5b0:	675f0077 			; <UNDEFINED> instruction: 0x675f0077
 5b4:	61626f6c 	cmnvs	r2, ip, ror #30
 5b8:	6d695f6c 	stclvs	15, cr5, [r9, #-432]!	; 0xfffffe50
 5bc:	65727570 	ldrbvs	r7, [r2, #-1392]!	; 0xfffffa90
 5c0:	7274705f 	rsbsvc	r7, r4, #95	; 0x5f
 5c4:	72756300 	rsbsvc	r6, r5, #0, 6
 5c8:	746e6572 	strbtvc	r6, [lr], #-1394	; 0xfffffa8e
 5cc:	67726100 	ldrbvs	r6, [r2, -r0, lsl #2]!
 5d0:	755f0076 	ldrbvc	r0, [pc, #-118]	; 562 <startup-0x1ffffa9e>
 5d4:	6573756e 	ldrbvs	r7, [r3, #-1390]!	; 0xfffffa92
 5d8:	61725f64 	cmnvs	r2, r4, ror #30
 5dc:	5f00646e 	svcpl	0x0000646e
 5e0:	00736477 	rsbseq	r6, r3, r7, ror r4
 5e4:	6d745f5f 	ldclvs	15, cr5, [r4, #-380]!	; 0xfffffe84
 5e8:	6164775f 	cmnvs	r4, pc, asr r7
 5ec:	675f0079 			; <UNDEFINED> instruction: 0x675f0079
 5f0:	0065756c 	rsbeq	r7, r5, ip, ror #10
 5f4:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0xfffff68d
 5f8:	50740078 	rsbspl	r0, r4, r8, ror r0
 5fc:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
 600:	554e4700 	strbpl	r4, [lr, #-1792]	; 0xfffff900
 604:	39394320 	ldmdbcc	r9!, {r5, r8, r9, lr}
 608:	322e3920 	eorcc	r3, lr, #32, 18	; 0x80000
 60c:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
 610:	31393130 	teqcc	r9, r0, lsr r1
 614:	20353230 	eorscs	r3, r5, r0, lsr r2
 618:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
 61c:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
 620:	415b2029 	cmpmi	fp, r9, lsr #32
 624:	612f4d52 			; <UNDEFINED> instruction: 0x612f4d52
 628:	392d6d72 	pushcc	{r1, r4, r5, r6, r8, sl, fp, sp, lr}
 62c:	6172622d 	cmnvs	r2, sp, lsr #4
 630:	2068636e 	rsbcs	r6, r8, lr, ror #6
 634:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
 638:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
 63c:	37373220 	ldrcc	r3, [r7, -r0, lsr #4]!
 640:	5d393935 			; <UNDEFINED> instruction: 0x5d393935
 644:	746d2d20 	strbtvc	r2, [sp], #-3360	; 0xfffff2e0
 648:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
 64c:	666d2d20 	strbtvs	r2, [sp], -r0, lsr #26
 650:	74616f6c 	strbtvc	r6, [r1], #-3948	; 0xfffff094
 654:	6962612d 	stmdbvs	r2!, {r0, r2, r3, r5, r8, sp, lr}^
 658:	666f733d 			; <UNDEFINED> instruction: 0x666f733d
 65c:	6d2d2074 	stcvs	0, cr2, [sp, #-464]!	; 0xfffffe30
 660:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
 664:	6d72613d 	ldfvse	f6, [r2, #-244]!	; 0xffffff0c
 668:	6d2d3676 	stcvs	6, cr3, [sp, #-472]!	; 0xfffffe28
 66c:	20672d20 	rsbcs	r2, r7, r0, lsr #26
 670:	20304f2d 	eorscs	r4, r0, sp, lsr #30
 674:	6474732d 	ldrbtvs	r7, [r4], #-813	; 0xfffffcd3
 678:	3939633d 	ldmdbcc	r9!, {r0, r2, r3, r4, r5, r8, r9, sp, lr}
 67c:	366c5f00 	strbtcc	r5, [ip], -r0, lsl #30
 680:	625f6134 	subsvs	r6, pc, #52, 2
 684:	5f006675 	svcpl	0x00006675
 688:	5f676973 	svcpl	0x00676973
 68c:	636e7566 	cmnvs	lr, #427819008	; 0x19800000
 690:	736f7000 	cmnvc	pc, #0
 694:	6e5f0078 	mrcvs	0, 2, r0, cr15, cr8, {3}
 698:	00667562 	rsbeq	r7, r6, r2, ror #10
 69c:	756e755f 	strbvc	r7, [lr, #-1375]!	; 0xfffffaa1
 6a0:	00646573 	rsbeq	r6, r4, r3, ror r5
 6a4:	79736f70 	ldmdbvc	r3!, {r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 6a8:	67726100 	ldrbvs	r6, [r2, -r0, lsl #2]!
 6ac:	5f5f0063 	svcpl	0x005f0063
 6b0:	695f6d74 	ldmdbvs	pc, {r2, r4, r5, r6, r8, sl, fp, sp, lr}^	; <UNPREDICTABLE>
 6b4:	74736473 	ldrbtvc	r6, [r3], #-1139	; 0xfffffb8d
 6b8:	6f6c5f00 	svcvs	0x006c5f00
 6bc:	746c6163 	strbtvc	r6, [ip], #-355	; 0xfffffe9d
 6c0:	5f656d69 	svcpl	0x00656d69
 6c4:	00667562 	rsbeq	r7, r6, r2, ror #10
 6c8:	6f6c635f 	svcvs	0x006c635f
 6cc:	73006573 	movwvc	r6, #1395	; 0x573
 6d0:	79657a69 	stmdbvc	r5!, {r0, r3, r5, r6, r9, fp, ip, sp, lr}^
 6d4:	34725f00 	ldrbtcc	r5, [r2], #-3840	; 0xfffff100
 6d8:	6d5f0038 	ldclvs	0, cr0, [pc, #-224]	; 600 <startup-0x1ffffa00>
 6dc:	776f7462 	strbvc	r7, [pc, -r2, ror #8]!
 6e0:	74735f63 	ldrbtvc	r5, [r3], #-3939	; 0xfffff09d
 6e4:	00657461 	rsbeq	r7, r5, r1, ror #8
 6e8:	7335705f 	teqvc	r5, #95	; 0x5f
 6ec:	616d6900 	cmnvs	sp, r0, lsl #18
 6f0:	625f6567 	subsvs	r6, pc, #432013312	; 0x19c00000
 6f4:	00737469 	rsbseq	r7, r3, r9, ror #8
 6f8:	6e69616d 	powvsez	f6, f1, #5.0
 6fc:	745f5f00 	ldrbvc	r5, [pc], #-3840	; 704 <startup-0x1ffff8fc>
 700:	646d5f6d 	strbtvs	r5, [sp], #-3949	; 0xfffff093
 704:	64007961 	strvs	r7, [r0], #-2401	; 0xfffff69f
 708:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 70c:	6b696d5f 	blvs	1a5bc90 <startup-0x1e5a4370>
 710:	67006f72 	smlsdxvs	r0, r2, pc, r6	; <UNPREDICTABLE>
 714:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 718:	645f6369 	ldrbvs	r6, [pc], #-873	; 720 <startup-0x1ffff8e0>
 71c:	5f776172 	svcpl	0x00776172
 720:	65726373 	ldrbvs	r6, [r2, #-883]!	; 0xfffffc8d
 724:	67006e65 	strvs	r6, [r0, -r5, ror #28]
 728:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 72c:	725f6369 	subsvc	r6, pc, #-1543503871	; 0xa4000001
 730:	5f646165 	svcpl	0x00646165
 734:	61746164 	cmnvs	r4, r4, ror #2
 738:	61726700 	cmnvs	r2, r0, lsl #14
 73c:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 740:	6165725f 	cmnvs	r5, pc, asr r2
 744:	69700064 	ldmdbvs	r0!, {r2, r5, r6}^
 748:	006c6578 	rsbeq	r6, ip, r8, ror r5
 74c:	70617267 	rsbvc	r7, r1, r7, ror #4
 750:	5f636968 	svcpl	0x00636968
 754:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
 758:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
 75c:	7465735f 	strbtvc	r7, [r5], #-863	; 0xfffffca1
 760:	656c6300 	strbvs	r6, [ip, #-768]!	; 0xfffffd00
 764:	625f7261 	subsvs	r7, pc, #268435462	; 0x10000006
 768:	626b6361 	rsbvs	r6, fp, #-2080374783	; 0x84000001
 76c:	65666675 	strbvs	r6, [r6, #-1653]!	; 0xfffff98b
 770:	65640072 	strbvs	r0, [r4, #-114]!	; 0xffffff8e
 774:	5f79616c 	svcpl	0x0079616c
 778:	6e303035 	mrcvs	0, 1, r3, cr0, cr5, {1}
 77c:	72670073 	rsbvc	r0, r7, #115	; 0x73
 780:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 784:	61775f63 	cmnvs	r7, r3, ror #30
 788:	725f7469 	subsvc	r7, pc, #1761607680	; 0x69000000
 78c:	79646165 	stmdbvc	r4!, {r0, r2, r5, r6, r8, sp, lr}^
 790:	73616d00 	cmnvc	r1, #0, 26
 794:	6975006b 	ldmdbvs	r5!, {r0, r1, r3, r5, r6}^
 798:	5f38746e 	svcpl	0x0038746e
 79c:	72670074 	rsbvc	r0, r7, #116	; 0x74
 7a0:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 7a4:	72775f63 	rsbsvc	r5, r7, #396	; 0x18c
 7a8:	00657469 	rsbeq	r7, r5, r9, ror #8
 7ac:	656c6573 	strbvs	r6, [ip, #-1395]!	; 0xfffffa8d
 7b0:	635f7463 	cmpvs	pc, #1660944384	; 0x63000000
 7b4:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
 7b8:	656c6c6f 	strbvs	r6, [ip, #-3183]!	; 0xfffff391
 7bc:	6e690072 	mcrvs	0, 3, r0, cr9, cr2, {3}
 7c0:	00786564 	rsbseq	r6, r8, r4, ror #10
 7c4:	70617267 	rsbvc	r7, r1, r7, ror #4
 7c8:	5f636968 	svcpl	0x00636968
 7cc:	61656c63 	cmnvs	r5, r3, ror #24
 7d0:	63735f72 	cmnvs	r3, #456	; 0x1c8
 7d4:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
 7d8:	61726700 	cmnvs	r2, r0, lsl #14
 7dc:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 7e0:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 7e4:	645f6574 	ldrbvs	r6, [pc], #-1396	; 7ec <startup-0x1ffff814>
 7e8:	00617461 	rsbeq	r7, r1, r1, ror #8
 7ec:	70617267 	rsbvc	r7, r1, r7, ror #4
 7f0:	5f636968 	svcpl	0x00636968
 7f4:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
 7f8:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
 7fc:	656c635f 	strbvs	r6, [ip, #-863]!	; 0xfffffca1
 800:	5a007261 	bpl	1d18c <startup-0x1ffe2e74>
 804:	6f6d2f3a 	svcvs	0x006d2f3a
 808:	4f4d2f70 	svcmi	0x004d2f70
 80c:	70532d50 	subsvc	r2, r3, r0, asr sp
 810:	31286c65 			; <UNDEFINED> instruction: 0x31286c65
 814:	4f4d2f29 	svcmi	0x004d2f29
 818:	70532d50 	subsvc	r2, r3, r0, asr sp
 81c:	532f6c65 			; <UNDEFINED> instruction: 0x532f6c65
 820:	656b616e 	strbvs	r6, [fp, #-366]!	; 0xfffffe92
 824:	6172672f 	cmnvs	r2, pc, lsr #14
 828:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 82c:	70736964 	rsbsvc	r6, r3, r4, ror #18
 830:	2e79616c 	rpwcsez	f6, f1, #4.0
 834:	61700063 	cmnvs	r0, r3, rrx
 838:	67006567 	strvs	r6, [r0, -r7, ror #10]
 83c:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 840:	775f6369 	ldrbvc	r6, [pc, -r9, ror #6]
 844:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 848:	6d6f635f 	stclvs	3, cr6, [pc, #-380]!	; 6d4 <startup-0x1ffff92c>
 84c:	646e616d 	strbtvs	r6, [lr], #-365	; 0xfffffe93
 850:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 854:	6d5f7961 	vldrvs.16	s15, [pc, #-194]	; 79a <startup-0x1ffff866>	; <UNPREDICTABLE>
 858:	696c6c69 	stmdbvs	ip!, {r0, r3, r5, r6, sl, fp, sp, lr}^
 85c:	61726700 	cmnvs	r2, r0, lsl #14
 860:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 864:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
 868:	65720074 	ldrbvs	r0, [r2, #-116]!	; 0xffffff8c
 86c:	6c617674 	stclvs	6, cr7, [r1], #-464	; 0xfffffe30
 870:	2f3a5a00 	svccs	0x003a5a00
 874:	2f706f6d 	svccs	0x00706f6d
 878:	2d504f4d 	ldclcs	15, cr4, [r0, #-308]	; 0xfffffecc
 87c:	6c657053 	stclvs	0, cr7, [r5], #-332	; 0xfffffeb4
 880:	2f293128 	svccs	0x00293128
 884:	2d504f4d 	ldclcs	15, cr4, [r0, #-308]	; 0xfffffecc
 888:	6c657053 	stclvs	0, cr7, [r5], #-332	; 0xfffffeb4
 88c:	616e532f 	cmnvs	lr, pc, lsr #6
 890:	712f656b 			; <UNDEFINED> instruction: 0x712f656b
 894:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0xfffffa8b
 898:	6900632e 	stmdbvs	r0, {r1, r2, r3, r5, r8, r9, sp, lr}
 89c:	6c754673 	ldclvs	6, cr4, [r5], #-460	; 0xfffffe34
 8a0:	6572006c 	ldrbvs	r0, [r2, #-108]!	; 0xffffff94
 8a4:	65766f6d 	ldrbvs	r6, [r6, #-3949]!	; 0xfffff093
 8a8:	45736900 	ldrbmi	r6, [r3, #-2304]!	; 0xfffff700
 8ac:	7974706d 	ldmdbvc	r4!, {r0, r2, r3, r5, r6, ip, sp, lr}^
 8b0:	65657000 	strbvs	r7, [r5, #-0]!
 8b4:	425f006b 	subsmi	r0, pc, #107	; 0x6b
 8b8:	006c6f6f 	rsbeq	r6, ip, pc, ror #30
 8bc:	65736e69 	ldrbvs	r6, [r3, #-3689]!	; 0xfffff197
 8c0:	69007472 	stmdbvs	r0, {r1, r4, r5, r6, sl, ip, sp, lr}
 8c4:	5f74696e 	svcpl	0x0074696e
 8c8:	75657571 	strbvc	r7, [r5, #-1393]!	; 0xfffffa8f
 8cc:	626f0065 	rsbvs	r0, pc, #101	; 0x65
 8d0:	7272416a 	rsbsvc	r4, r2, #-2147483622	; 0x8000001a
 8d4:	72007961 	andvc	r7, r0, #1589248	; 0x184000
 8d8:	00726165 	rsbseq	r6, r2, r5, ror #2
 8dc:	6d657469 	cfstrdvs	mvd7, [r5, #-420]!	; 0xfffffe5c
 8e0:	6e756f43 	cdpvs	15, 7, cr6, cr5, cr3, {2}
 8e4:	72660074 	rsbvc	r0, r6, #116	; 0x74
 8e8:	00746e6f 	rsbseq	r6, r4, pc, ror #28
 8ec:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 8f0:	6f675f69 	svcvs	0x00675f69
 8f4:	79786f74 	ldmdbvc	r8!, {r2, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 8f8:	63736100 	cmnvs	r3, #0, 2
 8fc:	635f6969 	cmpvs	pc, #1720320	; 0x1a4000
 900:	5f6c7274 	svcpl	0x006c7274
 904:	5f746962 	svcpl	0x00746962
 908:	61656c63 	cmnvs	r5, r3, ror #24
 90c:	73610072 	cmnvc	r1, #114	; 0x72
 910:	5f696963 	svcpl	0x00696963
 914:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 918:	6f635f65 	svcvs	0x00635f65
 91c:	6f72746e 	svcvs	0x0072746e
 920:	72656c6c 	rsbvc	r6, r5, #108, 24	; 0x6c00
 924:	63736100 	cmnvs	r3, #0, 2
 928:	725f6969 	subsvc	r6, pc, #1720320	; 0x1a4000
 92c:	5f646165 	svcpl	0x00646165
 930:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
 934:	63007375 	movwvs	r7, #885	; 0x375
 938:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
 93c:	7369645f 	cmnvc	r9, #1593835520	; 0x5f000000
 940:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 944:	63736100 	cmnvs	r3, #0, 2
 948:	775f6969 	ldrbvc	r6, [pc, -r9, ror #18]
 94c:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 950:	7461645f 	strbtvc	r6, [r1], #-1119	; 0xfffffba1
 954:	65640061 	strbvs	r0, [r4, #-97]!	; 0xffffff9f
 958:	5f79616c 	svcpl	0x0079616c
 95c:	6e303532 	mrcvs	5, 1, r3, cr0, cr2, {1}
 960:	65720073 	ldrbvs	r0, [r2, #-115]!	; 0xffffff8d
 964:	6c615674 	stclvs	6, cr5, [r1], #-464	; 0xfffffe30
 968:	64646100 	strbtvs	r6, [r4], #-256	; 0xffffff00
 96c:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
 970:	63736100 	cmnvs	r3, #0, 2
 974:	725f6969 	subsvc	r6, pc, #1720320	; 0x1a4000
 978:	5f646165 	svcpl	0x00646165
 97c:	746e6f63 	strbtvc	r6, [lr], #-3939	; 0xfffff09d
 980:	6c6c6f72 	stclvs	15, cr6, [ip], #-456	; 0xfffffe38
 984:	61007265 	tstvs	r0, r5, ror #4
 988:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 98c:	6165725f 	cmnvs	r5, pc, asr r2
 990:	61645f64 	cmnvs	r4, r4, ror #30
 994:	64006174 	strvs	r6, [r0], #-372	; 0xfffffe8c
 998:	6c707369 	ldclvs	3, cr7, [r0], #-420	; 0xfffffe5c
 99c:	635f7961 	cmpvs	pc, #1589248	; 0x184000
 9a0:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
 9a4:	72006c6f 	andvc	r6, r0, #28416	; 0x6f00
 9a8:	61447465 	cmpvs	r4, r5, ror #8
 9ac:	66006174 			; <UNDEFINED> instruction: 0x66006174
 9b0:	69746e75 	ldmdbvs	r4!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
 9b4:	735f6e6f 	cmpvc	pc, #1776	; 0x6f0
 9b8:	5a007465 	bpl	1db54 <startup-0x1ffe24ac>
 9bc:	6f6d2f3a 	svcvs	0x006d2f3a
 9c0:	4f4d2f70 	svcmi	0x004d2f70
 9c4:	70532d50 	subsvc	r2, r3, r0, asr sp
 9c8:	31286c65 			; <UNDEFINED> instruction: 0x31286c65
 9cc:	4f4d2f29 	svcmi	0x004d2f29
 9d0:	70532d50 	subsvc	r2, r3, r0, asr sp
 9d4:	532f6c65 			; <UNDEFINED> instruction: 0x532f6c65
 9d8:	656b616e 	strbvs	r6, [fp, #-366]!	; 0xfffffe92
 9dc:	6373612f 	cmnvs	r3, #-1073741813	; 0xc000000b
 9e0:	69646969 	stmdbvs	r4!, {r0, r3, r5, r6, r8, fp, sp, lr}^
 9e4:	616c7073 	smcvs	50947	; 0xc703
 9e8:	00632e79 	rsbeq	r2, r3, r9, ror lr
 9ec:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 9f0:	72775f69 	rsbsvc	r5, r7, #420	; 0x1a4
 9f4:	5f657469 	svcpl	0x00657469
 9f8:	00646d63 	rsbeq	r6, r4, r3, ror #26
 9fc:	53746572 	cmnpl	r4, #478150656	; 0x1c800000
 a00:	00746174 	rsbseq	r6, r4, r4, ror r1
 a04:	72746e65 	rsbsvc	r6, r4, #1616	; 0x650
 a08:	6f6d5f79 	svcvs	0x006d5f79
 a0c:	735f6564 	cmpvc	pc, #100, 10	; 0x19000000
 a10:	61007465 	tstvs	r0, r5, ror #8
 a14:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 a18:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 a1c:	635f6574 	cmpvs	pc, #116, 10	; 0x1d000000
 a20:	00726168 	rsbseq	r6, r2, r8, ror #2
 a24:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 a28:	74635f69 	strbtvc	r5, [r3], #-3945	; 0xfffff097
 a2c:	625f6c72 	subsvs	r6, pc, #29184	; 0x7200
 a30:	735f7469 	cmpvc	pc, #1761607680	; 0x69000000
 a34:	61007465 	tstvs	r0, r5, ror #8
 a38:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 a3c:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
 a40:	3a5a0074 	bcc	1680c18 <startup-0x1e97f3e8>
 a44:	706f6d2f 	rsbvc	r6, pc, pc, lsr #26
 a48:	504f4d2f 	subpl	r4, pc, pc, lsr #26
 a4c:	6570532d 	ldrbvs	r5, [r0, #-813]!	; 0xfffffcd3
 a50:	2931286c 	ldmdbcs	r1!, {r2, r3, r5, r6, fp, sp}
 a54:	504f4d2f 	subpl	r4, pc, pc, lsr #26
 a58:	6570532d 	ldrbvs	r5, [r0, #-813]!	; 0xfffffcd3
 a5c:	6e532f6c 	cdpvs	15, 5, cr2, cr3, cr12, {3}
 a60:	2f656b61 	svccs	0x00656b61
 a64:	616c6564 	cmnvs	ip, r4, ror #10
 a68:	00632e79 	rsbeq	r2, r3, r9, ror lr
 a6c:	6d2f3a5a 	vstmdbvs	pc!, {s6-s95}
 a70:	4d2f706f 	stcmi	0, cr7, [pc, #-444]!	; 8bc <startup-0x1ffff744>
 a74:	532d504f 			; <UNDEFINED> instruction: 0x532d504f
 a78:	286c6570 	stmdacs	ip!, {r4, r5, r6, r8, sl, sp, lr}^
 a7c:	4d2f2931 			; <UNDEFINED> instruction: 0x4d2f2931
 a80:	532d504f 			; <UNDEFINED> instruction: 0x532d504f
 a84:	2f6c6570 	svccs	0x006c6570
 a88:	6b616e53 	blvs	185c3dc <startup-0x1e7a3c24>
 a8c:	656b2f65 	strbvs	r2, [fp, #-3941]!	; 0xfffff09b
 a90:	632e6279 			; <UNDEFINED> instruction: 0x632e6279
 a94:	79656b00 	stmdbvc	r5!, {r8, r9, fp, sp, lr}^
 a98:	6e690062 	cdpvs	0, 6, cr0, cr9, cr2, {3}
 a9c:	00747570 	rsbseq	r7, r4, r0, ror r5
 aa0:	5679656b 	ldrbtpl	r6, [r9], -fp, ror #10
 aa4:	6f006c61 	svcvs	0x00006c61
 aa8:	73377475 	teqvc	r7, #1962934272	; 0x75000000
 aac:	72006765 	andvc	r6, r0, #26476544	; 0x1940000
 ab0:	5f646165 	svcpl	0x00646165
 ab4:	6f6c6f63 	svcvs	0x006c6f63
 ab8:	006e6d75 	rsbeq	r6, lr, r5, ror sp
 abc:	69746361 	ldmdbvs	r4!, {r0, r5, r6, r8, r9, sp, lr}^
 ac0:	65746176 	ldrbvs	r6, [r4, #-374]!	; 0xfffffe8a
 ac4:	776f725f 			; <UNDEFINED> instruction: 0x776f725f
 ac8:	79656b00 	stmdbvc	r5!, {r8, r9, fp, sp, lr}^
 acc:	6c61765f 	stclvs	6, cr7, [r1], #-380	; 0xfffffe84
 ad0:	Address 0x00000ad0 is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	206d7241 	rsbcs	r7, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d39 	eorscc	r2, r2, r9, lsr sp
  30:	712d3931 			; <UNDEFINED> instruction: 0x712d3931
  34:	616d2d34 	cmnvs	sp, r4, lsr sp
  38:	29726f6a 	ldmdbcs	r2!, {r1, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
  3c:	322e3920 	eorcc	r3, lr, #32, 18	; 0x80000
  40:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  44:	31393130 	teqcc	r9, r0, lsr r1
  48:	20353230 	eorscs	r3, r5, r0, lsr r2
  4c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  50:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  54:	415b2029 	cmpmi	fp, r9, lsr #32
  58:	612f4d52 			; <UNDEFINED> instruction: 0x612f4d52
  5c:	392d6d72 	pushcc	{r1, r4, r5, r6, r8, sl, fp, sp, lr}
  60:	6172622d 	cmnvs	r2, sp, lsr #4
  64:	2068636e 	rsbcs	r6, r8, lr, ror #6
  68:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
  6c:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
  70:	37373220 	ldrcc	r3, [r7, -r0, lsr #4]!
  74:	5d393935 			; <UNDEFINED> instruction: 0x5d393935
	...

Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002b41 	andeq	r2, r0, r1, asr #22
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000021 	andeq	r0, r0, r1, lsr #32
  10:	2d533605 	ldclcs	6, cr3, [r3, #-20]	; 0xffffffec
  14:	0c06004d 	stceq	0, cr0, [r6], {77}	; 0x4d
  18:	01094d07 	tsteq	r9, r7, lsl #26
  1c:	01140412 	tsteq	r4, r2, lsl r4
  20:	03170115 	tsteq	r7, #1073741829	; 0x40000005
  24:	01190118 	tsteq	r9, r8, lsl r1
  28:	061e011a 			; <UNDEFINED> instruction: 0x061e011a

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000000c 	andeq	r0, r0, ip
  14:	00000000 	andeq	r0, r0, r0
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
  20:	0000001c 	andeq	r0, r0, ip, lsl r0
  24:	00000000 	andeq	r0, r0, r0
  28:	20000010 	andcs	r0, r0, r0, lsl r0
  2c:	00000020 	andeq	r0, r0, r0, lsr #32
  30:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  34:	41018e02 	tstmi	r1, r2, lsl #28
  38:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
  3c:	00000007 	andeq	r0, r0, r7
  40:	0000001c 	andeq	r0, r0, ip, lsl r0
  44:	00000000 	andeq	r0, r0, r0
  48:	20000030 	andcs	r0, r0, r0, lsr r0
  4c:	00000062 	andeq	r0, r0, r2, rrx
  50:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  54:	41018e02 	tstmi	r1, r2, lsl #28
  58:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
  5c:	00000007 	andeq	r0, r0, r7
  60:	0000001c 	andeq	r0, r0, ip, lsl r0
  64:	00000000 	andeq	r0, r0, r0
  68:	20000092 	mulcs	r0, r2, r0
  6c:	00000062 	andeq	r0, r0, r2, rrx
  70:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  74:	41018e02 	tstmi	r1, r2, lsl #28
  78:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
  7c:	00000007 	andeq	r0, r0, r7
  80:	0000001c 	andeq	r0, r0, ip, lsl r0
  84:	00000000 	andeq	r0, r0, r0
  88:	200000f4 	strdcs	r0, [r0], -r4
  8c:	000000ac 	andeq	r0, r0, ip, lsr #1
  90:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  94:	41018e02 	tstmi	r1, r2, lsl #28
  98:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
  9c:	00000007 	andeq	r0, r0, r7
  a0:	0000001c 	andeq	r0, r0, ip, lsl r0
  a4:	00000000 	andeq	r0, r0, r0
  a8:	200001a0 	andcs	r0, r0, r0, lsr #3
  ac:	0000002c 	andeq	r0, r0, ip, lsr #32
  b0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  b4:	41018e02 	tstmi	r1, r2, lsl #28
  b8:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
  bc:	00000007 	andeq	r0, r0, r7
  c0:	0000001c 	andeq	r0, r0, ip, lsl r0
  c4:	00000000 	andeq	r0, r0, r0
  c8:	200001cc 	andcs	r0, r0, ip, asr #3
  cc:	000000c2 	andeq	r0, r0, r2, asr #1
  d0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  d4:	41018e02 	tstmi	r1, r2, lsl #28
  d8:	0d41300e 	stcleq	0, cr3, [r1, #-56]	; 0xffffffc8
  dc:	00000007 	andeq	r0, r0, r7
  e0:	0000001c 	andeq	r0, r0, ip, lsl r0
  e4:	00000000 	andeq	r0, r0, r0
  e8:	2000028e 	andcs	r0, r0, lr, lsl #5
  ec:	0000006a 	andeq	r0, r0, sl, rrx
  f0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  f4:	41018e02 	tstmi	r1, r2, lsl #28
  f8:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
  fc:	00000007 	andeq	r0, r0, r7
 100:	0000001c 	andeq	r0, r0, ip, lsl r0
 104:	00000000 	andeq	r0, r0, r0
 108:	200002f8 	strdcs	r0, [r0], -r8
 10c:	00000020 	andeq	r0, r0, r0, lsr #32
 110:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 114:	41018e02 	tstmi	r1, r2, lsl #28
 118:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 11c:	00000007 	andeq	r0, r0, r7
 120:	0000001c 	andeq	r0, r0, ip, lsl r0
 124:	00000000 	andeq	r0, r0, r0
 128:	20000318 	andcs	r0, r0, r8, lsl r3
 12c:	00000090 	muleq	r0, r0, r0
 130:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 134:	41018e02 	tstmi	r1, r2, lsl #28
 138:	0d41200e 	stcleq	0, cr2, [r1, #-56]	; 0xffffffc8
 13c:	00000007 	andeq	r0, r0, r7
 140:	0000001c 	andeq	r0, r0, ip, lsl r0
 144:	00000000 	andeq	r0, r0, r0
 148:	200003a8 	andcs	r0, r0, r8, lsr #7
 14c:	000000d4 	ldrdeq	r0, [r0], -r4
 150:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 154:	41018e02 	tstmi	r1, r2, lsl #28
 158:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 15c:	00000007 	andeq	r0, r0, r7
 160:	0000001c 	andeq	r0, r0, ip, lsl r0
 164:	00000000 	andeq	r0, r0, r0
 168:	2000047c 	andcs	r0, r0, ip, ror r4
 16c:	0000007a 	andeq	r0, r0, sl, ror r0
 170:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 174:	41018e02 	tstmi	r1, r2, lsl #28
 178:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 17c:	00000007 	andeq	r0, r0, r7
 180:	0000001c 	andeq	r0, r0, ip, lsl r0
 184:	00000000 	andeq	r0, r0, r0
 188:	200004f6 	strdcs	r0, [r0], -r6
 18c:	0000003e 	andeq	r0, r0, lr, lsr r0
 190:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 194:	41018e02 	tstmi	r1, r2, lsl #28
 198:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 19c:	00000007 	andeq	r0, r0, r7
 1a0:	00000018 	andeq	r0, r0, r8, lsl r0
 1a4:	00000000 	andeq	r0, r0, r0
 1a8:	20000534 	andcs	r0, r0, r4, lsr r5
 1ac:	00000070 	andeq	r0, r0, r0, ror r0
 1b0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 1b4:	41018e02 	tstmi	r1, r2, lsl #28
 1b8:	0000070d 	andeq	r0, r0, sp, lsl #14
 1bc:	0000001c 	andeq	r0, r0, ip, lsl r0
 1c0:	00000000 	andeq	r0, r0, r0
 1c4:	200005a4 	andcs	r0, r0, r4, lsr #11
 1c8:	00000128 	andeq	r0, r0, r8, lsr #2
 1cc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 1d0:	41018e02 	tstmi	r1, r2, lsl #28
 1d4:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 1d8:	00000007 	andeq	r0, r0, r7
 1dc:	0000001c 	andeq	r0, r0, ip, lsl r0
 1e0:	00000000 	andeq	r0, r0, r0
 1e4:	200006cc 	andcs	r0, r0, ip, asr #13
 1e8:	00000044 	andeq	r0, r0, r4, asr #32
 1ec:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 1f0:	41018e02 	tstmi	r1, r2, lsl #28
 1f4:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 1f8:	00000007 	andeq	r0, r0, r7
 1fc:	00000018 	andeq	r0, r0, r8, lsl r0
 200:	00000000 	andeq	r0, r0, r0
 204:	20000710 	andcs	r0, r0, r0, lsl r7
 208:	00000028 	andeq	r0, r0, r8, lsr #32
 20c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 210:	41018e02 	tstmi	r1, r2, lsl #28
 214:	0000070d 	andeq	r0, r0, sp, lsl #14
 218:	00000020 	andeq	r0, r0, r0, lsr #32
 21c:	00000000 	andeq	r0, r0, r0
 220:	20000738 	andcs	r0, r0, r8, lsr r7
 224:	000001b0 			; <UNDEFINED> instruction: 0x000001b0
 228:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
 22c:	87038504 	strhi	r8, [r3, -r4, lsl #10]
 230:	42018e02 	andmi	r8, r1, #2, 28
 234:	4138d00e 	teqmi	r8, lr
 238:	0000070d 	andeq	r0, r0, sp, lsl #14
 23c:	0000000c 	andeq	r0, r0, ip
 240:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 244:	7c020001 	stcvc	0, cr0, [r2], {1}
 248:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 24c:	00000018 	andeq	r0, r0, r8, lsl r0
 250:	0000023c 	andeq	r0, r0, ip, lsr r2
 254:	200008ec 	andcs	r0, r0, ip, ror #17
 258:	0000005c 	andeq	r0, r0, ip, asr r0
 25c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 260:	41018e02 	tstmi	r1, r2, lsl #28
 264:	0000070d 	andeq	r0, r0, sp, lsl #14
 268:	0000001c 	andeq	r0, r0, ip, lsl r0
 26c:	0000023c 	andeq	r0, r0, ip, lsr r2
 270:	20000948 	andcs	r0, r0, r8, asr #18
 274:	00000050 	andeq	r0, r0, r0, asr r0
 278:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 27c:	41018e02 	tstmi	r1, r2, lsl #28
 280:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 284:	00000007 	andeq	r0, r0, r7
 288:	0000001c 	andeq	r0, r0, ip, lsl r0
 28c:	0000023c 	andeq	r0, r0, ip, lsr r2
 290:	20000998 	mulcs	r0, r8, r9
 294:	00000044 	andeq	r0, r0, r4, asr #32
 298:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 29c:	41018e02 	tstmi	r1, r2, lsl #28
 2a0:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 2a4:	00000007 	andeq	r0, r0, r7
 2a8:	0000001c 	andeq	r0, r0, ip, lsl r0
 2ac:	0000023c 	andeq	r0, r0, ip, lsr r2
 2b0:	200009dc 	ldrdcs	r0, [r0], -ip
 2b4:	0000005a 	andeq	r0, r0, sl, asr r0
 2b8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 2bc:	41018e02 	tstmi	r1, r2, lsl #28
 2c0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 2c4:	00000007 	andeq	r0, r0, r7
 2c8:	00000018 	andeq	r0, r0, r8, lsl r0
 2cc:	0000023c 	andeq	r0, r0, ip, lsr r2
 2d0:	20000a36 	andcs	r0, r0, r6, lsr sl
 2d4:	0000003e 	andeq	r0, r0, lr, lsr r0
 2d8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 2dc:	41018e02 	tstmi	r1, r2, lsl #28
 2e0:	0000070d 	andeq	r0, r0, sp, lsl #14
 2e4:	0000001c 	andeq	r0, r0, ip, lsl r0
 2e8:	0000023c 	andeq	r0, r0, ip, lsr r2
 2ec:	20000a74 	andcs	r0, r0, r4, ror sl
 2f0:	0000008c 	andeq	r0, r0, ip, lsl #1
 2f4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 2f8:	41018e02 	tstmi	r1, r2, lsl #28
 2fc:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 300:	00000007 	andeq	r0, r0, r7
 304:	0000001c 	andeq	r0, r0, ip, lsl r0
 308:	0000023c 	andeq	r0, r0, ip, lsr r2
 30c:	20000b00 	andcs	r0, r0, r0, lsl #22
 310:	0000002a 	andeq	r0, r0, sl, lsr #32
 314:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 318:	41018e02 	tstmi	r1, r2, lsl #28
 31c:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 320:	00000007 	andeq	r0, r0, r7
 324:	0000001c 	andeq	r0, r0, ip, lsl r0
 328:	0000023c 	andeq	r0, r0, ip, lsr r2
 32c:	20000b2a 	andcs	r0, r0, sl, lsr #22
 330:	00000076 	andeq	r0, r0, r6, ror r0
 334:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 338:	41018e02 	tstmi	r1, r2, lsl #28
 33c:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 340:	00000007 	andeq	r0, r0, r7
 344:	0000001c 	andeq	r0, r0, ip, lsl r0
 348:	0000023c 	andeq	r0, r0, ip, lsr r2
 34c:	20000ba0 	andcs	r0, r0, r0, lsr #23
 350:	00000046 	andeq	r0, r0, r6, asr #32
 354:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 358:	41018e02 	tstmi	r1, r2, lsl #28
 35c:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 360:	00000007 	andeq	r0, r0, r7
 364:	0000001c 	andeq	r0, r0, ip, lsl r0
 368:	0000023c 	andeq	r0, r0, ip, lsr r2
 36c:	20000be6 	andcs	r0, r0, r6, ror #23
 370:	00000046 	andeq	r0, r0, r6, asr #32
 374:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 378:	41018e02 	tstmi	r1, r2, lsl #28
 37c:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 380:	00000007 	andeq	r0, r0, r7
 384:	0000001c 	andeq	r0, r0, ip, lsl r0
 388:	0000023c 	andeq	r0, r0, ip, lsr r2
 38c:	20000c2c 	andcs	r0, r0, ip, lsr #24
 390:	0000005a 	andeq	r0, r0, sl, asr r0
 394:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 398:	41018e02 	tstmi	r1, r2, lsl #28
 39c:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 3a0:	00000007 	andeq	r0, r0, r7
 3a4:	0000001c 	andeq	r0, r0, ip, lsl r0
 3a8:	0000023c 	andeq	r0, r0, ip, lsr r2
 3ac:	20000c86 	andcs	r0, r0, r6, lsl #25
 3b0:	00000036 	andeq	r0, r0, r6, lsr r0
 3b4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 3b8:	41018e02 	tstmi	r1, r2, lsl #28
 3bc:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 3c0:	00000007 	andeq	r0, r0, r7
 3c4:	0000001c 	andeq	r0, r0, ip, lsl r0
 3c8:	0000023c 	andeq	r0, r0, ip, lsr r2
 3cc:	20000cbc 			; <UNDEFINED> instruction: 0x20000cbc
 3d0:	00000084 	andeq	r0, r0, r4, lsl #1
 3d4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 3d8:	41018e02 	tstmi	r1, r2, lsl #28
 3dc:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 3e0:	00000007 	andeq	r0, r0, r7
 3e4:	0000001c 	andeq	r0, r0, ip, lsl r0
 3e8:	0000023c 	andeq	r0, r0, ip, lsr r2
 3ec:	20000d40 	andcs	r0, r0, r0, asr #26
 3f0:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 3f4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 3f8:	41018e02 	tstmi	r1, r2, lsl #28
 3fc:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 400:	00000007 	andeq	r0, r0, r7
 404:	0000000c 	andeq	r0, r0, ip
 408:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 40c:	7c020001 	stcvc	0, cr0, [r2], {1}
 410:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 414:	0000001c 	andeq	r0, r0, ip, lsl r0
 418:	00000404 	andeq	r0, r0, r4, lsl #8
 41c:	20000e10 	andcs	r0, r0, r0, lsl lr
 420:	00000030 	andeq	r0, r0, r0, lsr r0
 424:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 428:	41018e02 	tstmi	r1, r2, lsl #28
 42c:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 430:	00000007 	andeq	r0, r0, r7
 434:	00000018 	andeq	r0, r0, r8, lsl r0
 438:	00000404 	andeq	r0, r0, r4, lsl #8
 43c:	20000e40 	andcs	r0, r0, r0, asr #28
 440:	0000001c 	andeq	r0, r0, ip, lsl r0
 444:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 448:	41018e02 	tstmi	r1, r2, lsl #28
 44c:	0000070d 	andeq	r0, r0, sp, lsl #14
 450:	00000018 	andeq	r0, r0, r8, lsl r0
 454:	00000404 	andeq	r0, r0, r4, lsl #8
 458:	20000e5c 	andcs	r0, r0, ip, asr lr
 45c:	00000018 	andeq	r0, r0, r8, lsl r0
 460:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 464:	41018e02 	tstmi	r1, r2, lsl #28
 468:	0000070d 	andeq	r0, r0, sp, lsl #14
 46c:	00000018 	andeq	r0, r0, r8, lsl r0
 470:	00000404 	andeq	r0, r0, r4, lsl #8
 474:	20000e74 	andcs	r0, r0, r4, ror lr
 478:	0000001c 	andeq	r0, r0, ip, lsl r0
 47c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 480:	41018e02 	tstmi	r1, r2, lsl #28
 484:	0000070d 	andeq	r0, r0, sp, lsl #14
 488:	00000018 	andeq	r0, r0, r8, lsl r0
 48c:	00000404 	andeq	r0, r0, r4, lsl #8
 490:	20000e90 	mulcs	r0, r0, lr
 494:	00000014 	andeq	r0, r0, r4, lsl r0
 498:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 49c:	41018e02 	tstmi	r1, r2, lsl #28
 4a0:	0000070d 	andeq	r0, r0, sp, lsl #14
 4a4:	0000001c 	andeq	r0, r0, ip, lsl r0
 4a8:	00000404 	andeq	r0, r0, r4, lsl #8
 4ac:	20000ea4 	andcs	r0, r0, r4, lsr #29
 4b0:	00000060 	andeq	r0, r0, r0, rrx
 4b4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 4b8:	41018e02 	tstmi	r1, r2, lsl #28
 4bc:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 4c0:	00000007 	andeq	r0, r0, r7
 4c4:	0000001c 	andeq	r0, r0, ip, lsl r0
 4c8:	00000404 	andeq	r0, r0, r4, lsl #8
 4cc:	20000f04 	andcs	r0, r0, r4, lsl #30
 4d0:	00000048 	andeq	r0, r0, r8, asr #32
 4d4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 4d8:	41018e02 	tstmi	r1, r2, lsl #28
 4dc:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 4e0:	00000007 	andeq	r0, r0, r7
 4e4:	0000000c 	andeq	r0, r0, ip
 4e8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 4ec:	7c020001 	stcvc	0, cr0, [r2], {1}
 4f0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 4f4:	00000018 	andeq	r0, r0, r8, lsl r0
 4f8:	000004e4 	andeq	r0, r0, r4, ror #9
 4fc:	20000f4c 	andcs	r0, r0, ip, asr #30
 500:	0000001a 	andeq	r0, r0, sl, lsl r0
 504:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 508:	41018e02 	tstmi	r1, r2, lsl #28
 50c:	0000070d 	andeq	r0, r0, sp, lsl #14
 510:	0000001c 	andeq	r0, r0, ip, lsl r0
 514:	000004e4 	andeq	r0, r0, r4, ror #9
 518:	20000f66 	andcs	r0, r0, r6, ror #30
 51c:	00000032 	andeq	r0, r0, r2, lsr r0
 520:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 524:	41018e02 	tstmi	r1, r2, lsl #28
 528:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 52c:	00000007 	andeq	r0, r0, r7
 530:	0000001c 	andeq	r0, r0, ip, lsl r0
 534:	000004e4 	andeq	r0, r0, r4, ror #9
 538:	20000f98 	mulcs	r0, r8, pc	; <UNPREDICTABLE>
 53c:	0000003c 	andeq	r0, r0, ip, lsr r0
 540:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 544:	41018e02 	tstmi	r1, r2, lsl #28
 548:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 54c:	00000007 	andeq	r0, r0, r7
 550:	0000001c 	andeq	r0, r0, ip, lsl r0
 554:	000004e4 	andeq	r0, r0, r4, ror #9
 558:	20000fd4 	ldrdcs	r0, [r0], -r4
 55c:	0000002a 	andeq	r0, r0, sl, lsr #32
 560:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 564:	41018e02 	tstmi	r1, r2, lsl #28
 568:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 56c:	00000007 	andeq	r0, r0, r7
 570:	0000001c 	andeq	r0, r0, ip, lsl r0
 574:	000004e4 	andeq	r0, r0, r4, ror #9
 578:	20000ffe 	strdcs	r0, [r0], -lr
 57c:	0000002a 	andeq	r0, r0, sl, lsr #32
 580:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 584:	41018e02 	tstmi	r1, r2, lsl #28
 588:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 58c:	00000007 	andeq	r0, r0, r7
 590:	0000001c 	andeq	r0, r0, ip, lsl r0
 594:	000004e4 	andeq	r0, r0, r4, ror #9
 598:	20001028 	andcs	r1, r0, r8, lsr #32
 59c:	00000030 	andeq	r0, r0, r0, lsr r0
 5a0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 5a4:	41018e02 	tstmi	r1, r2, lsl #28
 5a8:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 5ac:	00000007 	andeq	r0, r0, r7
 5b0:	0000001c 	andeq	r0, r0, ip, lsl r0
 5b4:	000004e4 	andeq	r0, r0, r4, ror #9
 5b8:	20001058 	andcs	r1, r0, r8, asr r0
 5bc:	00000034 	andeq	r0, r0, r4, lsr r0
 5c0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 5c4:	41018e02 	tstmi	r1, r2, lsl #28
 5c8:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 5cc:	00000007 	andeq	r0, r0, r7
 5d0:	0000001c 	andeq	r0, r0, ip, lsl r0
 5d4:	000004e4 	andeq	r0, r0, r4, ror #9
 5d8:	2000108c 	andcs	r1, r0, ip, lsl #1
 5dc:	0000003c 	andeq	r0, r0, ip, lsr r0
 5e0:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
 5e4:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 5e8:	180e4101 	stmdane	lr, {r0, r8, lr}
 5ec:	00070d41 	andeq	r0, r7, r1, asr #26
 5f0:	0000001c 	andeq	r0, r0, ip, lsl r0
 5f4:	000004e4 	andeq	r0, r0, r4, ror #9
 5f8:	200010c8 	andcs	r1, r0, r8, asr #1
 5fc:	0000003c 	andeq	r0, r0, ip, lsr r0
 600:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
 604:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 608:	180e4101 	stmdane	lr, {r0, r8, lr}
 60c:	00070d41 	andeq	r0, r7, r1, asr #26
 610:	00000018 	andeq	r0, r0, r8, lsl r0
 614:	000004e4 	andeq	r0, r0, r4, ror #9
 618:	20001104 	andcs	r1, r0, r4, lsl #2
 61c:	0000002e 	andeq	r0, r0, lr, lsr #32
 620:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 624:	41018e02 	tstmi	r1, r2, lsl #28
 628:	0000070d 	andeq	r0, r0, sp, lsl #14
 62c:	00000018 	andeq	r0, r0, r8, lsl r0
 630:	000004e4 	andeq	r0, r0, r4, ror #9
 634:	20001132 	andcs	r1, r0, r2, lsr r1
 638:	0000002e 	andeq	r0, r0, lr, lsr #32
 63c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 640:	41018e02 	tstmi	r1, r2, lsl #28
 644:	0000070d 	andeq	r0, r0, sp, lsl #14
 648:	00000018 	andeq	r0, r0, r8, lsl r0
 64c:	000004e4 	andeq	r0, r0, r4, ror #9
 650:	20001160 	andcs	r1, r0, r0, ror #2
 654:	0000002e 	andeq	r0, r0, lr, lsr #32
 658:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 65c:	41018e02 	tstmi	r1, r2, lsl #28
 660:	0000070d 	andeq	r0, r0, sp, lsl #14
 664:	00000018 	andeq	r0, r0, r8, lsl r0
 668:	000004e4 	andeq	r0, r0, r4, ror #9
 66c:	2000118e 	andcs	r1, r0, lr, lsl #3
 670:	0000002e 	andeq	r0, r0, lr, lsr #32
 674:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 678:	41018e02 	tstmi	r1, r2, lsl #28
 67c:	0000070d 	andeq	r0, r0, sp, lsl #14
 680:	0000001c 	andeq	r0, r0, ip, lsl r0
 684:	000004e4 	andeq	r0, r0, r4, ror #9
 688:	200011bc 			; <UNDEFINED> instruction: 0x200011bc
 68c:	0000002a 	andeq	r0, r0, sl, lsr #32
 690:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 694:	41018e02 	tstmi	r1, r2, lsl #28
 698:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 69c:	00000007 	andeq	r0, r0, r7
 6a0:	0000001c 	andeq	r0, r0, ip, lsl r0
 6a4:	000004e4 	andeq	r0, r0, r4, ror #9
 6a8:	200011e6 	andcs	r1, r0, r6, ror #3
 6ac:	0000004c 	andeq	r0, r0, ip, asr #32
 6b0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 6b4:	41018e02 	tstmi	r1, r2, lsl #28
 6b8:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 6bc:	00000007 	andeq	r0, r0, r7
 6c0:	0000000c 	andeq	r0, r0, ip
 6c4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 6c8:	7c020001 	stcvc	0, cr0, [r2], {1}
 6cc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 6d0:	00000018 	andeq	r0, r0, r8, lsl r0
 6d4:	000006c0 	andeq	r0, r0, r0, asr #13
 6d8:	20001234 	andcs	r1, r0, r4, lsr r2
 6dc:	00000044 	andeq	r0, r0, r4, asr #32
 6e0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 6e4:	41018e02 	tstmi	r1, r2, lsl #28
 6e8:	0000070d 	andeq	r0, r0, sp, lsl #14
 6ec:	00000018 	andeq	r0, r0, r8, lsl r0
 6f0:	000006c0 	andeq	r0, r0, r0, asr #13
 6f4:	20001278 	andcs	r1, r0, r8, ror r2
 6f8:	00000012 	andeq	r0, r0, r2, lsl r0
 6fc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 700:	41018e02 	tstmi	r1, r2, lsl #28
 704:	0000070d 	andeq	r0, r0, sp, lsl #14
 708:	0000001c 	andeq	r0, r0, ip, lsl r0
 70c:	000006c0 	andeq	r0, r0, r0, asr #13
 710:	2000128a 	andcs	r1, r0, sl, lsl #5
 714:	0000002e 	andeq	r0, r0, lr, lsr #32
 718:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 71c:	41018e02 	tstmi	r1, r2, lsl #28
 720:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 724:	00000007 	andeq	r0, r0, r7
 728:	0000001c 	andeq	r0, r0, ip, lsl r0
 72c:	000006c0 	andeq	r0, r0, r0, asr #13
 730:	200012b8 			; <UNDEFINED> instruction: 0x200012b8
 734:	00000028 	andeq	r0, r0, r8, lsr #32
 738:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 73c:	41018e02 	tstmi	r1, r2, lsl #28
 740:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 744:	00000007 	andeq	r0, r0, r7
 748:	0000000c 	andeq	r0, r0, ip
 74c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 750:	7c020001 	stcvc	0, cr0, [r2], {1}
 754:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 758:	0000001c 	andeq	r0, r0, ip, lsl r0
 75c:	00000748 	andeq	r0, r0, r8, asr #14
 760:	200012e0 	andcs	r1, r0, r0, ror #5
 764:	00000024 	andeq	r0, r0, r4, lsr #32
 768:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 76c:	41018e02 	tstmi	r1, r2, lsl #28
 770:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 774:	00000007 	andeq	r0, r0, r7
 778:	0000001c 	andeq	r0, r0, ip, lsl r0
 77c:	00000748 	andeq	r0, r0, r8, asr #14
 780:	20001304 	andcs	r1, r0, r4, lsl #6
 784:	00000044 	andeq	r0, r0, r4, asr #32
 788:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 78c:	41018e02 	tstmi	r1, r2, lsl #28
 790:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 794:	00000007 	andeq	r0, r0, r7
 798:	0000001c 	andeq	r0, r0, ip, lsl r0
 79c:	00000748 	andeq	r0, r0, r8, asr #14
 7a0:	20001348 	andcs	r1, r0, r8, asr #6
 7a4:	00000068 	andeq	r0, r0, r8, rrx
 7a8:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
 7ac:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 7b0:	380e4101 	stmdacc	lr, {r0, r8, lr}
 7b4:	00070d41 	andeq	r0, r7, r1, asr #26
 7b8:	0000001c 	andeq	r0, r0, ip, lsl r0
 7bc:	00000748 	andeq	r0, r0, r8, asr #14
 7c0:	200013b0 			; <UNDEFINED> instruction: 0x200013b0
 7c4:	00000020 	andeq	r0, r0, r0, lsr #32
 7c8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 7cc:	41018e02 	tstmi	r1, r2, lsl #28
 7d0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 7d4:	00000007 	andeq	r0, r0, r7
 7d8:	0000000c 	andeq	r0, r0, ip
 7dc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 7e0:	7c010001 	stcvc	0, cr0, [r1], {1}
 7e4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 7e8:	0000000c 	andeq	r0, r0, ip
 7ec:	000007d8 	ldrdeq	r0, [r0], -r8
 7f0:	200013d1 	ldrdcs	r1, [r0], -r1	; <UNPREDICTABLE>
 7f4:	000001cc 	andeq	r0, r0, ip, asr #3
