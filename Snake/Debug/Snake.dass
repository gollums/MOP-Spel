
./Debug/Snake.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:
static volatile int points, snakeSize;

__attribute__((naked)) __attribute__((section (".start_section")) )
void startup ( void )
{
__asm__ volatile(" LDR R0,=0x2001C000\n");		/* set stack */
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <startup+0xc>)
__asm__ volatile(" MOV SP,R0\n");
20000002:	4685      	mov	sp, r0
__asm__ volatile(" BL main\n");					/* call main */
20000004:	f000 fef2 	bl	20000dec <main>
__asm__ volatile(".L1: B .L1\n");				/* never return */
20000008:	e7fe      	b.n	20000008 <startup+0x8>
};
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <ascii_init>:
#include <defines.h>
#include <asciidisplay.h>

void ascii_init(void){ /**/
20000010:	b580      	push	{r7, lr}
20000012:	af00      	add	r7, sp, #0
    /*function set*/
    funtion_set();
20000014:	f000 f8ef 	bl	200001f6 <funtion_set>
    
    /*Display Control*/
    display_control();
20000018:	f000 f904 	bl	20000224 <display_control>
    
    /*Clear Display*/
    clear_display();
2000001c:	f000 f8d4 	bl	200001c8 <clear_display>
    
    /*Entry mode set*/
    entry_mode_set();
20000020:	f000 f917 	bl	20000252 <entry_mode_set>
}
20000024:	46c0      	nop			; (mov r8, r8)
20000026:	46bd      	mov	sp, r7
20000028:	bd80      	pop	{r7, pc}

2000002a <ascii_ctrl_bit_set>:

/*adressera ASCII-display, ettställ de bitar som är 1 i x*/
void ascii_ctrl_bit_set(unsigned char x){
2000002a:	b580      	push	{r7, lr}
2000002c:	b082      	sub	sp, #8
2000002e:	af00      	add	r7, sp, #0
20000030:	0002      	movs	r2, r0
20000032:	1dfb      	adds	r3, r7, #7
20000034:	701a      	strb	r2, [r3, #0]
    *GPIO_E_ODR_LOW |= ( B_SELECT | x );
20000036:	4b08      	ldr	r3, [pc, #32]	; (20000058 <ascii_ctrl_bit_set+0x2e>)
20000038:	781b      	ldrb	r3, [r3, #0]
2000003a:	b2da      	uxtb	r2, r3
2000003c:	1dfb      	adds	r3, r7, #7
2000003e:	781b      	ldrb	r3, [r3, #0]
20000040:	4313      	orrs	r3, r2
20000042:	b2db      	uxtb	r3, r3
20000044:	4a04      	ldr	r2, [pc, #16]	; (20000058 <ascii_ctrl_bit_set+0x2e>)
20000046:	2104      	movs	r1, #4
20000048:	430b      	orrs	r3, r1
2000004a:	b2db      	uxtb	r3, r3
2000004c:	7013      	strb	r3, [r2, #0]
}
2000004e:	46c0      	nop			; (mov r8, r8)
20000050:	46bd      	mov	sp, r7
20000052:	b002      	add	sp, #8
20000054:	bd80      	pop	{r7, pc}
20000056:	46c0      	nop			; (mov r8, r8)
20000058:	40021014 	andmi	r1, r2, r4, lsl r0

2000005c <ascii_ctrl_bit_clear>:

/*adressera ASCII-display, nollställ de bitar som är 1 i x*/
void ascii_ctrl_bit_clear(unsigned char x){
2000005c:	b580      	push	{r7, lr}
2000005e:	b082      	sub	sp, #8
20000060:	af00      	add	r7, sp, #0
20000062:	0002      	movs	r2, r0
20000064:	1dfb      	adds	r3, r7, #7
20000066:	701a      	strb	r2, [r3, #0]
    *GPIO_E_ODR_LOW &= ( B_SELECT | ~x);
20000068:	4b0a      	ldr	r3, [pc, #40]	; (20000094 <ascii_ctrl_bit_clear+0x38>)
2000006a:	781b      	ldrb	r3, [r3, #0]
2000006c:	b2db      	uxtb	r3, r3
2000006e:	b25b      	sxtb	r3, r3
20000070:	1dfa      	adds	r2, r7, #7
20000072:	7812      	ldrb	r2, [r2, #0]
20000074:	b252      	sxtb	r2, r2
20000076:	43d2      	mvns	r2, r2
20000078:	b252      	sxtb	r2, r2
2000007a:	2104      	movs	r1, #4
2000007c:	430a      	orrs	r2, r1
2000007e:	b252      	sxtb	r2, r2
20000080:	4013      	ands	r3, r2
20000082:	b25a      	sxtb	r2, r3
20000084:	4b03      	ldr	r3, [pc, #12]	; (20000094 <ascii_ctrl_bit_clear+0x38>)
20000086:	b2d2      	uxtb	r2, r2
20000088:	701a      	strb	r2, [r3, #0]
    
}
2000008a:	46c0      	nop			; (mov r8, r8)
2000008c:	46bd      	mov	sp, r7
2000008e:	b002      	add	sp, #8
20000090:	bd80      	pop	{r7, pc}
20000092:	46c0      	nop			; (mov r8, r8)
20000094:	40021014 	andmi	r1, r2, r4, lsl r0

20000098 <ascii_write_cmd>:

void ascii_write_cmd(unsigned char command){
20000098:	b580      	push	{r7, lr}
2000009a:	b082      	sub	sp, #8
2000009c:	af00      	add	r7, sp, #0
2000009e:	0002      	movs	r2, r0
200000a0:	1dfb      	adds	r3, r7, #7
200000a2:	701a      	strb	r2, [r3, #0]
    ascii_ctrl_bit_clear(B_RS);
200000a4:	2001      	movs	r0, #1
200000a6:	f7ff ffd9 	bl	2000005c <ascii_ctrl_bit_clear>
    ascii_ctrl_bit_clear(B_RW);
200000aa:	2002      	movs	r0, #2
200000ac:	f7ff ffd6 	bl	2000005c <ascii_ctrl_bit_clear>
    ascii_write_controller(command);
200000b0:	1dfb      	adds	r3, r7, #7
200000b2:	781b      	ldrb	r3, [r3, #0]
200000b4:	0018      	movs	r0, r3
200000b6:	f000 f819 	bl	200000ec <ascii_write_controller>
}
200000ba:	46c0      	nop			; (mov r8, r8)
200000bc:	46bd      	mov	sp, r7
200000be:	b002      	add	sp, #8
200000c0:	bd80      	pop	{r7, pc}

200000c2 <ascii_write_data>:

void ascii_write_data(unsigned char data){
200000c2:	b580      	push	{r7, lr}
200000c4:	b082      	sub	sp, #8
200000c6:	af00      	add	r7, sp, #0
200000c8:	0002      	movs	r2, r0
200000ca:	1dfb      	adds	r3, r7, #7
200000cc:	701a      	strb	r2, [r3, #0]
    ascii_ctrl_bit_set(B_RS);
200000ce:	2001      	movs	r0, #1
200000d0:	f7ff ffab 	bl	2000002a <ascii_ctrl_bit_set>
    ascii_ctrl_bit_clear(B_RW);
200000d4:	2002      	movs	r0, #2
200000d6:	f7ff ffc1 	bl	2000005c <ascii_ctrl_bit_clear>
    ascii_write_controller(data);
200000da:	1dfb      	adds	r3, r7, #7
200000dc:	781b      	ldrb	r3, [r3, #0]
200000de:	0018      	movs	r0, r3
200000e0:	f000 f804 	bl	200000ec <ascii_write_controller>
}
200000e4:	46c0      	nop			; (mov r8, r8)
200000e6:	46bd      	mov	sp, r7
200000e8:	b002      	add	sp, #8
200000ea:	bd80      	pop	{r7, pc}

200000ec <ascii_write_controller>:

void ascii_write_controller(unsigned char byte){
200000ec:	b580      	push	{r7, lr}
200000ee:	b082      	sub	sp, #8
200000f0:	af00      	add	r7, sp, #0
200000f2:	0002      	movs	r2, r0
200000f4:	1dfb      	adds	r3, r7, #7
200000f6:	701a      	strb	r2, [r3, #0]
    ascii_ctrl_bit_set(B_E);
200000f8:	2040      	movs	r0, #64	; 0x40
200000fa:	f7ff ff96 	bl	2000002a <ascii_ctrl_bit_set>
    *GPIO_E_ODR_HIGH = byte;
200000fe:	4a06      	ldr	r2, [pc, #24]	; (20000118 <ascii_write_controller+0x2c>)
20000100:	1dfb      	adds	r3, r7, #7
20000102:	781b      	ldrb	r3, [r3, #0]
20000104:	7013      	strb	r3, [r2, #0]
    delay_250ns();
20000106:	f000 ff01 	bl	20000f0c <delay_250ns>
    ascii_ctrl_bit_clear(B_E);
2000010a:	2040      	movs	r0, #64	; 0x40
2000010c:	f7ff ffa6 	bl	2000005c <ascii_ctrl_bit_clear>
}
20000110:	46c0      	nop			; (mov r8, r8)
20000112:	46bd      	mov	sp, r7
20000114:	b002      	add	sp, #8
20000116:	bd80      	pop	{r7, pc}
20000118:	40021015 	andmi	r1, r2, r5, lsl r0

2000011c <ascii_read_controller>:

unsigned char ascii_read_controller(void){
2000011c:	b580      	push	{r7, lr}
2000011e:	b082      	sub	sp, #8
20000120:	af00      	add	r7, sp, #0
    ascii_ctrl_bit_set(B_E);
20000122:	2040      	movs	r0, #64	; 0x40
20000124:	f7ff ff81 	bl	2000002a <ascii_ctrl_bit_set>
    delay_250ns();
20000128:	f000 fef0 	bl	20000f0c <delay_250ns>
    delay_250ns();
2000012c:	f000 feee 	bl	20000f0c <delay_250ns>
    char retVal = *GPIO_E_IDR_HIGH;
20000130:	4a06      	ldr	r2, [pc, #24]	; (2000014c <ascii_read_controller+0x30>)
20000132:	1dfb      	adds	r3, r7, #7
20000134:	7812      	ldrb	r2, [r2, #0]
20000136:	701a      	strb	r2, [r3, #0]
    ascii_ctrl_bit_clear(B_E);
20000138:	2040      	movs	r0, #64	; 0x40
2000013a:	f7ff ff8f 	bl	2000005c <ascii_ctrl_bit_clear>
    return retVal;
2000013e:	1dfb      	adds	r3, r7, #7
20000140:	781b      	ldrb	r3, [r3, #0]
}
20000142:	0018      	movs	r0, r3
20000144:	46bd      	mov	sp, r7
20000146:	b002      	add	sp, #8
20000148:	bd80      	pop	{r7, pc}
2000014a:	46c0      	nop			; (mov r8, r8)
2000014c:	40021011 	andmi	r1, r2, r1, lsl r0

20000150 <ascii_read_status>:

unsigned char ascii_read_status(void){
20000150:	b590      	push	{r4, r7, lr}
20000152:	b083      	sub	sp, #12
20000154:	af00      	add	r7, sp, #0
    *(GPIO_E_MODER+0x02) = 0x0000;
20000156:	4b0b      	ldr	r3, [pc, #44]	; (20000184 <ascii_read_status+0x34>)
20000158:	2200      	movs	r2, #0
2000015a:	601a      	str	r2, [r3, #0]
    ascii_ctrl_bit_clear(B_RS);
2000015c:	2001      	movs	r0, #1
2000015e:	f7ff ff7d 	bl	2000005c <ascii_ctrl_bit_clear>
    ascii_ctrl_bit_set(B_RW);
20000162:	2002      	movs	r0, #2
20000164:	f7ff ff61 	bl	2000002a <ascii_ctrl_bit_set>
    char retStat = ascii_read_controller(); 
20000168:	1dfc      	adds	r4, r7, #7
2000016a:	f7ff ffd7 	bl	2000011c <ascii_read_controller>
2000016e:	0003      	movs	r3, r0
20000170:	7023      	strb	r3, [r4, #0]
    *(GPIO_E_MODER+0x02) = 0x5555;
20000172:	4b04      	ldr	r3, [pc, #16]	; (20000184 <ascii_read_status+0x34>)
20000174:	4a04      	ldr	r2, [pc, #16]	; (20000188 <ascii_read_status+0x38>)
20000176:	601a      	str	r2, [r3, #0]
    return retStat;
20000178:	1dfb      	adds	r3, r7, #7
2000017a:	781b      	ldrb	r3, [r3, #0]
}
2000017c:	0018      	movs	r0, r3
2000017e:	46bd      	mov	sp, r7
20000180:	b003      	add	sp, #12
20000182:	bd90      	pop	{r4, r7, pc}
20000184:	40021008 	andmi	r1, r2, r8
20000188:	00005555 	andeq	r5, r0, r5, asr r5

2000018c <ascii_read_data>:

unsigned char ascii_read_data(void){
2000018c:	b590      	push	{r4, r7, lr}
2000018e:	b083      	sub	sp, #12
20000190:	af00      	add	r7, sp, #0
    *(GPIO_E_MODER+0x02) = 0x0000;
20000192:	4b0b      	ldr	r3, [pc, #44]	; (200001c0 <ascii_read_data+0x34>)
20000194:	2200      	movs	r2, #0
20000196:	601a      	str	r2, [r3, #0]
    ascii_ctrl_bit_set(B_RS);
20000198:	2001      	movs	r0, #1
2000019a:	f7ff ff46 	bl	2000002a <ascii_ctrl_bit_set>
    ascii_ctrl_bit_set(B_RW);
2000019e:	2002      	movs	r0, #2
200001a0:	f7ff ff43 	bl	2000002a <ascii_ctrl_bit_set>
    char retData = ascii_read_controller();
200001a4:	1dfc      	adds	r4, r7, #7
200001a6:	f7ff ffb9 	bl	2000011c <ascii_read_controller>
200001aa:	0003      	movs	r3, r0
200001ac:	7023      	strb	r3, [r4, #0]
    *(GPIO_E_MODER+0x02) = 0x5555;
200001ae:	4b04      	ldr	r3, [pc, #16]	; (200001c0 <ascii_read_data+0x34>)
200001b0:	4a04      	ldr	r2, [pc, #16]	; (200001c4 <ascii_read_data+0x38>)
200001b2:	601a      	str	r2, [r3, #0]
    return retData;
200001b4:	1dfb      	adds	r3, r7, #7
200001b6:	781b      	ldrb	r3, [r3, #0]
}
200001b8:	0018      	movs	r0, r3
200001ba:	46bd      	mov	sp, r7
200001bc:	b003      	add	sp, #12
200001be:	bd90      	pop	{r4, r7, pc}
200001c0:	40021008 	andmi	r1, r2, r8
200001c4:	00005555 	andeq	r5, r0, r5, asr r5

200001c8 <clear_display>:

void clear_display(){
200001c8:	b580      	push	{r7, lr}
200001ca:	af00      	add	r7, sp, #0
    while((ascii_read_status() & 0x80) == 0x80){}
200001cc:	46c0      	nop			; (mov r8, r8)
200001ce:	f7ff ffbf 	bl	20000150 <ascii_read_status>
200001d2:	0003      	movs	r3, r0
200001d4:	001a      	movs	r2, r3
200001d6:	2380      	movs	r3, #128	; 0x80
200001d8:	4013      	ands	r3, r2
200001da:	2b80      	cmp	r3, #128	; 0x80
200001dc:	d0f7      	beq.n	200001ce <clear_display+0x6>
    delay_mikro(8);
200001de:	2008      	movs	r0, #8
200001e0:	f000 febf 	bl	20000f62 <delay_mikro>
    ascii_write_cmd(1); /*clear display*/
200001e4:	2001      	movs	r0, #1
200001e6:	f7ff ff57 	bl	20000098 <ascii_write_cmd>
    delay_milli(2);
200001ea:	2002      	movs	r0, #2
200001ec:	f000 fed0 	bl	20000f90 <delay_milli>
}
200001f0:	46c0      	nop			; (mov r8, r8)
200001f2:	46bd      	mov	sp, r7
200001f4:	bd80      	pop	{r7, pc}

200001f6 <funtion_set>:

void funtion_set(){
200001f6:	b580      	push	{r7, lr}
200001f8:	af00      	add	r7, sp, #0
    while((ascii_read_status() & 0x80) == 0x80){}
200001fa:	46c0      	nop			; (mov r8, r8)
200001fc:	f7ff ffa8 	bl	20000150 <ascii_read_status>
20000200:	0003      	movs	r3, r0
20000202:	001a      	movs	r2, r3
20000204:	2380      	movs	r3, #128	; 0x80
20000206:	4013      	ands	r3, r2
20000208:	2b80      	cmp	r3, #128	; 0x80
2000020a:	d0f7      	beq.n	200001fc <funtion_set+0x6>
    delay_mikro(8);
2000020c:	2008      	movs	r0, #8
2000020e:	f000 fea8 	bl	20000f62 <delay_mikro>
    ascii_write_cmd(0x38); //0b00111000
20000212:	2038      	movs	r0, #56	; 0x38
20000214:	f7ff ff40 	bl	20000098 <ascii_write_cmd>
    delay_mikro(40);
20000218:	2028      	movs	r0, #40	; 0x28
2000021a:	f000 fea2 	bl	20000f62 <delay_mikro>
}
2000021e:	46c0      	nop			; (mov r8, r8)
20000220:	46bd      	mov	sp, r7
20000222:	bd80      	pop	{r7, pc}

20000224 <display_control>:

void display_control(){
20000224:	b580      	push	{r7, lr}
20000226:	af00      	add	r7, sp, #0
    while((ascii_read_status() & 0x80) == 0x80){}
20000228:	46c0      	nop			; (mov r8, r8)
2000022a:	f7ff ff91 	bl	20000150 <ascii_read_status>
2000022e:	0003      	movs	r3, r0
20000230:	001a      	movs	r2, r3
20000232:	2380      	movs	r3, #128	; 0x80
20000234:	4013      	ands	r3, r2
20000236:	2b80      	cmp	r3, #128	; 0x80
20000238:	d0f7      	beq.n	2000022a <display_control+0x6>
    delay_mikro(8);
2000023a:	2008      	movs	r0, #8
2000023c:	f000 fe91 	bl	20000f62 <delay_mikro>
    ascii_write_cmd(0xE);
20000240:	200e      	movs	r0, #14
20000242:	f7ff ff29 	bl	20000098 <ascii_write_cmd>
    delay_mikro(40);
20000246:	2028      	movs	r0, #40	; 0x28
20000248:	f000 fe8b 	bl	20000f62 <delay_mikro>
}
2000024c:	46c0      	nop			; (mov r8, r8)
2000024e:	46bd      	mov	sp, r7
20000250:	bd80      	pop	{r7, pc}

20000252 <entry_mode_set>:

void entry_mode_set(){
20000252:	b580      	push	{r7, lr}
20000254:	af00      	add	r7, sp, #0
    while((ascii_read_status() & 0x80) == 0x80){}
20000256:	46c0      	nop			; (mov r8, r8)
20000258:	f7ff ff7a 	bl	20000150 <ascii_read_status>
2000025c:	0003      	movs	r3, r0
2000025e:	001a      	movs	r2, r3
20000260:	2380      	movs	r3, #128	; 0x80
20000262:	4013      	ands	r3, r2
20000264:	2b80      	cmp	r3, #128	; 0x80
20000266:	d0f7      	beq.n	20000258 <entry_mode_set+0x6>
    delay_mikro(8);
20000268:	2008      	movs	r0, #8
2000026a:	f000 fe7a 	bl	20000f62 <delay_mikro>
    ascii_write_cmd(6);
2000026e:	2006      	movs	r0, #6
20000270:	f7ff ff12 	bl	20000098 <ascii_write_cmd>
    delay_mikro(40);
20000274:	2028      	movs	r0, #40	; 0x28
20000276:	f000 fe74 	bl	20000f62 <delay_mikro>
}
2000027a:	46c0      	nop			; (mov r8, r8)
2000027c:	46bd      	mov	sp, r7
2000027e:	bd80      	pop	{r7, pc}

20000280 <ascii_write_char>:

void ascii_write_char(unsigned char c){
20000280:	b580      	push	{r7, lr}
20000282:	b082      	sub	sp, #8
20000284:	af00      	add	r7, sp, #0
20000286:	0002      	movs	r2, r0
20000288:	1dfb      	adds	r3, r7, #7
2000028a:	701a      	strb	r2, [r3, #0]
    //while((ascii_read_status() & 0x80) == 0x80){} //Kommentera bort om det ska fungera...
    delay_mikro(8);
2000028c:	2008      	movs	r0, #8
2000028e:	f000 fe68 	bl	20000f62 <delay_mikro>
    ascii_write_data(c);
20000292:	1dfb      	adds	r3, r7, #7
20000294:	781b      	ldrb	r3, [r3, #0]
20000296:	0018      	movs	r0, r3
20000298:	f7ff ff13 	bl	200000c2 <ascii_write_data>
    delay_mikro(45);
2000029c:	202d      	movs	r0, #45	; 0x2d
2000029e:	f000 fe60 	bl	20000f62 <delay_mikro>
}
200002a2:	46c0      	nop			; (mov r8, r8)
200002a4:	46bd      	mov	sp, r7
200002a6:	b002      	add	sp, #8
200002a8:	bd80      	pop	{r7, pc}

200002aa <ascii_gotoxy>:

void ascii_gotoxy(int x, int y){ /**/
200002aa:	b580      	push	{r7, lr}
200002ac:	b084      	sub	sp, #16
200002ae:	af00      	add	r7, sp, #0
200002b0:	6078      	str	r0, [r7, #4]
200002b2:	6039      	str	r1, [r7, #0]
    unsigned char address;
    if(y!=1)
200002b4:	683b      	ldr	r3, [r7, #0]
200002b6:	2b01      	cmp	r3, #1
200002b8:	d006      	beq.n	200002c8 <ascii_gotoxy+0x1e>
        address = 0x40 + (x-1);
200002ba:	687b      	ldr	r3, [r7, #4]
200002bc:	b2da      	uxtb	r2, r3
200002be:	230f      	movs	r3, #15
200002c0:	18fb      	adds	r3, r7, r3
200002c2:	323f      	adds	r2, #63	; 0x3f
200002c4:	701a      	strb	r2, [r3, #0]
200002c6:	e005      	b.n	200002d4 <ascii_gotoxy+0x2a>
    else address=x-1;
200002c8:	687b      	ldr	r3, [r7, #4]
200002ca:	b2da      	uxtb	r2, r3
200002cc:	230f      	movs	r3, #15
200002ce:	18fb      	adds	r3, r7, r3
200002d0:	3a01      	subs	r2, #1
200002d2:	701a      	strb	r2, [r3, #0]
    
    ascii_write_cmd( 0x80 | address);
200002d4:	230f      	movs	r3, #15
200002d6:	18fb      	adds	r3, r7, r3
200002d8:	781b      	ldrb	r3, [r3, #0]
200002da:	2280      	movs	r2, #128	; 0x80
200002dc:	4252      	negs	r2, r2
200002de:	4313      	orrs	r3, r2
200002e0:	b2db      	uxtb	r3, r3
200002e2:	0018      	movs	r0, r3
200002e4:	f7ff fed8 	bl	20000098 <ascii_write_cmd>
    delay_mikro( 45 );
200002e8:	202d      	movs	r0, #45	; 0x2d
200002ea:	f000 fe3a 	bl	20000f62 <delay_mikro>
200002ee:	46c0      	nop			; (mov r8, r8)
200002f0:	46bd      	mov	sp, r7
200002f2:	b004      	add	sp, #16
200002f4:	bd80      	pop	{r7, pc}
200002f6:	46c0      	nop			; (mov r8, r8)

200002f8 <graphic_init>:
#include <defines.h>
#include <asciidisplay.h>
#include <graphicdisplay.h>


void graphic_init(void){
200002f8:	b580      	push	{r7, lr}
200002fa:	af00      	add	r7, sp, #0
    graphic_ctrl_bit_set(B_E);
200002fc:	2040      	movs	r0, #64	; 0x40
200002fe:	f000 f851 	bl	200003a4 <graphic_ctrl_bit_set>
    delay_mikro(10);
20000302:	200a      	movs	r0, #10
20000304:	f000 fe2d 	bl	20000f62 <delay_mikro>
    graphic_ctrl_bit_clear(B_CS1|B_CS2|B_RST|B_E);
20000308:	2078      	movs	r0, #120	; 0x78
2000030a:	f000 f823 	bl	20000354 <graphic_ctrl_bit_clear>
    delay_milli(30);
2000030e:	201e      	movs	r0, #30
20000310:	f000 fe3e 	bl	20000f90 <delay_milli>
    graphic_ctrl_bit_set(B_RST);
20000314:	2020      	movs	r0, #32
20000316:	f000 f845 	bl	200003a4 <graphic_ctrl_bit_set>
    delay_milli(100);
2000031a:	2064      	movs	r0, #100	; 0x64
2000031c:	f000 fe38 	bl	20000f90 <delay_milli>
    graphic_write_command(LCD_OFF, B_CS1|B_CS2);
20000320:	2118      	movs	r1, #24
20000322:	203e      	movs	r0, #62	; 0x3e
20000324:	f000 f942 	bl	200005ac <graphic_write_command>
    graphic_write_command(LCD_ON, B_CS1|B_CS2);
20000328:	2118      	movs	r1, #24
2000032a:	203f      	movs	r0, #63	; 0x3f
2000032c:	f000 f93e 	bl	200005ac <graphic_write_command>
    graphic_write_command(LCD_DISP_START, B_CS1|B_CS2);
20000330:	2118      	movs	r1, #24
20000332:	20c0      	movs	r0, #192	; 0xc0
20000334:	f000 f93a 	bl	200005ac <graphic_write_command>
    graphic_write_command(LCD_SET_ADD, B_CS1|B_CS2);
20000338:	2118      	movs	r1, #24
2000033a:	2040      	movs	r0, #64	; 0x40
2000033c:	f000 f936 	bl	200005ac <graphic_write_command>
    graphic_write_command(LCD_SET_PAGE, B_CS1|B_CS2);
20000340:	2118      	movs	r1, #24
20000342:	20b8      	movs	r0, #184	; 0xb8
20000344:	f000 f932 	bl	200005ac <graphic_write_command>
    select_controller(0);
20000348:	2000      	movs	r0, #0
2000034a:	f000 f84d 	bl	200003e8 <select_controller>
}
2000034e:	46c0      	nop			; (mov r8, r8)
20000350:	46bd      	mov	sp, r7
20000352:	bd80      	pop	{r7, pc}

20000354 <graphic_ctrl_bit_clear>:

void graphic_ctrl_bit_clear(uint8_t x){
20000354:	b580      	push	{r7, lr}
20000356:	b084      	sub	sp, #16
20000358:	af00      	add	r7, sp, #0
2000035a:	0002      	movs	r2, r0
2000035c:	1dfb      	adds	r3, r7, #7
2000035e:	701a      	strb	r2, [r3, #0]
    //*GPIO_E_ODR_LOW &= ( B_SELECT | ~x);
    //ascii_ctrl_bit_clear(x);
    uint8_t c;
    c =*GPIO_E_ODR_LOW;
20000360:	4a0f      	ldr	r2, [pc, #60]	; (200003a0 <graphic_ctrl_bit_clear+0x4c>)
20000362:	210f      	movs	r1, #15
20000364:	187b      	adds	r3, r7, r1
20000366:	7812      	ldrb	r2, [r2, #0]
20000368:	701a      	strb	r2, [r3, #0]
    c &= ~x;
2000036a:	1dfb      	adds	r3, r7, #7
2000036c:	781b      	ldrb	r3, [r3, #0]
2000036e:	b25b      	sxtb	r3, r3
20000370:	43db      	mvns	r3, r3
20000372:	b25b      	sxtb	r3, r3
20000374:	187a      	adds	r2, r7, r1
20000376:	7812      	ldrb	r2, [r2, #0]
20000378:	b252      	sxtb	r2, r2
2000037a:	4013      	ands	r3, r2
2000037c:	b25a      	sxtb	r2, r3
2000037e:	187b      	adds	r3, r7, r1
20000380:	701a      	strb	r2, [r3, #0]
    c &= ~B_SELECT;
20000382:	187b      	adds	r3, r7, r1
20000384:	0008      	movs	r0, r1
20000386:	187a      	adds	r2, r7, r1
20000388:	7812      	ldrb	r2, [r2, #0]
2000038a:	2104      	movs	r1, #4
2000038c:	438a      	bics	r2, r1
2000038e:	701a      	strb	r2, [r3, #0]
    *GPIO_E_ODR_LOW=c;
20000390:	4a03      	ldr	r2, [pc, #12]	; (200003a0 <graphic_ctrl_bit_clear+0x4c>)
20000392:	183b      	adds	r3, r7, r0
20000394:	781b      	ldrb	r3, [r3, #0]
20000396:	7013      	strb	r3, [r2, #0]

}
20000398:	46c0      	nop			; (mov r8, r8)
2000039a:	46bd      	mov	sp, r7
2000039c:	b004      	add	sp, #16
2000039e:	bd80      	pop	{r7, pc}
200003a0:	40021014 	andmi	r1, r2, r4, lsl r0

200003a4 <graphic_ctrl_bit_set>:

void graphic_ctrl_bit_set(uint8_t x){
200003a4:	b580      	push	{r7, lr}
200003a6:	b084      	sub	sp, #16
200003a8:	af00      	add	r7, sp, #0
200003aa:	0002      	movs	r2, r0
200003ac:	1dfb      	adds	r3, r7, #7
200003ae:	701a      	strb	r2, [r3, #0]
    //*GPIO_E_ODR_LOW |= (B_SELECT | x );
    //ascii_ctrl_bit_set(x);
    uint8_t c;
    c =*GPIO_E_ODR_LOW;
200003b0:	4a0c      	ldr	r2, [pc, #48]	; (200003e4 <graphic_ctrl_bit_set+0x40>)
200003b2:	200f      	movs	r0, #15
200003b4:	183b      	adds	r3, r7, r0
200003b6:	7812      	ldrb	r2, [r2, #0]
200003b8:	701a      	strb	r2, [r3, #0]
    c |= x; 
200003ba:	183b      	adds	r3, r7, r0
200003bc:	1839      	adds	r1, r7, r0
200003be:	1dfa      	adds	r2, r7, #7
200003c0:	7809      	ldrb	r1, [r1, #0]
200003c2:	7812      	ldrb	r2, [r2, #0]
200003c4:	430a      	orrs	r2, r1
200003c6:	701a      	strb	r2, [r3, #0]
    c &=(~B_SELECT);
200003c8:	183b      	adds	r3, r7, r0
200003ca:	183a      	adds	r2, r7, r0
200003cc:	7812      	ldrb	r2, [r2, #0]
200003ce:	2104      	movs	r1, #4
200003d0:	438a      	bics	r2, r1
200003d2:	701a      	strb	r2, [r3, #0]
    *GPIO_E_ODR_LOW= c;
200003d4:	4a03      	ldr	r2, [pc, #12]	; (200003e4 <graphic_ctrl_bit_set+0x40>)
200003d6:	183b      	adds	r3, r7, r0
200003d8:	781b      	ldrb	r3, [r3, #0]
200003da:	7013      	strb	r3, [r2, #0]
}
200003dc:	46c0      	nop			; (mov r8, r8)
200003de:	46bd      	mov	sp, r7
200003e0:	b004      	add	sp, #16
200003e2:	bd80      	pop	{r7, pc}
200003e4:	40021014 	andmi	r1, r2, r4, lsl r0

200003e8 <select_controller>:

void select_controller(uint8_t controller){
200003e8:	b580      	push	{r7, lr}
200003ea:	b082      	sub	sp, #8
200003ec:	af00      	add	r7, sp, #0
200003ee:	0002      	movs	r2, r0
200003f0:	1dfb      	adds	r3, r7, #7
200003f2:	701a      	strb	r2, [r3, #0]
    switch(controller){
200003f4:	1dfb      	adds	r3, r7, #7
200003f6:	781b      	ldrb	r3, [r3, #0]
200003f8:	2b18      	cmp	r3, #24
200003fa:	d01a      	beq.n	20000432 <select_controller+0x4a>
200003fc:	dc1d      	bgt.n	2000043a <select_controller+0x52>
200003fe:	2b10      	cmp	r3, #16
20000400:	d010      	beq.n	20000424 <select_controller+0x3c>
20000402:	dc1a      	bgt.n	2000043a <select_controller+0x52>
20000404:	2b00      	cmp	r3, #0
20000406:	d002      	beq.n	2000040e <select_controller+0x26>
20000408:	2b08      	cmp	r3, #8
2000040a:	d004      	beq.n	20000416 <select_controller+0x2e>
            
        case B_CS1 | B_CS2:
            graphic_ctrl_bit_set(B_CS1|B_CS2);
            break;
    }
}
2000040c:	e015      	b.n	2000043a <select_controller+0x52>
            graphic_ctrl_bit_clear(B_CS1|B_CS2);
2000040e:	2018      	movs	r0, #24
20000410:	f7ff ffa0 	bl	20000354 <graphic_ctrl_bit_clear>
            break;
20000414:	e011      	b.n	2000043a <select_controller+0x52>
            graphic_ctrl_bit_set(B_CS1);
20000416:	2008      	movs	r0, #8
20000418:	f7ff ffc4 	bl	200003a4 <graphic_ctrl_bit_set>
            graphic_ctrl_bit_clear(B_CS2);
2000041c:	2010      	movs	r0, #16
2000041e:	f7ff ff99 	bl	20000354 <graphic_ctrl_bit_clear>
            break;
20000422:	e00a      	b.n	2000043a <select_controller+0x52>
            graphic_ctrl_bit_clear(B_CS1);
20000424:	2008      	movs	r0, #8
20000426:	f7ff ff95 	bl	20000354 <graphic_ctrl_bit_clear>
            graphic_ctrl_bit_set(B_CS2);
2000042a:	2010      	movs	r0, #16
2000042c:	f7ff ffba 	bl	200003a4 <graphic_ctrl_bit_set>
            break;
20000430:	e003      	b.n	2000043a <select_controller+0x52>
            graphic_ctrl_bit_set(B_CS1|B_CS2);
20000432:	2018      	movs	r0, #24
20000434:	f7ff ffb6 	bl	200003a4 <graphic_ctrl_bit_set>
            break;
20000438:	46c0      	nop			; (mov r8, r8)
}
2000043a:	46c0      	nop			; (mov r8, r8)
2000043c:	46bd      	mov	sp, r7
2000043e:	b002      	add	sp, #8
20000440:	bd80      	pop	{r7, pc}

20000442 <graphic_wait_ready>:

void graphic_wait_ready(void){
20000442:	b580      	push	{r7, lr}
20000444:	af00      	add	r7, sp, #0
    graphic_ctrl_bit_clear(B_E);
20000446:	2040      	movs	r0, #64	; 0x40
20000448:	f7ff ff84 	bl	20000354 <graphic_ctrl_bit_clear>
    *GPIO_E_MODER = 0x00005555;
2000044c:	4b0a      	ldr	r3, [pc, #40]	; (20000478 <graphic_wait_ready+0x36>)
2000044e:	4a0b      	ldr	r2, [pc, #44]	; (2000047c <graphic_wait_ready+0x3a>)
20000450:	601a      	str	r2, [r3, #0]
    graphic_ctrl_bit_clear(B_RS);
20000452:	2001      	movs	r0, #1
20000454:	f7ff ff7e 	bl	20000354 <graphic_ctrl_bit_clear>
    graphic_ctrl_bit_set(B_RW);
20000458:	2002      	movs	r0, #2
2000045a:	f7ff ffa3 	bl	200003a4 <graphic_ctrl_bit_set>
    delay_500ns();
2000045e:	f000 fd77 	bl	20000f50 <delay_500ns>
    while(1){
        graphic_ctrl_bit_set(B_E);
20000462:	2040      	movs	r0, #64	; 0x40
20000464:	f7ff ff9e 	bl	200003a4 <graphic_ctrl_bit_set>
        delay_500ns();
20000468:	f000 fd72 	bl	20000f50 <delay_500ns>
        graphic_ctrl_bit_clear(B_E);
2000046c:	2040      	movs	r0, #64	; 0x40
2000046e:	f7ff ff71 	bl	20000354 <graphic_ctrl_bit_clear>
        delay_500ns();
20000472:	f000 fd6d 	bl	20000f50 <delay_500ns>
        graphic_ctrl_bit_set(B_E);
20000476:	e7f4      	b.n	20000462 <graphic_wait_ready+0x20>
20000478:	40021000 	andmi	r1, r2, r0
2000047c:	00005555 	andeq	r5, r0, r5, asr r5

20000480 <graphic_read>:
    //graphic_ctrl_bit_set(B_E); // Ej på föreläsning
    *GPIO_E_MODER = 0x55555555;
    
}

unsigned char graphic_read(unsigned char controller){
20000480:	b580      	push	{r7, lr}
20000482:	b084      	sub	sp, #16
20000484:	af00      	add	r7, sp, #0
20000486:	0002      	movs	r2, r0
20000488:	1dfb      	adds	r3, r7, #7
2000048a:	701a      	strb	r2, [r3, #0]
    graphic_ctrl_bit_clear(B_E);
2000048c:	2040      	movs	r0, #64	; 0x40
2000048e:	f7ff ff61 	bl	20000354 <graphic_ctrl_bit_clear>
    *GPIO_E_MODER = 0x00005555;
20000492:	4b1a      	ldr	r3, [pc, #104]	; (200004fc <graphic_read+0x7c>)
20000494:	4a1a      	ldr	r2, [pc, #104]	; (20000500 <graphic_read+0x80>)
20000496:	601a      	str	r2, [r3, #0]
    graphic_ctrl_bit_set(B_RS|B_RW);
20000498:	2003      	movs	r0, #3
2000049a:	f7ff ff83 	bl	200003a4 <graphic_ctrl_bit_set>
    select_controller(controller);              //EJ i Boken
2000049e:	1dfb      	adds	r3, r7, #7
200004a0:	781b      	ldrb	r3, [r3, #0]
200004a2:	0018      	movs	r0, r3
200004a4:	f7ff ffa0 	bl	200003e8 <select_controller>
    delay_500ns();
200004a8:	f000 fd52 	bl	20000f50 <delay_500ns>
    graphic_ctrl_bit_set(B_E);
200004ac:	2040      	movs	r0, #64	; 0x40
200004ae:	f7ff ff79 	bl	200003a4 <graphic_ctrl_bit_set>
    delay_500ns();
200004b2:	f000 fd4d 	bl	20000f50 <delay_500ns>
    unsigned char retval = *GPIO_E_IDR_HIGH;
200004b6:	4a13      	ldr	r2, [pc, #76]	; (20000504 <graphic_read+0x84>)
200004b8:	230f      	movs	r3, #15
200004ba:	18fb      	adds	r3, r7, r3
200004bc:	7812      	ldrb	r2, [r2, #0]
200004be:	701a      	strb	r2, [r3, #0]
    graphic_ctrl_bit_clear(B_E);
200004c0:	2040      	movs	r0, #64	; 0x40
200004c2:	f7ff ff47 	bl	20000354 <graphic_ctrl_bit_clear>
    *GPIO_E_MODER = 0x55555555;
200004c6:	4b0d      	ldr	r3, [pc, #52]	; (200004fc <graphic_read+0x7c>)
200004c8:	4a0f      	ldr	r2, [pc, #60]	; (20000508 <graphic_read+0x88>)
200004ca:	601a      	str	r2, [r3, #0]
    
    if (controller & B_CS1){
200004cc:	1dfb      	adds	r3, r7, #7
200004ce:	781b      	ldrb	r3, [r3, #0]
200004d0:	2208      	movs	r2, #8
200004d2:	4013      	ands	r3, r2
200004d4:	d002      	beq.n	200004dc <graphic_read+0x5c>
        select_controller(B_CS1);
200004d6:	2008      	movs	r0, #8
200004d8:	f7ff ff86 	bl	200003e8 <select_controller>
        //graphic_wait_ready();
    }
    if (controller & B_CS2){
200004dc:	1dfb      	adds	r3, r7, #7
200004de:	781b      	ldrb	r3, [r3, #0]
200004e0:	2210      	movs	r2, #16
200004e2:	4013      	ands	r3, r2
200004e4:	d002      	beq.n	200004ec <graphic_read+0x6c>
        select_controller(B_CS2);
200004e6:	2010      	movs	r0, #16
200004e8:	f7ff ff7e 	bl	200003e8 <select_controller>
        //graphic_wait_ready();
    }
    return retval;
200004ec:	230f      	movs	r3, #15
200004ee:	18fb      	adds	r3, r7, r3
200004f0:	781b      	ldrb	r3, [r3, #0]
}
200004f2:	0018      	movs	r0, r3
200004f4:	46bd      	mov	sp, r7
200004f6:	b004      	add	sp, #16
200004f8:	bd80      	pop	{r7, pc}
200004fa:	46c0      	nop			; (mov r8, r8)
200004fc:	40021000 	andmi	r1, r2, r0
20000500:	00005555 	andeq	r5, r0, r5, asr r5
20000504:	40021011 	andmi	r1, r2, r1, lsl r0
20000508:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

2000050c <graphic_read_data>:

uint8_t graphic_read_data(uint8_t controller){
2000050c:	b580      	push	{r7, lr}
2000050e:	b082      	sub	sp, #8
20000510:	af00      	add	r7, sp, #0
20000512:	0002      	movs	r2, r0
20000514:	1dfb      	adds	r3, r7, #7
20000516:	701a      	strb	r2, [r3, #0]
    (void) graphic_read(controller);
20000518:	1dfb      	adds	r3, r7, #7
2000051a:	781b      	ldrb	r3, [r3, #0]
2000051c:	0018      	movs	r0, r3
2000051e:	f7ff ffaf 	bl	20000480 <graphic_read>
    return graphic_read(controller);
20000522:	1dfb      	adds	r3, r7, #7
20000524:	781b      	ldrb	r3, [r3, #0]
20000526:	0018      	movs	r0, r3
20000528:	f7ff ffaa 	bl	20000480 <graphic_read>
2000052c:	0003      	movs	r3, r0
}
2000052e:	0018      	movs	r0, r3
20000530:	46bd      	mov	sp, r7
20000532:	b002      	add	sp, #8
20000534:	bd80      	pop	{r7, pc}

20000536 <graphic_write>:

void graphic_write(uint8_t value, uint8_t controller){
20000536:	b580      	push	{r7, lr}
20000538:	b082      	sub	sp, #8
2000053a:	af00      	add	r7, sp, #0
2000053c:	0002      	movs	r2, r0
2000053e:	1dfb      	adds	r3, r7, #7
20000540:	701a      	strb	r2, [r3, #0]
20000542:	1dbb      	adds	r3, r7, #6
20000544:	1c0a      	adds	r2, r1, #0
20000546:	701a      	strb	r2, [r3, #0]
    *GPIO_E_ODR_HIGH = value;
20000548:	4a17      	ldr	r2, [pc, #92]	; (200005a8 <graphic_write+0x72>)
2000054a:	1dfb      	adds	r3, r7, #7
2000054c:	781b      	ldrb	r3, [r3, #0]
2000054e:	7013      	strb	r3, [r2, #0]
    select_controller(controller);
20000550:	1dbb      	adds	r3, r7, #6
20000552:	781b      	ldrb	r3, [r3, #0]
20000554:	0018      	movs	r0, r3
20000556:	f7ff ff47 	bl	200003e8 <select_controller>
    delay_500ns();
2000055a:	f000 fcf9 	bl	20000f50 <delay_500ns>
    graphic_ctrl_bit_set(B_E);
2000055e:	2040      	movs	r0, #64	; 0x40
20000560:	f7ff ff20 	bl	200003a4 <graphic_ctrl_bit_set>
    delay_500ns();
20000564:	f000 fcf4 	bl	20000f50 <delay_500ns>
    graphic_ctrl_bit_clear(B_E);
20000568:	2040      	movs	r0, #64	; 0x40
2000056a:	f7ff fef3 	bl	20000354 <graphic_ctrl_bit_clear>
    
    if(controller & B_CS1){
2000056e:	1dbb      	adds	r3, r7, #6
20000570:	781b      	ldrb	r3, [r3, #0]
20000572:	2208      	movs	r2, #8
20000574:	4013      	ands	r3, r2
20000576:	d002      	beq.n	2000057e <graphic_write+0x48>
        select_controller(B_CS1);
20000578:	2008      	movs	r0, #8
2000057a:	f7ff ff35 	bl	200003e8 <select_controller>
        //graphic_wait_ready();
    }
    if(controller & B_CS2){
2000057e:	1dbb      	adds	r3, r7, #6
20000580:	781b      	ldrb	r3, [r3, #0]
20000582:	2210      	movs	r2, #16
20000584:	4013      	ands	r3, r2
20000586:	d002      	beq.n	2000058e <graphic_write+0x58>
        select_controller(B_CS2);
20000588:	2010      	movs	r0, #16
2000058a:	f7ff ff2d 	bl	200003e8 <select_controller>
        //graphic_wait_ready();
    }
    
    /* INTE på föreläsning*/
    *GPIO_E_ODR_HIGH = 0;
2000058e:	4b06      	ldr	r3, [pc, #24]	; (200005a8 <graphic_write+0x72>)
20000590:	2200      	movs	r2, #0
20000592:	701a      	strb	r2, [r3, #0]
    graphic_ctrl_bit_set(B_E);
20000594:	2040      	movs	r0, #64	; 0x40
20000596:	f7ff ff05 	bl	200003a4 <graphic_ctrl_bit_set>
    select_controller(0);
2000059a:	2000      	movs	r0, #0
2000059c:	f7ff ff24 	bl	200003e8 <select_controller>
      
}
200005a0:	46c0      	nop			; (mov r8, r8)
200005a2:	46bd      	mov	sp, r7
200005a4:	b002      	add	sp, #8
200005a6:	bd80      	pop	{r7, pc}
200005a8:	40021015 	andmi	r1, r2, r5, lsl r0

200005ac <graphic_write_command>:

void graphic_write_command(uint8_t cmd, uint8_t controller){
200005ac:	b580      	push	{r7, lr}
200005ae:	b082      	sub	sp, #8
200005b0:	af00      	add	r7, sp, #0
200005b2:	0002      	movs	r2, r0
200005b4:	1dfb      	adds	r3, r7, #7
200005b6:	701a      	strb	r2, [r3, #0]
200005b8:	1dbb      	adds	r3, r7, #6
200005ba:	1c0a      	adds	r2, r1, #0
200005bc:	701a      	strb	r2, [r3, #0]
    graphic_ctrl_bit_clear(B_E);
200005be:	2040      	movs	r0, #64	; 0x40
200005c0:	f7ff fec8 	bl	20000354 <graphic_ctrl_bit_clear>
    select_controller(controller);
200005c4:	1dbb      	adds	r3, r7, #6
200005c6:	781b      	ldrb	r3, [r3, #0]
200005c8:	0018      	movs	r0, r3
200005ca:	f7ff ff0d 	bl	200003e8 <select_controller>
    graphic_ctrl_bit_clear(B_RS);
200005ce:	2001      	movs	r0, #1
200005d0:	f7ff fec0 	bl	20000354 <graphic_ctrl_bit_clear>
    graphic_ctrl_bit_clear(B_RW);
200005d4:	2002      	movs	r0, #2
200005d6:	f7ff febd 	bl	20000354 <graphic_ctrl_bit_clear>
    graphic_write(cmd, controller);
200005da:	1dbb      	adds	r3, r7, #6
200005dc:	781a      	ldrb	r2, [r3, #0]
200005de:	1dfb      	adds	r3, r7, #7
200005e0:	781b      	ldrb	r3, [r3, #0]
200005e2:	0011      	movs	r1, r2
200005e4:	0018      	movs	r0, r3
200005e6:	f7ff ffa6 	bl	20000536 <graphic_write>
}
200005ea:	46c0      	nop			; (mov r8, r8)
200005ec:	46bd      	mov	sp, r7
200005ee:	b002      	add	sp, #8
200005f0:	bd80      	pop	{r7, pc}

200005f2 <graphic_write_data>:

void graphic_write_data(uint8_t data, uint8_t controller){
200005f2:	b580      	push	{r7, lr}
200005f4:	b082      	sub	sp, #8
200005f6:	af00      	add	r7, sp, #0
200005f8:	0002      	movs	r2, r0
200005fa:	1dfb      	adds	r3, r7, #7
200005fc:	701a      	strb	r2, [r3, #0]
200005fe:	1dbb      	adds	r3, r7, #6
20000600:	1c0a      	adds	r2, r1, #0
20000602:	701a      	strb	r2, [r3, #0]
    graphic_ctrl_bit_clear(B_E);
20000604:	2040      	movs	r0, #64	; 0x40
20000606:	f7ff fea5 	bl	20000354 <graphic_ctrl_bit_clear>
    select_controller(controller);
2000060a:	1dbb      	adds	r3, r7, #6
2000060c:	781b      	ldrb	r3, [r3, #0]
2000060e:	0018      	movs	r0, r3
20000610:	f7ff feea 	bl	200003e8 <select_controller>
    graphic_ctrl_bit_set(B_RS);
20000614:	2001      	movs	r0, #1
20000616:	f7ff fec5 	bl	200003a4 <graphic_ctrl_bit_set>
    graphic_ctrl_bit_clear(B_RW);
2000061a:	2002      	movs	r0, #2
2000061c:	f7ff fe9a 	bl	20000354 <graphic_ctrl_bit_clear>
    graphic_write(data, controller);
20000620:	1dbb      	adds	r3, r7, #6
20000622:	781a      	ldrb	r2, [r3, #0]
20000624:	1dfb      	adds	r3, r7, #7
20000626:	781b      	ldrb	r3, [r3, #0]
20000628:	0011      	movs	r1, r2
2000062a:	0018      	movs	r0, r3
2000062c:	f7ff ff83 	bl	20000536 <graphic_write>
}
20000630:	46c0      	nop			; (mov r8, r8)
20000632:	46bd      	mov	sp, r7
20000634:	b002      	add	sp, #8
20000636:	bd80      	pop	{r7, pc}

20000638 <graphic_clear_screen>:

void graphic_clear_screen(void){
20000638:	b580      	push	{r7, lr}
2000063a:	b082      	sub	sp, #8
2000063c:	af00      	add	r7, sp, #0
    for (int page = 0; page < 8; page++){
2000063e:	2300      	movs	r3, #0
20000640:	607b      	str	r3, [r7, #4]
20000642:	e01e      	b.n	20000682 <graphic_clear_screen+0x4a>
        graphic_write_command(LCD_SET_PAGE | page, B_CS1|B_CS2);
20000644:	687b      	ldr	r3, [r7, #4]
20000646:	b25b      	sxtb	r3, r3
20000648:	2248      	movs	r2, #72	; 0x48
2000064a:	4252      	negs	r2, r2
2000064c:	4313      	orrs	r3, r2
2000064e:	b25b      	sxtb	r3, r3
20000650:	b2db      	uxtb	r3, r3
20000652:	2118      	movs	r1, #24
20000654:	0018      	movs	r0, r3
20000656:	f7ff ffa9 	bl	200005ac <graphic_write_command>
        graphic_write_command(LCD_SET_ADD | 0, B_CS1|B_CS2);
2000065a:	2118      	movs	r1, #24
2000065c:	2040      	movs	r0, #64	; 0x40
2000065e:	f7ff ffa5 	bl	200005ac <graphic_write_command>
        for (int add = 0; add < 63; add++){
20000662:	2300      	movs	r3, #0
20000664:	603b      	str	r3, [r7, #0]
20000666:	e006      	b.n	20000676 <graphic_clear_screen+0x3e>
            graphic_write_data(0, B_CS1|B_CS2);
20000668:	2118      	movs	r1, #24
2000066a:	2000      	movs	r0, #0
2000066c:	f7ff ffc1 	bl	200005f2 <graphic_write_data>
        for (int add = 0; add < 63; add++){
20000670:	683b      	ldr	r3, [r7, #0]
20000672:	3301      	adds	r3, #1
20000674:	603b      	str	r3, [r7, #0]
20000676:	683b      	ldr	r3, [r7, #0]
20000678:	2b3e      	cmp	r3, #62	; 0x3e
2000067a:	ddf5      	ble.n	20000668 <graphic_clear_screen+0x30>
    for (int page = 0; page < 8; page++){
2000067c:	687b      	ldr	r3, [r7, #4]
2000067e:	3301      	adds	r3, #1
20000680:	607b      	str	r3, [r7, #4]
20000682:	687b      	ldr	r3, [r7, #4]
20000684:	2b07      	cmp	r3, #7
20000686:	dddd      	ble.n	20000644 <graphic_clear_screen+0xc>
        }
    }
}
20000688:	46c0      	nop			; (mov r8, r8)
2000068a:	46c0      	nop			; (mov r8, r8)
2000068c:	46bd      	mov	sp, r7
2000068e:	b002      	add	sp, #8
20000690:	bd80      	pop	{r7, pc}

20000692 <clear_backbuffer>:

void clear_backbuffer(){
20000692:	b580      	push	{r7, lr}
20000694:	b082      	sub	sp, #8
20000696:	af00      	add	r7, sp, #0
    int i;
    for (i = 0; i < 1024; i++)
20000698:	2300      	movs	r3, #0
2000069a:	607b      	str	r3, [r7, #4]
2000069c:	e007      	b.n	200006ae <clear_backbuffer+0x1c>
        backBuffer[i] = 0;
2000069e:	4b09      	ldr	r3, [pc, #36]	; (200006c4 <clear_backbuffer+0x32>)
200006a0:	687a      	ldr	r2, [r7, #4]
200006a2:	0092      	lsls	r2, r2, #2
200006a4:	2100      	movs	r1, #0
200006a6:	50d1      	str	r1, [r2, r3]
    for (i = 0; i < 1024; i++)
200006a8:	687b      	ldr	r3, [r7, #4]
200006aa:	3301      	adds	r3, #1
200006ac:	607b      	str	r3, [r7, #4]
200006ae:	687a      	ldr	r2, [r7, #4]
200006b0:	2380      	movs	r3, #128	; 0x80
200006b2:	00db      	lsls	r3, r3, #3
200006b4:	429a      	cmp	r2, r3
200006b6:	dbf2      	blt.n	2000069e <clear_backbuffer+0xc>
}
200006b8:	46c0      	nop			; (mov r8, r8)
200006ba:	46c0      	nop			; (mov r8, r8)
200006bc:	46bd      	mov	sp, r7
200006be:	b002      	add	sp, #8
200006c0:	bd80      	pop	{r7, pc}
200006c2:	46c0      	nop			; (mov r8, r8)
200006c4:	200011e4 	andcs	r1, r0, r4, ror #3

200006c8 <pixel>:

void pixel(unsigned x, unsigned y){
200006c8:	b580      	push	{r7, lr}
200006ca:	b084      	sub	sp, #16
200006cc:	af00      	add	r7, sp, #0
200006ce:	6078      	str	r0, [r7, #4]
200006d0:	6039      	str	r1, [r7, #0]
    uint8_t mask;
    int index = 0;
200006d2:	2300      	movs	r3, #0
200006d4:	60fb      	str	r3, [r7, #12]
    if ((x >128)||(x <1)||(y >64)||(y <1)) return;
200006d6:	687b      	ldr	r3, [r7, #4]
200006d8:	2b80      	cmp	r3, #128	; 0x80
200006da:	d831      	bhi.n	20000740 <pixel+0x78>
200006dc:	687b      	ldr	r3, [r7, #4]
200006de:	2b00      	cmp	r3, #0
200006e0:	d02e      	beq.n	20000740 <pixel+0x78>
200006e2:	683b      	ldr	r3, [r7, #0]
200006e4:	2b40      	cmp	r3, #64	; 0x40
200006e6:	d82b      	bhi.n	20000740 <pixel+0x78>
200006e8:	683b      	ldr	r3, [r7, #0]
200006ea:	2b00      	cmp	r3, #0
200006ec:	d028      	beq.n	20000740 <pixel+0x78>

    mask = 1 << ((y-1)%8);
200006ee:	683b      	ldr	r3, [r7, #0]
200006f0:	3b01      	subs	r3, #1
200006f2:	2207      	movs	r2, #7
200006f4:	4013      	ands	r3, r2
200006f6:	2201      	movs	r2, #1
200006f8:	409a      	lsls	r2, r3
200006fa:	230b      	movs	r3, #11
200006fc:	18fb      	adds	r3, r7, r3
200006fe:	701a      	strb	r2, [r3, #0]
    
    if(x > 64){
20000700:	687b      	ldr	r3, [r7, #4]
20000702:	2b40      	cmp	r3, #64	; 0x40
20000704:	d905      	bls.n	20000712 <pixel+0x4a>
        x -= 65;
20000706:	687b      	ldr	r3, [r7, #4]
20000708:	3b41      	subs	r3, #65	; 0x41
2000070a:	607b      	str	r3, [r7, #4]
        index = 512;
2000070c:	2380      	movs	r3, #128	; 0x80
2000070e:	009b      	lsls	r3, r3, #2
20000710:	60fb      	str	r3, [r7, #12]
    }
    
    index += x + ((y-1)/8)*64;
20000712:	683b      	ldr	r3, [r7, #0]
20000714:	3b01      	subs	r3, #1
20000716:	08db      	lsrs	r3, r3, #3
20000718:	019a      	lsls	r2, r3, #6
2000071a:	687b      	ldr	r3, [r7, #4]
2000071c:	18d2      	adds	r2, r2, r3
2000071e:	68fb      	ldr	r3, [r7, #12]
20000720:	18d3      	adds	r3, r2, r3
20000722:	60fb      	str	r3, [r7, #12]
    
    backBuffer[index] |= mask;
20000724:	4b08      	ldr	r3, [pc, #32]	; (20000748 <pixel+0x80>)
20000726:	68fa      	ldr	r2, [r7, #12]
20000728:	0092      	lsls	r2, r2, #2
2000072a:	58d2      	ldr	r2, [r2, r3]
2000072c:	230b      	movs	r3, #11
2000072e:	18fb      	adds	r3, r7, r3
20000730:	781b      	ldrb	r3, [r3, #0]
20000732:	431a      	orrs	r2, r3
20000734:	0011      	movs	r1, r2
20000736:	4b04      	ldr	r3, [pc, #16]	; (20000748 <pixel+0x80>)
20000738:	68fa      	ldr	r2, [r7, #12]
2000073a:	0092      	lsls	r2, r2, #2
2000073c:	50d1      	str	r1, [r2, r3]
2000073e:	e000      	b.n	20000742 <pixel+0x7a>
    if ((x >128)||(x <1)||(y >64)||(y <1)) return;
20000740:	46c0      	nop			; (mov r8, r8)
}
20000742:	46bd      	mov	sp, r7
20000744:	b004      	add	sp, #16
20000746:	bd80      	pop	{r7, pc}
20000748:	200011e4 	andcs	r1, r0, r4, ror #3

2000074c <graphic_draw_screen>:

void graphic_draw_screen(void){
2000074c:	b580      	push	{r7, lr}
2000074e:	b084      	sub	sp, #16
20000750:	af00      	add	r7, sp, #0
    uint8_t i,  j, controller, c;
    unsigned int k = 0;
20000752:	2300      	movs	r3, #0
20000754:	60bb      	str	r3, [r7, #8]
    
    for (c = 0; c < 2; c++){
20000756:	230d      	movs	r3, #13
20000758:	18fb      	adds	r3, r7, r3
2000075a:	2200      	movs	r2, #0
2000075c:	701a      	strb	r2, [r3, #0]
2000075e:	e050      	b.n	20000802 <graphic_draw_screen+0xb6>
        controller = (c==0) ? B_CS1 : B_CS2;
20000760:	230d      	movs	r3, #13
20000762:	18fb      	adds	r3, r7, r3
20000764:	781b      	ldrb	r3, [r3, #0]
20000766:	2b00      	cmp	r3, #0
20000768:	d101      	bne.n	2000076e <graphic_draw_screen+0x22>
2000076a:	2208      	movs	r2, #8
2000076c:	e000      	b.n	20000770 <graphic_draw_screen+0x24>
2000076e:	2210      	movs	r2, #16
20000770:	1dfb      	adds	r3, r7, #7
20000772:	701a      	strb	r2, [r3, #0]
        for (j = 0; j < 8; j++){
20000774:	230e      	movs	r3, #14
20000776:	18fb      	adds	r3, r7, r3
20000778:	2200      	movs	r2, #0
2000077a:	701a      	strb	r2, [r3, #0]
2000077c:	e036      	b.n	200007ec <graphic_draw_screen+0xa0>
            graphic_write_command(LCD_SET_PAGE | j, controller);
2000077e:	230e      	movs	r3, #14
20000780:	18fb      	adds	r3, r7, r3
20000782:	781b      	ldrb	r3, [r3, #0]
20000784:	2248      	movs	r2, #72	; 0x48
20000786:	4252      	negs	r2, r2
20000788:	4313      	orrs	r3, r2
2000078a:	b2da      	uxtb	r2, r3
2000078c:	1dfb      	adds	r3, r7, #7
2000078e:	781b      	ldrb	r3, [r3, #0]
20000790:	0019      	movs	r1, r3
20000792:	0010      	movs	r0, r2
20000794:	f7ff ff0a 	bl	200005ac <graphic_write_command>
            graphic_write_command(LCD_SET_ADD | 0, controller);
20000798:	1dfb      	adds	r3, r7, #7
2000079a:	781b      	ldrb	r3, [r3, #0]
2000079c:	0019      	movs	r1, r3
2000079e:	2040      	movs	r0, #64	; 0x40
200007a0:	f7ff ff04 	bl	200005ac <graphic_write_command>
            for(i = 0; i <= 63; i++, k++){
200007a4:	230f      	movs	r3, #15
200007a6:	18fb      	adds	r3, r7, r3
200007a8:	2200      	movs	r2, #0
200007aa:	701a      	strb	r2, [r3, #0]
200007ac:	e013      	b.n	200007d6 <graphic_draw_screen+0x8a>
                graphic_write_data(backBuffer[k],controller);  
200007ae:	4b1a      	ldr	r3, [pc, #104]	; (20000818 <graphic_draw_screen+0xcc>)
200007b0:	68ba      	ldr	r2, [r7, #8]
200007b2:	0092      	lsls	r2, r2, #2
200007b4:	58d3      	ldr	r3, [r2, r3]
200007b6:	b2da      	uxtb	r2, r3
200007b8:	1dfb      	adds	r3, r7, #7
200007ba:	781b      	ldrb	r3, [r3, #0]
200007bc:	0019      	movs	r1, r3
200007be:	0010      	movs	r0, r2
200007c0:	f7ff ff17 	bl	200005f2 <graphic_write_data>
            for(i = 0; i <= 63; i++, k++){
200007c4:	210f      	movs	r1, #15
200007c6:	187b      	adds	r3, r7, r1
200007c8:	781a      	ldrb	r2, [r3, #0]
200007ca:	187b      	adds	r3, r7, r1
200007cc:	3201      	adds	r2, #1
200007ce:	701a      	strb	r2, [r3, #0]
200007d0:	68bb      	ldr	r3, [r7, #8]
200007d2:	3301      	adds	r3, #1
200007d4:	60bb      	str	r3, [r7, #8]
200007d6:	230f      	movs	r3, #15
200007d8:	18fb      	adds	r3, r7, r3
200007da:	781b      	ldrb	r3, [r3, #0]
200007dc:	2b3f      	cmp	r3, #63	; 0x3f
200007de:	d9e6      	bls.n	200007ae <graphic_draw_screen+0x62>
        for (j = 0; j < 8; j++){
200007e0:	210e      	movs	r1, #14
200007e2:	187b      	adds	r3, r7, r1
200007e4:	781a      	ldrb	r2, [r3, #0]
200007e6:	187b      	adds	r3, r7, r1
200007e8:	3201      	adds	r2, #1
200007ea:	701a      	strb	r2, [r3, #0]
200007ec:	230e      	movs	r3, #14
200007ee:	18fb      	adds	r3, r7, r3
200007f0:	781b      	ldrb	r3, [r3, #0]
200007f2:	2b07      	cmp	r3, #7
200007f4:	d9c3      	bls.n	2000077e <graphic_draw_screen+0x32>
    for (c = 0; c < 2; c++){
200007f6:	210d      	movs	r1, #13
200007f8:	187b      	adds	r3, r7, r1
200007fa:	781a      	ldrb	r2, [r3, #0]
200007fc:	187b      	adds	r3, r7, r1
200007fe:	3201      	adds	r2, #1
20000800:	701a      	strb	r2, [r3, #0]
20000802:	230d      	movs	r3, #13
20000804:	18fb      	adds	r3, r7, r3
20000806:	781b      	ldrb	r3, [r3, #0]
20000808:	2b01      	cmp	r3, #1
2000080a:	d9a9      	bls.n	20000760 <graphic_draw_screen+0x14>
            }
        }
    }
}
2000080c:	46c0      	nop			; (mov r8, r8)
2000080e:	46c0      	nop			; (mov r8, r8)
20000810:	46bd      	mov	sp, r7
20000812:	b004      	add	sp, #16
20000814:	bd80      	pop	{r7, pc}
20000816:	46c0      	nop			; (mov r8, r8)
20000818:	200011e4 	andcs	r1, r0, r4, ror #3

2000081c <set_object_speed>:

void set_object_speed(POBJECT o, int speedx, int speedy){
2000081c:	b580      	push	{r7, lr}
2000081e:	b084      	sub	sp, #16
20000820:	af00      	add	r7, sp, #0
20000822:	60f8      	str	r0, [r7, #12]
20000824:	60b9      	str	r1, [r7, #8]
20000826:	607a      	str	r2, [r7, #4]
    o->dirx = speedx;
20000828:	68fb      	ldr	r3, [r7, #12]
2000082a:	68ba      	ldr	r2, [r7, #8]
2000082c:	605a      	str	r2, [r3, #4]
    o->diry = speedy;
2000082e:	68fb      	ldr	r3, [r7, #12]
20000830:	687a      	ldr	r2, [r7, #4]
20000832:	609a      	str	r2, [r3, #8]
}
20000834:	46c0      	nop			; (mov r8, r8)
20000836:	46bd      	mov	sp, r7
20000838:	b004      	add	sp, #16
2000083a:	bd80      	pop	{r7, pc}

2000083c <draw_object>:

void draw_object(POBJECT o){
2000083c:	b580      	push	{r7, lr}
2000083e:	b084      	sub	sp, #16
20000840:	af00      	add	r7, sp, #0
20000842:	6078      	str	r0, [r7, #4]
    for (int i = 0; i<o->geo->numpoints; i++)
20000844:	2300      	movs	r3, #0
20000846:	60fb      	str	r3, [r7, #12]
20000848:	e01e      	b.n	20000888 <draw_object+0x4c>
        pixel(o->geo->px[i].x+o->posx,o->geo->px[i].y+o->posy);
2000084a:	687b      	ldr	r3, [r7, #4]
2000084c:	681a      	ldr	r2, [r3, #0]
2000084e:	68fb      	ldr	r3, [r7, #12]
20000850:	3304      	adds	r3, #4
20000852:	005b      	lsls	r3, r3, #1
20000854:	18d3      	adds	r3, r2, r3
20000856:	3304      	adds	r3, #4
20000858:	781b      	ldrb	r3, [r3, #0]
2000085a:	001a      	movs	r2, r3
2000085c:	687b      	ldr	r3, [r7, #4]
2000085e:	68db      	ldr	r3, [r3, #12]
20000860:	18d3      	adds	r3, r2, r3
20000862:	0018      	movs	r0, r3
20000864:	687b      	ldr	r3, [r7, #4]
20000866:	681a      	ldr	r2, [r3, #0]
20000868:	68fb      	ldr	r3, [r7, #12]
2000086a:	3304      	adds	r3, #4
2000086c:	005b      	lsls	r3, r3, #1
2000086e:	18d3      	adds	r3, r2, r3
20000870:	3305      	adds	r3, #5
20000872:	781b      	ldrb	r3, [r3, #0]
20000874:	001a      	movs	r2, r3
20000876:	687b      	ldr	r3, [r7, #4]
20000878:	691b      	ldr	r3, [r3, #16]
2000087a:	18d3      	adds	r3, r2, r3
2000087c:	0019      	movs	r1, r3
2000087e:	f7ff ff23 	bl	200006c8 <pixel>
    for (int i = 0; i<o->geo->numpoints; i++)
20000882:	68fb      	ldr	r3, [r7, #12]
20000884:	3301      	adds	r3, #1
20000886:	60fb      	str	r3, [r7, #12]
20000888:	687b      	ldr	r3, [r7, #4]
2000088a:	681b      	ldr	r3, [r3, #0]
2000088c:	681b      	ldr	r3, [r3, #0]
2000088e:	68fa      	ldr	r2, [r7, #12]
20000890:	429a      	cmp	r2, r3
20000892:	dbda      	blt.n	2000084a <draw_object+0xe>
        
}
20000894:	46c0      	nop			; (mov r8, r8)
20000896:	46c0      	nop			; (mov r8, r8)
20000898:	46bd      	mov	sp, r7
2000089a:	b004      	add	sp, #16
2000089c:	bd80      	pop	{r7, pc}

2000089e <clear_object>:

void clear_object(POBJECT o){
2000089e:	b580      	push	{r7, lr}
200008a0:	b084      	sub	sp, #16
200008a2:	af00      	add	r7, sp, #0
200008a4:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < o->geo->numpoints; i++)
200008a6:	2300      	movs	r3, #0
200008a8:	60fb      	str	r3, [r7, #12]
200008aa:	e01e      	b.n	200008ea <clear_object+0x4c>
        pixel(o->geo->px[i].x+o->posx,o->geo->px[i].y+o->posy);
200008ac:	687b      	ldr	r3, [r7, #4]
200008ae:	681a      	ldr	r2, [r3, #0]
200008b0:	68fb      	ldr	r3, [r7, #12]
200008b2:	3304      	adds	r3, #4
200008b4:	005b      	lsls	r3, r3, #1
200008b6:	18d3      	adds	r3, r2, r3
200008b8:	3304      	adds	r3, #4
200008ba:	781b      	ldrb	r3, [r3, #0]
200008bc:	001a      	movs	r2, r3
200008be:	687b      	ldr	r3, [r7, #4]
200008c0:	68db      	ldr	r3, [r3, #12]
200008c2:	18d3      	adds	r3, r2, r3
200008c4:	0018      	movs	r0, r3
200008c6:	687b      	ldr	r3, [r7, #4]
200008c8:	681a      	ldr	r2, [r3, #0]
200008ca:	68fb      	ldr	r3, [r7, #12]
200008cc:	3304      	adds	r3, #4
200008ce:	005b      	lsls	r3, r3, #1
200008d0:	18d3      	adds	r3, r2, r3
200008d2:	3305      	adds	r3, #5
200008d4:	781b      	ldrb	r3, [r3, #0]
200008d6:	001a      	movs	r2, r3
200008d8:	687b      	ldr	r3, [r7, #4]
200008da:	691b      	ldr	r3, [r3, #16]
200008dc:	18d3      	adds	r3, r2, r3
200008de:	0019      	movs	r1, r3
200008e0:	f7ff fef2 	bl	200006c8 <pixel>
    for (int i = 0; i < o->geo->numpoints; i++)
200008e4:	68fb      	ldr	r3, [r7, #12]
200008e6:	3301      	adds	r3, #1
200008e8:	60fb      	str	r3, [r7, #12]
200008ea:	687b      	ldr	r3, [r7, #4]
200008ec:	681b      	ldr	r3, [r3, #0]
200008ee:	681b      	ldr	r3, [r3, #0]
200008f0:	68fa      	ldr	r2, [r7, #12]
200008f2:	429a      	cmp	r2, r3
200008f4:	dbda      	blt.n	200008ac <clear_object+0xe>
        
}
200008f6:	46c0      	nop			; (mov r8, r8)
200008f8:	46c0      	nop			; (mov r8, r8)
200008fa:	46bd      	mov	sp, r7
200008fc:	b004      	add	sp, #16
200008fe:	bd80      	pop	{r7, pc}

20000900 <move_object>:

void move_object(POBJECT o){
20000900:	b580      	push	{r7, lr}
20000902:	b082      	sub	sp, #8
20000904:	af00      	add	r7, sp, #0
20000906:	6078      	str	r0, [r7, #4]
    //clear_object(o);
    
    o->posx = o->posx + o->dirx;
20000908:	687b      	ldr	r3, [r7, #4]
2000090a:	68da      	ldr	r2, [r3, #12]
2000090c:	687b      	ldr	r3, [r7, #4]
2000090e:	685b      	ldr	r3, [r3, #4]
20000910:	18d2      	adds	r2, r2, r3
20000912:	687b      	ldr	r3, [r7, #4]
20000914:	60da      	str	r2, [r3, #12]
    o->posy = o->posy + o->diry;
20000916:	687b      	ldr	r3, [r7, #4]
20000918:	691a      	ldr	r2, [r3, #16]
2000091a:	687b      	ldr	r3, [r7, #4]
2000091c:	689b      	ldr	r3, [r3, #8]
2000091e:	18d2      	adds	r2, r2, r3
20000920:	687b      	ldr	r3, [r7, #4]
20000922:	611a      	str	r2, [r3, #16]
    
    /*Position static if direction makes ball go out of bounds*/
    //Bounce left wall
    if((o->posx+o->dirx)<1){
20000924:	687b      	ldr	r3, [r7, #4]
20000926:	68da      	ldr	r2, [r3, #12]
20000928:	687b      	ldr	r3, [r7, #4]
2000092a:	685b      	ldr	r3, [r3, #4]
2000092c:	18d3      	adds	r3, r2, r3
2000092e:	2b00      	cmp	r3, #0
20000930:	dc07      	bgt.n	20000942 <move_object+0x42>
        o->dirx *= -1;
20000932:	687b      	ldr	r3, [r7, #4]
20000934:	685b      	ldr	r3, [r3, #4]
20000936:	425a      	negs	r2, r3
20000938:	687b      	ldr	r3, [r7, #4]
2000093a:	605a      	str	r2, [r3, #4]
        o->posx = 1;
2000093c:	687b      	ldr	r3, [r7, #4]
2000093e:	2201      	movs	r2, #1
20000940:	60da      	str	r2, [r3, #12]
    }
    //Bounce right wall
    if((o->posx+o->dirx)>128){
20000942:	687b      	ldr	r3, [r7, #4]
20000944:	68da      	ldr	r2, [r3, #12]
20000946:	687b      	ldr	r3, [r7, #4]
20000948:	685b      	ldr	r3, [r3, #4]
2000094a:	18d3      	adds	r3, r2, r3
2000094c:	2b80      	cmp	r3, #128	; 0x80
2000094e:	dd07      	ble.n	20000960 <move_object+0x60>
        o->dirx *= -1;
20000950:	687b      	ldr	r3, [r7, #4]
20000952:	685b      	ldr	r3, [r3, #4]
20000954:	425a      	negs	r2, r3
20000956:	687b      	ldr	r3, [r7, #4]
20000958:	605a      	str	r2, [r3, #4]
        o->posx=127;
2000095a:	687b      	ldr	r3, [r7, #4]
2000095c:	227f      	movs	r2, #127	; 0x7f
2000095e:	60da      	str	r2, [r3, #12]
    }
    //bounce upper wall
    if((o->posy+o->diry)<1){
20000960:	687b      	ldr	r3, [r7, #4]
20000962:	691a      	ldr	r2, [r3, #16]
20000964:	687b      	ldr	r3, [r7, #4]
20000966:	689b      	ldr	r3, [r3, #8]
20000968:	18d3      	adds	r3, r2, r3
2000096a:	2b00      	cmp	r3, #0
2000096c:	dc07      	bgt.n	2000097e <move_object+0x7e>
        o->diry *= -1;
2000096e:	687b      	ldr	r3, [r7, #4]
20000970:	689b      	ldr	r3, [r3, #8]
20000972:	425a      	negs	r2, r3
20000974:	687b      	ldr	r3, [r7, #4]
20000976:	609a      	str	r2, [r3, #8]
        o->posy = 1;
20000978:	687b      	ldr	r3, [r7, #4]
2000097a:	2201      	movs	r2, #1
2000097c:	611a      	str	r2, [r3, #16]
    }
    //bounce lower wall
    if((o->posy+o->diry)>64){
2000097e:	687b      	ldr	r3, [r7, #4]
20000980:	691a      	ldr	r2, [r3, #16]
20000982:	687b      	ldr	r3, [r7, #4]
20000984:	689b      	ldr	r3, [r3, #8]
20000986:	18d3      	adds	r3, r2, r3
20000988:	2b40      	cmp	r3, #64	; 0x40
2000098a:	dd07      	ble.n	2000099c <move_object+0x9c>
        o->diry *= -1;
2000098c:	687b      	ldr	r3, [r7, #4]
2000098e:	689b      	ldr	r3, [r3, #8]
20000990:	425a      	negs	r2, r3
20000992:	687b      	ldr	r3, [r7, #4]
20000994:	609a      	str	r2, [r3, #8]
        o->posy = 63;
20000996:	687b      	ldr	r3, [r7, #4]
20000998:	223f      	movs	r2, #63	; 0x3f
2000099a:	611a      	str	r2, [r3, #16]
    }
    draw_object(o);
2000099c:	687b      	ldr	r3, [r7, #4]
2000099e:	0018      	movs	r0, r3
200009a0:	f7ff ff4c 	bl	2000083c <draw_object>
}
200009a4:	46c0      	nop			; (mov r8, r8)
200009a6:	46bd      	mov	sp, r7
200009a8:	b002      	add	sp, #8
200009aa:	bd80      	pop	{r7, pc}

200009ac <load_sprite>:
    clear_object,
    move_object,
    set_object_speed
};

static void load_sprite(sprite* s, unsigned char* data, int width, int height){
200009ac:	b580      	push	{r7, lr}
200009ae:	b084      	sub	sp, #16
200009b0:	af00      	add	r7, sp, #0
200009b2:	60f8      	str	r0, [r7, #12]
200009b4:	60b9      	str	r1, [r7, #8]
200009b6:	607a      	str	r2, [r7, #4]
200009b8:	603b      	str	r3, [r7, #0]
    s->width = width;
200009ba:	687b      	ldr	r3, [r7, #4]
200009bc:	b2da      	uxtb	r2, r3
200009be:	68fb      	ldr	r3, [r7, #12]
200009c0:	701a      	strb	r2, [r3, #0]
    s->height = height;
200009c2:	683b      	ldr	r3, [r7, #0]
200009c4:	b2da      	uxtb	r2, r3
200009c6:	68fb      	ldr	r3, [r7, #12]
200009c8:	705a      	strb	r2, [r3, #1]
    s->data = data;
200009ca:	68fb      	ldr	r3, [r7, #12]
200009cc:	68ba      	ldr	r2, [r7, #8]
200009ce:	605a      	str	r2, [r3, #4]
}
200009d0:	46c0      	nop			; (mov r8, r8)
200009d2:	46bd      	mov	sp, r7
200009d4:	b004      	add	sp, #16
200009d6:	bd80      	pop	{r7, pc}

200009d8 <draw_sprite>:

void draw_sprite(sprite* s, int x, int y){
200009d8:	b580      	push	{r7, lr}
200009da:	b08a      	sub	sp, #40	; 0x28
200009dc:	af00      	add	r7, sp, #0
200009de:	60f8      	str	r0, [r7, #12]
200009e0:	60b9      	str	r1, [r7, #8]
200009e2:	607a      	str	r2, [r7, #4]
    int i,j,k, width_in_bytes;
    
    if(s->width % 8 == 0){
200009e4:	68fb      	ldr	r3, [r7, #12]
200009e6:	781b      	ldrb	r3, [r3, #0]
200009e8:	2207      	movs	r2, #7
200009ea:	4013      	ands	r3, r2
200009ec:	b2db      	uxtb	r3, r3
200009ee:	2b00      	cmp	r3, #0
200009f0:	d105      	bne.n	200009fe <draw_sprite+0x26>
        width_in_bytes = s->width/8;
200009f2:	68fb      	ldr	r3, [r7, #12]
200009f4:	781b      	ldrb	r3, [r3, #0]
200009f6:	08db      	lsrs	r3, r3, #3
200009f8:	b2db      	uxtb	r3, r3
200009fa:	61bb      	str	r3, [r7, #24]
200009fc:	e005      	b.n	20000a0a <draw_sprite+0x32>
    }else{
        width_in_bytes = s->width/8 + 1;
200009fe:	68fb      	ldr	r3, [r7, #12]
20000a00:	781b      	ldrb	r3, [r3, #0]
20000a02:	08db      	lsrs	r3, r3, #3
20000a04:	b2db      	uxtb	r3, r3
20000a06:	3301      	adds	r3, #1
20000a08:	61bb      	str	r3, [r7, #24]
    }
    
    for (i = 0; i < s->height; i++){
20000a0a:	2300      	movs	r3, #0
20000a0c:	627b      	str	r3, [r7, #36]	; 0x24
20000a0e:	e039      	b.n	20000a84 <draw_sprite+0xac>
        for (j = 0; j < width_in_bytes; j++){
20000a10:	2300      	movs	r3, #0
20000a12:	623b      	str	r3, [r7, #32]
20000a14:	e02f      	b.n	20000a76 <draw_sprite+0x9e>
            unsigned char byte = s->data[i*width_in_bytes +j];
20000a16:	68fb      	ldr	r3, [r7, #12]
20000a18:	685b      	ldr	r3, [r3, #4]
20000a1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
20000a1c:	69b9      	ldr	r1, [r7, #24]
20000a1e:	4351      	muls	r1, r2
20000a20:	6a3a      	ldr	r2, [r7, #32]
20000a22:	188a      	adds	r2, r1, r2
20000a24:	189a      	adds	r2, r3, r2
20000a26:	2317      	movs	r3, #23
20000a28:	18fb      	adds	r3, r7, r3
20000a2a:	7812      	ldrb	r2, [r2, #0]
20000a2c:	701a      	strb	r2, [r3, #0]
            for (k = 0; k < 8; k++){
20000a2e:	2300      	movs	r3, #0
20000a30:	61fb      	str	r3, [r7, #28]
20000a32:	e01a      	b.n	20000a6a <draw_sprite+0x92>
                if (byte & (1<<k))
20000a34:	2317      	movs	r3, #23
20000a36:	18fb      	adds	r3, r7, r3
20000a38:	781a      	ldrb	r2, [r3, #0]
20000a3a:	69fb      	ldr	r3, [r7, #28]
20000a3c:	411a      	asrs	r2, r3
20000a3e:	0013      	movs	r3, r2
20000a40:	2201      	movs	r2, #1
20000a42:	4013      	ands	r3, r2
20000a44:	d00e      	beq.n	20000a64 <draw_sprite+0x8c>
                    pixel(8 * j + k + x + 1, i + y + 1);
20000a46:	6a3b      	ldr	r3, [r7, #32]
20000a48:	00da      	lsls	r2, r3, #3
20000a4a:	69fb      	ldr	r3, [r7, #28]
20000a4c:	18d2      	adds	r2, r2, r3
20000a4e:	68bb      	ldr	r3, [r7, #8]
20000a50:	18d3      	adds	r3, r2, r3
20000a52:	3301      	adds	r3, #1
20000a54:	0018      	movs	r0, r3
20000a56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
20000a58:	687b      	ldr	r3, [r7, #4]
20000a5a:	18d3      	adds	r3, r2, r3
20000a5c:	3301      	adds	r3, #1
20000a5e:	0019      	movs	r1, r3
20000a60:	f7ff fe32 	bl	200006c8 <pixel>
            for (k = 0; k < 8; k++){
20000a64:	69fb      	ldr	r3, [r7, #28]
20000a66:	3301      	adds	r3, #1
20000a68:	61fb      	str	r3, [r7, #28]
20000a6a:	69fb      	ldr	r3, [r7, #28]
20000a6c:	2b07      	cmp	r3, #7
20000a6e:	dde1      	ble.n	20000a34 <draw_sprite+0x5c>
        for (j = 0; j < width_in_bytes; j++){
20000a70:	6a3b      	ldr	r3, [r7, #32]
20000a72:	3301      	adds	r3, #1
20000a74:	623b      	str	r3, [r7, #32]
20000a76:	6a3a      	ldr	r2, [r7, #32]
20000a78:	69bb      	ldr	r3, [r7, #24]
20000a7a:	429a      	cmp	r2, r3
20000a7c:	dbcb      	blt.n	20000a16 <draw_sprite+0x3e>
    for (i = 0; i < s->height; i++){
20000a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20000a80:	3301      	adds	r3, #1
20000a82:	627b      	str	r3, [r7, #36]	; 0x24
20000a84:	68fb      	ldr	r3, [r7, #12]
20000a86:	785b      	ldrb	r3, [r3, #1]
20000a88:	001a      	movs	r2, r3
20000a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20000a8c:	4293      	cmp	r3, r2
20000a8e:	dbbf      	blt.n	20000a10 <draw_sprite+0x38>
            }
        }
    }
}
20000a90:	46c0      	nop			; (mov r8, r8)
20000a92:	46c0      	nop			; (mov r8, r8)
20000a94:	46bd      	mov	sp, r7
20000a96:	b00a      	add	sp, #40	; 0x28
20000a98:	bd80      	pop	{r7, pc}

20000a9a <draw_snake>:


void draw_snake(POBJECT s){
20000a9a:	b580      	push	{r7, lr}
20000a9c:	b084      	sub	sp, #16
20000a9e:	af00      	add	r7, sp, #0
20000aa0:	6078      	str	r0, [r7, #4]
    for (int i = 0; i <= snakeSize - 1; i++){
20000aa2:	2300      	movs	r3, #0
20000aa4:	60fb      	str	r3, [r7, #12]
20000aa6:	e015      	b.n	20000ad4 <draw_snake+0x3a>
        s[i].move(&s[i]);
20000aa8:	68fa      	ldr	r2, [r7, #12]
20000aaa:	0013      	movs	r3, r2
20000aac:	00db      	lsls	r3, r3, #3
20000aae:	189b      	adds	r3, r3, r2
20000ab0:	009b      	lsls	r3, r3, #2
20000ab2:	001a      	movs	r2, r3
20000ab4:	687b      	ldr	r3, [r7, #4]
20000ab6:	189b      	adds	r3, r3, r2
20000ab8:	69d9      	ldr	r1, [r3, #28]
20000aba:	68fa      	ldr	r2, [r7, #12]
20000abc:	0013      	movs	r3, r2
20000abe:	00db      	lsls	r3, r3, #3
20000ac0:	189b      	adds	r3, r3, r2
20000ac2:	009b      	lsls	r3, r3, #2
20000ac4:	001a      	movs	r2, r3
20000ac6:	687b      	ldr	r3, [r7, #4]
20000ac8:	189b      	adds	r3, r3, r2
20000aca:	0018      	movs	r0, r3
20000acc:	4788      	blx	r1
    for (int i = 0; i <= snakeSize - 1; i++){
20000ace:	68fb      	ldr	r3, [r7, #12]
20000ad0:	3301      	adds	r3, #1
20000ad2:	60fb      	str	r3, [r7, #12]
20000ad4:	4b04      	ldr	r3, [pc, #16]	; (20000ae8 <draw_snake+0x4e>)
20000ad6:	681b      	ldr	r3, [r3, #0]
20000ad8:	68fa      	ldr	r2, [r7, #12]
20000ada:	429a      	cmp	r2, r3
20000adc:	dbe4      	blt.n	20000aa8 <draw_snake+0xe>
    }
}
20000ade:	46c0      	nop			; (mov r8, r8)
20000ae0:	46c0      	nop			; (mov r8, r8)
20000ae2:	46bd      	mov	sp, r7
20000ae4:	b004      	add	sp, #16
20000ae6:	bd80      	pop	{r7, pc}
20000ae8:	200031e8 	andcs	r3, r0, r8, ror #3

20000aec <follow_leader>:

void follow_leader(POBJECT s){
20000aec:	b580      	push	{r7, lr}
20000aee:	b086      	sub	sp, #24
20000af0:	af00      	add	r7, sp, #0
20000af2:	6078      	str	r0, [r7, #4]
    int next_x = s[0].posx;
20000af4:	687b      	ldr	r3, [r7, #4]
20000af6:	68db      	ldr	r3, [r3, #12]
20000af8:	617b      	str	r3, [r7, #20]
    int next_y = s[0].posy;
20000afa:	687b      	ldr	r3, [r7, #4]
20000afc:	691b      	ldr	r3, [r3, #16]
20000afe:	613b      	str	r3, [r7, #16]
    for(int i = snakeSize; i > 0; i--){
20000b00:	4b1d      	ldr	r3, [pc, #116]	; (20000b78 <follow_leader+0x8c>)
20000b02:	681b      	ldr	r3, [r3, #0]
20000b04:	60fb      	str	r3, [r7, #12]
20000b06:	e02e      	b.n	20000b66 <follow_leader+0x7a>
        int current = s[i].posx;
20000b08:	68fa      	ldr	r2, [r7, #12]
20000b0a:	0013      	movs	r3, r2
20000b0c:	00db      	lsls	r3, r3, #3
20000b0e:	189b      	adds	r3, r3, r2
20000b10:	009b      	lsls	r3, r3, #2
20000b12:	001a      	movs	r2, r3
20000b14:	687b      	ldr	r3, [r7, #4]
20000b16:	189b      	adds	r3, r3, r2
20000b18:	68db      	ldr	r3, [r3, #12]
20000b1a:	60bb      	str	r3, [r7, #8]
        s[i].posx = next_x;
20000b1c:	68fa      	ldr	r2, [r7, #12]
20000b1e:	0013      	movs	r3, r2
20000b20:	00db      	lsls	r3, r3, #3
20000b22:	189b      	adds	r3, r3, r2
20000b24:	009b      	lsls	r3, r3, #2
20000b26:	001a      	movs	r2, r3
20000b28:	687b      	ldr	r3, [r7, #4]
20000b2a:	189b      	adds	r3, r3, r2
20000b2c:	697a      	ldr	r2, [r7, #20]
20000b2e:	60da      	str	r2, [r3, #12]
        next_x = current;
20000b30:	68bb      	ldr	r3, [r7, #8]
20000b32:	617b      	str	r3, [r7, #20]
        
        current = s[i].posy;
20000b34:	68fa      	ldr	r2, [r7, #12]
20000b36:	0013      	movs	r3, r2
20000b38:	00db      	lsls	r3, r3, #3
20000b3a:	189b      	adds	r3, r3, r2
20000b3c:	009b      	lsls	r3, r3, #2
20000b3e:	001a      	movs	r2, r3
20000b40:	687b      	ldr	r3, [r7, #4]
20000b42:	189b      	adds	r3, r3, r2
20000b44:	691b      	ldr	r3, [r3, #16]
20000b46:	60bb      	str	r3, [r7, #8]
        s[i].posy = next_y;
20000b48:	68fa      	ldr	r2, [r7, #12]
20000b4a:	0013      	movs	r3, r2
20000b4c:	00db      	lsls	r3, r3, #3
20000b4e:	189b      	adds	r3, r3, r2
20000b50:	009b      	lsls	r3, r3, #2
20000b52:	001a      	movs	r2, r3
20000b54:	687b      	ldr	r3, [r7, #4]
20000b56:	189b      	adds	r3, r3, r2
20000b58:	693a      	ldr	r2, [r7, #16]
20000b5a:	611a      	str	r2, [r3, #16]
        next_y = current;
20000b5c:	68bb      	ldr	r3, [r7, #8]
20000b5e:	613b      	str	r3, [r7, #16]
    for(int i = snakeSize; i > 0; i--){
20000b60:	68fb      	ldr	r3, [r7, #12]
20000b62:	3b01      	subs	r3, #1
20000b64:	60fb      	str	r3, [r7, #12]
20000b66:	68fb      	ldr	r3, [r7, #12]
20000b68:	2b00      	cmp	r3, #0
20000b6a:	dccd      	bgt.n	20000b08 <follow_leader+0x1c>
    }
}
20000b6c:	46c0      	nop			; (mov r8, r8)
20000b6e:	46c0      	nop			; (mov r8, r8)
20000b70:	46bd      	mov	sp, r7
20000b72:	b006      	add	sp, #24
20000b74:	bd80      	pop	{r7, pc}
20000b76:	46c0      	nop			; (mov r8, r8)
20000b78:	200031e8 	andcs	r3, r0, r8, ror #3

20000b7c <turn>:

void turn(int dir, POBJECT s){
20000b7c:	b580      	push	{r7, lr}
20000b7e:	b084      	sub	sp, #16
20000b80:	af00      	add	r7, sp, #0
20000b82:	6078      	str	r0, [r7, #4]
20000b84:	6039      	str	r1, [r7, #0]
    int next_x = 0, next_y = 0;
20000b86:	2300      	movs	r3, #0
20000b88:	60fb      	str	r3, [r7, #12]
20000b8a:	2300      	movs	r3, #0
20000b8c:	60bb      	str	r3, [r7, #8]
     switch(dir){
20000b8e:	687b      	ldr	r3, [r7, #4]
20000b90:	2b08      	cmp	r3, #8
20000b92:	d032      	beq.n	20000bfa <turn+0x7e>
20000b94:	687b      	ldr	r3, [r7, #4]
20000b96:	2b08      	cmp	r3, #8
20000b98:	dc41      	bgt.n	20000c1e <turn+0xa2>
20000b9a:	687b      	ldr	r3, [r7, #4]
20000b9c:	2b06      	cmp	r3, #6
20000b9e:	d009      	beq.n	20000bb4 <turn+0x38>
20000ba0:	687b      	ldr	r3, [r7, #4]
20000ba2:	2b06      	cmp	r3, #6
20000ba4:	dc3b      	bgt.n	20000c1e <turn+0xa2>
20000ba6:	687b      	ldr	r3, [r7, #4]
20000ba8:	2b02      	cmp	r3, #2
20000baa:	d01a      	beq.n	20000be2 <turn+0x66>
20000bac:	687b      	ldr	r3, [r7, #4]
20000bae:	2b04      	cmp	r3, #4
20000bb0:	d00b      	beq.n	20000bca <turn+0x4e>
20000bb2:	e034      	b.n	20000c1e <turn+0xa2>
        case RIGHT:
            if(s[0].dirx == 0){
20000bb4:	683b      	ldr	r3, [r7, #0]
20000bb6:	685b      	ldr	r3, [r3, #4]
20000bb8:	2b00      	cmp	r3, #0
20000bba:	d129      	bne.n	20000c10 <turn+0x94>
                s->set_speed(s,4,0);
20000bbc:	683b      	ldr	r3, [r7, #0]
20000bbe:	6a1b      	ldr	r3, [r3, #32]
20000bc0:	6838      	ldr	r0, [r7, #0]
20000bc2:	2200      	movs	r2, #0
20000bc4:	2104      	movs	r1, #4
20000bc6:	4798      	blx	r3
            }
            break;
20000bc8:	e022      	b.n	20000c10 <turn+0x94>
        case LEFT:
            if(s[0].dirx == 0){
20000bca:	683b      	ldr	r3, [r7, #0]
20000bcc:	685b      	ldr	r3, [r3, #4]
20000bce:	2b00      	cmp	r3, #0
20000bd0:	d120      	bne.n	20000c14 <turn+0x98>
                s->set_speed(s,-4,0);
20000bd2:	683b      	ldr	r3, [r7, #0]
20000bd4:	6a1b      	ldr	r3, [r3, #32]
20000bd6:	2204      	movs	r2, #4
20000bd8:	4251      	negs	r1, r2
20000bda:	6838      	ldr	r0, [r7, #0]
20000bdc:	2200      	movs	r2, #0
20000bde:	4798      	blx	r3
            }
            break;
20000be0:	e018      	b.n	20000c14 <turn+0x98>
        case UP:
            if(s[0].diry == 0){
20000be2:	683b      	ldr	r3, [r7, #0]
20000be4:	689b      	ldr	r3, [r3, #8]
20000be6:	2b00      	cmp	r3, #0
20000be8:	d116      	bne.n	20000c18 <turn+0x9c>
                s->set_speed(s,0,-4);
20000bea:	683b      	ldr	r3, [r7, #0]
20000bec:	6a1b      	ldr	r3, [r3, #32]
20000bee:	2204      	movs	r2, #4
20000bf0:	4252      	negs	r2, r2
20000bf2:	6838      	ldr	r0, [r7, #0]
20000bf4:	2100      	movs	r1, #0
20000bf6:	4798      	blx	r3
            }
            break;
20000bf8:	e00e      	b.n	20000c18 <turn+0x9c>
        case DOWN:
            if(s[0].diry == 0){
20000bfa:	683b      	ldr	r3, [r7, #0]
20000bfc:	689b      	ldr	r3, [r3, #8]
20000bfe:	2b00      	cmp	r3, #0
20000c00:	d10c      	bne.n	20000c1c <turn+0xa0>
                s->set_speed(s,0,4);
20000c02:	683b      	ldr	r3, [r7, #0]
20000c04:	6a1b      	ldr	r3, [r3, #32]
20000c06:	6838      	ldr	r0, [r7, #0]
20000c08:	2204      	movs	r2, #4
20000c0a:	2100      	movs	r1, #0
20000c0c:	4798      	blx	r3
            }
            break;
20000c0e:	e005      	b.n	20000c1c <turn+0xa0>
            break;
20000c10:	46c0      	nop			; (mov r8, r8)
20000c12:	e004      	b.n	20000c1e <turn+0xa2>
            break;
20000c14:	46c0      	nop			; (mov r8, r8)
20000c16:	e002      	b.n	20000c1e <turn+0xa2>
            break;
20000c18:	46c0      	nop			; (mov r8, r8)
20000c1a:	e000      	b.n	20000c1e <turn+0xa2>
            break;
20000c1c:	46c0      	nop			; (mov r8, r8)
    }
    follow_leader(s);
20000c1e:	683b      	ldr	r3, [r7, #0]
20000c20:	0018      	movs	r0, r3
20000c22:	f7ff ff63 	bl	20000aec <follow_leader>
    /*if hit food*/
}
20000c26:	46c0      	nop			; (mov r8, r8)
20000c28:	46bd      	mov	sp, r7
20000c2a:	b004      	add	sp, #16
20000c2c:	bd80      	pop	{r7, pc}

20000c2e <init_app>:

void init_app(void){/**/
20000c2e:	b580      	push	{r7, lr}
20000c30:	af00      	add	r7, sp, #0
    #ifdef USBDM
        /*starta klockor på port D & E*/
        * ( (unsigned long *) 0x40023830) = 0x18;
20000c32:	4b12      	ldr	r3, [pc, #72]	; (20000c7c <init_app+0x4e>)
20000c34:	2218      	movs	r2, #24
20000c36:	601a      	str	r2, [r3, #0]
        __asm volatile("  LDR R0,=0x08000209\n BLX R0 \n");
20000c38:	48b3      	ldr	r0, [pc, #716]	; (20000f08 <main+0x11c>)
20000c3a:	4780      	blx	r0
    #endif
    
    *GPIO_E_MODER = 0x55555555;
20000c3c:	4b10      	ldr	r3, [pc, #64]	; (20000c80 <init_app+0x52>)
20000c3e:	4a11      	ldr	r2, [pc, #68]	; (20000c84 <init_app+0x56>)
20000c40:	601a      	str	r2, [r3, #0]
    *GPIO_E_OTYPER = 0x00000000;
20000c42:	4b11      	ldr	r3, [pc, #68]	; (20000c88 <init_app+0x5a>)
20000c44:	2200      	movs	r2, #0
20000c46:	801a      	strh	r2, [r3, #0]
    *GPIO_E_OSPEEDR = 0x00000000;
20000c48:	4b10      	ldr	r3, [pc, #64]	; (20000c8c <init_app+0x5e>)
20000c4a:	2200      	movs	r2, #0
20000c4c:	601a      	str	r2, [r3, #0]
    
    *GPIO_D_MODER = 0;
20000c4e:	4b10      	ldr	r3, [pc, #64]	; (20000c90 <init_app+0x62>)
20000c50:	2200      	movs	r2, #0
20000c52:	601a      	str	r2, [r3, #0]
    *GPIO_D_MODER = 0x55000000;
20000c54:	4b0e      	ldr	r3, [pc, #56]	; (20000c90 <init_app+0x62>)
20000c56:	22aa      	movs	r2, #170	; 0xaa
20000c58:	05d2      	lsls	r2, r2, #23
20000c5a:	601a      	str	r2, [r3, #0]
    *GPIO_D_PUPDR = 0;
20000c5c:	4b0d      	ldr	r3, [pc, #52]	; (20000c94 <init_app+0x66>)
20000c5e:	2200      	movs	r2, #0
20000c60:	601a      	str	r2, [r3, #0]
    *GPIO_D_PUPDR |= 0xAA000000;
20000c62:	4b0c      	ldr	r3, [pc, #48]	; (20000c94 <init_app+0x66>)
20000c64:	681a      	ldr	r2, [r3, #0]
20000c66:	4b0b      	ldr	r3, [pc, #44]	; (20000c94 <init_app+0x66>)
20000c68:	21aa      	movs	r1, #170	; 0xaa
20000c6a:	0609      	lsls	r1, r1, #24
20000c6c:	430a      	orrs	r2, r1
20000c6e:	601a      	str	r2, [r3, #0]
    *GPIO_D_OTYPER = 0;
20000c70:	4b09      	ldr	r3, [pc, #36]	; (20000c98 <init_app+0x6a>)
20000c72:	2200      	movs	r2, #0
20000c74:	801a      	strh	r2, [r3, #0]
}
20000c76:	46c0      	nop			; (mov r8, r8)
20000c78:	46bd      	mov	sp, r7
20000c7a:	bd80      	pop	{r7, pc}
20000c7c:	40023830 	andmi	r3, r2, r0, lsr r8
20000c80:	40021000 	andmi	r1, r2, r0
20000c84:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab
20000c88:	40021004 	andmi	r1, r2, r4
20000c8c:	40021008 	andmi	r1, r2, r8
20000c90:	40020c00 	andmi	r0, r2, r0, lsl #24
20000c94:	40020c0c 	andmi	r0, r2, ip, lsl #24
20000c98:	40020c04 	andmi	r0, r2, r4, lsl #24

20000c9c <init_snake>:

void init_snake(POBJECT s){
20000c9c:	b580      	push	{r7, lr}
20000c9e:	b084      	sub	sp, #16
20000ca0:	af00      	add	r7, sp, #0
20000ca2:	6078      	str	r0, [r7, #4]
    int j = 0;
20000ca4:	2300      	movs	r3, #0
20000ca6:	60fb      	str	r3, [r7, #12]
    for (int i = 3; i >= 0; i--, j++){
20000ca8:	2303      	movs	r3, #3
20000caa:	60bb      	str	r3, [r7, #8]
20000cac:	e074      	b.n	20000d98 <init_snake+0xfc>
        if(i == 0){ 
20000cae:	68bb      	ldr	r3, [r7, #8]
20000cb0:	2b00      	cmp	r3, #0
20000cb2:	d10a      	bne.n	20000cca <init_snake+0x2e>
            s[i].geo = &snakehead_geometry;
20000cb4:	68ba      	ldr	r2, [r7, #8]
20000cb6:	0013      	movs	r3, r2
20000cb8:	00db      	lsls	r3, r3, #3
20000cba:	189b      	adds	r3, r3, r2
20000cbc:	009b      	lsls	r3, r3, #2
20000cbe:	001a      	movs	r2, r3
20000cc0:	687b      	ldr	r3, [r7, #4]
20000cc2:	189b      	adds	r3, r3, r2
20000cc4:	4a38      	ldr	r2, [pc, #224]	; (20000da8 <init_snake+0x10c>)
20000cc6:	601a      	str	r2, [r3, #0]
20000cc8:	e009      	b.n	20000cde <init_snake+0x42>
        } else{ 
            s[i].geo = &snakebody_geometry;
20000cca:	68ba      	ldr	r2, [r7, #8]
20000ccc:	0013      	movs	r3, r2
20000cce:	00db      	lsls	r3, r3, #3
20000cd0:	189b      	adds	r3, r3, r2
20000cd2:	009b      	lsls	r3, r3, #2
20000cd4:	001a      	movs	r2, r3
20000cd6:	687b      	ldr	r3, [r7, #4]
20000cd8:	189b      	adds	r3, r3, r2
20000cda:	4a34      	ldr	r2, [pc, #208]	; (20000dac <init_snake+0x110>)
20000cdc:	601a      	str	r2, [r3, #0]
        }
        s[i].posx = (j+1) * 4;
20000cde:	68fb      	ldr	r3, [r7, #12]
20000ce0:	1c59      	adds	r1, r3, #1
20000ce2:	68ba      	ldr	r2, [r7, #8]
20000ce4:	0013      	movs	r3, r2
20000ce6:	00db      	lsls	r3, r3, #3
20000ce8:	189b      	adds	r3, r3, r2
20000cea:	009b      	lsls	r3, r3, #2
20000cec:	001a      	movs	r2, r3
20000cee:	687b      	ldr	r3, [r7, #4]
20000cf0:	189b      	adds	r3, r3, r2
20000cf2:	008a      	lsls	r2, r1, #2
20000cf4:	60da      	str	r2, [r3, #12]
        s[i].posy = 1;
20000cf6:	68ba      	ldr	r2, [r7, #8]
20000cf8:	0013      	movs	r3, r2
20000cfa:	00db      	lsls	r3, r3, #3
20000cfc:	189b      	adds	r3, r3, r2
20000cfe:	009b      	lsls	r3, r3, #2
20000d00:	001a      	movs	r2, r3
20000d02:	687b      	ldr	r3, [r7, #4]
20000d04:	189b      	adds	r3, r3, r2
20000d06:	2201      	movs	r2, #1
20000d08:	611a      	str	r2, [r3, #16]
        s[i].dirx = 0;
20000d0a:	68ba      	ldr	r2, [r7, #8]
20000d0c:	0013      	movs	r3, r2
20000d0e:	00db      	lsls	r3, r3, #3
20000d10:	189b      	adds	r3, r3, r2
20000d12:	009b      	lsls	r3, r3, #2
20000d14:	001a      	movs	r2, r3
20000d16:	687b      	ldr	r3, [r7, #4]
20000d18:	189b      	adds	r3, r3, r2
20000d1a:	2200      	movs	r2, #0
20000d1c:	605a      	str	r2, [r3, #4]
        s[i].diry = 0;
20000d1e:	68ba      	ldr	r2, [r7, #8]
20000d20:	0013      	movs	r3, r2
20000d22:	00db      	lsls	r3, r3, #3
20000d24:	189b      	adds	r3, r3, r2
20000d26:	009b      	lsls	r3, r3, #2
20000d28:	001a      	movs	r2, r3
20000d2a:	687b      	ldr	r3, [r7, #4]
20000d2c:	189b      	adds	r3, r3, r2
20000d2e:	2200      	movs	r2, #0
20000d30:	609a      	str	r2, [r3, #8]
        s[i].move = move_object;
20000d32:	68ba      	ldr	r2, [r7, #8]
20000d34:	0013      	movs	r3, r2
20000d36:	00db      	lsls	r3, r3, #3
20000d38:	189b      	adds	r3, r3, r2
20000d3a:	009b      	lsls	r3, r3, #2
20000d3c:	001a      	movs	r2, r3
20000d3e:	687b      	ldr	r3, [r7, #4]
20000d40:	189b      	adds	r3, r3, r2
20000d42:	4a1b      	ldr	r2, [pc, #108]	; (20000db0 <init_snake+0x114>)
20000d44:	61da      	str	r2, [r3, #28]
        s[i].clear = clear_object;
20000d46:	68ba      	ldr	r2, [r7, #8]
20000d48:	0013      	movs	r3, r2
20000d4a:	00db      	lsls	r3, r3, #3
20000d4c:	189b      	adds	r3, r3, r2
20000d4e:	009b      	lsls	r3, r3, #2
20000d50:	001a      	movs	r2, r3
20000d52:	687b      	ldr	r3, [r7, #4]
20000d54:	189b      	adds	r3, r3, r2
20000d56:	4a17      	ldr	r2, [pc, #92]	; (20000db4 <init_snake+0x118>)
20000d58:	619a      	str	r2, [r3, #24]
        s[i].draw = draw_object;
20000d5a:	68ba      	ldr	r2, [r7, #8]
20000d5c:	0013      	movs	r3, r2
20000d5e:	00db      	lsls	r3, r3, #3
20000d60:	189b      	adds	r3, r3, r2
20000d62:	009b      	lsls	r3, r3, #2
20000d64:	001a      	movs	r2, r3
20000d66:	687b      	ldr	r3, [r7, #4]
20000d68:	189b      	adds	r3, r3, r2
20000d6a:	4a13      	ldr	r2, [pc, #76]	; (20000db8 <init_snake+0x11c>)
20000d6c:	615a      	str	r2, [r3, #20]
        s[i].set_speed = set_object_speed;
20000d6e:	68ba      	ldr	r2, [r7, #8]
20000d70:	0013      	movs	r3, r2
20000d72:	00db      	lsls	r3, r3, #3
20000d74:	189b      	adds	r3, r3, r2
20000d76:	009b      	lsls	r3, r3, #2
20000d78:	001a      	movs	r2, r3
20000d7a:	687b      	ldr	r3, [r7, #4]
20000d7c:	189b      	adds	r3, r3, r2
20000d7e:	4a0f      	ldr	r2, [pc, #60]	; (20000dbc <init_snake+0x120>)
20000d80:	621a      	str	r2, [r3, #32]
        snakeSize++;
20000d82:	4b0f      	ldr	r3, [pc, #60]	; (20000dc0 <init_snake+0x124>)
20000d84:	681b      	ldr	r3, [r3, #0]
20000d86:	1c5a      	adds	r2, r3, #1
20000d88:	4b0d      	ldr	r3, [pc, #52]	; (20000dc0 <init_snake+0x124>)
20000d8a:	601a      	str	r2, [r3, #0]
    for (int i = 3; i >= 0; i--, j++){
20000d8c:	68bb      	ldr	r3, [r7, #8]
20000d8e:	3b01      	subs	r3, #1
20000d90:	60bb      	str	r3, [r7, #8]
20000d92:	68fb      	ldr	r3, [r7, #12]
20000d94:	3301      	adds	r3, #1
20000d96:	60fb      	str	r3, [r7, #12]
20000d98:	68bb      	ldr	r3, [r7, #8]
20000d9a:	2b00      	cmp	r3, #0
20000d9c:	da87      	bge.n	20000cae <init_snake+0x12>
    }
}
20000d9e:	46c0      	nop			; (mov r8, r8)
20000da0:	46c0      	nop			; (mov r8, r8)
20000da2:	46bd      	mov	sp, r7
20000da4:	b004      	add	sp, #16
20000da6:	bd80      	pop	{r7, pc}
20000da8:	20003390 	mulcs	r0, r0, r3
20000dac:	200033bc 			; <UNDEFINED> instruction: 0x200033bc
20000db0:	20000901 	andcs	r0, r0, r1, lsl #18
20000db4:	2000089f 	mulcs	r0, pc, r8	; <UNPREDICTABLE>
20000db8:	2000083d 	andcs	r0, r0, sp, lsr r8
20000dbc:	2000081d 	andcs	r0, r0, sp, lsl r8
20000dc0:	200031e8 	andcs	r3, r0, r8, ror #3

20000dc4 <restart_game>:

void restart_game(){
20000dc4:	b580      	push	{r7, lr}
20000dc6:	af00      	add	r7, sp, #0
        clear_backbuffer();
20000dc8:	f7ff fc63 	bl	20000692 <clear_backbuffer>
        graphic_draw_screen();
20000dcc:	f7ff fcbe 	bl	2000074c <graphic_draw_screen>
        points = 0;
20000dd0:	4b04      	ldr	r3, [pc, #16]	; (20000de4 <restart_game+0x20>)
20000dd2:	2200      	movs	r2, #0
20000dd4:	601a      	str	r2, [r3, #0]
        snakeSize = 0;
20000dd6:	4b04      	ldr	r3, [pc, #16]	; (20000de8 <restart_game+0x24>)
20000dd8:	2200      	movs	r2, #0
20000dda:	601a      	str	r2, [r3, #0]
}
20000ddc:	46c0      	nop			; (mov r8, r8)
20000dde:	46bd      	mov	sp, r7
20000de0:	bd80      	pop	{r7, pc}
20000de2:	46c0      	nop			; (mov r8, r8)
20000de4:	200031e4 	andcs	r3, r0, r4, ror #3
20000de8:	200031e8 	andcs	r3, r0, r8, ror #3

20000dec <main>:

void main(int argc, char **argv){
20000dec:	b5b0      	push	{r4, r5, r7, lr}
20000dee:	4c3e      	ldr	r4, [pc, #248]	; (20000ee8 <main+0xfc>)
20000df0:	44a5      	add	sp, r4
20000df2:	af00      	add	r7, sp, #0
20000df4:	6078      	str	r0, [r7, #4]
20000df6:	6039      	str	r1, [r7, #0]
    int game = 1, restart = 2;
20000df8:	2301      	movs	r3, #1
20000dfa:	4a3c      	ldr	r2, [pc, #240]	; (20000eec <main+0x100>)
20000dfc:	18ba      	adds	r2, r7, r2
20000dfe:	6013      	str	r3, [r2, #0]
20000e00:	2302      	movs	r3, #2
20000e02:	4a3b      	ldr	r2, [pc, #236]	; (20000ef0 <main+0x104>)
20000e04:	18ba      	adds	r2, r7, r2
20000e06:	6013      	str	r3, [r2, #0]
    char key_stroke;
    
    POBJECT food = &food_obj;
20000e08:	4b3a      	ldr	r3, [pc, #232]	; (20000ef4 <main+0x108>)
20000e0a:	4a3b      	ldr	r2, [pc, #236]	; (20000ef8 <main+0x10c>)
20000e0c:	18ba      	adds	r2, r7, r2
20000e0e:	6013      	str	r3, [r2, #0]
    OBJECT snake[200];
    
        
    init_app();
20000e10:	f7ff ff0d 	bl	20000c2e <init_app>
    graphic_init();
20000e14:	f7ff fa70 	bl	200002f8 <graphic_init>
    ascii_init();
20000e18:	f7ff f8fa 	bl	20000010 <ascii_init>
    
    while(game){
20000e1c:	e059      	b.n	20000ed2 <main+0xe6>
        #ifndef SIMULATOR
            graphic_clear_screen(); //JAG FÅR VARA MED
20000e1e:	f7ff fc0b 	bl	20000638 <graphic_clear_screen>
        //while(keyb() != 5){
            //char[] *s = "You have :" 
            //ascii_write_char(*s++)
        //}
        
        if(restart == 2){
20000e22:	4c33      	ldr	r4, [pc, #204]	; (20000ef0 <main+0x104>)
20000e24:	193b      	adds	r3, r7, r4
20000e26:	681b      	ldr	r3, [r3, #0]
20000e28:	2b02      	cmp	r3, #2
20000e2a:	d14c      	bne.n	20000ec6 <main+0xda>
            restart_game();
20000e2c:	f7ff ffca 	bl	20000dc4 <restart_game>
            restart = 1;
20000e30:	2301      	movs	r3, #1
20000e32:	193a      	adds	r2, r7, r4
20000e34:	6013      	str	r3, [r2, #0]
            init_snake(snake);
20000e36:	2308      	movs	r3, #8
20000e38:	18fb      	adds	r3, r7, r3
20000e3a:	0018      	movs	r0, r3
20000e3c:	f7ff ff2e 	bl	20000c9c <init_snake>
        }

        while(restart == 1){
20000e40:	e041      	b.n	20000ec6 <main+0xda>
            clear_backbuffer();
20000e42:	f7ff fc26 	bl	20000692 <clear_backbuffer>
            //graphic_draw_screen();
            /*KOD HÄR*/
            
            draw_snake(snake);
20000e46:	2308      	movs	r3, #8
20000e48:	18fb      	adds	r3, r7, r3
20000e4a:	0018      	movs	r0, r3
20000e4c:	f7ff fe25 	bl	20000a9a <draw_snake>
                        
            graphic_draw_screen();
20000e50:	f7ff fc7c 	bl	2000074c <graphic_draw_screen>

            //delay_milli(40);
            key_stroke = keyb();
20000e54:	4d29      	ldr	r5, [pc, #164]	; (20000efc <main+0x110>)
20000e56:	197c      	adds	r4, r7, r5
20000e58:	f000 f980 	bl	2000115c <keyb>
20000e5c:	0003      	movs	r3, r0
20000e5e:	7023      	strb	r3, [r4, #0]
            switch(key_stroke){
20000e60:	197b      	adds	r3, r7, r5
20000e62:	781b      	ldrb	r3, [r3, #0]
20000e64:	2b0d      	cmp	r3, #13
20000e66:	d82f      	bhi.n	20000ec8 <main+0xdc>
20000e68:	009a      	lsls	r2, r3, #2
20000e6a:	4b25      	ldr	r3, [pc, #148]	; (20000f00 <main+0x114>)
20000e6c:	18d3      	adds	r3, r2, r3
20000e6e:	681b      	ldr	r3, [r3, #0]
20000e70:	469f      	mov	pc, r3
                case RIGHT: turn(RIGHT, snake); break; /*dirx = +, diry = 0*/
20000e72:	2308      	movs	r3, #8
20000e74:	18fb      	adds	r3, r7, r3
20000e76:	0019      	movs	r1, r3
20000e78:	2006      	movs	r0, #6
20000e7a:	f7ff fe7f 	bl	20000b7c <turn>
20000e7e:	e023      	b.n	20000ec8 <main+0xdc>
                case LEFT: turn(LEFT, snake); break; /*dirx = -, diry = 0*/
20000e80:	2308      	movs	r3, #8
20000e82:	18fb      	adds	r3, r7, r3
20000e84:	0019      	movs	r1, r3
20000e86:	2004      	movs	r0, #4
20000e88:	f7ff fe78 	bl	20000b7c <turn>
20000e8c:	e01c      	b.n	20000ec8 <main+0xdc>
                case UP: turn(UP, snake); break; /*dirx = 0, diry = -*/
20000e8e:	2308      	movs	r3, #8
20000e90:	18fb      	adds	r3, r7, r3
20000e92:	0019      	movs	r1, r3
20000e94:	2002      	movs	r0, #2
20000e96:	f7ff fe71 	bl	20000b7c <turn>
20000e9a:	e015      	b.n	20000ec8 <main+0xdc>
                case DOWN: turn(DOWN, snake); break; /*dirx = 0, diry = +*/
20000e9c:	2308      	movs	r3, #8
20000e9e:	18fb      	adds	r3, r7, r3
20000ea0:	0019      	movs	r1, r3
20000ea2:	2008      	movs	r0, #8
20000ea4:	f7ff fe6a 	bl	20000b7c <turn>
20000ea8:	e00e      	b.n	20000ec8 <main+0xdc>
                case QUIT: game = 0; restart = 0; break;
20000eaa:	2300      	movs	r3, #0
20000eac:	4a0f      	ldr	r2, [pc, #60]	; (20000eec <main+0x100>)
20000eae:	18ba      	adds	r2, r7, r2
20000eb0:	6013      	str	r3, [r2, #0]
20000eb2:	2300      	movs	r3, #0
20000eb4:	4a0e      	ldr	r2, [pc, #56]	; (20000ef0 <main+0x104>)
20000eb6:	18ba      	adds	r2, r7, r2
20000eb8:	6013      	str	r3, [r2, #0]
20000eba:	e005      	b.n	20000ec8 <main+0xdc>
                case RESTART: restart = 2; break;
20000ebc:	2302      	movs	r3, #2
20000ebe:	4a0c      	ldr	r2, [pc, #48]	; (20000ef0 <main+0x104>)
20000ec0:	18ba      	adds	r2, r7, r2
20000ec2:	6013      	str	r3, [r2, #0]
20000ec4:	e000      	b.n	20000ec8 <main+0xdc>
        while(restart == 1){
20000ec6:	46c0      	nop			; (mov r8, r8)
20000ec8:	4b09      	ldr	r3, [pc, #36]	; (20000ef0 <main+0x104>)
20000eca:	18fb      	adds	r3, r7, r3
20000ecc:	681b      	ldr	r3, [r3, #0]
20000ece:	2b01      	cmp	r3, #1
20000ed0:	d0b7      	beq.n	20000e42 <main+0x56>
    while(game){
20000ed2:	4b06      	ldr	r3, [pc, #24]	; (20000eec <main+0x100>)
20000ed4:	18fb      	adds	r3, r7, r3
20000ed6:	681b      	ldr	r3, [r3, #0]
20000ed8:	2b00      	cmp	r3, #0
20000eda:	d1a0      	bne.n	20000e1e <main+0x32>
            }

        }
    }
}
20000edc:	46c0      	nop			; (mov r8, r8)
20000ede:	46c0      	nop			; (mov r8, r8)
20000ee0:	46bd      	mov	sp, r7
20000ee2:	4b08      	ldr	r3, [pc, #32]	; (20000f04 <main+0x118>)
20000ee4:	449d      	add	sp, r3
20000ee6:	bdb0      	pop	{r4, r5, r7, pc}
20000ee8:	ffffe3c8 			; <UNDEFINED> instruction: 0xffffe3c8
20000eec:	00001c34 	andeq	r1, r0, r4, lsr ip
20000ef0:	00001c30 	andeq	r1, r0, r0, lsr ip
20000ef4:	20003414 	andcs	r3, r0, r4, lsl r4
20000ef8:	00001c2c 	andeq	r1, r0, ip, lsr #24
20000efc:	00001c2b 	andeq	r1, r0, fp, lsr #24
20000f00:	2000343c 	andcs	r3, r0, ip, lsr r4
20000f04:	00001c38 	andeq	r1, r0, r8, lsr ip
20000f08:	08000209 	stmdaeq	r0, {r0, r3, r9}

20000f0c <delay_250ns>:
#include <defines.h>
#include <delay.h>


void delay_250ns ( void){
20000f0c:	b580      	push	{r7, lr}
20000f0e:	af00      	add	r7, sp, #0
    #ifdef SIMULATOR
        return;
    #endif
    /* SystemCoreClock = 168000000 */ 
    *STK_CTRL = 0;
20000f10:	4b0c      	ldr	r3, [pc, #48]	; (20000f44 <delay_250ns+0x38>)
20000f12:	2200      	movs	r2, #0
20000f14:	601a      	str	r2, [r3, #0]
    *STK_LOAD = ( (168/4) -1 );
20000f16:	4b0c      	ldr	r3, [pc, #48]	; (20000f48 <delay_250ns+0x3c>)
20000f18:	2229      	movs	r2, #41	; 0x29
20000f1a:	601a      	str	r2, [r3, #0]
    *STK_VAL = 0;
20000f1c:	4b0b      	ldr	r3, [pc, #44]	; (20000f4c <delay_250ns+0x40>)
20000f1e:	2200      	movs	r2, #0
20000f20:	601a      	str	r2, [r3, #0]
    *STK_CTRL = 5;
20000f22:	4b08      	ldr	r3, [pc, #32]	; (20000f44 <delay_250ns+0x38>)
20000f24:	2205      	movs	r2, #5
20000f26:	601a      	str	r2, [r3, #0]
    while( (*STK_CTRL & 0x10000 )== 0 ) {} 
20000f28:	46c0      	nop			; (mov r8, r8)
20000f2a:	4b06      	ldr	r3, [pc, #24]	; (20000f44 <delay_250ns+0x38>)
20000f2c:	681a      	ldr	r2, [r3, #0]
20000f2e:	2380      	movs	r3, #128	; 0x80
20000f30:	025b      	lsls	r3, r3, #9
20000f32:	4013      	ands	r3, r2
20000f34:	d0f9      	beq.n	20000f2a <delay_250ns+0x1e>
    *STK_CTRL = 0;
20000f36:	4b03      	ldr	r3, [pc, #12]	; (20000f44 <delay_250ns+0x38>)
20000f38:	2200      	movs	r2, #0
20000f3a:	601a      	str	r2, [r3, #0]
}
20000f3c:	46c0      	nop			; (mov r8, r8)
20000f3e:	46bd      	mov	sp, r7
20000f40:	bd80      	pop	{r7, pc}
20000f42:	46c0      	nop			; (mov r8, r8)
20000f44:	e000e010 	and	lr, r0, r0, lsl r0
20000f48:	e000e014 	and	lr, r0, r4, lsl r0
20000f4c:	e000e018 	and	lr, r0, r8, lsl r0

20000f50 <delay_500ns>:

void delay_500ns(void){
20000f50:	b580      	push	{r7, lr}
20000f52:	af00      	add	r7, sp, #0
    #ifdef SIMULATOR
        return;
    #endif
    delay_250ns();
20000f54:	f7ff ffda 	bl	20000f0c <delay_250ns>
    delay_250ns();
20000f58:	f7ff ffd8 	bl	20000f0c <delay_250ns>
}
20000f5c:	46c0      	nop			; (mov r8, r8)
20000f5e:	46bd      	mov	sp, r7
20000f60:	bd80      	pop	{r7, pc}

20000f62 <delay_mikro>:

void delay_mikro(unsigned int us){
20000f62:	b580      	push	{r7, lr}
20000f64:	b082      	sub	sp, #8
20000f66:	af00      	add	r7, sp, #0
20000f68:	6078      	str	r0, [r7, #4]
    #ifdef SIMULATOR
        return;
    #endif
    while(us--){
20000f6a:	e007      	b.n	20000f7c <delay_mikro+0x1a>
        delay_250ns();
20000f6c:	f7ff ffce 	bl	20000f0c <delay_250ns>
        delay_250ns();
20000f70:	f7ff ffcc 	bl	20000f0c <delay_250ns>
        delay_250ns();
20000f74:	f7ff ffca 	bl	20000f0c <delay_250ns>
        delay_250ns();
20000f78:	f7ff ffc8 	bl	20000f0c <delay_250ns>
    while(us--){
20000f7c:	687b      	ldr	r3, [r7, #4]
20000f7e:	1e5a      	subs	r2, r3, #1
20000f80:	607a      	str	r2, [r7, #4]
20000f82:	2b00      	cmp	r3, #0
20000f84:	d1f2      	bne.n	20000f6c <delay_mikro+0xa>
    }
}
20000f86:	46c0      	nop			; (mov r8, r8)
20000f88:	46c0      	nop			; (mov r8, r8)
20000f8a:	46bd      	mov	sp, r7
20000f8c:	b002      	add	sp, #8
20000f8e:	bd80      	pop	{r7, pc}

20000f90 <delay_milli>:

void delay_milli(unsigned int ms){
20000f90:	b580      	push	{r7, lr}
20000f92:	b082      	sub	sp, #8
20000f94:	af00      	add	r7, sp, #0
20000f96:	6078      	str	r0, [r7, #4]
    #ifdef SIMULATOR
        ms = ms / 1000;
        ms++;
    #endif
    
    while(ms--){
20000f98:	e004      	b.n	20000fa4 <delay_milli+0x14>
        delay_mikro(1000);
20000f9a:	23fa      	movs	r3, #250	; 0xfa
20000f9c:	009b      	lsls	r3, r3, #2
20000f9e:	0018      	movs	r0, r3
20000fa0:	f7ff ffdf 	bl	20000f62 <delay_mikro>
    while(ms--){
20000fa4:	687b      	ldr	r3, [r7, #4]
20000fa6:	1e5a      	subs	r2, r3, #1
20000fa8:	607a      	str	r2, [r7, #4]
20000faa:	2b00      	cmp	r3, #0
20000fac:	d1f5      	bne.n	20000f9a <delay_milli+0xa>
    }
20000fae:	46c0      	nop			; (mov r8, r8)
20000fb0:	46c0      	nop			; (mov r8, r8)
20000fb2:	46bd      	mov	sp, r7
20000fb4:	b002      	add	sp, #8
20000fb6:	bd80      	pop	{r7, pc}

20000fb8 <init_queue>:
POBJECT objArray[MAX];
int front = 0;
int rear = -1;
int itemCount = 0;

void init_queue(){
20000fb8:	b580      	push	{r7, lr}
20000fba:	b082      	sub	sp, #8
20000fbc:	af00      	add	r7, sp, #0
    for(int i = 0; i < MAX; i++)
20000fbe:	2300      	movs	r3, #0
20000fc0:	607b      	str	r3, [r7, #4]
20000fc2:	e007      	b.n	20000fd4 <init_queue+0x1c>
        objArray[i] = NULL;
20000fc4:	4b07      	ldr	r3, [pc, #28]	; (20000fe4 <init_queue+0x2c>)
20000fc6:	687a      	ldr	r2, [r7, #4]
20000fc8:	0092      	lsls	r2, r2, #2
20000fca:	2100      	movs	r1, #0
20000fcc:	50d1      	str	r1, [r2, r3]
    for(int i = 0; i < MAX; i++)
20000fce:	687b      	ldr	r3, [r7, #4]
20000fd0:	3301      	adds	r3, #1
20000fd2:	607b      	str	r3, [r7, #4]
20000fd4:	687b      	ldr	r3, [r7, #4]
20000fd6:	2b63      	cmp	r3, #99	; 0x63
20000fd8:	ddf4      	ble.n	20000fc4 <init_queue+0xc>
}
20000fda:	46c0      	nop			; (mov r8, r8)
20000fdc:	46c0      	nop			; (mov r8, r8)
20000fde:	46bd      	mov	sp, r7
20000fe0:	b002      	add	sp, #8
20000fe2:	bd80      	pop	{r7, pc}
20000fe4:	200031f4 	strdcs	r3, [r0], -r4

20000fe8 <peek>:

/*returns the head*/
POBJECT peek() {
20000fe8:	b580      	push	{r7, lr}
20000fea:	af00      	add	r7, sp, #0
   return objArray[front];
20000fec:	4b03      	ldr	r3, [pc, #12]	; (20000ffc <peek+0x14>)
20000fee:	681a      	ldr	r2, [r3, #0]
20000ff0:	4b03      	ldr	r3, [pc, #12]	; (20001000 <peek+0x18>)
20000ff2:	0092      	lsls	r2, r2, #2
20000ff4:	58d3      	ldr	r3, [r2, r3]
}
20000ff6:	0018      	movs	r0, r3
20000ff8:	46bd      	mov	sp, r7
20000ffa:	bd80      	pop	{r7, pc}
20000ffc:	200031ec 	andcs	r3, r0, ip, ror #3
20001000:	200031f4 	strdcs	r3, [r0], -r4

20001004 <isEmpty>:

/*returns true if itemCount == 0*/
bool isEmpty() {
20001004:	b580      	push	{r7, lr}
20001006:	af00      	add	r7, sp, #0
   return itemCount == 0;
20001008:	4b03      	ldr	r3, [pc, #12]	; (20001018 <isEmpty+0x14>)
2000100a:	681b      	ldr	r3, [r3, #0]
2000100c:	425a      	negs	r2, r3
2000100e:	4153      	adcs	r3, r2
20001010:	b2db      	uxtb	r3, r3
}
20001012:	0018      	movs	r0, r3
20001014:	46bd      	mov	sp, r7
20001016:	bd80      	pop	{r7, pc}
20001018:	200031f0 	strdcs	r3, [r0], -r0

2000101c <isFull>:

/*returns true if itemCount == MAX (512)*/
bool isFull() {
2000101c:	b580      	push	{r7, lr}
2000101e:	af00      	add	r7, sp, #0
   return itemCount == MAX;
20001020:	4b04      	ldr	r3, [pc, #16]	; (20001034 <isFull+0x18>)
20001022:	681b      	ldr	r3, [r3, #0]
20001024:	3b64      	subs	r3, #100	; 0x64
20001026:	425a      	negs	r2, r3
20001028:	4153      	adcs	r3, r2
2000102a:	b2db      	uxtb	r3, r3
}
2000102c:	0018      	movs	r0, r3
2000102e:	46bd      	mov	sp, r7
20001030:	bd80      	pop	{r7, pc}
20001032:	46c0      	nop			; (mov r8, r8)
20001034:	200031f0 	strdcs	r3, [r0], -r0

20001038 <size>:

/*Returns itemCount*/
int size() {
20001038:	b580      	push	{r7, lr}
2000103a:	af00      	add	r7, sp, #0
   return itemCount;
2000103c:	4b02      	ldr	r3, [pc, #8]	; (20001048 <size+0x10>)
2000103e:	681b      	ldr	r3, [r3, #0]
}  
20001040:	0018      	movs	r0, r3
20001042:	46bd      	mov	sp, r7
20001044:	bd80      	pop	{r7, pc}
20001046:	46c0      	nop			; (mov r8, r8)
20001048:	200031f0 	strdcs	r3, [r0], -r0

2000104c <insert>:

/*Adds a node in the end of the queue*/
void insert(POBJECT data) {
2000104c:	b580      	push	{r7, lr}
2000104e:	b082      	sub	sp, #8
20001050:	af00      	add	r7, sp, #0
20001052:	6078      	str	r0, [r7, #4]

   if(!isFull()) {
20001054:	f7ff ffe2 	bl	2000101c <isFull>
20001058:	0003      	movs	r3, r0
2000105a:	001a      	movs	r2, r3
2000105c:	2301      	movs	r3, #1
2000105e:	4053      	eors	r3, r2
20001060:	b2db      	uxtb	r3, r3
20001062:	2b00      	cmp	r3, #0
20001064:	d017      	beq.n	20001096 <insert+0x4a>
	
      if(rear == MAX-1) {
20001066:	4b0e      	ldr	r3, [pc, #56]	; (200010a0 <insert+0x54>)
20001068:	681b      	ldr	r3, [r3, #0]
2000106a:	2b63      	cmp	r3, #99	; 0x63
2000106c:	d103      	bne.n	20001076 <insert+0x2a>
         rear = -1;            
2000106e:	4b0c      	ldr	r3, [pc, #48]	; (200010a0 <insert+0x54>)
20001070:	2201      	movs	r2, #1
20001072:	4252      	negs	r2, r2
20001074:	601a      	str	r2, [r3, #0]
      }       
      objArray[++rear] = data;
20001076:	4b0a      	ldr	r3, [pc, #40]	; (200010a0 <insert+0x54>)
20001078:	681b      	ldr	r3, [r3, #0]
2000107a:	1c5a      	adds	r2, r3, #1
2000107c:	4b08      	ldr	r3, [pc, #32]	; (200010a0 <insert+0x54>)
2000107e:	601a      	str	r2, [r3, #0]
20001080:	4b07      	ldr	r3, [pc, #28]	; (200010a0 <insert+0x54>)
20001082:	681a      	ldr	r2, [r3, #0]
20001084:	4b07      	ldr	r3, [pc, #28]	; (200010a4 <insert+0x58>)
20001086:	0092      	lsls	r2, r2, #2
20001088:	6879      	ldr	r1, [r7, #4]
2000108a:	50d1      	str	r1, [r2, r3]
      itemCount++;
2000108c:	4b06      	ldr	r3, [pc, #24]	; (200010a8 <insert+0x5c>)
2000108e:	681b      	ldr	r3, [r3, #0]
20001090:	1c5a      	adds	r2, r3, #1
20001092:	4b05      	ldr	r3, [pc, #20]	; (200010a8 <insert+0x5c>)
20001094:	601a      	str	r2, [r3, #0]
   }
}
20001096:	46c0      	nop			; (mov r8, r8)
20001098:	46bd      	mov	sp, r7
2000109a:	b002      	add	sp, #8
2000109c:	bd80      	pop	{r7, pc}
2000109e:	46c0      	nop			; (mov r8, r8)
200010a0:	20003438 	andcs	r3, r0, r8, lsr r4
200010a4:	200031f4 	strdcs	r3, [r0], -r4
200010a8:	200031f0 	strdcs	r3, [r0], -r0

200010ac <remove>:

int remove() {
200010ac:	b580      	push	{r7, lr}
200010ae:	b082      	sub	sp, #8
200010b0:	af00      	add	r7, sp, #0
   POBJECT data = objArray[front++];
200010b2:	4b0d      	ldr	r3, [pc, #52]	; (200010e8 <remove+0x3c>)
200010b4:	681b      	ldr	r3, [r3, #0]
200010b6:	1c59      	adds	r1, r3, #1
200010b8:	4a0b      	ldr	r2, [pc, #44]	; (200010e8 <remove+0x3c>)
200010ba:	6011      	str	r1, [r2, #0]
200010bc:	4a0b      	ldr	r2, [pc, #44]	; (200010ec <remove+0x40>)
200010be:	009b      	lsls	r3, r3, #2
200010c0:	589b      	ldr	r3, [r3, r2]
200010c2:	607b      	str	r3, [r7, #4]
	
   if(front == MAX) {
200010c4:	4b08      	ldr	r3, [pc, #32]	; (200010e8 <remove+0x3c>)
200010c6:	681b      	ldr	r3, [r3, #0]
200010c8:	2b64      	cmp	r3, #100	; 0x64
200010ca:	d102      	bne.n	200010d2 <remove+0x26>
      front = 0;
200010cc:	4b06      	ldr	r3, [pc, #24]	; (200010e8 <remove+0x3c>)
200010ce:	2200      	movs	r2, #0
200010d0:	601a      	str	r2, [r3, #0]
   }
	
   itemCount--;
200010d2:	4b07      	ldr	r3, [pc, #28]	; (200010f0 <remove+0x44>)
200010d4:	681b      	ldr	r3, [r3, #0]
200010d6:	1e5a      	subs	r2, r3, #1
200010d8:	4b05      	ldr	r3, [pc, #20]	; (200010f0 <remove+0x44>)
200010da:	601a      	str	r2, [r3, #0]
   return (int)data;  
200010dc:	687b      	ldr	r3, [r7, #4]
}
200010de:	0018      	movs	r0, r3
200010e0:	46bd      	mov	sp, r7
200010e2:	b002      	add	sp, #8
200010e4:	bd80      	pop	{r7, pc}
200010e6:	46c0      	nop			; (mov r8, r8)
200010e8:	200031ec 	andcs	r3, r0, ip, ror #3
200010ec:	200031f4 	strdcs	r3, [r0], -r4
200010f0:	200031f0 	strdcs	r3, [r0], -r0

200010f4 <activate_row>:
#include <defines.h>
#include <keyb.h>

void activate_row(int i){
200010f4:	b580      	push	{r7, lr}
200010f6:	b082      	sub	sp, #8
200010f8:	af00      	add	r7, sp, #0
200010fa:	6078      	str	r0, [r7, #4]
    *GPIO_D_ODR_HIGH = 1 << (i+4);
200010fc:	687b      	ldr	r3, [r7, #4]
200010fe:	3304      	adds	r3, #4
20001100:	2201      	movs	r2, #1
20001102:	409a      	lsls	r2, r3
20001104:	4b03      	ldr	r3, [pc, #12]	; (20001114 <activate_row+0x20>)
20001106:	b2d2      	uxtb	r2, r2
20001108:	701a      	strb	r2, [r3, #0]
}
2000110a:	46c0      	nop			; (mov r8, r8)
2000110c:	46bd      	mov	sp, r7
2000110e:	b002      	add	sp, #8
20001110:	bd80      	pop	{r7, pc}
20001112:	46c0      	nop			; (mov r8, r8)
20001114:	40020c15 	andmi	r0, r2, r5, lsl ip

20001118 <read_coloumn>:

int read_coloumn(){
20001118:	b580      	push	{r7, lr}
2000111a:	b082      	sub	sp, #8
2000111c:	af00      	add	r7, sp, #0
    int j; 
    char input = *GPIO_D_IDR_HIGH;
2000111e:	4a0e      	ldr	r2, [pc, #56]	; (20001158 <read_coloumn+0x40>)
20001120:	1cfb      	adds	r3, r7, #3
20001122:	7812      	ldrb	r2, [r2, #0]
20001124:	701a      	strb	r2, [r3, #0]
    for(j = 0; j<4 ; j++){
20001126:	2300      	movs	r3, #0
20001128:	607b      	str	r3, [r7, #4]
2000112a:	e00c      	b.n	20001146 <read_coloumn+0x2e>
        if (input&(1<<j)){
2000112c:	1cfb      	adds	r3, r7, #3
2000112e:	781a      	ldrb	r2, [r3, #0]
20001130:	687b      	ldr	r3, [r7, #4]
20001132:	411a      	asrs	r2, r3
20001134:	0013      	movs	r3, r2
20001136:	2201      	movs	r2, #1
20001138:	4013      	ands	r3, r2
2000113a:	d001      	beq.n	20001140 <read_coloumn+0x28>
            return j;
2000113c:	687b      	ldr	r3, [r7, #4]
2000113e:	e007      	b.n	20001150 <read_coloumn+0x38>
    for(j = 0; j<4 ; j++){
20001140:	687b      	ldr	r3, [r7, #4]
20001142:	3301      	adds	r3, #1
20001144:	607b      	str	r3, [r7, #4]
20001146:	687b      	ldr	r3, [r7, #4]
20001148:	2b03      	cmp	r3, #3
2000114a:	ddef      	ble.n	2000112c <read_coloumn+0x14>
        }
    }
    return -1;
2000114c:	2301      	movs	r3, #1
2000114e:	425b      	negs	r3, r3
}
20001150:	0018      	movs	r0, r3
20001152:	46bd      	mov	sp, r7
20001154:	b002      	add	sp, #8
20001156:	bd80      	pop	{r7, pc}
20001158:	40020c11 	andmi	r0, r2, r1, lsl ip

2000115c <keyb>:

/*rader in, kolumner ut*/
unsigned char keyb(void){
2000115c:	b590      	push	{r4, r7, lr}
2000115e:	b08b      	sub	sp, #44	; 0x2c
20001160:	af00      	add	r7, sp, #0
    unsigned char key_value[] = {0x06,0x5B,0x4F,0x77,0x66,0x6D,0x7D,0x7C,0x07,0x7F,0x6F,0x39,0x79,0x3F,0x71,0xBF};
20001162:	2310      	movs	r3, #16
20001164:	18fb      	adds	r3, r7, r3
20001166:	4a15      	ldr	r2, [pc, #84]	; (200011bc <keyb+0x60>)
20001168:	ca13      	ldmia	r2!, {r0, r1, r4}
2000116a:	c313      	stmia	r3!, {r0, r1, r4}
2000116c:	6812      	ldr	r2, [r2, #0]
2000116e:	601a      	str	r2, [r3, #0]
    unsigned char keyVal[] = {1,2,3,0xA,4,5,6,0xB,7,8,9,0xC,0xE,0,0xF,0xD};
20001170:	003b      	movs	r3, r7
20001172:	4a13      	ldr	r2, [pc, #76]	; (200011c0 <keyb+0x64>)
20001174:	ca13      	ldmia	r2!, {r0, r1, r4}
20001176:	c313      	stmia	r3!, {r0, r1, r4}
20001178:	6812      	ldr	r2, [r2, #0]
2000117a:	601a      	str	r2, [r3, #0]
    
        
    int row, coloumn;
    for (row = 0; row < 4; row++){
2000117c:	2300      	movs	r3, #0
2000117e:	627b      	str	r3, [r7, #36]	; 0x24
20001180:	e014      	b.n	200011ac <keyb+0x50>
        activate_row(row);
20001182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001184:	0018      	movs	r0, r3
20001186:	f7ff ffb5 	bl	200010f4 <activate_row>
        coloumn = read_coloumn();
2000118a:	f7ff ffc5 	bl	20001118 <read_coloumn>
2000118e:	0003      	movs	r3, r0
20001190:	623b      	str	r3, [r7, #32]
        if (coloumn != -1){
20001192:	6a3b      	ldr	r3, [r7, #32]
20001194:	3301      	adds	r3, #1
20001196:	d006      	beq.n	200011a6 <keyb+0x4a>
            return keyVal[coloumn+row*4];
20001198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2000119a:	009a      	lsls	r2, r3, #2
2000119c:	6a3b      	ldr	r3, [r7, #32]
2000119e:	18d3      	adds	r3, r2, r3
200011a0:	003a      	movs	r2, r7
200011a2:	5cd3      	ldrb	r3, [r2, r3]
200011a4:	e006      	b.n	200011b4 <keyb+0x58>
    for (row = 0; row < 4; row++){
200011a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200011a8:	3301      	adds	r3, #1
200011aa:	627b      	str	r3, [r7, #36]	; 0x24
200011ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200011ae:	2b03      	cmp	r3, #3
200011b0:	dde7      	ble.n	20001182 <keyb+0x26>
        }
    }
    return 0x00;
200011b2:	2300      	movs	r3, #0
}
200011b4:	0018      	movs	r0, r3
200011b6:	46bd      	mov	sp, r7
200011b8:	b00b      	add	sp, #44	; 0x2c
200011ba:	bd90      	pop	{r4, r7, pc}
200011bc:	20003474 	andcs	r3, r0, r4, ror r4
200011c0:	20003484 	andcs	r3, r0, r4, lsl #9

200011c4 <out7seg>:

void out7seg(unsigned char c){
200011c4:	b580      	push	{r7, lr}
200011c6:	b082      	sub	sp, #8
200011c8:	af00      	add	r7, sp, #0
200011ca:	0002      	movs	r2, r0
200011cc:	1dfb      	adds	r3, r7, #7
200011ce:	701a      	strb	r2, [r3, #0]
    
    *GPIO_D_ODR_LOW = c; //0x00 -> 0xFF
200011d0:	4a03      	ldr	r2, [pc, #12]	; (200011e0 <out7seg+0x1c>)
200011d2:	1dfb      	adds	r3, r7, #7
200011d4:	781b      	ldrb	r3, [r3, #0]
200011d6:	7013      	strb	r3, [r2, #0]
    
200011d8:	46c0      	nop			; (mov r8, r8)
200011da:	46bd      	mov	sp, r7
200011dc:	b002      	add	sp, #8
200011de:	bd80      	pop	{r7, pc}
200011e0:	40020c14 	andmi	r0, r2, r4, lsl ip

200011e4 <backBuffer>:
	...

200021e4 <backBuffer>:
	...

200031e4 <points>:
200031e4:	00000000 	andeq	r0, r0, r0

200031e8 <snakeSize>:
200031e8:	00000000 	andeq	r0, r0, r0

200031ec <front>:
200031ec:	00000000 	andeq	r0, r0, r0

200031f0 <itemCount>:
200031f0:	00000000 	andeq	r0, r0, r0

200031f4 <objArray>:
	...

20003384 <image_bits>:
20003384:	aa889494 	bge	1e2285dc <startup-0x1dd7a24>
20003388:	beebffeb 	cdplt	15, 14, cr15, cr11, cr11, {7}
2000338c:	0000009c 	muleq	r0, ip, r0

20003390 <snakehead_geometry>:
20003390:	0000000a 	andeq	r0, r0, sl
20003394:	00000004 	andeq	r0, r0, r4
20003398:	00000004 	andeq	r0, r0, r4
2000339c:	02000100 	andeq	r0, r0, #0, 2
200033a0:	02010101 	andeq	r0, r1, #1073741824	; 0x40000000
200033a4:	03020002 	movweq	r0, #8194	; 0x2002
200033a8:	01030003 	tsteq	r3, r3
200033ac:	03030203 	movweq	r0, #12803	; 0x3203
	...

200033bc <snakebody_geometry>:
200033bc:	00000010 	andeq	r0, r0, r0, lsl r0
200033c0:	00000004 	andeq	r0, r0, r4
200033c4:	00000004 	andeq	r0, r0, r4
200033c8:	01000000 	mrseq	r0, (UNDEF: 0)
200033cc:	03000200 	movweq	r0, #512	; 0x200
200033d0:	01010001 	tsteq	r1, r1
200033d4:	03010201 	movweq	r0, #4609	; 0x1201
200033d8:	01020002 	tsteq	r2, r2
200033dc:	03020202 	movweq	r0, #8706	; 0x2202
200033e0:	01030003 	tsteq	r3, r3
200033e4:	03030203 	movweq	r0, #12803	; 0x3203

200033e8 <food_geometry>:
200033e8:	0000000c 	andeq	r0, r0, ip
200033ec:	00000004 	andeq	r0, r0, r4
200033f0:	00000004 	andeq	r0, r0, r4
200033f4:	01000000 	mrseq	r0, (UNDEF: 0)
200033f8:	03000200 	movweq	r0, #512	; 0x200
200033fc:	03010001 	movweq	r0, #4097	; 0x1001
20003400:	03020002 	movweq	r0, #8194	; 0x2002
20003404:	01030003 	tsteq	r3, r3
20003408:	03030203 	movweq	r0, #12803	; 0x3203
	...

20003414 <food_obj>:
20003414:	200033e8 	andcs	r3, r0, r8, ror #7
	...
20003420:	00000001 	andeq	r0, r0, r1
20003424:	00000001 	andeq	r0, r0, r1
20003428:	2000083d 	andcs	r0, r0, sp, lsr r8
2000342c:	2000089f 	mulcs	r0, pc, r8	; <UNPREDICTABLE>
20003430:	20000901 	andcs	r0, r0, r1, lsl #18
20003434:	2000081d 	andcs	r0, r0, sp, lsl r8

20003438 <rear>:
20003438:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000343c:	20000ec8 	andcs	r0, r0, r8, asr #29
20003440:	20000ec8 	andcs	r0, r0, r8, asr #29
20003444:	20000e8e 	andcs	r0, r0, lr, lsl #29
20003448:	20000ec8 	andcs	r0, r0, r8, asr #29
2000344c:	20000e80 	andcs	r0, r0, r0, lsl #29
20003450:	20000ec8 	andcs	r0, r0, r8, asr #29
20003454:	20000e72 	andcs	r0, r0, r2, ror lr
20003458:	20000ec8 	andcs	r0, r0, r8, asr #29
2000345c:	20000e9c 	mulcs	r0, ip, lr
20003460:	20000ec8 	andcs	r0, r0, r8, asr #29
20003464:	20000eaa 	andcs	r0, r0, sl, lsr #29
20003468:	20000ec8 	andcs	r0, r0, r8, asr #29
2000346c:	20000ec8 	andcs	r0, r0, r8, asr #29
20003470:	20000ebc 			; <UNDEFINED> instruction: 0x20000ebc
20003474:	774f5b06 	strbvc	r5, [pc, -r6, lsl #22]
20003478:	7c7d6d66 	ldclvc	13, cr6, [sp], #-408	; 0xfffffe68
2000347c:	396f7f07 	stmdbcc	pc!, {r0, r1, r2, r8, r9, sl, fp, ip, sp, lr}^	; <UNPREDICTABLE>
20003480:	bf713f79 	svclt	0x00713f79
20003484:	0a030201 	beq	200c3c90 <rear+0xc0858>
20003488:	0b060504 	bleq	201848a0 <rear+0x181468>
2000348c:	0c090807 	stceq	8, cr0, [r9], {7}
20003490:	0d0f000e 	stceq	0, cr0, [pc, #-56]	; 20003460 <rear+0x28>

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	000002c7 	andeq	r0, r0, r7, asr #5
       4:	00000004 	andeq	r0, r0, r4
       8:	01040000 	mrseq	r0, (UNDEF: 4)
       c:	00000073 	andeq	r0, r0, r3, ror r0
      10:	0000000c 	andeq	r0, r0, ip
      14:	00002500 	andeq	r2, r0, r0, lsl #10
      18:	00001000 	andeq	r1, r0, r0
      1c:	0002e620 	andeq	lr, r2, r0, lsr #12
      20:	00000000 	andeq	r0, r0, r0
      24:	08010200 	stmdaeq	r1, {r9}
      28:	00000171 	andeq	r0, r0, r1, ror r1
      2c:	0001a803 	andeq	sl, r1, r3, lsl #16
      30:	066e0100 	strbteq	r0, [lr], -r0, lsl #2
      34:	200002aa 	andcs	r0, r0, sl, lsr #5
      38:	0000004c 	andeq	r0, r0, ip, asr #32
      3c:	007a9c01 	rsbseq	r9, sl, r1, lsl #24
      40:	78040000 	stmdavc	r4, {}	; <UNPREDICTABLE>
      44:	176e0100 	strbne	r0, [lr, -r0, lsl #2]!
      48:	0000007a 	andeq	r0, r0, sl, ror r0
      4c:	046c9102 	strbteq	r9, [ip], #-258	; 0xfffffefe
      50:	6e010079 	mcrvs	0, 0, r0, cr1, cr9, {3}
      54:	00007a1e 	andeq	r7, r0, lr, lsl sl
      58:	68910200 	ldmvs	r1, {r9}
      5c:	00013305 	andeq	r3, r1, r5, lsl #6
      60:	136f0100 	cmnne	pc, #0, 2
      64:	00000025 	andeq	r0, r0, r5, lsr #32
      68:	06779102 	ldrbteq	r9, [r7], -r2, lsl #2
      6c:	00000050 	andeq	r0, r0, r0, asr r0
      70:	7a054d01 	bvc	15347c <startup-0x1feacb84>
      74:	07000000 	streq	r0, [r0, -r0]
      78:	04080000 	streq	r0, [r8], #-0
      7c:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
      80:	01d80300 	bicseq	r0, r8, r0, lsl #6
      84:	67010000 	strvs	r0, [r1, -r0]
      88:	00028006 	andeq	r8, r2, r6
      8c:	00002a20 	andeq	r2, r0, r0, lsr #20
      90:	b39c0100 	orrslt	r0, ip, #0, 2
      94:	04000000 	streq	r0, [r0], #-0
      98:	67010063 	strvs	r0, [r1, -r3, rrx]
      9c:	00002525 	andeq	r2, r0, r5, lsr #10
      a0:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
      a4:	00005006 	andeq	r5, r0, r6
      a8:	054d0100 	strbeq	r0, [sp, #-256]	; 0xffffff00
      ac:	0000007a 	andeq	r0, r0, sl, ror r0
      b0:	09000007 	stmdbeq	r0, {r0, r1, r2}
      b4:	000001bd 			; <UNDEFINED> instruction: 0x000001bd
      b8:	52066001 	andpl	r6, r6, #1
      bc:	2e200002 	cdpcs	0, 2, cr0, cr0, cr2, {0}
      c0:	01000000 	mrseq	r0, (UNDEF: 0)
      c4:	0000d89c 	muleq	r0, ip, r8
      c8:	00500600 	subseq	r0, r0, r0, lsl #12
      cc:	4d010000 	stcmi	0, cr0, [r1, #-0]
      d0:	00007a05 	andeq	r7, r0, r5, lsl #20
      d4:	00000700 	andeq	r0, r0, r0, lsl #14
      d8:	00016109 	andeq	r6, r1, r9, lsl #2
      dc:	06590100 	ldrbeq	r0, [r9], -r0, lsl #2
      e0:	20000224 	andcs	r0, r0, r4, lsr #4
      e4:	0000002e 	andeq	r0, r0, lr, lsr #32
      e8:	00fd9c01 	rscseq	r9, sp, r1, lsl #24
      ec:	50060000 	andpl	r0, r6, r0
      f0:	01000000 	mrseq	r0, (UNDEF: 0)
      f4:	007a054d 	rsbseq	r0, sl, sp, asr #10
      f8:	00070000 	andeq	r0, r7, r0
      fc:	01870900 	orreq	r0, r7, r0, lsl #18
     100:	52010000 	andpl	r0, r1, #0
     104:	0001f606 	andeq	pc, r1, r6, lsl #12
     108:	00002e20 	andeq	r2, r0, r0, lsr #28
     10c:	229c0100 	addscs	r0, ip, #0, 2
     110:	06000001 	streq	r0, [r0], -r1
     114:	00000050 	andeq	r0, r0, r0, asr r0
     118:	7a054d01 	bvc	153524 <startup-0x1feacadc>
     11c:	07000000 	streq	r0, [r0, -r0]
     120:	01090000 	mrseq	r0, (UNDEF: 9)
     124:	01000001 	tsteq	r0, r1
     128:	01c8064b 	biceq	r0, r8, fp, asr #12
     12c:	002e2000 	eoreq	r2, lr, r0
     130:	9c010000 	stcls	0, cr0, [r1], {-0}
     134:	00000159 	andeq	r0, r0, r9, asr r1
     138:	0000500a 	andeq	r5, r0, sl
     13c:	054d0100 	strbeq	r0, [sp, #-256]	; 0xffffff00
     140:	0000007a 	andeq	r0, r0, sl, ror r0
     144:	0000014a 	andeq	r0, r0, sl, asr #2
     148:	cc060007 	stcgt	0, cr0, [r6], {7}
     14c:	01000001 	tsteq	r0, r1
     150:	007a054f 	rsbseq	r0, sl, pc, asr #10
     154:	00070000 	andeq	r0, r7, r0
     158:	01510b00 	cmpeq	r1, r0, lsl #22
     15c:	42010000 	andmi	r0, r1, #0
     160:	0000250f 	andeq	r2, r0, pc, lsl #10
     164:	00018c00 	andeq	r8, r1, r0, lsl #24
     168:	00003c20 	andeq	r3, r0, r0, lsr #24
     16c:	839c0100 	orrshi	r0, ip, #0, 2
     170:	05000001 	streq	r0, [r0, #-1]
     174:	0000017f 	andeq	r0, r0, pc, ror r1
     178:	830a4601 	movwhi	r4, #42497	; 0xa601
     17c:	02000001 	andeq	r0, r0, #1
     180:	02006f91 	andeq	r6, r0, #580	; 0x244
     184:	017a0801 	cmneq	sl, r1, lsl #16
     188:	ef0b0000 	svc	0x000b0000
     18c:	01000000 	mrseq	r0, (UNDEF: 0)
     190:	00250f39 	eoreq	r0, r5, r9, lsr pc
     194:	01500000 	cmpeq	r0, r0
     198:	003c2000 	eorseq	r2, ip, r0
     19c:	9c010000 	stcls	0, cr0, [r1], {-0}
     1a0:	000001b4 			; <UNDEFINED> instruction: 0x000001b4
     1a4:	0001b505 	andeq	fp, r1, r5, lsl #10
     1a8:	0a3d0100 	beq	f405b0 <startup-0x1f0bfa50>
     1ac:	00000183 	andeq	r0, r0, r3, lsl #3
     1b0:	006f9102 	rsbeq	r9, pc, r2, lsl #2
     1b4:	00013b0b 	andeq	r3, r1, fp, lsl #22
     1b8:	0f300100 	svceq	0x00300100
     1bc:	00000025 	andeq	r0, r0, r5, lsr #32
     1c0:	2000011c 	andcs	r0, r0, ip, lsl r1
     1c4:	00000034 	andeq	r0, r0, r4, lsr r0
     1c8:	01f09c01 	mvnseq	r9, r1, lsl #24
     1cc:	200a0000 	andcs	r0, sl, r0
     1d0:	01000001 	tsteq	r0, r1
     1d4:	007a052c 	rsbseq	r0, sl, ip, lsr #10
     1d8:	01e00000 	mvneq	r0, r0
     1dc:	00070000 	andeq	r0, r7, r0
     1e0:	00012c05 	andeq	r2, r1, r5, lsl #24
     1e4:	0a340100 	beq	d005ec <startup-0x1f2ffa14>
     1e8:	00000183 	andeq	r0, r0, r3, lsl #3
     1ec:	00779102 	rsbseq	r9, r7, r2, lsl #2
     1f0:	00005c03 	andeq	r5, r0, r3, lsl #24
     1f4:	06290100 	strteq	r0, [r9], -r0, lsl #2
     1f8:	200000ec 	andcs	r0, r0, ip, ror #1
     1fc:	00000030 	andeq	r0, r0, r0, lsr r0
     200:	02249c01 	eoreq	r9, r4, #256	; 0x100
     204:	930c0000 	movwls	r0, #49152	; 0xc000
     208:	01000001 	tsteq	r0, r1
     20c:	00252b29 	eoreq	r2, r5, r9, lsr #22
     210:	91020000 	mrsls	r0, (UNDEF: 2)
     214:	01200677 			; <UNDEFINED> instruction: 0x01200677
     218:	2c010000 	stccs	0, cr0, [r1], {-0}
     21c:	00007a05 	andeq	r7, r0, r5, lsl #20
     220:	00000700 	andeq	r0, r0, r0, lsl #14
     224:	00010f03 	andeq	r0, r1, r3, lsl #30
     228:	06230100 	strteq	r0, [r3], -r0, lsl #2
     22c:	200000c2 	andcs	r0, r0, r2, asr #1
     230:	0000002a 	andeq	r0, r0, sl, lsr #32
     234:	024a9c01 	subeq	r9, sl, #256	; 0x100
     238:	440c0000 	strmi	r0, [ip], #-0
     23c:	01000002 	tsteq	r0, r2
     240:	00252523 	eoreq	r2, r5, r3, lsr #10
     244:	91020000 	mrsls	r0, (UNDEF: 2)
     248:	98030077 	stmdals	r3, {r0, r1, r2, r4, r5, r6}
     24c:	01000001 	tsteq	r0, r1
     250:	0098061d 	addseq	r0, r8, sp, lsl r6
     254:	002a2000 	eoreq	r2, sl, r0
     258:	9c010000 	stcls	0, cr0, [r1], {-0}
     25c:	00000270 	andeq	r0, r0, r0, ror r2
     260:	0002150c 	andeq	r1, r2, ip, lsl #10
     264:	241d0100 	ldrcs	r0, [sp], #-256	; 0xffffff00
     268:	00000025 	andeq	r0, r0, r5, lsr #32
     26c:	00779102 	rsbseq	r9, r7, r2, lsl #2
     270:	00003b0d 	andeq	r3, r0, sp, lsl #22
     274:	06180100 	ldreq	r0, [r8], -r0, lsl #2
     278:	2000005c 	andcs	r0, r0, ip, asr r0
     27c:	0000003c 	andeq	r0, r0, ip, lsr r0
     280:	02949c01 	addseq	r9, r4, #256	; 0x100
     284:	78040000 	stmdavc	r4, {}	; <UNPREDICTABLE>
     288:	29180100 	ldmdbcs	r8, {r8}
     28c:	00000025 	andeq	r0, r0, r5, lsr #32
     290:	00779102 	rsbseq	r9, r7, r2, lsl #2
     294:	0001e90d 	andeq	lr, r1, sp, lsl #18
     298:	06130100 	ldreq	r0, [r3], -r0, lsl #2
     29c:	2000002a 	andcs	r0, r0, sl, lsr #32
     2a0:	00000032 	andeq	r0, r0, r2, lsr r0
     2a4:	02b89c01 	adcseq	r9, r8, #256	; 0x100
     2a8:	78040000 	stmdavc	r4, {}	; <UNPREDICTABLE>
     2ac:	27130100 	ldrcs	r0, [r3, -r0, lsl #2]
     2b0:	00000025 	andeq	r0, r0, r5, lsr #32
     2b4:	00779102 	rsbseq	r9, r7, r2, lsl #2
     2b8:	0001fc0e 	andeq	pc, r1, lr, lsl #24
     2bc:	06040100 	streq	r0, [r4], -r0, lsl #2
     2c0:	20000010 	andcs	r0, r0, r0, lsl r0
     2c4:	0000001a 	andeq	r0, r0, sl, lsl r0
     2c8:	88009c01 	stmdahi	r0, {r0, sl, fp, ip, pc}
     2cc:	04000003 	streq	r0, [r0], #-3
     2d0:	00011400 	andeq	r1, r1, r0, lsl #8
     2d4:	73010400 	movwvc	r0, #5120	; 0x1400
     2d8:	0c000000 	stceq	0, cr0, [r0], {-0}
     2dc:	00000249 	andeq	r0, r0, r9, asr #4
     2e0:	00000025 	andeq	r0, r0, r5, lsr #32
     2e4:	200002f8 	strdcs	r0, [r0], -r8
     2e8:	00000524 	andeq	r0, r0, r4, lsr #10
     2ec:	0000019b 	muleq	r0, fp, r1
     2f0:	0002d202 	andeq	sp, r2, r2, lsl #4
     2f4:	17010300 	strne	r0, [r1, -r0, lsl #6]
     2f8:	00000031 	andeq	r0, r0, r1, lsr r0
     2fc:	71080103 	tstvc	r8, r3, lsl #2
     300:	04000001 	streq	r0, [r0], #-1
     304:	00000055 	andeq	r0, r0, r5, asr r0
     308:	00000049 	andeq	r0, r0, r9, asr #32
     30c:	00004e05 	andeq	r4, r0, r5, lsl #28
     310:	0003ff00 	andeq	pc, r3, r0, lsl #30
     314:	00003806 	andeq	r3, r0, r6, lsl #16
     318:	07040300 	streq	r0, [r4, -r0, lsl #6]
     31c:	000005a1 	andeq	r0, r0, r1, lsr #11
     320:	00004e06 	andeq	r4, r0, r6, lsl #28
     324:	02c70700 	sbceq	r0, r7, #0, 14
     328:	0f020000 	svceq	0x00020000
     32c:	0000491e 	andeq	r4, r0, lr, lsl r9
     330:	e4030500 	str	r0, [r3], #-1280	; 0xfffffb00
     334:	08200011 	stmdaeq	r0!, {r0, r4}
     338:	00000223 	andeq	r0, r0, r3, lsr #4
     33c:	4c06b701 	stcmi	7, cr11, [r6], {1}
     340:	d0200007 	eorle	r0, r0, r7
     344:	01000000 	mrseq	r0, (UNDEF: 0)
     348:	0000c69c 	muleq	r0, ip, r6
     34c:	00690900 	rsbeq	r0, r9, r0, lsl #18
     350:	250db801 	strcs	fp, [sp, #-2049]	; 0xfffff7ff
     354:	02000000 	andeq	r0, r0, #0
     358:	6a097791 	bvs	25e1a4 <startup-0x1fda1e5c>
     35c:	11b80100 			; <UNDEFINED> instruction: 0x11b80100
     360:	00000025 	andeq	r0, r0, r5, lsr #32
     364:	07769102 	ldrbeq	r9, [r6, -r2, lsl #2]!
     368:	00000146 	andeq	r0, r0, r6, asr #2
     36c:	2514b801 	ldrcs	fp, [r4, #-2049]	; 0xfffff7ff
     370:	02000000 	andeq	r0, r0, #0
     374:	63096f91 	movwvs	r6, #40849	; 0x9f91
     378:	20b80100 	adcscs	r0, r8, r0, lsl #2
     37c:	00000025 	andeq	r0, r0, r5, lsr #32
     380:	09759102 	ldmdbeq	r5!, {r1, r8, ip, pc}^
     384:	b901006b 	stmdblt	r1, {r0, r1, r3, r5, r6}
     388:	00004e12 	andeq	r4, r0, r2, lsl lr
     38c:	70910200 	addsvc	r0, r1, r0, lsl #4
     390:	021d0a00 	andseq	r0, sp, #0, 20
     394:	a6010000 	strge	r0, [r1], -r0
     398:	0006c806 	andeq	ip, r6, r6, lsl #16
     39c:	00008420 	andeq	r8, r0, r0, lsr #8
     3a0:	159c0100 	ldrne	r0, [ip, #256]	; 0x100
     3a4:	0b000001 	bleq	3b0 <startup-0x1ffffc50>
     3a8:	a6010078 			; <UNDEFINED> instruction: 0xa6010078
     3ac:	00004e15 	andeq	r4, r0, r5, lsl lr
     3b0:	6c910200 	lfmvs	f0, 4, [r1], {0}
     3b4:	0100790b 	tsteq	r0, fp, lsl #18
     3b8:	004e21a6 	subeq	r2, lr, r6, lsr #3
     3bc:	91020000 	mrsls	r0, (UNDEF: 2)
     3c0:	02960768 	addseq	r0, r6, #104, 14	; 0x1a00000
     3c4:	a7010000 	strge	r0, [r1, -r0]
     3c8:	0000250d 	andeq	r2, r0, sp, lsl #10
     3cc:	73910200 	orrsvc	r0, r1, #0, 4
     3d0:	0002fa07 	andeq	pc, r2, r7, lsl #20
     3d4:	09a80100 	stmibeq	r8!, {r8}
     3d8:	00000115 	andeq	r0, r0, r5, lsl r1
     3dc:	00749102 	rsbseq	r9, r4, r2, lsl #2
     3e0:	6905040c 	stmdbvs	r5, {r2, r3, sl}
     3e4:	0d00746e 	cfstrseq	mvf7, [r0, #-440]	; 0xfffffe48
     3e8:	00000285 	andeq	r0, r0, r5, lsl #5
     3ec:	9206a001 	andls	sl, r6, #1
     3f0:	36200006 	strtcc	r0, [r0], -r6
     3f4:	01000000 	mrseq	r0, (UNDEF: 0)
     3f8:	0001409c 	muleq	r1, ip, r0
     3fc:	00690900 	rsbeq	r0, r9, r0, lsl #18
     400:	1509a101 	strne	sl, [r9, #-257]	; 0xfffffeff
     404:	02000001 	andeq	r0, r0, #1
     408:	08007491 	stmdaeq	r0, {r0, r4, r7, sl, ip, sp, lr}
     40c:	00000300 	andeq	r0, r0, r0, lsl #6
     410:	38069601 	stmdacc	r6, {r0, r9, sl, ip, pc}
     414:	5a200006 	bpl	800434 <startup-0x1f7ffbcc>
     418:	01000000 	mrseq	r0, (UNDEF: 0)
     41c:	0001899c 	muleq	r1, ip, r9
     420:	063e0e00 	ldrteq	r0, [lr], -r0, lsl #28
     424:	004a2000 	subeq	r2, sl, r0
     428:	3f070000 	svccc	0x00070000
     42c:	01000003 	tsteq	r0, r3
     430:	01150e97 			; <UNDEFINED> instruction: 0x01150e97
     434:	91020000 	mrsls	r0, (UNDEF: 2)
     438:	06620e74 			; <UNDEFINED> instruction: 0x06620e74
     43c:	001a2000 	andseq	r2, sl, r0
     440:	61090000 	mrsvs	r0, (UNDEF: 9)
     444:	01006464 	tsteq	r0, r4, ror #8
     448:	0115129a 			; <UNDEFINED> instruction: 0x0115129a
     44c:	91020000 	mrsls	r0, (UNDEF: 2)
     450:	00000070 	andeq	r0, r0, r0, ror r0
     454:	00031508 	andeq	r1, r3, r8, lsl #10
     458:	068e0100 	streq	r0, [lr], r0, lsl #2
     45c:	200005f2 	strdcs	r0, [r0], -r2
     460:	00000046 	andeq	r0, r0, r6, asr #32
     464:	01be9c01 			; <UNDEFINED> instruction: 0x01be9c01
     468:	440f0000 	strmi	r0, [pc], #-0	; 470 <startup-0x1ffffb90>
     46c:	01000002 	tsteq	r0, r2
     470:	0025218e 	eoreq	r2, r5, lr, lsl #3
     474:	91020000 	mrsls	r0, (UNDEF: 2)
     478:	01460f77 	hvceq	24823	; 0x60f7
     47c:	8e010000 	cdphi	0, 0, cr0, cr1, cr0, {0}
     480:	0000252f 	andeq	r2, r0, pc, lsr #10
     484:	76910200 	ldrvc	r0, [r1], r0, lsl #4
     488:	02070800 	andeq	r0, r7, #0, 16
     48c:	86010000 	strhi	r0, [r1], -r0
     490:	0005ac06 	andeq	sl, r5, r6, lsl #24
     494:	00004620 	andeq	r4, r0, r0, lsr #12
     498:	f39c0100 	vaddw.u16	q0, q6, d0
     49c:	0b000001 	bleq	4a8 <startup-0x1ffffb58>
     4a0:	00646d63 	rsbeq	r6, r4, r3, ror #26
     4a4:	25248601 	strcs	r8, [r4, #-1537]!	; 0xfffff9ff
     4a8:	02000000 	andeq	r0, r0, #0
     4ac:	460f7791 			; <UNDEFINED> instruction: 0x460f7791
     4b0:	01000001 	tsteq	r0, r1
     4b4:	00253186 	eoreq	r3, r5, r6, lsl #3
     4b8:	91020000 	mrsls	r0, (UNDEF: 2)
     4bc:	da080076 	ble	20069c <startup-0x1fdff964>
     4c0:	01000002 	tsteq	r0, r2
     4c4:	0536066e 	ldreq	r0, [r6, #-1646]!	; 0xfffff992
     4c8:	00762000 	rsbseq	r2, r6, r0
     4cc:	9c010000 	stcls	0, cr0, [r1], {-0}
     4d0:	00000236 	andeq	r0, r0, r6, lsr r2
     4d4:	00089b0f 	andeq	r9, r8, pc, lsl #22
     4d8:	1c6e0100 	stfnee	f0, [lr], #-0
     4dc:	00000025 	andeq	r0, r0, r5, lsr #32
     4e0:	0f779102 	svceq	0x00779102
     4e4:	00000146 	andeq	r0, r0, r6, asr #2
     4e8:	252b6e01 	strcs	r6, [fp, #-3585]!	; 0xfffff1ff
     4ec:	02000000 	andeq	r0, r0, #0
     4f0:	9b107691 	blls	41df3c <startup-0x1fbe20c4>
     4f4:	01000002 	tsteq	r0, r2
     4f8:	01150545 	tsteq	r5, r5, asr #10
     4fc:	00110000 	andseq	r0, r1, r0
     500:	02371200 	eorseq	r1, r7, #0, 4
     504:	69010000 	stmdbvs	r1, {}	; <UNPREDICTABLE>
     508:	00002509 	andeq	r2, r0, r9, lsl #10
     50c:	00050c00 	andeq	r0, r5, r0, lsl #24
     510:	00002a20 	andeq	r2, r0, r0, lsr #20
     514:	609c0100 	addsvs	r0, ip, r0, lsl #2
     518:	0f000002 	svceq	0x00000002
     51c:	00000146 	andeq	r0, r0, r6, asr #2
     520:	25236901 	strcs	r6, [r3, #-2305]!	; 0xfffff6ff
     524:	02000000 	andeq	r0, r0, #0
     528:	12007791 	andne	r7, r0, #38010880	; 0x2440000
     52c:	000002ba 			; <UNDEFINED> instruction: 0x000002ba
     530:	310f5201 	tstcc	pc, r1, lsl #4
     534:	80000000 	andhi	r0, r0, r0
     538:	8c200004 	stchi	0, cr0, [r0], #-16
     53c:	01000000 	mrseq	r0, (UNDEF: 0)
     540:	0002ab9c 	muleq	r2, ip, fp
     544:	01460f00 	cmpeq	r6, r0, lsl #30
     548:	52010000 	andpl	r0, r1, #0
     54c:	0000312a 	andeq	r3, r0, sl, lsr #2
     550:	6f910200 	svcvs	0x00910200
     554:	00029b13 	andeq	r9, r2, r3, lsl fp
     558:	05450100 	strbeq	r0, [r5, #-256]	; 0xffffff00
     55c:	00000115 	andeq	r0, r0, r5, lsl r1
     560:	0000029b 	muleq	r0, fp, r2
     564:	51070011 	tstpl	r7, r1, lsl r0
     568:	01000003 	tsteq	r0, r3
     56c:	0031135a 	eorseq	r1, r1, sl, asr r3
     570:	91020000 	mrsls	r0, (UNDEF: 2)
     574:	a7080077 	smlsdxge	r8, r7, r0, r0
     578:	01000002 	tsteq	r0, r2
     57c:	04420640 	strbeq	r0, [r2], #-1600	; 0xfffff9c0
     580:	003e2000 	eorseq	r2, lr, r0
     584:	9c010000 	stcls	0, cr0, [r1], {-0}
     588:	000002d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     58c:	00029b10 	andeq	r9, r2, r0, lsl fp
     590:	05450100 	strbeq	r0, [r5, #-256]	; 0xffffff00
     594:	00000115 	andeq	r0, r0, r5, lsl r1
     598:	08000011 	stmdaeq	r0, {r0, r4}
     59c:	000002e8 	andeq	r0, r0, r8, ror #5
     5a0:	e8062a01 	stmda	r6, {r0, r9, fp, sp}
     5a4:	5a200003 	bpl	8005b8 <startup-0x1f7ffa48>
     5a8:	01000000 	mrseq	r0, (UNDEF: 0)
     5ac:	0002f69c 	muleq	r2, ip, r6
     5b0:	01460f00 	cmpeq	r6, r0, lsl #30
     5b4:	2a010000 	bcs	405bc <startup-0x1ffbfa44>
     5b8:	00002520 	andeq	r2, r0, r0, lsr #10
     5bc:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
     5c0:	02700a00 	rsbseq	r0, r0, #0, 20
     5c4:	20010000 	andcs	r0, r1, r0
     5c8:	0003a406 	andeq	sl, r3, r6, lsl #8
     5cc:	00004420 	andeq	r4, r0, r0, lsr #8
     5d0:	279c0100 	ldrcs	r0, [ip, r0, lsl #2]
     5d4:	0b000003 	bleq	5e8 <startup-0x1ffffa18>
     5d8:	20010078 	andcs	r0, r1, r8, ror r0
     5dc:	00002523 	andeq	r2, r0, r3, lsr #10
     5e0:	6f910200 	svcvs	0x00910200
     5e4:	01006309 	tsteq	r0, r9, lsl #6
     5e8:	00250d23 	eoreq	r0, r5, r3, lsr #26
     5ec:	91020000 	mrsls	r0, (UNDEF: 2)
     5f0:	280a0077 	stmdacs	sl, {r0, r1, r2, r4, r5, r6}
     5f4:	01000003 	tsteq	r0, r3
     5f8:	03540615 	cmpeq	r4, #22020096	; 0x1500000
     5fc:	00502000 	subseq	r2, r0, r0
     600:	9c010000 	stcls	0, cr0, [r1], {-0}
     604:	00000358 	andeq	r0, r0, r8, asr r3
     608:	0100780b 	tsteq	r0, fp, lsl #16
     60c:	00252515 	eoreq	r2, r5, r5, lsl r5
     610:	91020000 	mrsls	r0, (UNDEF: 2)
     614:	0063096f 	rsbeq	r0, r3, pc, ror #18
     618:	250d1801 	strcs	r1, [sp, #-2049]	; 0xfffff7ff
     61c:	02000000 	andeq	r0, r0, #0
     620:	14007791 	strne	r7, [r0], #-1937	; 0xfffff86f
     624:	00000344 	andeq	r0, r0, r4, asr #6
     628:	f8060601 			; <UNDEFINED> instruction: 0xf8060601
     62c:	5c200002 	stcpl	0, cr0, [r0], #-8
     630:	01000000 	mrseq	r0, (UNDEF: 0)
     634:	0050139c 			; <UNDEFINED> instruction: 0x0050139c
     638:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
     63c:	00011505 	andeq	r1, r1, r5, lsl #10
     640:	00037c00 	andeq	r7, r3, r0, lsl #24
     644:	10001100 	andne	r1, r0, r0, lsl #2
     648:	000001cc 	andeq	r0, r0, ip, asr #3
     64c:	15050a01 	strne	r0, [r5, #-2561]	; 0xfffff5ff
     650:	11000001 	tstne	r0, r1
     654:	90000000 	andls	r0, r0, r0
     658:	04000006 	streq	r0, [r0], #-6
     65c:	00026a00 	andeq	r6, r2, r0, lsl #20
     660:	73010400 	movwvc	r0, #5120	; 0x1400
     664:	0c000000 	stceq	0, cr0, [r0], {-0}
     668:	0000049e 	muleq	r0, lr, r4
     66c:	00000025 	andeq	r0, r0, r5, lsr #32
	...
     678:	00000448 	andeq	r0, r0, r8, asr #8
     67c:	71080102 	tstvc	r8, r2, lsl #2
     680:	03000001 	movweq	r0, #1
     684:	00000049 	andeq	r0, r0, r9, asr #32
     688:	0000003d 	andeq	r0, r0, sp, lsr r0
     68c:	00004204 	andeq	r4, r0, r4, lsl #4
     690:	0003ff00 	andeq	pc, r3, r0, lsl #30
     694:	00002c05 	andeq	r2, r0, r5, lsl #24
     698:	07040200 	streq	r0, [r4, -r0, lsl #4]
     69c:	000005a1 	andeq	r0, r0, r1, lsr #11
     6a0:	00004205 	andeq	r4, r0, r5, lsl #4
     6a4:	02c70600 	sbceq	r0, r7, #0, 12
     6a8:	0f030000 	svceq	0x00030000
     6ac:	00003d1e 	andeq	r3, r0, lr, lsl sp
     6b0:	e4030500 	str	r0, [r3], #-1280	; 0xfffffb00
     6b4:	07200021 	streq	r0, [r0, -r1, lsr #32]!
     6b8:	000003a4 	andeq	r0, r0, r4, lsr #7
     6bc:	10010202 	andne	r0, r1, r2, lsl #4
     6c0:	00000084 	andeq	r0, r0, r4, lsl #1
     6c4:	02007808 	andeq	r7, r0, #8, 16	; 0x80000
     6c8:	00251302 	eoreq	r1, r5, r2, lsl #6
     6cc:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     6d0:	03020079 	movweq	r0, #8313	; 0x2079
     6d4:	00002513 	andeq	r2, r0, r3, lsl r5
     6d8:	09000100 	stmdbeq	r0, {r8}
     6dc:	000003be 			; <UNDEFINED> instruction: 0x000003be
     6e0:	60020402 	andvs	r0, r2, r2, lsl #8
     6e4:	07000000 	streq	r0, [r0, -r0]
     6e8:	00000436 	andeq	r0, r0, r6, lsr r4
     6ec:	1008022c 	andne	r0, r8, ip, lsr #4
     6f0:	000000d1 	ldrdeq	r0, [r0], -r1
     6f4:	0004f70a 	andeq	pc, r4, sl, lsl #14
     6f8:	09090200 	stmdbeq	r9, {r9}
     6fc:	000000d1 	ldrdeq	r0, [r0], -r1
     700:	04300a00 	ldrteq	r0, [r0], #-2560	; 0xfffff600
     704:	0a020000 	beq	8070c <startup-0x1ff7f8f4>
     708:	0000d109 	andeq	sp, r0, r9, lsl #2
     70c:	400a0400 	andmi	r0, sl, r0, lsl #8
     710:	02000004 	andeq	r0, r0, #4
     714:	00d1090b 	sbcseq	r0, r1, fp, lsl #18
     718:	08080000 	stmdaeq	r8, {}	; <UNPREDICTABLE>
     71c:	02007870 	andeq	r7, r0, #112, 16	; 0x700000
     720:	00dd0b0c 	sbcseq	r0, sp, ip, lsl #22
     724:	000c0000 	andeq	r0, ip, r0
     728:	6905040b 	stmdbvs	r5, {r0, r1, r3, sl}
     72c:	0500746e 	streq	r7, [r0, #-1134]	; 0xfffffb92
     730:	000000d1 	ldrdeq	r0, [r0], -r1
     734:	00008403 	andeq	r8, r0, r3, lsl #8
     738:	0000ed00 	andeq	lr, r0, r0, lsl #26
     73c:	00420c00 	subeq	r0, r2, r0, lsl #24
     740:	000f0000 	andeq	r0, pc, r0
     744:	00035909 	andeq	r5, r3, r9, lsl #18
     748:	030d0200 	movweq	r0, #53760	; 0xd200
     74c:	00000090 	muleq	r0, r0, r0
     750:	00035809 	andeq	r5, r3, r9, lsl #16
     754:	0e0d0200 	cdpeq	2, 0, cr0, cr13, cr0, {0}
     758:	00000105 	andeq	r0, r0, r5, lsl #2
     75c:	0090040d 	addseq	r0, r0, sp, lsl #8
     760:	d9070000 	stmdble	r7, {}	; <UNPREDICTABLE>
     764:	24000004 	strcs	r0, [r0], #-4
     768:	8e100f02 	cdphi	15, 1, cr0, cr0, cr2, {0}
     76c:	08000001 	stmdaeq	r0, {r0}
     770:	006f6567 	rsbeq	r6, pc, r7, ror #10
     774:	f90f1002 			; <UNDEFINED> instruction: 0xf90f1002
     778:	00000000 	andeq	r0, r0, r0
     77c:	00037d0a 	andeq	r7, r3, sl, lsl #26
     780:	09110200 	ldmdbeq	r1, {r9}
     784:	000000d1 	ldrdeq	r0, [r0], -r1
     788:	03820a04 	orreq	r0, r2, #4, 20	; 0x4000
     78c:	11020000 	mrsne	r0, (UNDEF: 2)
     790:	0000d10e 	andeq	sp, r0, lr, lsl #2
     794:	d50a0800 	strle	r0, [sl, #-2048]	; 0xfffff800
     798:	02000003 	andeq	r0, r0, #3
     79c:	00d10912 	sbcseq	r0, r1, r2, lsl r9
     7a0:	0a0c0000 	beq	3007a8 <startup-0x1fcff858>
     7a4:	000003da 	ldrdeq	r0, [r0], -sl
     7a8:	d10e1202 	tstle	lr, r2, lsl #4
     7ac:	10000000 	andne	r0, r0, r0
     7b0:	0004530a 	andeq	r5, r4, sl, lsl #6
     7b4:	0d130200 	lfmeq	f0, 4, [r3, #-0]
     7b8:	0000019f 	muleq	r0, pc, r1	; <UNPREDICTABLE>
     7bc:	03390a14 	teqeq	r9, #20, 20	; 0x14000
     7c0:	14020000 	strne	r0, [r2], #-0
     7c4:	00019f0d 	andeq	r9, r1, sp, lsl #30
     7c8:	b90a1800 	stmdblt	sl, {fp, ip}
     7cc:	02000005 	andeq	r0, r0, #5
     7d0:	019f0d15 	orrseq	r0, pc, r5, lsl sp	; <UNPREDICTABLE>
     7d4:	0a1c0000 	beq	7007dc <startup-0x1f8ff824>
     7d8:	000003cb 	andeq	r0, r0, fp, asr #7
     7dc:	ba0d1602 	blt	345fec <startup-0x1fcba014>
     7e0:	20000001 	andcs	r0, r0, r1
     7e4:	01990e00 	orrseq	r0, r9, r0, lsl #28
     7e8:	990f0000 	stmdbls	pc, {}	; <UNPREDICTABLE>
     7ec:	00000001 	andeq	r0, r0, r1
     7f0:	010b040d 	tsteq	fp, sp, lsl #8
     7f4:	040d0000 	streq	r0, [sp], #-0
     7f8:	0000018e 	andeq	r0, r0, lr, lsl #3
     7fc:	0001ba0e 	andeq	fp, r1, lr, lsl #20
     800:	01990f00 	orrseq	r0, r9, r0, lsl #30
     804:	d10f0000 	mrsle	r0, CPSR
     808:	0f000000 	svceq	0x00000000
     80c:	000000d1 	ldrdeq	r0, [r0], -r1
     810:	a5040d00 	strge	r0, [r4, #-3328]	; 0xfffff300
     814:	09000001 	stmdbeq	r0, {r0}
     818:	00000526 	andeq	r0, r0, r6, lsr #10
     81c:	0b031702 	bleq	c642c <startup-0x1ff39bd4>
     820:	09000001 	stmdbeq	r0, {r0}
     824:	00000525 	andeq	r0, r0, r5, lsr #10
     828:	990c1702 	stmdbls	ip, {r1, r8, r9, sl, ip}
     82c:	10000001 	andne	r0, r0, r1
     830:	09190208 	ldmdbeq	r9, {r3, r9}
     834:	00000209 	andeq	r0, r0, r9, lsl #4
     838:	00046c0a 	andeq	r6, r4, sl, lsl #24
     83c:	131a0200 	tstne	sl, #0, 4
     840:	00000025 	andeq	r0, r0, r5, lsr #32
     844:	03df0a00 	bicseq	r0, pc, #0, 20
     848:	1b020000 	blne	80850 <startup-0x1ff7f7b0>
     84c:	00002513 	andeq	r2, r0, r3, lsl r5
     850:	440a0100 	strmi	r0, [sl], #-256	; 0xffffff00
     854:	02000002 	andeq	r0, r0, #2
     858:	0209141c 	andeq	r1, r9, #28, 8	; 0x1c000000
     85c:	00040000 	andeq	r0, r4, r0
     860:	0025040d 	eoreq	r0, r5, sp, lsl #8
     864:	97090000 	strls	r0, [r9, -r0]
     868:	02000004 	andeq	r0, r0, #4
     86c:	01d8021d 	bicseq	r0, r8, sp, lsl r2
     870:	25030000 	strcs	r0, [r3, #-0]
     874:	2b000000 	blcs	87c <startup-0x1ffff784>
     878:	0c000002 	stceq	0, cr0, [r0], {2}
     87c:	00000042 	andeq	r0, r0, r2, asr #32
     880:	8e060008 	cdphi	0, 0, cr0, cr6, cr8, {0}
     884:	04000003 	streq	r0, [r0], #-3
     888:	021b1603 	andseq	r1, fp, #3145728	; 0x300000
     88c:	03050000 	movweq	r0, #20480	; 0x5000
     890:	20003384 	andcs	r3, r0, r4, lsl #7
     894:	0004fa06 	andeq	pc, r4, r6, lsl #20
     898:	15170100 	ldrne	r0, [r7, #-256]	; 0xffffff00
     89c:	000000d8 	ldrdeq	r0, [r0], -r8
     8a0:	31e40305 	mvncc	r0, r5, lsl #6
     8a4:	62062000 	andvs	r2, r6, #0
     8a8:	01000003 	tsteq	r0, r3
     8ac:	00d81d17 	sbcseq	r1, r8, r7, lsl sp
     8b0:	03050000 	movweq	r0, #20480	; 0x5000
     8b4:	200031e8 	andcs	r3, r0, r8, ror #3
     8b8:	0003ab11 	andeq	sl, r3, r1, lsl fp
     8bc:	0a510100 	beq	1440cc4 <startup-0x1ebbf33c>
     8c0:	000000ed 	andeq	r0, r0, sp, ror #1
     8c4:	33900305 	orrscc	r0, r0, #335544320	; 0x14000000
     8c8:	f1112000 			; <UNDEFINED> instruction: 0xf1112000
     8cc:	01000003 	tsteq	r0, r3
     8d0:	00ed0a5d 	rsceq	r0, sp, sp, asr sl
     8d4:	03050000 	movweq	r0, #20480	; 0x5000
     8d8:	200033bc 			; <UNDEFINED> instruction: 0x200033bc
     8dc:	00040411 	andeq	r0, r4, r1, lsl r4
     8e0:	0a680100 	beq	1a00ce8 <startup-0x1e5ff318>
     8e4:	000000ed 	andeq	r0, r0, sp, ror #1
     8e8:	33e80305 	mvncc	r0, #335544320	; 0x14000000
     8ec:	58062000 	stmdapl	r6, {sp}
     8f0:	01000004 	tsteq	r0, r4
     8f4:	01c00f7f 	biceq	r0, r0, pc, ror pc
     8f8:	03050000 	movweq	r0, #20480	; 0x5000
     8fc:	20003414 	andcs	r3, r0, r4, lsl r4
     900:	00041212 	andeq	r1, r4, r2, lsl r2
     904:	01020100 	mrseq	r0, (UNDEF: 18)
     908:	000dec06 	andeq	lr, sp, r6, lsl #24
     90c:	00011c20 	andeq	r1, r1, r0, lsr #24
     910:	349c0100 	ldrcc	r0, [ip], #256	; 0x100
     914:	13000003 	movwne	r0, #3
     918:	00000446 	andeq	r0, r0, r6, asr #8
     91c:	0f010201 	svceq	0x00010201
     920:	000000d1 	ldrdeq	r0, [r0], -r1
     924:	47bc9103 	ldrmi	r9, [ip, r3, lsl #2]!
     928:	00037813 	andeq	r7, r3, r3, lsl r8
     92c:	01020100 	mrseq	r0, (UNDEF: 18)
     930:	0003341c 	andeq	r3, r3, ip, lsl r4
     934:	b8910300 	ldmlt	r1, {r8, r9}
     938:	04f21447 	ldrbteq	r1, [r2], #1095	; 0x447
     93c:	03010000 	movweq	r0, #4096	; 0x1000
     940:	00d10901 	sbcseq	r0, r1, r1, lsl #18
     944:	91020000 	mrsls	r0, (UNDEF: 2)
     948:	0417146c 	ldreq	r1, [r7], #-1132	; 0xfffffb94
     94c:	03010000 	movweq	r0, #4096	; 0x1000
     950:	00d11301 	sbcseq	r1, r1, r1, lsl #6
     954:	91020000 	mrsls	r0, (UNDEF: 2)
     958:	04611468 	strbteq	r1, [r1], #-1128	; 0xfffffb98
     95c:	04010000 	streq	r0, [r1], #-0
     960:	03400a01 	movteq	r0, #2561	; 0xa01
     964:	91020000 	mrsls	r0, (UNDEF: 2)
     968:	050d1463 	streq	r1, [sp, #-1123]	; 0xfffffb9d
     96c:	06010000 	streq	r0, [r1], -r0
     970:	01cc0d01 	biceq	r0, ip, r1, lsl #26
     974:	91020000 	mrsls	r0, (UNDEF: 2)
     978:	039e1464 	orrseq	r1, lr, #100, 8	; 0x64000000
     97c:	07010000 	streq	r0, [r1, -r0]
     980:	03470c01 	movteq	r0, #31745	; 0x7c01
     984:	91030000 	mrsls	r0, (UNDEF: 3)
     988:	0d0047c0 	stceq	7, cr4, [r0, #-768]	; 0xfffffd00
     98c:	00033a04 	andeq	r3, r3, r4, lsl #20
     990:	40040d00 	andmi	r0, r4, r0, lsl #26
     994:	02000003 	andeq	r0, r0, #3
     998:	017a0801 	cmneq	sl, r1, lsl #16
     99c:	c0030000 	andgt	r0, r3, r0
     9a0:	57000001 	strpl	r0, [r0, -r1]
     9a4:	0c000003 	stceq	0, cr0, [r0], {3}
     9a8:	00000042 	andeq	r0, r0, r2, asr #32
     9ac:	ea1500c7 	b	540cd0 <startup-0x1fabf330>
     9b0:	01000004 	tsteq	r0, r4
     9b4:	0dc406fb 	stcleq	6, cr0, [r4, #1004]	; 0x3ec
     9b8:	00282000 	eoreq	r2, r8, r0
     9bc:	9c010000 	stcls	0, cr0, [r1], {-0}
     9c0:	00039916 	andeq	r9, r3, r6, lsl r9
     9c4:	06e70100 	strbteq	r0, [r7], r0, lsl #2
     9c8:	20000c9c 	mulcs	r0, ip, ip
     9cc:	00000128 	andeq	r0, r0, r8, lsr #2
     9d0:	03b19c01 			; <UNDEFINED> instruction: 0x03b19c01
     9d4:	73170000 	tstvc	r7, #0
     9d8:	19e70100 	stmibne	r7!, {r8}^
     9dc:	000001cc 	andeq	r0, r0, ip, asr #3
     9e0:	186c9102 	stmdane	ip!, {r1, r8, ip, pc}^
     9e4:	e801006a 	stmda	r1, {r1, r3, r5, r6}
     9e8:	0000d109 	andeq	sp, r0, r9, lsl #2
     9ec:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     9f0:	000ca819 	andeq	sl, ip, r9, lsl r8
     9f4:	0000f620 	andeq	pc, r0, r0, lsr #12
     9f8:	00691800 	rsbeq	r1, r9, r0, lsl #16
     9fc:	d10ee901 	tstle	lr, r1, lsl #18
     a00:	02000000 	andeq	r0, r0, #0
     a04:	00007091 	muleq	r0, r1, r0
     a08:	0004271a 	andeq	r2, r4, sl, lsl r7
     a0c:	06d50100 	ldrbeq	r0, [r5], r0, lsl #2
     a10:	20000c2e 	andcs	r0, r0, lr, lsr #24
     a14:	0000006e 	andeq	r0, r0, lr, rrx
     a18:	121b9c01 	andsne	r9, fp, #256	; 0x100
     a1c:	01000005 	tsteq	r0, r5
     a20:	0b7c06b9 	bleq	1f0250c <startup-0x1e0fdaf4>
     a24:	00b22000 	adcseq	r2, r2, r0
     a28:	9c010000 	stcls	0, cr0, [r1], {-0}
     a2c:	00000414 	andeq	r0, r0, r4, lsl r4
     a30:	72696417 	rsbvc	r6, r9, #385875968	; 0x17000000
     a34:	0fb90100 	svceq	0x00b90100
     a38:	000000d1 	ldrdeq	r0, [r0], -r1
     a3c:	176c9102 	strbne	r9, [ip, -r2, lsl #2]!
     a40:	b9010073 	stmdblt	r1, {r0, r1, r4, r5, r6}
     a44:	0001cc1c 	andeq	ip, r1, ip, lsl ip
     a48:	68910200 	ldmvs	r1, {r9}
     a4c:	00038706 	andeq	r8, r3, r6, lsl #14
     a50:	09ba0100 	ldmibeq	sl!, {r8}
     a54:	000000d1 	ldrdeq	r0, [r0], -r1
     a58:	06749102 	ldrbteq	r9, [r4], -r2, lsl #2
     a5c:	000003c4 	andeq	r0, r0, r4, asr #7
     a60:	d115ba01 	tstle	r5, r1, lsl #20
     a64:	02000000 	andeq	r0, r0, #0
     a68:	16007091 			; <UNDEFINED> instruction: 0x16007091
     a6c:	000004cb 	andeq	r0, r0, fp, asr #9
     a70:	ec06ab01 			; <UNDEFINED> instruction: 0xec06ab01
     a74:	9020000a 	eorls	r0, r0, sl
     a78:	01000000 	mrseq	r0, (UNDEF: 0)
     a7c:	0004869c 	muleq	r4, ip, r6
     a80:	00731700 	rsbseq	r1, r3, r0, lsl #14
     a84:	cc1cab01 			; <UNDEFINED> instruction: 0xcc1cab01
     a88:	02000001 	andeq	r0, r0, #1
     a8c:	87066491 			; <UNDEFINED> instruction: 0x87066491
     a90:	01000003 	tsteq	r0, r3
     a94:	00d109ac 	sbcseq	r0, r1, ip, lsr #19
     a98:	91020000 	mrsls	r0, (UNDEF: 2)
     a9c:	03c40674 	biceq	r0, r4, #116, 12	; 0x7400000
     aa0:	ad010000 	stcge	0, cr0, [r1, #-0]
     aa4:	0000d109 	andeq	sp, r0, r9, lsl #2
     aa8:	70910200 	addsvc	r0, r1, r0, lsl #4
     aac:	000b0019 	andeq	r0, fp, r9, lsl r0
     ab0:	00006c20 	andeq	r6, r0, r0, lsr #24
     ab4:	00691800 	rsbeq	r1, r9, r0, lsl #16
     ab8:	d10dae01 	tstle	sp, r1, lsl #28
     abc:	02000000 	andeq	r0, r0, #0
     ac0:	08196c91 	ldmdaeq	r9, {r0, r4, r7, sl, fp, sp, lr}
     ac4:	5820000b 	stmdapl	r0!, {r0, r1, r3}
     ac8:	06000000 	streq	r0, [r0], -r0
     acc:	0000041f 	andeq	r0, r0, pc, lsl r4
     ad0:	d10daf01 	tstle	sp, r1, lsl #30
     ad4:	02000000 	andeq	r0, r0, #0
     ad8:	00006891 	muleq	r0, r1, r8
     adc:	03e61b00 	mvneq	r1, #0, 22
     ae0:	a5010000 	strge	r0, [r1, #-0]
     ae4:	000a9a06 	andeq	r9, sl, r6, lsl #20
     ae8:	00005220 	andeq	r5, r0, r0, lsr #4
     aec:	c19c0100 	orrsgt	r0, ip, r0, lsl #2
     af0:	17000004 	strne	r0, [r0, -r4]
     af4:	a5010073 	strge	r0, [r1, #-115]	; 0xffffff8d
     af8:	0001cc19 	andeq	ip, r1, r9, lsl ip
     afc:	6c910200 	lfmvs	f0, 4, [r1], {0}
     b00:	000aa219 	andeq	sl, sl, r9, lsl r2
     b04:	00003c20 	andeq	r3, r0, r0, lsr #24
     b08:	00691800 	rsbeq	r1, r9, r0, lsl #16
     b0c:	d10ea601 	tstle	lr, r1, lsl #12
     b10:	02000000 	andeq	r0, r0, #0
     b14:	00007491 	muleq	r0, r1, r4
     b18:	00036c1b 	andeq	r6, r3, fp, lsl ip
     b1c:	06900100 	ldreq	r0, [r0], r0, lsl #2
     b20:	200009d8 	ldrdcs	r0, [r0], -r8
     b24:	000000c2 	andeq	r0, r0, r2, asr #1
     b28:	054e9c01 	strbeq	r9, [lr, #-3073]	; 0xfffff3ff
     b2c:	73170000 	tstvc	r7, #0
     b30:	1a900100 	bne	fe400f38 <rear+0xde3fdb00>
     b34:	0000054e 	andeq	r0, r0, lr, asr #10
     b38:	175c9102 	ldrbne	r9, [ip, -r2, lsl #2]
     b3c:	90010078 	andls	r0, r1, r8, ror r0
     b40:	0000d121 	andeq	sp, r0, r1, lsr #2
     b44:	58910200 	ldmpl	r1, {r9}
     b48:	01007917 	tsteq	r0, r7, lsl r9
     b4c:	00d12890 	smullseq	r2, r1, r0, r8
     b50:	91020000 	mrsls	r0, (UNDEF: 2)
     b54:	00691854 	rsbeq	r1, r9, r4, asr r8
     b58:	d1099101 	tstle	r9, r1, lsl #2
     b5c:	02000000 	andeq	r0, r0, #0
     b60:	6a187491 	bvs	61ddac <startup-0x1f9e2254>
     b64:	0b910100 	bleq	fe440f6c <rear+0xde43db34>
     b68:	000000d1 	ldrdeq	r0, [r0], -r1
     b6c:	18709102 	ldmdane	r0!, {r1, r8, ip, pc}^
     b70:	9101006b 	tstls	r1, fp, rrx
     b74:	0000d10d 	andeq	sp, r0, sp, lsl #2
     b78:	6c910200 	lfmvs	f0, 4, [r1], {0}
     b7c:	00048306 	andeq	r8, r4, r6, lsl #6
     b80:	10910100 	addsne	r0, r1, r0, lsl #2
     b84:	000000d1 	ldrdeq	r0, [r0], -r1
     b88:	19689102 	stmdbne	r8!, {r1, r8, ip, pc}^
     b8c:	20000a16 	andcs	r0, r0, r6, lsl sl
     b90:	0000005a 	andeq	r0, r0, sl, asr r0
     b94:	00019306 	andeq	r9, r1, r6, lsl #6
     b98:	1b9b0100 	blne	fe6c0fa0 <rear+0xde6bdb68>
     b9c:	00000025 	andeq	r0, r0, r5, lsr #32
     ba0:	00679102 	rsbeq	r9, r7, r2, lsl #2
     ba4:	0f040d00 	svceq	0x00040d00
     ba8:	1c000002 	stcne	0, cr0, [r0], {2}
     bac:	00000492 	muleq	r0, r2, r4
     bb0:	ac0d8a01 			; <UNDEFINED> instruction: 0xac0d8a01
     bb4:	2c200009 	stccs	0, cr0, [r0], #-36	; 0xffffffdc
     bb8:	01000000 	mrseq	r0, (UNDEF: 0)
     bbc:	0005a59c 	muleq	r5, ip, r5
     bc0:	00731700 	rsbseq	r1, r3, r0, lsl #14
     bc4:	4e218a01 	vmulmi.f32	s16, s2, s2
     bc8:	02000005 	andeq	r0, r0, #5
     bcc:	441d7491 	ldrmi	r7, [sp], #-1169	; 0xfffffb6f
     bd0:	01000002 	tsteq	r0, r2
     bd4:	0209338a 	andeq	r3, r9, #671088642	; 0x28000002
     bd8:	91020000 	mrsls	r0, (UNDEF: 2)
     bdc:	046c1d70 	strbteq	r1, [ip], #-3440	; 0xfffff290
     be0:	8a010000 	bhi	40be8 <startup-0x1ffbf418>
     be4:	0000d13d 	andeq	sp, r0, sp, lsr r1
     be8:	6c910200 	lfmvs	f0, 4, [r1], {0}
     bec:	0003df1d 	andeq	sp, r3, sp, lsl pc
     bf0:	488a0100 	stmmi	sl, {r8}
     bf4:	000000d1 	ldrdeq	r0, [r0], -r1
     bf8:	00689102 	rsbeq	r9, r8, r2, lsl #2
     bfc:	0005011b 	andeq	r0, r5, fp, lsl r1
     c00:	06330100 	ldrteq	r0, [r3], -r0, lsl #2
     c04:	20000900 	andcs	r0, r0, r0, lsl #18
     c08:	000000ac 	andeq	r0, r0, ip, lsr #1
     c0c:	05c99c01 	strbeq	r9, [r9, #3073]	; 0xc01
     c10:	6f170000 	svcvs	0x00170000
     c14:	1a330100 	bne	cc101c <startup-0x1f33efe4>
     c18:	000001cc 	andeq	r0, r0, ip, asr #3
     c1c:	00749102 	rsbseq	r9, r4, r2, lsl #2
     c20:	0004be1b 	andeq	fp, r4, fp, lsl lr
     c24:	062d0100 	strteq	r0, [sp], -r0, lsl #2
     c28:	2000089e 	mulcs	r0, lr, r8
     c2c:	00000062 	andeq	r0, r0, r2, rrx
     c30:	06049c01 	streq	r9, [r4], -r1, lsl #24
     c34:	6f170000 	svcvs	0x00170000
     c38:	1b2d0100 	blne	b41040 <startup-0x1f4befc0>
     c3c:	000001cc 	andeq	r0, r0, ip, asr #3
     c40:	196c9102 	stmdbne	ip!, {r1, r8, ip, pc}^
     c44:	200008a6 	andcs	r0, r0, r6, lsr #17
     c48:	00000050 	andeq	r0, r0, r0, asr r0
     c4c:	01006918 	tsteq	r0, r8, lsl r9
     c50:	00d10e2e 	sbcseq	r0, r1, lr, lsr #28
     c54:	91020000 	mrsls	r0, (UNDEF: 2)
     c58:	1b000074 	blne	e30 <startup-0x1ffff1d0>
     c5c:	000004de 	ldrdeq	r0, [r0], -lr
     c60:	3c062701 	stccc	7, cr2, [r6], {1}
     c64:	62200008 	eorvs	r0, r0, #8
     c68:	01000000 	mrseq	r0, (UNDEF: 0)
     c6c:	00063f9c 	muleq	r6, ip, pc	; <UNPREDICTABLE>
     c70:	006f1700 	rsbeq	r1, pc, r0, lsl #14
     c74:	cc1a2701 	ldcgt	7, cr2, [sl], {1}
     c78:	02000001 	andeq	r0, r0, #1
     c7c:	44196c91 	ldrmi	r6, [r9], #-3217	; 0xfffff36f
     c80:	50200008 	eorpl	r0, r0, r8
     c84:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
     c88:	28010069 	stmdacs	r1, {r0, r3, r5, r6}
     c8c:	0000d10e 	andeq	sp, r0, lr, lsl #2
     c90:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     c94:	72160000 	andsvc	r0, r6, #0
     c98:	01000004 	tsteq	r0, r4
     c9c:	081c0622 	ldmdaeq	ip, {r1, r5, r9, sl}
     ca0:	00202000 	eoreq	r2, r0, r0
     ca4:	9c010000 	stcls	0, cr0, [r1], {-0}
     ca8:	00000681 	andeq	r0, r0, r1, lsl #13
     cac:	01006f17 	tsteq	r0, r7, lsl pc
     cb0:	01cc1f22 	biceq	r1, ip, r2, lsr #30
     cb4:	91020000 	mrsls	r0, (UNDEF: 2)
     cb8:	05171d74 	ldreq	r1, [r7, #-3444]	; 0xfffff28c
     cbc:	22010000 	andcs	r0, r1, #0
     cc0:	0000d126 	andeq	sp, r0, r6, lsr #2
     cc4:	70910200 	addsvc	r0, r1, r0, lsl #4
     cc8:	00051e1d 	andeq	r1, r5, sp, lsl lr
     ccc:	32220100 	eorcc	r0, r2, #0, 2
     cd0:	000000d1 	ldrdeq	r0, [r0], -r1
     cd4:	006c9102 	rsbeq	r9, ip, r2, lsl #2
     cd8:	00044b1a 	andeq	r4, r4, sl, lsl fp
     cdc:	061a0100 	ldreq	r0, [sl], -r0, lsl #2
     ce0:	20000000 	andcs	r0, r0, r0
     ce4:	0000000c 	andeq	r0, r0, ip
     ce8:	9e009c01 	cdpls	12, 0, cr9, cr0, cr1, {0}
     cec:	04000000 	streq	r0, [r0], #-0
     cf0:	00044200 	andeq	r4, r4, r0, lsl #4
     cf4:	73010400 	movwvc	r0, #5120	; 0x1400
     cf8:	0c000000 	stceq	0, cr0, [r0], {-0}
     cfc:	0000052d 	andeq	r0, r0, sp, lsr #10
     d00:	00000025 	andeq	r0, r0, r5, lsr #32
     d04:	20000f0c 	andcs	r0, r0, ip, lsl #30
     d08:	000000ac 	andeq	r0, r0, ip, lsr #1
     d0c:	0000093a 	andeq	r0, r0, sl, lsr r9
     d10:	71080102 	tstvc	r8, r2, lsl #2
     d14:	03000001 	movweq	r0, #1
     d18:	000001cc 	andeq	r0, r0, ip, asr #3
     d1c:	90062601 	andls	r2, r6, r1, lsl #12
     d20:	2820000f 	stmdacs	r0!, {r0, r1, r2, r3}
     d24:	01000000 	mrseq	r0, (UNDEF: 0)
     d28:	0000519c 	muleq	r0, ip, r1
     d2c:	736d0400 	cmnvc	sp, #0, 8
     d30:	1f260100 	svcne	0x00260100
     d34:	00000051 	andeq	r0, r0, r1, asr r0
     d38:	00749102 	rsbseq	r9, r4, r2, lsl #2
     d3c:	a1070402 	tstge	r7, r2, lsl #8
     d40:	03000005 	movweq	r0, #5
     d44:	00000050 	andeq	r0, r0, r0, asr r0
     d48:	62061a01 	andvs	r1, r6, #4096	; 0x1000
     d4c:	2e20000f 	cdpcs	0, 2, cr0, cr0, cr15, {0}
     d50:	01000000 	mrseq	r0, (UNDEF: 0)
     d54:	00007d9c 	muleq	r0, ip, sp
     d58:	73750400 	cmnvc	r5, #0, 8
     d5c:	1f1a0100 	svcne	0x001a0100
     d60:	00000051 	andeq	r0, r0, r1, asr r0
     d64:	00749102 	rsbseq	r9, r4, r2, lsl #2
     d68:	00029b05 	andeq	r9, r2, r5, lsl #22
     d6c:	06120100 	ldreq	r0, [r2], -r0, lsl #2
     d70:	20000f50 	andcs	r0, r0, r0, asr pc
     d74:	00000012 	andeq	r0, r0, r2, lsl r0
     d78:	20069c01 	andcs	r9, r6, r1, lsl #24
     d7c:	01000001 	tsteq	r0, r1
     d80:	0f0c0605 	svceq	0x000c0605
     d84:	00442000 	subeq	r2, r4, r0
     d88:	9c010000 	stcls	0, cr0, [r1], {-0}
     d8c:	000b8f00 	andeq	r8, fp, r0, lsl #30
     d90:	c2000400 	andgt	r0, r0, #0, 8
     d94:	04000004 	streq	r0, [r0], #-4
     d98:	00007301 	andeq	r7, r0, r1, lsl #6
     d9c:	06300c00 	ldrteq	r0, [r0], -r0, lsl #24
     da0:	00250000 	eoreq	r0, r5, r0
     da4:	0fb80000 	svceq	0x00b80000
     da8:	013c2000 	teqeq	ip, r0
     dac:	09f10000 	ldmibeq	r1!, {}^	; <UNPREDICTABLE>
     db0:	04020000 	streq	r0, [r2], #-0
     db4:	0005a107 	andeq	sl, r5, r7, lsl #2
     db8:	05040300 	streq	r0, [r4, #-768]	; 0xfffffd00
     dbc:	00746e69 	rsbseq	r6, r4, r9, ror #28
     dc0:	73060102 	movwvc	r0, #24834	; 0x6102
     dc4:	02000001 	andeq	r0, r0, #1
     dc8:	01710801 	cmneq	r1, r1, lsl #16
     dcc:	02020000 	andeq	r0, r2, #0
     dd0:	0007d205 	andeq	sp, r7, r5, lsl #4
     dd4:	07020200 	streq	r0, [r2, -r0, lsl #4]
     dd8:	0000070f 	andeq	r0, r0, pc, lsl #14
     ddc:	e6050402 	str	r0, [r5], -r2, lsl #8
     de0:	02000005 	andeq	r0, r0, #5
     de4:	059c0704 	ldreq	r0, [ip, #1796]	; 0x704
     de8:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
     dec:	0005e105 	andeq	lr, r5, r5, lsl #2
     df0:	07080200 	streq	r0, [r8, -r0, lsl #4]
     df4:	00000597 	muleq	r0, r7, r5
     df8:	00075204 	andeq	r5, r7, r4, lsl #4
     dfc:	19220200 	stmdbne	r2!, {r9}
     e00:	00000077 	andeq	r0, r0, r7, ror r0
     e04:	007d0405 	rsbseq	r0, sp, r5, lsl #8
     e08:	92060000 	andls	r0, r6, #0
     e0c:	04000008 	streq	r0, [r0], #-8
     e10:	0000079f 	muleq	r0, pc, r7	; <UNPREDICTABLE>
     e14:	4f0e2c03 	svcmi	0x000e2c03
     e18:	04000000 	streq	r0, [r0], #-0
     e1c:	000008a7 	andeq	r0, r0, r7, lsr #17
     e20:	4f0e7203 	svcmi	0x000e7203
     e24:	07000000 	streq	r0, [r0, -r0]
     e28:	0000075a 	andeq	r0, r0, sl, asr r7
     e2c:	17015e04 	strne	r5, [r1, -r4, lsl #28]
     e30:	00000025 	andeq	r0, r0, r5, lsr #32
     e34:	a6030408 	strge	r0, [r3], -r8, lsl #8
     e38:	0000c903 	andeq	ip, r0, r3, lsl #18
     e3c:	074c0900 	strbeq	r0, [ip, -r0, lsl #18]
     e40:	a8030000 	stmdage	r3, {}	; <UNPREDICTABLE>
     e44:	00009a0c 	andeq	r9, r0, ip, lsl #20
     e48:	06e60900 	strbteq	r0, [r6], r0, lsl #18
     e4c:	a9030000 	stmdbge	r3, {}	; <UNPREDICTABLE>
     e50:	0000c913 	andeq	ip, r0, r3, lsl r9
     e54:	3a0a0000 	bcc	280e5c <startup-0x1fd7f1a4>
     e58:	d9000000 	stmdble	r0, {}	; <UNPREDICTABLE>
     e5c:	0b000000 	bleq	e64 <startup-0x1ffff19c>
     e60:	00000025 	andeq	r0, r0, r5, lsr #32
     e64:	080c0003 	stmdaeq	ip, {r0, r1}
     e68:	fd09a303 	stc2	3, cr10, [r9, #-12]
     e6c:	0d000000 	stceq	0, cr0, [r0, #-0]
     e70:	0000088a 	andeq	r0, r0, sl, lsl #17
     e74:	2c07a503 	cfstr32cs	mvfx10, [r7], {3}
     e78:	00000000 	andeq	r0, r0, r0
     e7c:	0008990d 	andeq	r9, r8, sp, lsl #18
     e80:	05aa0300 	streq	r0, [sl, #768]!	; 0x300
     e84:	000000a7 	andeq	r0, r0, r7, lsr #1
     e88:	fa040004 	blx	100ea0 <startup-0x1feff160>
     e8c:	03000007 	movweq	r0, #7
     e90:	00d903ab 	sbcseq	r0, r9, fp, lsr #7
     e94:	af040000 	svcge	0x00040000
     e98:	03000006 	movweq	r0, #6
     e9c:	006b1baf 	rsbeq	r1, fp, pc, lsr #23
     ea0:	040e0000 	streq	r0, [lr], #-0
     ea4:	011d0405 	tsteq	sp, r5, lsl #8
     ea8:	01020000 	mrseq	r0, (UNDEF: 2)
     eac:	00017a08 	andeq	r7, r1, r8, lsl #20
     eb0:	011d0f00 	tsteq	sp, r0, lsl #30
     eb4:	f1040000 	cps	#0
     eb8:	05000008 	streq	r0, [r0, #-8]
     ebc:	00561916 	subseq	r1, r6, r6, lsl r9
     ec0:	c0100000 	andsgt	r0, r0, r0
     ec4:	18000006 	stmdane	r0, {r1, r2}
     ec8:	8f082f05 	svchi	0x00082f05
     ecc:	0d000001 	stceq	0, cr0, [r0, #-4]
     ed0:	0000081b 	andeq	r0, r0, fp, lsl r8
     ed4:	8f133105 	svchi	0x00133105
     ed8:	00000001 	andeq	r0, r0, r1
     edc:	006b5f11 	rsbeq	r5, fp, r1, lsl pc
     ee0:	2c073205 	sfmcs	f3, 4, [r7], {5}
     ee4:	04000000 	streq	r0, [r0], #-0
     ee8:	0008750d 	andeq	r7, r8, sp, lsl #10
     eec:	0b320500 	bleq	c822f4 <startup-0x1f37dd0c>
     ef0:	0000002c 	andeq	r0, r0, ip, lsr #32
     ef4:	06a90d08 	strteq	r0, [r9], r8, lsl #26
     ef8:	32050000 	andcc	r0, r5, #0
     efc:	00002c14 	andeq	r2, r0, r4, lsl ip
     f00:	2c0d0c00 	stccs	12, cr0, [sp], {-0}
     f04:	05000009 	streq	r0, [r0, #-9]
     f08:	002c1b32 	eoreq	r1, ip, r2, lsr fp
     f0c:	11100000 	tstne	r0, r0
     f10:	0500785f 	streq	r7, [r0, #-2143]	; 0xfffff7a1
     f14:	01950b33 	orrseq	r0, r5, r3, lsr fp
     f18:	00140000 	andseq	r0, r4, r0
     f1c:	01350405 	teqeq	r5, r5, lsl #8
     f20:	290a0000 	stmdbcs	sl, {}	; <UNPREDICTABLE>
     f24:	a5000001 	strge	r0, [r0, #-1]
     f28:	0b000001 	bleq	f34 <startup-0x1ffff0cc>
     f2c:	00000025 	andeq	r0, r0, r5, lsr #32
     f30:	e1100000 	tst	r0, r0
     f34:	24000006 	strcs	r0, [r0], #-6
     f38:	28083705 	stmdacs	r8, {r0, r2, r8, r9, sl, ip, sp}
     f3c:	0d000002 	stceq	0, cr0, [r0, #-8]
     f40:	000005d8 	ldrdeq	r0, [r0], -r8
     f44:	2c093905 			; <UNDEFINED> instruction: 0x2c093905
     f48:	00000000 	andeq	r0, r0, r0
     f4c:	0008af0d 	andeq	sl, r8, sp, lsl #30
     f50:	093a0500 	ldmdbeq	sl!, {r8, sl}
     f54:	0000002c 	andeq	r0, r0, ip, lsr #32
     f58:	05fb0d04 	ldrbeq	r0, [fp, #3332]!	; 0xd04
     f5c:	3b050000 	blcc	140f64 <startup-0x1febf09c>
     f60:	00002c09 	andeq	r2, r0, r9, lsl #24
     f64:	9c0d0800 	stcls	8, cr0, [sp], {-0}
     f68:	05000009 	streq	r0, [r0, #-9]
     f6c:	002c093c 	eoreq	r0, ip, ip, lsr r9
     f70:	0d0c0000 	stceq	0, cr0, [ip, #-0]
     f74:	00000783 	andeq	r0, r0, r3, lsl #15
     f78:	2c093d05 	stccs	13, cr3, [r9], {5}
     f7c:	10000000 	andne	r0, r0, r0
     f80:	0007690d 	andeq	r6, r7, sp, lsl #18
     f84:	093e0500 	ldmdbeq	lr!, {r8, sl}
     f88:	0000002c 	andeq	r0, r0, ip, lsr #32
     f8c:	09310d14 	ldmdbeq	r1!, {r2, r4, r8, sl, fp}
     f90:	3f050000 	svccc	0x00050000
     f94:	00002c09 	andeq	r2, r0, r9, lsl #24
     f98:	dc0d1800 	stcle	8, cr1, [sp], {-0}
     f9c:	05000007 	streq	r0, [r0, #-7]
     fa0:	002c0940 	eoreq	r0, ip, r0, asr #18
     fa4:	0d1c0000 	ldceq	0, cr0, [ip, #-0]
     fa8:	00000963 	andeq	r0, r0, r3, ror #18
     fac:	2c094105 	stfcss	f4, [r9], {5}
     fb0:	20000000 	andcs	r0, r0, r0
     fb4:	060a1200 	streq	r1, [sl], -r0, lsl #4
     fb8:	01080000 	mrseq	r0, (UNDEF: 8)
     fbc:	6d084a05 	vstrvs	s8, [r8, #-20]	; 0xffffffec
     fc0:	0d000002 	stceq	0, cr0, [r0, #-8]
     fc4:	0000069c 	muleq	r0, ip, r6
     fc8:	6d0a4b05 	vstrvs	d4, [sl, #-20]	; 0xffffffec
     fcc:	00000002 	andeq	r0, r0, r2
     fd0:	00054b0d 	andeq	r4, r5, sp, lsl #22
     fd4:	094c0500 	stmdbeq	ip, {r8, sl}^
     fd8:	0000026d 	andeq	r0, r0, sp, ror #4
     fdc:	08e31380 	stmiaeq	r3!, {r7, r8, r9, ip}^
     fe0:	4e050000 	cdpmi	0, 0, cr0, cr5, cr0, {0}
     fe4:	0001290a 	andeq	r2, r1, sl, lsl #18
     fe8:	13010000 	movwne	r0, #4096	; 0x1000
     fec:	00000655 	andeq	r0, r0, r5, asr r6
     ff0:	290a5105 	stmdbcs	sl, {r0, r2, r8, ip, lr}
     ff4:	04000001 	streq	r0, [r0], #-1
     ff8:	150a0001 	strne	r0, [sl, #-1]
     ffc:	7d000001 	stcvc	0, cr0, [r0, #-4]
    1000:	0b000002 	bleq	1010 <startup-0x1fffeff0>
    1004:	00000025 	andeq	r0, r0, r5, lsr #32
    1008:	8c12001f 	ldchi	0, cr0, [r2], {31}
    100c:	90000007 	andls	r0, r0, r7
    1010:	085d0501 	ldmdaeq	sp, {r0, r8, sl}^
    1014:	000002c0 	andeq	r0, r0, r0, asr #5
    1018:	00081b0d 	andeq	r1, r8, sp, lsl #22
    101c:	125e0500 	subsne	r0, lr, #0, 10
    1020:	000002c0 	andeq	r0, r0, r0, asr #5
    1024:	083a0d00 	ldmdaeq	sl!, {r8, sl, fp}
    1028:	5f050000 	svcpl	0x00050000
    102c:	00002c06 	andeq	r2, r0, r6, lsl #24
    1030:	a40d0400 	strge	r0, [sp], #-1024	; 0xfffffc00
    1034:	05000006 	streq	r0, [r0, #-6]
    1038:	02c60961 	sbceq	r0, r6, #1589248	; 0x184000
    103c:	0d080000 	stceq	0, cr0, [r8, #-0]
    1040:	0000060a 	andeq	r0, r0, sl, lsl #12
    1044:	281e6205 	ldmdacs	lr, {r0, r2, r9, sp, lr}
    1048:	88000002 	stmdahi	r0, {r1}
    104c:	7d040500 	cfstr32vc	mvfx0, [r4, #-0]
    1050:	0a000002 	beq	1060 <startup-0x1fffefa0>
    1054:	000002d6 	ldrdeq	r0, [r0], -r6
    1058:	000002d6 	ldrdeq	r0, [r0], -r6
    105c:	0000250b 	andeq	r2, r0, fp, lsl #10
    1060:	05001f00 	streq	r1, [r0, #-3840]	; 0xfffff100
    1064:	0002dc04 	andeq	sp, r2, r4, lsl #24
    1068:	e6101400 	ldr	r1, [r0], -r0, lsl #8
    106c:	08000007 	stmdaeq	r0, {r0, r1, r2}
    1070:	05087505 	streq	r7, [r8, #-1285]	; 0xfffffafb
    1074:	0d000003 	stceq	0, cr0, [r0, #-12]
    1078:	000005f5 	strdeq	r0, [r0], -r5
    107c:	05117605 	ldreq	r7, [r1, #-1541]	; 0xfffff9fb
    1080:	00000003 	andeq	r0, r0, r3
    1084:	00055e0d 	andeq	r5, r5, sp, lsl #28
    1088:	06770500 	ldrbteq	r0, [r7], -r0, lsl #10
    108c:	0000002c 	andeq	r0, r0, ip, lsr #32
    1090:	04050004 	streq	r0, [r5], #-4
    1094:	0000003a 	andeq	r0, r0, sl, lsr r0
    1098:	00080510 	andeq	r0, r8, r0, lsl r5
    109c:	b5056800 	strlt	r6, [r5, #-2048]	; 0xfffff800
    10a0:	00044e08 	andeq	r4, r4, r8, lsl #28
    10a4:	705f1100 	subsvc	r1, pc, r0, lsl #2
    10a8:	12b60500 	adcsne	r0, r6, #0, 10
    10ac:	00000305 	andeq	r0, r0, r5, lsl #6
    10b0:	725f1100 	subsvc	r1, pc, #0, 2
    10b4:	07b70500 	ldreq	r0, [r7, r0, lsl #10]!
    10b8:	0000002c 	andeq	r0, r0, ip, lsr #32
    10bc:	775f1104 	ldrbvc	r1, [pc, -r4, lsl #2]
    10c0:	07b80500 	ldreq	r0, [r8, r0, lsl #10]!
    10c4:	0000002c 	andeq	r0, r0, ip, lsr #32
    10c8:	064e0d08 	strbeq	r0, [lr], -r8, lsl #26
    10cc:	b9050000 	stmdblt	r5, {}	; <UNPREDICTABLE>
    10d0:	00004109 	andeq	r4, r0, r9, lsl #2
    10d4:	fd0d0c00 	stc2	12, cr0, [sp, #-0]
    10d8:	05000006 	streq	r0, [r0, #-6]
    10dc:	004109ba 	strheq	r0, [r1], #-154	; 0xffffff66
    10e0:	110e0000 	mrsne	r0, (UNDEF: 14)
    10e4:	0066625f 	rsbeq	r6, r6, pc, asr r2
    10e8:	dd11bb05 	vldrle	d11, [r1, #-20]	; 0xffffffec
    10ec:	10000002 	andne	r0, r0, r2
    10f0:	0005ae0d 	andeq	sl, r5, sp, lsl #28
    10f4:	07bc0500 	ldreq	r0, [ip, r0, lsl #10]!
    10f8:	0000002c 	andeq	r0, r0, ip, lsr #32
    10fc:	06180d18 			; <UNDEFINED> instruction: 0x06180d18
    1100:	c3050000 	movwgt	r0, #20480	; 0x5000
    1104:	0001150a 	andeq	r1, r1, sl, lsl #10
    1108:	c10d1c00 	tstgt	sp, r0, lsl #24
    110c:	05000002 	streq	r0, [r0, #-2]
    1110:	05c01dc5 	strbeq	r1, [r0, #3525]	; 0xdc5
    1114:	0d200000 	stceq	0, cr0, [r0, #-0]
    1118:	000002e1 	andeq	r0, r0, r1, ror #5
    111c:	ea1dc705 	b	772d38 <startup-0x1f88d2c8>
    1120:	24000005 	strcs	r0, [r0], #-5
    1124:	0008a10d 	andeq	sl, r8, sp, lsl #2
    1128:	0dca0500 	cfstr64eq	mvdx0, [sl]
    112c:	0000060e 	andeq	r0, r0, lr, lsl #12
    1130:	097d0d28 	ldmdbeq	sp!, {r3, r5, r8, sl, fp}^
    1134:	cb050000 	blgt	14113c <startup-0x1febeec4>
    1138:	00062809 	andeq	r2, r6, r9, lsl #16
    113c:	5f112c00 	svcpl	0x00112c00
    1140:	05006275 	streq	r6, [r0, #-629]	; 0xfffffd8b
    1144:	02dd11ce 	sbcseq	r1, sp, #-2147483597	; 0x80000033
    1148:	11300000 	teqne	r0, r0
    114c:	0070755f 	rsbseq	r7, r0, pc, asr r5
    1150:	0512cf05 	ldreq	ip, [r2, #-3845]	; 0xfffff0fb
    1154:	38000003 	stmdacc	r0, {r0, r1}
    1158:	72755f11 	rsbsvc	r5, r5, #17, 30	; 0x44
    115c:	07d00500 	ldrbeq	r0, [r0, r0, lsl #10]
    1160:	0000002c 	andeq	r0, r0, ip, lsr #32
    1164:	05ef0d3c 	strbeq	r0, [pc, #3388]!	; 1ea8 <startup-0x1fffe158>
    1168:	d3050000 	movwle	r0, #20480	; 0x5000
    116c:	00062e11 	andeq	r2, r6, r1, lsl lr
    1170:	550d4000 	strpl	r4, [sp, #-0]
    1174:	05000009 	streq	r0, [r0, #-9]
    1178:	063e11d4 			; <UNDEFINED> instruction: 0x063e11d4
    117c:	11430000 	mrsne	r0, (UNDEF: 67)
    1180:	00626c5f 	rsbeq	r6, r2, pc, asr ip
    1184:	dd11d705 	ldcle	7, cr13, [r1, #-20]	; 0xffffffec
    1188:	44000002 	strmi	r0, [r0], #-2
    118c:	0006640d 	andeq	r6, r6, sp, lsl #8
    1190:	07da0500 	ldrbeq	r0, [sl, r0, lsl #10]
    1194:	0000002c 	andeq	r0, r0, ip, lsr #32
    1198:	06750d4c 	ldrbteq	r0, [r5], -ip, asr #26
    119c:	db050000 	blle	1411a4 <startup-0x1febee5c>
    11a0:	0000820a 	andeq	r8, r0, sl, lsl #4
    11a4:	430d5000 	movwmi	r5, #53248	; 0xd000
    11a8:	05000002 	streq	r0, [r0, #-2]
    11ac:	046c12de 	strbteq	r1, [ip], #-734	; 0xfffffd22
    11b0:	0d540000 	ldcleq	0, cr0, [r4, #-0]
    11b4:	00000893 	muleq	r0, r3, r8
    11b8:	090ce205 	stmdbeq	ip, {r0, r2, r9, sp, lr, pc}
    11bc:	58000001 	stmdapl	r0, {r0}
    11c0:	00080d0d 	andeq	r0, r8, sp, lsl #26
    11c4:	0ee40500 	cdpeq	5, 14, cr0, cr4, cr0, {0}
    11c8:	000000fd 	strdeq	r0, [r0], -sp
    11cc:	07610d5c 			; <UNDEFINED> instruction: 0x07610d5c
    11d0:	e5050000 	str	r0, [r5, #-0]
    11d4:	00002c09 	andeq	r2, r0, r9, lsl #24
    11d8:	15006400 	strne	r6, [r0, #-1024]	; 0xfffffc00
    11dc:	0000002c 	andeq	r0, r0, ip, lsr #32
    11e0:	0000046c 	andeq	r0, r0, ip, ror #8
    11e4:	00046c16 	andeq	r6, r4, r6, lsl ip
    11e8:	01151600 	tsteq	r5, r0, lsl #12
    11ec:	17160000 	ldrne	r0, [r6, -r0]
    11f0:	16000001 	strne	r0, [r0], -r1
    11f4:	0000002c 	andeq	r0, r0, ip, lsr #32
    11f8:	77040500 	strvc	r0, [r4, -r0, lsl #10]
    11fc:	0f000004 	svceq	0x00000004
    1200:	0000046c 	andeq	r0, r0, ip, ror #8
    1204:	00087d17 	andeq	r7, r8, r7, lsl sp
    1208:	05042800 	streq	r2, [r4, #-2048]	; 0xfffff800
    120c:	c0080260 	andgt	r0, r8, r0, ror #4
    1210:	18000005 	stmdane	r0, {r0, r2}
    1214:	000007cb 	andeq	r0, r0, fp, asr #15
    1218:	07026205 	streq	r6, [r2, -r5, lsl #4]
    121c:	0000002c 	andeq	r0, r0, ip, lsr #32
    1220:	065d1800 	ldrbeq	r1, [sp], -r0, lsl #16
    1224:	67050000 	strvs	r0, [r5, -r0]
    1228:	069a0b02 	ldreq	r0, [sl], r2, lsl #22
    122c:	18040000 	stmdane	r4, {}	; <UNPREDICTABLE>
    1230:	000006ed 	andeq	r0, r0, sp, ror #13
    1234:	14026705 	strne	r6, [r2], #-1797	; 0xfffff8fb
    1238:	0000069a 	muleq	r0, sl, r6
    123c:	06b81808 	ldrteq	r1, [r8], r8, lsl #16
    1240:	67050000 	strvs	r0, [r5, -r0]
    1244:	069a1e02 	ldreq	r1, [sl], r2, lsl #28
    1248:	180c0000 	stmdane	ip, {}	; <UNPREDICTABLE>
    124c:	00000835 	andeq	r0, r0, r5, lsr r8
    1250:	08026905 	stmdaeq	r2, {r0, r2, r8, fp, sp, lr}
    1254:	0000002c 	andeq	r0, r0, ip, lsr #32
    1258:	056c1810 	strbeq	r1, [ip, #-2064]!	; 0xfffff7f0
    125c:	6a050000 	bvs	141264 <startup-0x1febed9c>
    1260:	089a0802 	ldmeq	sl, {r1, fp}
    1264:	18140000 	ldmdane	r4, {}	; <UNPREDICTABLE>
    1268:	0000085c 	andeq	r0, r0, ip, asr r8
    126c:	07026d05 	streq	r6, [r2, -r5, lsl #26]
    1270:	0000002c 	andeq	r0, r0, ip, lsr #32
    1274:	084a1830 	stmdaeq	sl, {r4, r5, fp, ip}^
    1278:	6e050000 	cdpvs	0, 0, cr0, cr5, cr0, {0}
    127c:	08af1602 	stmiaeq	pc!, {r1, r9, sl, ip}	; <UNPREDICTABLE>
    1280:	18340000 	ldmdane	r4!, {}	; <UNPREDICTABLE>
    1284:	00000794 	muleq	r0, r4, r7
    1288:	07027005 	streq	r7, [r2, -r5]
    128c:	0000002c 	andeq	r0, r0, ip, lsr #32
    1290:	08521838 	ldmdaeq	r2, {r3, r4, r5, fp, ip}^
    1294:	72050000 	andvc	r0, r5, #0
    1298:	08c00a02 	stmiaeq	r0, {r1, r9, fp}^
    129c:	183c0000 	ldmdane	ip!, {}	; <UNPREDICTABLE>
    12a0:	00000744 	andeq	r0, r0, r4, asr #14
    12a4:	13027505 	movwne	r7, #9477	; 0x2505
    12a8:	0000018f 	andeq	r0, r0, pc, lsl #3
    12ac:	06d71840 	ldrbeq	r1, [r7], r0, asr #16
    12b0:	76050000 	strvc	r0, [r5], -r0
    12b4:	002c0702 	eoreq	r0, ip, r2, lsl #14
    12b8:	18440000 	stmdane	r4, {}^	; <UNPREDICTABLE>
    12bc:	00000997 	muleq	r0, r7, r9
    12c0:	13027705 	movwne	r7, #9989	; 0x2705
    12c4:	0000018f 	andeq	r0, r0, pc, lsl #3
    12c8:	07a61848 	streq	r1, [r6, r8, asr #16]!
    12cc:	78050000 	stmdavc	r5, {}	; <UNPREDICTABLE>
    12d0:	08c61402 	stmiaeq	r6, {r1, sl, ip}^
    12d4:	184c0000 	stmdane	ip, {}^	; <UNPREDICTABLE>
    12d8:	000006f5 	strdeq	r0, [r0], -r5
    12dc:	07027b05 	streq	r7, [r2, -r5, lsl #22]
    12e0:	0000002c 	andeq	r0, r0, ip, lsr #32
    12e4:	066d1850 			; <UNDEFINED> instruction: 0x066d1850
    12e8:	7c050000 	stcvc	0, cr0, [r5], {-0}
    12ec:	01170902 	tsteq	r7, r2, lsl #18
    12f0:	18540000 	ldmdane	r4, {}^	; <UNPREDICTABLE>
    12f4:	000007c4 	andeq	r0, r0, r4, asr #15
    12f8:	07029f05 	streq	r9, [r2, -r5, lsl #30]
    12fc:	00000875 	andeq	r0, r0, r5, ror r8
    1300:	078c1958 			; <UNDEFINED> instruction: 0x078c1958
    1304:	a3050000 	movwge	r0, #20480	; 0x5000
    1308:	02c01302 	sbceq	r1, r0, #134217728	; 0x8000000
    130c:	01480000 	mrseq	r0, (UNDEF: 72)
    1310:	00072219 	andeq	r2, r7, r9, lsl r2
    1314:	02a40500 	adceq	r0, r4, #0, 10
    1318:	00027d12 	andeq	r7, r2, r2, lsl sp
    131c:	19014c00 	stmdbne	r1, {sl, fp, lr}
    1320:	0000094b 	andeq	r0, r0, fp, asr #18
    1324:	0c02a805 	stceq	8, cr10, [r2], {5}
    1328:	000008d7 	ldrdeq	r0, [r0], -r7
    132c:	201902dc 			; <UNDEFINED> instruction: 0x201902dc
    1330:	05000006 	streq	r0, [r0, #-6]
    1334:	5b1002ad 	blpl	401df0 <startup-0x1fbfe210>
    1338:	e0000006 	and	r0, r0, r6
    133c:	06051902 	streq	r1, [r5], -r2, lsl #18
    1340:	af050000 	svcge	0x00050000
    1344:	08e30a02 	stmiaeq	r3!, {r1, r9, fp}^
    1348:	02ec0000 	rsceq	r0, ip, #0
    134c:	4e040500 	cfsh32mi	mvfx0, mvfx4, #0
    1350:	15000004 	strne	r0, [r0, #-4]
    1354:	0000002c 	andeq	r0, r0, ip, lsr #32
    1358:	000005e4 	andeq	r0, r0, r4, ror #11
    135c:	00046c16 	andeq	r6, r4, r6, lsl ip
    1360:	01151600 	tsteq	r5, r0, lsl #12
    1364:	e4160000 	ldr	r0, [r6], #-0
    1368:	16000005 	strne	r0, [r0], -r5
    136c:	0000002c 	andeq	r0, r0, ip, lsr #32
    1370:	24040500 	strcs	r0, [r4], #-1280	; 0xfffffb00
    1374:	05000001 	streq	r0, [r0, #-1]
    1378:	0005c604 	andeq	ip, r5, r4, lsl #12
    137c:	008e1500 	addeq	r1, lr, r0, lsl #10
    1380:	060e0000 	streq	r0, [lr], -r0
    1384:	6c160000 	ldcvs	0, cr0, [r6], {-0}
    1388:	16000004 	strne	r0, [r0], -r4
    138c:	00000115 	andeq	r0, r0, r5, lsl r1
    1390:	00008e16 	andeq	r8, r0, r6, lsl lr
    1394:	002c1600 	eoreq	r1, ip, r0, lsl #12
    1398:	05000000 	streq	r0, [r0, #-0]
    139c:	0005f004 	andeq	pc, r5, r4
    13a0:	002c1500 	eoreq	r1, ip, r0, lsl #10
    13a4:	06280000 	strteq	r0, [r8], -r0
    13a8:	6c160000 	ldcvs	0, cr0, [r6], {-0}
    13ac:	16000004 	strne	r0, [r0], -r4
    13b0:	00000115 	andeq	r0, r0, r5, lsl r1
    13b4:	14040500 	strne	r0, [r4], #-1280	; 0xfffffb00
    13b8:	0a000006 	beq	13d8 <startup-0x1fffec28>
    13bc:	0000003a 	andeq	r0, r0, sl, lsr r0
    13c0:	0000063e 	andeq	r0, r0, lr, lsr r6
    13c4:	0000250b 	andeq	r2, r0, fp, lsl #10
    13c8:	0a000200 	beq	1bd0 <startup-0x1fffe430>
    13cc:	0000003a 	andeq	r0, r0, sl, lsr r0
    13d0:	0000064e 	andeq	r0, r0, lr, asr #12
    13d4:	0000250b 	andeq	r2, r0, fp, lsl #10
    13d8:	07000000 	streq	r0, [r0, -r0]
    13dc:	000007f3 	strdeq	r0, [r0], -r3
    13e0:	1a011f05 	bne	48ffc <startup-0x1ffb7004>
    13e4:	0000030b 	andeq	r0, r0, fp, lsl #6
    13e8:	00093b1a 	andeq	r3, r9, sl, lsl fp
    13ec:	23050c00 	movwcs	r0, #23552	; 0x5c00
    13f0:	06940801 	ldreq	r0, [r4], r1, lsl #16
    13f4:	1b180000 	blne	6013fc <startup-0x1f9fec04>
    13f8:	05000008 	streq	r0, [r0, #-8]
    13fc:	94110125 	ldrls	r0, [r1], #-293	; 0xfffffedb
    1400:	00000006 	andeq	r0, r0, r6
    1404:	00070318 	andeq	r0, r7, r8, lsl r3
    1408:	01260500 			; <UNDEFINED> instruction: 0x01260500
    140c:	00002c07 	andeq	r2, r0, r7, lsl #24
    1410:	ed180400 	cfldrs	mvf0, [r8, #-0]
    1414:	05000007 	streq	r0, [r0, #-7]
    1418:	9a0b0127 	bls	2c18bc <startup-0x1fd3e744>
    141c:	08000006 	stmdaeq	r0, {r1, r2}
    1420:	5b040500 	blpl	102828 <startup-0x1fefd7d8>
    1424:	05000006 	streq	r0, [r0, #-6]
    1428:	00064e04 	andeq	r4, r6, r4, lsl #28
    142c:	05641a00 	strbeq	r1, [r4, #-2560]!	; 0xfffff600
    1430:	050e0000 	streq	r0, [lr, #-0]
    1434:	d908013f 	stmdble	r8, {r0, r1, r2, r3, r4, r5, r8}
    1438:	18000006 	stmdane	r0, {r1, r2}
    143c:	00000884 	andeq	r0, r0, r4, lsl #17
    1440:	12014005 	andne	r4, r1, #5
    1444:	000006d9 	ldrdeq	r0, [r0], -r9
    1448:	08c11800 	stmiaeq	r1, {fp, ip}^
    144c:	41050000 	mrsmi	r0, (UNDEF: 5)
    1450:	06d91201 	ldrbeq	r1, [r9], r1, lsl #4
    1454:	18060000 	stmdane	r6, {}	; <UNPREDICTABLE>
    1458:	000008ec 	andeq	r0, r0, ip, ror #17
    145c:	12014205 	andne	r4, r1, #1342177280	; 0x50000000
    1460:	00000048 	andeq	r0, r0, r8, asr #32
    1464:	480a000c 	stmdami	sl, {r2, r3}
    1468:	e9000000 	stmdb	r0, {}	; <UNPREDICTABLE>
    146c:	0b000006 	bleq	148c <startup-0x1fffeb74>
    1470:	00000025 	andeq	r0, r0, r5, lsr #32
    1474:	d01b0002 	andsle	r0, fp, r2
    1478:	07028005 	streq	r8, [r2, -r5]
    147c:	000007fe 	strdeq	r0, [r0], -lr
    1480:	00091f18 	andeq	r1, r9, r8, lsl pc
    1484:	02820500 	addeq	r0, r2, #0, 10
    1488:	00002518 	andeq	r2, r0, r8, lsl r5
    148c:	c7180000 	ldrgt	r0, [r8, -r0]
    1490:	05000008 	streq	r0, [r0, #-8]
    1494:	17120283 	ldrne	r0, [r2, -r3, lsl #5]
    1498:	04000001 	streq	r0, [r0], #-1
    149c:	00073718 	andeq	r3, r7, r8, lsl r7
    14a0:	02840500 	addeq	r0, r4, #0, 10
    14a4:	0007fe10 	andeq	pc, r7, r0, lsl lr	; <UNPREDICTABLE>
    14a8:	6e180800 	cdpvs	8, 1, cr0, cr8, cr0, {0}
    14ac:	05000009 	streq	r0, [r0, #-9]
    14b0:	a5170285 	ldrge	r0, [r7, #-645]	; 0xfffffd7b
    14b4:	24000001 	strcs	r0, [r0], #-1
    14b8:	0006c818 	andeq	ip, r6, r8, lsl r8
    14bc:	02860500 	addeq	r0, r6, #0, 10
    14c0:	00002c0f 	andeq	r2, r0, pc, lsl #24
    14c4:	16184800 	ldrne	r4, [r8], -r0, lsl #16
    14c8:	05000008 	streq	r0, [r0, #-8]
    14cc:	642c0287 	strtvs	r0, [ip], #-647	; 0xfffffd79
    14d0:	50000000 	andpl	r0, r0, r0
    14d4:	00098418 	andeq	r8, r9, r8, lsl r4
    14d8:	02880500 	addeq	r0, r8, #0, 10
    14dc:	0006a01a 	andeq	sl, r6, sl, lsl r0
    14e0:	28185800 	ldmdacs	r8, {fp, ip, lr}
    14e4:	05000008 	streq	r0, [r0, #-8]
    14e8:	fd160289 	ldc2	2, cr0, [r6, #-548]	; 0xfffffddc
    14ec:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
    14f0:	00098918 	andeq	r8, r9, r8, lsl r9
    14f4:	028a0500 	addeq	r0, sl, #0, 10
    14f8:	0000fd16 	andeq	pc, r0, r6, lsl sp	; <UNPREDICTABLE>
    14fc:	b0187000 	andslt	r7, r8, r0
    1500:	05000007 	streq	r0, [r0, #-7]
    1504:	fd16028b 	ldc2	2, cr0, [r6, #-556]	; 0xfffffdd4
    1508:	78000000 	stmdavc	r0, {}	; <UNPREDICTABLE>
    150c:	00094118 	andeq	r4, r9, r8, lsl r1
    1510:	028c0500 	addeq	r0, ip, #0, 10
    1514:	00080e10 	andeq	r0, r8, r0, lsl lr
    1518:	2b188000 	blcs	621520 <startup-0x1f9deae0>
    151c:	05000007 	streq	r0, [r0, #-7]
    1520:	1e10028d 	cdpne	2, 1, cr0, cr0, cr13, {4}
    1524:	88000008 	stmdahi	r0, {r3}
    1528:	0008f918 	andeq	pc, r8, r8, lsl r9	; <UNPREDICTABLE>
    152c:	028e0500 	addeq	r0, lr, #0, 10
    1530:	00002c0f 	andeq	r2, r0, pc, lsl #24
    1534:	8e18a000 	cdphi	0, 1, cr10, cr8, cr0, {0}
    1538:	05000006 	streq	r0, [r0, #-6]
    153c:	fd16028f 	ldc2	2, cr0, [r6, #-572]	; 0xfffffdc4
    1540:	a4000000 	strge	r0, [r0], #-0
    1544:	0005c918 	andeq	ip, r5, r8, lsl r9
    1548:	02900500 	addseq	r0, r0, #0, 10
    154c:	0000fd16 	andeq	pc, r0, r6, lsl sp	; <UNPREDICTABLE>
    1550:	7d18ac00 	ldcvc	12, cr10, [r8, #-0]
    1554:	05000006 	streq	r0, [r0, #-6]
    1558:	fd160291 	ldc2	2, cr0, [r6, #-580]	; 0xfffffdbc
    155c:	b4000000 	strlt	r0, [r0], #-0
    1560:	00057718 	andeq	r7, r5, r8, lsl r7
    1564:	02920500 	addseq	r0, r2, #0, 10
    1568:	0000fd16 	andeq	pc, r0, r6, lsl sp	; <UNPREDICTABLE>
    156c:	8618bc00 	ldrhi	fp, [r8], -r0, lsl #24
    1570:	05000005 	streq	r0, [r0, #-5]
    1574:	fd160293 	ldc2	2, cr0, [r6, #-588]	; 0xfffffdb4
    1578:	c4000000 	strgt	r0, [r0], #-0
    157c:	0007c918 	andeq	ip, r7, r8, lsl r9
    1580:	02940500 	addseq	r0, r4, #0, 10
    1584:	00002c08 	andeq	r2, r0, r8, lsl #24
    1588:	0a00cc00 	beq	34590 <startup-0x1ffcba70>
    158c:	0000011d 	andeq	r0, r0, sp, lsl r1
    1590:	0000080e 	andeq	r0, r0, lr, lsl #16
    1594:	0000250b 	andeq	r2, r0, fp, lsl #10
    1598:	0a001900 	beq	79a0 <startup-0x1fff8660>
    159c:	0000011d 	andeq	r0, r0, sp, lsl r1
    15a0:	0000081e 	andeq	r0, r0, lr, lsl r8
    15a4:	0000250b 	andeq	r2, r0, fp, lsl #10
    15a8:	0a000700 	beq	31b0 <startup-0x1fffce50>
    15ac:	0000011d 	andeq	r0, r0, sp, lsl r1
    15b0:	0000082e 	andeq	r0, r0, lr, lsr #16
    15b4:	0000250b 	andeq	r2, r0, fp, lsl #10
    15b8:	1b001700 	blne	71c0 <startup-0x1fff8e40>
    15bc:	029905f0 	addseq	r0, r9, #240, 10	; 0x3c000000
    15c0:	00085507 	andeq	r5, r8, r7, lsl #10
    15c4:	077c1800 	ldrbeq	r1, [ip, -r0, lsl #16]!
    15c8:	9c050000 	stcls	0, cr0, [r5], {-0}
    15cc:	08551b02 	ldmdaeq	r5, {r1, r8, r9, fp, ip}^
    15d0:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    15d4:	00000773 	andeq	r0, r0, r3, ror r7
    15d8:	18029d05 	stmdane	r2, {r0, r2, r8, sl, fp, ip, pc}
    15dc:	00000865 	andeq	r0, r0, r5, ror #16
    15e0:	050a0078 	streq	r0, [sl, #-120]	; 0xffffff88
    15e4:	65000003 	strvs	r0, [r0, #-3]
    15e8:	0b000008 	bleq	1610 <startup-0x1fffe9f0>
    15ec:	00000025 	andeq	r0, r0, r5, lsr #32
    15f0:	250a001d 	strcs	r0, [sl, #-29]	; 0xffffffe3
    15f4:	75000000 	strvc	r0, [r0, #-0]
    15f8:	0b000008 	bleq	1620 <startup-0x1fffe9e0>
    15fc:	00000025 	andeq	r0, r0, r5, lsr #32
    1600:	f01c001d 			; <UNDEFINED> instruction: 0xf01c001d
    1604:	03027e05 	movweq	r7, #11781	; 0x2e05
    1608:	0000089a 	muleq	r0, sl, r8
    160c:	00087d1d 	andeq	r7, r8, sp, lsl sp
    1610:	02950500 	addseq	r0, r5, #0, 10
    1614:	0006e90b 	andeq	lr, r6, fp, lsl #18
    1618:	095b1d00 	ldmdbeq	fp, {r8, sl, fp, ip}^
    161c:	9e050000 	cdpls	0, 0, cr0, cr5, cr0, {0}
    1620:	082e0b02 	stmdaeq	lr!, {r1, r8, r9, fp}
    1624:	0a000000 	beq	162c <startup-0x1fffe9d4>
    1628:	0000011d 	andeq	r0, r0, sp, lsl r1
    162c:	000008aa 	andeq	r0, r0, sl, lsr #17
    1630:	0000250b 	andeq	r2, r0, fp, lsl #10
    1634:	06001800 	streq	r1, [r0], -r0, lsl #16
    1638:	000005be 			; <UNDEFINED> instruction: 0x000005be
    163c:	08aa0405 	stmiaeq	sl!, {r0, r2, sl}
    1640:	c01e0000 	andsgt	r0, lr, r0
    1644:	16000008 	strne	r0, [r0], -r8
    1648:	0000046c 	andeq	r0, r0, ip, ror #8
    164c:	b5040500 	strlt	r0, [r4, #-1280]	; 0xfffffb00
    1650:	05000008 	streq	r0, [r0, #-8]
    1654:	00018f04 	andeq	r8, r1, r4, lsl #30
    1658:	08d71e00 	ldmeq	r7, {r9, sl, fp, ip}^
    165c:	2c160000 	ldccs	0, cr0, [r6], {-0}
    1660:	00000000 	andeq	r0, r0, r0
    1664:	08dd0405 	ldmeq	sp, {r0, r2, sl}^
    1668:	04050000 	streq	r0, [r5], #-0
    166c:	000008cc 	andeq	r0, r0, ip, asr #17
    1670:	00064e0a 	andeq	r4, r6, sl, lsl #28
    1674:	0008f300 	andeq	pc, r8, r0, lsl #6
    1678:	00250b00 	eoreq	r0, r5, r0, lsl #22
    167c:	00020000 	andeq	r0, r2, r0
    1680:	0009131f 	andeq	r1, r9, pc, lsl r3
    1684:	032e0500 			; <UNDEFINED> instruction: 0x032e0500
    1688:	00046c17 	andeq	r6, r4, r7, lsl ip
    168c:	090c1f00 	stmdbeq	ip, {r8, r9, sl, fp, ip}
    1690:	2f050000 	svccs	0x00050000
    1694:	04721d03 	ldrbteq	r1, [r2], #-3331	; 0xfffff2fd
    1698:	a4100000 	ldrge	r0, [r0], #-0
    169c:	02000003 	andeq	r0, r0, #3
    16a0:	31100106 	tstcc	r0, r6, lsl #2
    16a4:	11000009 	tstne	r0, r9
    16a8:	02060078 	andeq	r0, r6, #120	; 0x78
    16ac:	00003a13 	andeq	r3, r0, r3, lsl sl
    16b0:	79110000 	ldmdbvc	r1, {}	; <UNPREDICTABLE>
    16b4:	13030600 	movwne	r0, #13824	; 0x3600
    16b8:	0000003a 	andeq	r0, r0, sl, lsr r0
    16bc:	be040001 	cdplt	0, 0, cr0, cr4, cr1, {0}
    16c0:	06000003 	streq	r0, [r0], -r3
    16c4:	090d0204 	stmdbeq	sp, {r2, r9}
    16c8:	36100000 	ldrcc	r0, [r0], -r0
    16cc:	2c000004 	stccs	0, cr0, [r0], {4}
    16d0:	7e100806 	cdpvc	8, 1, cr0, cr0, cr6, {0}
    16d4:	0d000009 	stceq	0, cr0, [r0, #-36]	; 0xffffffdc
    16d8:	000004f7 	strdeq	r0, [r0], -r7
    16dc:	2c090906 			; <UNDEFINED> instruction: 0x2c090906
    16e0:	00000000 	andeq	r0, r0, r0
    16e4:	0004300d 	andeq	r3, r4, sp
    16e8:	090a0600 	stmdbeq	sl, {r9, sl}
    16ec:	0000002c 	andeq	r0, r0, ip, lsr #32
    16f0:	04400d04 	strbeq	r0, [r0], #-3332	; 0xfffff2fc
    16f4:	0b060000 	bleq	1816fc <startup-0x1fe7e904>
    16f8:	00002c09 	andeq	r2, r0, r9, lsl #24
    16fc:	70110800 	andsvc	r0, r1, r0, lsl #16
    1700:	0c060078 	stceq	0, cr0, [r6], {120}	; 0x78
    1704:	00097e0b 	andeq	r7, r9, fp, lsl #28
    1708:	0a000c00 	beq	4710 <startup-0x1fffb8f0>
    170c:	00000931 	andeq	r0, r0, r1, lsr r9
    1710:	0000098e 	andeq	r0, r0, lr, lsl #19
    1714:	0000250b 	andeq	r2, r0, fp, lsl #10
    1718:	04000f00 	streq	r0, [r0], #-3840	; 0xfffff100
    171c:	00000358 	andeq	r0, r0, r8, asr r3
    1720:	9a0e0d06 	bls	384b40 <startup-0x1fc7b4c0>
    1724:	05000009 	streq	r0, [r0, #-9]
    1728:	00093d04 	andeq	r3, r9, r4, lsl #26
    172c:	04d91000 	ldrbeq	r1, [r9], #0
    1730:	06240000 	strteq	r0, [r4], -r0
    1734:	0a23100f 	beq	8c5778 <startup-0x1f73a888>
    1738:	67110000 	ldrvs	r0, [r1, -r0]
    173c:	06006f65 	streq	r6, [r0], -r5, ror #30
    1740:	098e0f10 	stmibeq	lr, {r4, r8, r9, sl, fp}
    1744:	0d000000 	stceq	0, cr0, [r0, #-0]
    1748:	0000037d 	andeq	r0, r0, sp, ror r3
    174c:	2c091106 	stfcss	f1, [r9], {6}
    1750:	04000000 	streq	r0, [r0], #-0
    1754:	0003820d 	andeq	r8, r3, sp, lsl #4
    1758:	0e110600 	cfmsub32eq	mvax0, mvfx0, mvfx1, mvfx0
    175c:	0000002c 	andeq	r0, r0, ip, lsr #32
    1760:	03d50d08 	bicseq	r0, r5, #8, 26	; 0x200
    1764:	12060000 	andne	r0, r6, #0
    1768:	00002c09 	andeq	r2, r0, r9, lsl #24
    176c:	da0d0c00 	ble	344774 <startup-0x1fcbb88c>
    1770:	06000003 	streq	r0, [r0], -r3
    1774:	002c0e12 	eoreq	r0, ip, r2, lsl lr
    1778:	0d100000 	ldceq	0, cr0, [r0, #-0]
    177c:	00000453 	andeq	r0, r0, r3, asr r4
    1780:	340d1306 	strcc	r1, [sp], #-774	; 0xfffffcfa
    1784:	1400000a 	strne	r0, [r0], #-10
    1788:	0003390d 	andeq	r3, r3, sp, lsl #18
    178c:	0d140600 	ldceq	6, cr0, [r4, #-0]
    1790:	00000a34 	andeq	r0, r0, r4, lsr sl
    1794:	05b90d18 	ldreq	r0, [r9, #3352]!	; 0xd18
    1798:	15060000 	strne	r0, [r6, #-0]
    179c:	000a340d 	andeq	r3, sl, sp, lsl #8
    17a0:	cb0d1c00 	blgt	3487a8 <startup-0x1fcb7858>
    17a4:	06000003 	streq	r0, [r0], -r3
    17a8:	0a4f0d16 	beq	13c4c08 <startup-0x1ec3b3f8>
    17ac:	00200000 	eoreq	r0, r0, r0
    17b0:	000a2e1e 	andeq	r2, sl, lr, lsl lr
    17b4:	0a2e1600 	beq	b86fbc <startup-0x1f479044>
    17b8:	05000000 	streq	r0, [r0, #-0]
    17bc:	0009a004 	andeq	sl, r9, r4
    17c0:	23040500 	movwcs	r0, #17664	; 0x4500
    17c4:	1e00000a 	cdpne	0, 0, cr0, cr0, cr10, {0}
    17c8:	00000a4f 	andeq	r0, r0, pc, asr #20
    17cc:	000a2e16 	andeq	r2, sl, r6, lsl lr
    17d0:	002c1600 	eoreq	r1, ip, r0, lsl #12
    17d4:	2c160000 	ldccs	0, cr0, [r6], {-0}
    17d8:	00000000 	andeq	r0, r0, r0
    17dc:	0a3a0405 	beq	e827f8 <startup-0x1f17d808>
    17e0:	25040000 	strcs	r0, [r4, #-0]
    17e4:	06000005 	streq	r0, [r0], -r5
    17e8:	0a2e0c17 	beq	b8484c <startup-0x1f47b7b4>
    17ec:	550a0000 	strpl	r0, [sl, #-0]
    17f0:	7100000a 	tstvc	r0, sl
    17f4:	0b00000a 	bleq	1824 <startup-0x1fffe7dc>
    17f8:	00000025 	andeq	r0, r0, r5, lsr #32
    17fc:	b8200063 	stmdalt	r0!, {r0, r1, r5, r6}
    1800:	01000008 	tsteq	r0, r8
    1804:	0a610905 	beq	1843c20 <startup-0x1e7bc3e0>
    1808:	03050000 	movweq	r0, #20480	; 0x5000
    180c:	200031f4 	strdcs	r3, [r0], -r4
    1810:	00090620 	andeq	r0, r9, r0, lsr #12
    1814:	05060100 	streq	r0, [r6, #-256]	; 0xffffff00
    1818:	0000002c 	andeq	r0, r0, ip, lsr #32
    181c:	31ec0305 	mvncc	r0, r5, lsl #6
    1820:	d4202000 	strtle	r2, [r0], #-0
    1824:	01000008 	tsteq	r0, r8
    1828:	002c0507 	eoreq	r0, ip, r7, lsl #10
    182c:	03050000 	movweq	r0, #20480	; 0x5000
    1830:	20003438 	andcs	r3, r0, r8, lsr r4
    1834:	0008d920 	andeq	sp, r8, r0, lsr #18
    1838:	05080100 	streq	r0, [r8, #-256]	; 0xffffff00
    183c:	0000002c 	andeq	r0, r0, ip, lsr #32
    1840:	31f00305 	mvnscc	r0, r5, lsl #6
    1844:	b7212000 	strlt	r2, [r1, -r0]!
    1848:	01000005 	tsteq	r0, r5
    184c:	002c0530 	eoreq	r0, ip, r0, lsr r5
    1850:	10ac0000 	adcne	r0, ip, r0
    1854:	00482000 	subeq	r2, r8, r0
    1858:	9c010000 	stcls	0, cr0, [r1], {-0}
    185c:	00000ae3 	andeq	r0, r0, r3, ror #21
    1860:	00024422 	andeq	r4, r2, r2, lsr #8
    1864:	0c310100 	ldfeqs	f0, [r1], #-0
    1868:	00000a55 	andeq	r0, r0, r5, asr sl
    186c:	00749102 	rsbseq	r9, r4, r2, lsl #2
    1870:	00082123 	andeq	r2, r8, r3, lsr #2
    1874:	06240100 	strteq	r0, [r4], -r0, lsl #2
    1878:	2000104c 	andcs	r1, r0, ip, asr #32
    187c:	00000060 	andeq	r0, r0, r0, rrx
    1880:	0b099c01 	bleq	26888c <startup-0x1fd97774>
    1884:	44240000 	strtmi	r0, [r4], #-0
    1888:	01000002 	tsteq	r0, r2
    188c:	0a551524 	beq	1546d24 <startup-0x1eab92dc>
    1890:	91020000 	mrsls	r0, (UNDEF: 2)
    1894:	5f250074 	svcpl	0x00250074
    1898:	01000005 	tsteq	r0, r5
    189c:	002c051f 	eoreq	r0, ip, pc, lsl r5
    18a0:	10380000 	eorsne	r0, r8, r0
    18a4:	00142000 	andseq	r2, r4, r0
    18a8:	9c010000 	stcls	0, cr0, [r1], {-0}
    18ac:	00055725 	andeq	r5, r5, r5, lsr #14
    18b0:	061a0100 	ldreq	r0, [sl], -r0, lsl #2
    18b4:	00000b35 	andeq	r0, r0, r5, lsr fp
    18b8:	2000101c 	andcs	r1, r0, ip, lsl r0
    18bc:	0000001c 	andeq	r0, r0, ip, lsl r0
    18c0:	01029c01 	tsteq	r2, r1, lsl #24
    18c4:	0007be02 	andeq	fp, r7, r2, lsl #28
    18c8:	06282500 	strteq	r2, [r8], -r0, lsl #10
    18cc:	15010000 	strne	r0, [r1, #-0]
    18d0:	000b3506 	andeq	r3, fp, r6, lsl #10
    18d4:	00100400 	andseq	r0, r0, r0, lsl #8
    18d8:	00001820 	andeq	r1, r0, r0, lsr #16
    18dc:	259c0100 	ldrcs	r0, [ip, #256]	; 0x100
    18e0:	0000070a 	andeq	r0, r0, sl, lsl #14
    18e4:	55091001 	strpl	r1, [r9, #-1]
    18e8:	e800000a 	stmda	r0, {r1, r3}
    18ec:	1c20000f 	stcne	0, cr0, [r0], #-60	; 0xffffffc4
    18f0:	01000000 	mrseq	r0, (UNDEF: 0)
    18f4:	083f269c 	ldmdaeq	pc!, {r2, r3, r4, r7, r9, sl, sp}	; <UNPREDICTABLE>
    18f8:	0a010000 	beq	41900 <startup-0x1ffbe700>
    18fc:	000fb806 	andeq	fp, pc, r6, lsl #16
    1900:	00003020 	andeq	r3, r0, r0, lsr #32
    1904:	279c0100 	ldrcs	r0, [ip, r0, lsl #2]
    1908:	20000fbe 			; <UNDEFINED> instruction: 0x20000fbe
    190c:	0000001c 	andeq	r0, r0, ip, lsl r0
    1910:	01006928 	tsteq	r0, r8, lsr #18
    1914:	002c0d0b 	eoreq	r0, ip, fp, lsl #26
    1918:	91020000 	mrsls	r0, (UNDEF: 2)
    191c:	00000074 	andeq	r0, r0, r4, ror r0
    1920:	00000120 	andeq	r0, r0, r0, lsr #2
    1924:	071d0004 	ldreq	r0, [sp, -r4]
    1928:	01040000 	mrseq	r0, (UNDEF: 4)
    192c:	00000073 	andeq	r0, r0, r3, ror r0
    1930:	0009e40c 	andeq	lr, r9, ip, lsl #8
    1934:	00002500 	andeq	r2, r0, r0, lsl #10
    1938:	0010f400 	andseq	pc, r0, r0, lsl #8
    193c:	0000f020 	andeq	pc, r0, r0, lsr #32
    1940:	000b8400 	andeq	r8, fp, r0, lsl #8
    1944:	08010200 	stmdaeq	r1, {r9}
    1948:	00000171 	andeq	r0, r0, r1, ror r1
    194c:	0009b803 	andeq	fp, r9, r3, lsl #16
    1950:	06240100 	strteq	r0, [r4], -r0, lsl #2
    1954:	200011c4 	andcs	r1, r0, r4, asr #3
    1958:	00000020 	andeq	r0, r0, r0, lsr #32
    195c:	00509c01 	subseq	r9, r0, r1, lsl #24
    1960:	63040000 	movwvs	r0, #16384	; 0x4000
    1964:	1c240100 	stfnes	f0, [r4], #-0
    1968:	00000025 	andeq	r0, r0, r5, lsr #32
    196c:	00779102 	rsbseq	r9, r7, r2, lsl #2
    1970:	0009a605 	andeq	sl, r9, r5, lsl #12
    1974:	0f140100 	svceq	0x00140100
    1978:	00000025 	andeq	r0, r0, r5, lsr #32
    197c:	2000115c 	andcs	r1, r0, ip, asr r1
    1980:	00000068 	andeq	r0, r0, r8, rrx
    1984:	00a79c01 	adceq	r9, r7, r1, lsl #24
    1988:	cd060000 	stcgt	0, cr0, [r6, #-0]
    198c:	01000009 	tsteq	r0, r9
    1990:	00a71315 	adceq	r1, r7, r5, lsl r3
    1994:	91020000 	mrsls	r0, (UNDEF: 2)
    1998:	09b10658 	ldmibeq	r1!, {r3, r4, r6, r9, sl}
    199c:	16010000 	strne	r0, [r1], -r0
    19a0:	0000a713 	andeq	sl, r0, r3, lsl r7
    19a4:	48910200 	ldmmi	r1, {r9}
    19a8:	776f7207 	strbvc	r7, [pc, -r7, lsl #4]!
    19ac:	09190100 	ldmdbeq	r9, {r8}
    19b0:	000000be 	strheq	r0, [r0], -lr
    19b4:	066c9102 	strbteq	r9, [ip], -r2, lsl #2
    19b8:	000009c5 	andeq	r0, r0, r5, asr #19
    19bc:	be0e1901 	vmlalt.f16	s2, s28, s2	; <UNPREDICTABLE>
    19c0:	02000000 	andeq	r0, r0, #0
    19c4:	08006891 	stmdaeq	r0, {r0, r4, r7, fp, sp, lr}
    19c8:	00000025 	andeq	r0, r0, r5, lsr #32
    19cc:	000000b7 	strheq	r0, [r0], -r7
    19d0:	0000b709 	andeq	fp, r0, r9, lsl #14
    19d4:	02000f00 	andeq	r0, r0, #0, 30
    19d8:	05a10704 	streq	r0, [r1, #1796]!	; 0x704
    19dc:	040a0000 	streq	r0, [sl], #-0
    19e0:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    19e4:	09c00b00 	stmibeq	r0, {r8, r9, fp}^
    19e8:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
    19ec:	0000be05 	andeq	fp, r0, r5, lsl #28
    19f0:	00111800 	andseq	r1, r1, r0, lsl #16
    19f4:	00004420 	andeq	r4, r0, r0, lsr #8
    19f8:	fc9c0100 	ldc2	1, cr0, [ip], {0}
    19fc:	07000000 	streq	r0, [r0, -r0]
    1a00:	0901006a 	stmdbeq	r1, {r1, r3, r5, r6}
    1a04:	0000be09 	andeq	fp, r0, r9, lsl #28
    1a08:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1a0c:	0009ab06 	andeq	sl, r9, r6, lsl #22
    1a10:	0a0a0100 	beq	281e18 <startup-0x1fd7e1e8>
    1a14:	000000fc 	strdeq	r0, [r0], -ip
    1a18:	00739102 	rsbseq	r9, r3, r2, lsl #2
    1a1c:	7a080102 	bvc	201e2c <startup-0x1fdfe1d4>
    1a20:	0c000001 	stceq	0, cr0, [r0], {1}
    1a24:	000009d7 	ldrdeq	r0, [r0], -r7
    1a28:	f4060401 	vst3.8	{d0-d2}, [r6], r1
    1a2c:	24200010 	strtcs	r0, [r0], #-16
    1a30:	01000000 	mrseq	r0, (UNDEF: 0)
    1a34:	0069049c 	mlseq	r9, ip, r4, r0
    1a38:	be170401 	cfmulslt	mvf0, mvf7, mvf1
    1a3c:	02000000 	andeq	r0, r0, #0
    1a40:	00007491 	muleq	r0, r1, r4

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	110e1b0e 	tstne	lr, lr, lsl #22
   c:	10061201 	andne	r1, r6, r1, lsl #4
  10:	02000017 	andeq	r0, r0, #23
  14:	0b0b0024 	bleq	2c00ac <startup-0x1fd3ff54>
  18:	0e030b3e 	vmoveq.16	d3[0], r0
  1c:	2e030000 	cdpcs	0, 0, cr0, cr3, cr0, {0}
  20:	03193f01 	tsteq	r9, #1, 30
  24:	3b0b3a0e 	blcc	2ce864 <startup-0x1fd3179c>
  28:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
  2c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
  30:	96184006 	ldrls	r4, [r8], -r6
  34:	13011942 	movwne	r1, #6466	; 0x1942
  38:	05040000 	streq	r0, [r4, #-0]
  3c:	3a080300 	bcc	200c44 <startup-0x1fdff3bc>
  40:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  44:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
  48:	05000018 	streq	r0, [r0, #-24]	; 0xffffffe8
  4c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
  50:	0b3b0b3a 	bleq	ec2d40 <startup-0x1f13d2c0>
  54:	13490b39 	movtne	r0, #39737	; 0x9b39
  58:	00001802 	andeq	r1, r0, r2, lsl #16
  5c:	3f012e06 	svccc	0x00012e06
  60:	3a0e0319 	bcc	380ccc <startup-0x1fc7f334>
  64:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  68:	3c13490b 			; <UNDEFINED> instruction: 0x3c13490b
  6c:	07000019 	smladeq	r0, r9, r0, r0
  70:	00000018 	andeq	r0, r0, r8, lsl r0
  74:	0b002408 	bleq	909c <startup-0x1fff6f64>
  78:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
  7c:	09000008 	stmdbeq	r0, {r3}
  80:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
  84:	0b3a0e03 	bleq	e83898 <startup-0x1f17c768>
  88:	0b390b3b 	bleq	e42d7c <startup-0x1f1bd284>
  8c:	06120111 			; <UNDEFINED> instruction: 0x06120111
  90:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
  94:	00130119 	andseq	r0, r3, r9, lsl r1
  98:	012e0a00 			; <UNDEFINED> instruction: 0x012e0a00
  9c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
  a0:	0b3b0b3a 	bleq	ec2d90 <startup-0x1f13d270>
  a4:	13490b39 	movtne	r0, #39737	; 0x9b39
  a8:	1301193c 	movwne	r1, #6460	; 0x193c
  ac:	2e0b0000 	cdpcs	0, 0, cr0, cr11, cr0, {0}
  b0:	03193f01 	tsteq	r9, #1, 30
  b4:	3b0b3a0e 	blcc	2ce8f4 <startup-0x1fd3170c>
  b8:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
  bc:	11134919 	tstne	r3, r9, lsl r9
  c0:	40061201 	andmi	r1, r6, r1, lsl #4
  c4:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
  c8:	00001301 	andeq	r1, r0, r1, lsl #6
  cc:	0300050c 	movweq	r0, #1292	; 0x50c
  d0:	3b0b3a0e 	blcc	2ce910 <startup-0x1fd316f0>
  d4:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
  d8:	00180213 	andseq	r0, r8, r3, lsl r2
  dc:	012e0d00 			; <UNDEFINED> instruction: 0x012e0d00
  e0:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
  e4:	0b3b0b3a 	bleq	ec2dd4 <startup-0x1f13d22c>
  e8:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
  ec:	06120111 			; <UNDEFINED> instruction: 0x06120111
  f0:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
  f4:	00130119 	andseq	r0, r3, r9, lsl r1
  f8:	002e0e00 	eoreq	r0, lr, r0, lsl #28
  fc:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 100:	0b3b0b3a 	bleq	ec2df0 <startup-0x1f13d210>
 104:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 108:	06120111 			; <UNDEFINED> instruction: 0x06120111
 10c:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 110:	00000019 	andeq	r0, r0, r9, lsl r0
 114:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
 118:	030b130e 	movweq	r1, #45838	; 0xb30e
 11c:	110e1b0e 	tstne	lr, lr, lsl #22
 120:	10061201 	andne	r1, r6, r1, lsl #4
 124:	02000017 	andeq	r0, r0, #23
 128:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
 12c:	0b3b0b3a 	bleq	ec2e1c <startup-0x1f13d1e4>
 130:	13490b39 	movtne	r0, #39737	; 0x9b39
 134:	24030000 	strcs	r0, [r3], #-0
 138:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 13c:	000e030b 	andeq	r0, lr, fp, lsl #6
 140:	01010400 	tsteq	r1, r0, lsl #8
 144:	13011349 	movwne	r1, #4937	; 0x1349
 148:	21050000 	mrscs	r0, (UNDEF: 5)
 14c:	2f134900 	svccs	0x00134900
 150:	06000005 	streq	r0, [r0], -r5
 154:	13490035 	movtne	r0, #36917	; 0x9035
 158:	34070000 	strcc	r0, [r7], #-0
 15c:	3a0e0300 	bcc	380d64 <startup-0x1fc7f29c>
 160:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 164:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 168:	08000018 	stmdaeq	r0, {r3, r4}
 16c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 170:	0b3a0e03 	bleq	e83984 <startup-0x1f17c67c>
 174:	0b390b3b 	bleq	e42e68 <startup-0x1f1bd198>
 178:	01111927 	tsteq	r1, r7, lsr #18
 17c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 180:	01194296 			; <UNDEFINED> instruction: 0x01194296
 184:	09000013 	stmdbeq	r0, {r0, r1, r4}
 188:	08030034 	stmdaeq	r3, {r2, r4, r5}
 18c:	0b3b0b3a 	bleq	ec2e7c <startup-0x1f13d184>
 190:	13490b39 	movtne	r0, #39737	; 0x9b39
 194:	00001802 	andeq	r1, r0, r2, lsl #16
 198:	3f012e0a 	svccc	0x00012e0a
 19c:	3a0e0319 	bcc	380e08 <startup-0x1fc7f1f8>
 1a0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 1a4:	1119270b 	tstne	r9, fp, lsl #14
 1a8:	40061201 	andmi	r1, r6, r1, lsl #4
 1ac:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 1b0:	00001301 	andeq	r1, r0, r1, lsl #6
 1b4:	0300050b 	movweq	r0, #1291	; 0x50b
 1b8:	3b0b3a08 	blcc	2ce9e0 <startup-0x1fd31620>
 1bc:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 1c0:	00180213 	andseq	r0, r8, r3, lsl r2
 1c4:	00240c00 	eoreq	r0, r4, r0, lsl #24
 1c8:	0b3e0b0b 	bleq	f82dfc <startup-0x1f07d204>
 1cc:	00000803 	andeq	r0, r0, r3, lsl #16
 1d0:	3f012e0d 	svccc	0x00012e0d
 1d4:	3a0e0319 	bcc	380e40 <startup-0x1fc7f1c0>
 1d8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 1dc:	1201110b 	andne	r1, r1, #-1073741822	; 0xc0000002
 1e0:	97184006 	ldrls	r4, [r8, -r6]
 1e4:	13011942 	movwne	r1, #6466	; 0x1942
 1e8:	0b0e0000 	bleq	3801f0 <startup-0x1fc7fe10>
 1ec:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
 1f0:	0f000006 	svceq	0x00000006
 1f4:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 1f8:	0b3b0b3a 	bleq	ec2ee8 <startup-0x1f13d118>
 1fc:	13490b39 	movtne	r0, #39737	; 0x9b39
 200:	00001802 	andeq	r1, r0, r2, lsl #16
 204:	3f012e10 	svccc	0x00012e10
 208:	3a0e0319 	bcc	380e74 <startup-0x1fc7f18c>
 20c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 210:	3c13490b 			; <UNDEFINED> instruction: 0x3c13490b
 214:	11000019 	tstne	r0, r9, lsl r0
 218:	00000018 	andeq	r0, r0, r8, lsl r0
 21c:	3f012e12 	svccc	0x00012e12
 220:	3a0e0319 	bcc	380e8c <startup-0x1fc7f174>
 224:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 228:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 22c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 230:	96184006 	ldrls	r4, [r8], -r6
 234:	13011942 	movwne	r1, #6466	; 0x1942
 238:	2e130000 	cdpcs	0, 1, cr0, cr3, cr0, {0}
 23c:	03193f01 	tsteq	r9, #1, 30
 240:	3b0b3a0e 	blcc	2cea80 <startup-0x1fd31580>
 244:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 248:	01193c13 	tsteq	r9, r3, lsl ip
 24c:	14000013 	strne	r0, [r0], #-19	; 0xffffffed
 250:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 254:	0b3a0e03 	bleq	e83a68 <startup-0x1f17c598>
 258:	0b390b3b 	bleq	e42f4c <startup-0x1f1bd0b4>
 25c:	01111927 	tsteq	r1, r7, lsr #18
 260:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 264:	00194296 	mulseq	r9, r6, r2
 268:	11010000 	mrsne	r0, (UNDEF: 1)
 26c:	130e2501 	movwne	r2, #58625	; 0xe501
 270:	1b0e030b 	blne	380ea4 <startup-0x1fc7f15c>
 274:	1117550e 	tstne	r7, lr, lsl #10
 278:	00171001 	andseq	r1, r7, r1
 27c:	00240200 	eoreq	r0, r4, r0, lsl #4
 280:	0b3e0b0b 	bleq	f82eb4 <startup-0x1f07d14c>
 284:	00000e03 	andeq	r0, r0, r3, lsl #28
 288:	49010103 	stmdbmi	r1, {r0, r1, r8}
 28c:	00130113 	andseq	r0, r3, r3, lsl r1
 290:	00210400 	eoreq	r0, r1, r0, lsl #8
 294:	052f1349 	streq	r1, [pc, #-841]!	; ffffff53 <rear+0xdfffcb1b>
 298:	35050000 	strcc	r0, [r5, #-0]
 29c:	00134900 	andseq	r4, r3, r0, lsl #18
 2a0:	00340600 	eorseq	r0, r4, r0, lsl #12
 2a4:	0b3a0e03 	bleq	e83ab8 <startup-0x1f17c548>
 2a8:	0b390b3b 	bleq	e42f9c <startup-0x1f1bd064>
 2ac:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 2b0:	13070000 	movwne	r0, #28672	; 0x7000
 2b4:	0b0e0301 	bleq	380ec0 <startup-0x1fc7f140>
 2b8:	3b0b3a0b 	blcc	2ceaec <startup-0x1fd31514>
 2bc:	010b390b 	tsteq	fp, fp, lsl #18
 2c0:	08000013 	stmdaeq	r0, {r0, r1, r4}
 2c4:	0803000d 	stmdaeq	r3, {r0, r2, r3}
 2c8:	0b3b0b3a 	bleq	ec2fb8 <startup-0x1f13d048>
 2cc:	13490b39 	movtne	r0, #39737	; 0x9b39
 2d0:	00000b38 	andeq	r0, r0, r8, lsr fp
 2d4:	03001609 	movweq	r1, #1545	; 0x609
 2d8:	3b0b3a0e 	blcc	2ceb18 <startup-0x1fd314e8>
 2dc:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 2e0:	0a000013 	beq	334 <startup-0x1ffffccc>
 2e4:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 2e8:	0b3b0b3a 	bleq	ec2fd8 <startup-0x1f13d028>
 2ec:	13490b39 	movtne	r0, #39737	; 0x9b39
 2f0:	00000b38 	andeq	r0, r0, r8, lsr fp
 2f4:	0b00240b 	bleq	9328 <startup-0x1fff6cd8>
 2f8:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 2fc:	0c000008 	stceq	0, cr0, [r0], {8}
 300:	13490021 	movtne	r0, #36897	; 0x9021
 304:	00000b2f 	andeq	r0, r0, pc, lsr #22
 308:	0b000f0d 	bleq	3f44 <startup-0x1fffc0bc>
 30c:	0013490b 	andseq	r4, r3, fp, lsl #18
 310:	01150e00 	tsteq	r5, r0, lsl #28
 314:	13011927 	movwne	r1, #6439	; 0x1927
 318:	050f0000 	streq	r0, [pc, #-0]	; 320 <startup-0x1ffffce0>
 31c:	00134900 	andseq	r4, r3, r0, lsl #18
 320:	01131000 	tsteq	r3, r0
 324:	0b3a0b0b 	bleq	e82f58 <startup-0x1f17d0a8>
 328:	0b390b3b 	bleq	e4301c <startup-0x1f1bcfe4>
 32c:	00001301 	andeq	r1, r0, r1, lsl #6
 330:	03003411 	movweq	r3, #1041	; 0x411
 334:	3b0b3a0e 	blcc	2ceb74 <startup-0x1fd3148c>
 338:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 33c:	02193f13 	andseq	r3, r9, #19, 30	; 0x4c
 340:	12000018 	andne	r0, r0, #24
 344:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 348:	0b3a0e03 	bleq	e83b5c <startup-0x1f17c4a4>
 34c:	0b39053b 	bleq	e41840 <startup-0x1f1be7c0>
 350:	01111927 	tsteq	r1, r7, lsr #18
 354:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 358:	01194296 			; <UNDEFINED> instruction: 0x01194296
 35c:	13000013 	movwne	r0, #19
 360:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 364:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 368:	13490b39 	movtne	r0, #39737	; 0x9b39
 36c:	00001802 	andeq	r1, r0, r2, lsl #16
 370:	03003414 	movweq	r3, #1044	; 0x414
 374:	3b0b3a0e 	blcc	2cebb4 <startup-0x1fd3144c>
 378:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
 37c:	00180213 	andseq	r0, r8, r3, lsl r2
 380:	002e1500 	eoreq	r1, lr, r0, lsl #10
 384:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 388:	0b3b0b3a 	bleq	ec3078 <startup-0x1f13cf88>
 38c:	01110b39 	tsteq	r1, r9, lsr fp
 390:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 394:	00194296 	mulseq	r9, r6, r2
 398:	012e1600 			; <UNDEFINED> instruction: 0x012e1600
 39c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 3a0:	0b3b0b3a 	bleq	ec3090 <startup-0x1f13cf70>
 3a4:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 3a8:	06120111 			; <UNDEFINED> instruction: 0x06120111
 3ac:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 3b0:	00130119 	andseq	r0, r3, r9, lsl r1
 3b4:	00051700 	andeq	r1, r5, r0, lsl #14
 3b8:	0b3a0803 	bleq	e823cc <startup-0x1f17dc34>
 3bc:	0b390b3b 	bleq	e430b0 <startup-0x1f1bcf50>
 3c0:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 3c4:	34180000 	ldrcc	r0, [r8], #-0
 3c8:	3a080300 	bcc	200fd0 <startup-0x1fdff030>
 3cc:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 3d0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 3d4:	19000018 	stmdbne	r0, {r3, r4}
 3d8:	0111010b 	tsteq	r1, fp, lsl #2
 3dc:	00000612 	andeq	r0, r0, r2, lsl r6
 3e0:	3f002e1a 	svccc	0x00002e1a
 3e4:	3a0e0319 	bcc	381050 <startup-0x1fc7efb0>
 3e8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 3ec:	1119270b 	tstne	r9, fp, lsl #14
 3f0:	40061201 	andmi	r1, r6, r1, lsl #4
 3f4:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 3f8:	2e1b0000 	cdpcs	0, 1, cr0, cr11, cr0, {0}
 3fc:	03193f01 	tsteq	r9, #1, 30
 400:	3b0b3a0e 	blcc	2cec40 <startup-0x1fd313c0>
 404:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
 408:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 40c:	96184006 	ldrls	r4, [r8], -r6
 410:	13011942 	movwne	r1, #6466	; 0x1942
 414:	2e1c0000 	cdpcs	0, 1, cr0, cr12, cr0, {0}
 418:	3a0e0301 	bcc	381024 <startup-0x1fc7efdc>
 41c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 420:	1119270b 	tstne	r9, fp, lsl #14
 424:	40061201 	andmi	r1, r6, r1, lsl #4
 428:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 42c:	00001301 	andeq	r1, r0, r1, lsl #6
 430:	0300051d 	movweq	r0, #1309	; 0x51d
 434:	3b0b3a0e 	blcc	2cec74 <startup-0x1fd3138c>
 438:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 43c:	00180213 	andseq	r0, r8, r3, lsl r2
 440:	11010000 	mrsne	r0, (UNDEF: 1)
 444:	130e2501 	movwne	r2, #58625	; 0xe501
 448:	1b0e030b 	blne	38107c <startup-0x1fc7ef84>
 44c:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
 450:	00171006 	andseq	r1, r7, r6
 454:	00240200 	eoreq	r0, r4, r0, lsl #4
 458:	0b3e0b0b 	bleq	f8308c <startup-0x1f07cf74>
 45c:	00000e03 	andeq	r0, r0, r3, lsl #28
 460:	3f012e03 	svccc	0x00012e03
 464:	3a0e0319 	bcc	3810d0 <startup-0x1fc7ef30>
 468:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 46c:	1119270b 	tstne	r9, fp, lsl #14
 470:	40061201 	andmi	r1, r6, r1, lsl #4
 474:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 478:	00001301 	andeq	r1, r0, r1, lsl #6
 47c:	03000504 	movweq	r0, #1284	; 0x504
 480:	3b0b3a08 	blcc	2ceca8 <startup-0x1fd31358>
 484:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 488:	00180213 	andseq	r0, r8, r3, lsl r2
 48c:	002e0500 	eoreq	r0, lr, r0, lsl #10
 490:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 494:	0b3b0b3a 	bleq	ec3184 <startup-0x1f13ce7c>
 498:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 49c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 4a0:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 4a4:	06000019 			; <UNDEFINED> instruction: 0x06000019
 4a8:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 4ac:	0b3a0e03 	bleq	e83cc0 <startup-0x1f17c340>
 4b0:	0b390b3b 	bleq	e431a4 <startup-0x1f1bce5c>
 4b4:	01111927 	tsteq	r1, r7, lsr #18
 4b8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 4bc:	00194297 	mulseq	r9, r7, r2
 4c0:	11010000 	mrsne	r0, (UNDEF: 1)
 4c4:	130e2501 	movwne	r2, #58625	; 0xe501
 4c8:	1b0e030b 	blne	3810fc <startup-0x1fc7ef04>
 4cc:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
 4d0:	00171006 	andseq	r1, r7, r6
 4d4:	00240200 	eoreq	r0, r4, r0, lsl #4
 4d8:	0b3e0b0b 	bleq	f8310c <startup-0x1f07cef4>
 4dc:	00000e03 	andeq	r0, r0, r3, lsl #28
 4e0:	0b002403 	bleq	94f4 <startup-0x1fff6b0c>
 4e4:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 4e8:	04000008 	streq	r0, [r0], #-8
 4ec:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
 4f0:	0b3b0b3a 	bleq	ec31e0 <startup-0x1f13ce20>
 4f4:	13490b39 	movtne	r0, #39737	; 0x9b39
 4f8:	0f050000 	svceq	0x00050000
 4fc:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
 500:	06000013 			; <UNDEFINED> instruction: 0x06000013
 504:	0e030013 	mcreq	0, 0, r0, cr3, cr3, {0}
 508:	0000193c 	andeq	r1, r0, ip, lsr r9
 50c:	03001607 	movweq	r1, #1543	; 0x607
 510:	3b0b3a0e 	blcc	2ced50 <startup-0x1fd312b0>
 514:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
 518:	08000013 	stmdaeq	r0, {r0, r1, r4}
 51c:	0b0b0117 	bleq	2c0980 <startup-0x1fd3f680>
 520:	0b3b0b3a 	bleq	ec3210 <startup-0x1f13cdf0>
 524:	13010b39 	movwne	r0, #6969	; 0x1b39
 528:	0d090000 	stceq	0, cr0, [r9, #-0]
 52c:	3a0e0300 	bcc	381134 <startup-0x1fc7eecc>
 530:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 534:	0013490b 	andseq	r4, r3, fp, lsl #18
 538:	01010a00 	tsteq	r1, r0, lsl #20
 53c:	13011349 	movwne	r1, #4937	; 0x1349
 540:	210b0000 	mrscs	r0, (UNDEF: 11)
 544:	2f134900 	svccs	0x00134900
 548:	0c00000b 	stceq	0, cr0, [r0], {11}
 54c:	0b0b0113 	bleq	2c09a0 <startup-0x1fd3f660>
 550:	0b3b0b3a 	bleq	ec3240 <startup-0x1f13cdc0>
 554:	13010b39 	movwne	r0, #6969	; 0x1b39
 558:	0d0d0000 	stceq	0, cr0, [sp, #-0]
 55c:	3a0e0300 	bcc	381164 <startup-0x1fc7ee9c>
 560:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 564:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 568:	0e00000b 	cdpeq	0, 0, cr0, cr0, cr11, {0}
 56c:	0b0b000f 	bleq	2c05b0 <startup-0x1fd3fa50>
 570:	260f0000 	strcs	r0, [pc], -r0
 574:	00134900 	andseq	r4, r3, r0, lsl #18
 578:	01131000 	tsteq	r3, r0
 57c:	0b0b0e03 	bleq	2c3d90 <startup-0x1fd3c270>
 580:	0b3b0b3a 	bleq	ec3270 <startup-0x1f13cd90>
 584:	13010b39 	movwne	r0, #6969	; 0x1b39
 588:	0d110000 	ldceq	0, cr0, [r1, #-0]
 58c:	3a080300 	bcc	201194 <startup-0x1fdfee6c>
 590:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 594:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 598:	1200000b 	andne	r0, r0, #11
 59c:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
 5a0:	0b3a050b 	bleq	e819d4 <startup-0x1f17e62c>
 5a4:	0b390b3b 	bleq	e43298 <startup-0x1f1bcd68>
 5a8:	00001301 	andeq	r1, r0, r1, lsl #6
 5ac:	03000d13 	movweq	r0, #3347	; 0xd13
 5b0:	3b0b3a0e 	blcc	2cedf0 <startup-0x1fd31210>
 5b4:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 5b8:	00053813 	andeq	r3, r5, r3, lsl r8
 5bc:	00151400 	andseq	r1, r5, r0, lsl #8
 5c0:	00001927 	andeq	r1, r0, r7, lsr #18
 5c4:	27011515 	smladcs	r1, r5, r5, r1
 5c8:	01134919 	tsteq	r3, r9, lsl r9
 5cc:	16000013 			; <UNDEFINED> instruction: 0x16000013
 5d0:	13490005 	movtne	r0, #36869	; 0x9005
 5d4:	13170000 	tstne	r7, #0
 5d8:	0b0e0301 	bleq	3811e4 <startup-0x1fc7ee1c>
 5dc:	3b0b3a05 	blcc	2cedf8 <startup-0x1fd31208>
 5e0:	010b3905 	tsteq	fp, r5, lsl #18
 5e4:	18000013 	stmdane	r0, {r0, r1, r4}
 5e8:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 5ec:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 5f0:	13490b39 	movtne	r0, #39737	; 0x9b39
 5f4:	00000b38 	andeq	r0, r0, r8, lsr fp
 5f8:	03000d19 	movweq	r0, #3353	; 0xd19
 5fc:	3b0b3a0e 	blcc	2cee3c <startup-0x1fd311c4>
 600:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
 604:	00053813 	andeq	r3, r5, r3, lsl r8
 608:	01131a00 	tsteq	r3, r0, lsl #20
 60c:	0b0b0e03 	bleq	2c3e20 <startup-0x1fd3c1e0>
 610:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 614:	13010b39 	movwne	r0, #6969	; 0x1b39
 618:	131b0000 	tstne	fp, #0
 61c:	3a0b0b01 	bcc	2c3228 <startup-0x1fd3cdd8>
 620:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 624:	0013010b 	andseq	r0, r3, fp, lsl #2
 628:	01171c00 	tsteq	r7, r0, lsl #24
 62c:	0b3a0b0b 	bleq	e83260 <startup-0x1f17cda0>
 630:	0b39053b 	bleq	e41b24 <startup-0x1f1be4dc>
 634:	00001301 	andeq	r1, r0, r1, lsl #6
 638:	03000d1d 	movweq	r0, #3357	; 0xd1d
 63c:	3b0b3a0e 	blcc	2cee7c <startup-0x1fd31184>
 640:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
 644:	1e000013 	mcrne	0, 0, r0, cr0, cr3, {0}
 648:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
 64c:	00001301 	andeq	r1, r0, r1, lsl #6
 650:	0300341f 	movweq	r3, #1055	; 0x41f
 654:	3b0b3a0e 	blcc	2cee94 <startup-0x1fd3116c>
 658:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
 65c:	3c193f13 	ldccc	15, cr3, [r9], {19}
 660:	20000019 	andcs	r0, r0, r9, lsl r0
 664:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 668:	0b3b0b3a 	bleq	ec3358 <startup-0x1f13cca8>
 66c:	13490b39 	movtne	r0, #39737	; 0x9b39
 670:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 674:	2e210000 	cdpcs	0, 2, cr0, cr1, cr0, {0}
 678:	03193f01 	tsteq	r9, #1, 30
 67c:	3b0b3a0e 	blcc	2ceebc <startup-0x1fd31144>
 680:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 684:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 688:	97184006 	ldrls	r4, [r8, -r6]
 68c:	13011942 	movwne	r1, #6466	; 0x1942
 690:	34220000 	strtcc	r0, [r2], #-0
 694:	3a0e0300 	bcc	38129c <startup-0x1fc7ed64>
 698:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 69c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 6a0:	23000018 	movwcs	r0, #24
 6a4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 6a8:	0b3a0e03 	bleq	e83ebc <startup-0x1f17c144>
 6ac:	0b390b3b 	bleq	e433a0 <startup-0x1f1bcc60>
 6b0:	01111927 	tsteq	r1, r7, lsr #18
 6b4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 6b8:	01194296 			; <UNDEFINED> instruction: 0x01194296
 6bc:	24000013 	strcs	r0, [r0], #-19	; 0xffffffed
 6c0:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 6c4:	0b3b0b3a 	bleq	ec33b4 <startup-0x1f13cc4c>
 6c8:	13490b39 	movtne	r0, #39737	; 0x9b39
 6cc:	00001802 	andeq	r1, r0, r2, lsl #16
 6d0:	3f002e25 	svccc	0x00002e25
 6d4:	3a0e0319 	bcc	381340 <startup-0x1fc7ecc0>
 6d8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 6dc:	1113490b 	tstne	r3, fp, lsl #18
 6e0:	40061201 	andmi	r1, r6, r1, lsl #4
 6e4:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 6e8:	2e260000 	cdpcs	0, 2, cr0, cr6, cr0, {0}
 6ec:	03193f01 	tsteq	r9, #1, 30
 6f0:	3b0b3a0e 	blcc	2cef30 <startup-0x1fd310d0>
 6f4:	110b390b 	tstne	fp, fp, lsl #18
 6f8:	40061201 	andmi	r1, r6, r1, lsl #4
 6fc:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 700:	0b270000 	bleq	9c0708 <startup-0x1f63f8f8>
 704:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
 708:	28000006 	stmdacs	r0, {r1, r2}
 70c:	08030034 	stmdaeq	r3, {r2, r4, r5}
 710:	0b3b0b3a 	bleq	ec3400 <startup-0x1f13cc00>
 714:	13490b39 	movtne	r0, #39737	; 0x9b39
 718:	00001802 	andeq	r1, r0, r2, lsl #16
 71c:	01110100 	tsteq	r1, r0, lsl #2
 720:	0b130e25 	bleq	4c3fbc <startup-0x1fb3c044>
 724:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
 728:	06120111 			; <UNDEFINED> instruction: 0x06120111
 72c:	00001710 	andeq	r1, r0, r0, lsl r7
 730:	0b002402 	bleq	9740 <startup-0x1fff68c0>
 734:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 738:	0300000e 	movweq	r0, #14
 73c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 740:	0b3a0e03 	bleq	e83f54 <startup-0x1f17c0ac>
 744:	0b390b3b 	bleq	e43438 <startup-0x1f1bcbc8>
 748:	01111927 	tsteq	r1, r7, lsr #18
 74c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 750:	01194297 			; <UNDEFINED> instruction: 0x01194297
 754:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
 758:	08030005 	stmdaeq	r3, {r0, r2}
 75c:	0b3b0b3a 	bleq	ec344c <startup-0x1f13cbb4>
 760:	13490b39 	movtne	r0, #39737	; 0x9b39
 764:	00001802 	andeq	r1, r0, r2, lsl #16
 768:	3f012e05 	svccc	0x00012e05
 76c:	3a0e0319 	bcc	3813d8 <startup-0x1fc7ec28>
 770:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 774:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 778:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 77c:	96184006 	ldrls	r4, [r8], -r6
 780:	13011942 	movwne	r1, #6466	; 0x1942
 784:	34060000 	strcc	r0, [r6], #-0
 788:	3a0e0300 	bcc	381390 <startup-0x1fc7ec70>
 78c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 790:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 794:	07000018 	smladeq	r0, r8, r0, r0
 798:	08030034 	stmdaeq	r3, {r2, r4, r5}
 79c:	0b3b0b3a 	bleq	ec348c <startup-0x1f13cb74>
 7a0:	13490b39 	movtne	r0, #39737	; 0x9b39
 7a4:	00001802 	andeq	r1, r0, r2, lsl #16
 7a8:	49010108 	stmdbmi	r1, {r3, r8}
 7ac:	00130113 	andseq	r0, r3, r3, lsl r1
 7b0:	00210900 	eoreq	r0, r1, r0, lsl #18
 7b4:	0b2f1349 	bleq	bc54e0 <startup-0x1f43ab20>
 7b8:	240a0000 	strcs	r0, [sl], #-0
 7bc:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 7c0:	0008030b 	andeq	r0, r8, fp, lsl #6
 7c4:	012e0b00 			; <UNDEFINED> instruction: 0x012e0b00
 7c8:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 7cc:	0b3b0b3a 	bleq	ec34bc <startup-0x1f13cb44>
 7d0:	13490b39 	movtne	r0, #39737	; 0x9b39
 7d4:	06120111 			; <UNDEFINED> instruction: 0x06120111
 7d8:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 7dc:	00130119 	andseq	r0, r3, r9, lsl r1
 7e0:	012e0c00 			; <UNDEFINED> instruction: 0x012e0c00
 7e4:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 7e8:	0b3b0b3a 	bleq	ec34d8 <startup-0x1f13cb28>
 7ec:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 7f0:	06120111 			; <UNDEFINED> instruction: 0x06120111
 7f4:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 7f8:	00000019 	andeq	r0, r0, r9, lsl r0

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	0000001c 	andeq	r0, r0, ip, lsl r0
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	000002e6 	andeq	r0, r0, r6, ror #5
	...
  20:	0000001c 	andeq	r0, r0, ip, lsl r0
  24:	02cb0002 	sbceq	r0, fp, #2
  28:	00040000 	andeq	r0, r4, r0
  2c:	00000000 	andeq	r0, r0, r0
  30:	200002f8 	strdcs	r0, [r0], -r8
  34:	00000524 	andeq	r0, r0, r4, lsr #10
	...
  40:	00000024 	andeq	r0, r0, r4, lsr #32
  44:	06570002 	ldrbeq	r0, [r7], -r2
  48:	00040000 	andeq	r0, r4, r0
  4c:	00000000 	andeq	r0, r0, r0
  50:	2000081c 	andcs	r0, r0, ip, lsl r8
  54:	000006ec 	andeq	r0, r0, ip, ror #13
  58:	20000000 	andcs	r0, r0, r0
  5c:	0000000c 	andeq	r0, r0, ip
	...
  68:	0000001c 	andeq	r0, r0, ip, lsl r0
  6c:	0ceb0002 	stcleq	0, cr0, [fp], #8
  70:	00040000 	andeq	r0, r4, r0
  74:	00000000 	andeq	r0, r0, r0
  78:	20000f0c 	andcs	r0, r0, ip, lsl #30
  7c:	000000ac 	andeq	r0, r0, ip, lsr #1
	...
  88:	0000001c 	andeq	r0, r0, ip, lsl r0
  8c:	0d8d0002 	stceq	0, cr0, [sp, #8]
  90:	00040000 	andeq	r0, r4, r0
  94:	00000000 	andeq	r0, r0, r0
  98:	20000fb8 			; <UNDEFINED> instruction: 0x20000fb8
  9c:	0000013c 	andeq	r0, r0, ip, lsr r1
	...
  a8:	0000001c 	andeq	r0, r0, ip, lsl r0
  ac:	19200002 	stmdbne	r0!, {r1}
  b0:	00040000 	andeq	r0, r4, r0
  b4:	00000000 	andeq	r0, r0, r0
  b8:	200010f4 	strdcs	r1, [r0], -r4
  bc:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	00000197 	muleq	r0, r7, r1
   4:	003b0003 	eorseq	r0, fp, r3
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	5a010000 	bpl	40020 <startup-0x1ffbffe0>
  1c:	6f6d2f3a 	svcvs	0x006d2f3a
  20:	4f4d2f70 	svcmi	0x004d2f70
  24:	70532d50 	subsvc	r2, r3, r0, asr sp
  28:	532f6c65 			; <UNDEFINED> instruction: 0x532f6c65
  2c:	656b616e 	strbvs	r6, [fp, #-366]!	; 0xfffffe92
  30:	73610000 	cmnvc	r1, #0
  34:	64696963 	strbtvs	r6, [r9], #-2403	; 0xfffff69d
  38:	6c707369 	ldclvs	3, cr7, [r0], #-420	; 0xfffffe5c
  3c:	632e7961 			; <UNDEFINED> instruction: 0x632e7961
  40:	00000100 	andeq	r0, r0, r0, lsl #2
  44:	00160500 	andseq	r0, r6, r0, lsl #10
  48:	00100205 	andseq	r0, r0, r5, lsl #4
  4c:	05152000 	ldreq	r2, [r5, #-0]
  50:	31313005 	teqcc	r1, r5
  54:	2f010531 	svccs	0x00010531
  58:	053f2905 	ldreq	r2, [pc, #-2309]!	; fffff75b <rear+0xdfffc323>
  5c:	01056715 	tsteq	r5, r5, lsl r7
  60:	772b05bb 			; <UNDEFINED> instruction: 0x772b05bb
  64:	05671505 	strbeq	r1, [r7, #-1285]!	; 0xfffffafb
  68:	15054a23 	strne	r4, [r5, #-2595]	; 0xfffff5dd
  6c:	5a010582 	bpl	4167c <startup-0x1ffbe984>
  70:	05762c05 	ldrbeq	r2, [r6, #-3077]!	; 0xfffff3fb
  74:	3d3d6705 	ldccc	7, cr6, [sp, #-20]!	; 0xffffffec
  78:	05590105 	ldrbeq	r0, [r9, #-261]	; 0xfffffefb
  7c:	05054c2a 	streq	r4, [r5, #-3114]	; 0xfffff3d6
  80:	053d3d67 	ldreq	r3, [sp, #-3431]!	; 0xfffff299
  84:	30055901 	andcc	r5, r5, r1, lsl #18
  88:	6705054c 	strvs	r0, [r5, -ip, asr #10]
  8c:	2016053d 	andscs	r0, r6, sp, lsr r5
  90:	2f3d0505 	svccs	0x003d0505
  94:	053d0105 	ldreq	r0, [sp, #-261]!	; 0xfffffefb
  98:	0505682a 	streq	r6, [r5, #-2090]	; 0xfffff7d6
  9c:	052f3d3d 	streq	r3, [pc, #-3389]!	; fffff367 <rear+0xdfffbf2f>
  a0:	0a052f13 	beq	14bcf4 <startup-0x1feb430c>
  a4:	3d050520 	cfstr32cc	mvfx0, [r5, #-128]	; 0xffffff80
  a8:	053d0c05 	ldreq	r0, [sp, #-3077]!	; 0xfffff3fb
  ac:	26052f01 	strcs	r2, [r5], -r1, lsl #30
  b0:	3d050576 	cfstr32cc	mvfx0, [r5, #-472]	; 0xfffffe28
  b4:	05201a05 	streq	r1, [r0, #-2565]!	; 0xfffff5fb
  b8:	053d2f05 	ldreq	r2, [sp, #-3845]!	; 0xfffff0fb
  bc:	05053d14 	streq	r3, [r5, #-3348]	; 0xfffff2ec
  c0:	201a0559 	andscs	r0, sl, r9, asr r5
  c4:	052f0c05 	streq	r0, [pc, #-3077]!	; fffff4c7 <rear+0xdfffc08f>
  c8:	24052f01 	strcs	r2, [r5], #-3841	; 0xfffff0ff
  cc:	3d050584 	cfstr32cc	mvfx0, [r5, #-528]	; 0xfffffdf0
  d0:	05201a05 	streq	r1, [r0, #-2565]!	; 0xfffff5fb
  d4:	053d2f05 	ldreq	r2, [sp, #-3845]!	; 0xfffff0fb
  d8:	05053d14 	streq	r3, [r5, #-3348]	; 0xfffff2ec
  dc:	201a0559 	andscs	r0, sl, r9, asr r5
  e0:	052f0c05 	streq	r0, [pc, #-3077]!	; fffff4e3 <rear+0xdfffc0ab>
  e4:	15052f01 	strne	r2, [r5, #-3841]	; 0xfffff0ff
  e8:	2f0a0584 	svccs	0x000a0584
  ec:	02000c05 	andeq	r0, r0, #1280	; 0x500
  f0:	05200104 	streq	r0, [r0, #-260]!	; 0xfffffefc
  f4:	04020020 	streq	r0, [r2], #-32	; 0xffffffe0
  f8:	0a053c01 	beq	14f104 <startup-0x1feb0efc>
  fc:	01040200 	mrseq	r0, R12_usr
 100:	2f05053c 	svccs	0x0005053c
 104:	01053d3d 	tsteq	r5, sp, lsr sp
 108:	3e13053d 	mrccc	5, 0, r0, cr3, cr13, {1}
 10c:	052f0a05 	streq	r0, [pc, #-2565]!	; fffff70f <rear+0xdfffc2d7>
 110:	0402000c 	streq	r0, [r2], #-12
 114:	20052001 	andcs	r2, r5, r1
 118:	01040200 	mrseq	r0, R12_usr
 11c:	000a053c 	andeq	r0, sl, ip, lsr r5
 120:	3c010402 	cfstrscc	mvf0, [r1], {2}
 124:	3d2f0505 	cfstr32cc	mvfx0, [pc, #-20]!	; 118 <startup-0x1ffffee8>
 128:	3d01053d 	cfstr32cc	mvfx0, [r1, #-244]	; 0xffffff0c
 12c:	053e1705 	ldreq	r1, [lr, #-1797]!	; 0xfffff8fb
 130:	0c052f0a 	stceq	15, cr2, [r5], {10}
 134:	01040200 	mrseq	r0, R12_usr
 138:	00200520 	eoreq	r0, r0, r0, lsr #10
 13c:	3c010402 	cfstrscc	mvf0, [r1], {2}
 140:	02000a05 	andeq	r0, r0, #20480	; 0x5000
 144:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 148:	3d3d2f05 	ldccc	15, cr2, [sp, #-20]!	; 0xffffffec
 14c:	053d0105 	ldreq	r0, [sp, #-261]!	; 0xfffffefb
 150:	0a053e16 	beq	14f9b0 <startup-0x1feb0650>
 154:	000c052f 	andeq	r0, ip, pc, lsr #10
 158:	20010402 	andcs	r0, r1, r2, lsl #8
 15c:	02002005 	andeq	r2, r0, #5
 160:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 164:	0402000a 	streq	r0, [r2], #-10
 168:	05053c01 	streq	r3, [r5, #-3073]	; 0xfffff3ff
 16c:	053d3d2f 	ldreq	r3, [sp, #-3375]!	; 0xfffff2d1
 170:	27053d01 	strcs	r3, [r5, -r1, lsl #26]
 174:	6805053e 	stmdavs	r5, {r1, r2, r3, r4, r5, r8, sl}
 178:	0105593d 	tsteq	r5, sp, lsr r9
 17c:	4c20053d 	cfstr32mi	mvfx0, [r0], #-244	; 0xffffff0c
 180:	055a0705 	ldrbeq	r0, [sl, #-1797]	; 0xfffff8fb
 184:	11053d18 	tstne	r5, r8, lsl sp
 188:	5913052e 	ldmdbpl	r3, {r1, r2, r3, r5, r8, sl}
 18c:	052e1105 	streq	r1, [lr, #-261]!	; 0xfffffefb
 190:	059f4c05 	ldreq	r4, [pc, #3077]	; d9d <startup-0x1ffff263>
 194:	04023d01 	streq	r3, [r2], #-3329	; 0xfffff2ff
 198:	a9010100 	stmdbge	r1, {r8}
 19c:	03000002 	movweq	r0, #2
 1a0:	00006200 	andeq	r6, r0, r0, lsl #4
 1a4:	fb010200 	blx	409ae <startup-0x1ffbf652>
 1a8:	01000d0e 	tsteq	r0, lr, lsl #26
 1ac:	00010101 	andeq	r0, r1, r1, lsl #2
 1b0:	00010000 	andeq	r0, r1, r0
 1b4:	3a5a0100 	bcc	16805bc <startup-0x1e97fa44>
 1b8:	706f6d2f 	rsbvc	r6, pc, pc, lsr #26
 1bc:	504f4d2f 	subpl	r4, pc, pc, lsr #26
 1c0:	6570532d 	ldrbvs	r5, [r0, #-813]!	; 0xfffffcd3
 1c4:	6e532f6c 	cdpvs	15, 5, cr2, cr3, cr12, {3}
 1c8:	00656b61 	rsbeq	r6, r5, r1, ror #22
 1cc:	61726700 	cmnvs	r2, r0, lsl #14
 1d0:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 1d4:	70736964 	rsbsvc	r6, r3, r4, ror #18
 1d8:	2e79616c 	rpwcsez	f6, f1, #4.0
 1dc:	00010063 	andeq	r0, r1, r3, rrx
 1e0:	672f2e00 	strvs	r2, [pc, -r0, lsl #28]!
 1e4:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 1e8:	69646369 	stmdbvs	r4!, {r0, r3, r5, r6, r8, r9, sp, lr}^
 1ec:	616c7073 	smcvs	50947	; 0xc703
 1f0:	00682e79 	rsbeq	r2, r8, r9, ror lr
 1f4:	2e000000 	cdpcs	0, 0, cr0, cr0, cr0, {0}
 1f8:	6665642f 	strbtvs	r6, [r5], -pc, lsr #8
 1fc:	73656e69 	cmnvc	r5, #1680	; 0x690
 200:	0000682e 	andeq	r6, r0, lr, lsr #16
 204:	05000000 	streq	r0, [r0, #-0]
 208:	02050018 	andeq	r0, r5, #24
 20c:	200002f8 	strdcs	r0, [r0], -r8
 210:	2f050517 	svccs	0x00050517
 214:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
 218:	4b4b3d3d 	blmi	12cf714 <startup-0x1ed308ec>
 21c:	054b4b4b 	strbeq	r4, [fp, #-2891]	; 0xfffff4b5
 220:	27053d01 	strcs	r3, [r5, -r1, lsl #26]
 224:	6a08053e 	bvs	201724 <startup-0x1fdfe8dc>
 228:	4b200705 	blmi	801e44 <startup-0x1f7fe1bc>
 22c:	750505bb 	strvc	r0, [r5, #-1467]	; 0xfffffa45
 230:	05201405 	streq	r1, [r0, #-1029]!	; 0xfffffbfb
 234:	25053e01 	strcs	r3, [r5, #-3585]	; 0xfffff1ff
 238:	6a080568 	bvs	2017e0 <startup-0x1fdfe820>
 23c:	4b200705 	blmi	801e58 <startup-0x1f7fe1a8>
 240:	67050575 	smlsdxvs	r5, r5, r5, r0
 244:	05201405 	streq	r1, [r0, #-1029]!	; 0xfffffbfb
 248:	2b053d01 	blcs	14f654 <startup-0x1feb09ac>
 24c:	67050568 	strvs	r0, [r5, -r8, ror #10]
 250:	13030105 	movwne	r0, #12549	; 0x3105
 254:	030d05ba 	movweq	r0, #54714	; 0xd5ba
 258:	233d206f 	teqcs	sp, #111	; 0x6f
 25c:	3d233d3d 	stccc	13, cr3, [r3, #-244]!	; 0xffffff0c
 260:	053d233d 	ldreq	r2, [sp, #-829]!	; 0xfffffcc3
 264:	1e052201 	cdpne	2, 0, cr2, cr5, cr1, {0}
 268:	2f05054c 	svccs	0x0005054c
 26c:	2013053d 	andscs	r0, r3, sp, lsr r5
 270:	3d2f0505 	cfstr32cc	mvfx0, [pc, #-20]!	; 264 <startup-0x1ffffd9c>
 274:	0009053d 	andeq	r0, r9, sp, lsr r5
 278:	30010402 	andcc	r0, r1, r2, lsl #8
 27c:	01040200 	mrseq	r0, R12_usr
 280:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
 284:	02002f01 	andeq	r2, r0, #1, 30
 288:	003d0104 	eorseq	r0, sp, r4, lsl #2
 28c:	2b010402 	blcs	4129c <startup-0x1ffbed64>
 290:	0b033505 	bleq	cd6ac <startup-0x1ff32954>
 294:	67050558 	smlsdvs	r5, r8, r5, r0
 298:	2013053d 	andscs	r0, r3, sp, lsr r5
 29c:	3d2f0505 	cfstr32cc	mvfx0, [pc, #-20]!	; 290 <startup-0x1ffffd70>
 2a0:	053d2f59 	ldreq	r2, [sp, #-3929]!	; 0xfffff0a7
 2a4:	13052f1c 	movwne	r2, #24348	; 0x5f1c
 2a8:	4b050520 	blmi	141730 <startup-0x1febe8d0>
 2ac:	2013053d 	andscs	r0, r3, sp, lsr r5
 2b0:	05301405 	ldreq	r1, [r0, #-1029]!	; 0xfffffbfb
 2b4:	09054a08 	stmdbeq	r5, {r3, r9, fp, lr}
 2b8:	3f140521 	svccc	0x00140521
 2bc:	054a0805 	strbeq	r0, [sl, #-2053]	; 0xfffff7fb
 2c0:	0c052109 	stfeqs	f2, [r5], {9}
 2c4:	3d01053f 	cfstr32cc	mvfx0, [r1, #-252]	; 0xffffff04
 2c8:	05ca2e05 	strbeq	r2, [sl, #3589]	; 0xe05
 2cc:	0559670c 	ldrbeq	r6, [r9, #-1804]	; 0xfffff8f4
 2d0:	36056701 	strcc	r6, [r5], -r1, lsl #14
 2d4:	9105054c 	tstls	r5, ip, asr #10
 2d8:	05201605 	streq	r1, [r0, #-1541]!	; 0xfffff9fb
 2dc:	2f593d05 	svccs	0x00593d05
 2e0:	13052f3d 	movwne	r2, #24381	; 0x5f3d
 2e4:	4a07053e 	bmi	1c17e4 <startup-0x1fe3e81c>
 2e8:	05210905 	streq	r0, [r1, #-2309]!	; 0xfffff6fb
 2ec:	07053f13 	smladeq	r5, r3, pc, r3	; <UNPREDICTABLE>
 2f0:	2109054a 	tstcs	r9, sl, asr #10
 2f4:	05410505 	strbeq	r0, [r1, #-1285]	; 0xfffffafb
 2f8:	05052016 	streq	r2, [r5, #-22]	; 0xffffffea
 2fc:	01053d2f 	tsteq	r5, pc, lsr #26
 300:	683c053e 	ldmdavs	ip!, {r1, r2, r3, r4, r5, r8, sl}
 304:	3d910505 	cfldr32cc	mvfx0, [r1, #20]
 308:	053d3d59 	ldreq	r3, [sp, #-3417]!	; 0xfffff2a7
 30c:	3a058301 	bcc	160f18 <startup-0x1fe9f0e8>
 310:	9105054c 	tstls	r5, ip, asr #10
 314:	3d3d593d 			; <UNDEFINED> instruction: 0x3d3d593d
 318:	05830105 	streq	r0, [r3, #261]	; 0x105
 31c:	0e054c20 	cdpeq	12, 0, cr4, cr5, cr0, {1}
 320:	2e05053d 	mcrcs	5, 0, r0, cr5, cr13, {1}
 324:	05212c05 	streq	r2, [r1, #-3077]!	; 0xfffff3fb
 328:	05596609 	ldrbeq	r6, [r9, #-1545]	; 0xfffff9f7
 32c:	09054b12 	stmdbeq	r5, {r1, r4, r8, r9, fp, lr}
 330:	000d052e 	andeq	r0, sp, lr, lsr #10
 334:	21030402 	tstcs	r3, r2, lsl #8
 338:	02002805 	andeq	r2, r0, #327680	; 0x50000
 33c:	05490304 	strbeq	r0, [r9, #-772]	; 0xfffffcfc
 340:	04020009 	streq	r0, [r2], #-9
 344:	26053c01 	strcs	r3, [r5], -r1, lsl #24
 348:	02040200 	andeq	r0, r4, #0, 4
 34c:	00050539 	andeq	r0, r5, r9, lsr r5
 350:	3c010402 	cfstrscc	mvf0, [r1], {2}
 354:	05430105 	strbeq	r0, [r3, #-261]	; 0xfffffefb
 358:	0c055a18 			; <UNDEFINED> instruction: 0x0c055a18
 35c:	2e05053e 	mcrcs	5, 0, r0, cr5, cr14, {1}
 360:	02001705 	andeq	r1, r0, #1310720	; 0x140000
 364:	05210304 	streq	r0, [r1, #-772]!	; 0xfffffcfc
 368:	0402001c 	streq	r0, [r2], #-28	; 0xffffffe4
 36c:	05055703 	streq	r5, [r5, #-1795]	; 0xfffff8fd
 370:	01040200 	mrseq	r0, R12_usr
 374:	5a01053c 	bpl	4186c <startup-0x1ffbe794>
 378:	05842305 	streq	r2, [r4, #773]	; 0x305
 37c:	08055a09 	stmdaeq	r5, {r0, r3, r9, fp, ip, lr}
 380:	0011052f 	andseq	r0, r1, pc, lsr #10
 384:	3c020402 	cfstrscc	mvf0, [r2], {2}
 388:	02001905 	andeq	r1, r0, #81920	; 0x14000
 38c:	053c0404 	ldreq	r0, [ip, #-1028]!	; 0xfffffbfc
 390:	04020022 	streq	r0, [r2], #-34	; 0xffffffde
 394:	14053c06 	strne	r3, [r5], #-3078	; 0xfffff3fa
 398:	2e17053e 	mrccs	5, 0, r0, cr7, cr14, {1}
 39c:	052e0e05 	streq	r0, [lr, #-3589]!	; 0xfffff1fb
 3a0:	07052e0a 	streq	r2, [r5, -sl, lsl #28]
 3a4:	3d0b053e 	cfstr32cc	mvfx0, [fp, #-248]	; 0xffffff08
 3a8:	053d0f05 	ldreq	r0, [sp, #-3845]!	; 0xfffff0fb
 3ac:	18053f15 	stmdane	r5, {r0, r2, r4, r8, r9, sl, fp, ip, sp}
 3b0:	201b052e 	andscs	r0, fp, lr, lsr #10
 3b4:	05201005 	streq	r1, [r0, #-5]!
 3b8:	17052e0b 	strne	r2, [r5, -fp, lsl #28]
 3bc:	032c053e 			; <UNDEFINED> instruction: 0x032c053e
 3c0:	0105d675 	tsteq	r5, r5, ror r6
 3c4:	05200c03 	streq	r0, [r0, #-3075]!	; 0xfffff3fd
 3c8:	12055a1f 	andne	r5, r5, #126976	; 0x1f000
 3cc:	300c053e 	andcc	r0, ip, lr, lsr r5
 3d0:	054a0505 	strbeq	r0, [sl, #-1285]	; 0xfffffafb
 3d4:	02002114 	andeq	r2, r0, #20, 2
 3d8:	58060104 	stmdapl	r6, {r2, r8}
 3dc:	02040200 	andeq	r0, r4, #0, 4
 3e0:	0402002e 	streq	r0, [r2], #-46	; 0xffffffd2
 3e4:	10052004 	andne	r2, r5, r4
 3e8:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
 3ec:	09052f06 	stmdbeq	r5, {r1, r2, r8, r9, sl, fp, sp}
 3f0:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
 3f4:	210d054a 	tstcs	sp, sl, asr #10
 3f8:	671305c9 	ldrvs	r0, [r3, -r9, asr #11]
 3fc:	054a0d05 	strbeq	r0, [sl, #-3333]	; 0xfffff2fb
 400:	0402002e 	streq	r0, [r2], #-46	; 0xffffffd2
 404:	11052103 	tstne	r5, r3, lsl #2
 408:	03040200 	movweq	r0, #16896	; 0x4200
 40c:	0022054a 	eoreq	r0, r2, sl, asr #10
 410:	73030402 	movwvc	r0, #13314	; 0x3402
 414:	02002705 	andeq	r2, r0, #1310720	; 0x140000
 418:	05660304 	strbeq	r0, [r6, #-772]!	; 0xfffffcfc
 41c:	0402000d 	streq	r0, [r2], #-13
 420:	1d053c01 	stcne	12, cr3, [r5, #-4]
 424:	02040200 	andeq	r0, r4, #0, 4
 428:	00090555 	andeq	r0, r9, r5, asr r5
 42c:	66010402 	strvs	r0, [r1], -r2, lsl #8
 430:	02001905 	andeq	r1, r0, #81920	; 0x14000
 434:	05560204 	ldrbeq	r0, [r6, #-516]	; 0xfffffdfc
 438:	04020005 	streq	r0, [r2], #-5
 43c:	01056601 	tsteq	r5, r1, lsl #12
 440:	02580a03 	subseq	r0, r8, #12288	; 0x3000
 444:	01010008 	tsteq	r1, r8
 448:	000004ee 	andeq	r0, r0, lr, ror #9
 44c:	006c0003 	rsbeq	r0, ip, r3
 450:	01020000 	mrseq	r0, (UNDEF: 2)
 454:	000d0efb 	strdeq	r0, [sp], -fp
 458:	01010101 	tsteq	r1, r1, lsl #2
 45c:	01000000 	mrseq	r0, (UNDEF: 0)
 460:	5a010000 	bpl	40468 <startup-0x1ffbfb98>
 464:	6f6d2f3a 	svcvs	0x006d2f3a
 468:	4f4d2f70 	svcmi	0x004d2f70
 46c:	70532d50 	subsvc	r2, r3, r0, asr sp
 470:	532f6c65 			; <UNDEFINED> instruction: 0x532f6c65
 474:	656b616e 	strbvs	r6, [fp, #-366]!	; 0xfffffe92
 478:	74730000 	ldrbtvc	r0, [r3], #-0
 47c:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
 480:	00632e70 	rsbeq	r2, r3, r0, ror lr
 484:	67000001 	strvs	r0, [r0, -r1]
 488:	656d6f65 	strbvs	r6, [sp, #-3941]!	; 0xfffff09b
 48c:	63697274 	cmnvs	r9, #116, 4	; 0x40000007
 490:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
 494:	682e7463 	stmdavs	lr!, {r0, r1, r5, r6, sl, ip, sp, lr}
 498:	00000100 	andeq	r0, r0, r0, lsl #2
 49c:	70617267 	rsbvc	r7, r1, r7, ror #4
 4a0:	64636968 	strbtvs	r6, [r3], #-2408	; 0xfffff698
 4a4:	6c707369 	ldclvs	3, cr7, [r0], #-420	; 0xfffffe5c
 4a8:	682e7961 	stmdavs	lr!, {r0, r5, r6, r8, fp, ip, sp, lr}
 4ac:	00000100 	andeq	r0, r0, r0, lsl #2
 4b0:	67616d69 	strbvs	r6, [r1, -r9, ror #26]!
 4b4:	62782e65 	rsbsvs	r2, r8, #1616	; 0x650
 4b8:	0001006d 	andeq	r0, r1, sp, rrx
 4bc:	01050000 	mrseq	r0, (UNDEF: 5)
 4c0:	00020500 	andeq	r0, r2, r0, lsl #10
 4c4:	03200000 	nopeq	{0}	; <UNPREDICTABLE>
 4c8:	2113011a 	tstcs	r3, sl, lsl r1
 4cc:	02212f21 	eoreq	r2, r1, #33, 30	; 0x84
 4d0:	01010003 	tsteq	r1, r3
 4d4:	05003905 	streq	r3, [r0, #-2309]	; 0xfffff6fb
 4d8:	00081c02 	andeq	r1, r8, r2, lsl #24
 4dc:	01210320 			; <UNDEFINED> instruction: 0x01210320
 4e0:	3d670d05 	stclcc	13, cr0, [r7, #-20]!	; 0xffffffec
 4e4:	053d0105 	ldreq	r0, [sp, #-261]!	; 0xfffffefb
 4e8:	0e054c1c 	mcreq	12, 0, r4, cr5, cr12, {0}
 4ec:	2e05054b 	cfsh32cs	mvfx0, mvfx5, #43
 4f0:	02001005 	andeq	r1, r0, #5
 4f4:	05210304 	streq	r0, [r1, #-772]!	; 0xfffffcfc
 4f8:	0402001c 	streq	r0, [r2], #-28	; 0xffffffe4
 4fc:	20052e03 	andcs	r2, r5, r3, lsl #28
 500:	03040200 	movweq	r0, #16896	; 0x4200
 504:	001e0574 	andseq	r0, lr, r4, ror r5
 508:	2e030402 	cdpcs	4, 0, cr0, cr3, cr2, {0}
 50c:	02000905 	andeq	r0, r0, #81920	; 0x14000
 510:	05200304 	streq	r0, [r0, #-772]!	; 0xfffffcfc
 514:	04020028 	streq	r0, [r2], #-40	; 0xffffffd8
 518:	34052003 	strcc	r2, [r5], #-3
 51c:	03040200 	movweq	r0, #16896	; 0x4200
 520:	0038052e 	eorseq	r0, r8, lr, lsr #10
 524:	74030402 	strvc	r0, [r3], #-1026	; 0xfffffbfe
 528:	02003605 	andeq	r3, r0, #5242880	; 0x500000
 52c:	052e0304 	streq	r0, [lr, #-772]!	; 0xfffffcfc
 530:	04020009 	streq	r0, [r2], #-9
 534:	2b052003 	blcs	148548 <startup-0x1feb7ab8>
 538:	03040200 	movweq	r0, #16896	; 0x4200
 53c:	0018053b 	andseq	r0, r8, fp, lsr r5
 540:	3c010402 	cfstrscc	mvf0, [r1], {2}
 544:	02001d05 	andeq	r1, r0, #320	; 0x140
 548:	052e0104 	streq	r0, [lr, #-260]!	; 0xfffffefc
 54c:	04020005 	streq	r0, [r2], #-5
 550:	01052001 	tsteq	r5, r1
 554:	5a1d053f 	bpl	741a58 <startup-0x1f8be5a8>
 558:	054b0e05 	strbeq	r0, [fp, #-3589]	; 0xfffff1fb
 55c:	10052e05 	andne	r2, r5, r5, lsl #28
 560:	03040200 	movweq	r0, #16896	; 0x4200
 564:	001c0521 	andseq	r0, ip, r1, lsr #10
 568:	2e030402 	cdpcs	4, 0, cr0, cr3, cr2, {0}
 56c:	02002005 	andeq	r2, r0, #5
 570:	05740304 	ldrbeq	r0, [r4, #-772]!	; 0xfffffcfc
 574:	0402001e 	streq	r0, [r2], #-30	; 0xffffffe2
 578:	09052e03 	stmdbeq	r5, {r0, r1, r9, sl, fp, sp}
 57c:	03040200 	movweq	r0, #16896	; 0x4200
 580:	00280520 	eoreq	r0, r8, r0, lsr #10
 584:	20030402 	andcs	r0, r3, r2, lsl #8
 588:	02003405 	andeq	r3, r0, #83886080	; 0x5000000
 58c:	052e0304 	streq	r0, [lr, #-772]!	; 0xfffffcfc
 590:	04020038 	streq	r0, [r2], #-56	; 0xffffffc8
 594:	36057403 	strcc	r7, [r5], -r3, lsl #8
 598:	03040200 	movweq	r0, #16896	; 0x4200
 59c:	0009052e 	andeq	r0, r9, lr, lsr #10
 5a0:	20030402 	andcs	r0, r3, r2, lsl #8
 5a4:	02002d05 	andeq	r2, r0, #320	; 0x140
 5a8:	053b0304 	ldreq	r0, [fp, #-772]!	; 0xfffffcfc
 5ac:	0402001a 	streq	r0, [r2], #-26	; 0xffffffe6
 5b0:	1f053c01 	svcne	0x00053c01
 5b4:	01040200 	mrseq	r0, R12_usr
 5b8:	0005052e 	andeq	r0, r5, lr, lsr #10
 5bc:	20010402 	andcs	r0, r1, r2, lsl #8
 5c0:	053f0105 	ldreq	r0, [pc, #-261]!	; 4c3 <startup-0x1ffffb3d>
 5c4:	10055a1c 	andne	r5, r5, ip, lsl sl
 5c8:	2e1a054d 	cfmac32cs	mvfx0, mvfx10, mvfx13
 5cc:	052e1705 	streq	r1, [lr, #-1797]!	; 0xfffff8fb
 5d0:	1005200d 	andne	r2, r5, sp
 5d4:	2e1a052f 	cfmul64cs	mvdx0, mvdx10, mvdx15
 5d8:	052e1705 	streq	r1, [lr, #-1797]!	; 0xfffff8fb
 5dc:	0a05200d 	beq	148618 <startup-0x1feb79e8>
 5e0:	2e120532 	mrccs	5, 0, r0, cr2, cr2, {1}
 5e4:	052e1005 	streq	r1, [lr, #-5]!
 5e8:	11052007 	tstne	r5, r7
 5ec:	0a05592f 	beq	156ab0 <startup-0x1fea9550>
 5f0:	2e12053f 	mrccs	5, 0, r0, cr2, cr15, {1}
 5f4:	052e1005 	streq	r1, [lr, #-5]!
 5f8:	11052007 	tstne	r5, r7
 5fc:	5910052f 	ldmdbpl	r0, {r0, r1, r2, r3, r5, r8, sl}
 600:	053f0a05 	ldreq	r0, [pc, #-2565]!	; fffffc03 <rear+0xdfffc7cb>
 604:	10052e12 	andne	r2, r5, r2, lsl lr
 608:	2007052e 	andcs	r0, r7, lr, lsr #10
 60c:	592f1105 	stmdbpl	pc!, {r0, r2, r8, ip}	; <UNPREDICTABLE>
 610:	053f0a05 	ldreq	r0, [pc, #-2565]!	; fffffc13 <rear+0xdfffc7db>
 614:	10052e12 	andne	r2, r5, r2, lsl lr
 618:	2007052e 	andcs	r0, r7, lr, lsr #10
 61c:	592f1105 	stmdbpl	pc!, {r0, r2, r8, ip}	; <UNPREDICTABLE>
 620:	053e0505 	ldreq	r0, [lr, #-1285]!	; 0xfffffafb
 624:	4f054b01 	svcmi	0x00054b01
 628:	054a3b03 	strbeq	r3, [sl, #-2819]	; 0xfffff4fd
 62c:	0f05750e 	svceq	0x0005750e
 630:	4b0d054b 	blmi	341b64 <startup-0x1fcbe49c>
 634:	053d0105 	ldreq	r0, [sp, #-261]!	; 0xfffffefb
 638:	09054c2a 	stmdbeq	r5, {r1, r3, r5, sl, fp, lr}
 63c:	2e150569 	cfmsc32cs	mvfx0, mvfx5, mvfx9
 640:	053c0705 	ldreq	r0, [ip, #-1797]!	; 0xfffff8fb
 644:	22052f1b 	andcs	r2, r5, #27, 30	; 0x6c
 648:	2e18052e 	cfmul64cs	mvdx0, mvdx8, mvdx14
 64c:	05301b05 	ldreq	r1, [r0, #-2821]!	; 0xfffff4fb
 650:	18052e22 	stmdane	r5, {r1, r5, r9, sl, fp, sp}
 654:	310c052e 	tstcc	ip, lr, lsr #10
 658:	052e0505 	streq	r0, [lr, #-1285]!	; 0xfffffafb
 65c:	09052110 	stmdbeq	r5, {r4, r8, sp}
 660:	2123052e 			; <UNDEFINED> instruction: 0x2123052e
 664:	052e2b05 	streq	r2, [lr, #-2821]!	; 0xfffff4fb
 668:	29053c3b 	stmdbcs	r5, {r0, r1, r3, r4, r5, sl, fp, ip, sp}
 66c:	201b052e 	andscs	r0, fp, lr, lsr #10
 670:	054b1405 	strbeq	r1, [fp, #-1029]	; 0xfffffbfb
 674:	15052e0d 	strne	r2, [r5, #-3597]	; 0xfffff1f3
 678:	82140521 	andshi	r0, r4, #138412032	; 0x8400000
 67c:	05211d05 	streq	r1, [r1, #-3333]!	; 0xfffff2fb
 680:	25052e21 	strcs	r2, [r5, #-3617]	; 0xfffff1df
 684:	2e29052e 	cfsh64cs	mvdx0, mvdx9, #30
 688:	05201505 	streq	r1, [r0, #-1285]!	; 0xfffffafb
 68c:	34052030 	strcc	r2, [r5], #-48	; 0xffffffd0
 690:	2015053c 	andscs	r0, r5, ip, lsr r5
 694:	02002105 	andeq	r2, r0, #1073741825	; 0x40000001
 698:	053a0204 	ldreq	r0, [sl, #-516]!	; 0xfffffdfc
 69c:	0402000d 	streq	r0, [r2], #-13
 6a0:	2a053c01 	bcs	14f6ac <startup-0x1feb0954>
 6a4:	02040200 	andeq	r0, r4, #0, 4
 6a8:	0009053a 	andeq	r0, r9, sl, lsr r5
 6ac:	3c010402 	cfstrscc	mvf0, [r1], {2}
 6b0:	02002105 	andeq	r2, r0, #1073741825	; 0x40000001
 6b4:	05490204 	strbeq	r0, [r9, #-516]	; 0xfffffdfc
 6b8:	04020016 	streq	r0, [r2], #-22	; 0xffffffea
 6bc:	05053c01 	streq	r3, [r5, #-3073]	; 0xfffff3ff
 6c0:	01040200 	mrseq	r0, R12_usr
 6c4:	0301053c 	movweq	r0, #5436	; 0x153c
 6c8:	1b053c09 	blne	14f6f4 <startup-0x1feb090c>
 6cc:	4b0e055b 	blmi	381c40 <startup-0x1fc7e3c0>
 6d0:	052e0505 	streq	r0, [lr, #-1285]!	; 0xfffffafb
 6d4:	0402000a 	streq	r0, [r2], #-10
 6d8:	0d052103 	stfeqs	f2, [r5, #-12]
 6dc:	03040200 	movweq	r0, #16896	; 0x4200
 6e0:	00150582 	andseq	r0, r5, r2, lsl #11
 6e4:	20030402 	andcs	r0, r3, r2, lsl #8
 6e8:	02000905 	andeq	r0, r0, #81920	; 0x14000
 6ec:	05660304 	strbeq	r0, [r6, #-772]!	; 0xfffffcfc
 6f0:	0402002a 	streq	r0, [r2], #-42	; 0xffffffd6
 6f4:	17054903 	strne	r4, [r5, -r3, lsl #18]
 6f8:	01040200 	mrseq	r0, R12_usr
 6fc:	0005053c 	andeq	r0, r5, ip, lsr r5
 700:	2e010402 	cdpcs	4, 0, cr0, cr1, cr2, {0}
 704:	053f0105 	ldreq	r0, [pc, #-261]!	; 607 <startup-0x1ffff9f9>
 708:	0905761e 	stmdbeq	r5, {r1, r2, r3, r4, r9, sl, ip, sp, lr}
 70c:	0d053d4b 	stceq	13, cr3, [r5, #-300]	; 0xfffffed4
 710:	3c05053d 	cfstr32cc	mvfx0, [r5], {61}	; 0x3d
 714:	02001805 	andeq	r1, r0, #327680	; 0x50000
 718:	05210304 	streq	r0, [r1, #-772]!	; 0xfffffcfc
 71c:	0402000d 	streq	r0, [r2], #-13
 720:	0a058203 	beq	160f34 <startup-0x1fe9f0cc>
 724:	03040200 	movweq	r0, #16896	; 0x4200
 728:	0013052f 	andseq	r0, r3, pc, lsr #10
 72c:	82030402 	andhi	r0, r3, #33554432	; 0x2000000
 730:	02001005 	andeq	r1, r0, #5
 734:	052f0304 	streq	r0, [pc, #-772]!	; 438 <startup-0x1ffffbc8>
 738:	04020014 	streq	r0, [r2], #-20	; 0xffffffec
 73c:	11053003 	tstne	r5, r3
 740:	03040200 	movweq	r0, #16896	; 0x4200
 744:	000a0582 	andeq	r0, sl, r2, lsl #11
 748:	2f030402 	svccs	0x00030402
 74c:	02001305 	andeq	r1, r0, #335544320	; 0x14000000
 750:	05820304 	streq	r0, [r2, #772]	; 0x304
 754:	04020010 	streq	r0, [r2], #-16
 758:	24052f03 	strcs	r2, [r5], #-3843	; 0xfffff0fd
 75c:	03040200 	movweq	r0, #16896	; 0x4200
 760:	052e7903 	streq	r7, [lr, #-2307]!	; 0xfffff6fd
 764:	04020005 	streq	r0, [r2], #-5
 768:	01053c01 	tsteq	r5, r1, lsl #24
 76c:	053c0903 	ldreq	r0, [ip, #-2307]!	; 0xfffff6fd
 770:	0905841e 	stmdbeq	r5, {r1, r2, r3, r4, sl, pc}
 774:	2e150559 	mrccs	5, 0, r0, cr5, cr9, {2}
 778:	052f0605 	streq	r0, [pc, #-1541]!	; 17b <startup-0x1ffffe85>
 77c:	05300814 	ldreq	r0, [r0, #-2068]!	; 0xfffff7ec
 780:	12052e0f 	andne	r2, r5, #15, 28	; 0xf0
 784:	2e11052f 	cfmul64cs	mvdx0, mvdx1, mvdx15
 788:	054c0d05 	strbeq	r0, [ip, #-3333]	; 0xfffff2fb
 78c:	0f052214 	svceq	0x00052214
 790:	2f12052e 	svccs	0x0012052e
 794:	052e1105 	streq	r1, [lr, #-261]!	; 0xfffffefb
 798:	14055a0d 	strne	r5, [r5], #-2573	; 0xfffff5f3
 79c:	2e0f0522 	cfsh32cs	mvfx0, mvfx15, #18
 7a0:	052f1205 	streq	r1, [pc, #-517]!	; 5a3 <startup-0x1ffffa5d>
 7a4:	0d052e11 	stceq	14, cr2, [r5, #-68]	; 0xffffffbc
 7a8:	2214055a 	andscs	r0, r4, #377487360	; 0x16800000
 7ac:	052e0f05 	streq	r0, [lr, #-3845]!	; 0xfffff0fb
 7b0:	11052f12 	tstne	r5, r2, lsl pc
 7b4:	4c0d052e 	cfstr32mi	mvfx0, [sp], {46}	; 0x2e
 7b8:	33207103 			; <UNDEFINED> instruction: 0x33207103
 7bc:	05053333 	streq	r3, [r5, #-819]	; 0xfffffccd
 7c0:	4c010522 	cfstr32mi	mvfx0, [r1], {34}	; 0x22
 7c4:	054c1405 	strbeq	r1, [ip, #-1029]	; 0xfffffbfb
 7c8:	2b053109 	blcs	14cbf4 <startup-0x1feb340c>
 7cc:	2f090520 	svccs	0x00090520
 7d0:	05310505 	ldreq	r0, [r1, #-1285]!	; 0xfffffafb
 7d4:	05052013 	streq	r2, [r5, #-19]	; 0xffffffed
 7d8:	2014052f 	andscs	r0, r4, pc, lsr #10
 7dc:	052f0505 	streq	r0, [pc, #-1285]!	; 2df <startup-0x1ffffd21>
 7e0:	05052015 	streq	r2, [r5, #-21]	; 0xffffffeb
 7e4:	20130530 	andscs	r0, r3, r0, lsr r5
 7e8:	052f0505 	streq	r0, [pc, #-1285]!	; 2eb <startup-0x1ffffd15>
 7ec:	05052013 	streq	r2, [r5, #-19]	; 0xffffffed
 7f0:	2013053d 	andscs	r0, r3, sp, lsr r5
 7f4:	7505052f 	strvc	r0, [r5, #-1327]	; 0xfffffad1
 7f8:	05201405 	streq	r1, [r0, #-1029]!	; 0xfffffbfb
 7fc:	1b052f01 	blne	14c408 <startup-0x1feb3bf8>
 800:	09053008 	stmdbeq	r5, {r3, ip, sp}
 804:	2f0e054b 	svccs	0x000e054b
 808:	052e0505 	streq	r0, [lr, #-1285]!	; 0xfffffafb
 80c:	0e05210b 	adfeqs	f2, f5, #3.0
 810:	8216053d 	andshi	r0, r6, #255852544	; 0xf400000
 814:	053e0e05 	ldreq	r0, [lr, #-3589]!	; 0xfffff1fb
 818:	17058216 	smladne	r5, r6, r2, r8
 81c:	02040200 	andeq	r0, r4, #0, 4
 820:	000a0530 	andeq	r0, sl, r0, lsr r5
 824:	2e020402 	cdpcs	4, 0, cr0, cr2, cr2, {0}
 828:	02001b05 	andeq	r1, r0, #5120	; 0x1400
 82c:	05820204 	streq	r0, [r2, #516]	; 0x204
 830:	04020013 	streq	r0, [r2], #-19	; 0xffffffed
 834:	0a052002 	beq	148844 <startup-0x1feb77bc>
 838:	02040200 	andeq	r0, r4, #0, 4
 83c:	00130521 	andseq	r0, r3, r1, lsr #10
 840:	82020402 	andhi	r0, r2, #33554432	; 0x2000000
 844:	02000a05 	andeq	r0, r0, #20480	; 0x5000
 848:	052f0204 	streq	r0, [pc, #-516]!	; 64c <startup-0x1ffff9b4>
 84c:	04020013 	streq	r0, [r2], #-19	; 0xffffffed
 850:	0a058202 	beq	161060 <startup-0x1fe9efa0>
 854:	02040200 	andeq	r0, r4, #0, 4
 858:	0013052f 	andseq	r0, r3, pc, lsr #10
 85c:	82020402 	andhi	r0, r2, #33554432	; 0x2000000
 860:	02000a05 	andeq	r0, r0, #20480	; 0x5000
 864:	052f0204 	streq	r0, [pc, #-516]!	; 668 <startup-0x1ffff998>
 868:	04020013 	streq	r0, [r2], #-19	; 0xffffffed
 86c:	0a058202 	beq	16107c <startup-0x1fe9ef84>
 870:	02040200 	andeq	r0, r4, #0, 4
 874:	0014052f 	andseq	r0, r4, pc, lsr #10
 878:	82020402 	andhi	r0, r2, #33554432	; 0x2000000
 87c:	02000a05 	andeq	r0, r0, #20480	; 0x5000
 880:	052f0204 	streq	r0, [pc, #-516]!	; 684 <startup-0x1ffff97c>
 884:	04020013 	streq	r0, [r2], #-19	; 0xffffffed
 888:	0a058202 	beq	161098 <startup-0x1fe9ef68>
 88c:	02040200 	andeq	r0, r4, #0, 4
 890:	0018052f 	andseq	r0, r8, pc, lsr #10
 894:	82020402 	andhi	r0, r2, #33554432	; 0x2000000
 898:	02001205 	andeq	r1, r0, #1342177280	; 0x50000000
 89c:	052f0204 	streq	r0, [pc, #-516]!	; 6a0 <startup-0x1ffff960>
 8a0:	0402001e 	streq	r0, [r2], #-30	; 0xffffffe2
 8a4:	58720302 	ldmdapl	r2!, {r1, r8, r9}^
 8a8:	02002305 	andeq	r2, r0, #335544320	; 0x14000000
 8ac:	053c0204 	ldreq	r0, [ip, #-516]!	; 0xfffffdfc
 8b0:	04020005 	streq	r0, [r2], #-5
 8b4:	01053c01 	tsteq	r5, r1, lsl #24
 8b8:	053c1003 	ldreq	r1, [ip, #-3]!
 8bc:	05300814 	ldreq	r0, [r0, #-2068]!	; 0xfffff7ec
 8c0:	052f2f09 	streq	r2, [pc, #-3849]!	; fffff9bf <rear+0xdfffc587>
 8c4:	13052f10 	movwne	r2, #24336	; 0x5f10
 8c8:	3d01053d 	cfstr32cc	mvfx0, [r1, #-244]	; 0xffffff0c
 8cc:	05842105 	streq	r2, [r4, #261]	; 0x105
 8d0:	13056709 	movwne	r6, #22281	; 0x5709
 8d4:	4d0d054a 	cfstr32mi	mvfx0, [sp, #-296]	; 0xfffffed8
 8d8:	2f4e0505 	svccs	0x004e0505
 8dc:	300a052f 	andcc	r0, sl, pc, lsr #10
 8e0:	05220d05 	streq	r0, [r2, #-3333]!	; 0xfffff2fb
 8e4:	2e0b030b 	cdpcs	3, 0, cr0, cr11, cr11, {0}
 8e8:	05590d05 	ldrbeq	r0, [r9, #-3333]	; 0xfffff2fb
 8ec:	0d052f15 	stceq	15, cr2, [r5, #-84]	; 0xffffffac
 8f0:	5b0e053d 	blpl	381dec <startup-0x1fc7e214>
 8f4:	32210d05 	eorcc	r0, r1, #320	; 0x140
 8f8:	311a055a 	tstcc	sl, sl, asr r5
 8fc:	05670d05 	strbeq	r0, [r7, #-3333]!	; 0xfffff2fb
 900:	1105911d 	tstne	r5, sp, lsl r1
 904:	211c0566 	tstcs	ip, r6, ror #10
 908:	05661105 	strbeq	r1, [r6, #-261]!	; 0xfffffefb
 90c:	1105211a 	tstne	r5, sl, lsl r1
 910:	211c0566 	tstcs	ip, r6, ror #10
 914:	05661105 	strbeq	r1, [r6, #-261]!	; 0xfffffefb
 918:	2e052121 	adfcssp	f2, f5, f1
 91c:	4a11054a 	bmi	441e4c <startup-0x1fbbe1b4>
 920:	05212705 	streq	r2, [r1, #-1797]!	; 0xfffff8fb
 924:	0e054a11 			; <UNDEFINED> instruction: 0x0e054a11
 928:	05206f03 	streq	r6, [r0, #-3843]!	; 0xfffff0fd
 92c:	666d030a 	strbtvs	r0, [sp], -sl, lsl #6
 930:	29030105 	stmdbcs	r3, {r0, r2, r8}
 934:	00180258 	andseq	r0, r8, r8, asr r2
 938:	00b30101 	adcseq	r0, r3, r1, lsl #2
 93c:	00030000 	andeq	r0, r3, r0
 940:	00000034 	andeq	r0, r0, r4, lsr r0
 944:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
 948:	0101000d 	tsteq	r1, sp
 94c:	00000101 	andeq	r0, r0, r1, lsl #2
 950:	00000100 	andeq	r0, r0, r0, lsl #2
 954:	2f3a5a01 	svccs	0x003a5a01
 958:	2f706f6d 	svccs	0x00706f6d
 95c:	2d504f4d 	ldclcs	15, cr4, [r0, #-308]	; 0xfffffecc
 960:	6c657053 	stclvs	0, cr7, [r5], #-332	; 0xfffffeb4
 964:	616e532f 	cmnvs	lr, pc, lsr #6
 968:	0000656b 	andeq	r6, r0, fp, ror #10
 96c:	616c6564 	cmnvs	ip, r4, ror #10
 970:	00632e79 	rsbeq	r2, r3, r9, ror lr
 974:	00000001 	andeq	r0, r0, r1
 978:	05001905 	streq	r1, [r0, #-2309]	; 0xfffff6fb
 97c:	000f0c02 	andeq	r0, pc, r2, lsl #24
 980:	05051620 	streq	r1, [r5, #-1568]	; 0xfffff9e0
 984:	200f0533 	andcs	r0, pc, r3, lsr r5	; <UNPREDICTABLE>
 988:	052f0505 	streq	r0, [pc, #-1285]!	; 48b <startup-0x1ffffb75>
 98c:	0505200f 	streq	r2, [r5, #-15]
 990:	200e052f 	andcs	r0, lr, pc, lsr #10
 994:	052f0505 	streq	r0, [pc, #-1285]!	; 497 <startup-0x1ffffb69>
 998:	0a05200f 	beq	1489dc <startup-0x1feb7624>
 99c:	000d052f 	andeq	r0, sp, pc, lsr #10
 9a0:	20010402 	andcs	r0, r1, r2, lsl #8
 9a4:	02001705 	andeq	r1, r0, #1310720	; 0x140000
 9a8:	052e0104 	streq	r0, [lr, #-260]!	; 0xfffffefc
 9ac:	0402000a 	streq	r0, [r2], #-10
 9b0:	05053c01 	streq	r3, [r5, #-3073]	; 0xfffff3ff
 9b4:	200f0521 	andcs	r0, pc, r1, lsr #10
 9b8:	052f0105 	streq	r0, [pc, #-261]!	; 8bb <startup-0x1ffff745>
 9bc:	0505a017 	streq	sl, [r5, #-23]	; 0xffffffe9
 9c0:	01052f32 	tsteq	r5, r2, lsr pc
 9c4:	3e22052f 	cfsh64cc	mvdx0, mvdx2, #31
 9c8:	054e0a05 	strbeq	r0, [lr, #-2565]	; 0xfffff5fb
 9cc:	2f2f2109 	svccs	0x002f2109
 9d0:	2a0d052f 	bcs	341e94 <startup-0x1fcbe16c>
 9d4:	053c0a05 	ldreq	r0, [ip, #-2565]!	; 0xfffff5fb
 9d8:	22053401 	andcs	r3, r5, #16777216	; 0x1000000
 9dc:	500a055a 	andpl	r0, sl, sl, asr r5
 9e0:	05210905 	streq	r0, [r1, #-2309]!	; 0xfffff6fb
 9e4:	0a05570d 	beq	156620 <startup-0x1fea99e0>
 9e8:	3101053c 	tstcc	r1, ip, lsr r5
 9ec:	01000502 	tsteq	r0, r2, lsl #10
 9f0:	00018f01 	andeq	r8, r1, r1, lsl #30
 9f4:	f6000300 			; <UNDEFINED> instruction: 0xf6000300
 9f8:	02000000 	andeq	r0, r0, #0
 9fc:	0d0efb01 	vstreq	d15, [lr, #-4]
 a00:	01010100 	mrseq	r0, (UNDEF: 17)
 a04:	00000001 	andeq	r0, r0, r1
 a08:	01000001 	tsteq	r0, r1
 a0c:	6d2f3a5a 	vstmdbvs	pc!, {s6-s95}
 a10:	4d2f706f 	stcmi	0, cr7, [pc, #-444]!	; 85c <startup-0x1ffff7a4>
 a14:	532d504f 			; <UNDEFINED> instruction: 0x532d504f
 a18:	2f6c6570 	svccs	0x006c6570
 a1c:	6b616e53 	blvs	185c370 <startup-0x1e7a3c90>
 a20:	3a630065 	bcc	18c0bbc <startup-0x1e73f444>
 a24:	6573635c 	ldrbvs	r6, [r3, #-860]!	; 0xfffffca4
 a28:	5c707061 	ldclpl	0, cr7, [r0], #-388	; 0xfffffe7c
 a2c:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
 a30:	6574696c 	ldrbvs	r6, [r4, #-2412]!	; 0xfffff694
 a34:	6f6f745c 	svcvs	0x006f745c
 a38:	675c736c 	ldrbvs	r7, [ip, -ip, ror #6]
 a3c:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
 a40:	615c6d72 	cmpvs	ip, r2, ror sp
 a44:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
 a48:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
 a4c:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
 a50:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
 a54:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
 a58:	7379735c 	cmnvc	r9, #92, 6	; 0x70000001
 a5c:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
 a60:	61657363 	cmnvs	r5, r3, ror #6
 a64:	635c7070 	cmpvs	ip, #112	; 0x70
 a68:	6c65646f 	cfstrdvs	mvd6, [r5], #-444	; 0xfffffe44
 a6c:	5c657469 	cfstrdpl	mvd7, [r5], #-420	; 0xfffffe5c
 a70:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 8a8 <startup-0x1ffff758>
 a74:	63675c73 	cmnvs	r7, #29440	; 0x7300
 a78:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
 a7c:	696c5c6d 	stmdbvs	ip!, {r0, r2, r3, r5, r6, sl, fp, ip, lr}^
 a80:	63675c62 	cmnvs	r7, #25088	; 0x6200
 a84:	72615c63 	rsbvc	r5, r1, #25344	; 0x6300
 a88:	6f6e2d6d 	svcvs	0x006e2d6d
 a8c:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
 a90:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
 a94:	2e322e39 	mrccs	14, 1, r2, cr2, cr9, {1}
 a98:	6e695c31 	mcrvs	12, 3, r5, cr9, cr1, {1}
 a9c:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
 aa0:	71000065 	tstvc	r0, r5, rrx
 aa4:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0xfffffa8b
 aa8:	0100632e 	tsteq	r0, lr, lsr #6
 aac:	6f6c0000 	svcvs	0x006c0000
 ab0:	682e6b63 	stmdavs	lr!, {r0, r1, r5, r6, r8, r9, fp, sp, lr}
 ab4:	00000200 	andeq	r0, r0, r0, lsl #4
 ab8:	7079745f 	rsbsvc	r7, r9, pc, asr r4
 abc:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
 ac0:	00000200 	andeq	r0, r0, r0, lsl #4
 ac4:	64647473 	strbtvs	r7, [r4], #-1139	; 0xfffffb8d
 ac8:	682e6665 	stmdavs	lr!, {r0, r2, r5, r6, r9, sl, sp, lr}
 acc:	00000300 	andeq	r0, r0, r0, lsl #6
 ad0:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
 ad4:	00682e74 	rsbeq	r2, r8, r4, ror lr
 ad8:	67000002 	strvs	r0, [r0, -r2]
 adc:	656d6f65 	strbvs	r6, [sp, #-3941]!	; 0xfffff09b
 ae0:	63697274 	cmnvs	r9, #116, 4	; 0x40000007
 ae4:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
 ae8:	682e7463 	stmdavs	lr!, {r0, r1, r5, r6, sl, ip, sp, lr}
 aec:	00000100 	andeq	r0, r0, r0, lsl #2
 af0:	00120500 	andseq	r0, r2, r0, lsl #10
 af4:	0fb80205 	svceq	0x00b80205
 af8:	09032000 	stmdbeq	r3, {sp}
 afc:	3d0d0501 	cfstr32cc	mvfx0, [sp, #-4]
 b00:	052e0505 	streq	r0, [lr, #-1285]!	; 0xfffffafb
 b04:	04020015 	streq	r0, [r2], #-21	; 0xffffffeb
 b08:	1e052103 	adfnes	f2, f5, f3
 b0c:	03040200 	movweq	r0, #16896	; 0x4200
 b10:	00050557 	andeq	r0, r5, r7, asr r5
 b14:	3c010402 	cfstrscc	mvf0, [r1], {2}
 b18:	053e0105 	ldreq	r0, [lr, #-261]!	; 0xfffffefb
 b1c:	13057710 	movwne	r7, #22288	; 0x5710
 b20:	5901052f 	stmdbpl	r1, {r0, r1, r2, r3, r5, r8, sl}
 b24:	05771005 	ldrbeq	r1, [r7, #-5]!
 b28:	01052f15 	tsteq	r5, r5, lsl pc
 b2c:	5b0f0559 	blpl	3c2098 <startup-0x1fc3df68>
 b30:	052f1505 	streq	r1, [pc, #-1285]!	; 633 <startup-0x1ffff9cd>
 b34:	0c056701 	stceq	7, cr6, [r5], {1}
 b38:	2f0b0569 	svccs	0x000b0569
 b3c:	052f0105 	streq	r0, [pc, #-261]!	; a3f <startup-0x1ffff5c1>
 b40:	0805691b 	stmdaeq	r5, {r0, r1, r3, r4, r8, fp, sp, lr}
 b44:	4a07054c 	bmi	1c207c <startup-0x1fe3df84>
 b48:	053c0605 	ldreq	r0, [ip, #-1541]!	; 0xfffff9fb
 b4c:	0905300f 	stmdbeq	r5, {r0, r1, r2, r3, ip, sp}
 b50:	2f0f052e 	svccs	0x000f052e
 b54:	054c1005 	strbeq	r1, [ip, #-5]
 b58:	10053c18 	andne	r3, r5, r8, lsl ip
 b5c:	2e18052e 	cfmul64cs	mvdx0, mvdx8, mvdx14
 b60:	054b1005 	strbeq	r1, [fp, #-5]
 b64:	0e055a01 	vmlaeq.f32	s10, s10, s2
 b68:	3d2105ae 	cfstr32cc	mvfx0, [r1, #-696]!	; 0xfffffd48
 b6c:	05580c05 	ldrbeq	r0, [r8, #-3077]	; 0xfffff3fb
 b70:	06054c0d 	streq	r4, [r5], -sp, lsl #24
 b74:	2f0d052e 	svccs	0x000d052e
 b78:	590b053f 	stmdbpl	fp, {r0, r1, r2, r3, r4, r5, r8, sl}
 b7c:	02210105 	eoreq	r0, r1, #1073741825	; 0x40000001
 b80:	0101000b 	tsteq	r1, fp
 b84:	000000c6 	andeq	r0, r0, r6, asr #1
 b88:	00330003 	eorseq	r0, r3, r3
 b8c:	01020000 	mrseq	r0, (UNDEF: 2)
 b90:	000d0efb 	strdeq	r0, [sp], -fp
 b94:	01010101 	tsteq	r1, r1, lsl #2
 b98:	01000000 	mrseq	r0, (UNDEF: 0)
 b9c:	5a010000 	bpl	40ba4 <startup-0x1ffbf45c>
 ba0:	6f6d2f3a 	svcvs	0x006d2f3a
 ba4:	4f4d2f70 	svcmi	0x004d2f70
 ba8:	70532d50 	subsvc	r2, r3, r0, asr sp
 bac:	532f6c65 			; <UNDEFINED> instruction: 0x532f6c65
 bb0:	656b616e 	strbvs	r6, [fp, #-366]!	; 0xfffffe92
 bb4:	656b0000 	strbvs	r0, [fp, #-0]!
 bb8:	632e6279 			; <UNDEFINED> instruction: 0x632e6279
 bbc:	00000100 	andeq	r0, r0, r0, lsl #2
 bc0:	00190500 	andseq	r0, r9, r0, lsl #10
 bc4:	10f40205 	rscsne	r0, r4, r5, lsl #4
 bc8:	05152000 	ldreq	r2, [r5, #-0]
 bcc:	1a054b1f 	bne	153850 <startup-0x1feac7b0>
 bd0:	2e05052e 	cfsh32cs	mvfx0, mvfx5, #30
 bd4:	05201605 	streq	r1, [r0, #-1541]!	; 0xfffff9fb
 bd8:	13052f01 	movwne	r2, #24321	; 0x5f01
 bdc:	3e120576 	mrccc	5, 0, r0, cr2, cr6, {3}
 be0:	05200a05 	streq	r0, [r0, #-2565]!	; 0xfffff5fb
 be4:	05053d0b 	streq	r3, [r5, #-3339]	; 0xfffff2f5
 be8:	210d052e 	tstcs	sp, lr, lsr #10
 bec:	05740c05 	ldrbeq	r0, [r4, #-3077]!	; 0xfffff3fb
 bf0:	17052114 	smladne	r5, r4, r1, r2
 bf4:	02040200 	andeq	r0, r4, #0, 4
 bf8:	0005052c 	andeq	r0, r5, ip, lsr #10
 bfc:	3c010402 	cfstrscc	mvf0, [r1], {2}
 c00:	05410c05 	strbeq	r0, [r1, #-3077]	; 0xfffff3fb
 c04:	19052f01 	stmdbne	r5, {r0, r8, r9, sl, fp, sp}
 c08:	3d130569 	cfldr32cc	mvfx0, [r3, #-420]	; 0xfffffe5c
 c0c:	6a0e0575 	bvs	3821e8 <startup-0x1fc7de18>
 c10:	052e0505 	streq	r0, [lr, #-1285]!	; 0xfffffafb
 c14:	13052109 	movwne	r2, #20745	; 0x5109
 c18:	4b0c054b 	blmi	30214c <startup-0x1fcfdeb4>
 c1c:	053d2605 	ldreq	r2, [sp, #-1541]!	; 0xfffff9fb
 c20:	1a052e22 	bne	14c4b0 <startup-0x1feb3b50>
 c24:	001f052e 	andseq	r0, pc, lr, lsr #10
 c28:	38020402 	stmdacc	r2, {r1, sl}
 c2c:	02000505 	andeq	r0, r0, #20971520	; 0x1400000
 c30:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 c34:	0105430c 	tsteq	r5, ip, lsl #6
 c38:	01040200 	mrseq	r0, R12_usr
 c3c:	841e0521 	ldrhi	r0, [lr], #-1313	; 0xfffffadf
 c40:	05680505 	strbeq	r0, [r8, #-1285]!	; 0xfffffafb
 c44:	01052015 	tsteq	r5, r5, lsl r0
 c48:	0006023e 	andeq	r0, r6, lr, lsr r2
 c4c:	Address 0x00000c4c is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	6d2f3a5a 	vstmdbvs	pc!, {s6-s95}
   4:	4d2f706f 	stcmi	0, cr7, [pc, #-444]!	; fffffe50 <rear+0xdfffca18>
   8:	532d504f 			; <UNDEFINED> instruction: 0x532d504f
   c:	2f6c6570 	svccs	0x006c6570
  10:	6b616e53 	blvs	185b964 <startup-0x1e7a469c>
  14:	73612f65 	cmnvc	r1, #404	; 0x194
  18:	64696963 	strbtvs	r6, [r9], #-2403	; 0xfffff69d
  1c:	6c707369 	ldclvs	3, cr7, [r0], #-420	; 0xfffffe5c
  20:	632e7961 			; <UNDEFINED> instruction: 0x632e7961
  24:	5c3a5a00 			; <UNDEFINED> instruction: 0x5c3a5a00
  28:	5c706f6d 	ldclpl	15, cr6, [r0], #-436	; 0xfffffe4c
  2c:	2d504f4d 	ldclcs	15, cr4, [r0, #-308]	; 0xfffffecc
  30:	6c657053 	stclvs	0, cr7, [r5], #-332	; 0xfffffeb4
  34:	616e535c 	cmnvs	lr, ip, asr r3
  38:	6100656b 	tstvs	r0, fp, ror #10
  3c:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
  40:	7274635f 	rsbsvc	r6, r4, #2080374785	; 0x7c000001
  44:	69625f6c 	stmdbvs	r2!, {r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
  48:	6c635f74 	stclvs	15, cr5, [r3], #-464	; 0xfffffe30
  4c:	00726165 	rsbseq	r6, r2, r5, ror #2
  50:	616c6564 	cmnvs	ip, r4, ror #10
  54:	696d5f79 	stmdbvs	sp!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
  58:	006f726b 	rsbeq	r7, pc, fp, ror #4
  5c:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
  60:	72775f69 	rsbsvc	r5, r7, #420	; 0x1a4
  64:	5f657469 	svcpl	0x00657469
  68:	746e6f63 	strbtvc	r6, [lr], #-3939	; 0xfffff09d
  6c:	6c6c6f72 	stclvs	15, cr6, [ip], #-456	; 0xfffffe38
  70:	47007265 	strmi	r7, [r0, -r5, ror #4]
  74:	4320554e 			; <UNDEFINED> instruction: 0x4320554e
  78:	39203939 	stmdbcc	r0!, {r0, r3, r4, r5, r8, fp, ip, sp}
  7c:	312e322e 			; <UNDEFINED> instruction: 0x312e322e
  80:	31303220 	teqcc	r0, r0, lsr #4
  84:	32303139 	eorscc	r3, r0, #1073741838	; 0x4000000e
  88:	72282035 	eorvc	r2, r8, #53	; 0x35
  8c:	61656c65 	cmnvs	r5, r5, ror #24
  90:	20296573 	eorcs	r6, r9, r3, ror r5
  94:	4d52415b 	ldfmie	f4, [r2, #-364]	; 0xfffffe94
  98:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
  9c:	622d392d 	eorvs	r3, sp, #737280	; 0xb4000
  a0:	636e6172 	cmnvs	lr, #-2147483620	; 0x8000001c
  a4:	65722068 	ldrbvs	r2, [r2, #-104]!	; 0xffffff98
  a8:	69736976 	ldmdbvs	r3!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
  ac:	32206e6f 	eorcc	r6, r0, #1776	; 0x6f0
  b0:	39353737 	ldmdbcc	r5!, {r0, r1, r2, r4, r5, r8, r9, sl, ip, sp}
  b4:	2d205d39 	stccs	13, cr5, [r0, #-228]!	; 0xffffff1c
  b8:	7568746d 	strbvc	r7, [r8, #-1133]!	; 0xfffffb93
  bc:	2d20626d 	sfmcs	f6, 4, [r0, #-436]!	; 0xfffffe4c
  c0:	6f6c666d 	svcvs	0x006c666d
  c4:	612d7461 			; <UNDEFINED> instruction: 0x612d7461
  c8:	733d6962 	teqvc	sp, #1605632	; 0x188000
  cc:	2074666f 	rsbscs	r6, r4, pc, ror #12
  d0:	72616d2d 	rsbvc	r6, r1, #2880	; 0xb40
  d4:	613d6863 	teqvs	sp, r3, ror #16
  d8:	36766d72 			; <UNDEFINED> instruction: 0x36766d72
  dc:	2d206d2d 	stccs	13, cr6, [r0, #-180]!	; 0xffffff4c
  e0:	4f2d2067 	svcmi	0x002d2067
  e4:	732d2030 			; <UNDEFINED> instruction: 0x732d2030
  e8:	633d6474 	teqvs	sp, #116, 8	; 0x74000000
  ec:	61003939 	tstvs	r0, r9, lsr r9
  f0:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
  f4:	6165725f 	cmnvs	r5, pc, asr r2
  f8:	74735f64 	ldrbtvc	r5, [r3], #-3940	; 0xfffff09c
  fc:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
 100:	656c6300 	strbvs	r6, [ip, #-768]!	; 0xfffffd00
 104:	645f7261 	ldrbvs	r7, [pc], #-609	; 10c <startup-0x1ffffef4>
 108:	6c707369 	ldclvs	3, cr7, [r0], #-420	; 0xfffffe5c
 10c:	61007961 	tstvs	r0, r1, ror #18
 110:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 114:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 118:	645f6574 	ldrbvs	r6, [pc], #-1396	; 120 <startup-0x1ffffee0>
 11c:	00617461 	rsbeq	r7, r1, r1, ror #8
 120:	616c6564 	cmnvs	ip, r4, ror #10
 124:	35325f79 	ldrcc	r5, [r2, #-3961]!	; 0xfffff087
 128:	00736e30 	rsbseq	r6, r3, r0, lsr lr
 12c:	56746572 			; <UNDEFINED> instruction: 0x56746572
 130:	61006c61 	tstvs	r0, r1, ror #24
 134:	65726464 	ldrbvs	r6, [r2, #-1124]!	; 0xfffffb9c
 138:	61007373 	tstvs	r0, r3, ror r3
 13c:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 140:	6165725f 	cmnvs	r5, pc, asr r2
 144:	6f635f64 	svcvs	0x00635f64
 148:	6f72746e 	svcvs	0x0072746e
 14c:	72656c6c 	rsbvc	r6, r5, #108, 24	; 0x6c00
 150:	63736100 	cmnvs	r3, #0, 2
 154:	725f6969 	subsvc	r6, pc, #1720320	; 0x1a4000
 158:	5f646165 	svcpl	0x00646165
 15c:	61746164 	cmnvs	r4, r4, ror #2
 160:	73696400 	cmnvc	r9, #0, 8
 164:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 168:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
 16c:	6c6f7274 	sfmvs	f7, 2, [pc], #-464	; ffffffa4 <rear+0xdfffcb6c>
 170:	736e7500 	cmnvc	lr, #0, 10
 174:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
 178:	68632064 	stmdavs	r3!, {r2, r5, r6, sp}^
 17c:	72007261 	andvc	r7, r0, #268435462	; 0x10000006
 180:	61447465 	cmpvs	r4, r5, ror #8
 184:	66006174 			; <UNDEFINED> instruction: 0x66006174
 188:	69746e75 	ldmdbvs	r4!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
 18c:	735f6e6f 	cmpvc	pc, #1776	; 0x6f0
 190:	62007465 	andvs	r7, r0, #1694498816	; 0x65000000
 194:	00657479 	rsbeq	r7, r5, r9, ror r4
 198:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 19c:	72775f69 	rsbsvc	r5, r7, #420	; 0x1a4
 1a0:	5f657469 	svcpl	0x00657469
 1a4:	00646d63 	rsbeq	r6, r4, r3, ror #26
 1a8:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 1ac:	6f675f69 	svcvs	0x00675f69
 1b0:	79786f74 	ldmdbvc	r8!, {r2, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 1b4:	74657200 	strbtvc	r7, [r5], #-512	; 0xfffffe00
 1b8:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
 1bc:	746e6500 	strbtvc	r6, [lr], #-1280	; 0xfffffb00
 1c0:	6d5f7972 	vldrvs.16	s15, [pc, #-228]	; e4 <startup-0x1fffff1c>	; <UNPREDICTABLE>
 1c4:	5f65646f 	svcpl	0x0065646f
 1c8:	00746573 	rsbseq	r6, r4, r3, ror r5
 1cc:	616c6564 	cmnvs	ip, r4, ror #10
 1d0:	696d5f79 	stmdbvs	sp!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 1d4:	00696c6c 	rsbeq	r6, r9, ip, ror #24
 1d8:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 1dc:	72775f69 	rsbsvc	r5, r7, #420	; 0x1a4
 1e0:	5f657469 	svcpl	0x00657469
 1e4:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
 1e8:	63736100 	cmnvs	r3, #0, 2
 1ec:	635f6969 	cmpvs	pc, #1720320	; 0x1a4000
 1f0:	5f6c7274 	svcpl	0x006c7274
 1f4:	5f746962 	svcpl	0x00746962
 1f8:	00746573 	rsbseq	r6, r4, r3, ror r5
 1fc:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 200:	6e695f69 	cdpvs	15, 6, cr5, cr9, cr9, {3}
 204:	67007469 	strvs	r7, [r0, -r9, ror #8]
 208:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 20c:	775f6369 	ldrbvc	r6, [pc, -r9, ror #6]
 210:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 214:	6d6f635f 	stclvs	3, cr6, [pc, #-380]!	; a0 <startup-0x1fffff60>
 218:	646e616d 	strbtvs	r6, [lr], #-365	; 0xfffffe93
 21c:	78697000 	stmdavc	r9!, {ip, sp, lr}^
 220:	67006c65 	strvs	r6, [r0, -r5, ror #24]
 224:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 228:	645f6369 	ldrbvs	r6, [pc], #-873	; 230 <startup-0x1ffffdd0>
 22c:	5f776172 	svcpl	0x00776172
 230:	65726373 	ldrbvs	r6, [r2, #-883]!	; 0xfffffc8d
 234:	67006e65 	strvs	r6, [r0, -r5, ror #28]
 238:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 23c:	725f6369 	subsvc	r6, pc, #-1543503871	; 0xa4000001
 240:	5f646165 	svcpl	0x00646165
 244:	61746164 	cmnvs	r4, r4, ror #2
 248:	2f3a5a00 	svccs	0x003a5a00
 24c:	2f706f6d 	svccs	0x00706f6d
 250:	2d504f4d 	ldclcs	15, cr4, [r0, #-308]	; 0xfffffecc
 254:	6c657053 	stclvs	0, cr7, [r5], #-332	; 0xfffffeb4
 258:	616e532f 	cmnvs	lr, pc, lsr #6
 25c:	672f656b 	strvs	r6, [pc, -fp, ror #10]!
 260:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 264:	69646369 	stmdbvs	r4!, {r0, r3, r5, r6, r8, r9, sp, lr}^
 268:	616c7073 	smcvs	50947	; 0xc703
 26c:	00632e79 	rsbeq	r2, r3, r9, ror lr
 270:	70617267 	rsbvc	r7, r1, r7, ror #4
 274:	5f636968 	svcpl	0x00636968
 278:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
 27c:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
 280:	7465735f 	strbtvc	r7, [r5], #-863	; 0xfffffca1
 284:	656c6300 	strbvs	r6, [ip, #-768]!	; 0xfffffd00
 288:	625f7261 	subsvs	r7, pc, #268435462	; 0x10000006
 28c:	626b6361 	rsbvs	r6, fp, #-2080374783	; 0x84000001
 290:	65666675 	strbvs	r6, [r6, #-1653]!	; 0xfffff98b
 294:	616d0072 	smcvs	53250	; 0xd002
 298:	64006b73 	strvs	r6, [r0], #-2931	; 0xfffff48d
 29c:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 2a0:	3030355f 	eorscc	r3, r0, pc, asr r5
 2a4:	6700736e 	strvs	r7, [r0, -lr, ror #6]
 2a8:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 2ac:	775f6369 	ldrbvc	r6, [pc, -r9, ror #6]
 2b0:	5f746961 	svcpl	0x00746961
 2b4:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
 2b8:	72670079 	rsbvc	r0, r7, #121	; 0x79
 2bc:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 2c0:	65725f63 	ldrbvs	r5, [r2, #-3939]!	; 0xfffff09d
 2c4:	62006461 	andvs	r6, r0, #1627389952	; 0x61000000
 2c8:	426b6361 	rsbmi	r6, fp, #-2080374783	; 0x84000001
 2cc:	65666675 	strbvs	r6, [r6, #-1653]!	; 0xfffff98b
 2d0:	69750072 	ldmdbvs	r5!, {r1, r4, r5, r6}^
 2d4:	5f38746e 	svcpl	0x0038746e
 2d8:	72670074 	rsbvc	r0, r7, #116	; 0x74
 2dc:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 2e0:	72775f63 	rsbsvc	r5, r7, #396	; 0x18c
 2e4:	00657469 	rsbeq	r7, r5, r9, ror #8
 2e8:	656c6573 	strbvs	r6, [ip, #-1395]!	; 0xfffffa8d
 2ec:	635f7463 	cmpvs	pc, #1660944384	; 0x63000000
 2f0:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
 2f4:	656c6c6f 	strbvs	r6, [ip, #-3183]!	; 0xfffff391
 2f8:	6e690072 	mcrvs	0, 3, r0, cr9, cr2, {3}
 2fc:	00786564 	rsbseq	r6, r8, r4, ror #10
 300:	70617267 	rsbvc	r7, r1, r7, ror #4
 304:	5f636968 	svcpl	0x00636968
 308:	61656c63 	cmnvs	r5, r3, ror #24
 30c:	63735f72 	cmnvs	r3, #456	; 0x1c8
 310:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
 314:	61726700 	cmnvs	r2, r0, lsl #14
 318:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 31c:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 320:	645f6574 	ldrbvs	r6, [pc], #-1396	; 328 <startup-0x1ffffcd8>
 324:	00617461 	rsbeq	r7, r1, r1, ror #8
 328:	70617267 	rsbvc	r7, r1, r7, ror #4
 32c:	5f636968 	svcpl	0x00636968
 330:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
 334:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
 338:	656c635f 	strbvs	r6, [ip, #-863]!	; 0xfffffca1
 33c:	70007261 	andvc	r7, r0, r1, ror #4
 340:	00656761 	rsbeq	r6, r5, r1, ror #14
 344:	70617267 	rsbvc	r7, r1, r7, ror #4
 348:	5f636968 	svcpl	0x00636968
 34c:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
 350:	74657200 	strbtvc	r7, [r5], #-512	; 0xfffffe00
 354:	006c6176 	rsbeq	r6, ip, r6, ror r1
 358:	4f454750 	svcmi	0x00454750
 35c:	5254454d 	subspl	r4, r4, #322961408	; 0x13400000
 360:	6e730059 	mrcvs	0, 3, r0, cr3, cr9, {2}
 364:	53656b61 	cmnpl	r5, #99328	; 0x18400
 368:	00657a69 	rsbeq	r7, r5, r9, ror #20
 36c:	77617264 	strbvc	r7, [r1, -r4, ror #4]!
 370:	7270735f 	rsbsvc	r7, r0, #2080374785	; 0x7c000001
 374:	00657469 	rsbeq	r7, r5, r9, ror #8
 378:	76677261 	strbtvc	r7, [r7], -r1, ror #4
 37c:	72696400 	rsbvc	r6, r9, #0, 8
 380:	69640078 	stmdbvs	r4!, {r3, r4, r5, r6}^
 384:	6e007972 			; <UNDEFINED> instruction: 0x6e007972
 388:	5f747865 	svcpl	0x00747865
 38c:	6d690078 	stclvs	0, cr0, [r9, #-480]!	; 0xfffffe20
 390:	5f656761 	svcpl	0x00656761
 394:	73746962 	cmnvc	r4, #1605632	; 0x188000
 398:	696e6900 	stmdbvs	lr!, {r8, fp, sp, lr}^
 39c:	6e735f74 	mrcvs	15, 3, r5, cr3, cr4, {3}
 3a0:	00656b61 	rsbeq	r6, r5, r1, ror #22
 3a4:	696f5074 	stmdbvs	pc!, {r2, r4, r5, r6, ip, lr}^	; <UNPREDICTABLE>
 3a8:	7300746e 	movwvc	r7, #1134	; 0x46e
 3ac:	656b616e 	strbvs	r6, [fp, #-366]!	; 0xfffffe92
 3b0:	64616568 	strbtvs	r6, [r1], #-1384	; 0xfffffa98
 3b4:	6f65675f 	svcvs	0x0065675f
 3b8:	7274656d 	rsbsvc	r6, r4, #457179136	; 0x1b400000
 3bc:	4f500079 	svcmi	0x00500079
 3c0:	00544e49 	subseq	r4, r4, r9, asr #28
 3c4:	7478656e 	ldrbtvc	r6, [r8], #-1390	; 0xfffffa92
 3c8:	7300795f 	movwvc	r7, #2399	; 0x95f
 3cc:	735f7465 	cmpvc	pc, #1694498816	; 0x65000000
 3d0:	64656570 	strbtvs	r6, [r5], #-1392	; 0xfffffa90
 3d4:	736f7000 	cmnvc	pc, #0
 3d8:	6f700078 	svcvs	0x00700078
 3dc:	68007973 	stmdavs	r0, {r0, r1, r4, r5, r6, r8, fp, ip, sp, lr}
 3e0:	68676965 	stmdavs	r7!, {r0, r2, r5, r6, r8, fp, sp, lr}^
 3e4:	72640074 	rsbvc	r0, r4, #116	; 0x74
 3e8:	735f7761 	cmpvc	pc, #25427968	; 0x1840000
 3ec:	656b616e 	strbvs	r6, [fp, #-366]!	; 0xfffffe92
 3f0:	616e7300 	cmnvs	lr, r0, lsl #6
 3f4:	6f62656b 	svcvs	0x0062656b
 3f8:	675f7964 	ldrbvs	r7, [pc, -r4, ror #18]
 3fc:	656d6f65 	strbvs	r6, [sp, #-3941]!	; 0xfffff09b
 400:	00797274 	rsbseq	r7, r9, r4, ror r2
 404:	646f6f66 	strbtvs	r6, [pc], #-3942	; 40c <startup-0x1ffffbf4>
 408:	6f65675f 	svcvs	0x0065675f
 40c:	7274656d 	rsbsvc	r6, r4, #457179136	; 0x1b400000
 410:	616d0079 	smcvs	53257	; 0xd009
 414:	72006e69 	andvc	r6, r0, #1680	; 0x690
 418:	61747365 	cmnvs	r4, r5, ror #6
 41c:	63007472 	movwvs	r7, #1138	; 0x472
 420:	65727275 	ldrbvs	r7, [r2, #-629]!	; 0xfffffd8b
 424:	6900746e 	stmdbvs	r0, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
 428:	5f74696e 	svcpl	0x0074696e
 42c:	00707061 	rsbseq	r7, r0, r1, rrx
 430:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0xfffff68d
 434:	47740078 			; <UNDEFINED> instruction: 0x47740078
 438:	656d6f65 	strbvs	r6, [sp, #-3941]!	; 0xfffff09b
 43c:	00797274 	rsbseq	r7, r9, r4, ror r2
 440:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0xfffff68d
 444:	72610079 	rsbvc	r0, r1, #121	; 0x79
 448:	73006367 	movwvc	r6, #871	; 0x367
 44c:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
 450:	64007075 	strvs	r7, [r0], #-117	; 0xffffff8b
 454:	00776172 	rsbseq	r6, r7, r2, ror r1
 458:	646f6f66 	strbtvs	r6, [pc], #-3942	; 460 <startup-0x1ffffba0>
 45c:	6a626f5f 	bvs	189c1e0 <startup-0x1e763e20>
 460:	79656b00 	stmdbvc	r5!, {r8, r9, fp, sp, lr}^
 464:	7274735f 	rsbsvc	r7, r4, #2080374785	; 0x7c000001
 468:	00656b6f 	rsbeq	r6, r5, pc, ror #22
 46c:	74646977 	strbtvc	r6, [r4], #-2423	; 0xfffff689
 470:	65730068 	ldrbvs	r0, [r3, #-104]!	; 0xffffff98
 474:	626f5f74 	rsbvs	r5, pc, #116, 30	; 0x1d0
 478:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 47c:	6570735f 	ldrbvs	r7, [r0, #-863]!	; 0xfffffca1
 480:	77006465 	strvc	r6, [r0, -r5, ror #8]
 484:	68746469 	ldmdavs	r4!, {r0, r3, r5, r6, sl, sp, lr}^
 488:	5f6e695f 	svcpl	0x006e695f
 48c:	65747962 	ldrbvs	r7, [r4, #-2402]!	; 0xfffff69e
 490:	6f6c0073 	svcvs	0x006c0073
 494:	735f6461 	cmpvc	pc, #1627389952	; 0x61000000
 498:	74697270 	strbtvc	r7, [r9], #-624	; 0xfffffd90
 49c:	3a5a0065 	bcc	1680638 <startup-0x1e97f9c8>
 4a0:	706f6d2f 	rsbvc	r6, pc, pc, lsr #26
 4a4:	504f4d2f 	subpl	r4, pc, pc, lsr #26
 4a8:	6570532d 	ldrbvs	r5, [r0, #-813]!	; 0xfffffcd3
 4ac:	6e532f6c 	cdpvs	15, 5, cr2, cr3, cr12, {3}
 4b0:	2f656b61 	svccs	0x00656b61
 4b4:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 4b8:	2e707574 	mrccs	5, 3, r7, cr0, cr4, {3}
 4bc:	6c630063 	stclvs	0, cr0, [r3], #-396	; 0xfffffe74
 4c0:	5f726165 	svcpl	0x00726165
 4c4:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
 4c8:	66007463 	strvs	r7, [r0], -r3, ror #8
 4cc:	6f6c6c6f 	svcvs	0x006c6c6f
 4d0:	656c5f77 	strbvs	r5, [ip, #-3959]!	; 0xfffff089
 4d4:	72656461 	rsbvc	r6, r5, #1627389952	; 0x61000000
 4d8:	624f7400 	subvs	r7, pc, #0, 8
 4dc:	7264006a 	rsbvc	r0, r4, #106	; 0x6a
 4e0:	6f5f7761 	svcvs	0x005f7761
 4e4:	63656a62 	cmnvs	r5, #401408	; 0x62000
 4e8:	65720074 	ldrbvs	r0, [r2, #-116]!	; 0xffffff8c
 4ec:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 4f0:	61675f74 	smcvs	30196	; 0x75f4
 4f4:	6e00656d 	cfsh32vs	mvfx6, mvfx0, #61
 4f8:	6f706d75 	svcvs	0x00706d75
 4fc:	73746e69 	cmnvc	r4, #1680	; 0x690
 500:	766f6d00 	strbtvc	r6, [pc], -r0, lsl #26
 504:	626f5f65 	rsbvs	r5, pc, #404	; 0x194
 508:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 50c:	6f6f6600 	svcvs	0x006f6600
 510:	75740064 	ldrbvc	r0, [r4, #-100]!	; 0xffffff9c
 514:	73006e72 	movwvc	r6, #3698	; 0xe72
 518:	64656570 	strbtvs	r6, [r5], #-1392	; 0xfffffa90
 51c:	70730078 	rsbsvc	r0, r3, r8, ror r0
 520:	79646565 	stmdbvc	r4!, {r0, r2, r5, r6, r8, sl, sp, lr}^
 524:	424f5000 	submi	r5, pc, #0
 528:	5443454a 	strbpl	r4, [r3], #-1354	; 0xfffffab6
 52c:	2f3a5a00 	svccs	0x003a5a00
 530:	2f706f6d 	svccs	0x00706f6d
 534:	2d504f4d 	ldclcs	15, cr4, [r0, #-308]	; 0xfffffecc
 538:	6c657053 	stclvs	0, cr7, [r5], #-332	; 0xfffffeb4
 53c:	616e532f 	cmnvs	lr, pc, lsr #6
 540:	642f656b 	strtvs	r6, [pc], #-1387	; 548 <startup-0x1ffffab8>
 544:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 548:	5f00632e 	svcpl	0x0000632e
 54c:	5f6f7364 	svcpl	0x006f7364
 550:	646e6168 	strbtvs	r6, [lr], #-360	; 0xfffffe98
 554:	6900656c 	stmdbvs	r0, {r2, r3, r5, r6, r8, sl, sp, lr}
 558:	6c754673 	ldclvs	6, cr4, [r5], #-460	; 0xfffffe34
 55c:	735f006c 	cmpvc	pc, #108	; 0x6c
 560:	00657a69 	rsbeq	r7, r5, r9, ror #20
 564:	6e61725f 	mcrvs	2, 3, r7, cr1, cr15, {2}
 568:	00383464 	eorseq	r3, r8, r4, ror #8
 56c:	656d655f 	strbvs	r6, [sp, #-1375]!	; 0xfffffaa1
 570:	6e656772 	mcrvs	7, 3, r6, cr5, cr2, {3}
 574:	5f007963 	svcpl	0x00007963
 578:	74726377 	ldrbtvc	r6, [r2], #-887	; 0xfffffc89
 57c:	5f626d6f 	svcpl	0x00626d6f
 580:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
 584:	775f0065 	ldrbvc	r0, [pc, -r5, rrx]
 588:	74727363 	ldrbtvc	r7, [r2], #-867	; 0xfffffc9d
 58c:	73626d6f 	cmnvc	r2, #7104	; 0x1bc0
 590:	6174735f 	cmnvs	r4, pc, asr r3
 594:	6c006574 	cfstr32vs	mvfx6, [r0], {116}	; 0x74
 598:	20676e6f 	rsbcs	r6, r7, pc, ror #28
 59c:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
 5a0:	736e7520 	cmnvc	lr, #32, 10	; 0x8000000
 5a4:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
 5a8:	6e692064 	cdpvs	0, 6, cr2, cr9, cr4, {3}
 5ac:	6c5f0074 	mrrcvs	0, 7, r0, pc, cr4	; <UNPREDICTABLE>
 5b0:	69736662 	ldmdbvs	r3!, {r1, r5, r6, r9, sl, sp, lr}^
 5b4:	7200657a 	andvc	r6, r0, #511705088	; 0x1e800000
 5b8:	766f6d65 	strbtvc	r6, [pc], -r5, ror #26
 5bc:	5f5f0065 	svcpl	0x005f0065
 5c0:	61636f6c 	cmnvs	r3, ip, ror #30
 5c4:	745f656c 	ldrbvc	r6, [pc], #-1388	; 5cc <startup-0x1ffffa34>
 5c8:	626d5f00 	rsbvs	r5, sp, #0, 30
 5cc:	776f7472 			; <UNDEFINED> instruction: 0x776f7472
 5d0:	74735f63 	ldrbtvc	r5, [r3], #-3939	; 0xfffff09d
 5d4:	00657461 	rsbeq	r7, r5, r1, ror #8
 5d8:	6d745f5f 	ldclvs	15, cr5, [r4, #-380]!	; 0xfffffe84
 5dc:	6365735f 	cmnvs	r5, #2080374785	; 0x7c000001
 5e0:	6e6f6c00 	cdpvs	12, 6, cr6, cr15, cr0, {0}
 5e4:	6f6c2067 	svcvs	0x006c2067
 5e8:	6920676e 	stmdbvs	r0!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}
 5ec:	5f00746e 	svcpl	0x0000746e
 5f0:	66756275 			; <UNDEFINED> instruction: 0x66756275
 5f4:	61625f00 	cmnvs	r2, r0, lsl #30
 5f8:	5f006573 	svcpl	0x00006573
 5fc:	5f6d745f 	svcpl	0x006d745f
 600:	72756f68 	rsbsvc	r6, r5, #104, 30	; 0x1a0
 604:	735f5f00 	cmpvc	pc, #0, 30
 608:	6f5f0066 	svcvs	0x005f0066
 60c:	78655f6e 	stmdavc	r5!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
 610:	615f7469 	cmpvs	pc, r9, ror #8
 614:	00736772 	rsbseq	r6, r3, r2, ror r7
 618:	6f6f635f 	svcvs	0x006f635f
 61c:	0065696b 	rsbeq	r6, r5, fp, ror #18
 620:	67735f5f 			; <UNDEFINED> instruction: 0x67735f5f
 624:	0065756c 	rsbeq	r7, r5, ip, ror #10
 628:	6d457369 	stclvs	3, cr7, [r5, #-420]	; 0xfffffe5c
 62c:	00797470 	rsbseq	r7, r9, r0, ror r4
 630:	6d2f3a5a 	vstmdbvs	pc!, {s6-s95}
 634:	4d2f706f 	stcmi	0, cr7, [pc, #-444]!	; 480 <startup-0x1ffffb80>
 638:	532d504f 			; <UNDEFINED> instruction: 0x532d504f
 63c:	2f6c6570 	svccs	0x006c6570
 640:	6b616e53 	blvs	185bf94 <startup-0x1e7a406c>
 644:	75712f65 	ldrbvc	r2, [r1, #-3941]!	; 0xfffff09b
 648:	2e657565 	cdpcs	5, 6, cr7, cr5, cr5, {3}
 64c:	665f0063 	ldrbvs	r0, [pc], -r3, rrx
 650:	7367616c 	cmnvc	r7, #108, 2
 654:	73695f00 	cmnvc	r9, #0, 30
 658:	6178635f 	cmnvs	r8, pc, asr r3
 65c:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
 660:	006e6964 	rsbeq	r6, lr, r4, ror #18
 664:	6b6c625f 	blvs	1b18fe8 <startup-0x1e4e7018>
 668:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0xfffff68d
 66c:	76635f00 	strbtvc	r5, [r3], -r0, lsl #30
 670:	66756274 			; <UNDEFINED> instruction: 0x66756274
 674:	666f5f00 	strbtvs	r5, [pc], -r0, lsl #30
 678:	74657366 	strbtvc	r7, [r5], #-870	; 0xfffffc9a
 67c:	626d5f00 	rsbvs	r5, sp, #0, 30
 680:	6f747273 	svcvs	0x00747273
 684:	5f736377 	svcpl	0x00736377
 688:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
 68c:	6d5f0065 	ldclvs	0, cr0, [pc, #-404]	; 500 <startup-0x1ffffb00>
 690:	656c7262 	strbvs	r7, [ip, #-610]!	; 0xfffffd9e
 694:	74735f6e 	ldrbtvc	r5, [r3], #-3950	; 0xfffff092
 698:	00657461 	rsbeq	r7, r5, r1, ror #8
 69c:	616e665f 	cmnvs	lr, pc, asr r6
 6a0:	00736772 	rsbseq	r6, r3, r2, ror r7
 6a4:	736e665f 	cmnvc	lr, #99614720	; 0x5f00000
 6a8:	69735f00 	ldmdbvs	r3!, {r8, r9, sl, fp, ip, lr}^
 6ac:	5f006e67 	svcpl	0x00006e67
 6b0:	636f6c66 	cmnvs	pc, #26112	; 0x6600
 6b4:	00745f6b 	rsbseq	r5, r4, fp, ror #30
 6b8:	6474735f 	ldrbtvs	r7, [r4], #-863	; 0xfffffca1
 6bc:	00727265 	rsbseq	r7, r2, r5, ror #4
 6c0:	6769425f 			; <UNDEFINED> instruction: 0x6769425f
 6c4:	00746e69 	rsbseq	r6, r4, r9, ror #28
 6c8:	6d61675f 	stclvs	7, cr6, [r1, #-380]!	; 0xfffffe84
 6cc:	735f616d 	cmpvc	pc, #1073741851	; 0x4000001b
 6d0:	676e6769 	strbvs	r6, [lr, -r9, ror #14]!
 6d4:	5f006d61 	svcpl	0x00006d61
 6d8:	75736572 	ldrbvc	r6, [r3, #-1394]!	; 0xfffffa8e
 6dc:	6b5f746c 	blvs	17dd894 <startup-0x1e82276c>
 6e0:	745f5f00 	ldrbvc	r5, [pc], #-3840	; 6e8 <startup-0x1ffff918>
 6e4:	5f5f006d 	svcpl	0x005f006d
 6e8:	62686377 	rsbvs	r6, r8, #-603979775	; 0xdc000001
 6ec:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
 6f0:	74756f64 	ldrbtvc	r6, [r5], #-3940	; 0xfffff09c
 6f4:	76635f00 	strbtvc	r5, [r3], -r0, lsl #30
 6f8:	6e656c74 	mcrvs	12, 3, r6, cr5, cr4, {3}
 6fc:	69665f00 	stmdbvs	r6!, {r8, r9, sl, fp, ip, lr}^
 700:	5f00656c 	svcpl	0x0000656c
 704:	626f696e 	rsbvs	r6, pc, #1802240	; 0x1b8000
 708:	65700073 	ldrbvs	r0, [r0, #-115]!	; 0xffffff8d
 70c:	73006b65 	movwvc	r6, #2917	; 0xb65
 710:	74726f68 	ldrbtvc	r6, [r2], #-3944	; 0xfffff098
 714:	736e7520 	cmnvc	lr, #32, 10	; 0x8000000
 718:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
 71c:	6e692064 	cdpvs	0, 6, cr2, cr9, cr4, {3}
 720:	615f0074 	cmpvs	pc, r4, ror r0	; <UNPREDICTABLE>
 724:	69786574 	ldmdbvs	r8!, {r2, r4, r5, r6, r8, sl, sp, lr}^
 728:	5f003074 	svcpl	0x00003074
 72c:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
 730:	625f6c61 	subsvs	r6, pc, #24832	; 0x6100
 734:	5f006675 	svcpl	0x00006675
 738:	74637361 	strbtvc	r7, [r3], #-865	; 0xfffffc9f
 73c:	5f656d69 	svcpl	0x00656d69
 740:	00667562 	rsbeq	r7, r6, r2, ror #10
 744:	7365725f 	cmnvc	r5, #-268435451	; 0xf0000005
 748:	00746c75 	rsbseq	r6, r4, r5, ror ip
 74c:	63775f5f 	cmnvs	r7, #380	; 0x17c
 750:	4c5f0068 	mrrcmi	0, 6, r0, pc, cr8	; <UNPREDICTABLE>
 754:	5f4b434f 	svcpl	0x004b434f
 758:	69770054 	ldmdbvs	r7!, {r2, r4, r6}^
 75c:	745f746e 	ldrbvc	r7, [pc], #-1134	; 764 <startup-0x1ffff89c>
 760:	6c665f00 	stclvs	15, cr5, [r6], #-0
 764:	32736761 	rsbscc	r6, r3, #25427968	; 0x1840000
 768:	745f5f00 	ldrbvc	r5, [pc], #-3840	; 770 <startup-0x1ffff890>
 76c:	65795f6d 	ldrbvs	r5, [r9, #-3949]!	; 0xfffff093
 770:	5f007261 	svcpl	0x00007261
 774:	6c616d6e 	stclvs	13, cr6, [r1], #-440	; 0xfffffe48
 778:	00636f6c 	rsbeq	r6, r3, ip, ror #30
 77c:	78656e5f 	stmdavc	r5!, {r0, r1, r2, r3, r4, r6, r9, sl, fp, sp, lr}^
 780:	5f006674 	svcpl	0x00006674
 784:	5f6d745f 	svcpl	0x006d745f
 788:	006e6f6d 	rsbeq	r6, lr, sp, ror #30
 78c:	6574615f 	ldrbvs	r6, [r4, #-351]!	; 0xfffffea1
 790:	00746978 	rsbseq	r6, r4, r8, ror r9
 794:	64735f5f 	ldrbtvs	r5, [r3], #-3935	; 0xfffff0a1
 798:	6e696469 	cdpvs	4, 6, cr6, cr9, cr9, {3}
 79c:	5f007469 	svcpl	0x00007469
 7a0:	5f66666f 	svcpl	0x0066666f
 7a4:	665f0074 			; <UNDEFINED> instruction: 0x665f0074
 7a8:	6c656572 	cfstr64vs	mvdx6, [r5], #-456	; 0xfffffe38
 7ac:	00747369 	rsbseq	r7, r4, r9, ror #6
 7b0:	7463775f 	strbtvc	r7, [r3], #-1887	; 0xfffff8a1
 7b4:	5f626d6f 	svcpl	0x00626d6f
 7b8:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
 7bc:	425f0065 	subsmi	r0, pc, #101	; 0x65
 7c0:	006c6f6f 	rsbeq	r6, ip, pc, ror #30
 7c4:	77656e5f 			; <UNDEFINED> instruction: 0x77656e5f
 7c8:	5f685f00 	svcpl	0x00685f00
 7cc:	6e727265 	cdpvs	2, 7, cr7, cr2, cr5, {3}
 7d0:	6873006f 	ldmdavs	r3!, {r0, r1, r2, r3, r5, r6}^
 7d4:	2074726f 	rsbscs	r7, r4, pc, ror #4
 7d8:	00746e69 	rsbseq	r6, r4, r9, ror #28
 7dc:	6d745f5f 	ldclvs	15, cr5, [r4, #-380]!	; 0xfffffe84
 7e0:	6164795f 	cmnvs	r4, pc, asr r9
 7e4:	5f5f0079 	svcpl	0x005f0079
 7e8:	66756273 			; <UNDEFINED> instruction: 0x66756273
 7ec:	6f695f00 	svcvs	0x00695f00
 7f0:	5f007362 	svcpl	0x00007362
 7f4:	4c49465f 	mcrrmi	6, 5, r4, r9, cr15
 7f8:	6d5f0045 	ldclvs	0, cr0, [pc, #-276]	; 6ec <startup-0x1ffff914>
 7fc:	61747362 	cmnvs	r4, r2, ror #6
 800:	745f6574 	ldrbvc	r6, [pc], #-1396	; 808 <startup-0x1ffff7f8>
 804:	735f5f00 	cmpvc	pc, #0, 30
 808:	454c4946 	strbmi	r4, [ip, #-2374]	; 0xfffff6ba
 80c:	626d5f00 	rsbvs	r5, sp, #0, 30
 810:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
 814:	725f0065 	subsvc	r0, pc, #101	; 0x65
 818:	5f646e61 	svcpl	0x00646e61
 81c:	7478656e 	ldrbtvc	r6, [r8], #-1390	; 0xfffffa92
 820:	736e6900 	cmnvc	lr, #0, 18
 824:	00747265 	rsbseq	r7, r4, r5, ror #4
 828:	6c626d5f 	stclvs	13, cr6, [r2], #-380	; 0xfffffe84
 82c:	735f6e65 	cmpvc	pc, #1616	; 0x650
 830:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
 834:	6e695f00 	cdpvs	15, 6, cr5, cr9, cr0, {0}
 838:	695f0063 	ldmdbvs	pc, {r0, r1, r5, r6}^	; <UNPREDICTABLE>
 83c:	6900646e 	stmdbvs	r0, {r1, r2, r3, r5, r6, sl, sp, lr}
 840:	5f74696e 	svcpl	0x0074696e
 844:	75657571 	strbvc	r7, [r5, #-1393]!	; 0xfffffa8f
 848:	6c5f0065 	mrrcvs	0, 6, r0, pc, cr5	; <UNPREDICTABLE>
 84c:	6c61636f 	stclvs	3, cr6, [r1], #-444	; 0xfffffe44
 850:	5f5f0065 	svcpl	0x005f0065
 854:	61656c63 	cmnvs	r5, r3, ror #24
 858:	0070756e 	rsbseq	r7, r0, lr, ror #10
 85c:	736e755f 	cmnvc	lr, #398458880	; 0x17c00000
 860:	69636570 	stmdbvs	r3!, {r4, r5, r6, r8, sl, sp, lr}^
 864:	64656966 	strbtvs	r6, [r5], #-2406	; 0xfffff69a
 868:	636f6c5f 	cmnvs	pc, #24320	; 0x5f00
 86c:	5f656c61 	svcpl	0x00656c61
 870:	6f666e69 	svcvs	0x00666e69
 874:	616d5f00 	cmnvs	sp, r0, lsl #30
 878:	73647778 	cmnvc	r4, #120, 14	; 0x1e00000
 87c:	65725f00 	ldrbvs	r5, [r2, #-3840]!	; 0xfffff100
 880:	00746e65 	rsbseq	r6, r4, r5, ror #28
 884:	6565735f 	strbvs	r7, [r5, #-863]!	; 0xfffffca1
 888:	5f5f0064 	svcpl	0x005f0064
 88c:	6e756f63 	cdpvs	15, 7, cr6, cr5, cr3, {3}
 890:	5f5f0074 	svcpl	0x005f0074
 894:	6b636f6c 	blvs	18dc64c <startup-0x1e7239b4>
 898:	765f5f00 	ldrbvc	r5, [pc], -r0, lsl #30
 89c:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
 8a0:	65735f00 	ldrbvs	r5, [r3, #-3840]!	; 0xfffff100
 8a4:	5f006b65 	svcpl	0x00006b65
 8a8:	736f7066 	cmnvc	pc, #102	; 0x66
 8ac:	5f00745f 	svcpl	0x0000745f
 8b0:	5f6d745f 	svcpl	0x006d745f
 8b4:	006e696d 	rsbeq	r6, lr, sp, ror #18
 8b8:	416a626f 	cmnmi	sl, pc, ror #4
 8bc:	79617272 	stmdbvc	r1!, {r1, r4, r5, r6, r9, ip, sp, lr}^
 8c0:	756d5f00 	strbvc	r5, [sp, #-3840]!	; 0xfffff100
 8c4:	5f00746c 	svcpl	0x0000746c
 8c8:	74727473 	ldrbtvc	r7, [r2], #-1139	; 0xfffffb8d
 8cc:	6c5f6b6f 	mrrcvs	11, 6, r6, pc, cr15	; <UNPREDICTABLE>
 8d0:	00747361 	rsbseq	r7, r4, r1, ror #6
 8d4:	72616572 	rsbvc	r6, r1, #478150656	; 0x1c800000
 8d8:	65746900 	ldrbvs	r6, [r4, #-2304]!	; 0xfffff700
 8dc:	756f436d 	strbvc	r4, [pc, #-877]!	; 577 <startup-0x1ffffa89>
 8e0:	5f00746e 	svcpl	0x0000746e
 8e4:	79746e66 	ldmdbvc	r4!, {r1, r2, r5, r6, r9, sl, fp, sp, lr}^
 8e8:	00736570 	rsbseq	r6, r3, r0, ror r5
 8ec:	6464615f 	strbtvs	r6, [r4], #-351	; 0xfffffea1
 8f0:	555f5f00 	ldrbpl	r5, [pc, #-3840]	; fffff9f8 <rear+0xdfffc5c0>
 8f4:	676e6f4c 	strbvs	r6, [lr, -ip, asr #30]!
 8f8:	65675f00 	strbvs	r5, [r7, #-3840]!	; 0xfffff100
 8fc:	74616474 	strbtvc	r6, [r1], #-1140	; 0xfffffb8c
 900:	72655f65 	rsbvc	r5, r5, #404	; 0x194
 904:	72660072 	rsbvc	r0, r6, #114	; 0x72
 908:	00746e6f 	rsbseq	r6, r4, pc, ror #28
 90c:	6f6c675f 	svcvs	0x006c675f
 910:	5f6c6162 	svcpl	0x006c6162
 914:	75706d69 	ldrbvc	r6, [r0, #-3433]!	; 0xfffff297
 918:	705f6572 	subsvc	r6, pc, r2, ror r5	; <UNPREDICTABLE>
 91c:	5f007274 	svcpl	0x00007274
 920:	73756e75 	cmnvc	r5, #1872	; 0x750
 924:	725f6465 	subsvc	r6, pc, #1694498816	; 0x65000000
 928:	00646e61 	rsbeq	r6, r4, r1, ror #28
 92c:	7364775f 	cmnvc	r4, #24903680	; 0x17c0000
 930:	745f5f00 	ldrbvc	r5, [pc], #-3840	; 938 <startup-0x1ffff6c8>
 934:	64775f6d 	ldrbtvs	r5, [r7], #-3949	; 0xfffff093
 938:	5f007961 	svcpl	0x00007961
 93c:	65756c67 	ldrbvs	r6, [r5, #-3175]!	; 0xfffff399
 940:	366c5f00 	strbtcc	r5, [ip], -r0, lsl #30
 944:	625f6134 	subsvs	r6, pc, #52, 2
 948:	5f006675 	svcpl	0x00006675
 94c:	5f676973 	svcpl	0x00676973
 950:	636e7566 	cmnvs	lr, #427819008	; 0x19800000
 954:	626e5f00 	rsbvs	r5, lr, #0, 30
 958:	5f006675 	svcpl	0x00006675
 95c:	73756e75 	cmnvc	r5, #1872	; 0x750
 960:	5f006465 	svcpl	0x00006465
 964:	5f6d745f 	svcpl	0x006d745f
 968:	73647369 	cmnvc	r4, #-1543503871	; 0xa4000001
 96c:	6c5f0074 	mrrcvs	0, 7, r0, pc, cr4	; <UNPREDICTABLE>
 970:	6c61636f 	stclvs	3, cr6, [r1], #-444	; 0xfffffe44
 974:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
 978:	6675625f 			; <UNDEFINED> instruction: 0x6675625f
 97c:	6c635f00 	stclvs	15, cr5, [r3], #-0
 980:	0065736f 	rsbeq	r7, r5, pc, ror #6
 984:	3834725f 	ldmdacc	r4!, {r0, r1, r2, r3, r4, r6, r9, ip, sp, lr}
 988:	626d5f00 	rsbvs	r5, sp, #0, 30
 98c:	63776f74 	cmnvs	r7, #116, 30	; 0x1d0
 990:	6174735f 	cmnvs	r4, pc, asr r3
 994:	5f006574 	svcpl	0x00006574
 998:	00733570 	rsbseq	r3, r3, r0, ror r5
 99c:	6d745f5f 	ldclvs	15, cr5, [r4, #-380]!	; 0xfffffe84
 9a0:	61646d5f 	cmnvs	r4, pc, asr sp
 9a4:	656b0079 	strbvs	r0, [fp, #-121]!	; 0xffffff87
 9a8:	69006279 	stmdbvs	r0, {r0, r3, r4, r5, r6, r9, sp, lr}
 9ac:	7475706e 	ldrbtvc	r7, [r5], #-110	; 0xffffff92
 9b0:	79656b00 	stmdbvc	r5!, {r8, r9, fp, sp, lr}^
 9b4:	006c6156 	rsbeq	r6, ip, r6, asr r1
 9b8:	3774756f 	ldrbcc	r7, [r4, -pc, ror #10]!
 9bc:	00676573 	rsbeq	r6, r7, r3, ror r5
 9c0:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
 9c4:	6c6f635f 	stclvs	3, cr6, [pc], #-380	; 850 <startup-0x1ffff7b0>
 9c8:	6e6d756f 	cdpvs	5, 6, cr7, cr13, cr15, {3}
 9cc:	79656b00 	stmdbvc	r5!, {r8, r9, fp, sp, lr}^
 9d0:	6c61765f 	stclvs	6, cr7, [r1], #-380	; 0xfffffe84
 9d4:	61006575 	tstvs	r0, r5, ror r5
 9d8:	76697463 	strbtvc	r7, [r9], -r3, ror #8
 9dc:	5f657461 	svcpl	0x00657461
 9e0:	00776f72 	rsbseq	r6, r7, r2, ror pc
 9e4:	6d2f3a5a 	vstmdbvs	pc!, {s6-s95}
 9e8:	4d2f706f 	stcmi	0, cr7, [pc, #-444]!	; 834 <startup-0x1ffff7cc>
 9ec:	532d504f 			; <UNDEFINED> instruction: 0x532d504f
 9f0:	2f6c6570 	svccs	0x006c6570
 9f4:	6b616e53 	blvs	185c348 <startup-0x1e7a3cb8>
 9f8:	656b2f65 	strbvs	r2, [fp, #-3941]!	; 0xfffff09b
 9fc:	632e6279 			; <UNDEFINED> instruction: 0x632e6279
	...

Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	206d7241 	rsbcs	r7, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d39 	eorscc	r2, r2, r9, lsr sp
  30:	712d3931 			; <UNDEFINED> instruction: 0x712d3931
  34:	616d2d34 	cmnvs	sp, r4, lsr sp
  38:	29726f6a 	ldmdbcs	r2!, {r1, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
  3c:	322e3920 	eorcc	r3, lr, #32, 18	; 0x80000
  40:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  44:	31393130 	teqcc	r9, r0, lsr r1
  48:	20353230 	eorscs	r3, r5, r0, lsr r2
  4c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  50:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  54:	415b2029 	cmpmi	fp, r9, lsr #32
  58:	612f4d52 			; <UNDEFINED> instruction: 0x612f4d52
  5c:	392d6d72 	pushcc	{r1, r4, r5, r6, r8, sl, fp, sp, lr}
  60:	6172622d 	cmnvs	r2, sp, lsr #4
  64:	2068636e 	rsbcs	r6, r8, lr, ror #6
  68:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
  6c:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
  70:	37373220 	ldrcc	r3, [r7, -r0, lsr #4]!
  74:	5d393935 			; <UNDEFINED> instruction: 0x5d393935
	...

Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002a41 	andeq	r2, r0, r1, asr #20
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000020 	andeq	r0, r0, r0, lsr #32
  10:	4d2d3605 	stcmi	6, cr3, [sp, #-20]!	; 0xffffffec
  14:	070b0600 	streq	r0, [fp, -r0, lsl #12]
  18:	1201094d 	andne	r0, r1, #1261568	; 0x134000
  1c:	15011404 	strne	r1, [r1, #-1028]	; 0xfffffbfc
  20:	18031701 	stmdane	r3, {r0, r8, r9, sl, ip}
  24:	1a011901 	bne	46430 <startup-0x1ffb9bd0>
  28:	Address 0x00000028 is out of bounds.


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	00000018 	andeq	r0, r0, r8, lsl r0
  14:	00000000 	andeq	r0, r0, r0
  18:	20000010 	andcs	r0, r0, r0, lsl r0
  1c:	0000001a 	andeq	r0, r0, sl, lsl r0
  20:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  24:	41018e02 	tstmi	r1, r2, lsl #28
  28:	0000070d 	andeq	r0, r0, sp, lsl #14
  2c:	0000001c 	andeq	r0, r0, ip, lsl r0
  30:	00000000 	andeq	r0, r0, r0
  34:	2000002a 	andcs	r0, r0, sl, lsr #32
  38:	00000032 	andeq	r0, r0, r2, lsr r0
  3c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  40:	41018e02 	tstmi	r1, r2, lsl #28
  44:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
  48:	00000007 	andeq	r0, r0, r7
  4c:	0000001c 	andeq	r0, r0, ip, lsl r0
  50:	00000000 	andeq	r0, r0, r0
  54:	2000005c 	andcs	r0, r0, ip, asr r0
  58:	0000003c 	andeq	r0, r0, ip, lsr r0
  5c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  60:	41018e02 	tstmi	r1, r2, lsl #28
  64:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
  68:	00000007 	andeq	r0, r0, r7
  6c:	0000001c 	andeq	r0, r0, ip, lsl r0
  70:	00000000 	andeq	r0, r0, r0
  74:	20000098 	mulcs	r0, r8, r0
  78:	0000002a 	andeq	r0, r0, sl, lsr #32
  7c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  80:	41018e02 	tstmi	r1, r2, lsl #28
  84:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
  88:	00000007 	andeq	r0, r0, r7
  8c:	0000001c 	andeq	r0, r0, ip, lsl r0
  90:	00000000 	andeq	r0, r0, r0
  94:	200000c2 	andcs	r0, r0, r2, asr #1
  98:	0000002a 	andeq	r0, r0, sl, lsr #32
  9c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  a0:	41018e02 	tstmi	r1, r2, lsl #28
  a4:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
  a8:	00000007 	andeq	r0, r0, r7
  ac:	0000001c 	andeq	r0, r0, ip, lsl r0
  b0:	00000000 	andeq	r0, r0, r0
  b4:	200000ec 	andcs	r0, r0, ip, ror #1
  b8:	00000030 	andeq	r0, r0, r0, lsr r0
  bc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  c0:	41018e02 	tstmi	r1, r2, lsl #28
  c4:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
  c8:	00000007 	andeq	r0, r0, r7
  cc:	0000001c 	andeq	r0, r0, ip, lsl r0
  d0:	00000000 	andeq	r0, r0, r0
  d4:	2000011c 	andcs	r0, r0, ip, lsl r1
  d8:	00000034 	andeq	r0, r0, r4, lsr r0
  dc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  e0:	41018e02 	tstmi	r1, r2, lsl #28
  e4:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
  e8:	00000007 	andeq	r0, r0, r7
  ec:	0000001c 	andeq	r0, r0, ip, lsl r0
  f0:	00000000 	andeq	r0, r0, r0
  f4:	20000150 	andcs	r0, r0, r0, asr r1
  f8:	0000003c 	andeq	r0, r0, ip, lsr r0
  fc:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
 100:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 104:	180e4101 	stmdane	lr, {r0, r8, lr}
 108:	00070d41 	andeq	r0, r7, r1, asr #26
 10c:	0000001c 	andeq	r0, r0, ip, lsl r0
 110:	00000000 	andeq	r0, r0, r0
 114:	2000018c 	andcs	r0, r0, ip, lsl #3
 118:	0000003c 	andeq	r0, r0, ip, lsr r0
 11c:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
 120:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 124:	180e4101 	stmdane	lr, {r0, r8, lr}
 128:	00070d41 	andeq	r0, r7, r1, asr #26
 12c:	00000018 	andeq	r0, r0, r8, lsl r0
 130:	00000000 	andeq	r0, r0, r0
 134:	200001c8 	andcs	r0, r0, r8, asr #3
 138:	0000002e 	andeq	r0, r0, lr, lsr #32
 13c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 140:	41018e02 	tstmi	r1, r2, lsl #28
 144:	0000070d 	andeq	r0, r0, sp, lsl #14
 148:	00000018 	andeq	r0, r0, r8, lsl r0
 14c:	00000000 	andeq	r0, r0, r0
 150:	200001f6 	strdcs	r0, [r0], -r6
 154:	0000002e 	andeq	r0, r0, lr, lsr #32
 158:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 15c:	41018e02 	tstmi	r1, r2, lsl #28
 160:	0000070d 	andeq	r0, r0, sp, lsl #14
 164:	00000018 	andeq	r0, r0, r8, lsl r0
 168:	00000000 	andeq	r0, r0, r0
 16c:	20000224 	andcs	r0, r0, r4, lsr #4
 170:	0000002e 	andeq	r0, r0, lr, lsr #32
 174:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 178:	41018e02 	tstmi	r1, r2, lsl #28
 17c:	0000070d 	andeq	r0, r0, sp, lsl #14
 180:	00000018 	andeq	r0, r0, r8, lsl r0
 184:	00000000 	andeq	r0, r0, r0
 188:	20000252 	andcs	r0, r0, r2, asr r2
 18c:	0000002e 	andeq	r0, r0, lr, lsr #32
 190:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 194:	41018e02 	tstmi	r1, r2, lsl #28
 198:	0000070d 	andeq	r0, r0, sp, lsl #14
 19c:	0000001c 	andeq	r0, r0, ip, lsl r0
 1a0:	00000000 	andeq	r0, r0, r0
 1a4:	20000280 	andcs	r0, r0, r0, lsl #5
 1a8:	0000002a 	andeq	r0, r0, sl, lsr #32
 1ac:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 1b0:	41018e02 	tstmi	r1, r2, lsl #28
 1b4:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 1b8:	00000007 	andeq	r0, r0, r7
 1bc:	0000001c 	andeq	r0, r0, ip, lsl r0
 1c0:	00000000 	andeq	r0, r0, r0
 1c4:	200002aa 	andcs	r0, r0, sl, lsr #5
 1c8:	0000004c 	andeq	r0, r0, ip, asr #32
 1cc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 1d0:	41018e02 	tstmi	r1, r2, lsl #28
 1d4:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 1d8:	00000007 	andeq	r0, r0, r7
 1dc:	0000000c 	andeq	r0, r0, ip
 1e0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 1e4:	7c020001 	stcvc	0, cr0, [r2], {1}
 1e8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 1ec:	00000018 	andeq	r0, r0, r8, lsl r0
 1f0:	000001dc 	ldrdeq	r0, [r0], -ip
 1f4:	200002f8 	strdcs	r0, [r0], -r8
 1f8:	0000005c 	andeq	r0, r0, ip, asr r0
 1fc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 200:	41018e02 	tstmi	r1, r2, lsl #28
 204:	0000070d 	andeq	r0, r0, sp, lsl #14
 208:	0000001c 	andeq	r0, r0, ip, lsl r0
 20c:	000001dc 	ldrdeq	r0, [r0], -ip
 210:	20000354 	andcs	r0, r0, r4, asr r3
 214:	00000050 	andeq	r0, r0, r0, asr r0
 218:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 21c:	41018e02 	tstmi	r1, r2, lsl #28
 220:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 224:	00000007 	andeq	r0, r0, r7
 228:	0000001c 	andeq	r0, r0, ip, lsl r0
 22c:	000001dc 	ldrdeq	r0, [r0], -ip
 230:	200003a4 	andcs	r0, r0, r4, lsr #7
 234:	00000044 	andeq	r0, r0, r4, asr #32
 238:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 23c:	41018e02 	tstmi	r1, r2, lsl #28
 240:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 244:	00000007 	andeq	r0, r0, r7
 248:	0000001c 	andeq	r0, r0, ip, lsl r0
 24c:	000001dc 	ldrdeq	r0, [r0], -ip
 250:	200003e8 	andcs	r0, r0, r8, ror #7
 254:	0000005a 	andeq	r0, r0, sl, asr r0
 258:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 25c:	41018e02 	tstmi	r1, r2, lsl #28
 260:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 264:	00000007 	andeq	r0, r0, r7
 268:	00000018 	andeq	r0, r0, r8, lsl r0
 26c:	000001dc 	ldrdeq	r0, [r0], -ip
 270:	20000442 	andcs	r0, r0, r2, asr #8
 274:	0000003e 	andeq	r0, r0, lr, lsr r0
 278:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 27c:	41018e02 	tstmi	r1, r2, lsl #28
 280:	0000070d 	andeq	r0, r0, sp, lsl #14
 284:	0000001c 	andeq	r0, r0, ip, lsl r0
 288:	000001dc 	ldrdeq	r0, [r0], -ip
 28c:	20000480 	andcs	r0, r0, r0, lsl #9
 290:	0000008c 	andeq	r0, r0, ip, lsl #1
 294:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 298:	41018e02 	tstmi	r1, r2, lsl #28
 29c:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 2a0:	00000007 	andeq	r0, r0, r7
 2a4:	0000001c 	andeq	r0, r0, ip, lsl r0
 2a8:	000001dc 	ldrdeq	r0, [r0], -ip
 2ac:	2000050c 	andcs	r0, r0, ip, lsl #10
 2b0:	0000002a 	andeq	r0, r0, sl, lsr #32
 2b4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 2b8:	41018e02 	tstmi	r1, r2, lsl #28
 2bc:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 2c0:	00000007 	andeq	r0, r0, r7
 2c4:	0000001c 	andeq	r0, r0, ip, lsl r0
 2c8:	000001dc 	ldrdeq	r0, [r0], -ip
 2cc:	20000536 	andcs	r0, r0, r6, lsr r5
 2d0:	00000076 	andeq	r0, r0, r6, ror r0
 2d4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 2d8:	41018e02 	tstmi	r1, r2, lsl #28
 2dc:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 2e0:	00000007 	andeq	r0, r0, r7
 2e4:	0000001c 	andeq	r0, r0, ip, lsl r0
 2e8:	000001dc 	ldrdeq	r0, [r0], -ip
 2ec:	200005ac 	andcs	r0, r0, ip, lsr #11
 2f0:	00000046 	andeq	r0, r0, r6, asr #32
 2f4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 2f8:	41018e02 	tstmi	r1, r2, lsl #28
 2fc:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 300:	00000007 	andeq	r0, r0, r7
 304:	0000001c 	andeq	r0, r0, ip, lsl r0
 308:	000001dc 	ldrdeq	r0, [r0], -ip
 30c:	200005f2 	strdcs	r0, [r0], -r2
 310:	00000046 	andeq	r0, r0, r6, asr #32
 314:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 318:	41018e02 	tstmi	r1, r2, lsl #28
 31c:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 320:	00000007 	andeq	r0, r0, r7
 324:	0000001c 	andeq	r0, r0, ip, lsl r0
 328:	000001dc 	ldrdeq	r0, [r0], -ip
 32c:	20000638 	andcs	r0, r0, r8, lsr r6
 330:	0000005a 	andeq	r0, r0, sl, asr r0
 334:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 338:	41018e02 	tstmi	r1, r2, lsl #28
 33c:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 340:	00000007 	andeq	r0, r0, r7
 344:	0000001c 	andeq	r0, r0, ip, lsl r0
 348:	000001dc 	ldrdeq	r0, [r0], -ip
 34c:	20000692 	mulcs	r0, r2, r6
 350:	00000036 	andeq	r0, r0, r6, lsr r0
 354:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 358:	41018e02 	tstmi	r1, r2, lsl #28
 35c:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 360:	00000007 	andeq	r0, r0, r7
 364:	0000001c 	andeq	r0, r0, ip, lsl r0
 368:	000001dc 	ldrdeq	r0, [r0], -ip
 36c:	200006c8 	andcs	r0, r0, r8, asr #13
 370:	00000084 	andeq	r0, r0, r4, lsl #1
 374:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 378:	41018e02 	tstmi	r1, r2, lsl #28
 37c:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 380:	00000007 	andeq	r0, r0, r7
 384:	0000001c 	andeq	r0, r0, ip, lsl r0
 388:	000001dc 	ldrdeq	r0, [r0], -ip
 38c:	2000074c 	andcs	r0, r0, ip, asr #14
 390:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 394:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 398:	41018e02 	tstmi	r1, r2, lsl #28
 39c:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 3a0:	00000007 	andeq	r0, r0, r7
 3a4:	0000000c 	andeq	r0, r0, ip
 3a8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 3ac:	7c020001 	stcvc	0, cr0, [r2], {1}
 3b0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 3b4:	0000000c 	andeq	r0, r0, ip
 3b8:	000003a4 	andeq	r0, r0, r4, lsr #7
 3bc:	20000000 	andcs	r0, r0, r0
 3c0:	0000000c 	andeq	r0, r0, ip
 3c4:	0000001c 	andeq	r0, r0, ip, lsl r0
 3c8:	000003a4 	andeq	r0, r0, r4, lsr #7
 3cc:	2000081c 	andcs	r0, r0, ip, lsl r8
 3d0:	00000020 	andeq	r0, r0, r0, lsr #32
 3d4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 3d8:	41018e02 	tstmi	r1, r2, lsl #28
 3dc:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 3e0:	00000007 	andeq	r0, r0, r7
 3e4:	0000001c 	andeq	r0, r0, ip, lsl r0
 3e8:	000003a4 	andeq	r0, r0, r4, lsr #7
 3ec:	2000083c 	andcs	r0, r0, ip, lsr r8
 3f0:	00000062 	andeq	r0, r0, r2, rrx
 3f4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 3f8:	41018e02 	tstmi	r1, r2, lsl #28
 3fc:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 400:	00000007 	andeq	r0, r0, r7
 404:	0000001c 	andeq	r0, r0, ip, lsl r0
 408:	000003a4 	andeq	r0, r0, r4, lsr #7
 40c:	2000089e 	mulcs	r0, lr, r8
 410:	00000062 	andeq	r0, r0, r2, rrx
 414:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 418:	41018e02 	tstmi	r1, r2, lsl #28
 41c:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 420:	00000007 	andeq	r0, r0, r7
 424:	0000001c 	andeq	r0, r0, ip, lsl r0
 428:	000003a4 	andeq	r0, r0, r4, lsr #7
 42c:	20000900 	andcs	r0, r0, r0, lsl #18
 430:	000000ac 	andeq	r0, r0, ip, lsr #1
 434:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 438:	41018e02 	tstmi	r1, r2, lsl #28
 43c:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 440:	00000007 	andeq	r0, r0, r7
 444:	0000001c 	andeq	r0, r0, ip, lsl r0
 448:	000003a4 	andeq	r0, r0, r4, lsr #7
 44c:	200009ac 	andcs	r0, r0, ip, lsr #19
 450:	0000002c 	andeq	r0, r0, ip, lsr #32
 454:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 458:	41018e02 	tstmi	r1, r2, lsl #28
 45c:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 460:	00000007 	andeq	r0, r0, r7
 464:	0000001c 	andeq	r0, r0, ip, lsl r0
 468:	000003a4 	andeq	r0, r0, r4, lsr #7
 46c:	200009d8 	ldrdcs	r0, [r0], -r8
 470:	000000c2 	andeq	r0, r0, r2, asr #1
 474:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 478:	41018e02 	tstmi	r1, r2, lsl #28
 47c:	0d41300e 	stcleq	0, cr3, [r1, #-56]	; 0xffffffc8
 480:	00000007 	andeq	r0, r0, r7
 484:	0000001c 	andeq	r0, r0, ip, lsl r0
 488:	000003a4 	andeq	r0, r0, r4, lsr #7
 48c:	20000a9a 	mulcs	r0, sl, sl
 490:	00000052 	andeq	r0, r0, r2, asr r0
 494:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 498:	41018e02 	tstmi	r1, r2, lsl #28
 49c:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 4a0:	00000007 	andeq	r0, r0, r7
 4a4:	0000001c 	andeq	r0, r0, ip, lsl r0
 4a8:	000003a4 	andeq	r0, r0, r4, lsr #7
 4ac:	20000aec 	andcs	r0, r0, ip, ror #21
 4b0:	00000090 	muleq	r0, r0, r0
 4b4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 4b8:	41018e02 	tstmi	r1, r2, lsl #28
 4bc:	0d41200e 	stcleq	0, cr2, [r1, #-56]	; 0xffffffc8
 4c0:	00000007 	andeq	r0, r0, r7
 4c4:	0000001c 	andeq	r0, r0, ip, lsl r0
 4c8:	000003a4 	andeq	r0, r0, r4, lsr #7
 4cc:	20000b7c 	andcs	r0, r0, ip, ror fp
 4d0:	000000b2 	strheq	r0, [r0], -r2
 4d4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 4d8:	41018e02 	tstmi	r1, r2, lsl #28
 4dc:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 4e0:	00000007 	andeq	r0, r0, r7
 4e4:	00000018 	andeq	r0, r0, r8, lsl r0
 4e8:	000003a4 	andeq	r0, r0, r4, lsr #7
 4ec:	20000c2e 	andcs	r0, r0, lr, lsr #24
 4f0:	0000006e 	andeq	r0, r0, lr, rrx
 4f4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 4f8:	41018e02 	tstmi	r1, r2, lsl #28
 4fc:	0000070d 	andeq	r0, r0, sp, lsl #14
 500:	0000001c 	andeq	r0, r0, ip, lsl r0
 504:	000003a4 	andeq	r0, r0, r4, lsr #7
 508:	20000c9c 	mulcs	r0, ip, ip
 50c:	00000128 	andeq	r0, r0, r8, lsr #2
 510:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 514:	41018e02 	tstmi	r1, r2, lsl #28
 518:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 51c:	00000007 	andeq	r0, r0, r7
 520:	00000018 	andeq	r0, r0, r8, lsl r0
 524:	000003a4 	andeq	r0, r0, r4, lsr #7
 528:	20000dc4 	andcs	r0, r0, r4, asr #27
 52c:	00000028 	andeq	r0, r0, r8, lsr #32
 530:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 534:	41018e02 	tstmi	r1, r2, lsl #28
 538:	0000070d 	andeq	r0, r0, sp, lsl #14
 53c:	00000020 	andeq	r0, r0, r0, lsr #32
 540:	000003a4 	andeq	r0, r0, r4, lsr #7
 544:	20000dec 	andcs	r0, r0, ip, ror #27
 548:	0000011c 	andeq	r0, r0, ip, lsl r1
 54c:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
 550:	87038504 	strhi	r8, [r3, -r4, lsl #10]
 554:	42018e02 	andmi	r8, r1, #2, 28
 558:	4138c80e 	teqmi	r8, lr, lsl #16
 55c:	0000070d 	andeq	r0, r0, sp, lsl #14
 560:	0000000c 	andeq	r0, r0, ip
 564:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 568:	7c020001 	stcvc	0, cr0, [r2], {1}
 56c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 570:	00000018 	andeq	r0, r0, r8, lsl r0
 574:	00000560 	andeq	r0, r0, r0, ror #10
 578:	20000f0c 	andcs	r0, r0, ip, lsl #30
 57c:	00000044 	andeq	r0, r0, r4, asr #32
 580:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 584:	41018e02 	tstmi	r1, r2, lsl #28
 588:	0000070d 	andeq	r0, r0, sp, lsl #14
 58c:	00000018 	andeq	r0, r0, r8, lsl r0
 590:	00000560 	andeq	r0, r0, r0, ror #10
 594:	20000f50 	andcs	r0, r0, r0, asr pc
 598:	00000012 	andeq	r0, r0, r2, lsl r0
 59c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 5a0:	41018e02 	tstmi	r1, r2, lsl #28
 5a4:	0000070d 	andeq	r0, r0, sp, lsl #14
 5a8:	0000001c 	andeq	r0, r0, ip, lsl r0
 5ac:	00000560 	andeq	r0, r0, r0, ror #10
 5b0:	20000f62 	andcs	r0, r0, r2, ror #30
 5b4:	0000002e 	andeq	r0, r0, lr, lsr #32
 5b8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 5bc:	41018e02 	tstmi	r1, r2, lsl #28
 5c0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 5c4:	00000007 	andeq	r0, r0, r7
 5c8:	0000001c 	andeq	r0, r0, ip, lsl r0
 5cc:	00000560 	andeq	r0, r0, r0, ror #10
 5d0:	20000f90 	mulcs	r0, r0, pc	; <UNPREDICTABLE>
 5d4:	00000028 	andeq	r0, r0, r8, lsr #32
 5d8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 5dc:	41018e02 	tstmi	r1, r2, lsl #28
 5e0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 5e4:	00000007 	andeq	r0, r0, r7
 5e8:	0000000c 	andeq	r0, r0, ip
 5ec:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 5f0:	7c020001 	stcvc	0, cr0, [r2], {1}
 5f4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 5f8:	0000001c 	andeq	r0, r0, ip, lsl r0
 5fc:	000005e8 	andeq	r0, r0, r8, ror #11
 600:	20000fb8 			; <UNDEFINED> instruction: 0x20000fb8
 604:	00000030 	andeq	r0, r0, r0, lsr r0
 608:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 60c:	41018e02 	tstmi	r1, r2, lsl #28
 610:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 614:	00000007 	andeq	r0, r0, r7
 618:	00000018 	andeq	r0, r0, r8, lsl r0
 61c:	000005e8 	andeq	r0, r0, r8, ror #11
 620:	20000fe8 	andcs	r0, r0, r8, ror #31
 624:	0000001c 	andeq	r0, r0, ip, lsl r0
 628:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 62c:	41018e02 	tstmi	r1, r2, lsl #28
 630:	0000070d 	andeq	r0, r0, sp, lsl #14
 634:	00000018 	andeq	r0, r0, r8, lsl r0
 638:	000005e8 	andeq	r0, r0, r8, ror #11
 63c:	20001004 	andcs	r1, r0, r4
 640:	00000018 	andeq	r0, r0, r8, lsl r0
 644:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 648:	41018e02 	tstmi	r1, r2, lsl #28
 64c:	0000070d 	andeq	r0, r0, sp, lsl #14
 650:	00000018 	andeq	r0, r0, r8, lsl r0
 654:	000005e8 	andeq	r0, r0, r8, ror #11
 658:	2000101c 	andcs	r1, r0, ip, lsl r0
 65c:	0000001c 	andeq	r0, r0, ip, lsl r0
 660:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 664:	41018e02 	tstmi	r1, r2, lsl #28
 668:	0000070d 	andeq	r0, r0, sp, lsl #14
 66c:	00000018 	andeq	r0, r0, r8, lsl r0
 670:	000005e8 	andeq	r0, r0, r8, ror #11
 674:	20001038 	andcs	r1, r0, r8, lsr r0
 678:	00000014 	andeq	r0, r0, r4, lsl r0
 67c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 680:	41018e02 	tstmi	r1, r2, lsl #28
 684:	0000070d 	andeq	r0, r0, sp, lsl #14
 688:	0000001c 	andeq	r0, r0, ip, lsl r0
 68c:	000005e8 	andeq	r0, r0, r8, ror #11
 690:	2000104c 	andcs	r1, r0, ip, asr #32
 694:	00000060 	andeq	r0, r0, r0, rrx
 698:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 69c:	41018e02 	tstmi	r1, r2, lsl #28
 6a0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 6a4:	00000007 	andeq	r0, r0, r7
 6a8:	0000001c 	andeq	r0, r0, ip, lsl r0
 6ac:	000005e8 	andeq	r0, r0, r8, ror #11
 6b0:	200010ac 	andcs	r1, r0, ip, lsr #1
 6b4:	00000048 	andeq	r0, r0, r8, asr #32
 6b8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 6bc:	41018e02 	tstmi	r1, r2, lsl #28
 6c0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 6c4:	00000007 	andeq	r0, r0, r7
 6c8:	0000000c 	andeq	r0, r0, ip
 6cc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 6d0:	7c020001 	stcvc	0, cr0, [r2], {1}
 6d4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 6d8:	0000001c 	andeq	r0, r0, ip, lsl r0
 6dc:	000006c8 	andeq	r0, r0, r8, asr #13
 6e0:	200010f4 	strdcs	r1, [r0], -r4
 6e4:	00000024 	andeq	r0, r0, r4, lsr #32
 6e8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 6ec:	41018e02 	tstmi	r1, r2, lsl #28
 6f0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 6f4:	00000007 	andeq	r0, r0, r7
 6f8:	0000001c 	andeq	r0, r0, ip, lsl r0
 6fc:	000006c8 	andeq	r0, r0, r8, asr #13
 700:	20001118 	andcs	r1, r0, r8, lsl r1
 704:	00000044 	andeq	r0, r0, r4, asr #32
 708:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 70c:	41018e02 	tstmi	r1, r2, lsl #28
 710:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 714:	00000007 	andeq	r0, r0, r7
 718:	0000001c 	andeq	r0, r0, ip, lsl r0
 71c:	000006c8 	andeq	r0, r0, r8, asr #13
 720:	2000115c 	andcs	r1, r0, ip, asr r1
 724:	00000068 	andeq	r0, r0, r8, rrx
 728:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
 72c:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 730:	380e4101 	stmdacc	lr, {r0, r8, lr}
 734:	00070d41 	andeq	r0, r7, r1, asr #26
 738:	0000001c 	andeq	r0, r0, ip, lsl r0
 73c:	000006c8 	andeq	r0, r0, r8, asr #13
 740:	200011c4 	andcs	r1, r0, r4, asr #3
 744:	00000020 	andeq	r0, r0, r0, lsr #32
 748:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 74c:	41018e02 	tstmi	r1, r2, lsl #28
 750:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 754:	00000007 	andeq	r0, r0, r7

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	2000081c 	andcs	r0, r0, ip, lsl r8
   4:	20000f08 	andcs	r0, r0, r8, lsl #30
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...
