
./Debug/Snake.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:
 #define RESTART 0xD
 
__attribute__((naked)) __attribute__((section (".start_section")) )
void startup ( void )
{
__asm__ volatile(" LDR R0,=0x2001C000\n");		/* set stack */
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <startup+0xc>)
__asm__ volatile(" MOV SP,R0\n");
20000002:	4685      	mov	sp, r0
__asm__ volatile(" BL main\n");					/* call main */
20000004:	f000 fb4e 	bl	200006a4 <main>
__asm__ volatile(".L1: B .L1\n");				/* never return */
20000008:	e7fe      	b.n	20000008 <startup+0x8>
};
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <ascii_init>:
#include <defines.h>
#include <asciidisplay.h>

void ascii_init(void){ /**/
20000010:	b580      	push	{r7, lr}
20000012:	af00      	add	r7, sp, #0
    /*function set*/
    funtion_set();
20000014:	f000 f8ef 	bl	200001f6 <funtion_set>
    
    /*Display Control*/
    display_control();
20000018:	f000 f904 	bl	20000224 <display_control>
    
    /*Clear Display*/
    clear_display();
2000001c:	f000 f8d4 	bl	200001c8 <clear_display>
    
    /*Entry mode set*/
    entry_mode_set();
20000020:	f000 f917 	bl	20000252 <entry_mode_set>
}
20000024:	46c0      	nop			; (mov r8, r8)
20000026:	46bd      	mov	sp, r7
20000028:	bd80      	pop	{r7, pc}

2000002a <ascii_ctrl_bit_set>:

/*adressera ASCII-display, ettställ de bitar som är 1 i x*/
void ascii_ctrl_bit_set(unsigned char x){
2000002a:	b580      	push	{r7, lr}
2000002c:	b082      	sub	sp, #8
2000002e:	af00      	add	r7, sp, #0
20000030:	0002      	movs	r2, r0
20000032:	1dfb      	adds	r3, r7, #7
20000034:	701a      	strb	r2, [r3, #0]
    *GPIO_E_ODR_LOW |= ( B_SELECT | x );
20000036:	4b08      	ldr	r3, [pc, #32]	; (20000058 <ascii_ctrl_bit_set+0x2e>)
20000038:	781b      	ldrb	r3, [r3, #0]
2000003a:	b2da      	uxtb	r2, r3
2000003c:	1dfb      	adds	r3, r7, #7
2000003e:	781b      	ldrb	r3, [r3, #0]
20000040:	4313      	orrs	r3, r2
20000042:	b2db      	uxtb	r3, r3
20000044:	4a04      	ldr	r2, [pc, #16]	; (20000058 <ascii_ctrl_bit_set+0x2e>)
20000046:	2104      	movs	r1, #4
20000048:	430b      	orrs	r3, r1
2000004a:	b2db      	uxtb	r3, r3
2000004c:	7013      	strb	r3, [r2, #0]
}
2000004e:	46c0      	nop			; (mov r8, r8)
20000050:	46bd      	mov	sp, r7
20000052:	b002      	add	sp, #8
20000054:	bd80      	pop	{r7, pc}
20000056:	46c0      	nop			; (mov r8, r8)
20000058:	40021014 	andmi	r1, r2, r4, lsl r0

2000005c <ascii_ctrl_bit_clear>:

/*adressera ASCII-display, nollställ de bitar som är 1 i x*/
void ascii_ctrl_bit_clear(unsigned char x){
2000005c:	b580      	push	{r7, lr}
2000005e:	b082      	sub	sp, #8
20000060:	af00      	add	r7, sp, #0
20000062:	0002      	movs	r2, r0
20000064:	1dfb      	adds	r3, r7, #7
20000066:	701a      	strb	r2, [r3, #0]
    *GPIO_E_ODR_LOW &= ( B_SELECT | ~x);
20000068:	4b0a      	ldr	r3, [pc, #40]	; (20000094 <ascii_ctrl_bit_clear+0x38>)
2000006a:	781b      	ldrb	r3, [r3, #0]
2000006c:	b2db      	uxtb	r3, r3
2000006e:	b25b      	sxtb	r3, r3
20000070:	1dfa      	adds	r2, r7, #7
20000072:	7812      	ldrb	r2, [r2, #0]
20000074:	b252      	sxtb	r2, r2
20000076:	43d2      	mvns	r2, r2
20000078:	b252      	sxtb	r2, r2
2000007a:	2104      	movs	r1, #4
2000007c:	430a      	orrs	r2, r1
2000007e:	b252      	sxtb	r2, r2
20000080:	4013      	ands	r3, r2
20000082:	b25a      	sxtb	r2, r3
20000084:	4b03      	ldr	r3, [pc, #12]	; (20000094 <ascii_ctrl_bit_clear+0x38>)
20000086:	b2d2      	uxtb	r2, r2
20000088:	701a      	strb	r2, [r3, #0]
    
}
2000008a:	46c0      	nop			; (mov r8, r8)
2000008c:	46bd      	mov	sp, r7
2000008e:	b002      	add	sp, #8
20000090:	bd80      	pop	{r7, pc}
20000092:	46c0      	nop			; (mov r8, r8)
20000094:	40021014 	andmi	r1, r2, r4, lsl r0

20000098 <ascii_write_cmd>:

void ascii_write_cmd(unsigned char command){
20000098:	b580      	push	{r7, lr}
2000009a:	b082      	sub	sp, #8
2000009c:	af00      	add	r7, sp, #0
2000009e:	0002      	movs	r2, r0
200000a0:	1dfb      	adds	r3, r7, #7
200000a2:	701a      	strb	r2, [r3, #0]
    ascii_ctrl_bit_clear(B_RS);
200000a4:	2001      	movs	r0, #1
200000a6:	f7ff ffd9 	bl	2000005c <ascii_ctrl_bit_clear>
    ascii_ctrl_bit_clear(B_RW);
200000aa:	2002      	movs	r0, #2
200000ac:	f7ff ffd6 	bl	2000005c <ascii_ctrl_bit_clear>
    ascii_write_controller(command);
200000b0:	1dfb      	adds	r3, r7, #7
200000b2:	781b      	ldrb	r3, [r3, #0]
200000b4:	0018      	movs	r0, r3
200000b6:	f000 f819 	bl	200000ec <ascii_write_controller>
}
200000ba:	46c0      	nop			; (mov r8, r8)
200000bc:	46bd      	mov	sp, r7
200000be:	b002      	add	sp, #8
200000c0:	bd80      	pop	{r7, pc}

200000c2 <ascii_write_data>:

void ascii_write_data(unsigned char data){
200000c2:	b580      	push	{r7, lr}
200000c4:	b082      	sub	sp, #8
200000c6:	af00      	add	r7, sp, #0
200000c8:	0002      	movs	r2, r0
200000ca:	1dfb      	adds	r3, r7, #7
200000cc:	701a      	strb	r2, [r3, #0]
    ascii_ctrl_bit_set(B_RS);
200000ce:	2001      	movs	r0, #1
200000d0:	f7ff ffab 	bl	2000002a <ascii_ctrl_bit_set>
    ascii_ctrl_bit_clear(B_RW);
200000d4:	2002      	movs	r0, #2
200000d6:	f7ff ffc1 	bl	2000005c <ascii_ctrl_bit_clear>
    ascii_write_controller(data);
200000da:	1dfb      	adds	r3, r7, #7
200000dc:	781b      	ldrb	r3, [r3, #0]
200000de:	0018      	movs	r0, r3
200000e0:	f000 f804 	bl	200000ec <ascii_write_controller>
}
200000e4:	46c0      	nop			; (mov r8, r8)
200000e6:	46bd      	mov	sp, r7
200000e8:	b002      	add	sp, #8
200000ea:	bd80      	pop	{r7, pc}

200000ec <ascii_write_controller>:

void ascii_write_controller(unsigned char byte){
200000ec:	b580      	push	{r7, lr}
200000ee:	b082      	sub	sp, #8
200000f0:	af00      	add	r7, sp, #0
200000f2:	0002      	movs	r2, r0
200000f4:	1dfb      	adds	r3, r7, #7
200000f6:	701a      	strb	r2, [r3, #0]
    ascii_ctrl_bit_set(B_E);
200000f8:	2040      	movs	r0, #64	; 0x40
200000fa:	f7ff ff96 	bl	2000002a <ascii_ctrl_bit_set>
    *GPIO_E_ODR_HIGH = byte;
200000fe:	4a06      	ldr	r2, [pc, #24]	; (20000118 <ascii_write_controller+0x2c>)
20000100:	1dfb      	adds	r3, r7, #7
20000102:	781b      	ldrb	r3, [r3, #0]
20000104:	7013      	strb	r3, [r2, #0]
    delay_250ns();
20000106:	f000 fc43 	bl	20000990 <delay_250ns>
    ascii_ctrl_bit_clear(B_E);
2000010a:	2040      	movs	r0, #64	; 0x40
2000010c:	f7ff ffa6 	bl	2000005c <ascii_ctrl_bit_clear>
}
20000110:	46c0      	nop			; (mov r8, r8)
20000112:	46bd      	mov	sp, r7
20000114:	b002      	add	sp, #8
20000116:	bd80      	pop	{r7, pc}
20000118:	40021015 	andmi	r1, r2, r5, lsl r0

2000011c <ascii_read_controller>:

unsigned char ascii_read_controller(void){
2000011c:	b580      	push	{r7, lr}
2000011e:	b082      	sub	sp, #8
20000120:	af00      	add	r7, sp, #0
    ascii_ctrl_bit_set(B_E);
20000122:	2040      	movs	r0, #64	; 0x40
20000124:	f7ff ff81 	bl	2000002a <ascii_ctrl_bit_set>
    delay_250ns();
20000128:	f000 fc32 	bl	20000990 <delay_250ns>
    delay_250ns();
2000012c:	f000 fc30 	bl	20000990 <delay_250ns>
    char retVal = *GPIO_E_IDR_HIGH;
20000130:	4a06      	ldr	r2, [pc, #24]	; (2000014c <ascii_read_controller+0x30>)
20000132:	1dfb      	adds	r3, r7, #7
20000134:	7812      	ldrb	r2, [r2, #0]
20000136:	701a      	strb	r2, [r3, #0]
    ascii_ctrl_bit_clear(B_E);
20000138:	2040      	movs	r0, #64	; 0x40
2000013a:	f7ff ff8f 	bl	2000005c <ascii_ctrl_bit_clear>
    return retVal;
2000013e:	1dfb      	adds	r3, r7, #7
20000140:	781b      	ldrb	r3, [r3, #0]
}
20000142:	0018      	movs	r0, r3
20000144:	46bd      	mov	sp, r7
20000146:	b002      	add	sp, #8
20000148:	bd80      	pop	{r7, pc}
2000014a:	46c0      	nop			; (mov r8, r8)
2000014c:	40021011 	andmi	r1, r2, r1, lsl r0

20000150 <ascii_read_status>:

unsigned char ascii_read_status(void){
20000150:	b590      	push	{r4, r7, lr}
20000152:	b083      	sub	sp, #12
20000154:	af00      	add	r7, sp, #0
    *(GPIO_E_MODER+0x02) = 0x0000;
20000156:	4b0b      	ldr	r3, [pc, #44]	; (20000184 <ascii_read_status+0x34>)
20000158:	2200      	movs	r2, #0
2000015a:	601a      	str	r2, [r3, #0]
    ascii_ctrl_bit_clear(B_RS);
2000015c:	2001      	movs	r0, #1
2000015e:	f7ff ff7d 	bl	2000005c <ascii_ctrl_bit_clear>
    ascii_ctrl_bit_set(B_RW);
20000162:	2002      	movs	r0, #2
20000164:	f7ff ff61 	bl	2000002a <ascii_ctrl_bit_set>
    char retStat = ascii_read_controller(); 
20000168:	1dfc      	adds	r4, r7, #7
2000016a:	f7ff ffd7 	bl	2000011c <ascii_read_controller>
2000016e:	0003      	movs	r3, r0
20000170:	7023      	strb	r3, [r4, #0]
    *(GPIO_E_MODER+0x02) = 0x5555;
20000172:	4b04      	ldr	r3, [pc, #16]	; (20000184 <ascii_read_status+0x34>)
20000174:	4a04      	ldr	r2, [pc, #16]	; (20000188 <ascii_read_status+0x38>)
20000176:	601a      	str	r2, [r3, #0]
    return retStat;
20000178:	1dfb      	adds	r3, r7, #7
2000017a:	781b      	ldrb	r3, [r3, #0]
}
2000017c:	0018      	movs	r0, r3
2000017e:	46bd      	mov	sp, r7
20000180:	b003      	add	sp, #12
20000182:	bd90      	pop	{r4, r7, pc}
20000184:	40021008 	andmi	r1, r2, r8
20000188:	00005555 	andeq	r5, r0, r5, asr r5

2000018c <ascii_read_data>:

unsigned char ascii_read_data(void){
2000018c:	b590      	push	{r4, r7, lr}
2000018e:	b083      	sub	sp, #12
20000190:	af00      	add	r7, sp, #0
    *(GPIO_E_MODER+0x02) = 0x0000;
20000192:	4b0b      	ldr	r3, [pc, #44]	; (200001c0 <ascii_read_data+0x34>)
20000194:	2200      	movs	r2, #0
20000196:	601a      	str	r2, [r3, #0]
    ascii_ctrl_bit_set(B_RS);
20000198:	2001      	movs	r0, #1
2000019a:	f7ff ff46 	bl	2000002a <ascii_ctrl_bit_set>
    ascii_ctrl_bit_set(B_RW);
2000019e:	2002      	movs	r0, #2
200001a0:	f7ff ff43 	bl	2000002a <ascii_ctrl_bit_set>
    char retData = ascii_read_controller();
200001a4:	1dfc      	adds	r4, r7, #7
200001a6:	f7ff ffb9 	bl	2000011c <ascii_read_controller>
200001aa:	0003      	movs	r3, r0
200001ac:	7023      	strb	r3, [r4, #0]
    *(GPIO_E_MODER+0x02) = 0x5555;
200001ae:	4b04      	ldr	r3, [pc, #16]	; (200001c0 <ascii_read_data+0x34>)
200001b0:	4a04      	ldr	r2, [pc, #16]	; (200001c4 <ascii_read_data+0x38>)
200001b2:	601a      	str	r2, [r3, #0]
    return retData;
200001b4:	1dfb      	adds	r3, r7, #7
200001b6:	781b      	ldrb	r3, [r3, #0]
}
200001b8:	0018      	movs	r0, r3
200001ba:	46bd      	mov	sp, r7
200001bc:	b003      	add	sp, #12
200001be:	bd90      	pop	{r4, r7, pc}
200001c0:	40021008 	andmi	r1, r2, r8
200001c4:	00005555 	andeq	r5, r0, r5, asr r5

200001c8 <clear_display>:

void clear_display(){
200001c8:	b580      	push	{r7, lr}
200001ca:	af00      	add	r7, sp, #0
    while((ascii_read_status() & 0x80) == 0x80){}
200001cc:	46c0      	nop			; (mov r8, r8)
200001ce:	f7ff ffbf 	bl	20000150 <ascii_read_status>
200001d2:	0003      	movs	r3, r0
200001d4:	001a      	movs	r2, r3
200001d6:	2380      	movs	r3, #128	; 0x80
200001d8:	4013      	ands	r3, r2
200001da:	2b80      	cmp	r3, #128	; 0x80
200001dc:	d0f7      	beq.n	200001ce <clear_display+0x6>
    delay_mikro(8);
200001de:	2008      	movs	r0, #8
200001e0:	f000 fbe0 	bl	200009a4 <delay_mikro>
    ascii_write_cmd(1); /*clear display*/
200001e4:	2001      	movs	r0, #1
200001e6:	f7ff ff57 	bl	20000098 <ascii_write_cmd>
    delay_milli(2);
200001ea:	2002      	movs	r0, #2
200001ec:	f000 fbe2 	bl	200009b4 <delay_milli>
}
200001f0:	46c0      	nop			; (mov r8, r8)
200001f2:	46bd      	mov	sp, r7
200001f4:	bd80      	pop	{r7, pc}

200001f6 <funtion_set>:

void funtion_set(){
200001f6:	b580      	push	{r7, lr}
200001f8:	af00      	add	r7, sp, #0
    while((ascii_read_status() & 0x80) == 0x80){}
200001fa:	46c0      	nop			; (mov r8, r8)
200001fc:	f7ff ffa8 	bl	20000150 <ascii_read_status>
20000200:	0003      	movs	r3, r0
20000202:	001a      	movs	r2, r3
20000204:	2380      	movs	r3, #128	; 0x80
20000206:	4013      	ands	r3, r2
20000208:	2b80      	cmp	r3, #128	; 0x80
2000020a:	d0f7      	beq.n	200001fc <funtion_set+0x6>
    delay_mikro(8);
2000020c:	2008      	movs	r0, #8
2000020e:	f000 fbc9 	bl	200009a4 <delay_mikro>
    ascii_write_cmd(0x38); //0b00111000
20000212:	2038      	movs	r0, #56	; 0x38
20000214:	f7ff ff40 	bl	20000098 <ascii_write_cmd>
    delay_mikro(40);
20000218:	2028      	movs	r0, #40	; 0x28
2000021a:	f000 fbc3 	bl	200009a4 <delay_mikro>
}
2000021e:	46c0      	nop			; (mov r8, r8)
20000220:	46bd      	mov	sp, r7
20000222:	bd80      	pop	{r7, pc}

20000224 <display_control>:

void display_control(){
20000224:	b580      	push	{r7, lr}
20000226:	af00      	add	r7, sp, #0
    while((ascii_read_status() & 0x80) == 0x80){}
20000228:	46c0      	nop			; (mov r8, r8)
2000022a:	f7ff ff91 	bl	20000150 <ascii_read_status>
2000022e:	0003      	movs	r3, r0
20000230:	001a      	movs	r2, r3
20000232:	2380      	movs	r3, #128	; 0x80
20000234:	4013      	ands	r3, r2
20000236:	2b80      	cmp	r3, #128	; 0x80
20000238:	d0f7      	beq.n	2000022a <display_control+0x6>
    delay_mikro(8);
2000023a:	2008      	movs	r0, #8
2000023c:	f000 fbb2 	bl	200009a4 <delay_mikro>
    ascii_write_cmd(0xE);
20000240:	200e      	movs	r0, #14
20000242:	f7ff ff29 	bl	20000098 <ascii_write_cmd>
    delay_mikro(40);
20000246:	2028      	movs	r0, #40	; 0x28
20000248:	f000 fbac 	bl	200009a4 <delay_mikro>
}
2000024c:	46c0      	nop			; (mov r8, r8)
2000024e:	46bd      	mov	sp, r7
20000250:	bd80      	pop	{r7, pc}

20000252 <entry_mode_set>:

void entry_mode_set(){
20000252:	b580      	push	{r7, lr}
20000254:	af00      	add	r7, sp, #0
    while((ascii_read_status() & 0x80) == 0x80){}
20000256:	46c0      	nop			; (mov r8, r8)
20000258:	f7ff ff7a 	bl	20000150 <ascii_read_status>
2000025c:	0003      	movs	r3, r0
2000025e:	001a      	movs	r2, r3
20000260:	2380      	movs	r3, #128	; 0x80
20000262:	4013      	ands	r3, r2
20000264:	2b80      	cmp	r3, #128	; 0x80
20000266:	d0f7      	beq.n	20000258 <entry_mode_set+0x6>
    delay_mikro(8);
20000268:	2008      	movs	r0, #8
2000026a:	f000 fb9b 	bl	200009a4 <delay_mikro>
    ascii_write_cmd(6);
2000026e:	2006      	movs	r0, #6
20000270:	f7ff ff12 	bl	20000098 <ascii_write_cmd>
    delay_mikro(40);
20000274:	2028      	movs	r0, #40	; 0x28
20000276:	f000 fb95 	bl	200009a4 <delay_mikro>
}
2000027a:	46c0      	nop			; (mov r8, r8)
2000027c:	46bd      	mov	sp, r7
2000027e:	bd80      	pop	{r7, pc}

20000280 <ascii_write_char>:

void ascii_write_char(unsigned char c){
20000280:	b580      	push	{r7, lr}
20000282:	b082      	sub	sp, #8
20000284:	af00      	add	r7, sp, #0
20000286:	0002      	movs	r2, r0
20000288:	1dfb      	adds	r3, r7, #7
2000028a:	701a      	strb	r2, [r3, #0]
    //while((ascii_read_status() & 0x80) == 0x80){} //Kommentera bort om det ska fungera...
    delay_mikro(8);
2000028c:	2008      	movs	r0, #8
2000028e:	f000 fb89 	bl	200009a4 <delay_mikro>
    ascii_write_data(c);
20000292:	1dfb      	adds	r3, r7, #7
20000294:	781b      	ldrb	r3, [r3, #0]
20000296:	0018      	movs	r0, r3
20000298:	f7ff ff13 	bl	200000c2 <ascii_write_data>
    delay_mikro(45);
2000029c:	202d      	movs	r0, #45	; 0x2d
2000029e:	f000 fb81 	bl	200009a4 <delay_mikro>
}
200002a2:	46c0      	nop			; (mov r8, r8)
200002a4:	46bd      	mov	sp, r7
200002a6:	b002      	add	sp, #8
200002a8:	bd80      	pop	{r7, pc}

200002aa <ascii_gotoxy>:

void ascii_gotoxy(int x, int y){ /**/
200002aa:	b580      	push	{r7, lr}
200002ac:	b084      	sub	sp, #16
200002ae:	af00      	add	r7, sp, #0
200002b0:	6078      	str	r0, [r7, #4]
200002b2:	6039      	str	r1, [r7, #0]
    unsigned char address;
    if(y!=1)
200002b4:	683b      	ldr	r3, [r7, #0]
200002b6:	2b01      	cmp	r3, #1
200002b8:	d006      	beq.n	200002c8 <ascii_gotoxy+0x1e>
        address = 0x40 + (x-1);
200002ba:	687b      	ldr	r3, [r7, #4]
200002bc:	b2da      	uxtb	r2, r3
200002be:	230f      	movs	r3, #15
200002c0:	18fb      	adds	r3, r7, r3
200002c2:	323f      	adds	r2, #63	; 0x3f
200002c4:	701a      	strb	r2, [r3, #0]
200002c6:	e005      	b.n	200002d4 <ascii_gotoxy+0x2a>
    else address=x-1;
200002c8:	687b      	ldr	r3, [r7, #4]
200002ca:	b2da      	uxtb	r2, r3
200002cc:	230f      	movs	r3, #15
200002ce:	18fb      	adds	r3, r7, r3
200002d0:	3a01      	subs	r2, #1
200002d2:	701a      	strb	r2, [r3, #0]
    
    ascii_write_cmd( 0x80 | address);
200002d4:	230f      	movs	r3, #15
200002d6:	18fb      	adds	r3, r7, r3
200002d8:	781b      	ldrb	r3, [r3, #0]
200002da:	2280      	movs	r2, #128	; 0x80
200002dc:	4252      	negs	r2, r2
200002de:	4313      	orrs	r3, r2
200002e0:	b2db      	uxtb	r3, r3
200002e2:	0018      	movs	r0, r3
200002e4:	f7ff fed8 	bl	20000098 <ascii_write_cmd>
    delay_mikro( 45 );
200002e8:	202d      	movs	r0, #45	; 0x2d
200002ea:	f000 fb5b 	bl	200009a4 <delay_mikro>
200002ee:	46c0      	nop			; (mov r8, r8)
200002f0:	46bd      	mov	sp, r7
200002f2:	b004      	add	sp, #16
200002f4:	bd80      	pop	{r7, pc}
200002f6:	46c0      	nop			; (mov r8, r8)

200002f8 <set_object_speed>:

void set_object_speed(POBJECT o, int speedx, int speedy){
200002f8:	b580      	push	{r7, lr}
200002fa:	b084      	sub	sp, #16
200002fc:	af00      	add	r7, sp, #0
200002fe:	60f8      	str	r0, [r7, #12]
20000300:	60b9      	str	r1, [r7, #8]
20000302:	607a      	str	r2, [r7, #4]
    o->dirx = speedx;
20000304:	68fb      	ldr	r3, [r7, #12]
20000306:	68ba      	ldr	r2, [r7, #8]
20000308:	605a      	str	r2, [r3, #4]
    o->diry = speedy;
2000030a:	68fb      	ldr	r3, [r7, #12]
2000030c:	687a      	ldr	r2, [r7, #4]
2000030e:	609a      	str	r2, [r3, #8]
}
20000310:	46c0      	nop			; (mov r8, r8)
20000312:	46bd      	mov	sp, r7
20000314:	b004      	add	sp, #16
20000316:	bd80      	pop	{r7, pc}

20000318 <draw_object>:

void draw_object(POBJECT o){
20000318:	b580      	push	{r7, lr}
2000031a:	b084      	sub	sp, #16
2000031c:	af00      	add	r7, sp, #0
2000031e:	6078      	str	r0, [r7, #4]
    for (int i = 0; i<o->geo->numpoints; i++)
20000320:	2300      	movs	r3, #0
20000322:	60fb      	str	r3, [r7, #12]
20000324:	e01e      	b.n	20000364 <draw_object+0x4c>
        pixel(o->geo->px[i].x+o->posx,o->geo->px[i].y+o->posy);
20000326:	687b      	ldr	r3, [r7, #4]
20000328:	681a      	ldr	r2, [r3, #0]
2000032a:	68fb      	ldr	r3, [r7, #12]
2000032c:	3304      	adds	r3, #4
2000032e:	005b      	lsls	r3, r3, #1
20000330:	18d3      	adds	r3, r2, r3
20000332:	3304      	adds	r3, #4
20000334:	781b      	ldrb	r3, [r3, #0]
20000336:	001a      	movs	r2, r3
20000338:	687b      	ldr	r3, [r7, #4]
2000033a:	68db      	ldr	r3, [r3, #12]
2000033c:	18d3      	adds	r3, r2, r3
2000033e:	0018      	movs	r0, r3
20000340:	687b      	ldr	r3, [r7, #4]
20000342:	681a      	ldr	r2, [r3, #0]
20000344:	68fb      	ldr	r3, [r7, #12]
20000346:	3304      	adds	r3, #4
20000348:	005b      	lsls	r3, r3, #1
2000034a:	18d3      	adds	r3, r2, r3
2000034c:	3305      	adds	r3, #5
2000034e:	781b      	ldrb	r3, [r3, #0]
20000350:	001a      	movs	r2, r3
20000352:	687b      	ldr	r3, [r7, #4]
20000354:	691b      	ldr	r3, [r3, #16]
20000356:	18d3      	adds	r3, r2, r3
20000358:	0019      	movs	r1, r3
2000035a:	f000 fd33 	bl	20000dc4 <pixel>
    for (int i = 0; i<o->geo->numpoints; i++)
2000035e:	68fb      	ldr	r3, [r7, #12]
20000360:	3301      	adds	r3, #1
20000362:	60fb      	str	r3, [r7, #12]
20000364:	687b      	ldr	r3, [r7, #4]
20000366:	681b      	ldr	r3, [r3, #0]
20000368:	681b      	ldr	r3, [r3, #0]
2000036a:	68fa      	ldr	r2, [r7, #12]
2000036c:	429a      	cmp	r2, r3
2000036e:	dbda      	blt.n	20000326 <draw_object+0xe>
        
}
20000370:	46c0      	nop			; (mov r8, r8)
20000372:	46c0      	nop			; (mov r8, r8)
20000374:	46bd      	mov	sp, r7
20000376:	b004      	add	sp, #16
20000378:	bd80      	pop	{r7, pc}

2000037a <clear_object>:

void clear_object(POBJECT o){
2000037a:	b580      	push	{r7, lr}
2000037c:	b084      	sub	sp, #16
2000037e:	af00      	add	r7, sp, #0
20000380:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < o->geo->numpoints; i++)
20000382:	2300      	movs	r3, #0
20000384:	60fb      	str	r3, [r7, #12]
20000386:	e01e      	b.n	200003c6 <clear_object+0x4c>
        pixel(o->geo->px[i].x+o->posx,o->geo->px[i].y+o->posy);
20000388:	687b      	ldr	r3, [r7, #4]
2000038a:	681a      	ldr	r2, [r3, #0]
2000038c:	68fb      	ldr	r3, [r7, #12]
2000038e:	3304      	adds	r3, #4
20000390:	005b      	lsls	r3, r3, #1
20000392:	18d3      	adds	r3, r2, r3
20000394:	3304      	adds	r3, #4
20000396:	781b      	ldrb	r3, [r3, #0]
20000398:	001a      	movs	r2, r3
2000039a:	687b      	ldr	r3, [r7, #4]
2000039c:	68db      	ldr	r3, [r3, #12]
2000039e:	18d3      	adds	r3, r2, r3
200003a0:	0018      	movs	r0, r3
200003a2:	687b      	ldr	r3, [r7, #4]
200003a4:	681a      	ldr	r2, [r3, #0]
200003a6:	68fb      	ldr	r3, [r7, #12]
200003a8:	3304      	adds	r3, #4
200003aa:	005b      	lsls	r3, r3, #1
200003ac:	18d3      	adds	r3, r2, r3
200003ae:	3305      	adds	r3, #5
200003b0:	781b      	ldrb	r3, [r3, #0]
200003b2:	001a      	movs	r2, r3
200003b4:	687b      	ldr	r3, [r7, #4]
200003b6:	691b      	ldr	r3, [r3, #16]
200003b8:	18d3      	adds	r3, r2, r3
200003ba:	0019      	movs	r1, r3
200003bc:	f000 fd02 	bl	20000dc4 <pixel>
    for (int i = 0; i < o->geo->numpoints; i++)
200003c0:	68fb      	ldr	r3, [r7, #12]
200003c2:	3301      	adds	r3, #1
200003c4:	60fb      	str	r3, [r7, #12]
200003c6:	687b      	ldr	r3, [r7, #4]
200003c8:	681b      	ldr	r3, [r3, #0]
200003ca:	681b      	ldr	r3, [r3, #0]
200003cc:	68fa      	ldr	r2, [r7, #12]
200003ce:	429a      	cmp	r2, r3
200003d0:	dbda      	blt.n	20000388 <clear_object+0xe>
        
}
200003d2:	46c0      	nop			; (mov r8, r8)
200003d4:	46c0      	nop			; (mov r8, r8)
200003d6:	46bd      	mov	sp, r7
200003d8:	b004      	add	sp, #16
200003da:	bd80      	pop	{r7, pc}

200003dc <move_object>:

void move_object(POBJECT o){
200003dc:	b580      	push	{r7, lr}
200003de:	b082      	sub	sp, #8
200003e0:	af00      	add	r7, sp, #0
200003e2:	6078      	str	r0, [r7, #4]
    //clear_object(o);
    
    o->posx = o->posx + o->dirx;
200003e4:	687b      	ldr	r3, [r7, #4]
200003e6:	68da      	ldr	r2, [r3, #12]
200003e8:	687b      	ldr	r3, [r7, #4]
200003ea:	685b      	ldr	r3, [r3, #4]
200003ec:	18d2      	adds	r2, r2, r3
200003ee:	687b      	ldr	r3, [r7, #4]
200003f0:	60da      	str	r2, [r3, #12]
    o->posy = o->posy + o->diry;
200003f2:	687b      	ldr	r3, [r7, #4]
200003f4:	691a      	ldr	r2, [r3, #16]
200003f6:	687b      	ldr	r3, [r7, #4]
200003f8:	689b      	ldr	r3, [r3, #8]
200003fa:	18d2      	adds	r2, r2, r3
200003fc:	687b      	ldr	r3, [r7, #4]
200003fe:	611a      	str	r2, [r3, #16]
    
    /*Position static if direction makes ball go out of bounds*/
    //Bounce left wall
    if((o->posx+o->dirx)<1){
20000400:	687b      	ldr	r3, [r7, #4]
20000402:	68da      	ldr	r2, [r3, #12]
20000404:	687b      	ldr	r3, [r7, #4]
20000406:	685b      	ldr	r3, [r3, #4]
20000408:	18d3      	adds	r3, r2, r3
2000040a:	2b00      	cmp	r3, #0
2000040c:	dc07      	bgt.n	2000041e <move_object+0x42>
        o->dirx *= -1;
2000040e:	687b      	ldr	r3, [r7, #4]
20000410:	685b      	ldr	r3, [r3, #4]
20000412:	425a      	negs	r2, r3
20000414:	687b      	ldr	r3, [r7, #4]
20000416:	605a      	str	r2, [r3, #4]
        o->posx = 1;
20000418:	687b      	ldr	r3, [r7, #4]
2000041a:	2201      	movs	r2, #1
2000041c:	60da      	str	r2, [r3, #12]
    }
    //Bounce right wall
    if((o->posx+o->dirx)>128){
2000041e:	687b      	ldr	r3, [r7, #4]
20000420:	68da      	ldr	r2, [r3, #12]
20000422:	687b      	ldr	r3, [r7, #4]
20000424:	685b      	ldr	r3, [r3, #4]
20000426:	18d3      	adds	r3, r2, r3
20000428:	2b80      	cmp	r3, #128	; 0x80
2000042a:	dd07      	ble.n	2000043c <move_object+0x60>
        o->dirx *= -1;
2000042c:	687b      	ldr	r3, [r7, #4]
2000042e:	685b      	ldr	r3, [r3, #4]
20000430:	425a      	negs	r2, r3
20000432:	687b      	ldr	r3, [r7, #4]
20000434:	605a      	str	r2, [r3, #4]
        o->posx=127;
20000436:	687b      	ldr	r3, [r7, #4]
20000438:	227f      	movs	r2, #127	; 0x7f
2000043a:	60da      	str	r2, [r3, #12]
    }
    //bounce upper wall
    if((o->posy+o->diry)<1){
2000043c:	687b      	ldr	r3, [r7, #4]
2000043e:	691a      	ldr	r2, [r3, #16]
20000440:	687b      	ldr	r3, [r7, #4]
20000442:	689b      	ldr	r3, [r3, #8]
20000444:	18d3      	adds	r3, r2, r3
20000446:	2b00      	cmp	r3, #0
20000448:	dc07      	bgt.n	2000045a <move_object+0x7e>
        o->diry *= -1;
2000044a:	687b      	ldr	r3, [r7, #4]
2000044c:	689b      	ldr	r3, [r3, #8]
2000044e:	425a      	negs	r2, r3
20000450:	687b      	ldr	r3, [r7, #4]
20000452:	609a      	str	r2, [r3, #8]
        o->posy = 1;
20000454:	687b      	ldr	r3, [r7, #4]
20000456:	2201      	movs	r2, #1
20000458:	611a      	str	r2, [r3, #16]
    }
    //bounce lower wall
    if((o->posy+o->diry)>64){
2000045a:	687b      	ldr	r3, [r7, #4]
2000045c:	691a      	ldr	r2, [r3, #16]
2000045e:	687b      	ldr	r3, [r7, #4]
20000460:	689b      	ldr	r3, [r3, #8]
20000462:	18d3      	adds	r3, r2, r3
20000464:	2b40      	cmp	r3, #64	; 0x40
20000466:	dd07      	ble.n	20000478 <move_object+0x9c>
        o->diry *= -1;
20000468:	687b      	ldr	r3, [r7, #4]
2000046a:	689b      	ldr	r3, [r3, #8]
2000046c:	425a      	negs	r2, r3
2000046e:	687b      	ldr	r3, [r7, #4]
20000470:	609a      	str	r2, [r3, #8]
        o->posy = 63;
20000472:	687b      	ldr	r3, [r7, #4]
20000474:	223f      	movs	r2, #63	; 0x3f
20000476:	611a      	str	r2, [r3, #16]
    }
    draw_object(o);
20000478:	687b      	ldr	r3, [r7, #4]
2000047a:	0018      	movs	r0, r3
2000047c:	f7ff ff4c 	bl	20000318 <draw_object>
}
20000480:	46c0      	nop			; (mov r8, r8)
20000482:	46bd      	mov	sp, r7
20000484:	b002      	add	sp, #8
20000486:	bd80      	pop	{r7, pc}

20000488 <load_sprite>:
    clear_object,
    move_object,
    set_object_speed
};

static void load_sprite(sprite* s, unsigned char* data, int width, int height){
20000488:	b580      	push	{r7, lr}
2000048a:	b084      	sub	sp, #16
2000048c:	af00      	add	r7, sp, #0
2000048e:	60f8      	str	r0, [r7, #12]
20000490:	60b9      	str	r1, [r7, #8]
20000492:	607a      	str	r2, [r7, #4]
20000494:	603b      	str	r3, [r7, #0]
    s->width = width;
20000496:	687b      	ldr	r3, [r7, #4]
20000498:	b2da      	uxtb	r2, r3
2000049a:	68fb      	ldr	r3, [r7, #12]
2000049c:	701a      	strb	r2, [r3, #0]
    s->height = height;
2000049e:	683b      	ldr	r3, [r7, #0]
200004a0:	b2da      	uxtb	r2, r3
200004a2:	68fb      	ldr	r3, [r7, #12]
200004a4:	705a      	strb	r2, [r3, #1]
    s->data = data;
200004a6:	68fb      	ldr	r3, [r7, #12]
200004a8:	68ba      	ldr	r2, [r7, #8]
200004aa:	605a      	str	r2, [r3, #4]
}
200004ac:	46c0      	nop			; (mov r8, r8)
200004ae:	46bd      	mov	sp, r7
200004b0:	b004      	add	sp, #16
200004b2:	bd80      	pop	{r7, pc}

200004b4 <draw_sprite>:

void draw_sprite(sprite* s, int x, int y){
200004b4:	b580      	push	{r7, lr}
200004b6:	b08a      	sub	sp, #40	; 0x28
200004b8:	af00      	add	r7, sp, #0
200004ba:	60f8      	str	r0, [r7, #12]
200004bc:	60b9      	str	r1, [r7, #8]
200004be:	607a      	str	r2, [r7, #4]
    int i,j,k, width_in_bytes;
    
    if(s->width % 8 == 0){
200004c0:	68fb      	ldr	r3, [r7, #12]
200004c2:	781b      	ldrb	r3, [r3, #0]
200004c4:	2207      	movs	r2, #7
200004c6:	4013      	ands	r3, r2
200004c8:	b2db      	uxtb	r3, r3
200004ca:	2b00      	cmp	r3, #0
200004cc:	d105      	bne.n	200004da <draw_sprite+0x26>
        width_in_bytes = s->width/8;
200004ce:	68fb      	ldr	r3, [r7, #12]
200004d0:	781b      	ldrb	r3, [r3, #0]
200004d2:	08db      	lsrs	r3, r3, #3
200004d4:	b2db      	uxtb	r3, r3
200004d6:	61bb      	str	r3, [r7, #24]
200004d8:	e005      	b.n	200004e6 <draw_sprite+0x32>
    }else{
        width_in_bytes = s->width/8 + 1;
200004da:	68fb      	ldr	r3, [r7, #12]
200004dc:	781b      	ldrb	r3, [r3, #0]
200004de:	08db      	lsrs	r3, r3, #3
200004e0:	b2db      	uxtb	r3, r3
200004e2:	3301      	adds	r3, #1
200004e4:	61bb      	str	r3, [r7, #24]
    }
    
    for (i = 0; i < s->height; i++){
200004e6:	2300      	movs	r3, #0
200004e8:	627b      	str	r3, [r7, #36]	; 0x24
200004ea:	e039      	b.n	20000560 <draw_sprite+0xac>
        for (j = 0; j < width_in_bytes; j++){
200004ec:	2300      	movs	r3, #0
200004ee:	623b      	str	r3, [r7, #32]
200004f0:	e02f      	b.n	20000552 <draw_sprite+0x9e>
            unsigned char byte = s->data[i*width_in_bytes +j];
200004f2:	68fb      	ldr	r3, [r7, #12]
200004f4:	685b      	ldr	r3, [r3, #4]
200004f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
200004f8:	69b9      	ldr	r1, [r7, #24]
200004fa:	4351      	muls	r1, r2
200004fc:	6a3a      	ldr	r2, [r7, #32]
200004fe:	188a      	adds	r2, r1, r2
20000500:	189a      	adds	r2, r3, r2
20000502:	2317      	movs	r3, #23
20000504:	18fb      	adds	r3, r7, r3
20000506:	7812      	ldrb	r2, [r2, #0]
20000508:	701a      	strb	r2, [r3, #0]
            for (k = 0; k < 8; k++){
2000050a:	2300      	movs	r3, #0
2000050c:	61fb      	str	r3, [r7, #28]
2000050e:	e01a      	b.n	20000546 <draw_sprite+0x92>
                if (byte & (1<<k))
20000510:	2317      	movs	r3, #23
20000512:	18fb      	adds	r3, r7, r3
20000514:	781a      	ldrb	r2, [r3, #0]
20000516:	69fb      	ldr	r3, [r7, #28]
20000518:	411a      	asrs	r2, r3
2000051a:	0013      	movs	r3, r2
2000051c:	2201      	movs	r2, #1
2000051e:	4013      	ands	r3, r2
20000520:	d00e      	beq.n	20000540 <draw_sprite+0x8c>
                    pixel(8 * j + k + x + 1, i + y + 1);
20000522:	6a3b      	ldr	r3, [r7, #32]
20000524:	00da      	lsls	r2, r3, #3
20000526:	69fb      	ldr	r3, [r7, #28]
20000528:	18d2      	adds	r2, r2, r3
2000052a:	68bb      	ldr	r3, [r7, #8]
2000052c:	18d3      	adds	r3, r2, r3
2000052e:	3301      	adds	r3, #1
20000530:	0018      	movs	r0, r3
20000532:	6a7a      	ldr	r2, [r7, #36]	; 0x24
20000534:	687b      	ldr	r3, [r7, #4]
20000536:	18d3      	adds	r3, r2, r3
20000538:	3301      	adds	r3, #1
2000053a:	0019      	movs	r1, r3
2000053c:	f000 fc42 	bl	20000dc4 <pixel>
            for (k = 0; k < 8; k++){
20000540:	69fb      	ldr	r3, [r7, #28]
20000542:	3301      	adds	r3, #1
20000544:	61fb      	str	r3, [r7, #28]
20000546:	69fb      	ldr	r3, [r7, #28]
20000548:	2b07      	cmp	r3, #7
2000054a:	dde1      	ble.n	20000510 <draw_sprite+0x5c>
        for (j = 0; j < width_in_bytes; j++){
2000054c:	6a3b      	ldr	r3, [r7, #32]
2000054e:	3301      	adds	r3, #1
20000550:	623b      	str	r3, [r7, #32]
20000552:	6a3a      	ldr	r2, [r7, #32]
20000554:	69bb      	ldr	r3, [r7, #24]
20000556:	429a      	cmp	r2, r3
20000558:	dbcb      	blt.n	200004f2 <draw_sprite+0x3e>
    for (i = 0; i < s->height; i++){
2000055a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2000055c:	3301      	adds	r3, #1
2000055e:	627b      	str	r3, [r7, #36]	; 0x24
20000560:	68fb      	ldr	r3, [r7, #12]
20000562:	785b      	ldrb	r3, [r3, #1]
20000564:	001a      	movs	r2, r3
20000566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20000568:	4293      	cmp	r3, r2
2000056a:	dbbf      	blt.n	200004ec <draw_sprite+0x38>
            }
        }
    }
}
2000056c:	46c0      	nop			; (mov r8, r8)
2000056e:	46c0      	nop			; (mov r8, r8)
20000570:	46bd      	mov	sp, r7
20000572:	b00a      	add	sp, #40	; 0x28
20000574:	bd80      	pop	{r7, pc}

20000576 <draw_snake>:

void draw_snake(POBJECT h){
20000576:	b580      	push	{r7, lr}
20000578:	b084      	sub	sp, #16
2000057a:	af00      	add	r7, sp, #0
2000057c:	6078      	str	r0, [r7, #4]
    h->move(h);
2000057e:	687b      	ldr	r3, [r7, #4]
20000580:	69db      	ldr	r3, [r3, #28]
20000582:	687a      	ldr	r2, [r7, #4]
20000584:	0010      	movs	r0, r2
20000586:	4798      	blx	r3
    POBJECT b = peek();
20000588:	f000 fcc6 	bl	20000f18 <peek>
2000058c:	0003      	movs	r3, r0
2000058e:	60fb      	str	r3, [r7, #12]
    while (!isEmpty()){
20000590:	e006      	b.n	200005a0 <draw_snake+0x2a>
        b->move(b);
20000592:	68fb      	ldr	r3, [r7, #12]
20000594:	69db      	ldr	r3, [r3, #28]
20000596:	68fa      	ldr	r2, [r7, #12]
20000598:	0010      	movs	r0, r2
2000059a:	4798      	blx	r3
        remove();
2000059c:	f000 fd24 	bl	20000fe8 <remove>
    while (!isEmpty()){
200005a0:	f000 fcc8 	bl	20000f34 <isEmpty>
200005a4:	0003      	movs	r3, r0
200005a6:	001a      	movs	r2, r3
200005a8:	2301      	movs	r3, #1
200005aa:	4053      	eors	r3, r2
200005ac:	b2db      	uxtb	r3, r3
200005ae:	2b00      	cmp	r3, #0
200005b0:	d1ef      	bne.n	20000592 <draw_snake+0x1c>
    }
}
200005b2:	46c0      	nop			; (mov r8, r8)
200005b4:	46c0      	nop			; (mov r8, r8)
200005b6:	46bd      	mov	sp, r7
200005b8:	b004      	add	sp, #16
200005ba:	bd80      	pop	{r7, pc}

200005bc <init_app>:

static volatile int points;

void init_app(void){/**/
200005bc:	b580      	push	{r7, lr}
200005be:	af00      	add	r7, sp, #0
        /*starta klockor på port D & E*/
        * ( (unsigned long *) 0x40023830) = 0x18;
        __asm volatile("  LDR R0,=0x08000209\n BLX R0 \n");
    #endif
    
    *GPIO_E_MODER = 0x55555555;
200005c0:	4b11      	ldr	r3, [pc, #68]	; (20000608 <init_app+0x4c>)
200005c2:	4a12      	ldr	r2, [pc, #72]	; (2000060c <init_app+0x50>)
200005c4:	601a      	str	r2, [r3, #0]
    *GPIO_E_OTYPER = 0x00000000;
200005c6:	4b12      	ldr	r3, [pc, #72]	; (20000610 <init_app+0x54>)
200005c8:	2200      	movs	r2, #0
200005ca:	801a      	strh	r2, [r3, #0]
    *GPIO_E_OSPEEDR = 0x00000000;
200005cc:	4b11      	ldr	r3, [pc, #68]	; (20000614 <init_app+0x58>)
200005ce:	2200      	movs	r2, #0
200005d0:	601a      	str	r2, [r3, #0]
    
    *GPIO_D_MODER = 0;
200005d2:	4b11      	ldr	r3, [pc, #68]	; (20000618 <init_app+0x5c>)
200005d4:	2200      	movs	r2, #0
200005d6:	601a      	str	r2, [r3, #0]
    *GPIO_D_MODER = 0x55000000;
200005d8:	4b0f      	ldr	r3, [pc, #60]	; (20000618 <init_app+0x5c>)
200005da:	22aa      	movs	r2, #170	; 0xaa
200005dc:	05d2      	lsls	r2, r2, #23
200005de:	601a      	str	r2, [r3, #0]
    *GPIO_D_PUPDR = 0;
200005e0:	4b0e      	ldr	r3, [pc, #56]	; (2000061c <init_app+0x60>)
200005e2:	2200      	movs	r2, #0
200005e4:	601a      	str	r2, [r3, #0]
    *GPIO_D_PUPDR |= 0xAA000000;
200005e6:	4b0d      	ldr	r3, [pc, #52]	; (2000061c <init_app+0x60>)
200005e8:	681a      	ldr	r2, [r3, #0]
200005ea:	4b0c      	ldr	r3, [pc, #48]	; (2000061c <init_app+0x60>)
200005ec:	21aa      	movs	r1, #170	; 0xaa
200005ee:	0609      	lsls	r1, r1, #24
200005f0:	430a      	orrs	r2, r1
200005f2:	601a      	str	r2, [r3, #0]
    *GPIO_D_OTYPER = 0;
200005f4:	4b0a      	ldr	r3, [pc, #40]	; (20000620 <init_app+0x64>)
200005f6:	2200      	movs	r2, #0
200005f8:	801a      	strh	r2, [r3, #0]
    
    points = 0;
200005fa:	4b0a      	ldr	r3, [pc, #40]	; (20000624 <init_app+0x68>)
200005fc:	2200      	movs	r2, #0
200005fe:	601a      	str	r2, [r3, #0]
}
20000600:	46c0      	nop			; (mov r8, r8)
20000602:	46bd      	mov	sp, r7
20000604:	bd80      	pop	{r7, pc}
20000606:	46c0      	nop			; (mov r8, r8)
20000608:	40021000 	andmi	r1, r2, r0
2000060c:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab
20000610:	40021004 	andmi	r1, r2, r4
20000614:	40021008 	andmi	r1, r2, r8
20000618:	40020c00 	andmi	r0, r2, r0, lsl #24
2000061c:	40020c0c 	andmi	r0, r2, ip, lsl #24
20000620:	40020c04 	andmi	r0, r2, r4, lsl #24
20000624:	2000214c 	andcs	r2, r0, ip, asr #2

20000628 <init_snake>:

void init_snake(POBJECT h, POBJECT *b, OBJECT *s){
20000628:	b580      	push	{r7, lr}
2000062a:	b086      	sub	sp, #24
2000062c:	af00      	add	r7, sp, #0
2000062e:	60f8      	str	r0, [r7, #12]
20000630:	60b9      	str	r1, [r7, #8]
20000632:	607a      	str	r2, [r7, #4]
    h->posx = 16;
20000634:	68fb      	ldr	r3, [r7, #12]
20000636:	2210      	movs	r2, #16
20000638:	60da      	str	r2, [r3, #12]
    h->posy = 1;
2000063a:	68fb      	ldr	r3, [r7, #12]
2000063c:	2201      	movs	r2, #1
2000063e:	611a      	str	r2, [r3, #16]
    for (int i = 0; i < 3; i++){
20000640:	2300      	movs	r3, #0
20000642:	617b      	str	r3, [r7, #20]
20000644:	e01a      	b.n	2000067c <init_snake+0x54>
        *b = &(*s);
20000646:	68bb      	ldr	r3, [r7, #8]
20000648:	687a      	ldr	r2, [r7, #4]
2000064a:	601a      	str	r2, [r3, #0]
        (*b)->posx = (i+1)*4;
2000064c:	697b      	ldr	r3, [r7, #20]
2000064e:	1c5a      	adds	r2, r3, #1
20000650:	68bb      	ldr	r3, [r7, #8]
20000652:	681b      	ldr	r3, [r3, #0]
20000654:	0092      	lsls	r2, r2, #2
20000656:	60da      	str	r2, [r3, #12]
        (*b)->posy = 1;
20000658:	68bb      	ldr	r3, [r7, #8]
2000065a:	681b      	ldr	r3, [r3, #0]
2000065c:	2201      	movs	r2, #1
2000065e:	611a      	str	r2, [r3, #16]
        insert(*b);
20000660:	68bb      	ldr	r3, [r7, #8]
20000662:	681b      	ldr	r3, [r3, #0]
20000664:	0018      	movs	r0, r3
20000666:	f000 fc8d 	bl	20000f84 <insert>
        *b++;
2000066a:	68bb      	ldr	r3, [r7, #8]
2000066c:	3304      	adds	r3, #4
2000066e:	60bb      	str	r3, [r7, #8]
        *s++;
20000670:	687b      	ldr	r3, [r7, #4]
20000672:	3324      	adds	r3, #36	; 0x24
20000674:	607b      	str	r3, [r7, #4]
    for (int i = 0; i < 3; i++){
20000676:	697b      	ldr	r3, [r7, #20]
20000678:	3301      	adds	r3, #1
2000067a:	617b      	str	r3, [r7, #20]
2000067c:	697b      	ldr	r3, [r7, #20]
2000067e:	2b02      	cmp	r3, #2
20000680:	dde1      	ble.n	20000646 <init_snake+0x1e>
    }
}
20000682:	46c0      	nop			; (mov r8, r8)
20000684:	46c0      	nop			; (mov r8, r8)
20000686:	46bd      	mov	sp, r7
20000688:	b006      	add	sp, #24
2000068a:	bd80      	pop	{r7, pc}

2000068c <restart_game>:

void restart_game(POBJECT p){
2000068c:	b580      	push	{r7, lr}
2000068e:	b082      	sub	sp, #8
20000690:	af00      	add	r7, sp, #0
20000692:	6078      	str	r0, [r7, #4]
        clear_backbuffer();
20000694:	f000 fb7b 	bl	20000d8e <clear_backbuffer>
        graphic_draw_screen();
20000698:	f000 fbd6 	bl	20000e48 <graphic_draw_screen>
        /*p->set_speed(p,0,0);§
        p->posx = 0;
        p->posy = 0;
        */
}
2000069c:	46c0      	nop			; (mov r8, r8)
2000069e:	46bd      	mov	sp, r7
200006a0:	b002      	add	sp, #8
200006a2:	bd80      	pop	{r7, pc}

200006a4 <main>:
/*QUEUE is FIFO*/
void main(int argc, char **argv){
200006a4:	b5b0      	push	{r4, r5, r7, lr}
200006a6:	4c4b      	ldr	r4, [pc, #300]	; (200007d4 <main+0x130>)
200006a8:	44a5      	add	sp, r4
200006aa:	af00      	add	r7, sp, #0
200006ac:	6078      	str	r0, [r7, #4]
200006ae:	6039      	str	r1, [r7, #0]
    int game = 1, restart = 2;
200006b0:	2301      	movs	r3, #1
200006b2:	4a49      	ldr	r2, [pc, #292]	; (200007d8 <main+0x134>)
200006b4:	18ba      	adds	r2, r7, r2
200006b6:	6013      	str	r3, [r2, #0]
200006b8:	2302      	movs	r3, #2
200006ba:	2281      	movs	r2, #129	; 0x81
200006bc:	0112      	lsls	r2, r2, #4
200006be:	18ba      	adds	r2, r7, r2
200006c0:	6013      	str	r3, [r2, #0]
    char key_stroke;
        
    POBJECT head = &snakehead, food = &food_obj;
200006c2:	4b46      	ldr	r3, [pc, #280]	; (200007dc <main+0x138>)
200006c4:	4a46      	ldr	r2, [pc, #280]	; (200007e0 <main+0x13c>)
200006c6:	18ba      	adds	r2, r7, r2
200006c8:	6013      	str	r3, [r2, #0]
200006ca:	4b46      	ldr	r3, [pc, #280]	; (200007e4 <main+0x140>)
200006cc:	4a46      	ldr	r2, [pc, #280]	; (200007e8 <main+0x144>)
200006ce:	18ba      	adds	r2, r7, r2
200006d0:	6013      	str	r3, [r2, #0]
    POBJECT body[510];
    
    init_app();
200006d2:	f7ff ff73 	bl	200005bc <init_app>
    graphic_init();
200006d6:	f000 f98d 	bl	200009f4 <graphic_init>
    
    while(game){
200006da:	e06f      	b.n	200007bc <main+0x118>
        //load_sprite(&s , image_bits, image_width, image_height);
        //draw_sprite(&s, 20, 20);
        
        //while(keyb() != 5){}
        
        if(restart == 2){
200006dc:	2481      	movs	r4, #129	; 0x81
200006de:	0124      	lsls	r4, r4, #4
200006e0:	193b      	adds	r3, r7, r4
200006e2:	681b      	ldr	r3, [r3, #0]
200006e4:	2b02      	cmp	r3, #2
200006e6:	d162      	bne.n	200007ae <main+0x10a>
            init_snake(head, body, snakebody);
200006e8:	4a40      	ldr	r2, [pc, #256]	; (200007ec <main+0x148>)
200006ea:	230c      	movs	r3, #12
200006ec:	18f9      	adds	r1, r7, r3
200006ee:	4d3c      	ldr	r5, [pc, #240]	; (200007e0 <main+0x13c>)
200006f0:	197b      	adds	r3, r7, r5
200006f2:	681b      	ldr	r3, [r3, #0]
200006f4:	0018      	movs	r0, r3
200006f6:	f7ff ff97 	bl	20000628 <init_snake>
            restart_game(head);
200006fa:	197b      	adds	r3, r7, r5
200006fc:	681b      	ldr	r3, [r3, #0]
200006fe:	0018      	movs	r0, r3
20000700:	f7ff ffc4 	bl	2000068c <restart_game>
            restart = 1;
20000704:	2301      	movs	r3, #1
20000706:	193a      	adds	r2, r7, r4
20000708:	6013      	str	r3, [r2, #0]
        }

        while(restart == 1){
2000070a:	e050      	b.n	200007ae <main+0x10a>
            clear_backbuffer();
2000070c:	f000 fb3f 	bl	20000d8e <clear_backbuffer>
            //graphic_draw_screen();
            /*KOD HÄR*/
            
            draw_snake(head);
20000710:	4b33      	ldr	r3, [pc, #204]	; (200007e0 <main+0x13c>)
20000712:	18fb      	adds	r3, r7, r3
20000714:	681b      	ldr	r3, [r3, #0]
20000716:	0018      	movs	r0, r3
20000718:	f7ff ff2d 	bl	20000576 <draw_snake>
                        
            graphic_draw_screen();
2000071c:	f000 fb94 	bl	20000e48 <graphic_draw_screen>

            //delay_milli(40);
            key_stroke = keyb();
20000720:	4d33      	ldr	r5, [pc, #204]	; (200007f0 <main+0x14c>)
20000722:	197c      	adds	r4, r7, r5
20000724:	f000 f8f0 	bl	20000908 <keyb>
20000728:	0003      	movs	r3, r0
2000072a:	7023      	strb	r3, [r4, #0]
            switch(key_stroke){
2000072c:	197b      	adds	r3, r7, r5
2000072e:	781b      	ldrb	r3, [r3, #0]
20000730:	2b0d      	cmp	r3, #13
20000732:	d83d      	bhi.n	200007b0 <main+0x10c>
20000734:	009a      	lsls	r2, r3, #2
20000736:	4b2f      	ldr	r3, [pc, #188]	; (200007f4 <main+0x150>)
20000738:	18d3      	adds	r3, r2, r3
2000073a:	681b      	ldr	r3, [r3, #0]
2000073c:	469f      	mov	pc, r3
                case RIGHT: turn(RIGHT, head, body); break; /*dirx = +, diry = 0*/
2000073e:	230c      	movs	r3, #12
20000740:	18fa      	adds	r2, r7, r3
20000742:	4b27      	ldr	r3, [pc, #156]	; (200007e0 <main+0x13c>)
20000744:	18fb      	adds	r3, r7, r3
20000746:	681b      	ldr	r3, [r3, #0]
20000748:	0019      	movs	r1, r3
2000074a:	2006      	movs	r0, #6
2000074c:	f000 f856 	bl	200007fc <turn>
20000750:	e02e      	b.n	200007b0 <main+0x10c>
                case LEFT: turn(LEFT, head, body); break; /*dirx = -, diry = 0*/
20000752:	230c      	movs	r3, #12
20000754:	18fa      	adds	r2, r7, r3
20000756:	4b22      	ldr	r3, [pc, #136]	; (200007e0 <main+0x13c>)
20000758:	18fb      	adds	r3, r7, r3
2000075a:	681b      	ldr	r3, [r3, #0]
2000075c:	0019      	movs	r1, r3
2000075e:	2004      	movs	r0, #4
20000760:	f000 f84c 	bl	200007fc <turn>
20000764:	e024      	b.n	200007b0 <main+0x10c>
                case UP: turn(UP, head, body); break; /*dirx = 0, diry = -*/
20000766:	230c      	movs	r3, #12
20000768:	18fa      	adds	r2, r7, r3
2000076a:	4b1d      	ldr	r3, [pc, #116]	; (200007e0 <main+0x13c>)
2000076c:	18fb      	adds	r3, r7, r3
2000076e:	681b      	ldr	r3, [r3, #0]
20000770:	0019      	movs	r1, r3
20000772:	2002      	movs	r0, #2
20000774:	f000 f842 	bl	200007fc <turn>
20000778:	e01a      	b.n	200007b0 <main+0x10c>
                case DOWN: turn(DOWN, head, body); break; /*dirx = 0, diry = +*/
2000077a:	230c      	movs	r3, #12
2000077c:	18fa      	adds	r2, r7, r3
2000077e:	4b18      	ldr	r3, [pc, #96]	; (200007e0 <main+0x13c>)
20000780:	18fb      	adds	r3, r7, r3
20000782:	681b      	ldr	r3, [r3, #0]
20000784:	0019      	movs	r1, r3
20000786:	2008      	movs	r0, #8
20000788:	f000 f838 	bl	200007fc <turn>
2000078c:	e010      	b.n	200007b0 <main+0x10c>
                case QUIT: game = 0; restart = 0; break;
2000078e:	2300      	movs	r3, #0
20000790:	4a11      	ldr	r2, [pc, #68]	; (200007d8 <main+0x134>)
20000792:	18ba      	adds	r2, r7, r2
20000794:	6013      	str	r3, [r2, #0]
20000796:	2300      	movs	r3, #0
20000798:	2281      	movs	r2, #129	; 0x81
2000079a:	0112      	lsls	r2, r2, #4
2000079c:	18ba      	adds	r2, r7, r2
2000079e:	6013      	str	r3, [r2, #0]
200007a0:	e006      	b.n	200007b0 <main+0x10c>
                case RESTART: restart = 2; break;
200007a2:	2302      	movs	r3, #2
200007a4:	2281      	movs	r2, #129	; 0x81
200007a6:	0112      	lsls	r2, r2, #4
200007a8:	18ba      	adds	r2, r7, r2
200007aa:	6013      	str	r3, [r2, #0]
200007ac:	e000      	b.n	200007b0 <main+0x10c>
        while(restart == 1){
200007ae:	46c0      	nop			; (mov r8, r8)
200007b0:	2381      	movs	r3, #129	; 0x81
200007b2:	011b      	lsls	r3, r3, #4
200007b4:	18fb      	adds	r3, r7, r3
200007b6:	681b      	ldr	r3, [r3, #0]
200007b8:	2b01      	cmp	r3, #1
200007ba:	d0a7      	beq.n	2000070c <main+0x68>
    while(game){
200007bc:	4b06      	ldr	r3, [pc, #24]	; (200007d8 <main+0x134>)
200007be:	18fb      	adds	r3, r7, r3
200007c0:	681b      	ldr	r3, [r3, #0]
200007c2:	2b00      	cmp	r3, #0
200007c4:	d18a      	bne.n	200006dc <main+0x38>
            }
        }
    }
}
200007c6:	46c0      	nop			; (mov r8, r8)
200007c8:	46c0      	nop			; (mov r8, r8)
200007ca:	46bd      	mov	sp, r7
200007cc:	4b0a      	ldr	r3, [pc, #40]	; (200007f8 <main+0x154>)
200007ce:	449d      	add	sp, r3
200007d0:	bdb0      	pop	{r4, r5, r7, pc}
200007d2:	46c0      	nop			; (mov r8, r8)
200007d4:	fffff7e8 			; <UNDEFINED> instruction: 0xfffff7e8
200007d8:	00000814 	andeq	r0, r0, r4, lsl r8
200007dc:	200039e8 	andcs	r3, r0, r8, ror #19
200007e0:	0000080c 	andeq	r0, r0, ip, lsl #16
200007e4:	200081c4 	andcs	r8, r0, r4, asr #3
200007e8:	00000808 	andeq	r0, r0, r8, lsl #16
200007ec:	20003a0c 	andcs	r3, r0, ip, lsl #20
200007f0:	00000807 	andeq	r0, r0, r7, lsl #16
200007f4:	200081ec 	andcs	r8, r0, ip, ror #3
200007f8:	00000818 	andeq	r0, r0, r8, lsl r8

200007fc <turn>:

void turn(int dir, POBJECT h ,POBJECT *b){
200007fc:	b580      	push	{r7, lr}
200007fe:	b084      	sub	sp, #16
20000800:	af00      	add	r7, sp, #0
20000802:	60f8      	str	r0, [r7, #12]
20000804:	60b9      	str	r1, [r7, #8]
20000806:	607a      	str	r2, [r7, #4]
    switch(dir){
20000808:	68fb      	ldr	r3, [r7, #12]
2000080a:	2b08      	cmp	r3, #8
2000080c:	d032      	beq.n	20000874 <turn+0x78>
2000080e:	68fb      	ldr	r3, [r7, #12]
20000810:	2b08      	cmp	r3, #8
20000812:	dc41      	bgt.n	20000898 <turn+0x9c>
20000814:	68fb      	ldr	r3, [r7, #12]
20000816:	2b06      	cmp	r3, #6
20000818:	d009      	beq.n	2000082e <turn+0x32>
2000081a:	68fb      	ldr	r3, [r7, #12]
2000081c:	2b06      	cmp	r3, #6
2000081e:	dc3b      	bgt.n	20000898 <turn+0x9c>
20000820:	68fb      	ldr	r3, [r7, #12]
20000822:	2b02      	cmp	r3, #2
20000824:	d01a      	beq.n	2000085c <turn+0x60>
20000826:	68fb      	ldr	r3, [r7, #12]
20000828:	2b04      	cmp	r3, #4
2000082a:	d00b      	beq.n	20000844 <turn+0x48>
                h->set_speed(h,0,4);
                
            }
            break;
    }
}
2000082c:	e034      	b.n	20000898 <turn+0x9c>
            if(h->dirx == 0){
2000082e:	68bb      	ldr	r3, [r7, #8]
20000830:	685b      	ldr	r3, [r3, #4]
20000832:	2b00      	cmp	r3, #0
20000834:	d129      	bne.n	2000088a <turn+0x8e>
                h->set_speed(h,4,0);
20000836:	68bb      	ldr	r3, [r7, #8]
20000838:	6a1b      	ldr	r3, [r3, #32]
2000083a:	68b8      	ldr	r0, [r7, #8]
2000083c:	2200      	movs	r2, #0
2000083e:	2104      	movs	r1, #4
20000840:	4798      	blx	r3
            break;
20000842:	e022      	b.n	2000088a <turn+0x8e>
            if(h->dirx == 0){
20000844:	68bb      	ldr	r3, [r7, #8]
20000846:	685b      	ldr	r3, [r3, #4]
20000848:	2b00      	cmp	r3, #0
2000084a:	d120      	bne.n	2000088e <turn+0x92>
                h->set_speed(h,-4,0);
2000084c:	68bb      	ldr	r3, [r7, #8]
2000084e:	6a1b      	ldr	r3, [r3, #32]
20000850:	2204      	movs	r2, #4
20000852:	4251      	negs	r1, r2
20000854:	68b8      	ldr	r0, [r7, #8]
20000856:	2200      	movs	r2, #0
20000858:	4798      	blx	r3
            break;
2000085a:	e018      	b.n	2000088e <turn+0x92>
            if(h->diry == 0){
2000085c:	68bb      	ldr	r3, [r7, #8]
2000085e:	689b      	ldr	r3, [r3, #8]
20000860:	2b00      	cmp	r3, #0
20000862:	d116      	bne.n	20000892 <turn+0x96>
                h->set_speed(h,0,-4);
20000864:	68bb      	ldr	r3, [r7, #8]
20000866:	6a1b      	ldr	r3, [r3, #32]
20000868:	2204      	movs	r2, #4
2000086a:	4252      	negs	r2, r2
2000086c:	68b8      	ldr	r0, [r7, #8]
2000086e:	2100      	movs	r1, #0
20000870:	4798      	blx	r3
            break;
20000872:	e00e      	b.n	20000892 <turn+0x96>
            if(h->diry == 0){
20000874:	68bb      	ldr	r3, [r7, #8]
20000876:	689b      	ldr	r3, [r3, #8]
20000878:	2b00      	cmp	r3, #0
2000087a:	d10c      	bne.n	20000896 <turn+0x9a>
                h->set_speed(h,0,4);
2000087c:	68bb      	ldr	r3, [r7, #8]
2000087e:	6a1b      	ldr	r3, [r3, #32]
20000880:	68b8      	ldr	r0, [r7, #8]
20000882:	2204      	movs	r2, #4
20000884:	2100      	movs	r1, #0
20000886:	4798      	blx	r3
            break;
20000888:	e005      	b.n	20000896 <turn+0x9a>
            break;
2000088a:	46c0      	nop			; (mov r8, r8)
2000088c:	e004      	b.n	20000898 <turn+0x9c>
            break;
2000088e:	46c0      	nop			; (mov r8, r8)
20000890:	e002      	b.n	20000898 <turn+0x9c>
            break;
20000892:	46c0      	nop			; (mov r8, r8)
20000894:	e000      	b.n	20000898 <turn+0x9c>
            break;
20000896:	46c0      	nop			; (mov r8, r8)
}
20000898:	46c0      	nop			; (mov r8, r8)
2000089a:	46bd      	mov	sp, r7
2000089c:	b004      	add	sp, #16
2000089e:	bd80      	pop	{r7, pc}

200008a0 <activate_row>:
#include <defines.h>
#include <keyb.h>

void activate_row(int i){
200008a0:	b580      	push	{r7, lr}
200008a2:	b082      	sub	sp, #8
200008a4:	af00      	add	r7, sp, #0
200008a6:	6078      	str	r0, [r7, #4]
    *GPIO_D_ODR_HIGH = 1 << (i+4);
200008a8:	687b      	ldr	r3, [r7, #4]
200008aa:	3304      	adds	r3, #4
200008ac:	2201      	movs	r2, #1
200008ae:	409a      	lsls	r2, r3
200008b0:	4b03      	ldr	r3, [pc, #12]	; (200008c0 <activate_row+0x20>)
200008b2:	b2d2      	uxtb	r2, r2
200008b4:	701a      	strb	r2, [r3, #0]
}
200008b6:	46c0      	nop			; (mov r8, r8)
200008b8:	46bd      	mov	sp, r7
200008ba:	b002      	add	sp, #8
200008bc:	bd80      	pop	{r7, pc}
200008be:	46c0      	nop			; (mov r8, r8)
200008c0:	40020c15 	andmi	r0, r2, r5, lsl ip

200008c4 <read_coloumn>:

int read_coloumn(){
200008c4:	b580      	push	{r7, lr}
200008c6:	b082      	sub	sp, #8
200008c8:	af00      	add	r7, sp, #0
    int j; 
    char input = *GPIO_D_IDR_HIGH;
200008ca:	4a0e      	ldr	r2, [pc, #56]	; (20000904 <read_coloumn+0x40>)
200008cc:	1cfb      	adds	r3, r7, #3
200008ce:	7812      	ldrb	r2, [r2, #0]
200008d0:	701a      	strb	r2, [r3, #0]
    for(j = 0; j<4 ; j++){
200008d2:	2300      	movs	r3, #0
200008d4:	607b      	str	r3, [r7, #4]
200008d6:	e00c      	b.n	200008f2 <read_coloumn+0x2e>
        if (input&(1<<j)){
200008d8:	1cfb      	adds	r3, r7, #3
200008da:	781a      	ldrb	r2, [r3, #0]
200008dc:	687b      	ldr	r3, [r7, #4]
200008de:	411a      	asrs	r2, r3
200008e0:	0013      	movs	r3, r2
200008e2:	2201      	movs	r2, #1
200008e4:	4013      	ands	r3, r2
200008e6:	d001      	beq.n	200008ec <read_coloumn+0x28>
            return j;
200008e8:	687b      	ldr	r3, [r7, #4]
200008ea:	e007      	b.n	200008fc <read_coloumn+0x38>
    for(j = 0; j<4 ; j++){
200008ec:	687b      	ldr	r3, [r7, #4]
200008ee:	3301      	adds	r3, #1
200008f0:	607b      	str	r3, [r7, #4]
200008f2:	687b      	ldr	r3, [r7, #4]
200008f4:	2b03      	cmp	r3, #3
200008f6:	ddef      	ble.n	200008d8 <read_coloumn+0x14>
        }
    }
    return -1;
200008f8:	2301      	movs	r3, #1
200008fa:	425b      	negs	r3, r3
}
200008fc:	0018      	movs	r0, r3
200008fe:	46bd      	mov	sp, r7
20000900:	b002      	add	sp, #8
20000902:	bd80      	pop	{r7, pc}
20000904:	40020c11 	andmi	r0, r2, r1, lsl ip

20000908 <keyb>:

/*rader in, kolumner ut*/
unsigned char keyb(void){
20000908:	b590      	push	{r4, r7, lr}
2000090a:	b08b      	sub	sp, #44	; 0x2c
2000090c:	af00      	add	r7, sp, #0
    unsigned char key_value[] = {0x06,0x5B,0x4F,0x77,0x66,0x6D,0x7D,0x7C,0x07,0x7F,0x6F,0x39,0x79,0x3F,0x71,0xBF};
2000090e:	2310      	movs	r3, #16
20000910:	18fb      	adds	r3, r7, r3
20000912:	4a15      	ldr	r2, [pc, #84]	; (20000968 <keyb+0x60>)
20000914:	ca13      	ldmia	r2!, {r0, r1, r4}
20000916:	c313      	stmia	r3!, {r0, r1, r4}
20000918:	6812      	ldr	r2, [r2, #0]
2000091a:	601a      	str	r2, [r3, #0]
    unsigned char keyVal[] = {1,2,3,0xA,4,5,6,0xB,7,8,9,0xC,0xE,0,0xF,0xD};
2000091c:	003b      	movs	r3, r7
2000091e:	4a13      	ldr	r2, [pc, #76]	; (2000096c <keyb+0x64>)
20000920:	ca13      	ldmia	r2!, {r0, r1, r4}
20000922:	c313      	stmia	r3!, {r0, r1, r4}
20000924:	6812      	ldr	r2, [r2, #0]
20000926:	601a      	str	r2, [r3, #0]
    
        
    int row, coloumn;
    for (row = 0; row < 4; row++){
20000928:	2300      	movs	r3, #0
2000092a:	627b      	str	r3, [r7, #36]	; 0x24
2000092c:	e014      	b.n	20000958 <keyb+0x50>
        activate_row(row);
2000092e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20000930:	0018      	movs	r0, r3
20000932:	f7ff ffb5 	bl	200008a0 <activate_row>
        coloumn = read_coloumn();
20000936:	f7ff ffc5 	bl	200008c4 <read_coloumn>
2000093a:	0003      	movs	r3, r0
2000093c:	623b      	str	r3, [r7, #32]
        if (coloumn != -1){
2000093e:	6a3b      	ldr	r3, [r7, #32]
20000940:	3301      	adds	r3, #1
20000942:	d006      	beq.n	20000952 <keyb+0x4a>
            return keyVal[coloumn+row*4];
20000944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20000946:	009a      	lsls	r2, r3, #2
20000948:	6a3b      	ldr	r3, [r7, #32]
2000094a:	18d3      	adds	r3, r2, r3
2000094c:	003a      	movs	r2, r7
2000094e:	5cd3      	ldrb	r3, [r2, r3]
20000950:	e006      	b.n	20000960 <keyb+0x58>
    for (row = 0; row < 4; row++){
20000952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20000954:	3301      	adds	r3, #1
20000956:	627b      	str	r3, [r7, #36]	; 0x24
20000958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2000095a:	2b03      	cmp	r3, #3
2000095c:	dde7      	ble.n	2000092e <keyb+0x26>
        }
    }
    return 0x00;
2000095e:	2300      	movs	r3, #0
}
20000960:	0018      	movs	r0, r3
20000962:	46bd      	mov	sp, r7
20000964:	b00b      	add	sp, #44	; 0x2c
20000966:	bd90      	pop	{r4, r7, pc}
20000968:	20008224 	andcs	r8, r0, r4, lsr #4
2000096c:	20008234 	andcs	r8, r0, r4, lsr r2

20000970 <out7seg>:

void out7seg(unsigned char c){
20000970:	b580      	push	{r7, lr}
20000972:	b082      	sub	sp, #8
20000974:	af00      	add	r7, sp, #0
20000976:	0002      	movs	r2, r0
20000978:	1dfb      	adds	r3, r7, #7
2000097a:	701a      	strb	r2, [r3, #0]
    
    *GPIO_D_ODR_LOW = c; //0x00 -> 0xFF
2000097c:	4a03      	ldr	r2, [pc, #12]	; (2000098c <out7seg+0x1c>)
2000097e:	1dfb      	adds	r3, r7, #7
20000980:	781b      	ldrb	r3, [r3, #0]
20000982:	7013      	strb	r3, [r2, #0]
    
20000984:	46c0      	nop			; (mov r8, r8)
20000986:	46bd      	mov	sp, r7
20000988:	b002      	add	sp, #8
2000098a:	bd80      	pop	{r7, pc}
2000098c:	40020c14 	andmi	r0, r2, r4, lsl ip

20000990 <delay_250ns>:
#include <defines.h>
#include <delay.h>


void delay_250ns ( void){
20000990:	b580      	push	{r7, lr}
20000992:	af00      	add	r7, sp, #0
    #ifdef SIMULATOR
        return;
20000994:	46c0      	nop			; (mov r8, r8)
    *STK_LOAD = ( (168/4) -1 );
    *STK_VAL = 0;
    *STK_CTRL = 5;
    while( (*STK_CTRL & 0x10000 )== 0 ) {} 
    *STK_CTRL = 0;
}
20000996:	46bd      	mov	sp, r7
20000998:	bd80      	pop	{r7, pc}

2000099a <delay_500ns>:

void delay_500ns(void){
2000099a:	b580      	push	{r7, lr}
2000099c:	af00      	add	r7, sp, #0
    #ifdef SIMULATOR
        return;
2000099e:	46c0      	nop			; (mov r8, r8)
    #endif
    delay_250ns();
    delay_250ns();
}
200009a0:	46bd      	mov	sp, r7
200009a2:	bd80      	pop	{r7, pc}

200009a4 <delay_mikro>:

void delay_mikro(unsigned int us){
200009a4:	b580      	push	{r7, lr}
200009a6:	b082      	sub	sp, #8
200009a8:	af00      	add	r7, sp, #0
200009aa:	6078      	str	r0, [r7, #4]
    #ifdef SIMULATOR
        return;
200009ac:	46c0      	nop			; (mov r8, r8)
        delay_250ns();
        delay_250ns();
        delay_250ns();
        delay_250ns();
    }
}
200009ae:	46bd      	mov	sp, r7
200009b0:	b002      	add	sp, #8
200009b2:	bd80      	pop	{r7, pc}

200009b4 <delay_milli>:

void delay_milli(unsigned int ms){
200009b4:	b580      	push	{r7, lr}
200009b6:	b082      	sub	sp, #8
200009b8:	af00      	add	r7, sp, #0
200009ba:	6078      	str	r0, [r7, #4]
    #ifdef SIMULATOR
        ms = ms / 1000;
200009bc:	687b      	ldr	r3, [r7, #4]
200009be:	22fa      	movs	r2, #250	; 0xfa
200009c0:	0091      	lsls	r1, r2, #2
200009c2:	0018      	movs	r0, r3
200009c4:	f000 fb36 	bl	20001034 <__udivsi3>
200009c8:	0003      	movs	r3, r0
200009ca:	607b      	str	r3, [r7, #4]
        ms++;
200009cc:	687b      	ldr	r3, [r7, #4]
200009ce:	3301      	adds	r3, #1
200009d0:	607b      	str	r3, [r7, #4]
    #endif
    
    while(ms--){
200009d2:	e004      	b.n	200009de <delay_milli+0x2a>
        delay_mikro(1000);
200009d4:	23fa      	movs	r3, #250	; 0xfa
200009d6:	009b      	lsls	r3, r3, #2
200009d8:	0018      	movs	r0, r3
200009da:	f7ff ffe3 	bl	200009a4 <delay_mikro>
    while(ms--){
200009de:	687b      	ldr	r3, [r7, #4]
200009e0:	1e5a      	subs	r2, r3, #1
200009e2:	607a      	str	r2, [r7, #4]
200009e4:	2b00      	cmp	r3, #0
200009e6:	d1f5      	bne.n	200009d4 <delay_milli+0x20>
    }
200009e8:	46c0      	nop			; (mov r8, r8)
200009ea:	46c0      	nop			; (mov r8, r8)
200009ec:	46bd      	mov	sp, r7
200009ee:	b002      	add	sp, #8
200009f0:	bd80      	pop	{r7, pc}
	...

200009f4 <graphic_init>:
#include <defines.h>
#include <asciidisplay.h>
#include <graphicdisplay.h>


void graphic_init(void){
200009f4:	b580      	push	{r7, lr}
200009f6:	af00      	add	r7, sp, #0
    graphic_ctrl_bit_set(B_E);
200009f8:	2040      	movs	r0, #64	; 0x40
200009fa:	f000 f851 	bl	20000aa0 <graphic_ctrl_bit_set>
    delay_mikro(10);
200009fe:	200a      	movs	r0, #10
20000a00:	f7ff ffd0 	bl	200009a4 <delay_mikro>
    graphic_ctrl_bit_clear(B_CS1|B_CS2|B_RST|B_E);
20000a04:	2078      	movs	r0, #120	; 0x78
20000a06:	f000 f823 	bl	20000a50 <graphic_ctrl_bit_clear>
    delay_milli(30);
20000a0a:	201e      	movs	r0, #30
20000a0c:	f7ff ffd2 	bl	200009b4 <delay_milli>
    graphic_ctrl_bit_set(B_RST);
20000a10:	2020      	movs	r0, #32
20000a12:	f000 f845 	bl	20000aa0 <graphic_ctrl_bit_set>
    delay_milli(100);
20000a16:	2064      	movs	r0, #100	; 0x64
20000a18:	f7ff ffcc 	bl	200009b4 <delay_milli>
    graphic_write_command(LCD_OFF, B_CS1|B_CS2);
20000a1c:	2118      	movs	r1, #24
20000a1e:	203e      	movs	r0, #62	; 0x3e
20000a20:	f000 f942 	bl	20000ca8 <graphic_write_command>
    graphic_write_command(LCD_ON, B_CS1|B_CS2);
20000a24:	2118      	movs	r1, #24
20000a26:	203f      	movs	r0, #63	; 0x3f
20000a28:	f000 f93e 	bl	20000ca8 <graphic_write_command>
    graphic_write_command(LCD_DISP_START, B_CS1|B_CS2);
20000a2c:	2118      	movs	r1, #24
20000a2e:	20c0      	movs	r0, #192	; 0xc0
20000a30:	f000 f93a 	bl	20000ca8 <graphic_write_command>
    graphic_write_command(LCD_SET_ADD, B_CS1|B_CS2);
20000a34:	2118      	movs	r1, #24
20000a36:	2040      	movs	r0, #64	; 0x40
20000a38:	f000 f936 	bl	20000ca8 <graphic_write_command>
    graphic_write_command(LCD_SET_PAGE, B_CS1|B_CS2);
20000a3c:	2118      	movs	r1, #24
20000a3e:	20b8      	movs	r0, #184	; 0xb8
20000a40:	f000 f932 	bl	20000ca8 <graphic_write_command>
    select_controller(0);
20000a44:	2000      	movs	r0, #0
20000a46:	f000 f84d 	bl	20000ae4 <select_controller>
}
20000a4a:	46c0      	nop			; (mov r8, r8)
20000a4c:	46bd      	mov	sp, r7
20000a4e:	bd80      	pop	{r7, pc}

20000a50 <graphic_ctrl_bit_clear>:

void graphic_ctrl_bit_clear(uint8_t x){
20000a50:	b580      	push	{r7, lr}
20000a52:	b084      	sub	sp, #16
20000a54:	af00      	add	r7, sp, #0
20000a56:	0002      	movs	r2, r0
20000a58:	1dfb      	adds	r3, r7, #7
20000a5a:	701a      	strb	r2, [r3, #0]
    //*GPIO_E_ODR_LOW &= ( B_SELECT | ~x);
    //ascii_ctrl_bit_clear(x);
    uint8_t c;
    c =*GPIO_E_ODR_LOW;
20000a5c:	4a0f      	ldr	r2, [pc, #60]	; (20000a9c <graphic_ctrl_bit_clear+0x4c>)
20000a5e:	210f      	movs	r1, #15
20000a60:	187b      	adds	r3, r7, r1
20000a62:	7812      	ldrb	r2, [r2, #0]
20000a64:	701a      	strb	r2, [r3, #0]
    c &= ~x;
20000a66:	1dfb      	adds	r3, r7, #7
20000a68:	781b      	ldrb	r3, [r3, #0]
20000a6a:	b25b      	sxtb	r3, r3
20000a6c:	43db      	mvns	r3, r3
20000a6e:	b25b      	sxtb	r3, r3
20000a70:	187a      	adds	r2, r7, r1
20000a72:	7812      	ldrb	r2, [r2, #0]
20000a74:	b252      	sxtb	r2, r2
20000a76:	4013      	ands	r3, r2
20000a78:	b25a      	sxtb	r2, r3
20000a7a:	187b      	adds	r3, r7, r1
20000a7c:	701a      	strb	r2, [r3, #0]
    c &= ~B_SELECT;
20000a7e:	187b      	adds	r3, r7, r1
20000a80:	0008      	movs	r0, r1
20000a82:	187a      	adds	r2, r7, r1
20000a84:	7812      	ldrb	r2, [r2, #0]
20000a86:	2104      	movs	r1, #4
20000a88:	438a      	bics	r2, r1
20000a8a:	701a      	strb	r2, [r3, #0]
    *GPIO_E_ODR_LOW=c;
20000a8c:	4a03      	ldr	r2, [pc, #12]	; (20000a9c <graphic_ctrl_bit_clear+0x4c>)
20000a8e:	183b      	adds	r3, r7, r0
20000a90:	781b      	ldrb	r3, [r3, #0]
20000a92:	7013      	strb	r3, [r2, #0]

}
20000a94:	46c0      	nop			; (mov r8, r8)
20000a96:	46bd      	mov	sp, r7
20000a98:	b004      	add	sp, #16
20000a9a:	bd80      	pop	{r7, pc}
20000a9c:	40021014 	andmi	r1, r2, r4, lsl r0

20000aa0 <graphic_ctrl_bit_set>:

void graphic_ctrl_bit_set(uint8_t x){
20000aa0:	b580      	push	{r7, lr}
20000aa2:	b084      	sub	sp, #16
20000aa4:	af00      	add	r7, sp, #0
20000aa6:	0002      	movs	r2, r0
20000aa8:	1dfb      	adds	r3, r7, #7
20000aaa:	701a      	strb	r2, [r3, #0]
    //*GPIO_E_ODR_LOW |= (B_SELECT | x );
    //ascii_ctrl_bit_set(x);
    uint8_t c;
    c =*GPIO_E_ODR_LOW;
20000aac:	4a0c      	ldr	r2, [pc, #48]	; (20000ae0 <graphic_ctrl_bit_set+0x40>)
20000aae:	200f      	movs	r0, #15
20000ab0:	183b      	adds	r3, r7, r0
20000ab2:	7812      	ldrb	r2, [r2, #0]
20000ab4:	701a      	strb	r2, [r3, #0]
    c |= x; 
20000ab6:	183b      	adds	r3, r7, r0
20000ab8:	1839      	adds	r1, r7, r0
20000aba:	1dfa      	adds	r2, r7, #7
20000abc:	7809      	ldrb	r1, [r1, #0]
20000abe:	7812      	ldrb	r2, [r2, #0]
20000ac0:	430a      	orrs	r2, r1
20000ac2:	701a      	strb	r2, [r3, #0]
    c &=(~B_SELECT);
20000ac4:	183b      	adds	r3, r7, r0
20000ac6:	183a      	adds	r2, r7, r0
20000ac8:	7812      	ldrb	r2, [r2, #0]
20000aca:	2104      	movs	r1, #4
20000acc:	438a      	bics	r2, r1
20000ace:	701a      	strb	r2, [r3, #0]
    *GPIO_E_ODR_LOW= c;
20000ad0:	4a03      	ldr	r2, [pc, #12]	; (20000ae0 <graphic_ctrl_bit_set+0x40>)
20000ad2:	183b      	adds	r3, r7, r0
20000ad4:	781b      	ldrb	r3, [r3, #0]
20000ad6:	7013      	strb	r3, [r2, #0]
}
20000ad8:	46c0      	nop			; (mov r8, r8)
20000ada:	46bd      	mov	sp, r7
20000adc:	b004      	add	sp, #16
20000ade:	bd80      	pop	{r7, pc}
20000ae0:	40021014 	andmi	r1, r2, r4, lsl r0

20000ae4 <select_controller>:

void select_controller(uint8_t controller){
20000ae4:	b580      	push	{r7, lr}
20000ae6:	b082      	sub	sp, #8
20000ae8:	af00      	add	r7, sp, #0
20000aea:	0002      	movs	r2, r0
20000aec:	1dfb      	adds	r3, r7, #7
20000aee:	701a      	strb	r2, [r3, #0]
    switch(controller){
20000af0:	1dfb      	adds	r3, r7, #7
20000af2:	781b      	ldrb	r3, [r3, #0]
20000af4:	2b18      	cmp	r3, #24
20000af6:	d01a      	beq.n	20000b2e <select_controller+0x4a>
20000af8:	dc1d      	bgt.n	20000b36 <select_controller+0x52>
20000afa:	2b10      	cmp	r3, #16
20000afc:	d010      	beq.n	20000b20 <select_controller+0x3c>
20000afe:	dc1a      	bgt.n	20000b36 <select_controller+0x52>
20000b00:	2b00      	cmp	r3, #0
20000b02:	d002      	beq.n	20000b0a <select_controller+0x26>
20000b04:	2b08      	cmp	r3, #8
20000b06:	d004      	beq.n	20000b12 <select_controller+0x2e>
            
        case B_CS1 | B_CS2:
            graphic_ctrl_bit_set(B_CS1|B_CS2);
            break;
    }
}
20000b08:	e015      	b.n	20000b36 <select_controller+0x52>
            graphic_ctrl_bit_clear(B_CS1|B_CS2);
20000b0a:	2018      	movs	r0, #24
20000b0c:	f7ff ffa0 	bl	20000a50 <graphic_ctrl_bit_clear>
            break;
20000b10:	e011      	b.n	20000b36 <select_controller+0x52>
            graphic_ctrl_bit_set(B_CS1);
20000b12:	2008      	movs	r0, #8
20000b14:	f7ff ffc4 	bl	20000aa0 <graphic_ctrl_bit_set>
            graphic_ctrl_bit_clear(B_CS2);
20000b18:	2010      	movs	r0, #16
20000b1a:	f7ff ff99 	bl	20000a50 <graphic_ctrl_bit_clear>
            break;
20000b1e:	e00a      	b.n	20000b36 <select_controller+0x52>
            graphic_ctrl_bit_clear(B_CS1);
20000b20:	2008      	movs	r0, #8
20000b22:	f7ff ff95 	bl	20000a50 <graphic_ctrl_bit_clear>
            graphic_ctrl_bit_set(B_CS2);
20000b26:	2010      	movs	r0, #16
20000b28:	f7ff ffba 	bl	20000aa0 <graphic_ctrl_bit_set>
            break;
20000b2c:	e003      	b.n	20000b36 <select_controller+0x52>
            graphic_ctrl_bit_set(B_CS1|B_CS2);
20000b2e:	2018      	movs	r0, #24
20000b30:	f7ff ffb6 	bl	20000aa0 <graphic_ctrl_bit_set>
            break;
20000b34:	46c0      	nop			; (mov r8, r8)
}
20000b36:	46c0      	nop			; (mov r8, r8)
20000b38:	46bd      	mov	sp, r7
20000b3a:	b002      	add	sp, #8
20000b3c:	bd80      	pop	{r7, pc}

20000b3e <graphic_wait_ready>:

void graphic_wait_ready(void){
20000b3e:	b580      	push	{r7, lr}
20000b40:	af00      	add	r7, sp, #0
    graphic_ctrl_bit_clear(B_E);
20000b42:	2040      	movs	r0, #64	; 0x40
20000b44:	f7ff ff84 	bl	20000a50 <graphic_ctrl_bit_clear>
    *GPIO_E_MODER = 0x00005555;
20000b48:	4b0a      	ldr	r3, [pc, #40]	; (20000b74 <graphic_wait_ready+0x36>)
20000b4a:	4a0b      	ldr	r2, [pc, #44]	; (20000b78 <graphic_wait_ready+0x3a>)
20000b4c:	601a      	str	r2, [r3, #0]
    graphic_ctrl_bit_clear(B_RS);
20000b4e:	2001      	movs	r0, #1
20000b50:	f7ff ff7e 	bl	20000a50 <graphic_ctrl_bit_clear>
    graphic_ctrl_bit_set(B_RW);
20000b54:	2002      	movs	r0, #2
20000b56:	f7ff ffa3 	bl	20000aa0 <graphic_ctrl_bit_set>
    delay_500ns();
20000b5a:	f7ff ff1e 	bl	2000099a <delay_500ns>
    while(1){
        graphic_ctrl_bit_set(B_E);
20000b5e:	2040      	movs	r0, #64	; 0x40
20000b60:	f7ff ff9e 	bl	20000aa0 <graphic_ctrl_bit_set>
        delay_500ns();
20000b64:	f7ff ff19 	bl	2000099a <delay_500ns>
        graphic_ctrl_bit_clear(B_E);
20000b68:	2040      	movs	r0, #64	; 0x40
20000b6a:	f7ff ff71 	bl	20000a50 <graphic_ctrl_bit_clear>
        delay_500ns();
20000b6e:	f7ff ff14 	bl	2000099a <delay_500ns>
        graphic_ctrl_bit_set(B_E);
20000b72:	e7f4      	b.n	20000b5e <graphic_wait_ready+0x20>
20000b74:	40021000 	andmi	r1, r2, r0
20000b78:	00005555 	andeq	r5, r0, r5, asr r5

20000b7c <graphic_read>:
    //graphic_ctrl_bit_set(B_E); // Ej på föreläsning
    *GPIO_E_MODER = 0x55555555;
    
}

unsigned char graphic_read(unsigned char controller){
20000b7c:	b580      	push	{r7, lr}
20000b7e:	b084      	sub	sp, #16
20000b80:	af00      	add	r7, sp, #0
20000b82:	0002      	movs	r2, r0
20000b84:	1dfb      	adds	r3, r7, #7
20000b86:	701a      	strb	r2, [r3, #0]
    graphic_ctrl_bit_clear(B_E);
20000b88:	2040      	movs	r0, #64	; 0x40
20000b8a:	f7ff ff61 	bl	20000a50 <graphic_ctrl_bit_clear>
    *GPIO_E_MODER = 0x00005555;
20000b8e:	4b1a      	ldr	r3, [pc, #104]	; (20000bf8 <graphic_read+0x7c>)
20000b90:	4a1a      	ldr	r2, [pc, #104]	; (20000bfc <graphic_read+0x80>)
20000b92:	601a      	str	r2, [r3, #0]
    graphic_ctrl_bit_set(B_RS|B_RW);
20000b94:	2003      	movs	r0, #3
20000b96:	f7ff ff83 	bl	20000aa0 <graphic_ctrl_bit_set>
    select_controller(controller);              //EJ i Boken
20000b9a:	1dfb      	adds	r3, r7, #7
20000b9c:	781b      	ldrb	r3, [r3, #0]
20000b9e:	0018      	movs	r0, r3
20000ba0:	f7ff ffa0 	bl	20000ae4 <select_controller>
    delay_500ns();
20000ba4:	f7ff fef9 	bl	2000099a <delay_500ns>
    graphic_ctrl_bit_set(B_E);
20000ba8:	2040      	movs	r0, #64	; 0x40
20000baa:	f7ff ff79 	bl	20000aa0 <graphic_ctrl_bit_set>
    delay_500ns();
20000bae:	f7ff fef4 	bl	2000099a <delay_500ns>
    unsigned char retval = *GPIO_E_IDR_HIGH;
20000bb2:	4a13      	ldr	r2, [pc, #76]	; (20000c00 <graphic_read+0x84>)
20000bb4:	230f      	movs	r3, #15
20000bb6:	18fb      	adds	r3, r7, r3
20000bb8:	7812      	ldrb	r2, [r2, #0]
20000bba:	701a      	strb	r2, [r3, #0]
    graphic_ctrl_bit_clear(B_E);
20000bbc:	2040      	movs	r0, #64	; 0x40
20000bbe:	f7ff ff47 	bl	20000a50 <graphic_ctrl_bit_clear>
    *GPIO_E_MODER = 0x55555555;
20000bc2:	4b0d      	ldr	r3, [pc, #52]	; (20000bf8 <graphic_read+0x7c>)
20000bc4:	4a0f      	ldr	r2, [pc, #60]	; (20000c04 <graphic_read+0x88>)
20000bc6:	601a      	str	r2, [r3, #0]
    
    if (controller & B_CS1){
20000bc8:	1dfb      	adds	r3, r7, #7
20000bca:	781b      	ldrb	r3, [r3, #0]
20000bcc:	2208      	movs	r2, #8
20000bce:	4013      	ands	r3, r2
20000bd0:	d002      	beq.n	20000bd8 <graphic_read+0x5c>
        select_controller(B_CS1);
20000bd2:	2008      	movs	r0, #8
20000bd4:	f7ff ff86 	bl	20000ae4 <select_controller>
        //graphic_wait_ready();
    }
    if (controller & B_CS2){
20000bd8:	1dfb      	adds	r3, r7, #7
20000bda:	781b      	ldrb	r3, [r3, #0]
20000bdc:	2210      	movs	r2, #16
20000bde:	4013      	ands	r3, r2
20000be0:	d002      	beq.n	20000be8 <graphic_read+0x6c>
        select_controller(B_CS2);
20000be2:	2010      	movs	r0, #16
20000be4:	f7ff ff7e 	bl	20000ae4 <select_controller>
        //graphic_wait_ready();
    }
    return retval;
20000be8:	230f      	movs	r3, #15
20000bea:	18fb      	adds	r3, r7, r3
20000bec:	781b      	ldrb	r3, [r3, #0]
}
20000bee:	0018      	movs	r0, r3
20000bf0:	46bd      	mov	sp, r7
20000bf2:	b004      	add	sp, #16
20000bf4:	bd80      	pop	{r7, pc}
20000bf6:	46c0      	nop			; (mov r8, r8)
20000bf8:	40021000 	andmi	r1, r2, r0
20000bfc:	00005555 	andeq	r5, r0, r5, asr r5
20000c00:	40021011 	andmi	r1, r2, r1, lsl r0
20000c04:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000c08 <graphic_read_data>:

uint8_t graphic_read_data(uint8_t controller){
20000c08:	b580      	push	{r7, lr}
20000c0a:	b082      	sub	sp, #8
20000c0c:	af00      	add	r7, sp, #0
20000c0e:	0002      	movs	r2, r0
20000c10:	1dfb      	adds	r3, r7, #7
20000c12:	701a      	strb	r2, [r3, #0]
    (void) graphic_read(controller);
20000c14:	1dfb      	adds	r3, r7, #7
20000c16:	781b      	ldrb	r3, [r3, #0]
20000c18:	0018      	movs	r0, r3
20000c1a:	f7ff ffaf 	bl	20000b7c <graphic_read>
    return graphic_read(controller);
20000c1e:	1dfb      	adds	r3, r7, #7
20000c20:	781b      	ldrb	r3, [r3, #0]
20000c22:	0018      	movs	r0, r3
20000c24:	f7ff ffaa 	bl	20000b7c <graphic_read>
20000c28:	0003      	movs	r3, r0
}
20000c2a:	0018      	movs	r0, r3
20000c2c:	46bd      	mov	sp, r7
20000c2e:	b002      	add	sp, #8
20000c30:	bd80      	pop	{r7, pc}

20000c32 <graphic_write>:

void graphic_write(uint8_t value, uint8_t controller){
20000c32:	b580      	push	{r7, lr}
20000c34:	b082      	sub	sp, #8
20000c36:	af00      	add	r7, sp, #0
20000c38:	0002      	movs	r2, r0
20000c3a:	1dfb      	adds	r3, r7, #7
20000c3c:	701a      	strb	r2, [r3, #0]
20000c3e:	1dbb      	adds	r3, r7, #6
20000c40:	1c0a      	adds	r2, r1, #0
20000c42:	701a      	strb	r2, [r3, #0]
    *GPIO_E_ODR_HIGH = value;
20000c44:	4a17      	ldr	r2, [pc, #92]	; (20000ca4 <graphic_write+0x72>)
20000c46:	1dfb      	adds	r3, r7, #7
20000c48:	781b      	ldrb	r3, [r3, #0]
20000c4a:	7013      	strb	r3, [r2, #0]
    select_controller(controller);
20000c4c:	1dbb      	adds	r3, r7, #6
20000c4e:	781b      	ldrb	r3, [r3, #0]
20000c50:	0018      	movs	r0, r3
20000c52:	f7ff ff47 	bl	20000ae4 <select_controller>
    delay_500ns();
20000c56:	f7ff fea0 	bl	2000099a <delay_500ns>
    graphic_ctrl_bit_set(B_E);
20000c5a:	2040      	movs	r0, #64	; 0x40
20000c5c:	f7ff ff20 	bl	20000aa0 <graphic_ctrl_bit_set>
    delay_500ns();
20000c60:	f7ff fe9b 	bl	2000099a <delay_500ns>
    graphic_ctrl_bit_clear(B_E);
20000c64:	2040      	movs	r0, #64	; 0x40
20000c66:	f7ff fef3 	bl	20000a50 <graphic_ctrl_bit_clear>
    
    if(controller & B_CS1){
20000c6a:	1dbb      	adds	r3, r7, #6
20000c6c:	781b      	ldrb	r3, [r3, #0]
20000c6e:	2208      	movs	r2, #8
20000c70:	4013      	ands	r3, r2
20000c72:	d002      	beq.n	20000c7a <graphic_write+0x48>
        select_controller(B_CS1);
20000c74:	2008      	movs	r0, #8
20000c76:	f7ff ff35 	bl	20000ae4 <select_controller>
        //graphic_wait_ready();
    }
    if(controller & B_CS2){
20000c7a:	1dbb      	adds	r3, r7, #6
20000c7c:	781b      	ldrb	r3, [r3, #0]
20000c7e:	2210      	movs	r2, #16
20000c80:	4013      	ands	r3, r2
20000c82:	d002      	beq.n	20000c8a <graphic_write+0x58>
        select_controller(B_CS2);
20000c84:	2010      	movs	r0, #16
20000c86:	f7ff ff2d 	bl	20000ae4 <select_controller>
        //graphic_wait_ready();
    }
    
    /* INTE på föreläsning*/
    *GPIO_E_ODR_HIGH = 0;
20000c8a:	4b06      	ldr	r3, [pc, #24]	; (20000ca4 <graphic_write+0x72>)
20000c8c:	2200      	movs	r2, #0
20000c8e:	701a      	strb	r2, [r3, #0]
    graphic_ctrl_bit_set(B_E);
20000c90:	2040      	movs	r0, #64	; 0x40
20000c92:	f7ff ff05 	bl	20000aa0 <graphic_ctrl_bit_set>
    select_controller(0);
20000c96:	2000      	movs	r0, #0
20000c98:	f7ff ff24 	bl	20000ae4 <select_controller>
      
}
20000c9c:	46c0      	nop			; (mov r8, r8)
20000c9e:	46bd      	mov	sp, r7
20000ca0:	b002      	add	sp, #8
20000ca2:	bd80      	pop	{r7, pc}
20000ca4:	40021015 	andmi	r1, r2, r5, lsl r0

20000ca8 <graphic_write_command>:

void graphic_write_command(uint8_t cmd, uint8_t controller){
20000ca8:	b580      	push	{r7, lr}
20000caa:	b082      	sub	sp, #8
20000cac:	af00      	add	r7, sp, #0
20000cae:	0002      	movs	r2, r0
20000cb0:	1dfb      	adds	r3, r7, #7
20000cb2:	701a      	strb	r2, [r3, #0]
20000cb4:	1dbb      	adds	r3, r7, #6
20000cb6:	1c0a      	adds	r2, r1, #0
20000cb8:	701a      	strb	r2, [r3, #0]
    graphic_ctrl_bit_clear(B_E);
20000cba:	2040      	movs	r0, #64	; 0x40
20000cbc:	f7ff fec8 	bl	20000a50 <graphic_ctrl_bit_clear>
    select_controller(controller);
20000cc0:	1dbb      	adds	r3, r7, #6
20000cc2:	781b      	ldrb	r3, [r3, #0]
20000cc4:	0018      	movs	r0, r3
20000cc6:	f7ff ff0d 	bl	20000ae4 <select_controller>
    graphic_ctrl_bit_clear(B_RS);
20000cca:	2001      	movs	r0, #1
20000ccc:	f7ff fec0 	bl	20000a50 <graphic_ctrl_bit_clear>
    graphic_ctrl_bit_clear(B_RW);
20000cd0:	2002      	movs	r0, #2
20000cd2:	f7ff febd 	bl	20000a50 <graphic_ctrl_bit_clear>
    graphic_write(cmd, controller);
20000cd6:	1dbb      	adds	r3, r7, #6
20000cd8:	781a      	ldrb	r2, [r3, #0]
20000cda:	1dfb      	adds	r3, r7, #7
20000cdc:	781b      	ldrb	r3, [r3, #0]
20000cde:	0011      	movs	r1, r2
20000ce0:	0018      	movs	r0, r3
20000ce2:	f7ff ffa6 	bl	20000c32 <graphic_write>
}
20000ce6:	46c0      	nop			; (mov r8, r8)
20000ce8:	46bd      	mov	sp, r7
20000cea:	b002      	add	sp, #8
20000cec:	bd80      	pop	{r7, pc}

20000cee <graphic_write_data>:

void graphic_write_data(uint8_t data, uint8_t controller){
20000cee:	b580      	push	{r7, lr}
20000cf0:	b082      	sub	sp, #8
20000cf2:	af00      	add	r7, sp, #0
20000cf4:	0002      	movs	r2, r0
20000cf6:	1dfb      	adds	r3, r7, #7
20000cf8:	701a      	strb	r2, [r3, #0]
20000cfa:	1dbb      	adds	r3, r7, #6
20000cfc:	1c0a      	adds	r2, r1, #0
20000cfe:	701a      	strb	r2, [r3, #0]
    graphic_ctrl_bit_clear(B_E);
20000d00:	2040      	movs	r0, #64	; 0x40
20000d02:	f7ff fea5 	bl	20000a50 <graphic_ctrl_bit_clear>
    select_controller(controller);
20000d06:	1dbb      	adds	r3, r7, #6
20000d08:	781b      	ldrb	r3, [r3, #0]
20000d0a:	0018      	movs	r0, r3
20000d0c:	f7ff feea 	bl	20000ae4 <select_controller>
    graphic_ctrl_bit_set(B_RS);
20000d10:	2001      	movs	r0, #1
20000d12:	f7ff fec5 	bl	20000aa0 <graphic_ctrl_bit_set>
    graphic_ctrl_bit_clear(B_RW);
20000d16:	2002      	movs	r0, #2
20000d18:	f7ff fe9a 	bl	20000a50 <graphic_ctrl_bit_clear>
    graphic_write(data, controller);
20000d1c:	1dbb      	adds	r3, r7, #6
20000d1e:	781a      	ldrb	r2, [r3, #0]
20000d20:	1dfb      	adds	r3, r7, #7
20000d22:	781b      	ldrb	r3, [r3, #0]
20000d24:	0011      	movs	r1, r2
20000d26:	0018      	movs	r0, r3
20000d28:	f7ff ff83 	bl	20000c32 <graphic_write>
}
20000d2c:	46c0      	nop			; (mov r8, r8)
20000d2e:	46bd      	mov	sp, r7
20000d30:	b002      	add	sp, #8
20000d32:	bd80      	pop	{r7, pc}

20000d34 <graphic_clear_screen>:

void graphic_clear_screen(void){
20000d34:	b580      	push	{r7, lr}
20000d36:	b082      	sub	sp, #8
20000d38:	af00      	add	r7, sp, #0
    for (int page = 0; page < 8; page++){
20000d3a:	2300      	movs	r3, #0
20000d3c:	607b      	str	r3, [r7, #4]
20000d3e:	e01e      	b.n	20000d7e <graphic_clear_screen+0x4a>
        graphic_write_command(LCD_SET_PAGE | page, B_CS1|B_CS2);
20000d40:	687b      	ldr	r3, [r7, #4]
20000d42:	b25b      	sxtb	r3, r3
20000d44:	2248      	movs	r2, #72	; 0x48
20000d46:	4252      	negs	r2, r2
20000d48:	4313      	orrs	r3, r2
20000d4a:	b25b      	sxtb	r3, r3
20000d4c:	b2db      	uxtb	r3, r3
20000d4e:	2118      	movs	r1, #24
20000d50:	0018      	movs	r0, r3
20000d52:	f7ff ffa9 	bl	20000ca8 <graphic_write_command>
        graphic_write_command(LCD_SET_ADD | 0, B_CS1|B_CS2);
20000d56:	2118      	movs	r1, #24
20000d58:	2040      	movs	r0, #64	; 0x40
20000d5a:	f7ff ffa5 	bl	20000ca8 <graphic_write_command>
        for (int add = 0; add < 63; add++){
20000d5e:	2300      	movs	r3, #0
20000d60:	603b      	str	r3, [r7, #0]
20000d62:	e006      	b.n	20000d72 <graphic_clear_screen+0x3e>
            graphic_write_data(0, B_CS1|B_CS2);
20000d64:	2118      	movs	r1, #24
20000d66:	2000      	movs	r0, #0
20000d68:	f7ff ffc1 	bl	20000cee <graphic_write_data>
        for (int add = 0; add < 63; add++){
20000d6c:	683b      	ldr	r3, [r7, #0]
20000d6e:	3301      	adds	r3, #1
20000d70:	603b      	str	r3, [r7, #0]
20000d72:	683b      	ldr	r3, [r7, #0]
20000d74:	2b3e      	cmp	r3, #62	; 0x3e
20000d76:	ddf5      	ble.n	20000d64 <graphic_clear_screen+0x30>
    for (int page = 0; page < 8; page++){
20000d78:	687b      	ldr	r3, [r7, #4]
20000d7a:	3301      	adds	r3, #1
20000d7c:	607b      	str	r3, [r7, #4]
20000d7e:	687b      	ldr	r3, [r7, #4]
20000d80:	2b07      	cmp	r3, #7
20000d82:	dddd      	ble.n	20000d40 <graphic_clear_screen+0xc>
        }
    }
}
20000d84:	46c0      	nop			; (mov r8, r8)
20000d86:	46c0      	nop			; (mov r8, r8)
20000d88:	46bd      	mov	sp, r7
20000d8a:	b002      	add	sp, #8
20000d8c:	bd80      	pop	{r7, pc}

20000d8e <clear_backbuffer>:

void clear_backbuffer(){
20000d8e:	b580      	push	{r7, lr}
20000d90:	b082      	sub	sp, #8
20000d92:	af00      	add	r7, sp, #0
    int i;
    for (i = 0; i < 1024; i++)
20000d94:	2300      	movs	r3, #0
20000d96:	607b      	str	r3, [r7, #4]
20000d98:	e007      	b.n	20000daa <clear_backbuffer+0x1c>
        backBuffer[i] = 0;
20000d9a:	4b09      	ldr	r3, [pc, #36]	; (20000dc0 <clear_backbuffer+0x32>)
20000d9c:	687a      	ldr	r2, [r7, #4]
20000d9e:	0092      	lsls	r2, r2, #2
20000da0:	2100      	movs	r1, #0
20000da2:	50d1      	str	r1, [r2, r3]
    for (i = 0; i < 1024; i++)
20000da4:	687b      	ldr	r3, [r7, #4]
20000da6:	3301      	adds	r3, #1
20000da8:	607b      	str	r3, [r7, #4]
20000daa:	687a      	ldr	r2, [r7, #4]
20000dac:	2380      	movs	r3, #128	; 0x80
20000dae:	00db      	lsls	r3, r3, #3
20000db0:	429a      	cmp	r2, r3
20000db2:	dbf2      	blt.n	20000d9a <clear_backbuffer+0xc>
}
20000db4:	46c0      	nop			; (mov r8, r8)
20000db6:	46c0      	nop			; (mov r8, r8)
20000db8:	46bd      	mov	sp, r7
20000dba:	b002      	add	sp, #8
20000dbc:	bd80      	pop	{r7, pc}
20000dbe:	46c0      	nop			; (mov r8, r8)
20000dc0:	20002150 	andcs	r2, r0, r0, asr r1

20000dc4 <pixel>:

void pixel(unsigned x, unsigned y){
20000dc4:	b580      	push	{r7, lr}
20000dc6:	b084      	sub	sp, #16
20000dc8:	af00      	add	r7, sp, #0
20000dca:	6078      	str	r0, [r7, #4]
20000dcc:	6039      	str	r1, [r7, #0]
    uint8_t mask;
    int index = 0;
20000dce:	2300      	movs	r3, #0
20000dd0:	60fb      	str	r3, [r7, #12]
    if ((x >128)||(x <1)||(y >64)||(y <1)) return;
20000dd2:	687b      	ldr	r3, [r7, #4]
20000dd4:	2b80      	cmp	r3, #128	; 0x80
20000dd6:	d831      	bhi.n	20000e3c <pixel+0x78>
20000dd8:	687b      	ldr	r3, [r7, #4]
20000dda:	2b00      	cmp	r3, #0
20000ddc:	d02e      	beq.n	20000e3c <pixel+0x78>
20000dde:	683b      	ldr	r3, [r7, #0]
20000de0:	2b40      	cmp	r3, #64	; 0x40
20000de2:	d82b      	bhi.n	20000e3c <pixel+0x78>
20000de4:	683b      	ldr	r3, [r7, #0]
20000de6:	2b00      	cmp	r3, #0
20000de8:	d028      	beq.n	20000e3c <pixel+0x78>

    mask = 1 << ((y-1)%8);
20000dea:	683b      	ldr	r3, [r7, #0]
20000dec:	3b01      	subs	r3, #1
20000dee:	2207      	movs	r2, #7
20000df0:	4013      	ands	r3, r2
20000df2:	2201      	movs	r2, #1
20000df4:	409a      	lsls	r2, r3
20000df6:	230b      	movs	r3, #11
20000df8:	18fb      	adds	r3, r7, r3
20000dfa:	701a      	strb	r2, [r3, #0]
    
    if(x > 64){
20000dfc:	687b      	ldr	r3, [r7, #4]
20000dfe:	2b40      	cmp	r3, #64	; 0x40
20000e00:	d905      	bls.n	20000e0e <pixel+0x4a>
        x -= 65;
20000e02:	687b      	ldr	r3, [r7, #4]
20000e04:	3b41      	subs	r3, #65	; 0x41
20000e06:	607b      	str	r3, [r7, #4]
        index = 512;
20000e08:	2380      	movs	r3, #128	; 0x80
20000e0a:	009b      	lsls	r3, r3, #2
20000e0c:	60fb      	str	r3, [r7, #12]
    }
    
    index += x + ((y-1)/8)*64;
20000e0e:	683b      	ldr	r3, [r7, #0]
20000e10:	3b01      	subs	r3, #1
20000e12:	08db      	lsrs	r3, r3, #3
20000e14:	019a      	lsls	r2, r3, #6
20000e16:	687b      	ldr	r3, [r7, #4]
20000e18:	18d2      	adds	r2, r2, r3
20000e1a:	68fb      	ldr	r3, [r7, #12]
20000e1c:	18d3      	adds	r3, r2, r3
20000e1e:	60fb      	str	r3, [r7, #12]
    
    backBuffer[index] |= mask;
20000e20:	4b08      	ldr	r3, [pc, #32]	; (20000e44 <pixel+0x80>)
20000e22:	68fa      	ldr	r2, [r7, #12]
20000e24:	0092      	lsls	r2, r2, #2
20000e26:	58d2      	ldr	r2, [r2, r3]
20000e28:	230b      	movs	r3, #11
20000e2a:	18fb      	adds	r3, r7, r3
20000e2c:	781b      	ldrb	r3, [r3, #0]
20000e2e:	431a      	orrs	r2, r3
20000e30:	0011      	movs	r1, r2
20000e32:	4b04      	ldr	r3, [pc, #16]	; (20000e44 <pixel+0x80>)
20000e34:	68fa      	ldr	r2, [r7, #12]
20000e36:	0092      	lsls	r2, r2, #2
20000e38:	50d1      	str	r1, [r2, r3]
20000e3a:	e000      	b.n	20000e3e <pixel+0x7a>
    if ((x >128)||(x <1)||(y >64)||(y <1)) return;
20000e3c:	46c0      	nop			; (mov r8, r8)
}
20000e3e:	46bd      	mov	sp, r7
20000e40:	b004      	add	sp, #16
20000e42:	bd80      	pop	{r7, pc}
20000e44:	20002150 	andcs	r2, r0, r0, asr r1

20000e48 <graphic_draw_screen>:

void graphic_draw_screen(void){
20000e48:	b580      	push	{r7, lr}
20000e4a:	b084      	sub	sp, #16
20000e4c:	af00      	add	r7, sp, #0
    uint8_t i,  j, controller, c;
    unsigned int k = 0;
20000e4e:	2300      	movs	r3, #0
20000e50:	60bb      	str	r3, [r7, #8]
    
    for (c = 0; c < 2; c++){
20000e52:	230d      	movs	r3, #13
20000e54:	18fb      	adds	r3, r7, r3
20000e56:	2200      	movs	r2, #0
20000e58:	701a      	strb	r2, [r3, #0]
20000e5a:	e050      	b.n	20000efe <graphic_draw_screen+0xb6>
        controller = (c==0) ? B_CS1 : B_CS2;
20000e5c:	230d      	movs	r3, #13
20000e5e:	18fb      	adds	r3, r7, r3
20000e60:	781b      	ldrb	r3, [r3, #0]
20000e62:	2b00      	cmp	r3, #0
20000e64:	d101      	bne.n	20000e6a <graphic_draw_screen+0x22>
20000e66:	2208      	movs	r2, #8
20000e68:	e000      	b.n	20000e6c <graphic_draw_screen+0x24>
20000e6a:	2210      	movs	r2, #16
20000e6c:	1dfb      	adds	r3, r7, #7
20000e6e:	701a      	strb	r2, [r3, #0]
        for (j = 0; j < 8; j++){
20000e70:	230e      	movs	r3, #14
20000e72:	18fb      	adds	r3, r7, r3
20000e74:	2200      	movs	r2, #0
20000e76:	701a      	strb	r2, [r3, #0]
20000e78:	e036      	b.n	20000ee8 <graphic_draw_screen+0xa0>
            graphic_write_command(LCD_SET_PAGE | j, controller);
20000e7a:	230e      	movs	r3, #14
20000e7c:	18fb      	adds	r3, r7, r3
20000e7e:	781b      	ldrb	r3, [r3, #0]
20000e80:	2248      	movs	r2, #72	; 0x48
20000e82:	4252      	negs	r2, r2
20000e84:	4313      	orrs	r3, r2
20000e86:	b2da      	uxtb	r2, r3
20000e88:	1dfb      	adds	r3, r7, #7
20000e8a:	781b      	ldrb	r3, [r3, #0]
20000e8c:	0019      	movs	r1, r3
20000e8e:	0010      	movs	r0, r2
20000e90:	f7ff ff0a 	bl	20000ca8 <graphic_write_command>
            graphic_write_command(LCD_SET_ADD | 0, controller);
20000e94:	1dfb      	adds	r3, r7, #7
20000e96:	781b      	ldrb	r3, [r3, #0]
20000e98:	0019      	movs	r1, r3
20000e9a:	2040      	movs	r0, #64	; 0x40
20000e9c:	f7ff ff04 	bl	20000ca8 <graphic_write_command>
            for(i = 0; i <= 63; i++, k++){
20000ea0:	230f      	movs	r3, #15
20000ea2:	18fb      	adds	r3, r7, r3
20000ea4:	2200      	movs	r2, #0
20000ea6:	701a      	strb	r2, [r3, #0]
20000ea8:	e013      	b.n	20000ed2 <graphic_draw_screen+0x8a>
                graphic_write_data(backBuffer[k],controller);  
20000eaa:	4b1a      	ldr	r3, [pc, #104]	; (20000f14 <graphic_draw_screen+0xcc>)
20000eac:	68ba      	ldr	r2, [r7, #8]
20000eae:	0092      	lsls	r2, r2, #2
20000eb0:	58d3      	ldr	r3, [r2, r3]
20000eb2:	b2da      	uxtb	r2, r3
20000eb4:	1dfb      	adds	r3, r7, #7
20000eb6:	781b      	ldrb	r3, [r3, #0]
20000eb8:	0019      	movs	r1, r3
20000eba:	0010      	movs	r0, r2
20000ebc:	f7ff ff17 	bl	20000cee <graphic_write_data>
            for(i = 0; i <= 63; i++, k++){
20000ec0:	210f      	movs	r1, #15
20000ec2:	187b      	adds	r3, r7, r1
20000ec4:	781a      	ldrb	r2, [r3, #0]
20000ec6:	187b      	adds	r3, r7, r1
20000ec8:	3201      	adds	r2, #1
20000eca:	701a      	strb	r2, [r3, #0]
20000ecc:	68bb      	ldr	r3, [r7, #8]
20000ece:	3301      	adds	r3, #1
20000ed0:	60bb      	str	r3, [r7, #8]
20000ed2:	230f      	movs	r3, #15
20000ed4:	18fb      	adds	r3, r7, r3
20000ed6:	781b      	ldrb	r3, [r3, #0]
20000ed8:	2b3f      	cmp	r3, #63	; 0x3f
20000eda:	d9e6      	bls.n	20000eaa <graphic_draw_screen+0x62>
        for (j = 0; j < 8; j++){
20000edc:	210e      	movs	r1, #14
20000ede:	187b      	adds	r3, r7, r1
20000ee0:	781a      	ldrb	r2, [r3, #0]
20000ee2:	187b      	adds	r3, r7, r1
20000ee4:	3201      	adds	r2, #1
20000ee6:	701a      	strb	r2, [r3, #0]
20000ee8:	230e      	movs	r3, #14
20000eea:	18fb      	adds	r3, r7, r3
20000eec:	781b      	ldrb	r3, [r3, #0]
20000eee:	2b07      	cmp	r3, #7
20000ef0:	d9c3      	bls.n	20000e7a <graphic_draw_screen+0x32>
    for (c = 0; c < 2; c++){
20000ef2:	210d      	movs	r1, #13
20000ef4:	187b      	adds	r3, r7, r1
20000ef6:	781a      	ldrb	r2, [r3, #0]
20000ef8:	187b      	adds	r3, r7, r1
20000efa:	3201      	adds	r2, #1
20000efc:	701a      	strb	r2, [r3, #0]
20000efe:	230d      	movs	r3, #13
20000f00:	18fb      	adds	r3, r7, r3
20000f02:	781b      	ldrb	r3, [r3, #0]
20000f04:	2b01      	cmp	r3, #1
20000f06:	d9a9      	bls.n	20000e5c <graphic_draw_screen+0x14>
            }
        }
    }
}
20000f08:	46c0      	nop			; (mov r8, r8)
20000f0a:	46c0      	nop			; (mov r8, r8)
20000f0c:	46bd      	mov	sp, r7
20000f0e:	b004      	add	sp, #16
20000f10:	bd80      	pop	{r7, pc}
20000f12:	46c0      	nop			; (mov r8, r8)
20000f14:	20002150 	andcs	r2, r0, r0, asr r1

20000f18 <peek>:
int front = 0;
int rear = -1;
int itemCount = 0;

/*returns the head*/
POBJECT peek() {
20000f18:	b580      	push	{r7, lr}
20000f1a:	af00      	add	r7, sp, #0
   return objArray[front];
20000f1c:	4b03      	ldr	r3, [pc, #12]	; (20000f2c <peek+0x14>)
20000f1e:	681a      	ldr	r2, [r3, #0]
20000f20:	4b03      	ldr	r3, [pc, #12]	; (20000f30 <peek+0x18>)
20000f22:	0092      	lsls	r2, r2, #2
20000f24:	58d3      	ldr	r3, [r2, r3]
}
20000f26:	0018      	movs	r0, r3
20000f28:	46bd      	mov	sp, r7
20000f2a:	bd80      	pop	{r7, pc}
20000f2c:	20003150 	andcs	r3, r0, r0, asr r1
20000f30:	20003158 	andcs	r3, r0, r8, asr r1

20000f34 <isEmpty>:

/*returns true if itemCount == 0*/
bool isEmpty() {
20000f34:	b580      	push	{r7, lr}
20000f36:	af00      	add	r7, sp, #0
   return itemCount == 0;
20000f38:	4b03      	ldr	r3, [pc, #12]	; (20000f48 <isEmpty+0x14>)
20000f3a:	681b      	ldr	r3, [r3, #0]
20000f3c:	425a      	negs	r2, r3
20000f3e:	4153      	adcs	r3, r2
20000f40:	b2db      	uxtb	r3, r3
}
20000f42:	0018      	movs	r0, r3
20000f44:	46bd      	mov	sp, r7
20000f46:	bd80      	pop	{r7, pc}
20000f48:	20003154 	andcs	r3, r0, r4, asr r1

20000f4c <isFull>:

/*returns true if itemCount == MAX (512)*/
bool isFull() {
20000f4c:	b580      	push	{r7, lr}
20000f4e:	af00      	add	r7, sp, #0
   return itemCount == MAX;
20000f50:	4b05      	ldr	r3, [pc, #20]	; (20000f68 <isFull+0x1c>)
20000f52:	681b      	ldr	r3, [r3, #0]
20000f54:	4a05      	ldr	r2, [pc, #20]	; (20000f6c <isFull+0x20>)
20000f56:	4694      	mov	ip, r2
20000f58:	4463      	add	r3, ip
20000f5a:	425a      	negs	r2, r3
20000f5c:	4153      	adcs	r3, r2
20000f5e:	b2db      	uxtb	r3, r3
}
20000f60:	0018      	movs	r0, r3
20000f62:	46bd      	mov	sp, r7
20000f64:	bd80      	pop	{r7, pc}
20000f66:	46c0      	nop			; (mov r8, r8)
20000f68:	20003154 	andcs	r3, r0, r4, asr r1
20000f6c:	fffffe00 			; <UNDEFINED> instruction: 0xfffffe00

20000f70 <size>:

/*Returns itemCount*/
int size() {
20000f70:	b580      	push	{r7, lr}
20000f72:	af00      	add	r7, sp, #0
   return itemCount;
20000f74:	4b02      	ldr	r3, [pc, #8]	; (20000f80 <size+0x10>)
20000f76:	681b      	ldr	r3, [r3, #0]
}  
20000f78:	0018      	movs	r0, r3
20000f7a:	46bd      	mov	sp, r7
20000f7c:	bd80      	pop	{r7, pc}
20000f7e:	46c0      	nop			; (mov r8, r8)
20000f80:	20003154 	andcs	r3, r0, r4, asr r1

20000f84 <insert>:

/*Adds a node in the end of the queue*/
void insert(POBJECT data) {
20000f84:	b580      	push	{r7, lr}
20000f86:	b082      	sub	sp, #8
20000f88:	af00      	add	r7, sp, #0
20000f8a:	6078      	str	r0, [r7, #4]

   if(!isFull()) {
20000f8c:	f7ff ffde 	bl	20000f4c <isFull>
20000f90:	0003      	movs	r3, r0
20000f92:	001a      	movs	r2, r3
20000f94:	2301      	movs	r3, #1
20000f96:	4053      	eors	r3, r2
20000f98:	b2db      	uxtb	r3, r3
20000f9a:	2b00      	cmp	r3, #0
20000f9c:	d018      	beq.n	20000fd0 <insert+0x4c>
	
      if(rear == MAX-1) {
20000f9e:	4b0e      	ldr	r3, [pc, #56]	; (20000fd8 <insert+0x54>)
20000fa0:	681b      	ldr	r3, [r3, #0]
20000fa2:	4a0e      	ldr	r2, [pc, #56]	; (20000fdc <insert+0x58>)
20000fa4:	4293      	cmp	r3, r2
20000fa6:	d103      	bne.n	20000fb0 <insert+0x2c>
         rear = -1;            
20000fa8:	4b0b      	ldr	r3, [pc, #44]	; (20000fd8 <insert+0x54>)
20000faa:	2201      	movs	r2, #1
20000fac:	4252      	negs	r2, r2
20000fae:	601a      	str	r2, [r3, #0]
      }       
      objArray[++rear] = data;
20000fb0:	4b09      	ldr	r3, [pc, #36]	; (20000fd8 <insert+0x54>)
20000fb2:	681b      	ldr	r3, [r3, #0]
20000fb4:	1c5a      	adds	r2, r3, #1
20000fb6:	4b08      	ldr	r3, [pc, #32]	; (20000fd8 <insert+0x54>)
20000fb8:	601a      	str	r2, [r3, #0]
20000fba:	4b07      	ldr	r3, [pc, #28]	; (20000fd8 <insert+0x54>)
20000fbc:	681a      	ldr	r2, [r3, #0]
20000fbe:	4b08      	ldr	r3, [pc, #32]	; (20000fe0 <insert+0x5c>)
20000fc0:	0092      	lsls	r2, r2, #2
20000fc2:	6879      	ldr	r1, [r7, #4]
20000fc4:	50d1      	str	r1, [r2, r3]
      itemCount++;
20000fc6:	4b07      	ldr	r3, [pc, #28]	; (20000fe4 <insert+0x60>)
20000fc8:	681b      	ldr	r3, [r3, #0]
20000fca:	1c5a      	adds	r2, r3, #1
20000fcc:	4b05      	ldr	r3, [pc, #20]	; (20000fe4 <insert+0x60>)
20000fce:	601a      	str	r2, [r3, #0]
   }
}
20000fd0:	46c0      	nop			; (mov r8, r8)
20000fd2:	46bd      	mov	sp, r7
20000fd4:	b002      	add	sp, #8
20000fd6:	bd80      	pop	{r7, pc}
20000fd8:	200081e8 	andcs	r8, r0, r8, ror #3
20000fdc:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20000fe0:	20003158 	andcs	r3, r0, r8, asr r1
20000fe4:	20003154 	andcs	r3, r0, r4, asr r1

20000fe8 <remove>:

int remove() {
20000fe8:	b580      	push	{r7, lr}
20000fea:	b082      	sub	sp, #8
20000fec:	af00      	add	r7, sp, #0
   POBJECT data = objArray[front++];
20000fee:	4b0e      	ldr	r3, [pc, #56]	; (20001028 <remove+0x40>)
20000ff0:	681b      	ldr	r3, [r3, #0]
20000ff2:	1c59      	adds	r1, r3, #1
20000ff4:	4a0c      	ldr	r2, [pc, #48]	; (20001028 <remove+0x40>)
20000ff6:	6011      	str	r1, [r2, #0]
20000ff8:	4a0c      	ldr	r2, [pc, #48]	; (2000102c <remove+0x44>)
20000ffa:	009b      	lsls	r3, r3, #2
20000ffc:	589b      	ldr	r3, [r3, r2]
20000ffe:	607b      	str	r3, [r7, #4]
	
   if(front == MAX) {
20001000:	4b09      	ldr	r3, [pc, #36]	; (20001028 <remove+0x40>)
20001002:	681a      	ldr	r2, [r3, #0]
20001004:	2380      	movs	r3, #128	; 0x80
20001006:	009b      	lsls	r3, r3, #2
20001008:	429a      	cmp	r2, r3
2000100a:	d102      	bne.n	20001012 <remove+0x2a>
      front = 0;
2000100c:	4b06      	ldr	r3, [pc, #24]	; (20001028 <remove+0x40>)
2000100e:	2200      	movs	r2, #0
20001010:	601a      	str	r2, [r3, #0]
   }
	
   itemCount--;
20001012:	4b07      	ldr	r3, [pc, #28]	; (20001030 <remove+0x48>)
20001014:	681b      	ldr	r3, [r3, #0]
20001016:	1e5a      	subs	r2, r3, #1
20001018:	4b05      	ldr	r3, [pc, #20]	; (20001030 <remove+0x48>)
2000101a:	601a      	str	r2, [r3, #0]
   return (int)data;  
2000101c:	687b      	ldr	r3, [r7, #4]
}
2000101e:	0018      	movs	r0, r3
20001020:	46bd      	mov	sp, r7
20001022:	b002      	add	sp, #8
20001024:	bd80      	pop	{r7, pc}
20001026:	46c0      	nop			; (mov r8, r8)
20001028:	20003150 	andcs	r3, r0, r0, asr r1
2000102c:	20003158 	andcs	r3, r0, r8, asr r1
20001030:	20003154 	andcs	r3, r0, r4, asr r1

20001034 <__udivsi3>:
20001034:	2200      	movs	r2, #0
20001036:	0843      	lsrs	r3, r0, #1
20001038:	428b      	cmp	r3, r1
2000103a:	d374      	bcc.n	20001126 <__udivsi3+0xf2>
2000103c:	0903      	lsrs	r3, r0, #4
2000103e:	428b      	cmp	r3, r1
20001040:	d35f      	bcc.n	20001102 <__udivsi3+0xce>
20001042:	0a03      	lsrs	r3, r0, #8
20001044:	428b      	cmp	r3, r1
20001046:	d344      	bcc.n	200010d2 <__udivsi3+0x9e>
20001048:	0b03      	lsrs	r3, r0, #12
2000104a:	428b      	cmp	r3, r1
2000104c:	d328      	bcc.n	200010a0 <__udivsi3+0x6c>
2000104e:	0c03      	lsrs	r3, r0, #16
20001050:	428b      	cmp	r3, r1
20001052:	d30d      	bcc.n	20001070 <__udivsi3+0x3c>
20001054:	22ff      	movs	r2, #255	; 0xff
20001056:	0209      	lsls	r1, r1, #8
20001058:	ba12      	rev	r2, r2
2000105a:	0c03      	lsrs	r3, r0, #16
2000105c:	428b      	cmp	r3, r1
2000105e:	d302      	bcc.n	20001066 <__udivsi3+0x32>
20001060:	1212      	asrs	r2, r2, #8
20001062:	0209      	lsls	r1, r1, #8
20001064:	d065      	beq.n	20001132 <__udivsi3+0xfe>
20001066:	0b03      	lsrs	r3, r0, #12
20001068:	428b      	cmp	r3, r1
2000106a:	d319      	bcc.n	200010a0 <__udivsi3+0x6c>
2000106c:	e000      	b.n	20001070 <__udivsi3+0x3c>
2000106e:	0a09      	lsrs	r1, r1, #8
20001070:	0bc3      	lsrs	r3, r0, #15
20001072:	428b      	cmp	r3, r1
20001074:	d301      	bcc.n	2000107a <__udivsi3+0x46>
20001076:	03cb      	lsls	r3, r1, #15
20001078:	1ac0      	subs	r0, r0, r3
2000107a:	4152      	adcs	r2, r2
2000107c:	0b83      	lsrs	r3, r0, #14
2000107e:	428b      	cmp	r3, r1
20001080:	d301      	bcc.n	20001086 <__udivsi3+0x52>
20001082:	038b      	lsls	r3, r1, #14
20001084:	1ac0      	subs	r0, r0, r3
20001086:	4152      	adcs	r2, r2
20001088:	0b43      	lsrs	r3, r0, #13
2000108a:	428b      	cmp	r3, r1
2000108c:	d301      	bcc.n	20001092 <__udivsi3+0x5e>
2000108e:	034b      	lsls	r3, r1, #13
20001090:	1ac0      	subs	r0, r0, r3
20001092:	4152      	adcs	r2, r2
20001094:	0b03      	lsrs	r3, r0, #12
20001096:	428b      	cmp	r3, r1
20001098:	d301      	bcc.n	2000109e <__udivsi3+0x6a>
2000109a:	030b      	lsls	r3, r1, #12
2000109c:	1ac0      	subs	r0, r0, r3
2000109e:	4152      	adcs	r2, r2
200010a0:	0ac3      	lsrs	r3, r0, #11
200010a2:	428b      	cmp	r3, r1
200010a4:	d301      	bcc.n	200010aa <__udivsi3+0x76>
200010a6:	02cb      	lsls	r3, r1, #11
200010a8:	1ac0      	subs	r0, r0, r3
200010aa:	4152      	adcs	r2, r2
200010ac:	0a83      	lsrs	r3, r0, #10
200010ae:	428b      	cmp	r3, r1
200010b0:	d301      	bcc.n	200010b6 <__udivsi3+0x82>
200010b2:	028b      	lsls	r3, r1, #10
200010b4:	1ac0      	subs	r0, r0, r3
200010b6:	4152      	adcs	r2, r2
200010b8:	0a43      	lsrs	r3, r0, #9
200010ba:	428b      	cmp	r3, r1
200010bc:	d301      	bcc.n	200010c2 <__udivsi3+0x8e>
200010be:	024b      	lsls	r3, r1, #9
200010c0:	1ac0      	subs	r0, r0, r3
200010c2:	4152      	adcs	r2, r2
200010c4:	0a03      	lsrs	r3, r0, #8
200010c6:	428b      	cmp	r3, r1
200010c8:	d301      	bcc.n	200010ce <__udivsi3+0x9a>
200010ca:	020b      	lsls	r3, r1, #8
200010cc:	1ac0      	subs	r0, r0, r3
200010ce:	4152      	adcs	r2, r2
200010d0:	d2cd      	bcs.n	2000106e <__udivsi3+0x3a>
200010d2:	09c3      	lsrs	r3, r0, #7
200010d4:	428b      	cmp	r3, r1
200010d6:	d301      	bcc.n	200010dc <__udivsi3+0xa8>
200010d8:	01cb      	lsls	r3, r1, #7
200010da:	1ac0      	subs	r0, r0, r3
200010dc:	4152      	adcs	r2, r2
200010de:	0983      	lsrs	r3, r0, #6
200010e0:	428b      	cmp	r3, r1
200010e2:	d301      	bcc.n	200010e8 <__udivsi3+0xb4>
200010e4:	018b      	lsls	r3, r1, #6
200010e6:	1ac0      	subs	r0, r0, r3
200010e8:	4152      	adcs	r2, r2
200010ea:	0943      	lsrs	r3, r0, #5
200010ec:	428b      	cmp	r3, r1
200010ee:	d301      	bcc.n	200010f4 <__udivsi3+0xc0>
200010f0:	014b      	lsls	r3, r1, #5
200010f2:	1ac0      	subs	r0, r0, r3
200010f4:	4152      	adcs	r2, r2
200010f6:	0903      	lsrs	r3, r0, #4
200010f8:	428b      	cmp	r3, r1
200010fa:	d301      	bcc.n	20001100 <__udivsi3+0xcc>
200010fc:	010b      	lsls	r3, r1, #4
200010fe:	1ac0      	subs	r0, r0, r3
20001100:	4152      	adcs	r2, r2
20001102:	08c3      	lsrs	r3, r0, #3
20001104:	428b      	cmp	r3, r1
20001106:	d301      	bcc.n	2000110c <__udivsi3+0xd8>
20001108:	00cb      	lsls	r3, r1, #3
2000110a:	1ac0      	subs	r0, r0, r3
2000110c:	4152      	adcs	r2, r2
2000110e:	0883      	lsrs	r3, r0, #2
20001110:	428b      	cmp	r3, r1
20001112:	d301      	bcc.n	20001118 <__udivsi3+0xe4>
20001114:	008b      	lsls	r3, r1, #2
20001116:	1ac0      	subs	r0, r0, r3
20001118:	4152      	adcs	r2, r2
2000111a:	0843      	lsrs	r3, r0, #1
2000111c:	428b      	cmp	r3, r1
2000111e:	d301      	bcc.n	20001124 <__udivsi3+0xf0>
20001120:	004b      	lsls	r3, r1, #1
20001122:	1ac0      	subs	r0, r0, r3
20001124:	4152      	adcs	r2, r2
20001126:	1a41      	subs	r1, r0, r1
20001128:	d200      	bcs.n	2000112c <__udivsi3+0xf8>
2000112a:	4601      	mov	r1, r0
2000112c:	4152      	adcs	r2, r2
2000112e:	4610      	mov	r0, r2
20001130:	4770      	bx	lr
20001132:	e7ff      	b.n	20001134 <__udivsi3+0x100>
20001134:	b501      	push	{r0, lr}
20001136:	2000      	movs	r0, #0
20001138:	f000 f806 	bl	20001148 <__aeabi_idiv0>
2000113c:	bd02      	pop	{r1, pc}
2000113e:	46c0      	nop			; (mov r8, r8)

20001140 <__aeabi_uidivmod>:
20001140:	2900      	cmp	r1, #0
20001142:	d0f7      	beq.n	20001134 <__udivsi3+0x100>
20001144:	e776      	b.n	20001034 <__udivsi3>
20001146:	4770      	bx	lr

20001148 <__aeabi_idiv0>:
20001148:	4770      	bx	lr
2000114a:	46c0      	nop			; (mov r8, r8)

2000114c <backBuffer>:
	...

2000214c <points>:
2000214c:	00000000 	andeq	r0, r0, r0

20002150 <backBuffer>:
	...

20003150 <front>:
20003150:	00000000 	andeq	r0, r0, r0

20003154 <itemCount>:
20003154:	00000000 	andeq	r0, r0, r0

20003158 <objArray>:
	...

20003958 <image_bits>:
20003958:	aa889494 	bge	1e228bb0 <startup-0x1dd7450>
2000395c:	beebffeb 	cdplt	15, 14, cr15, cr11, cr11, {7}
20003960:	0000009c 	muleq	r0, ip, r0

20003964 <snakehead_geometry>:
20003964:	0000000a 	andeq	r0, r0, sl
20003968:	00000004 	andeq	r0, r0, r4
2000396c:	00000004 	andeq	r0, r0, r4
20003970:	02000100 	andeq	r0, r0, #0
20003974:	02010101 	andeq	r0, r1, #1073741824	; 0x40000000
20003978:	03020002 	movweq	r0, #8194	; 0x2002
2000397c:	01030003 	tsteq	r3, r3
20003980:	03030203 	movweq	r0, #12803	; 0x3203
	...

20003990 <snakebody_geometry>:
20003990:	00000010 	andeq	r0, r0, r0, lsl r0
20003994:	00000004 	andeq	r0, r0, r4
20003998:	00000004 	andeq	r0, r0, r4
2000399c:	01000000 	mrseq	r0, (UNDEF: 0)
200039a0:	03000200 	movweq	r0, #512	; 0x200
200039a4:	01010001 	tsteq	r1, r1
200039a8:	03010201 	movweq	r0, #4609	; 0x1201
200039ac:	01020002 	tsteq	r2, r2
200039b0:	03020202 	movweq	r0, #8706	; 0x2202
200039b4:	01030003 	tsteq	r3, r3
200039b8:	03030203 	movweq	r0, #12803	; 0x3203

200039bc <food_geometry>:
200039bc:	0000000c 	andeq	r0, r0, ip
200039c0:	00000004 	andeq	r0, r0, r4
200039c4:	00000004 	andeq	r0, r0, r4
200039c8:	01000000 	mrseq	r0, (UNDEF: 0)
200039cc:	03000200 	movweq	r0, #512	; 0x200
200039d0:	03010001 	movweq	r0, #4097	; 0x1001
200039d4:	03020002 	movweq	r0, #8194	; 0x2002
200039d8:	01030003 	tsteq	r3, r3
200039dc:	03030203 	movweq	r0, #12803	; 0x3203
	...

200039e8 <snakehead>:
200039e8:	20003964 	andcs	r3, r0, r4, ror #18
	...
200039f4:	00000001 	andeq	r0, r0, r1
200039f8:	00000001 	andeq	r0, r0, r1
200039fc:	20000319 	andcs	r0, r0, r9, lsl r3
20003a00:	2000037b 	andcs	r0, r0, fp, ror r3
20003a04:	200003dd 	ldrdcs	r0, [r0], -sp
20003a08:	200002f9 	strdcs	r0, [r0], -r9

20003a0c <snakebody>:
20003a0c:	20003990 	mulcs	r0, r0, r9
	...
20003a18:	00000001 	andeq	r0, r0, r1
20003a1c:	00000001 	andeq	r0, r0, r1
20003a20:	20000319 	andcs	r0, r0, r9, lsl r3
20003a24:	2000037b 	andcs	r0, r0, fp, ror r3
20003a28:	200003dd 	ldrdcs	r0, [r0], -sp
20003a2c:	200002f9 	strdcs	r0, [r0], -r9
	...

200081c4 <food_obj>:
200081c4:	200039bc 			; <UNDEFINED> instruction: 0x200039bc
	...
200081d0:	00000001 	andeq	r0, r0, r1
200081d4:	00000001 	andeq	r0, r0, r1
200081d8:	20000319 	andcs	r0, r0, r9, lsl r3
200081dc:	2000037b 	andcs	r0, r0, fp, ror r3
200081e0:	200003dd 	ldrdcs	r0, [r0], -sp
200081e4:	200002f9 	strdcs	r0, [r0], -r9

200081e8 <rear>:
200081e8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200081ec:	200007b0 			; <UNDEFINED> instruction: 0x200007b0
200081f0:	200007b0 			; <UNDEFINED> instruction: 0x200007b0
200081f4:	20000766 	andcs	r0, r0, r6, ror #14
200081f8:	200007b0 			; <UNDEFINED> instruction: 0x200007b0
200081fc:	20000752 	andcs	r0, r0, r2, asr r7
20008200:	200007b0 			; <UNDEFINED> instruction: 0x200007b0
20008204:	2000073e 	andcs	r0, r0, lr, lsr r7
20008208:	200007b0 			; <UNDEFINED> instruction: 0x200007b0
2000820c:	2000077a 	andcs	r0, r0, sl, ror r7
20008210:	200007b0 			; <UNDEFINED> instruction: 0x200007b0
20008214:	2000078e 	andcs	r0, r0, lr, lsl #15
20008218:	200007b0 			; <UNDEFINED> instruction: 0x200007b0
2000821c:	200007b0 			; <UNDEFINED> instruction: 0x200007b0
20008220:	200007a2 	andcs	r0, r0, r2, lsr #15
20008224:	774f5b06 	strbvc	r5, [pc, -r6, lsl #22]
20008228:	7c7d6d66 	ldclvc	13, cr6, [sp], #-408	; 0xfffffe68
2000822c:	396f7f07 	stmdbcc	pc!, {r0, r1, r2, r8, r9, sl, fp, ip, sp, lr}^	; <UNPREDICTABLE>
20008230:	bf713f79 	svclt	0x00713f79
20008234:	0a030201 	beq	200c8a40 <rear+0xc0858>
20008238:	0b060504 	bleq	20189650 <rear+0x181468>
2000823c:	0c090807 	stceq	8, cr0, [r9], {7}
20008240:	0d0f000e 	stceq	0, cr0, [pc, #-56]	; 20008210 <rear+0x28>

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	000002c7 	andeq	r0, r0, r7, asr #5
       4:	00000004 	andeq	r0, r0, r4
       8:	01040000 	mrseq	r0, (UNDEF: 4)
       c:	00000051 	andeq	r0, r0, r1, asr r0
      10:	0001f80c 	andeq	pc, r1, ip, lsl #16
      14:	00015d00 	andeq	r5, r1, r0, lsl #26
      18:	00001000 	andeq	r1, r0, r0
      1c:	0002e620 	andeq	lr, r2, r0, lsr #12
      20:	00000000 	andeq	r0, r0, r0
      24:	08010200 	stmdaeq	r1, {r9}
      28:	0000014f 	andeq	r0, r0, pc, asr #2
      2c:	00000c03 	andeq	r0, r0, r3, lsl #24
      30:	066e0100 	strbteq	r0, [lr], -r0, lsl #2
      34:	200002aa 	andcs	r0, r0, sl, lsr #5
      38:	0000004c 	andeq	r0, r0, ip, asr #32
      3c:	007a9c01 	rsbseq	r9, sl, r1, lsl #24
      40:	78040000 	stmdavc	r4, {}	; <UNPREDICTABLE>
      44:	176e0100 	strbne	r0, [lr, -r0, lsl #2]!
      48:	0000007a 	andeq	r0, r0, sl, ror r0
      4c:	046c9102 	strbteq	r9, [ip], #-258	; 0xfffffefe
      50:	6e010079 	mcrvs	0, 0, r0, cr1, cr9, {3}
      54:	00007a1e 	andeq	r7, r0, lr, lsl sl
      58:	68910200 	ldmvs	r1, {r9}
      5c:	00011105 	andeq	r1, r1, r5, lsl #2
      60:	136f0100 	cmnne	pc, #0
      64:	00000025 	andeq	r0, r0, r5, lsr #32
      68:	06779102 	ldrbteq	r9, [r7], -r2, lsl #2
      6c:	0000002e 	andeq	r0, r0, lr, lsr #32
      70:	7a054d01 	bvc	15347c <startup-0x1feacb84>
      74:	07000000 	streq	r0, [r0, -r0]
      78:	04080000 	streq	r0, [r8], #-0
      7c:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
      80:	01d40300 	bicseq	r0, r4, r0, lsl #6
      84:	67010000 	strvs	r0, [r1, -r0]
      88:	00028006 	andeq	r8, r2, r6
      8c:	00002a20 	andeq	r2, r0, r0, lsr #20
      90:	b39c0100 	orrslt	r0, ip, #0
      94:	04000000 	streq	r0, [r0], #-0
      98:	67010063 	strvs	r0, [r1, -r3, rrx]
      9c:	00002525 	andeq	r2, r0, r5, lsr #10
      a0:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
      a4:	00002e06 	andeq	r2, r0, r6, lsl #28
      a8:	054d0100 	strbeq	r0, [sp, #-256]	; 0xffffff00
      ac:	0000007a 	andeq	r0, r0, sl, ror r0
      b0:	09000007 	stmdbeq	r0, {r0, r1, r2}
      b4:	000001c5 	andeq	r0, r0, r5, asr #3
      b8:	52066001 	andpl	r6, r6, #1, 0
      bc:	2e200002 	cdpcs	0, 2, cr0, cr0, cr2, {0}
      c0:	01000000 	mrseq	r0, (UNDEF: 0)
      c4:	0000d89c 	muleq	r0, ip, r8
      c8:	002e0600 	eoreq	r0, lr, r0, lsl #12
      cc:	4d010000 	stcmi	0, cr0, [r1, #-0]
      d0:	00007a05 	andeq	r7, r0, r5, lsl #20
      d4:	00000700 	andeq	r0, r0, r0, lsl #14
      d8:	00013f09 	andeq	r3, r1, r9, lsl #30
      dc:	06590100 	ldrbeq	r0, [r9], -r0, lsl #2
      e0:	20000224 	andcs	r0, r0, r4, lsr #4
      e4:	0000002e 	andeq	r0, r0, lr, lsr #32
      e8:	00fd9c01 	rscseq	r9, sp, r1, lsl #24
      ec:	2e060000 	cdpcs	0, 0, cr0, cr6, cr0, {0}
      f0:	01000000 	mrseq	r0, (UNDEF: 0)
      f4:	007a054d 	rsbseq	r0, sl, sp, asr #10
      f8:	00070000 	andeq	r0, r7, r0
      fc:	019c0900 	orrseq	r0, ip, r0, lsl #18
     100:	52010000 	andpl	r0, r1, #0, 0
     104:	0001f606 	andeq	pc, r1, r6, lsl #12
     108:	00002e20 	andeq	r2, r0, r0, lsr #28
     10c:	229c0100 	addscs	r0, ip, #0
     110:	06000001 	streq	r0, [r0], -r1
     114:	0000002e 	andeq	r0, r0, lr, lsr #32
     118:	7a054d01 	bvc	153524 <startup-0x1feacadc>
     11c:	07000000 	streq	r0, [r0, -r0]
     120:	df090000 	svcle	0x00090000
     124:	01000000 	mrseq	r0, (UNDEF: 0)
     128:	01c8064b 	biceq	r0, r8, fp, asr #12
     12c:	002e2000 	eoreq	r2, lr, r0
     130:	9c010000 	stcls	0, cr0, [r1], {-0}
     134:	00000159 	andeq	r0, r0, r9, asr r1
     138:	00002e0a 	andeq	r2, r0, sl, lsl #28
     13c:	054d0100 	strbeq	r0, [sp, #-256]	; 0xffffff00
     140:	0000007a 	andeq	r0, r0, sl, ror r0
     144:	0000014a 	andeq	r0, r0, sl, asr #2
     148:	00060007 	andeq	r0, r6, r7
     14c:	01000000 	mrseq	r0, (UNDEF: 0)
     150:	007a054f 	rsbseq	r0, sl, pc, asr #10
     154:	00070000 	andeq	r0, r7, r0
     158:	012f0b00 			; <UNDEFINED> instruction: 0x012f0b00
     15c:	42010000 	andmi	r0, r1, #0, 0
     160:	0000250f 	andeq	r2, r0, pc, lsl #10
     164:	00018c00 	andeq	r8, r1, r0, lsl #24
     168:	00003c20 	andeq	r3, r0, r0, lsr #24
     16c:	839c0100 	orrshi	r0, ip, #0
     170:	05000001 	streq	r0, [r0, #-1]
     174:	00000194 	muleq	r0, r4, r1
     178:	830a4601 	movwhi	r4, #42497	; 0xa601
     17c:	02000001 	andeq	r0, r0, #1, 0
     180:	02006f91 	andeq	r6, r0, #580	; 0x244
     184:	01580801 	cmpeq	r8, r1, lsl #16
     188:	cd0b0000 	stcgt	0, cr0, [fp, #-0]
     18c:	01000000 	mrseq	r0, (UNDEF: 0)
     190:	00250f39 	eoreq	r0, r5, r9, lsr pc
     194:	01500000 	cmpeq	r0, r0
     198:	003c2000 	eorseq	r2, ip, r0
     19c:	9c010000 	stcls	0, cr0, [r1], {-0}
     1a0:	000001b4 			; <UNDEFINED> instruction: 0x000001b4
     1a4:	0001bd05 	andeq	fp, r1, r5, lsl #26
     1a8:	0a3d0100 	beq	f405b0 <startup-0x1f0bfa50>
     1ac:	00000183 	andeq	r0, r0, r3, lsl #3
     1b0:	006f9102 	rsbeq	r9, pc, r2, lsl #2
     1b4:	0001190b 	andeq	r1, r1, fp, lsl #18
     1b8:	0f300100 	svceq	0x00300100
     1bc:	00000025 	andeq	r0, r0, r5, lsr #32
     1c0:	2000011c 	andcs	r0, r0, ip, lsl r1
     1c4:	00000034 	andeq	r0, r0, r4, lsr r0
     1c8:	01f09c01 	mvnseq	r9, r1, lsl #24
     1cc:	fe0a0000 	cdp2	0, 0, cr0, cr10, cr0, {0}
     1d0:	01000000 	mrseq	r0, (UNDEF: 0)
     1d4:	007a052c 	rsbseq	r0, sl, ip, lsr #10
     1d8:	01e00000 	mvneq	r0, r0
     1dc:	00070000 	andeq	r0, r7, r0
     1e0:	00010a05 	andeq	r0, r1, r5, lsl #20
     1e4:	0a340100 	beq	d005ec <startup-0x1f2ffa14>
     1e8:	00000183 	andeq	r0, r0, r3, lsl #3
     1ec:	00779102 	rsbseq	r9, r7, r2, lsl #2
     1f0:	00003a03 	andeq	r3, r0, r3, lsl #20
     1f4:	06290100 	strteq	r0, [r9], -r0, lsl #2
     1f8:	200000ec 	andcs	r0, r0, ip, ror #1
     1fc:	00000030 	andeq	r0, r0, r0, lsr r0
     200:	02249c01 	eoreq	r9, r4, #256	; 0x100
     204:	a80c0000 	stmdage	ip, {}	; <UNPREDICTABLE>
     208:	01000001 	tsteq	r0, r1
     20c:	00252b29 	eoreq	r2, r5, r9, lsr #22
     210:	91020000 	mrsls	r0, (UNDEF: 2)
     214:	00fe0677 	rscseq	r0, lr, r7, ror r6
     218:	2c010000 	stccs	0, cr0, [r1], {-0}
     21c:	00007a05 	andeq	r7, r0, r5, lsl #20
     220:	00000700 	andeq	r0, r0, r0, lsl #14
     224:	0000ed03 	andeq	lr, r0, r3, lsl #26
     228:	06230100 	strteq	r0, [r3], -r0, lsl #2
     22c:	200000c2 	andcs	r0, r0, r2, asr #1
     230:	0000002a 	andeq	r0, r0, sl, lsr #32
     234:	024a9c01 	subeq	r9, sl, #256	; 0x100
     238:	7b0c0000 	blvc	300240 <startup-0x1fcffdc0>
     23c:	01000005 	tsteq	r0, r5
     240:	00252523 	eoreq	r2, r5, r3, lsr #10
     244:	91020000 	mrsls	r0, (UNDEF: 2)
     248:	ad030077 	stcge	0, cr0, [r3, #-476]	; 0xfffffe24
     24c:	01000001 	tsteq	r0, r1
     250:	0098061d 	addseq	r0, r8, sp, lsl r6
     254:	002a2000 	eoreq	r2, sl, r0
     258:	9c010000 	stcls	0, cr0, [r1], {-0}
     25c:	00000270 	andeq	r0, r0, r0, ror r2
     260:	00050a0c 	andeq	r0, r5, ip, lsl #20
     264:	241d0100 	ldrcs	r0, [sp], #-256	; 0xffffff00
     268:	00000025 	andeq	r0, r0, r5, lsr #32
     26c:	00779102 	rsbseq	r9, r7, r2, lsl #2
     270:	0000190d 	andeq	r1, r0, sp, lsl #18
     274:	06180100 	ldreq	r0, [r8], -r0, lsl #2
     278:	2000005c 	andcs	r0, r0, ip, asr r0
     27c:	0000003c 	andeq	r0, r0, ip, lsr r0
     280:	02949c01 	addseq	r9, r4, #256	; 0x100
     284:	78040000 	stmdavc	r4, {}	; <UNPREDICTABLE>
     288:	29180100 	ldmdbcs	r8, {r8}
     28c:	00000025 	andeq	r0, r0, r5, lsr #32
     290:	00779102 	rsbseq	r9, r7, r2, lsl #2
     294:	0001e50d 	andeq	lr, r1, sp, lsl #10
     298:	06130100 	ldreq	r0, [r3], -r0, lsl #2
     29c:	2000002a 	andcs	r0, r0, sl, lsr #32
     2a0:	00000032 	andeq	r0, r0, r2, lsr r0
     2a4:	02b89c01 	adcseq	r9, r8, #256	; 0x100
     2a8:	78040000 	stmdavc	r4, {}	; <UNPREDICTABLE>
     2ac:	27130100 	ldrcs	r0, [r3, -r0, lsl #2]
     2b0:	00000025 	andeq	r0, r0, r5, lsr #32
     2b4:	00779102 	rsbseq	r9, r7, r2, lsl #2
     2b8:	00023e0e 	andeq	r3, r2, lr, lsl #28
     2bc:	06040100 	streq	r0, [r4], -r0, lsl #2
     2c0:	20000010 	andcs	r0, r0, r0, lsl r0
     2c4:	0000001a 	andeq	r0, r0, sl, lsl r0
     2c8:	84009c01 	strhi	r9, [r0], #-3073	; 0xfffff3ff
     2cc:	04000006 	streq	r0, [r0], #-6
     2d0:	00011400 	andeq	r1, r1, r0, lsl #8
     2d4:	51010400 	tstpl	r1, r0, lsl #8
     2d8:	0c000000 	stceq	0, cr0, [r0], {-0}
     2dc:	00000262 	andeq	r0, r0, r2, ror #4
     2e0:	0000015d 	andeq	r0, r0, sp, asr r1
	...
     2ec:	000001bc 			; <UNDEFINED> instruction: 0x000001bc
     2f0:	4f080102 	svcmi	0x00080102
     2f4:	03000001 	movweq	r0, #1
     2f8:	00000049 	andeq	r0, r0, r9, asr #32
     2fc:	0000003d 	andeq	r0, r0, sp, lsr r0
     300:	00004204 	andeq	r4, r0, r4, lsl #4
     304:	0003ff00 	andeq	pc, r3, r0, lsl #30
     308:	00002c05 	andeq	r2, r0, r5, lsl #24
     30c:	07040200 	streq	r0, [r4, -r0, lsl #4]
     310:	000006ad 	andeq	r0, r0, sp, lsr #13
     314:	00004205 	andeq	r4, r0, r5, lsl #4
     318:	03960600 	orrseq	r0, r6, #0, 12
     31c:	0f030000 	svceq	0x00030000
     320:	00003d1e 	andeq	r3, r0, lr, lsl sp
     324:	4c030500 	cfstr32mi	mvfx0, [r3], {-0}
     328:	07200011 			; <UNDEFINED> instruction: 0x07200011
     32c:	000002c4 	andeq	r0, r0, r4, asr #5
     330:	10010202 	andne	r0, r1, r2, lsl #4
     334:	00000084 	andeq	r0, r0, r4, lsl #1
     338:	02007808 	andeq	r7, r0, #8, 16	; 0x80000
     33c:	00251302 	eoreq	r1, r5, r2, lsl #6
     340:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     344:	03020079 	movweq	r0, #8313	; 0x2079
     348:	00002513 	andeq	r2, r0, r3, lsl r5
     34c:	09000100 	stmdbeq	r0, {r8}
     350:	000002de 	ldrdeq	r0, [r0], -lr
     354:	60020402 	andvs	r0, r2, r2, lsl #8
     358:	07000000 	streq	r0, [r0, -r0]
     35c:	00000342 	andeq	r0, r0, r2, asr #6
     360:	1008022c 	andne	r0, r8, ip, lsr #4
     364:	000000d1 	ldrdeq	r0, [r0], -r1
     368:	0003f80a 	andeq	pc, r3, sl, lsl #16
     36c:	09090200 	stmdbeq	r9, {r9}
     370:	000000d1 	ldrdeq	r0, [r0], -r1
     374:	035e0a00 	cmpeq	lr, #0, 20
     378:	0a020000 	beq	80380 <startup-0x1ff7fc80>
     37c:	0000d109 	andeq	sp, r0, r9, lsl #2
     380:	640a0400 	strvs	r0, [sl], #-1024	; 0xfffffc00
     384:	02000003 	andeq	r0, r0, #3, 0
     388:	00d1090b 	sbcseq	r0, r1, fp, lsl #18
     38c:	08080000 	stmdaeq	r8, {}	; <UNPREDICTABLE>
     390:	02007870 	andeq	r7, r0, #112, 16	; 0x700000
     394:	00dd0b0c 	sbcseq	r0, sp, ip, lsl #22
     398:	000c0000 	andeq	r0, ip, r0
     39c:	6905040b 	stmdbvs	r5, {r0, r1, r3, sl}
     3a0:	0500746e 	streq	r7, [r0, #-1134]	; 0xfffffb92
     3a4:	000000d1 	ldrdeq	r0, [r0], -r1
     3a8:	00008403 	andeq	r8, r0, r3, lsl #8
     3ac:	0000ed00 	andeq	lr, r0, r0, lsl #26
     3b0:	00420c00 	subeq	r0, r2, r0, lsl #24
     3b4:	000f0000 	andeq	r0, pc, r0
     3b8:	00024a09 	andeq	r4, r2, r9, lsl #20
     3bc:	030d0200 	movweq	r0, #53760	; 0xd200
     3c0:	00000090 	muleq	r0, r0, r0
     3c4:	00024909 	andeq	r4, r2, r9, lsl #18
     3c8:	0e0d0200 	cdpeq	2, 0, cr0, cr13, cr0, {0}
     3cc:	00000105 	andeq	r0, r0, r5, lsl #2
     3d0:	0090040d 	addseq	r0, r0, sp, lsl #8
     3d4:	da070000 	ble	1c03dc <startup-0x1fe3fc24>
     3d8:	24000003 	strcs	r0, [r0], #-3
     3dc:	8e100f02 	cdphi	15, 1, cr0, cr0, cr2, {0}
     3e0:	08000001 	stmdaeq	r0, {r0}
     3e4:	006f6567 	rsbeq	r6, pc, r7, ror #10
     3e8:	f90f1002 			; <UNDEFINED> instruction: 0xf90f1002
     3ec:	00000000 	andeq	r0, r0, r0
     3f0:	0002580a 	andeq	r5, r2, sl, lsl #16
     3f4:	09110200 	ldmdbeq	r1, {r9}
     3f8:	000000d1 	ldrdeq	r0, [r0], -r1
     3fc:	025d0a04 	subseq	r0, sp, #4, 20	; 0x4000
     400:	11020000 	mrsne	r0, (UNDEF: 2)
     404:	0000d10e 	andeq	sp, r0, lr, lsl #2
     408:	ee0a0800 	cdp	8, 0, cr0, cr10, cr0, {0}
     40c:	02000002 	andeq	r0, r0, #2, 0
     410:	00d10912 	sbcseq	r0, r1, r2, lsl r9
     414:	0a0c0000 	beq	30041c <startup-0x1fcffbe4>
     418:	000002f3 	strdeq	r0, [r0], -r3
     41c:	d10e1202 	tstle	lr, r2, lsl #4
     420:	10000000 	andne	r0, r0, r0
     424:	0003770a 	andeq	r7, r3, sl, lsl #14
     428:	0d130200 	lfmeq	f0, 4, [r3, #-0]
     42c:	0000019f 	muleq	r0, pc, r1	; <UNPREDICTABLE>
     430:	06380a14 			; <UNDEFINED> instruction: 0x06380a14
     434:	14020000 	strne	r0, [r2], #-0
     438:	00019f0d 	andeq	r9, r1, sp, lsl #30
     43c:	c50a1800 	strgt	r1, [sl, #-2048]	; 0xfffff800
     440:	02000006 	andeq	r0, r0, #6, 0
     444:	019f0d15 	orrseq	r0, pc, r5, lsl sp	; <UNPREDICTABLE>
     448:	0a1c0000 	beq	700450 <startup-0x1f8ffbb0>
     44c:	000002e4 	andeq	r0, r0, r4, ror #5
     450:	ba0d1602 	blt	345c60 <startup-0x1fcba3a0>
     454:	20000001 	andcs	r0, r0, r1
     458:	01990e00 	orrseq	r0, r9, r0, lsl #28
     45c:	990f0000 	stmdbls	pc, {}	; <UNPREDICTABLE>
     460:	00000001 	andeq	r0, r0, r1
     464:	010b040d 	tsteq	fp, sp, lsl #8
     468:	040d0000 	streq	r0, [sp], #-0
     46c:	0000018e 	andeq	r0, r0, lr, lsl #3
     470:	0001ba0e 	andeq	fp, r1, lr, lsl #20
     474:	01990f00 	orrseq	r0, r9, r0, lsl #30
     478:	d10f0000 	mrsle	r0, CPSR
     47c:	0f000000 	svceq	0x00000000
     480:	000000d1 	ldrdeq	r0, [r0], -r1
     484:	a5040d00 	strge	r0, [r4, #-3328]	; 0xfffff300
     488:	09000001 	stmdbeq	r0, {r0}
     48c:	0000042e 	andeq	r0, r0, lr, lsr #8
     490:	0b031702 	bleq	c60a0 <startup-0x1ff39f60>
     494:	09000001 	stmdbeq	r0, {r0}
     498:	0000042d 	andeq	r0, r0, sp, lsr #8
     49c:	990c1702 	stmdbls	ip, {r1, r8, r9, sl, ip}
     4a0:	10000001 	andne	r0, r0, r1
     4a4:	09190208 	ldmdbeq	r9, {r3, r9}
     4a8:	00000209 	andeq	r0, r0, r9, lsl #4
     4ac:	0003900a 	andeq	r9, r3, sl
     4b0:	131a0200 	tstne	sl, #0, 4
     4b4:	00000025 	andeq	r0, r0, r5, lsr #32
     4b8:	02f80a00 	rscseq	r0, r8, #0, 20
     4bc:	1b020000 	blne	804c4 <startup-0x1ff7fb3c>
     4c0:	00002513 	andeq	r2, r0, r3, lsl r5
     4c4:	7b0a0100 	blvc	2808cc <startup-0x1fd7f734>
     4c8:	02000005 	andeq	r0, r0, #5, 0
     4cc:	0209141c 	andeq	r1, r9, #28, 8	; 0x1c000000
     4d0:	00040000 	andeq	r0, r4, r0
     4d4:	0025040d 	eoreq	r0, r5, sp, lsl #8
     4d8:	c6090000 	strgt	r0, [r9], -r0
     4dc:	02000003 	andeq	r0, r0, #3, 0
     4e0:	01d8021d 	bicseq	r0, r8, sp, lsl r2
     4e4:	25030000 	strcs	r0, [r3, #-0]
     4e8:	2b000000 	blcs	4f0 <startup-0x1ffffb10>
     4ec:	0c000002 	stceq	0, cr0, [r0], {2}
     4f0:	00000042 	andeq	r0, r0, r2, asr #32
     4f4:	ae060008 	cdpge	0, 0, cr0, cr6, cr8, {0}
     4f8:	04000002 	streq	r0, [r0], #-2
     4fc:	021b1603 	andseq	r1, fp, #3145728	; 0x300000
     500:	03050000 	movweq	r0, #20480	; 0x5000
     504:	20003958 	andcs	r3, r0, r8, asr r9
     508:	0002cb11 	andeq	ip, r2, r1, lsl fp
     50c:	0a4f0100 	beq	13c0914 <startup-0x1ec3f6ec>
     510:	000000ed 	andeq	r0, r0, sp, ror #1
     514:	39640305 	stmdbcc	r4!, {r0, r2, r8, r9}^
     518:	04112000 	ldreq	r2, [r1], #-0
     51c:	01000003 	tsteq	r0, r3
     520:	00ed0a5b 	rsceq	r0, sp, fp, asr sl
     524:	03050000 	movweq	r0, #20480	; 0x5000
     528:	20003990 	mulcs	r0, r0, r9
     52c:	00031711 	andeq	r1, r3, r1, lsl r7
     530:	0a660100 	beq	1980938 <startup-0x1e67f6c8>
     534:	000000ed 	andeq	r0, r0, sp, ror #1
     538:	39bc0305 	ldmibcc	ip!, {r0, r2, r8, r9}
     53c:	4c062000 	stcmi	0, cr2, [r6], {-0}
     540:	01000003 	tsteq	r0, r3
     544:	01c00f71 	biceq	r0, r0, r1, ror pc
     548:	03050000 	movweq	r0, #20480	; 0x5000
     54c:	200039e8 	andcs	r3, r0, r8, ror #19
     550:	0001c003 	andeq	ip, r1, r3
     554:	00029600 	andeq	r9, r2, r0, lsl #12
     558:	00420400 	subeq	r0, r2, r0, lsl #8
     55c:	01fd0000 	mvnseq	r0, r0
     560:	03380600 	teqeq	r8, #0, 12
     564:	7c010000 	stcvc	0, cr0, [r1], {-0}
     568:	0002850f 	andeq	r8, r2, pc, lsl #10
     56c:	0c030500 	cfstr32eq	mvfx0, [r3], {-0}
     570:	0620003a 			; <UNDEFINED> instruction: 0x0620003a
     574:	0000037c 	andeq	r0, r0, ip, ror r3
     578:	c00f8701 	andgt	r8, pc, r1, lsl #14
     57c:	05000001 	streq	r0, [r0, #-1]
     580:	0081c403 	addeq	ip, r1, r3, lsl #8
     584:	03fb0620 	mvnseq	r0, #32, 12	; 0x2000000
     588:	b5010000 	strlt	r0, [r1, #-0]
     58c:	0000d815 	andeq	sp, r0, r5, lsl r8
     590:	4c030500 	cfstr32mi	mvfx0, [r3], {-0}
     594:	12200021 	eorne	r0, r0, #33, 0	; 0x21
     598:	00000333 	andeq	r0, r0, r3, lsr r3
     59c:	06011201 	streq	r1, [r1], -r1, lsl #4
     5a0:	200007fc 	strdcs	r0, [r0], -ip
     5a4:	000000a4 	andeq	r0, r0, r4, lsr #1
     5a8:	03109c01 	tsteq	r0, #256	; 0x100
     5ac:	64130000 	ldrvs	r0, [r3], #-0
     5b0:	01007269 	tsteq	r0, r9, ror #4
     5b4:	d10f0112 	tstle	pc, r2, lsl r1	; <UNPREDICTABLE>
     5b8:	02000000 	andeq	r0, r0, #0, 0
     5bc:	68137491 	ldmdavs	r3, {r0, r4, r7, sl, ip, sp, lr}
     5c0:	01120100 	tsteq	r2, r0, lsl #2
     5c4:	0001cc1c 	andeq	ip, r1, ip, lsl ip
     5c8:	70910200 	addsvc	r0, r1, r0, lsl #4
     5cc:	01006213 	tsteq	r0, r3, lsl r2
     5d0:	10280112 	eorne	r0, r8, r2, lsl r1
     5d4:	02000003 	andeq	r0, r0, #3, 0
     5d8:	0d006c91 	stceq	12, cr6, [r0, #-580]	; 0xfffffdbc
     5dc:	0001cc04 	andeq	ip, r1, r4, lsl #24
     5e0:	03251400 			; <UNDEFINED> instruction: 0x03251400
     5e4:	e1010000 	mrs	r0, (UNDEF: 1)
     5e8:	0006a406 	andeq	sl, r6, r6, lsl #8
     5ec:	00015820 	andeq	r5, r1, r0, lsr #16
     5f0:	c19c0100 	orrsgt	r0, ip, r0, lsl #2
     5f4:	15000003 	strne	r0, [r0, #-3]
     5f8:	0000036a 	andeq	r0, r0, sl, ror #6
     5fc:	d10fe101 	tstle	pc, r1, lsl #2
     600:	03000000 	movweq	r0, #0
     604:	156fdc91 	strbne	sp, [pc, #-3217]!	; fffff97b <rear+0xdfff7793>
     608:	00000253 	andeq	r0, r0, r3, asr r2
     60c:	c11ce101 	tstgt	ip, r1, lsl #2
     610:	03000003 	movweq	r0, #3
     614:	066fd891 			; <UNDEFINED> instruction: 0x066fd891
     618:	000003f3 	strdeq	r0, [r0], -r3
     61c:	d109e201 	tstle	r9, r1, lsl #4
     620:	02000000 	andeq	r0, r0, #0, 0
     624:	56066c91 			; <UNDEFINED> instruction: 0x56066c91
     628:	01000003 	tsteq	r0, r3
     62c:	00d113e2 	sbcseq	r1, r1, r2, ror #7
     630:	91020000 	mrsls	r0, (UNDEF: 2)
     634:	03850668 	orreq	r0, r5, #104, 12	; 0x6800000
     638:	e3010000 	movw	r0, #4096	; 0x1000
     63c:	0003cd0a 	andeq	ip, r3, sl, lsl #26
     640:	5f910200 	svcpl	0x00910200
     644:	00035106 	andeq	r5, r3, r6, lsl #2
     648:	0de50100 	stfeqe	f0, [r5]
     64c:	000001cc 	andeq	r0, r0, ip, asr #3
     650:	06649102 	strbteq	r9, [r4], -r2, lsl #2
     654:	0000041a 	andeq	r0, r0, sl, lsl r4
     658:	cc20e501 	cfstr32gt	mvfx14, [r0], #-4
     65c:	02000001 	andeq	r0, r0, #1, 0
     660:	3d066091 	stccc	0, cr6, [r6, #-580]	; 0xfffffdbc
     664:	01000003 	tsteq	r0, r3
     668:	03d40de6 	bicseq	r0, r4, #14720	; 0x3980
     66c:	91030000 	mrsls	r0, (UNDEF: 3)
     670:	3e166fe4 	cdpcc	15, 1, cr6, cr6, cr4, {7}
     674:	70200007 	eorvc	r0, r0, r7
     678:	17000000 	strne	r0, [r0, -r0]
     67c:	00000333 	andeq	r0, r0, r3, lsr r3
     680:	1d010701 	stcne	7, cr0, [r1, #-4]
     684:	000000d1 	ldrdeq	r0, [r0], -r1
     688:	00000018 	andeq	r0, r0, r8, lsl r0
     68c:	03c7040d 	biceq	r0, r7, #218103808	; 0xd000000
     690:	040d0000 	streq	r0, [sp], #-0
     694:	000003cd 	andeq	r0, r0, sp, asr #7
     698:	58080102 	stmdapl	r8, {r1, r8}
     69c:	03000001 	movweq	r0, #1
     6a0:	000001cc 	andeq	r0, r0, ip, asr #3
     6a4:	000003e5 	andeq	r0, r0, r5, ror #7
     6a8:	00004204 	andeq	r4, r0, r4, lsl #4
     6ac:	0001fd00 	andeq	pc, r1, r0, lsl #26
     6b0:	0003eb14 	andeq	lr, r3, r4, lsl fp
     6b4:	06d80100 	ldrbeq	r0, [r8], r0, lsl #2
     6b8:	2000068c 	andcs	r0, r0, ip, lsl #13
     6bc:	00000018 	andeq	r0, r0, r8, lsl r0
     6c0:	04099c01 	streq	r9, [r9], #-3073	; 0xfffff3ff
     6c4:	70190000 	andsvc	r0, r9, r0
     6c8:	1bd80100 	blne	ff600ad0 <rear+0xdf5f88e8>
     6cc:	000001cc 	andeq	r0, r0, ip, asr #3
     6d0:	00749102 	rsbseq	r9, r4, r2, lsl #2
     6d4:	0002b914 	andeq	fp, r2, r4, lsl r9
     6d8:	06cb0100 	strbeq	r0, [fp], r0, lsl #2
     6dc:	20000628 	andcs	r0, r0, r8, lsr #12
     6e0:	00000064 	andeq	r0, r0, r4, rrx
     6e4:	045e9c01 	ldrbeq	r9, [lr], #-3073	; 0xfffff3ff
     6e8:	68190000 	ldmdavs	r9, {}	; <UNPREDICTABLE>
     6ec:	19cb0100 	stmibne	fp, {r8}^
     6f0:	000001cc 	andeq	r0, r0, ip, asr #3
     6f4:	196c9102 	stmdbne	ip!, {r1, r8, ip, pc}^
     6f8:	cb010062 	blgt	40888 <startup-0x1ffbf778>
     6fc:	00031025 	andeq	r1, r3, r5, lsr #32
     700:	68910200 	ldmvs	r1, {r9}
     704:	01007319 	tsteq	r0, r9, lsl r3
     708:	045e30cb 	ldrbeq	r3, [lr], #-203	; 0xffffff35
     70c:	91020000 	mrsls	r0, (UNDEF: 2)
     710:	06401664 	strbeq	r1, [r0], -r4, ror #12
     714:	00422000 	subeq	r2, r2, r0
     718:	691a0000 	ldmdbvs	sl, {}	; <UNPREDICTABLE>
     71c:	0ece0100 	poleqe	f0, f6, f0
     720:	000000d1 	ldrdeq	r0, [r0], -r1
     724:	00749102 	rsbseq	r9, r4, r2, lsl #2
     728:	c0040d00 	andgt	r0, r4, r0, lsl #26
     72c:	1b000001 	blne	738 <startup-0x1ffff8c8>
     730:	0000032a 	andeq	r0, r0, sl, lsr #6
     734:	bc06b701 	stclt	7, cr11, [r6], {1}
     738:	6c200005 	stcvs	0, cr0, [r0], #-20	; 0xffffffec
     73c:	01000000 	mrseq	r0, (UNDEF: 0)
     740:	02a3149c 	adceq	r1, r3, #156, 8	; 0x9c000000
     744:	ac010000 	stcge	0, cr0, [r1], {-0}
     748:	00057606 	andeq	r7, r5, r6, lsl #12
     74c:	00004620 	andeq	r4, r0, r0, lsr #12
     750:	b59c0100 	ldrlt	r0, [ip, #256]	; 0x100
     754:	19000004 	stmdbne	r0, {r2}
     758:	ac010068 	stcge	0, cr0, [r1], {104}	; 0x68
     75c:	0001cc19 	andeq	ip, r1, r9, lsl ip
     760:	6c910200 	lfmvs	f0, 4, [r1], {0}
     764:	0100621a 	tsteq	r0, sl, lsl r2
     768:	01cc0dae 	biceq	r0, ip, lr, lsr #27
     76c:	91020000 	mrsls	r0, (UNDEF: 2)
     770:	02ff1c74 	rscseq	r1, pc, #116, 24	; 0x7400
     774:	ae010000 	cdpge	0, 0, cr0, cr1, cr0, {0}
     778:	0000d111 	andeq	sp, r0, r1, lsl r1
     77c:	00001800 	andeq	r1, r0, r0, lsl #16
     780:	00040214 	andeq	r0, r4, r4, lsl r2
     784:	06980100 	ldreq	r0, [r8], r0, lsl #2
     788:	200004b4 			; <UNDEFINED> instruction: 0x200004b4
     78c:	000000c2 	andeq	r0, r0, r2, asr #1
     790:	05429c01 	strbeq	r9, [r2, #-3073]	; 0xfffff3ff
     794:	73190000 	tstvc	r9, #0, 0
     798:	1a980100 	bne	fe600ba0 <rear+0xde5f89b8>
     79c:	00000542 	andeq	r0, r0, r2, asr #10
     7a0:	195c9102 	ldmdbne	ip, {r1, r8, ip, pc}^
     7a4:	98010078 	stmdals	r1, {r3, r4, r5, r6}
     7a8:	0000d121 	andeq	sp, r0, r1, lsr #2
     7ac:	58910200 	ldmpl	r1, {r9}
     7b0:	01007919 	tsteq	r0, r9, lsl r9
     7b4:	00d12898 	smullseq	r2, r1, r8, r8
     7b8:	91020000 	mrsls	r0, (UNDEF: 2)
     7bc:	00691a54 	rsbeq	r1, r9, r4, asr sl
     7c0:	d1099901 	tstle	r9, r1, lsl #18
     7c4:	02000000 	andeq	r0, r0, #0, 0
     7c8:	6a1a7491 	bvs	69da14 <startup-0x1f9625ec>
     7cc:	0b990100 	bleq	fe640bd4 <rear+0xde6389ec>
     7d0:	000000d1 	ldrdeq	r0, [r0], -r1
     7d4:	1a709102 	bne	1c24be4 <startup-0x1e3db41c>
     7d8:	9901006b 	stmdbls	r1, {r0, r1, r3, r5, r6}
     7dc:	0000d10d 	andeq	sp, r0, sp, lsl #2
     7e0:	6c910200 	lfmvs	f0, 4, [r1], {0}
     7e4:	0003b206 	andeq	fp, r3, r6, lsl #4
     7e8:	10990100 	addsne	r0, r9, r0, lsl #2
     7ec:	000000d1 	ldrdeq	r0, [r0], -r1
     7f0:	16689102 	strbtne	r9, [r8], -r2, lsl #2
     7f4:	200004f2 	strdcs	r0, [r0], -r2
     7f8:	0000005a 	andeq	r0, r0, sl, asr r0
     7fc:	0001a806 	andeq	sl, r1, r6, lsl #16
     800:	1ba30100 	blne	fe8c0c08 <rear+0xde8b8a20>
     804:	00000025 	andeq	r0, r0, r5, lsr #32
     808:	00679102 	rsbeq	r9, r7, r2, lsl #2
     80c:	0f040d00 	svceq	0x00040d00
     810:	1d000002 	stcne	0, cr0, [r0, #-8]
     814:	000003c1 	andeq	r0, r0, r1, asr #7
     818:	880d9201 	stmdahi	sp, {r0, r9, ip, pc}
     81c:	2c200004 	stccs	0, cr0, [r0], #-16
     820:	01000000 	mrseq	r0, (UNDEF: 0)
     824:	0005999c 	muleq	r5, ip, r9
     828:	00731900 	rsbseq	r1, r3, r0, lsl #18
     82c:	42219201 	eormi	r9, r1, #268435456	; 0x10000000
     830:	02000005 	andeq	r0, r0, #5, 0
     834:	7b157491 	blvc	55da80 <startup-0x1faa2580>
     838:	01000005 	tsteq	r0, r5
     83c:	02093392 	andeq	r3, r9, #1207959554	; 0x48000002
     840:	91020000 	mrsls	r0, (UNDEF: 2)
     844:	03901570 	orrseq	r1, r0, #112, 10	; 0x1c000000
     848:	92010000 	andls	r0, r1, #0, 0
     84c:	0000d13d 	andeq	sp, r0, sp, lsr r1
     850:	6c910200 	lfmvs	f0, 4, [r1], {0}
     854:	0002f815 	andeq	pc, r2, r5, lsl r8	; <UNPREDICTABLE>
     858:	48920100 	ldmmi	r2, {r8}
     85c:	000000d1 	ldrdeq	r0, [r0], -r1
     860:	00689102 	rsbeq	r9, r8, r2, lsl #2
     864:	00040e14 	andeq	r0, r4, r4, lsl lr
     868:	06310100 	ldrteq	r0, [r1], -r0, lsl #2
     86c:	200003dc 	ldrdcs	r0, [r0], -ip
     870:	000000ac 	andeq	r0, r0, ip, lsr #1
     874:	05bd9c01 	ldreq	r9, [sp, #3073]!	; 0xc01
     878:	6f190000 	svcvs	0x00190000
     87c:	1a310100 	bne	c40c84 <startup-0x1f3bf37c>
     880:	000001cc 	andeq	r0, r0, ip, asr #3
     884:	00749102 	rsbseq	r9, r4, r2, lsl #2
     888:	0003cd14 	andeq	ip, r3, r4, lsl sp
     88c:	062b0100 	strteq	r0, [fp], -r0, lsl #2
     890:	2000037a 	andcs	r0, r0, sl, ror r3
     894:	00000062 	andeq	r0, r0, r2, rrx
     898:	05f89c01 	ldrbeq	r9, [r8, #3073]!	; 0xc01
     89c:	6f190000 	svcvs	0x00190000
     8a0:	1b2b0100 	blne	ac0ca8 <startup-0x1f53f358>
     8a4:	000001cc 	andeq	r0, r0, ip, asr #3
     8a8:	166c9102 	strbtne	r9, [ip], -r2, lsl #2
     8ac:	20000382 	andcs	r0, r0, r2, lsl #7
     8b0:	00000050 	andeq	r0, r0, r0, asr r0
     8b4:	0100691a 	tsteq	r0, sl, lsl r9
     8b8:	00d10e2c 	sbcseq	r0, r1, ip, lsr #28
     8bc:	91020000 	mrsls	r0, (UNDEF: 2)
     8c0:	14000074 	strne	r0, [r0], #-116	; 0xffffff8c
     8c4:	000003df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
     8c8:	18062501 	stmdane	r6, {r0, r8, sl, sp}
     8cc:	62200003 	eorvs	r0, r0, #3, 0
     8d0:	01000000 	mrseq	r0, (UNDEF: 0)
     8d4:	0006339c 	muleq	r6, ip, r3
     8d8:	006f1900 	rsbeq	r1, pc, r0, lsl #18
     8dc:	cc1a2501 	cfldr32gt	mvfx2, [sl], {1}
     8e0:	02000001 	andeq	r0, r0, #1, 0
     8e4:	20166c91 	mulscs	r6, r1, ip
     8e8:	50200003 	eorpl	r0, r0, r3
     8ec:	1a000000 	bne	8f4 <startup-0x1ffff70c>
     8f0:	26010069 	strcs	r0, [r1], -r9, rrx
     8f4:	0000d10e 	andeq	sp, r0, lr, lsl #2
     8f8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     8fc:	a11e0000 	tstge	lr, r0
     900:	01000003 	tsteq	r0, r3
     904:	02f80620 	rscseq	r0, r8, #32, 12	; 0x2000000
     908:	00202000 	eoreq	r2, r0, r0
     90c:	9c010000 	stcls	0, cr0, [r1], {-0}
     910:	00000675 	andeq	r0, r0, r5, ror r6
     914:	01006f19 	tsteq	r0, r9, lsl pc
     918:	01cc1f20 	biceq	r1, ip, r0, lsr #30
     91c:	91020000 	mrsls	r0, (UNDEF: 2)
     920:	041f1574 	ldreq	r1, [pc], #-1396	; 928 <startup-0x1ffff6d8>
     924:	20010000 	andcs	r0, r1, r0
     928:	0000d126 	andeq	sp, r0, r6, lsr #2
     92c:	70910200 	addsvc	r0, r1, r0, lsl #4
     930:	00042615 	andeq	r2, r4, r5, lsl r6
     934:	32200100 	eorcc	r0, r0, #0
     938:	000000d1 	ldrdeq	r0, [r0], -r1
     93c:	006c9102 	rsbeq	r9, ip, r2, lsl #2
     940:	00036f1b 	andeq	r6, r3, fp, lsl pc
     944:	06180100 	ldreq	r0, [r8], -r0, lsl #2
     948:	20000000 	andcs	r0, r0, r0
     94c:	0000000c 	andeq	r0, r0, ip
     950:	20009c01 	andcs	r9, r0, r1, lsl #24
     954:	04000001 	streq	r0, [r0], #-1
     958:	0002ee00 	andeq	lr, r2, r0, lsl #28
     95c:	51010400 	tstpl	r1, r0, lsl #8
     960:	0c000000 	stceq	0, cr0, [r0], {-0}
     964:	00000473 	andeq	r0, r0, r3, ror r4
     968:	0000015d 	andeq	r0, r0, sp, asr r1
     96c:	200008a0 	andcs	r0, r0, r0, lsr #17
     970:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     974:	000005e7 	andeq	r0, r0, r7, ror #11
     978:	4f080102 	svcmi	0x00080102
     97c:	03000001 	movweq	r0, #1
     980:	00000447 	andeq	r0, r0, r7, asr #8
     984:	70062401 	andvc	r2, r6, r1, lsl #8
     988:	20200009 	eorcs	r0, r0, r9
     98c:	01000000 	mrseq	r0, (UNDEF: 0)
     990:	0000509c 	muleq	r0, ip, r0
     994:	00630400 	rsbeq	r0, r3, r0, lsl #8
     998:	251c2401 	ldrcs	r2, [ip, #-1025]	; 0xfffffbff
     99c:	02000000 	andeq	r0, r0, #0, 0
     9a0:	05007791 	streq	r7, [r0, #-1937]	; 0xfffff86f
     9a4:	00000442 	andeq	r0, r0, r2, asr #8
     9a8:	250f1401 	strcs	r1, [pc, #-1025]	; 5af <startup-0x1ffffa51>
     9ac:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     9b0:	68200009 	stmdavs	r0!, {r0, r3}
     9b4:	01000000 	mrseq	r0, (UNDEF: 0)
     9b8:	0000a79c 	muleq	r0, ip, r7
     9bc:	045c0600 	ldrbeq	r0, [ip], #-1536	; 0xfffffa00
     9c0:	15010000 	strne	r0, [r1, #-0]
     9c4:	0000a713 	andeq	sl, r0, r3, lsl r7
     9c8:	58910200 	ldmpl	r1, {r9}
     9cc:	00043b06 	andeq	r3, r4, r6, lsl #22
     9d0:	13160100 	tstne	r6, #0
     9d4:	000000a7 	andeq	r0, r0, r7, lsr #1
     9d8:	07489102 	strbeq	r9, [r8, -r2, lsl #2]
     9dc:	00776f72 	rsbseq	r6, r7, r2, ror pc
     9e0:	be091901 	vmlalt.f16	s2, s18, s2	; <UNPREDICTABLE>
     9e4:	02000000 	andeq	r0, r0, #0, 0
     9e8:	54066c91 	strpl	r6, [r6], #-3217	; 0xfffff36f
     9ec:	01000004 	tsteq	r0, r4
     9f0:	00be0e19 	adcseq	r0, lr, r9, lsl lr
     9f4:	91020000 	mrsls	r0, (UNDEF: 2)
     9f8:	25080068 	strcs	r0, [r8, #-104]	; 0xffffff98
     9fc:	b7000000 	strlt	r0, [r0, -r0]
     a00:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
     a04:	000000b7 	strheq	r0, [r0], -r7
     a08:	0402000f 	streq	r0, [r2], #-15
     a0c:	0006ad07 	andeq	sl, r6, r7, lsl #26
     a10:	05040a00 	streq	r0, [r4, #-2560]	; 0xfffff600
     a14:	00746e69 	rsbseq	r6, r4, r9, ror #28
     a18:	00044f0b 	andeq	r4, r4, fp, lsl #30
     a1c:	05080100 	streq	r0, [r8, #-256]	; 0xffffff00
     a20:	000000be 	strheq	r0, [r0], -lr
     a24:	200008c4 	andcs	r0, r0, r4, asr #17
     a28:	00000044 	andeq	r0, r0, r4, asr #32
     a2c:	00fc9c01 	rscseq	r9, ip, r1, lsl #24
     a30:	6a070000 	bvs	1c0a38 <startup-0x1fe3f5c8>
     a34:	09090100 	stmdbeq	r9, {r8}
     a38:	000000be 	strheq	r0, [r0], -lr
     a3c:	06749102 	ldrbteq	r9, [r4], -r2, lsl #2
     a40:	00000435 	andeq	r0, r0, r5, lsr r4
     a44:	fc0a0a01 	stc2	10, cr0, [sl], {1}	; <UNPREDICTABLE>
     a48:	02000000 	andeq	r0, r0, #0, 0
     a4c:	02007391 	andeq	r7, r0, #1140850690	; 0x44000002
     a50:	01580801 	cmpeq	r8, r1, lsl #16
     a54:	660c0000 	strvs	r0, [ip], -r0
     a58:	01000004 	tsteq	r0, r4
     a5c:	08a00604 	stmiaeq	r0!, {r2, r9, sl}
     a60:	00242000 	eoreq	r2, r4, r0
     a64:	9c010000 	stcls	0, cr0, [r1], {-0}
     a68:	01006904 	tsteq	r0, r4, lsl #18
     a6c:	00be1704 	adcseq	r1, lr, r4, lsl #14
     a70:	91020000 	mrsls	r0, (UNDEF: 2)
     a74:	9e000074 	mcrls	0, 0, r0, cr0, cr4, {3}
     a78:	04000000 	streq	r0, [r0], #-0
     a7c:	0003cd00 	andeq	ip, r3, r0, lsl #26
     a80:	51010400 	tstpl	r1, r0, lsl #8
     a84:	0c000000 	stceq	0, cr0, [r0], {-0}
     a88:	000004bd 			; <UNDEFINED> instruction: 0x000004bd
     a8c:	0000015d 	andeq	r0, r0, sp, asr r1
     a90:	20000990 	mulcs	r0, r0, r9
     a94:	00000062 	andeq	r0, r0, r2, rrx
     a98:	000006d2 	ldrdeq	r0, [r0], -r2
     a9c:	4f080102 	svcmi	0x00080102
     aa0:	03000001 	movweq	r0, #1
     aa4:	00000000 	andeq	r0, r0, r0
     aa8:	b4062601 	strlt	r2, [r6], #-1537	; 0xfffff9ff
     aac:	3e200009 	cdpcc	0, 2, cr0, cr0, cr9, {0}
     ab0:	01000000 	mrseq	r0, (UNDEF: 0)
     ab4:	0000519c 	muleq	r0, ip, r1
     ab8:	736d0400 	cmnvc	sp, #0, 8
     abc:	1f260100 	svcne	0x00260100
     ac0:	00000051 	andeq	r0, r0, r1, asr r0
     ac4:	00749102 	rsbseq	r9, r4, r2, lsl #2
     ac8:	ad070402 	cfstrsge	mvf0, [r7, #-8]
     acc:	05000006 	streq	r0, [r0, #-6]
     ad0:	0000002e 	andeq	r0, r0, lr, lsr #32
     ad4:	a4061a01 	strge	r1, [r6], #-2561	; 0xfffff5ff
     ad8:	10200009 	eorne	r0, r0, r9
     adc:	01000000 	mrseq	r0, (UNDEF: 0)
     ae0:	00007d9c 	muleq	r0, ip, sp
     ae4:	73750400 	cmnvc	r5, #0, 8
     ae8:	1f1a0100 	svcne	0x001a0100
     aec:	00000051 	andeq	r0, r0, r1, asr r0
     af0:	00749102 	rsbseq	r9, r4, r2, lsl #2
     af4:	0004b106 	andeq	fp, r4, r6, lsl #2
     af8:	06120100 	ldreq	r0, [r2], -r0, lsl #2
     afc:	2000099a 	mulcs	r0, sl, r9
     b00:	0000000a 	andeq	r0, r0, sl
     b04:	fe069c01 	cdp2	12, 0, cr9, cr6, cr1, {0}
     b08:	01000000 	mrseq	r0, (UNDEF: 0)
     b0c:	09900605 	ldmibeq	r0, {r0, r2, r9, sl}
     b10:	000a2000 	andeq	r2, sl, r0
     b14:	9c010000 	stcls	0, cr0, [r1], {-0}
     b18:	00038800 	andeq	r8, r3, r0, lsl #16
     b1c:	4f000400 	svcmi	0x00000400
     b20:	04000004 	streq	r0, [r0], #-4
     b24:	00005101 	andeq	r5, r0, r1, lsl #2
     b28:	05260c00 	streq	r0, [r6, #-3072]!	; 0xfffff400
     b2c:	015d0000 	cmpeq	sp, r0
     b30:	09f40000 	ldmibeq	r4!, {}^	; <UNPREDICTABLE>
     b34:	05242000 	streq	r2, [r4, #-0]!
     b38:	07720000 	ldrbeq	r0, [r2, -r0]!
     b3c:	d1020000 	mrsle	r0, (UNDEF: 2)
     b40:	03000005 	movweq	r0, #5
     b44:	00311701 	eorseq	r1, r1, r1, lsl #14
     b48:	01030000 	mrseq	r0, (UNDEF: 3)
     b4c:	00014f08 	andeq	r4, r1, r8, lsl #30
     b50:	00550400 	subseq	r0, r5, r0, lsl #8
     b54:	00490000 	subeq	r0, r9, r0
     b58:	4e050000 	cdpmi	0, 0, cr0, cr5, cr0, {0}
     b5c:	ff000000 			; <UNDEFINED> instruction: 0xff000000
     b60:	38060003 	stmdacc	r6, {r0, r1}
     b64:	03000000 	movweq	r0, #0
     b68:	06ad0704 	strteq	r0, [sp], r4, lsl #14
     b6c:	4e060000 	cdpmi	0, 0, cr0, cr6, cr0, {0}
     b70:	07000000 	streq	r0, [r0, -r0]
     b74:	00000396 	muleq	r0, r6, r3
     b78:	491e0f02 	ldmdbmi	lr, {r1, r8, r9, sl, fp}
     b7c:	05000000 	streq	r0, [r0, #-0]
     b80:	00215003 	eoreq	r5, r1, r3
     b84:	05120820 	ldreq	r0, [r2, #-2080]	; 0xfffff7e0
     b88:	b7010000 	strlt	r0, [r1, -r0]
     b8c:	000e4806 	andeq	r4, lr, r6, lsl #16
     b90:	0000d020 	andeq	sp, r0, r0, lsr #32
     b94:	c69c0100 	ldrgt	r0, [ip], r0, lsl #2
     b98:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
     b9c:	b8010069 	stmdalt	r1, {r0, r3, r5, r6}
     ba0:	0000250d 	andeq	r2, r0, sp, lsl #10
     ba4:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
     ba8:	01006a09 	tsteq	r0, r9, lsl #20
     bac:	002511b8 	strhteq	r1, [r5], -r8
     bb0:	91020000 	mrsls	r0, (UNDEF: 2)
     bb4:	01240776 			; <UNDEFINED> instruction: 0x01240776
     bb8:	b8010000 	stmdalt	r1, {}	; <UNPREDICTABLE>
     bbc:	00002514 	andeq	r2, r0, r4, lsl r5
     bc0:	6f910200 	svcvs	0x00910200
     bc4:	01006309 	tsteq	r0, r9, lsl #6
     bc8:	002520b8 	strhteq	r2, [r5], -r8
     bcc:	91020000 	mrsls	r0, (UNDEF: 2)
     bd0:	006b0975 	rsbeq	r0, fp, r5, ror r9
     bd4:	4e12b901 	vnmlsmi.f16	s22, s4, s2	; <UNPREDICTABLE>
     bd8:	02000000 	andeq	r0, r0, #0, 0
     bdc:	0a007091 	beq	1ce28 <startup-0x1ffe31d8>
     be0:	0000058d 	andeq	r0, r0, sp, lsl #11
     be4:	c406a601 	strgt	sl, [r6], #-1537	; 0xfffff9ff
     be8:	8420000d 	strthi	r0, [r0], #-13
     bec:	01000000 	mrseq	r0, (UNDEF: 0)
     bf0:	0001159c 	muleq	r1, ip, r5
     bf4:	00780b00 	rsbseq	r0, r8, r0, lsl #22
     bf8:	4e15a601 	cfmsub32mi	mvax0, mvfx10, mvfx5, mvfx1
     bfc:	02000000 	andeq	r0, r0, #0, 0
     c00:	790b6c91 	stmdbvc	fp, {r0, r4, r7, sl, fp, sp, lr}
     c04:	21a60100 			; <UNDEFINED> instruction: 0x21a60100
     c08:	0000004e 	andeq	r0, r0, lr, asr #32
     c0c:	07689102 	strbeq	r9, [r8, -r2, lsl #2]!
     c10:	000005cc 	andeq	r0, r0, ip, asr #11
     c14:	250da701 	strcs	sl, [sp, #-1793]	; 0xfffff8ff
     c18:	02000000 	andeq	r0, r0, #0, 0
     c1c:	f9077391 			; <UNDEFINED> instruction: 0xf9077391
     c20:	01000005 	tsteq	r0, r5
     c24:	011509a8 	tsteq	r5, r8, lsr #19
     c28:	91020000 	mrsls	r0, (UNDEF: 2)
     c2c:	040c0074 	streq	r0, [ip], #-116	; 0xffffff8c
     c30:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
     c34:	05a80d00 	streq	r0, [r8, #3328]!	; 0xd00
     c38:	a0010000 	andge	r0, r1, r0
     c3c:	000d8e06 	andeq	r8, sp, r6, lsl #28
     c40:	00003620 	andeq	r3, r0, r0, lsr #12
     c44:	409c0100 	addsmi	r0, ip, r0, lsl #2
     c48:	09000001 	stmdbeq	r0, {r0}
     c4c:	a1010069 	tstge	r1, r9, rrx
     c50:	00011509 	andeq	r1, r1, r9, lsl #10
     c54:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     c58:	05ff0800 	ldrbeq	r0, [pc, #2048]!	; 1460 <startup-0x1fffeba0>
     c5c:	96010000 	strls	r0, [r1], -r0
     c60:	000d3406 	andeq	r3, sp, r6, lsl #8
     c64:	00005a20 	andeq	r5, r0, r0, lsr #20
     c68:	899c0100 	ldmibhi	ip, {r8}
     c6c:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
     c70:	20000d3a 	andcs	r0, r0, sl, lsr sp
     c74:	0000004a 	andeq	r0, r0, sl, asr #32
     c78:	00063e07 	andeq	r3, r6, r7, lsl #28
     c7c:	0e970100 	fmleqs	f0, f7, f0
     c80:	00000115 	andeq	r0, r0, r5, lsl r1
     c84:	0e749102 	expeqs	f1, f2
     c88:	20000d5e 	andcs	r0, r0, lr, asr sp
     c8c:	0000001a 	andeq	r0, r0, sl, lsl r0
     c90:	64646109 	strbtvs	r6, [r4], #-265	; 0xfffffef7
     c94:	129a0100 	addsne	r0, sl, #0
     c98:	00000115 	andeq	r0, r0, r5, lsl r1
     c9c:	00709102 	rsbseq	r9, r0, r2, lsl #2
     ca0:	14080000 	strne	r0, [r8], #-0
     ca4:	01000006 	tsteq	r0, r6
     ca8:	0cee068e 	stcleq	6, cr0, [lr], #568	; 0x238
     cac:	00462000 	subeq	r2, r6, r0
     cb0:	9c010000 	stcls	0, cr0, [r1], {-0}
     cb4:	000001be 			; <UNDEFINED> instruction: 0x000001be
     cb8:	00057b0f 	andeq	r7, r5, pc, lsl #22
     cbc:	218e0100 	orrcs	r0, lr, r0, lsl #2
     cc0:	00000025 	andeq	r0, r0, r5, lsr #32
     cc4:	0f779102 	svceq	0x00779102
     cc8:	00000124 	andeq	r0, r0, r4, lsr #2
     ccc:	252f8e01 	strcs	r8, [pc, #-3585]!	; fffffed3 <rear+0xdfff7ceb>
     cd0:	02000000 	andeq	r0, r0, #0, 0
     cd4:	08007691 	stmdaeq	r0, {r0, r4, r7, r9, sl, ip, sp, lr}
     cd8:	000004fc 	strdeq	r0, [r0], -ip
     cdc:	a8068601 	stmdage	r6, {r0, r9, sl, pc}
     ce0:	4620000c 	strtmi	r0, [r0], -ip
     ce4:	01000000 	mrseq	r0, (UNDEF: 0)
     ce8:	0001f39c 	muleq	r1, ip, r3
     cec:	6d630b00 	vstmdbvs	r3!, {d16-d15}
     cf0:	86010064 	strhi	r0, [r1], -r4, rrx
     cf4:	00002524 	andeq	r2, r0, r4, lsr #10
     cf8:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
     cfc:	0001240f 	andeq	r2, r1, pc, lsl #8
     d00:	31860100 	orrcc	r0, r6, r0, lsl #2
     d04:	00000025 	andeq	r0, r0, r5, lsr #32
     d08:	00769102 	rsbseq	r9, r6, r2, lsl #2
     d0c:	0005d908 	andeq	sp, r5, r8, lsl #18
     d10:	066e0100 	strbteq	r0, [lr], -r0, lsl #2
     d14:	20000c32 	andcs	r0, r0, r2, lsr ip
     d18:	00000076 	andeq	r0, r0, r6, ror r0
     d1c:	02369c01 	eorseq	r9, r6, #256	; 0x100
     d20:	790f0000 	stmdbvc	pc, {}	; <UNPREDICTABLE>
     d24:	01000009 	tsteq	r0, r9
     d28:	00251c6e 	eoreq	r1, r5, lr, ror #24
     d2c:	91020000 	mrsls	r0, (UNDEF: 2)
     d30:	01240f77 			; <UNDEFINED> instruction: 0x01240f77
     d34:	6e010000 	cdpvs	0, 0, cr0, cr1, cr0, {0}
     d38:	0000252b 	andeq	r2, r0, fp, lsr #10
     d3c:	76910200 	ldrvc	r0, [r1], r0, lsl #4
     d40:	0004b110 	andeq	fp, r4, r0, lsl r1
     d44:	05450100 	strbeq	r0, [r5, #-256]	; 0xffffff00
     d48:	00000115 	andeq	r0, r0, r5, lsl r1
     d4c:	12000011 	andne	r0, r0, #17, 0
     d50:	0000056e 	andeq	r0, r0, lr, ror #10
     d54:	25096901 	strcs	r6, [r9, #-2305]	; 0xfffff6ff
     d58:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     d5c:	2a20000c 	bcs	800d94 <startup-0x1f7ff26c>
     d60:	01000000 	mrseq	r0, (UNDEF: 0)
     d64:	0002609c 	muleq	r2, ip, r0
     d68:	01240f00 			; <UNDEFINED> instruction: 0x01240f00
     d6c:	69010000 	stmdbvs	r1, {}	; <UNPREDICTABLE>
     d70:	00002523 	andeq	r2, r0, r3, lsr #10
     d74:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
     d78:	05801200 	streq	r1, [r0, #512]	; 0x200
     d7c:	52010000 	andpl	r0, r1, #0, 0
     d80:	0000310f 	andeq	r3, r0, pc, lsl #2
     d84:	000b7c00 	andeq	r7, fp, r0, lsl #24
     d88:	00008c20 	andeq	r8, r0, r0, lsr #24
     d8c:	ab9c0100 	blge	fe701194 <rear+0xde6f8fac>
     d90:	0f000002 	svceq	0x00000002
     d94:	00000124 	andeq	r0, r0, r4, lsr #2
     d98:	312a5201 			; <UNDEFINED> instruction: 0x312a5201
     d9c:	02000000 	andeq	r0, r0, #0, 0
     da0:	b1136f91 			; <UNDEFINED> instruction: 0xb1136f91
     da4:	01000004 	tsteq	r0, r4
     da8:	01150545 	tsteq	r5, r5, asr #10
     dac:	029b0000 	addseq	r0, fp, #0, 0
     db0:	00110000 	andseq	r0, r1, r0
     db4:	00065007 	andeq	r5, r6, r7
     db8:	135a0100 	cmpne	sl, #0
     dbc:	00000031 	andeq	r0, r0, r1, lsr r0
     dc0:	00779102 	rsbseq	r9, r7, r2, lsl #2
     dc4:	0005b908 	andeq	fp, r5, r8, lsl #18
     dc8:	06400100 	strbeq	r0, [r0], -r0, lsl #2
     dcc:	20000b3e 	andcs	r0, r0, lr, lsr fp
     dd0:	0000003e 	andeq	r0, r0, lr, lsr r0
     dd4:	02d09c01 	sbcseq	r9, r0, #256	; 0x100
     dd8:	b1100000 	tstlt	r0, r0
     ddc:	01000004 	tsteq	r0, r4
     de0:	01150545 	tsteq	r5, r5, asr #10
     de4:	00110000 	andseq	r0, r1, r0
     de8:	05e70800 	strbeq	r0, [r7, #2048]!	; 0x800
     dec:	2a010000 	bcs	40df4 <startup-0x1ffbf20c>
     df0:	000ae406 	andeq	lr, sl, r6, lsl #8
     df4:	00005a20 	andeq	r5, r0, r0, lsr #20
     df8:	f69c0100 			; <UNDEFINED> instruction: 0xf69c0100
     dfc:	0f000002 	svceq	0x00000002
     e00:	00000124 	andeq	r0, r0, r4, lsr #2
     e04:	25202a01 	strcs	r2, [r0, #-2561]!	; 0xfffff5ff
     e08:	02000000 	andeq	r0, r0, #0, 0
     e0c:	0a007791 	beq	1ec58 <startup-0x1ffe13a8>
     e10:	00000593 	muleq	r0, r3, r5
     e14:	a0062001 	andge	r2, r6, r1
     e18:	4420000a 	strtmi	r0, [r0], #-10
     e1c:	01000000 	mrseq	r0, (UNDEF: 0)
     e20:	0003279c 	muleq	r3, ip, r7
     e24:	00780b00 	rsbseq	r0, r8, r0, lsl #22
     e28:	25232001 	strcs	r2, [r3, #-1]!
     e2c:	02000000 	andeq	r0, r0, #0, 0
     e30:	63096f91 	movwvs	r6, #40849	; 0x9f91
     e34:	0d230100 	stfeqs	f0, [r3, #-0]
     e38:	00000025 	andeq	r0, r0, r5, lsr #32
     e3c:	00779102 	rsbseq	r9, r7, r2, lsl #2
     e40:	0006270a 	andeq	r2, r6, sl, lsl #14
     e44:	06150100 	ldreq	r0, [r5], -r0, lsl #2
     e48:	20000a50 	andcs	r0, r0, r0, asr sl
     e4c:	00000050 	andeq	r0, r0, r0, asr r0
     e50:	03589c01 	cmpeq	r8, #256	; 0x100
     e54:	780b0000 	stmdavc	fp, {}	; <UNPREDICTABLE>
     e58:	25150100 	ldrcs	r0, [r5, #-256]	; 0xffffff00
     e5c:	00000025 	andeq	r0, r0, r5, lsr #32
     e60:	096f9102 	stmdbeq	pc!, {r1, r8, ip, pc}^	; <UNPREDICTABLE>
     e64:	18010063 	stmdane	r1, {r0, r1, r5, r6}
     e68:	0000250d 	andeq	r2, r0, sp, lsl #10
     e6c:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
     e70:	06431400 	strbeq	r1, [r3], -r0, lsl #8
     e74:	06010000 	streq	r0, [r1], -r0
     e78:	0009f406 	andeq	pc, r9, r6, lsl #8
     e7c:	00005c20 	andeq	r5, r0, r0, lsr #24
     e80:	139c0100 	orrsne	r0, ip, #0
     e84:	0000002e 	andeq	r0, r0, lr, lsr #32
     e88:	15050801 	strne	r0, [r5, #-2049]	; 0xfffff7ff
     e8c:	7c000001 	stcvc	0, cr0, [r0], {1}
     e90:	11000003 	tstne	r0, r3
     e94:	00001000 	andeq	r1, r0, r0
     e98:	0a010000 	beq	40ea0 <startup-0x1ffbf160>
     e9c:	00011505 	andeq	r1, r1, r5, lsl #10
     ea0:	00001100 	andeq	r1, r0, r0, lsl #2
     ea4:	000b6600 	andeq	r6, fp, r0, lsl #12
     ea8:	a5000400 	strge	r0, [r0, #-1024]	; 0xfffffc00
     eac:	04000005 	streq	r0, [r0], #-5
     eb0:	00005101 	andeq	r5, r0, r1, lsl #2
     eb4:	0a0a0c00 	beq	283ebc <startup-0x1fd7c144>
     eb8:	015d0000 	cmpeq	sp, r0
     ebc:	0f180000 	svceq	0x00180000
     ec0:	011c2000 	tsteq	ip, r0
     ec4:	0a3e0000 	beq	f80ecc <startup-0x1f07f134>
     ec8:	04020000 	streq	r0, [r2], #-0
     ecc:	0006ad07 	andeq	sl, r6, r7, lsl #26
     ed0:	05040300 	streq	r0, [r4, #-768]	; 0xfffffd00
     ed4:	00746e69 	rsbseq	r6, r4, r9, ror #28
     ed8:	51060102 	tstpl	r6, r2, lsl #2
     edc:	02000001 	andeq	r0, r0, #1, 0
     ee0:	014f0801 	cmpeq	pc, r1, lsl #16
     ee4:	02020000 	andeq	r0, r2, #0, 0
     ee8:	0008bb05 	andeq	fp, r8, r5, lsl #22
     eec:	07020200 	streq	r0, [r2, -r0, lsl #4]
     ef0:	000007f8 	strdeq	r0, [r0], -r8
     ef4:	f2050402 	vshl.s8	d0, d2, d5
     ef8:	02000006 	andeq	r0, r0, #6, 0
     efc:	06a80704 	strteq	r0, [r8], r4, lsl #14
     f00:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
     f04:	0006ed05 	andeq	lr, r6, r5, lsl #26
     f08:	07080200 	streq	r0, [r8, -r0, lsl #4]
     f0c:	000006a3 	andeq	r0, r0, r3, lsr #13
     f10:	00083b04 	andeq	r3, r8, r4, lsl #22
     f14:	19220200 	stmdbne	r2!, {r9}
     f18:	00000077 	andeq	r0, r0, r7, ror r0
     f1c:	007d0405 	rsbseq	r0, sp, r5, lsl #8
     f20:	70060000 	andvc	r0, r6, r0
     f24:	04000009 	streq	r0, [r0], #-9
     f28:	00000888 	andeq	r0, r0, r8, lsl #17
     f2c:	4f0e2c03 	svcmi	0x000e2c03
     f30:	04000000 	streq	r0, [r0], #-0
     f34:	00000985 	andeq	r0, r0, r5, lsl #19
     f38:	4f0e7203 	svcmi	0x000e7203
     f3c:	07000000 	streq	r0, [r0, -r0]
     f40:	00000843 	andeq	r0, r0, r3, asr #16
     f44:	17015e04 	strne	r5, [r1, -r4, lsl #28]
     f48:	00000025 	andeq	r0, r0, r5, lsr #32
     f4c:	a6030408 	strge	r0, [r3], -r8, lsl #8
     f50:	0000c903 	andeq	ip, r0, r3, lsl #18
     f54:	08350900 	ldmdaeq	r5!, {r8, fp}
     f58:	a8030000 	stmdage	r3, {}	; <UNPREDICTABLE>
     f5c:	00009a0c 	andeq	r9, r0, ip, lsl #20
     f60:	07d40900 	ldrbeq	r0, [r4, r0, lsl #18]
     f64:	a9030000 	stmdbge	r3, {}	; <UNPREDICTABLE>
     f68:	0000c913 	andeq	ip, r0, r3, lsl r9
     f6c:	3a0a0000 	bcc	280f74 <startup-0x1fd7f08c>
     f70:	d9000000 	stmdble	r0, {}	; <UNPREDICTABLE>
     f74:	0b000000 	bleq	f7c <startup-0x1ffff084>
     f78:	00000025 	andeq	r0, r0, r5, lsr #32
     f7c:	080c0003 	stmdaeq	ip, {r0, r1}
     f80:	fd09a303 	stc2	3, cr10, [r9, #-12]
     f84:	0d000000 	stceq	0, cr0, [r0, #-0]
     f88:	00000968 	andeq	r0, r0, r8, ror #18
     f8c:	2c07a503 	cfstr32cs	mvfx10, [r7], {3}
     f90:	00000000 	andeq	r0, r0, r0
     f94:	0009770d 	andeq	r7, r9, sp, lsl #14
     f98:	05aa0300 	streq	r0, [sl, #768]!	; 0x300
     f9c:	000000a7 	andeq	r0, r0, r7, lsr #1
     fa0:	e3040004 	movw	r0, #16388	; 0x4004
     fa4:	03000008 	movweq	r0, #8
     fa8:	00d903ab 	sbcseq	r0, r9, fp, lsr #7
     fac:	9d040000 	stcls	0, cr0, [r4, #-0]
     fb0:	03000007 	movweq	r0, #7
     fb4:	006b1baf 	rsbeq	r1, fp, pc, lsr #23
     fb8:	040e0000 	streq	r0, [lr], #-0
     fbc:	011d0405 	tsteq	sp, r5, lsl #8
     fc0:	01020000 	mrseq	r0, (UNDEF: 2)
     fc4:	00015808 	andeq	r5, r1, r8, lsl #16
     fc8:	011d0f00 	tsteq	sp, r0, lsl #30
     fcc:	cf040000 	svcgt	0x00040000
     fd0:	05000009 	streq	r0, [r0, #-9]
     fd4:	00561916 	subseq	r1, r6, r6, lsl r9
     fd8:	ae100000 	cdpge	0, 1, cr0, cr0, cr0, {0}
     fdc:	18000007 	stmdane	r0, {r0, r1, r2}
     fe0:	8f082f05 	svchi	0x00082f05
     fe4:	0d000001 	stceq	0, cr0, [r0, #-4]
     fe8:	00000904 	andeq	r0, r0, r4, lsl #18
     fec:	8f133105 	svchi	0x00133105
     ff0:	00000001 	andeq	r0, r0, r1
     ff4:	006b5f11 	rsbeq	r5, fp, r1, lsl pc
     ff8:	2c073205 	sfmcs	f3, 4, [r7], {5}
     ffc:	04000000 	streq	r0, [r0], #-0
    1000:	0009530d 	andeq	r5, r9, sp, lsl #6
    1004:	0b320500 	bleq	c8240c <startup-0x1f37dbf4>
    1008:	0000002c 	andeq	r0, r0, ip, lsr #32
    100c:	07970d08 	ldreq	r0, [r7, r8, lsl #26]
    1010:	32050000 	andcc	r0, r5, #0, 0
    1014:	00002c14 	andeq	r2, r0, r4, lsl ip
    1018:	490d0c00 	stmdbmi	sp, {sl, fp}
    101c:	0500000a 	streq	r0, [r0, #-10]
    1020:	002c1b32 	eoreq	r1, ip, r2, lsr fp
    1024:	11100000 	tstne	r0, r0
    1028:	0500785f 	streq	r7, [r0, #-2143]	; 0xfffff7a1
    102c:	01950b33 	orrseq	r0, r5, r3, lsr fp
    1030:	00140000 	andseq	r0, r4, r0
    1034:	01350405 	teqeq	r5, r5, lsl #8
    1038:	290a0000 	stmdbcs	sl, {}	; <UNPREDICTABLE>
    103c:	a5000001 	strge	r0, [r0, #-1]
    1040:	0b000001 	bleq	104c <startup-0x1fffefb4>
    1044:	00000025 	andeq	r0, r0, r5, lsr #32
    1048:	cf100000 	svcgt	0x00100000
    104c:	24000007 	strcs	r0, [r0], #-7
    1050:	28083705 	stmdacs	r8, {r0, r2, r8, r9, sl, ip, sp}
    1054:	0d000002 	stceq	0, cr0, [r0, #-8]
    1058:	000006e4 	andeq	r0, r0, r4, ror #13
    105c:	2c093905 			; <UNDEFINED> instruction: 0x2c093905
    1060:	00000000 	andeq	r0, r0, r0
    1064:	00098d0d 	andeq	r8, r9, sp, lsl #26
    1068:	093a0500 	ldmdbeq	sl!, {r8, sl}
    106c:	0000002c 	andeq	r0, r0, ip, lsr #32
    1070:	07070d04 	streq	r0, [r7, -r4, lsl #26]
    1074:	3b050000 	blcc	14107c <startup-0x1febef84>
    1078:	00002c09 	andeq	r2, r0, r9, lsl #24
    107c:	b90d0800 	stmdblt	sp, {fp}
    1080:	0500000a 	streq	r0, [r0, #-10]
    1084:	002c093c 	eoreq	r0, ip, ip, lsr r9
    1088:	0d0c0000 	stceq	0, cr0, [ip, #-0]
    108c:	0000086c 	andeq	r0, r0, ip, ror #16
    1090:	2c093d05 	stccs	13, cr3, [r9], {5}
    1094:	10000000 	andne	r0, r0, r0
    1098:	0008520d 	andeq	r5, r8, sp, lsl #4
    109c:	093e0500 	ldmdbeq	lr!, {r8, sl}
    10a0:	0000002c 	andeq	r0, r0, ip, lsr #32
    10a4:	0a4e0d14 	beq	13844fc <startup-0x1ec7bb04>
    10a8:	3f050000 	svccc	0x00050000
    10ac:	00002c09 	andeq	r2, r0, r9, lsl #24
    10b0:	c50d1800 	strgt	r1, [sp, #-2048]	; 0xfffff800
    10b4:	05000008 	streq	r0, [r0, #-8]
    10b8:	002c0940 	eoreq	r0, ip, r0, asr #18
    10bc:	0d1c0000 	ldceq	0, cr0, [ip, #-0]
    10c0:	00000a80 	andeq	r0, r0, r0, lsl #21
    10c4:	2c094105 	stfcss	f4, [r9], {5}
    10c8:	20000000 	andcs	r0, r0, r0
    10cc:	07161200 	ldreq	r1, [r6, -r0, lsl #4]
    10d0:	01080000 	mrseq	r0, (UNDEF: 8)
    10d4:	6d084a05 	vstrvs	s8, [r8, #-20]	; 0xffffffec
    10d8:	0d000002 	stceq	0, cr0, [r0, #-8]
    10dc:	0000078a 	andeq	r0, r0, sl, lsl #15
    10e0:	6d0a4b05 	vstrvs	d4, [sl, #-20]	; 0xffffffec
    10e4:	00000002 	andeq	r0, r0, r2
    10e8:	0006570d 	andeq	r5, r6, sp, lsl #14
    10ec:	094c0500 	stmdbeq	ip, {r8, sl}^
    10f0:	0000026d 	andeq	r0, r0, sp, ror #4
    10f4:	09c11380 	stmibeq	r1, {r7, r8, r9, ip}^
    10f8:	4e050000 	cdpmi	0, 0, cr0, cr5, cr0, {0}
    10fc:	0001290a 	andeq	r2, r1, sl, lsl #18
    1100:	13010000 	movwne	r0, #4096	; 0x1000
    1104:	00000743 	andeq	r0, r0, r3, asr #14
    1108:	290a5105 	stmdbcs	sl, {r0, r2, r8, ip, lr}
    110c:	04000001 	streq	r0, [r0], #-1
    1110:	150a0001 	strne	r0, [sl, #-1]
    1114:	7d000001 	stcvc	0, cr0, [r0, #-4]
    1118:	0b000002 	bleq	1128 <startup-0x1fffeed8>
    111c:	00000025 	andeq	r0, r0, r5, lsr #32
    1120:	7512001f 	ldrvc	r0, [r2, #-31]	; 0xffffffe1
    1124:	90000008 	andls	r0, r0, r8
    1128:	085d0501 	ldmdaeq	sp, {r0, r8, sl}^
    112c:	000002c0 	andeq	r0, r0, r0, asr #5
    1130:	0009040d 	andeq	r0, r9, sp, lsl #8
    1134:	125e0500 	subsne	r0, lr, #0, 10
    1138:	000002c0 	andeq	r0, r0, r0, asr #5
    113c:	09230d00 	stmdbeq	r3!, {r8, sl, fp}
    1140:	5f050000 	svcpl	0x00050000
    1144:	00002c06 	andeq	r2, r0, r6, lsl #24
    1148:	920d0400 	andls	r0, sp, #0, 8
    114c:	05000007 	streq	r0, [r0, #-7]
    1150:	02c60961 	sbceq	r0, r6, #1589248	; 0x184000
    1154:	0d080000 	stceq	0, cr0, [r8, #-0]
    1158:	00000716 	andeq	r0, r0, r6, lsl r7
    115c:	281e6205 	ldmdacs	lr, {r0, r2, r9, sp, lr}
    1160:	88000002 	stmdahi	r0, {r1}
    1164:	7d040500 	cfstr32vc	mvfx0, [r4, #-0]
    1168:	0a000002 	beq	1178 <startup-0x1fffee88>
    116c:	000002d6 	ldrdeq	r0, [r0], -r6
    1170:	000002d6 	ldrdeq	r0, [r0], -r6
    1174:	0000250b 	andeq	r2, r0, fp, lsl #10
    1178:	05001f00 	streq	r1, [r0, #-3840]	; 0xfffff100
    117c:	0002dc04 	andeq	sp, r2, r4, lsl #24
    1180:	cf101400 	svcgt	0x00101400
    1184:	08000008 	stmdaeq	r0, {r3}
    1188:	05087505 	streq	r7, [r8, #-1285]	; 0xfffffafb
    118c:	0d000003 	stceq	0, cr0, [r0, #-12]
    1190:	00000701 	andeq	r0, r0, r1, lsl #14
    1194:	05117605 	ldreq	r7, [r1, #-1541]	; 0xfffff9fb
    1198:	00000003 	andeq	r0, r0, r3
    119c:	00066a0d 	andeq	r6, r6, sp, lsl #20
    11a0:	06770500 	ldrbteq	r0, [r7], -r0, lsl #10
    11a4:	0000002c 	andeq	r0, r0, ip, lsr #32
    11a8:	04050004 	streq	r0, [r5], #-4
    11ac:	0000003a 	andeq	r0, r0, sl, lsr r0
    11b0:	0008ee10 	andeq	lr, r8, r0, lsl lr
    11b4:	b5056800 	strlt	r6, [r5, #-2048]	; 0xfffff800
    11b8:	00044e08 	andeq	r4, r4, r8, lsl #28
    11bc:	705f1100 	subsvc	r1, pc, r0, lsl #2
    11c0:	12b60500 	adcsne	r0, r6, #0, 10
    11c4:	00000305 	andeq	r0, r0, r5, lsl #6
    11c8:	725f1100 	subsvc	r1, pc, #0
    11cc:	07b70500 	ldreq	r0, [r7, r0, lsl #10]!
    11d0:	0000002c 	andeq	r0, r0, ip, lsr #32
    11d4:	775f1104 	ldrbvc	r1, [pc, -r4, lsl #2]
    11d8:	07b80500 	ldreq	r0, [r8, r0, lsl #10]!
    11dc:	0000002c 	andeq	r0, r0, ip, lsr #32
    11e0:	073c0d08 	ldreq	r0, [ip, -r8, lsl #26]!
    11e4:	b9050000 	stmdblt	r5, {}	; <UNPREDICTABLE>
    11e8:	00004109 	andeq	r4, r0, r9, lsl #2
    11ec:	eb0d0c00 	bl	3441f4 <startup-0x1fcbbe0c>
    11f0:	05000007 	streq	r0, [r0, #-7]
    11f4:	004109ba 	strheq	r0, [r1], #-154	; 0xffffff66
    11f8:	110e0000 	mrsne	r0, (UNDEF: 14)
    11fc:	0066625f 	rsbeq	r6, r6, pc, asr r2
    1200:	dd11bb05 	vldrle	d11, [r1, #-20]	; 0xffffffec
    1204:	10000002 	andne	r0, r0, r2
    1208:	0006ba0d 	andeq	fp, r6, sp, lsl #20
    120c:	07bc0500 	ldreq	r0, [ip, r0, lsl #10]!
    1210:	0000002c 	andeq	r0, r0, ip, lsr #32
    1214:	07240d18 			; <UNDEFINED> instruction: 0x07240d18
    1218:	c3050000 	movwgt	r0, #20480	; 0x5000
    121c:	0001150a 	andeq	r1, r1, sl, lsl #10
    1220:	870d1c00 	strhi	r1, [sp, -r0, lsl #24]
    1224:	05000005 	streq	r0, [r0, #-5]
    1228:	05c01dc5 	strbeq	r1, [r0, #3525]	; 0xdc5
    122c:	0d200000 	stceq	0, cr0, [r0, #-0]
    1230:	000005e0 	andeq	r0, r0, r0, ror #11
    1234:	ea1dc705 	b	772e50 <startup-0x1f88d1b0>
    1238:	24000005 	strcs	r0, [r0], #-5
    123c:	00097f0d 	andeq	r7, r9, sp, lsl #30
    1240:	0dca0500 	cfstr64eq	mvdx0, [sl]
    1244:	0000060e 	andeq	r0, r0, lr, lsl #12
    1248:	0a9a0d28 	beq	fe6846f0 <rear+0xde67c508>
    124c:	cb050000 	blgt	141254 <startup-0x1febedac>
    1250:	00062809 	andeq	r2, r6, r9, lsl #16
    1254:	5f112c00 	svcpl	0x00112c00
    1258:	05006275 	streq	r6, [r0, #-629]	; 0xfffffd8b
    125c:	02dd11ce 	sbcseq	r1, sp, #-2147483597	; 0x80000033
    1260:	11300000 	teqne	r0, r0
    1264:	0070755f 	rsbseq	r7, r0, pc, asr r5
    1268:	0512cf05 	ldreq	ip, [r2, #-3845]	; 0xfffff0fb
    126c:	38000003 	stmdacc	r0, {r0, r1}
    1270:	72755f11 	rsbsvc	r5, r5, #68	; 0x44
    1274:	07d00500 	ldrbeq	r0, [r0, r0, lsl #10]
    1278:	0000002c 	andeq	r0, r0, ip, lsr #32
    127c:	06fb0d3c 			; <UNDEFINED> instruction: 0x06fb0d3c
    1280:	d3050000 	movwle	r0, #20480	; 0x5000
    1284:	00062e11 	andeq	r2, r6, r1, lsl lr
    1288:	720d4000 	andvc	r4, sp, #0, 0
    128c:	0500000a 	streq	r0, [r0, #-10]
    1290:	063e11d4 			; <UNDEFINED> instruction: 0x063e11d4
    1294:	11430000 	mrsne	r0, (UNDEF: 67)
    1298:	00626c5f 	rsbeq	r6, r2, pc, asr ip
    129c:	dd11d705 	ldcle	7, cr13, [r1, #-20]	; 0xffffffec
    12a0:	44000002 	strmi	r0, [r0], #-2
    12a4:	0007520d 	andeq	r5, r7, sp, lsl #4
    12a8:	07da0500 	ldrbeq	r0, [sl, r0, lsl #10]
    12ac:	0000002c 	andeq	r0, r0, ip, lsr #32
    12b0:	07630d4c 	strbeq	r0, [r3, -ip, asr #26]!
    12b4:	db050000 	blle	1412bc <startup-0x1febed44>
    12b8:	0000820a 	andeq	r8, r0, sl, lsl #4
    12bc:	7a0d5000 	bvc	3552c4 <startup-0x1fcaad3c>
    12c0:	05000005 	streq	r0, [r0, #-5]
    12c4:	046c12de 	strbteq	r1, [ip], #-734	; 0xfffffd22
    12c8:	0d540000 	ldcleq	0, cr0, [r4, #-0]
    12cc:	00000971 	andeq	r0, r0, r1, ror r9
    12d0:	090ce205 	stmdbeq	ip, {r0, r2, r9, sp, lr, pc}
    12d4:	58000001 	stmdapl	r0, {r0}
    12d8:	0008f60d 	andeq	pc, r8, sp, lsl #12
    12dc:	0ee40500 	cdpeq	5, 14, cr0, cr4, cr0, {0}
    12e0:	000000fd 	strdeq	r0, [r0], -sp
    12e4:	084a0d5c 	stmdaeq	sl, {r2, r3, r4, r6, r8, sl, fp}^
    12e8:	e5050000 	str	r0, [r5, #-0]
    12ec:	00002c09 	andeq	r2, r0, r9, lsl #24
    12f0:	15006400 	strne	r6, [r0, #-1024]	; 0xfffffc00
    12f4:	0000002c 	andeq	r0, r0, ip, lsr #32
    12f8:	0000046c 	andeq	r0, r0, ip, ror #8
    12fc:	00046c16 	andeq	r6, r4, r6, lsl ip
    1300:	01151600 	tsteq	r5, r0, lsl #12
    1304:	17160000 	ldrne	r0, [r6, -r0]
    1308:	16000001 	strne	r0, [r0], -r1
    130c:	0000002c 	andeq	r0, r0, ip, lsr #32
    1310:	77040500 	strvc	r0, [r4, -r0, lsl #10]
    1314:	0f000004 	svceq	0x00000004
    1318:	0000046c 	andeq	r0, r0, ip, ror #8
    131c:	00095b17 	andeq	r5, r9, r7, lsl fp
    1320:	05042800 	streq	r2, [r4, #-2048]	; 0xfffff800
    1324:	c0080260 	andgt	r0, r8, r0, ror #4
    1328:	18000005 	stmdane	r0, {r0, r2}
    132c:	000008b4 			; <UNDEFINED> instruction: 0x000008b4
    1330:	07026205 	streq	r6, [r2, -r5, lsl #4]
    1334:	0000002c 	andeq	r0, r0, ip, lsr #32
    1338:	074b1800 	strbeq	r1, [fp, -r0, lsl #16]
    133c:	67050000 	strvs	r0, [r5, -r0]
    1340:	069a0b02 	ldreq	r0, [sl], r2, lsl #22
    1344:	18040000 	stmdane	r4, {}	; <UNPREDICTABLE>
    1348:	000007db 	ldrdeq	r0, [r0], -fp
    134c:	14026705 	strne	r6, [r2], #-1797	; 0xfffff8fb
    1350:	0000069a 	muleq	r0, sl, r6
    1354:	07a61808 	streq	r1, [r6, r8, lsl #16]!
    1358:	67050000 	strvs	r0, [r5, -r0]
    135c:	069a1e02 	ldreq	r1, [sl], r2, lsl #28
    1360:	180c0000 	stmdane	ip, {}	; <UNPREDICTABLE>
    1364:	0000091e 	andeq	r0, r0, lr, lsl r9
    1368:	08026905 	stmdaeq	r2, {r0, r2, r8, fp, sp, lr}
    136c:	0000002c 	andeq	r0, r0, ip, lsr #32
    1370:	06781810 			; <UNDEFINED> instruction: 0x06781810
    1374:	6a050000 	bvs	14137c <startup-0x1febec84>
    1378:	089a0802 	ldmeq	sl, {r1, fp}
    137c:	18140000 	ldmdane	r4, {}	; <UNPREDICTABLE>
    1380:	0000093a 	andeq	r0, r0, sl, lsr r9
    1384:	07026d05 	streq	r6, [r2, -r5, lsl #26]
    1388:	0000002c 	andeq	r0, r0, ip, lsr #32
    138c:	09281830 	stmdbeq	r8!, {r4, r5, fp, ip}
    1390:	6e050000 	cdpvs	0, 0, cr0, cr5, cr0, {0}
    1394:	08af1602 	stmiaeq	pc!, {r1, r9, sl, ip}	; <UNPREDICTABLE>
    1398:	18340000 	ldmdane	r4!, {}	; <UNPREDICTABLE>
    139c:	0000087d 	andeq	r0, r0, sp, ror r8
    13a0:	07027005 	streq	r7, [r2, -r5]
    13a4:	0000002c 	andeq	r0, r0, ip, lsr #32
    13a8:	09301838 	ldmdbeq	r0!, {r3, r4, r5, fp, ip}
    13ac:	72050000 	andvc	r0, r5, #0, 0
    13b0:	08c00a02 	stmiaeq	r0, {r1, r9, fp}^
    13b4:	183c0000 	ldmdane	ip!, {}	; <UNPREDICTABLE>
    13b8:	0000082d 	andeq	r0, r0, sp, lsr #16
    13bc:	13027505 	movwne	r7, #9477	; 0x2505
    13c0:	0000018f 	andeq	r0, r0, pc, lsl #3
    13c4:	07c51840 	strbeq	r1, [r5, r0, asr #16]
    13c8:	76050000 	strvc	r0, [r5], -r0
    13cc:	002c0702 	eoreq	r0, ip, r2, lsl #14
    13d0:	18440000 	stmdane	r4, {}^	; <UNPREDICTABLE>
    13d4:	00000ab4 			; <UNDEFINED> instruction: 0x00000ab4
    13d8:	13027705 	movwne	r7, #9989	; 0x2705
    13dc:	0000018f 	andeq	r0, r0, pc, lsl #3
    13e0:	088f1848 	stmeq	pc, {r3, r6, fp, ip}	; <UNPREDICTABLE>
    13e4:	78050000 	stmdavc	r5, {}	; <UNPREDICTABLE>
    13e8:	08c61402 	stmiaeq	r6, {r1, sl, ip}^
    13ec:	184c0000 	stmdane	ip, {}^	; <UNPREDICTABLE>
    13f0:	000007e3 	andeq	r0, r0, r3, ror #15
    13f4:	07027b05 	streq	r7, [r2, -r5, lsl #22]
    13f8:	0000002c 	andeq	r0, r0, ip, lsr #32
    13fc:	075b1850 			; <UNDEFINED> instruction: 0x075b1850
    1400:	7c050000 	stcvc	0, cr0, [r5], {-0}
    1404:	01170902 	tsteq	r7, r2, lsl #18
    1408:	18540000 	ldmdane	r4, {}^	; <UNPREDICTABLE>
    140c:	000008ad 	andeq	r0, r0, sp, lsr #17
    1410:	07029f05 	streq	r9, [r2, -r5, lsl #30]
    1414:	00000875 	andeq	r0, r0, r5, ror r8
    1418:	08751958 	ldmdaeq	r5!, {r3, r4, r6, r8, fp, ip}^
    141c:	a3050000 	movwge	r0, #20480	; 0x5000
    1420:	02c01302 	sbceq	r1, r0, #134217728	; 0x8000000
    1424:	01480000 	mrseq	r0, (UNDEF: 72)
    1428:	00080b19 	andeq	r0, r8, r9, lsl fp
    142c:	02a40500 	adceq	r0, r4, #0, 10
    1430:	00027d12 	andeq	r7, r2, r2, lsl sp
    1434:	19014c00 	stmdbne	r1, {sl, fp, lr}
    1438:	00000a68 	andeq	r0, r0, r8, ror #20
    143c:	0c02a805 	stceq	8, cr10, [r2], {5}
    1440:	000008d7 	ldrdeq	r0, [r0], -r7
    1444:	2c1902dc 	lfmcs	f0, 4, [r9], {220}	; 0xdc
    1448:	05000007 	streq	r0, [r0, #-7]
    144c:	5b1002ad 	blpl	401f08 <startup-0x1fbfe0f8>
    1450:	e0000006 	and	r0, r0, r6
    1454:	07111902 	ldreq	r1, [r1, -r2, lsl #18]
    1458:	af050000 	svcge	0x00050000
    145c:	08e30a02 	stmiaeq	r3!, {r1, r9, fp}^
    1460:	02ec0000 	rsceq	r0, ip, #0, 0
    1464:	4e040500 	cfsh32mi	mvfx0, mvfx4, #0
    1468:	15000004 	strne	r0, [r0, #-4]
    146c:	0000002c 	andeq	r0, r0, ip, lsr #32
    1470:	000005e4 	andeq	r0, r0, r4, ror #11
    1474:	00046c16 	andeq	r6, r4, r6, lsl ip
    1478:	01151600 	tsteq	r5, r0, lsl #12
    147c:	e4160000 	ldr	r0, [r6], #-0
    1480:	16000005 	strne	r0, [r0], -r5
    1484:	0000002c 	andeq	r0, r0, ip, lsr #32
    1488:	24040500 	strcs	r0, [r4], #-1280	; 0xfffffb00
    148c:	05000001 	streq	r0, [r0, #-1]
    1490:	0005c604 	andeq	ip, r5, r4, lsl #12
    1494:	008e1500 	addeq	r1, lr, r0, lsl #10
    1498:	060e0000 	streq	r0, [lr], -r0
    149c:	6c160000 	ldcvs	0, cr0, [r6], {-0}
    14a0:	16000004 	strne	r0, [r0], -r4
    14a4:	00000115 	andeq	r0, r0, r5, lsl r1
    14a8:	00008e16 	andeq	r8, r0, r6, lsl lr
    14ac:	002c1600 	eoreq	r1, ip, r0, lsl #12
    14b0:	05000000 	streq	r0, [r0, #-0]
    14b4:	0005f004 	andeq	pc, r5, r4
    14b8:	002c1500 	eoreq	r1, ip, r0, lsl #10
    14bc:	06280000 	strteq	r0, [r8], -r0
    14c0:	6c160000 	ldcvs	0, cr0, [r6], {-0}
    14c4:	16000004 	strne	r0, [r0], -r4
    14c8:	00000115 	andeq	r0, r0, r5, lsl r1
    14cc:	14040500 	strne	r0, [r4], #-1280	; 0xfffffb00
    14d0:	0a000006 	beq	14f0 <startup-0x1fffeb10>
    14d4:	0000003a 	andeq	r0, r0, sl, lsr r0
    14d8:	0000063e 	andeq	r0, r0, lr, lsr r6
    14dc:	0000250b 	andeq	r2, r0, fp, lsl #10
    14e0:	0a000200 	beq	1ce8 <startup-0x1fffe318>
    14e4:	0000003a 	andeq	r0, r0, sl, lsr r0
    14e8:	0000064e 	andeq	r0, r0, lr, asr #12
    14ec:	0000250b 	andeq	r2, r0, fp, lsl #10
    14f0:	07000000 	streq	r0, [r0, -r0]
    14f4:	000008dc 	ldrdeq	r0, [r0], -ip
    14f8:	1a011f05 	bne	49114 <startup-0x1ffb6eec>
    14fc:	0000030b 	andeq	r0, r0, fp, lsl #6
    1500:	000a581a 	andeq	r5, sl, sl, lsl r8
    1504:	23050c00 	movwcs	r0, #23552	; 0x5c00
    1508:	06940801 	ldreq	r0, [r4], r1, lsl #16
    150c:	04180000 	ldreq	r0, [r8], #-0
    1510:	05000009 	streq	r0, [r0, #-9]
    1514:	94110125 	ldrls	r0, [r1], #-293	; 0xfffffedb
    1518:	00000006 	andeq	r0, r0, r6
    151c:	0007f118 	andeq	pc, r7, r8, lsl r1	; <UNPREDICTABLE>
    1520:	01260500 			; <UNDEFINED> instruction: 0x01260500
    1524:	00002c07 	andeq	r2, r0, r7, lsl #24
    1528:	d6180400 	ldrle	r0, [r8], -r0, lsl #8
    152c:	05000008 	streq	r0, [r0, #-8]
    1530:	9a0b0127 	bls	2c19d4 <startup-0x1fd3e62c>
    1534:	08000006 	stmdaeq	r0, {r1, r2}
    1538:	5b040500 	blpl	102940 <startup-0x1fefd6c0>
    153c:	05000006 	streq	r0, [r0, #-6]
    1540:	00064e04 	andeq	r4, r6, r4, lsl #28
    1544:	06701a00 	ldrbteq	r1, [r0], -r0, lsl #20
    1548:	050e0000 	streq	r0, [lr, #-0]
    154c:	d908013f 	stmdble	r8, {r0, r1, r2, r3, r4, r5, r8}
    1550:	18000006 	stmdane	r0, {r1, r2}
    1554:	00000962 	andeq	r0, r0, r2, ror #18
    1558:	12014005 	andne	r4, r1, #5, 0
    155c:	000006d9 	ldrdeq	r0, [r0], -r9
    1560:	099f1800 	ldmibeq	pc, {fp, ip}	; <UNPREDICTABLE>
    1564:	41050000 	mrsmi	r0, (UNDEF: 5)
    1568:	06d91201 	ldrbeq	r1, [r9], r1, lsl #4
    156c:	18060000 	stmdane	r6, {}	; <UNPREDICTABLE>
    1570:	000009ca 	andeq	r0, r0, sl, asr #19
    1574:	12014205 	andne	r4, r1, #1342177280	; 0x50000000
    1578:	00000048 	andeq	r0, r0, r8, asr #32
    157c:	480a000c 	stmdami	sl, {r2, r3}
    1580:	e9000000 	stmdb	r0, {}	; <UNPREDICTABLE>
    1584:	0b000006 	bleq	15a4 <startup-0x1fffea5c>
    1588:	00000025 	andeq	r0, r0, r5, lsr #32
    158c:	d01b0002 	andsle	r0, fp, r2
    1590:	07028005 	streq	r8, [r2, -r5]
    1594:	000007fe 	strdeq	r0, [r0], -lr
    1598:	0009fd18 	andeq	pc, r9, r8, lsl sp	; <UNPREDICTABLE>
    159c:	02820500 	addeq	r0, r2, #0, 10
    15a0:	00002518 	andeq	r2, r0, r8, lsl r5
    15a4:	a5180000 	ldrge	r0, [r8, #-0]
    15a8:	05000009 	streq	r0, [r0, #-9]
    15ac:	17120283 	ldrne	r0, [r2, -r3, lsl #5]
    15b0:	04000001 	streq	r0, [r0], #-1
    15b4:	00082018 	andeq	r2, r8, r8, lsl r0
    15b8:	02840500 	addeq	r0, r4, #0, 10
    15bc:	0007fe10 	andeq	pc, r7, r0, lsl lr	; <UNPREDICTABLE>
    15c0:	8b180800 	blhi	6035c8 <startup-0x1f9fca38>
    15c4:	0500000a 	streq	r0, [r0, #-10]
    15c8:	a5170285 	ldrge	r0, [r7, #-645]	; 0xfffffd7b
    15cc:	24000001 	strcs	r0, [r0], #-1
    15d0:	0007b618 	andeq	fp, r7, r8, lsl r6
    15d4:	02860500 	addeq	r0, r6, #0, 10
    15d8:	00002c0f 	andeq	r2, r0, pc, lsl #24
    15dc:	ff184800 			; <UNDEFINED> instruction: 0xff184800
    15e0:	05000008 	streq	r0, [r0, #-8]
    15e4:	642c0287 	strtvs	r0, [ip], #-647	; 0xfffffd79
    15e8:	50000000 	andpl	r0, r0, r0
    15ec:	000aa118 	andeq	sl, sl, r8, lsl r1
    15f0:	02880500 	addeq	r0, r8, #0, 10
    15f4:	0006a01a 	andeq	sl, r6, sl, lsl r0
    15f8:	11185800 	tstne	r8, r0, lsl #16
    15fc:	05000009 	streq	r0, [r0, #-9]
    1600:	fd160289 	ldc2	2, cr0, [r6, #-548]	; 0xfffffddc
    1604:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
    1608:	000aa618 	andeq	sl, sl, r8, lsl r6
    160c:	028a0500 	addeq	r0, sl, #0, 10
    1610:	0000fd16 	andeq	pc, r0, r6, lsl sp	; <UNPREDICTABLE>
    1614:	99187000 	ldmdbls	r8, {ip, sp, lr}
    1618:	05000008 	streq	r0, [r0, #-8]
    161c:	fd16028b 	ldc2	2, cr0, [r6, #-556]	; 0xfffffdd4
    1620:	78000000 	stmdavc	r0, {}	; <UNPREDICTABLE>
    1624:	000a5e18 	andeq	r5, sl, r8, lsl lr
    1628:	028c0500 	addeq	r0, ip, #0, 10
    162c:	00080e10 	andeq	r0, r8, r0, lsl lr
    1630:	14188000 	ldrne	r8, [r8], #-0
    1634:	05000008 	streq	r0, [r0, #-8]
    1638:	1e10028d 	cdpne	2, 1, cr0, cr0, cr13, {4}
    163c:	88000008 	stmdahi	r0, {r3}
    1640:	0009d718 	andeq	sp, r9, r8, lsl r7
    1644:	028e0500 	addeq	r0, lr, #0, 10
    1648:	00002c0f 	andeq	r2, r0, pc, lsl #24
    164c:	7c18a000 	ldcvc	0, cr10, [r8], {-0}
    1650:	05000007 	streq	r0, [r0, #-7]
    1654:	fd16028f 	ldc2	2, cr0, [r6, #-572]	; 0xfffffdc4
    1658:	a4000000 	strge	r0, [r0], #-0
    165c:	0006d518 	andeq	sp, r6, r8, lsl r5
    1660:	02900500 	addseq	r0, r0, #0, 10
    1664:	0000fd16 	andeq	pc, r0, r6, lsl sp	; <UNPREDICTABLE>
    1668:	6b18ac00 	blvs	62c670 <startup-0x1f9d3990>
    166c:	05000007 	streq	r0, [r0, #-7]
    1670:	fd160291 	ldc2	2, cr0, [r6, #-580]	; 0xfffffdbc
    1674:	b4000000 	strlt	r0, [r0], #-0
    1678:	00068318 	andeq	r8, r6, r8, lsl r3
    167c:	02920500 	addseq	r0, r2, #0, 10
    1680:	0000fd16 	andeq	pc, r0, r6, lsl sp	; <UNPREDICTABLE>
    1684:	9218bc00 	andsls	fp, r8, #0, 24
    1688:	05000006 	streq	r0, [r0, #-6]
    168c:	fd160293 	ldc2	2, cr0, [r6, #-588]	; 0xfffffdb4
    1690:	c4000000 	strgt	r0, [r0], #-0
    1694:	0008b218 	andeq	fp, r8, r8, lsl r2
    1698:	02940500 	addseq	r0, r4, #0, 10
    169c:	00002c08 	andeq	r2, r0, r8, lsl #24
    16a0:	0a00cc00 	beq	346a8 <startup-0x1ffcb958>
    16a4:	0000011d 	andeq	r0, r0, sp, lsl r1
    16a8:	0000080e 	andeq	r0, r0, lr, lsl #16
    16ac:	0000250b 	andeq	r2, r0, fp, lsl #10
    16b0:	0a001900 	beq	7ab8 <startup-0x1fff8548>
    16b4:	0000011d 	andeq	r0, r0, sp, lsl r1
    16b8:	0000081e 	andeq	r0, r0, lr, lsl r8
    16bc:	0000250b 	andeq	r2, r0, fp, lsl #10
    16c0:	0a000700 	beq	32c8 <startup-0x1fffcd38>
    16c4:	0000011d 	andeq	r0, r0, sp, lsl r1
    16c8:	0000082e 	andeq	r0, r0, lr, lsr #16
    16cc:	0000250b 	andeq	r2, r0, fp, lsl #10
    16d0:	1b001700 	blne	72d8 <startup-0x1fff8d28>
    16d4:	029905f0 	addseq	r0, r9, #240, 10	; 0x3c000000
    16d8:	00085507 	andeq	r5, r8, r7, lsl #10
    16dc:	08651800 	stmdaeq	r5!, {fp, ip}^
    16e0:	9c050000 	stcls	0, cr0, [r5], {-0}
    16e4:	08551b02 	ldmdaeq	r5, {r1, r8, r9, fp, ip}^
    16e8:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    16ec:	0000085c 	andeq	r0, r0, ip, asr r8
    16f0:	18029d05 	stmdane	r2, {r0, r2, r8, sl, fp, ip, pc}
    16f4:	00000865 	andeq	r0, r0, r5, ror #16
    16f8:	050a0078 	streq	r0, [sl, #-120]	; 0xffffff88
    16fc:	65000003 	strvs	r0, [r0, #-3]
    1700:	0b000008 	bleq	1728 <startup-0x1fffe8d8>
    1704:	00000025 	andeq	r0, r0, r5, lsr #32
    1708:	250a001d 	strcs	r0, [sl, #-29]	; 0xffffffe3
    170c:	75000000 	strvc	r0, [r0, #-0]
    1710:	0b000008 	bleq	1738 <startup-0x1fffe8c8>
    1714:	00000025 	andeq	r0, r0, r5, lsr #32
    1718:	f01c001d 			; <UNDEFINED> instruction: 0xf01c001d
    171c:	03027e05 	movweq	r7, #11781	; 0x2e05
    1720:	0000089a 	muleq	r0, sl, r8
    1724:	00095b1d 	andeq	r5, r9, sp, lsl fp
    1728:	02950500 	addseq	r0, r5, #0, 10
    172c:	0006e90b 	andeq	lr, r6, fp, lsl #18
    1730:	0a781d00 	beq	1e08b38 <startup-0x1e1f74c8>
    1734:	9e050000 	cdpls	0, 0, cr0, cr5, cr0, {0}
    1738:	082e0b02 	stmdaeq	lr!, {r1, r8, r9, fp}
    173c:	0a000000 	beq	1744 <startup-0x1fffe8bc>
    1740:	0000011d 	andeq	r0, r0, sp, lsl r1
    1744:	000008aa 	andeq	r0, r0, sl, lsr #17
    1748:	0000250b 	andeq	r2, r0, fp, lsl #10
    174c:	06001800 	streq	r1, [r0], -r0, lsl #16
    1750:	000006ca 	andeq	r0, r0, sl, asr #13
    1754:	08aa0405 	stmiaeq	sl!, {r0, r2, sl}
    1758:	c01e0000 	andsgt	r0, lr, r0
    175c:	16000008 	strne	r0, [r0], -r8
    1760:	0000046c 	andeq	r0, r0, ip, ror #8
    1764:	b5040500 	strlt	r0, [r4, #-1280]	; 0xfffffb00
    1768:	05000008 	streq	r0, [r0, #-8]
    176c:	00018f04 	andeq	r8, r1, r4, lsl #30
    1770:	08d71e00 	ldmeq	r7, {r9, sl, fp, ip}^
    1774:	2c160000 	ldccs	0, cr0, [r6], {-0}
    1778:	00000000 	andeq	r0, r0, r0
    177c:	08dd0405 	ldmeq	sp, {r0, r2, sl}^
    1780:	04050000 	streq	r0, [r5], #-0
    1784:	000008cc 	andeq	r0, r0, ip, asr #17
    1788:	00064e0a 	andeq	r4, r6, sl, lsl #28
    178c:	0008f300 	andeq	pc, r8, r0, lsl #6
    1790:	00250b00 	eoreq	r0, r5, r0, lsl #22
    1794:	00020000 	andeq	r0, r2, r0
    1798:	0009f11f 	andeq	pc, r9, pc, lsl r1	; <UNPREDICTABLE>
    179c:	032e0500 			; <UNDEFINED> instruction: 0x032e0500
    17a0:	00046c17 	andeq	r6, r4, r7, lsl ip
    17a4:	09ea1f00 	stmibeq	sl!, {r8, r9, sl, fp, ip}^
    17a8:	2f050000 	svccs	0x00050000
    17ac:	04721d03 	ldrbteq	r1, [r2], #-3331	; 0xfffff2fd
    17b0:	c4100000 	ldrgt	r0, [r0], #-0
    17b4:	02000002 	andeq	r0, r0, #2, 0
    17b8:	31100106 	tstcc	r0, r6, lsl #2
    17bc:	11000009 	tstne	r0, r9
    17c0:	02060078 	andeq	r0, r6, #120, 0	; 0x78
    17c4:	00003a13 	andeq	r3, r0, r3, lsl sl
    17c8:	79110000 	ldmdbvc	r1, {}	; <UNPREDICTABLE>
    17cc:	13030600 	movwne	r0, #13824	; 0x3600
    17d0:	0000003a 	andeq	r0, r0, sl, lsr r0
    17d4:	de040001 	cdple	0, 0, cr0, cr4, cr1, {0}
    17d8:	06000002 	streq	r0, [r0], -r2
    17dc:	090d0204 	stmdbeq	sp, {r2, r9}
    17e0:	42100000 	andsmi	r0, r0, #0, 0
    17e4:	2c000003 	stccs	0, cr0, [r0], {3}
    17e8:	7e100806 	cdpvc	8, 1, cr0, cr0, cr6, {0}
    17ec:	0d000009 	stceq	0, cr0, [r0, #-36]	; 0xffffffdc
    17f0:	000003f8 	strdeq	r0, [r0], -r8
    17f4:	2c090906 			; <UNDEFINED> instruction: 0x2c090906
    17f8:	00000000 	andeq	r0, r0, r0
    17fc:	00035e0d 	andeq	r5, r3, sp, lsl #28
    1800:	090a0600 	stmdbeq	sl, {r9, sl}
    1804:	0000002c 	andeq	r0, r0, ip, lsr #32
    1808:	03640d04 	cmneq	r4, #4, 26	; 0x100
    180c:	0b060000 	bleq	181814 <startup-0x1fe7e7ec>
    1810:	00002c09 	andeq	r2, r0, r9, lsl #24
    1814:	70110800 	andsvc	r0, r1, r0, lsl #16
    1818:	0c060078 	stceq	0, cr0, [r6], {120}	; 0x78
    181c:	00097e0b 	andeq	r7, r9, fp, lsl #28
    1820:	0a000c00 	beq	4828 <startup-0x1fffb7d8>
    1824:	00000931 	andeq	r0, r0, r1, lsr r9
    1828:	0000098e 	andeq	r0, r0, lr, lsl #19
    182c:	0000250b 	andeq	r2, r0, fp, lsl #10
    1830:	04000f00 	streq	r0, [r0], #-3840	; 0xfffff100
    1834:	00000249 	andeq	r0, r0, r9, asr #4
    1838:	9a0e0d06 	bls	384c58 <startup-0x1fc7b3a8>
    183c:	05000009 	streq	r0, [r0, #-9]
    1840:	00093d04 	andeq	r3, r9, r4, lsl #26
    1844:	03da1000 	bicseq	r1, sl, #0, 0
    1848:	06240000 	strteq	r0, [r4], -r0
    184c:	0a23100f 	beq	8c5890 <startup-0x1f73a770>
    1850:	67110000 	ldrvs	r0, [r1, -r0]
    1854:	06006f65 	streq	r6, [r0], -r5, ror #30
    1858:	098e0f10 	stmibeq	lr, {r4, r8, r9, sl, fp}
    185c:	0d000000 	stceq	0, cr0, [r0, #-0]
    1860:	00000258 	andeq	r0, r0, r8, asr r2
    1864:	2c091106 	stfcss	f1, [r9], {6}
    1868:	04000000 	streq	r0, [r0], #-0
    186c:	00025d0d 	andeq	r5, r2, sp, lsl #26
    1870:	0e110600 	cfmsub32eq	mvax0, mvfx0, mvfx1, mvfx0
    1874:	0000002c 	andeq	r0, r0, ip, lsr #32
    1878:	02ee0d08 	rsceq	r0, lr, #8, 26	; 0x200
    187c:	12060000 	andne	r0, r6, #0, 0
    1880:	00002c09 	andeq	r2, r0, r9, lsl #24
    1884:	f30d0c00 			; <UNDEFINED> instruction: 0xf30d0c00
    1888:	06000002 	streq	r0, [r0], -r2
    188c:	002c0e12 	eoreq	r0, ip, r2, lsl lr
    1890:	0d100000 	ldceq	0, cr0, [r0, #-0]
    1894:	00000377 	andeq	r0, r0, r7, ror r3
    1898:	340d1306 	strcc	r1, [sp], #-774	; 0xfffffcfa
    189c:	1400000a 	strne	r0, [r0], #-10
    18a0:	0006380d 	andeq	r3, r6, sp, lsl #16
    18a4:	0d140600 	ldceq	6, cr0, [r4, #-0]
    18a8:	00000a34 	andeq	r0, r0, r4, lsr sl
    18ac:	06c50d18 			; <UNDEFINED> instruction: 0x06c50d18
    18b0:	15060000 	strne	r0, [r6, #-0]
    18b4:	000a340d 	andeq	r3, sl, sp, lsl #8
    18b8:	e40d1c00 	str	r1, [sp], #-3072	; 0xfffff400
    18bc:	06000002 	streq	r0, [r0], -r2
    18c0:	0a4f0d16 	beq	13c4d20 <startup-0x1ec3b2e0>
    18c4:	00200000 	eoreq	r0, r0, r0
    18c8:	000a2e1e 	andeq	r2, sl, lr, lsl lr
    18cc:	0a2e1600 	beq	b870d4 <startup-0x1f478f2c>
    18d0:	05000000 	streq	r0, [r0, #-0]
    18d4:	0009a004 	andeq	sl, r9, r4
    18d8:	23040500 	movwcs	r0, #17664	; 0x4500
    18dc:	1e00000a 	cdpne	0, 0, cr0, cr0, cr10, {0}
    18e0:	00000a4f 	andeq	r0, r0, pc, asr #20
    18e4:	000a2e16 	andeq	r2, sl, r6, lsl lr
    18e8:	002c1600 	eoreq	r1, ip, r0, lsl #12
    18ec:	2c160000 	ldccs	0, cr0, [r6], {-0}
    18f0:	00000000 	andeq	r0, r0, r0
    18f4:	0a3a0405 	beq	e82910 <startup-0x1f17d6f0>
    18f8:	2d040000 	stccs	0, cr0, [r4, #-0]
    18fc:	06000004 	streq	r0, [r0], -r4
    1900:	0a2e0c17 	beq	b84964 <startup-0x1f47b69c>
    1904:	550a0000 	strpl	r0, [sl, #-0]
    1908:	7200000a 	andvc	r0, r0, #10, 0
    190c:	2000000a 	andcs	r0, r0, sl
    1910:	00000025 	andeq	r0, r0, r5, lsr #32
    1914:	210001ff 	strdcs	r0, [r0, -pc]
    1918:	00000996 	muleq	r0, r6, r9
    191c:	61090501 	tstvs	r9, r1, lsl #10
    1920:	0500000a 	streq	r0, [r0, #-10]
    1924:	00315803 	eorseq	r5, r1, r3, lsl #16
    1928:	09e42120 	stmibeq	r4!, {r5, r8, sp}^
    192c:	06010000 	streq	r0, [r1], -r0
    1930:	00002c05 	andeq	r2, r0, r5, lsl #24
    1934:	50030500 	andpl	r0, r3, r0, lsl #10
    1938:	21200031 			; <UNDEFINED> instruction: 0x21200031
    193c:	000009b2 			; <UNDEFINED> instruction: 0x000009b2
    1940:	2c050701 	stccs	7, cr0, [r5], {1}
    1944:	05000000 	streq	r0, [r0, #-0]
    1948:	0081e803 	addeq	lr, r1, r3, lsl #16
    194c:	09b72120 	ldmibeq	r7!, {r5, r8, sp}
    1950:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
    1954:	00002c05 	andeq	r2, r0, r5, lsl #24
    1958:	54030500 	strpl	r0, [r3], #-1280	; 0xfffffb00
    195c:	22200031 	eorcs	r0, r0, #49, 0	; 0x31
    1960:	000006c3 	andeq	r0, r0, r3, asr #13
    1964:	2c052b01 			; <UNDEFINED> instruction: 0x2c052b01
    1968:	e8000000 	stmda	r0, {}	; <UNPREDICTABLE>
    196c:	4c20000f 	stcmi	0, cr0, [r0], #-60	; 0xffffffc4
    1970:	01000000 	mrseq	r0, (UNDEF: 0)
    1974:	000ae49c 	muleq	sl, ip, r4
    1978:	057b2300 	ldrbeq	r2, [fp, #-768]!	; 0xfffffd00
    197c:	2c010000 	stccs	0, cr0, [r1], {-0}
    1980:	000a550c 	andeq	r5, sl, ip, lsl #10
    1984:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1988:	090a2400 	stmdbeq	sl, {sl, sp}
    198c:	1f010000 	svcne	0x00010000
    1990:	000f8406 	andeq	r8, pc, r6, lsl #8
    1994:	00006420 	andeq	r6, r0, r0, lsr #8
    1998:	0a9c0100 	beq	fe701da0 <rear+0xde6f9bb8>
    199c:	2500000b 	strcs	r0, [r0, #-11]
    19a0:	0000057b 	andeq	r0, r0, fp, ror r5
    19a4:	55151f01 	ldrpl	r1, [r5, #-3841]	; 0xfffff0ff
    19a8:	0200000a 	andeq	r0, r0, #10, 0
    19ac:	26007491 			; <UNDEFINED> instruction: 0x26007491
    19b0:	0000066b 	andeq	r0, r0, fp, ror #12
    19b4:	2c051a01 			; <UNDEFINED> instruction: 0x2c051a01
    19b8:	70000000 	andvc	r0, r0, r0
    19bc:	1420000f 	strtne	r0, [r0], #-15
    19c0:	01000000 	mrseq	r0, (UNDEF: 0)
    19c4:	0663269c 			; <UNDEFINED> instruction: 0x0663269c
    19c8:	15010000 	strne	r0, [r1, #-0]
    19cc:	000b3606 	andeq	r3, fp, r6, lsl #12
    19d0:	000f4c00 	andeq	r4, pc, r0, lsl #24
    19d4:	00002420 	andeq	r2, r0, r0, lsr #8
    19d8:	029c0100 	addseq	r0, ip, #0
    19dc:	08a70201 	stmiaeq	r7!, {r0, r9}
    19e0:	34260000 	strtcc	r0, [r6], #-0
    19e4:	01000007 	tsteq	r0, r7
    19e8:	0b360610 	bleq	d83230 <startup-0x1f27cdd0>
    19ec:	0f340000 	svceq	0x00340000
    19f0:	00182000 	andseq	r2, r8, r0
    19f4:	9c010000 	stcls	0, cr0, [r1], {-0}
    19f8:	0002ff26 	andeq	pc, r2, r6, lsr #30
    19fc:	090b0100 	stmdbeq	fp, {r8}
    1a00:	00000a55 	andeq	r0, r0, r5, asr sl
    1a04:	20000f18 	andcs	r0, r0, r8, lsl pc
    1a08:	0000001c 	andeq	r0, r0, ip, lsl r0
    1a0c:	Address 0x0000000000001a0c is out of bounds.


Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	110e1b0e 	tstne	lr, lr, lsl #22
   c:	10061201 	andne	r1, r6, r1, lsl #4
  10:	02000017 	andeq	r0, r0, #23, 0
  14:	0b0b0024 	bleq	2c00ac <startup-0x1fd3ff54>
  18:	0e030b3e 	vmoveq.16	d3[0], r0
  1c:	2e030000 	cdpcs	0, 0, cr0, cr3, cr0, {0}
  20:	03193f01 	tsteq	r9, #1, 30
  24:	3b0b3a0e 	blcc	2ce864 <startup-0x1fd3179c>
  28:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
  2c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
  30:	96184006 	ldrls	r4, [r8], -r6
  34:	13011942 	movwne	r1, #6466	; 0x1942
  38:	05040000 	streq	r0, [r4, #-0]
  3c:	3a080300 	bcc	200c44 <startup-0x1fdff3bc>
  40:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  44:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
  48:	05000018 	streq	r0, [r0, #-24]	; 0xffffffe8
  4c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
  50:	0b3b0b3a 	bleq	ec2d40 <startup-0x1f13d2c0>
  54:	13490b39 	movtne	r0, #39737	; 0x9b39
  58:	00001802 	andeq	r1, r0, r2, lsl #16
  5c:	3f012e06 	svccc	0x00012e06
  60:	3a0e0319 	bcc	380ccc <startup-0x1fc7f334>
  64:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  68:	3c13490b 			; <UNDEFINED> instruction: 0x3c13490b
  6c:	07000019 	smladeq	r0, r9, r0, r0
  70:	00000018 	andeq	r0, r0, r8, lsl r0
  74:	0b002408 	bleq	909c <startup-0x1fff6f64>
  78:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
  7c:	09000008 	stmdbeq	r0, {r3}
  80:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
  84:	0b3a0e03 	bleq	e83898 <startup-0x1f17c768>
  88:	0b390b3b 	bleq	e42d7c <startup-0x1f1bd284>
  8c:	06120111 			; <UNDEFINED> instruction: 0x06120111
  90:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
  94:	00130119 	andseq	r0, r3, r9, lsl r1
  98:	012e0a00 			; <UNDEFINED> instruction: 0x012e0a00
  9c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
  a0:	0b3b0b3a 	bleq	ec2d90 <startup-0x1f13d270>
  a4:	13490b39 	movtne	r0, #39737	; 0x9b39
  a8:	1301193c 	movwne	r1, #6460	; 0x193c
  ac:	2e0b0000 	cdpcs	0, 0, cr0, cr11, cr0, {0}
  b0:	03193f01 	tsteq	r9, #1, 30
  b4:	3b0b3a0e 	blcc	2ce8f4 <startup-0x1fd3170c>
  b8:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
  bc:	11134919 	tstne	r3, r9, lsl r9
  c0:	40061201 	andmi	r1, r6, r1, lsl #4
  c4:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
  c8:	00001301 	andeq	r1, r0, r1, lsl #6
  cc:	0300050c 	movweq	r0, #1292	; 0x50c
  d0:	3b0b3a0e 	blcc	2ce910 <startup-0x1fd316f0>
  d4:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
  d8:	00180213 	andseq	r0, r8, r3, lsl r2
  dc:	012e0d00 			; <UNDEFINED> instruction: 0x012e0d00
  e0:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
  e4:	0b3b0b3a 	bleq	ec2dd4 <startup-0x1f13d22c>
  e8:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
  ec:	06120111 			; <UNDEFINED> instruction: 0x06120111
  f0:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
  f4:	00130119 	andseq	r0, r3, r9, lsl r1
  f8:	002e0e00 	eoreq	r0, lr, r0, lsl #28
  fc:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 100:	0b3b0b3a 	bleq	ec2df0 <startup-0x1f13d210>
 104:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 108:	06120111 			; <UNDEFINED> instruction: 0x06120111
 10c:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 110:	00000019 	andeq	r0, r0, r9, lsl r0
 114:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
 118:	030b130e 	movweq	r1, #45838	; 0xb30e
 11c:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
 120:	10011117 	andne	r1, r1, r7, lsl r1
 124:	02000017 	andeq	r0, r0, #23, 0
 128:	0b0b0024 	bleq	2c01c0 <startup-0x1fd3fe40>
 12c:	0e030b3e 	vmoveq.16	d3[0], r0
 130:	01030000 	mrseq	r0, (UNDEF: 3)
 134:	01134901 	tsteq	r3, r1, lsl #18
 138:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
 13c:	13490021 	movtne	r0, #36897	; 0x9021
 140:	0000052f 	andeq	r0, r0, pc, lsr #10
 144:	49003505 	stmdbmi	r0, {r0, r2, r8, sl, ip, sp}
 148:	06000013 			; <UNDEFINED> instruction: 0x06000013
 14c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 150:	0b3b0b3a 	bleq	ec2e40 <startup-0x1f13d1c0>
 154:	13490b39 	movtne	r0, #39737	; 0x9b39
 158:	00001802 	andeq	r1, r0, r2, lsl #16
 15c:	03011307 	movweq	r1, #4871	; 0x1307
 160:	3a0b0b0e 	bcc	2c2da0 <startup-0x1fd3d260>
 164:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 168:	0013010b 	andseq	r0, r3, fp, lsl #2
 16c:	000d0800 	andeq	r0, sp, r0, lsl #16
 170:	0b3a0803 	bleq	e82184 <startup-0x1f17de7c>
 174:	0b390b3b 	bleq	e42e68 <startup-0x1f1bd198>
 178:	0b381349 	bleq	e04ea4 <startup-0x1f1fb15c>
 17c:	16090000 	strne	r0, [r9], -r0
 180:	3a0e0300 	bcc	380d88 <startup-0x1fc7f278>
 184:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 188:	0013490b 	andseq	r4, r3, fp, lsl #18
 18c:	000d0a00 	andeq	r0, sp, r0, lsl #20
 190:	0b3a0e03 	bleq	e839a4 <startup-0x1f17c65c>
 194:	0b390b3b 	bleq	e42e88 <startup-0x1f1bd178>
 198:	0b381349 	bleq	e04ec4 <startup-0x1f1fb13c>
 19c:	240b0000 	strcs	r0, [fp], #-0
 1a0:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 1a4:	0008030b 	andeq	r0, r8, fp, lsl #6
 1a8:	00210c00 	eoreq	r0, r1, r0, lsl #24
 1ac:	0b2f1349 	bleq	bc4ed8 <startup-0x1f43b128>
 1b0:	0f0d0000 	svceq	0x000d0000
 1b4:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
 1b8:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
 1bc:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
 1c0:	00001301 	andeq	r1, r0, r1, lsl #6
 1c4:	4900050f 	stmdbmi	r0, {r0, r1, r2, r3, r8, sl}
 1c8:	10000013 	andne	r0, r0, r3, lsl r0
 1cc:	0b0b0113 	bleq	2c0620 <startup-0x1fd3f9e0>
 1d0:	0b3b0b3a 	bleq	ec2ec0 <startup-0x1f13d140>
 1d4:	13010b39 	movwne	r0, #6969	; 0x1b39
 1d8:	34110000 	ldrcc	r0, [r1], #-0
 1dc:	3a0e0300 	bcc	380de4 <startup-0x1fc7f21c>
 1e0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 1e4:	3f13490b 	svccc	0x0013490b
 1e8:	00180219 	andseq	r0, r8, r9, lsl r2
 1ec:	012e1200 			; <UNDEFINED> instruction: 0x012e1200
 1f0:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 1f4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 1f8:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 1fc:	06120111 			; <UNDEFINED> instruction: 0x06120111
 200:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 204:	00130119 	andseq	r0, r3, r9, lsl r1
 208:	00051300 	andeq	r1, r5, r0, lsl #6
 20c:	0b3a0803 	bleq	e82220 <startup-0x1f17dde0>
 210:	0b39053b 	bleq	e41704 <startup-0x1f1be8fc>
 214:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 218:	2e140000 	cdpcs	0, 1, cr0, cr4, cr0, {0}
 21c:	03193f01 	tsteq	r9, #1, 30
 220:	3b0b3a0e 	blcc	2cea60 <startup-0x1fd315a0>
 224:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
 228:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 22c:	96184006 	ldrls	r4, [r8], -r6
 230:	13011942 	movwne	r1, #6466	; 0x1942
 234:	05150000 	ldreq	r0, [r5, #-0]
 238:	3a0e0300 	bcc	380e40 <startup-0x1fc7f1c0>
 23c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 240:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 244:	16000018 			; <UNDEFINED> instruction: 0x16000018
 248:	0111010b 	tsteq	r1, fp, lsl #2
 24c:	00000612 	andeq	r0, r0, r2, lsl r6
 250:	3f012e17 	svccc	0x00012e17
 254:	3a0e0319 	bcc	380ec0 <startup-0x1fc7f140>
 258:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 25c:	3c13490b 			; <UNDEFINED> instruction: 0x3c13490b
 260:	18000019 	stmdane	r0, {r0, r3, r4}
 264:	00000018 	andeq	r0, r0, r8, lsl r0
 268:	03000519 	movweq	r0, #1305	; 0x519
 26c:	3b0b3a08 	blcc	2cea94 <startup-0x1fd3156c>
 270:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 274:	00180213 	andseq	r0, r8, r3, lsl r2
 278:	00341a00 	eorseq	r1, r4, r0, lsl #20
 27c:	0b3a0803 	bleq	e82290 <startup-0x1f17dd70>
 280:	0b390b3b 	bleq	e42f74 <startup-0x1f1bd08c>
 284:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 288:	2e1b0000 	cdpcs	0, 1, cr0, cr11, cr0, {0}
 28c:	03193f00 	tsteq	r9, #0, 30
 290:	3b0b3a0e 	blcc	2cead0 <startup-0x1fd31530>
 294:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
 298:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 29c:	97184006 	ldrls	r4, [r8, -r6]
 2a0:	00001942 	andeq	r1, r0, r2, asr #18
 2a4:	3f012e1c 	svccc	0x00012e1c
 2a8:	3a0e0319 	bcc	380f14 <startup-0x1fc7f0ec>
 2ac:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 2b0:	3c13490b 			; <UNDEFINED> instruction: 0x3c13490b
 2b4:	1d000019 	stcne	0, cr0, [r0, #-100]	; 0xffffff9c
 2b8:	0e03012e 	adfeqsp	f0, f3, #0.5
 2bc:	0b3b0b3a 	bleq	ec2fac <startup-0x1f13d054>
 2c0:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 2c4:	06120111 			; <UNDEFINED> instruction: 0x06120111
 2c8:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 2cc:	00130119 	andseq	r0, r3, r9, lsl r1
 2d0:	012e1e00 			; <UNDEFINED> instruction: 0x012e1e00
 2d4:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 2d8:	0b3b0b3a 	bleq	ec2fc8 <startup-0x1f13d038>
 2dc:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 2e0:	06120111 			; <UNDEFINED> instruction: 0x06120111
 2e4:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 2e8:	00130119 	andseq	r0, r3, r9, lsl r1
 2ec:	11010000 	mrsne	r0, (UNDEF: 1)
 2f0:	130e2501 	movwne	r2, #58625	; 0xe501
 2f4:	1b0e030b 	blne	380f28 <startup-0x1fc7f0d8>
 2f8:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
 2fc:	00171006 	andseq	r1, r7, r6
 300:	00240200 	eoreq	r0, r4, r0, lsl #4
 304:	0b3e0b0b 	bleq	f82f38 <startup-0x1f07d0c8>
 308:	00000e03 	andeq	r0, r0, r3, lsl #28
 30c:	3f012e03 	svccc	0x00012e03
 310:	3a0e0319 	bcc	380f7c <startup-0x1fc7f084>
 314:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 318:	1119270b 	tstne	r9, fp, lsl #14
 31c:	40061201 	andmi	r1, r6, r1, lsl #4
 320:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 324:	00001301 	andeq	r1, r0, r1, lsl #6
 328:	03000504 	movweq	r0, #1284	; 0x504
 32c:	3b0b3a08 	blcc	2ceb54 <startup-0x1fd314ac>
 330:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 334:	00180213 	andseq	r0, r8, r3, lsl r2
 338:	012e0500 			; <UNDEFINED> instruction: 0x012e0500
 33c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 340:	0b3b0b3a 	bleq	ec3030 <startup-0x1f13cfd0>
 344:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 348:	01111349 	tsteq	r1, r9, asr #6
 34c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 350:	01194296 			; <UNDEFINED> instruction: 0x01194296
 354:	06000013 			; <UNDEFINED> instruction: 0x06000013
 358:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 35c:	0b3b0b3a 	bleq	ec304c <startup-0x1f13cfb4>
 360:	13490b39 	movtne	r0, #39737	; 0x9b39
 364:	00001802 	andeq	r1, r0, r2, lsl #16
 368:	03003407 	movweq	r3, #1031	; 0x407
 36c:	3b0b3a08 	blcc	2ceb94 <startup-0x1fd3146c>
 370:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 374:	00180213 	andseq	r0, r8, r3, lsl r2
 378:	01010800 	tsteq	r1, r0, lsl #16
 37c:	13011349 	movwne	r1, #4937	; 0x1349
 380:	21090000 	mrscs	r0, (UNDEF: 9)
 384:	2f134900 	svccs	0x00134900
 388:	0a00000b 	beq	3bc <startup-0x1ffffc44>
 38c:	0b0b0024 	bleq	2c0424 <startup-0x1fd3fbdc>
 390:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 394:	2e0b0000 	cdpcs	0, 0, cr0, cr11, cr0, {0}
 398:	03193f01 	tsteq	r9, #1, 30
 39c:	3b0b3a0e 	blcc	2cebdc <startup-0x1fd31424>
 3a0:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 3a4:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 3a8:	97184006 	ldrls	r4, [r8, -r6]
 3ac:	13011942 	movwne	r1, #6466	; 0x1942
 3b0:	2e0c0000 	cdpcs	0, 0, cr0, cr12, cr0, {0}
 3b4:	03193f01 	tsteq	r9, #1, 30
 3b8:	3b0b3a0e 	blcc	2cebf8 <startup-0x1fd31408>
 3bc:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
 3c0:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 3c4:	97184006 	ldrls	r4, [r8, -r6]
 3c8:	00001942 	andeq	r1, r0, r2, asr #18
 3cc:	01110100 	tsteq	r1, r0, lsl #2
 3d0:	0b130e25 	bleq	4c3c6c <startup-0x1fb3c394>
 3d4:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
 3d8:	06120111 			; <UNDEFINED> instruction: 0x06120111
 3dc:	00001710 	andeq	r1, r0, r0, lsl r7
 3e0:	0b002402 	bleq	93f0 <startup-0x1fff6c10>
 3e4:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 3e8:	0300000e 	movweq	r0, #14
 3ec:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 3f0:	0b3a0e03 	bleq	e83c04 <startup-0x1f17c3fc>
 3f4:	0b390b3b 	bleq	e430e8 <startup-0x1f1bcf18>
 3f8:	01111927 	tsteq	r1, r7, lsr #18
 3fc:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 400:	01194296 			; <UNDEFINED> instruction: 0x01194296
 404:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
 408:	08030005 	stmdaeq	r3, {r0, r2}
 40c:	0b3b0b3a 	bleq	ec30fc <startup-0x1f13cf04>
 410:	13490b39 	movtne	r0, #39737	; 0x9b39
 414:	00001802 	andeq	r1, r0, r2, lsl #16
 418:	3f012e05 	svccc	0x00012e05
 41c:	3a0e0319 	bcc	381088 <startup-0x1fc7ef78>
 420:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 424:	1119270b 	tstne	r9, fp, lsl #14
 428:	40061201 	andmi	r1, r6, r1, lsl #4
 42c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 430:	00001301 	andeq	r1, r0, r1, lsl #6
 434:	3f002e06 	svccc	0x00002e06
 438:	3a0e0319 	bcc	3810a4 <startup-0x1fc7ef5c>
 43c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 440:	1119270b 	tstne	r9, fp, lsl #14
 444:	40061201 	andmi	r1, r6, r1, lsl #4
 448:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 44c:	01000000 	mrseq	r0, (UNDEF: 0)
 450:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 454:	0e030b13 	vmoveq.32	d3[0], r0
 458:	01110e1b 	tsteq	r1, fp, lsl lr
 45c:	17100612 			; <UNDEFINED> instruction: 0x17100612
 460:	16020000 	strne	r0, [r2], -r0
 464:	3a0e0300 	bcc	38106c <startup-0x1fc7ef94>
 468:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 46c:	0013490b 	andseq	r4, r3, fp, lsl #18
 470:	00240300 	eoreq	r0, r4, r0, lsl #6
 474:	0b3e0b0b 	bleq	f830a8 <startup-0x1f07cf58>
 478:	00000e03 	andeq	r0, r0, r3, lsl #28
 47c:	49010104 	stmdbmi	r1, {r2, r8}
 480:	00130113 	andseq	r0, r3, r3, lsl r1
 484:	00210500 	eoreq	r0, r1, r0, lsl #10
 488:	052f1349 	streq	r1, [pc, #-841]!	; 147 <startup-0x1ffffeb9>
 48c:	35060000 	strcc	r0, [r6, #-0]
 490:	00134900 	andseq	r4, r3, r0, lsl #18
 494:	00340700 	eorseq	r0, r4, r0, lsl #14
 498:	0b3a0e03 	bleq	e83cac <startup-0x1f17c354>
 49c:	0b390b3b 	bleq	e43190 <startup-0x1f1bce70>
 4a0:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 4a4:	2e080000 	cdpcs	0, 0, cr0, cr8, cr0, {0}
 4a8:	03193f01 	tsteq	r9, #1, 30
 4ac:	3b0b3a0e 	blcc	2cecec <startup-0x1fd31314>
 4b0:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
 4b4:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 4b8:	96184006 	ldrls	r4, [r8], -r6
 4bc:	13011942 	movwne	r1, #6466	; 0x1942
 4c0:	34090000 	strcc	r0, [r9], #-0
 4c4:	3a080300 	bcc	2010cc <startup-0x1fdfef34>
 4c8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 4cc:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 4d0:	0a000018 	beq	538 <startup-0x1ffffac8>
 4d4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 4d8:	0b3a0e03 	bleq	e83cec <startup-0x1f17c314>
 4dc:	0b390b3b 	bleq	e431d0 <startup-0x1f1bce30>
 4e0:	01111927 	tsteq	r1, r7, lsr #18
 4e4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 4e8:	01194297 			; <UNDEFINED> instruction: 0x01194297
 4ec:	0b000013 	bleq	540 <startup-0x1ffffac0>
 4f0:	08030005 	stmdaeq	r3, {r0, r2}
 4f4:	0b3b0b3a 	bleq	ec31e4 <startup-0x1f13ce1c>
 4f8:	13490b39 	movtne	r0, #39737	; 0x9b39
 4fc:	00001802 	andeq	r1, r0, r2, lsl #16
 500:	0b00240c 	bleq	9538 <startup-0x1fff6ac8>
 504:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 508:	0d000008 	stceq	0, cr0, [r0, #-32]	; 0xffffffe0
 50c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 510:	0b3a0e03 	bleq	e83d24 <startup-0x1f17c2dc>
 514:	0b390b3b 	bleq	e43208 <startup-0x1f1bcdf8>
 518:	06120111 			; <UNDEFINED> instruction: 0x06120111
 51c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 520:	00130119 	andseq	r0, r3, r9, lsl r1
 524:	010b0e00 	tsteq	fp, r0, lsl #28
 528:	06120111 			; <UNDEFINED> instruction: 0x06120111
 52c:	050f0000 	streq	r0, [pc, #-0]	; 534 <startup-0x1ffffacc>
 530:	3a0e0300 	bcc	381138 <startup-0x1fc7eec8>
 534:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 538:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 53c:	10000018 	andne	r0, r0, r8, lsl r0
 540:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 544:	0b3a0e03 	bleq	e83d58 <startup-0x1f17c2a8>
 548:	0b390b3b 	bleq	e4323c <startup-0x1f1bcdc4>
 54c:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
 550:	18110000 	ldmdane	r1, {}	; <UNPREDICTABLE>
 554:	12000000 	andne	r0, r0, #0, 0
 558:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 55c:	0b3a0e03 	bleq	e83d70 <startup-0x1f17c290>
 560:	0b390b3b 	bleq	e43254 <startup-0x1f1bcdac>
 564:	13491927 	movtne	r1, #39207	; 0x9927
 568:	06120111 			; <UNDEFINED> instruction: 0x06120111
 56c:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 570:	00130119 	andseq	r0, r3, r9, lsl r1
 574:	012e1300 			; <UNDEFINED> instruction: 0x012e1300
 578:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 57c:	0b3b0b3a 	bleq	ec326c <startup-0x1f13cd94>
 580:	13490b39 	movtne	r0, #39737	; 0x9b39
 584:	1301193c 	movwne	r1, #6460	; 0x193c
 588:	2e140000 	cdpcs	0, 1, cr0, cr4, cr0, {0}
 58c:	03193f01 	tsteq	r9, #1, 30
 590:	3b0b3a0e 	blcc	2cedd0 <startup-0x1fd31230>
 594:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
 598:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 59c:	96184006 	ldrls	r4, [r8], -r6
 5a0:	00001942 	andeq	r1, r0, r2, asr #18
 5a4:	01110100 	tsteq	r1, r0, lsl #2
 5a8:	0b130e25 	bleq	4c3e44 <startup-0x1fb3c1bc>
 5ac:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
 5b0:	06120111 			; <UNDEFINED> instruction: 0x06120111
 5b4:	00001710 	andeq	r1, r0, r0, lsl r7
 5b8:	0b002402 	bleq	95c8 <startup-0x1fff6a38>
 5bc:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 5c0:	0300000e 	movweq	r0, #14
 5c4:	0b0b0024 	bleq	2c065c <startup-0x1fd3f9a4>
 5c8:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 5cc:	16040000 	strne	r0, [r4], -r0
 5d0:	3a0e0300 	bcc	3811d8 <startup-0x1fc7ee28>
 5d4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 5d8:	0013490b 	andseq	r4, r3, fp, lsl #18
 5dc:	000f0500 	andeq	r0, pc, r0, lsl #10
 5e0:	13490b0b 	movtne	r0, #39691	; 0x9b0b
 5e4:	13060000 	movwne	r0, #24576	; 0x6000
 5e8:	3c0e0300 	stccc	3, cr0, [lr], {-0}
 5ec:	07000019 	smladeq	r0, r9, r0, r0
 5f0:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
 5f4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 5f8:	13490b39 	movtne	r0, #39737	; 0x9b39
 5fc:	17080000 	strne	r0, [r8, -r0]
 600:	3a0b0b01 	bcc	2c320c <startup-0x1fd3cdf4>
 604:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 608:	0013010b 	andseq	r0, r3, fp, lsl #2
 60c:	000d0900 	andeq	r0, sp, r0, lsl #18
 610:	0b3a0e03 	bleq	e83e24 <startup-0x1f17c1dc>
 614:	0b390b3b 	bleq	e43308 <startup-0x1f1bccf8>
 618:	00001349 	andeq	r1, r0, r9, asr #6
 61c:	4901010a 	stmdbmi	r1, {r1, r3, r8}
 620:	00130113 	andseq	r0, r3, r3, lsl r1
 624:	00210b00 	eoreq	r0, r1, r0, lsl #22
 628:	0b2f1349 	bleq	bc5354 <startup-0x1f43acac>
 62c:	130c0000 	movwne	r0, #49152	; 0xc000
 630:	3a0b0b01 	bcc	2c323c <startup-0x1fd3cdc4>
 634:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 638:	0013010b 	andseq	r0, r3, fp, lsl #2
 63c:	000d0d00 	andeq	r0, sp, r0, lsl #26
 640:	0b3a0e03 	bleq	e83e54 <startup-0x1f17c1ac>
 644:	0b390b3b 	bleq	e43338 <startup-0x1f1bccc8>
 648:	0b381349 	bleq	e05374 <startup-0x1f1fac8c>
 64c:	0f0e0000 	svceq	0x000e0000
 650:	000b0b00 	andeq	r0, fp, r0, lsl #22
 654:	00260f00 	eoreq	r0, r6, r0, lsl #30
 658:	00001349 	andeq	r1, r0, r9, asr #6
 65c:	03011310 	movweq	r1, #4880	; 0x1310
 660:	3a0b0b0e 	bcc	2c32a0 <startup-0x1fd3cd60>
 664:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 668:	0013010b 	andseq	r0, r3, fp, lsl #2
 66c:	000d1100 	andeq	r1, sp, r0, lsl #2
 670:	0b3a0803 	bleq	e82684 <startup-0x1f17d97c>
 674:	0b390b3b 	bleq	e43368 <startup-0x1f1bcc98>
 678:	0b381349 	bleq	e053a4 <startup-0x1f1fac5c>
 67c:	13120000 	tstne	r2, #0, 0
 680:	0b0e0301 	bleq	38128c <startup-0x1fc7ed74>
 684:	3b0b3a05 	blcc	2ceea0 <startup-0x1fd31160>
 688:	010b390b 	tsteq	fp, fp, lsl #18
 68c:	13000013 	movwne	r0, #19
 690:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 694:	0b3b0b3a 	bleq	ec3384 <startup-0x1f13cc7c>
 698:	13490b39 	movtne	r0, #39737	; 0x9b39
 69c:	00000538 	andeq	r0, r0, r8, lsr r5
 6a0:	27001514 	smladcs	r0, r4, r5, r1
 6a4:	15000019 	strne	r0, [r0, #-25]	; 0xffffffe7
 6a8:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
 6ac:	13011349 	movwne	r1, #4937	; 0x1349
 6b0:	05160000 	ldreq	r0, [r6, #-0]
 6b4:	00134900 	andseq	r4, r3, r0, lsl #18
 6b8:	01131700 	tsteq	r3, r0, lsl #14
 6bc:	050b0e03 	streq	r0, [fp, #-3587]	; 0xfffff1fd
 6c0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 6c4:	13010b39 	movwne	r0, #6969	; 0x1b39
 6c8:	0d180000 	ldceq	0, cr0, [r8, #-0]
 6cc:	3a0e0300 	bcc	3812d4 <startup-0x1fc7ed2c>
 6d0:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 6d4:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 6d8:	1900000b 	stmdbne	r0, {r0, r1, r3}
 6dc:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 6e0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 6e4:	13490b39 	movtne	r0, #39737	; 0x9b39
 6e8:	00000538 	andeq	r0, r0, r8, lsr r5
 6ec:	0301131a 	movweq	r1, #4890	; 0x131a
 6f0:	3a0b0b0e 	bcc	2c3330 <startup-0x1fd3ccd0>
 6f4:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 6f8:	0013010b 	andseq	r0, r3, fp, lsl #2
 6fc:	01131b00 	tsteq	r3, r0, lsl #22
 700:	0b3a0b0b 	bleq	e83334 <startup-0x1f17cccc>
 704:	0b39053b 	bleq	e41bf8 <startup-0x1f1be408>
 708:	00001301 	andeq	r1, r0, r1, lsl #6
 70c:	0b01171c 	bleq	46384 <startup-0x1ffb9c7c>
 710:	3b0b3a0b 	blcc	2cef44 <startup-0x1fd310bc>
 714:	010b3905 	tsteq	fp, r5, lsl #18
 718:	1d000013 	stcne	0, cr0, [r0, #-76]	; 0xffffffb4
 71c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 720:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 724:	13490b39 	movtne	r0, #39737	; 0x9b39
 728:	151e0000 	ldrne	r0, [lr, #-0]
 72c:	01192701 	tsteq	r9, r1, lsl #14
 730:	1f000013 	svcne	0x00000013
 734:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 738:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 73c:	13490b39 	movtne	r0, #39737	; 0x9b39
 740:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 744:	21200000 			; <UNDEFINED> instruction: 0x21200000
 748:	2f134900 	svccs	0x00134900
 74c:	21000005 	tstcs	r0, r5
 750:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 754:	0b3b0b3a 	bleq	ec3444 <startup-0x1f13cbbc>
 758:	13490b39 	movtne	r0, #39737	; 0x9b39
 75c:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 760:	2e220000 	cdpcs	0, 2, cr0, cr2, cr0, {0}
 764:	03193f01 	tsteq	r9, #1, 30
 768:	3b0b3a0e 	blcc	2cefa8 <startup-0x1fd31058>
 76c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 770:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 774:	97184006 	ldrls	r4, [r8, -r6]
 778:	13011942 	movwne	r1, #6466	; 0x1942
 77c:	34230000 	strtcc	r0, [r3], #-0
 780:	3a0e0300 	bcc	381388 <startup-0x1fc7ec78>
 784:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 788:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 78c:	24000018 	strcs	r0, [r0], #-24	; 0xffffffe8
 790:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 794:	0b3a0e03 	bleq	e83fa8 <startup-0x1f17c058>
 798:	0b390b3b 	bleq	e4348c <startup-0x1f1bcb74>
 79c:	01111927 	tsteq	r1, r7, lsr #18
 7a0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 7a4:	01194296 			; <UNDEFINED> instruction: 0x01194296
 7a8:	25000013 	strcs	r0, [r0, #-19]	; 0xffffffed
 7ac:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 7b0:	0b3b0b3a 	bleq	ec34a0 <startup-0x1f13cb60>
 7b4:	13490b39 	movtne	r0, #39737	; 0x9b39
 7b8:	00001802 	andeq	r1, r0, r2, lsl #16
 7bc:	3f002e26 	svccc	0x00002e26
 7c0:	3a0e0319 	bcc	38142c <startup-0x1fc7ebd4>
 7c4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 7c8:	1113490b 	tstne	r3, fp, lsl #18
 7cc:	40061201 	andmi	r1, r6, r1, lsl #4
 7d0:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 7d4:	Address 0x00000000000007d4 is out of bounds.


Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	0000001c 	andeq	r0, r0, ip, lsl r0
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	000002e6 	andeq	r0, r0, r6, ror #5
	...
  20:	00000024 	andeq	r0, r0, r4, lsr #32
  24:	02cb0002 	sbceq	r0, fp, #2, 0
  28:	00040000 	andeq	r0, r4, r0
  2c:	00000000 	andeq	r0, r0, r0
  30:	200002f8 	strdcs	r0, [r0], -r8
  34:	000005a8 	andeq	r0, r0, r8, lsr #11
  38:	20000000 	andcs	r0, r0, r0
  3c:	0000000c 	andeq	r0, r0, ip
	...
  48:	0000001c 	andeq	r0, r0, ip, lsl r0
  4c:	09530002 	ldmdbeq	r3, {r1}^
  50:	00040000 	andeq	r0, r4, r0
  54:	00000000 	andeq	r0, r0, r0
  58:	200008a0 	andcs	r0, r0, r0, lsr #17
  5c:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
	...
  68:	0000001c 	andeq	r0, r0, ip, lsl r0
  6c:	0a770002 	beq	1dc007c <startup-0x1e23ff84>
  70:	00040000 	andeq	r0, r4, r0
  74:	00000000 	andeq	r0, r0, r0
  78:	20000990 	mulcs	r0, r0, r9
  7c:	00000062 	andeq	r0, r0, r2, rrx
	...
  88:	0000001c 	andeq	r0, r0, ip, lsl r0
  8c:	0b190002 	bleq	64009c <startup-0x1f9bff64>
  90:	00040000 	andeq	r0, r4, r0
  94:	00000000 	andeq	r0, r0, r0
  98:	200009f4 	strdcs	r0, [r0], -r4
  9c:	00000524 	andeq	r0, r0, r4, lsr #10
	...
  a8:	0000001c 	andeq	r0, r0, ip, lsl r0
  ac:	0ea50002 	cdpeq	0, 10, cr0, cr5, cr2, {0}
  b0:	00040000 	andeq	r0, r4, r0
  b4:	00000000 	andeq	r0, r0, r0
  b8:	20000f18 	andcs	r0, r0, r8, lsl pc
  bc:	0000011c 	andeq	r0, r0, ip, lsl r1
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
   4:	005c0003 	subseq	r0, ip, r3
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	2f010000 	svccs	0x00010000
  1c:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
  20:	6f672f73 	svcvs	0x00672f73
  24:	6d756c6c 	ldclvs	12, cr6, [r5, #-432]!	; 0xfffffe50
  28:	636f442f 	cmnvs	pc, #788529152	; 0x2f000000
  2c:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
  30:	6d2f7374 	stcvs	3, cr7, [pc, #-464]!	; fffffe68 <rear+0xdfff7c80>
  34:	616c706f 	cmnvs	ip, pc, rrx
  38:	61726f62 	cmnvs	r2, r2, ror #30
  3c:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
  40:	4d2f7265 	sfmmi	f7, 4, [pc, #-404]!	; fffffeb4 <rear+0xdfff7ccc>
  44:	532d504f 			; <UNDEFINED> instruction: 0x532d504f
  48:	2f6c6570 	svccs	0x006c6570
  4c:	6b616e53 	blvs	185b9a0 <startup-0x1e7a4660>
  50:	61000065 	tstvs	r0, r5, rrx
  54:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
  58:	70736964 	rsbsvc	r6, r3, r4, ror #18
  5c:	2e79616c 	rpwcsez	f6, f1, #4.0
  60:	00010063 	andeq	r0, r1, r3, rrx
  64:	16050000 	strne	r0, [r5], -r0
  68:	10020500 	andne	r0, r2, r0, lsl #10
  6c:	15200000 	strne	r0, [r0, #-0]!
  70:	31300505 	teqcc	r0, r5, lsl #10
  74:	01053131 	tsteq	r5, r1, lsr r1
  78:	3f29052f 	svccc	0x0029052f
  7c:	05671505 	strbeq	r1, [r7, #-1285]!	; 0xfffffafb
  80:	2b05bb01 	blcs	16ec8c <startup-0x1fe91374>
  84:	67150577 			; <UNDEFINED> instruction: 0x67150577
  88:	054a2305 	strbeq	r2, [sl, #-773]	; 0xfffffcfb
  8c:	01058215 	tsteq	r5, r5, lsl r2
  90:	762c055a 			; <UNDEFINED> instruction: 0x762c055a
  94:	3d670505 	cfstr64cc	mvdx0, [r7, #-20]!	; 0xffffffec
  98:	5901053d 	stmdbpl	r1, {r0, r2, r3, r4, r5, r8, sl}
  9c:	054c2a05 	strbeq	r2, [ip, #-2565]	; 0xfffff5fb
  a0:	3d3d6705 	ldccc	7, cr6, [sp, #-20]!	; 0xffffffec
  a4:	05590105 	ldrbeq	r0, [r9, #-261]	; 0xfffffefb
  a8:	05054c30 	streq	r4, [r5, #-3120]	; 0xfffff3d0
  ac:	16053d67 	strne	r3, [r5], -r7, ror #26
  b0:	3d050520 	cfstr32cc	mvfx0, [r5, #-128]	; 0xffffff80
  b4:	3d01052f 	cfstr32cc	mvfx0, [r1, #-188]	; 0xffffff44
  b8:	05682a05 	strbeq	r2, [r8, #-2565]!	; 0xfffff5fb
  bc:	2f3d3d05 	svccs	0x003d3d05
  c0:	052f1305 	streq	r1, [pc, #-773]!	; fffffdc3 <rear+0xdfff7bdb>
  c4:	0505200a 	streq	r2, [r5, #-10]
  c8:	3d0c053d 	cfstr32cc	mvfx0, [ip, #-244]	; 0xffffff0c
  cc:	052f0105 	streq	r0, [pc, #-261]!	; ffffffcf <rear+0xdfff7de7>
  d0:	05057626 	streq	r7, [r5, #-1574]	; 0xfffff9da
  d4:	201a053d 	andscs	r0, sl, sp, lsr r5
  d8:	3d2f0505 	cfstr32cc	mvfx0, [pc, #-20]!	; cc <startup-0x1fffff34>
  dc:	053d1405 	ldreq	r1, [sp, #-1029]!	; 0xfffffbfb
  e0:	1a055905 	bne	1564fc <startup-0x1fea9b04>
  e4:	2f0c0520 	svccs	0x000c0520
  e8:	052f0105 	streq	r0, [pc, #-261]!	; ffffffeb <rear+0xdfff7e03>
  ec:	05058424 	streq	r8, [r5, #-1060]	; 0xfffffbdc
  f0:	201a053d 	andscs	r0, sl, sp, lsr r5
  f4:	3d2f0505 	cfstr32cc	mvfx0, [pc, #-20]!	; e8 <startup-0x1fffff18>
  f8:	053d1405 	ldreq	r1, [sp, #-1029]!	; 0xfffffbfb
  fc:	1a055905 	bne	156518 <startup-0x1fea9ae8>
 100:	2f0c0520 	svccs	0x000c0520
 104:	052f0105 	streq	r0, [pc, #-261]!	; 7 <startup-0x1ffffff9>
 108:	0a058415 	beq	161164 <startup-0x1fe9ee9c>
 10c:	000c052f 	andeq	r0, ip, pc, lsr #10
 110:	20010402 	andcs	r0, r1, r2, lsl #8
 114:	02002005 	andeq	r2, r0, #5, 0
 118:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 11c:	0402000a 	streq	r0, [r2], #-10
 120:	05053c01 	streq	r3, [r5, #-3073]	; 0xfffff3ff
 124:	053d3d2f 	ldreq	r3, [sp, #-3375]!	; 0xfffff2d1
 128:	13053d01 	movwne	r3, #23809	; 0x5d01
 12c:	2f0a053e 	svccs	0x000a053e
 130:	02000c05 	andeq	r0, r0, #1280	; 0x500
 134:	05200104 	streq	r0, [r0, #-260]!	; 0xfffffefc
 138:	04020020 	streq	r0, [r2], #-32	; 0xffffffe0
 13c:	0a053c01 	beq	14f148 <startup-0x1feb0eb8>
 140:	01040200 	mrseq	r0, R12_usr
 144:	2f05053c 	svccs	0x0005053c
 148:	01053d3d 	tsteq	r5, sp, lsr sp
 14c:	3e17053d 	mrccc	5, 0, r0, cr7, cr13, {1}
 150:	052f0a05 	streq	r0, [pc, #-2565]!	; fffff753 <rear+0xdfff756b>
 154:	0402000c 	streq	r0, [r2], #-12
 158:	20052001 	andcs	r2, r5, r1
 15c:	01040200 	mrseq	r0, R12_usr
 160:	000a053c 	andeq	r0, sl, ip, lsr r5
 164:	3c010402 	cfstrscc	mvf0, [r1], {2}
 168:	3d2f0505 	cfstr32cc	mvfx0, [pc, #-20]!	; 15c <startup-0x1ffffea4>
 16c:	3d01053d 	cfstr32cc	mvfx0, [r1, #-244]	; 0xffffff0c
 170:	053e1605 	ldreq	r1, [lr, #-1541]!	; 0xfffff9fb
 174:	0c052f0a 	stceq	15, cr2, [r5], {10}
 178:	01040200 	mrseq	r0, R12_usr
 17c:	00200520 	eoreq	r0, r0, r0, lsr #10
 180:	3c010402 	cfstrscc	mvf0, [r1], {2}
 184:	02000a05 	andeq	r0, r0, #20480	; 0x5000
 188:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 18c:	3d3d2f05 	ldccc	15, cr2, [sp, #-20]!	; 0xffffffec
 190:	053d0105 	ldreq	r0, [sp, #-261]!	; 0xfffffefb
 194:	05053e27 	streq	r3, [r5, #-3623]	; 0xfffff1d9
 198:	05593d68 	ldrbeq	r3, [r9, #-3432]	; 0xfffff298
 19c:	20053d01 	andcs	r3, r5, r1, lsl #26
 1a0:	5a07054c 	bpl	1c16d8 <startup-0x1fe3e928>
 1a4:	053d1805 	ldreq	r1, [sp, #-2053]!	; 0xfffff7fb
 1a8:	13052e11 	movwne	r2, #24081	; 0x5e11
 1ac:	2e110559 	mrccs	5, 0, r0, cr1, cr9, {2}
 1b0:	9f4c0505 	svcls	0x004c0505
 1b4:	023d0105 	eorseq	r0, sp, #1073741825	; 0x40000001
 1b8:	01010004 	tsteq	r1, r4
 1bc:	00000427 	andeq	r0, r0, r7, lsr #8
 1c0:	008d0003 	addeq	r0, sp, r3
 1c4:	01020000 	mrseq	r0, (UNDEF: 2)
 1c8:	000d0efb 	strdeq	r0, [sp], -fp
 1cc:	01010101 	tsteq	r1, r1, lsl #2
 1d0:	01000000 	mrseq	r0, (UNDEF: 0)
 1d4:	2f010000 	svccs	0x00010000
 1d8:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
 1dc:	6f672f73 	svcvs	0x00672f73
 1e0:	6d756c6c 	ldclvs	12, cr6, [r5, #-432]!	; 0xfffffe50
 1e4:	636f442f 	cmnvs	pc, #788529152	; 0x2f000000
 1e8:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
 1ec:	6d2f7374 	stcvs	3, cr7, [pc, #-464]!	; 24 <startup-0x1fffffdc>
 1f0:	616c706f 	cmnvs	ip, pc, rrx
 1f4:	61726f62 	cmnvs	r2, r2, ror #30
 1f8:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 1fc:	4d2f7265 	sfmmi	f7, 4, [pc, #-404]!	; 70 <startup-0x1fffff90>
 200:	532d504f 			; <UNDEFINED> instruction: 0x532d504f
 204:	2f6c6570 	svccs	0x006c6570
 208:	6b616e53 	blvs	185bb5c <startup-0x1e7a44a4>
 20c:	73000065 	movwvc	r0, #101	; 0x65
 210:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
 214:	632e7075 			; <UNDEFINED> instruction: 0x632e7075
 218:	00000100 	andeq	r0, r0, r0, lsl #2
 21c:	6d6f6567 	cfstr64vs	mvdx6, [pc, #-412]!	; 88 <startup-0x1fffff78>
 220:	69727465 	ldmdbvs	r2!, {r0, r2, r5, r6, sl, ip, sp, lr}^
 224:	6a626f63 	bvs	189bfb8 <startup-0x1e764048>
 228:	2e746365 	cdpcs	3, 7, cr6, cr4, cr5, {3}
 22c:	00010068 	andeq	r0, r1, r8, rrx
 230:	61726700 	cmnvs	r2, r0, lsl #14
 234:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 238:	70736964 	rsbsvc	r6, r3, r4, ror #18
 23c:	2e79616c 	rpwcsez	f6, f1, #4.0
 240:	00010068 	andeq	r0, r1, r8, rrx
 244:	616d6900 	cmnvs	sp, r0, lsl #18
 248:	782e6567 	stmdavc	lr!, {r0, r1, r2, r5, r6, r8, sl, sp, lr}
 24c:	01006d62 	tsteq	r0, r2, ror #26
 250:	05000000 	streq	r0, [r0, #-0]
 254:	02050001 	andeq	r0, r5, #1, 0
 258:	20000000 	andcs	r0, r0, r0
 25c:	13011803 	movwne	r1, #6147	; 0x1803
 260:	212f2121 			; <UNDEFINED> instruction: 0x212f2121
 264:	01000302 	tsteq	r0, r2, lsl #6
 268:	00390501 	eorseq	r0, r9, r1, lsl #10
 26c:	02f80205 	rscseq	r0, r8, #1342177280	; 0x50000000
 270:	1f032000 	svcne	0x00032000
 274:	670d0501 	strvs	r0, [sp, -r1, lsl #10]
 278:	3d01053d 	cfstr32cc	mvfx0, [r1, #-244]	; 0xffffff0c
 27c:	054c1c05 	strbeq	r1, [ip, #-3077]	; 0xfffff3fb
 280:	05054b0e 	streq	r4, [r5, #-2830]	; 0xfffff4f2
 284:	0010052e 	andseq	r0, r0, lr, lsr #10
 288:	21030402 	tstcs	r3, r2, lsl #8
 28c:	02001c05 	andeq	r1, r0, #1280	; 0x500
 290:	052e0304 	streq	r0, [lr, #-772]!	; 0xfffffcfc
 294:	04020020 	streq	r0, [r2], #-32	; 0xffffffe0
 298:	1e057403 	cdpne	4, 0, cr7, cr5, cr3, {0}
 29c:	03040200 	movweq	r0, #16896	; 0x4200
 2a0:	0009052e 	andeq	r0, r9, lr, lsr #10
 2a4:	20030402 	andcs	r0, r3, r2, lsl #8
 2a8:	02002805 	andeq	r2, r0, #327680	; 0x50000
 2ac:	05200304 	streq	r0, [r0, #-772]!	; 0xfffffcfc
 2b0:	04020034 	streq	r0, [r2], #-52	; 0xffffffcc
 2b4:	38052e03 	stmdacc	r5, {r0, r1, r9, sl, fp, sp}
 2b8:	03040200 	movweq	r0, #16896	; 0x4200
 2bc:	00360574 	eorseq	r0, r6, r4, ror r5
 2c0:	2e030402 	cdpcs	4, 0, cr0, cr3, cr2, {0}
 2c4:	02000905 	andeq	r0, r0, #81920	; 0x14000
 2c8:	05200304 	streq	r0, [r0, #-772]!	; 0xfffffcfc
 2cc:	0402002b 	streq	r0, [r2], #-43	; 0xffffffd5
 2d0:	18053b03 	stmdane	r5, {r0, r1, r8, r9, fp, ip, sp}
 2d4:	01040200 	mrseq	r0, R12_usr
 2d8:	001d053c 	andseq	r0, sp, ip, lsr r5
 2dc:	2e010402 	cdpcs	4, 0, cr0, cr1, cr2, {0}
 2e0:	02000505 	andeq	r0, r0, #20971520	; 0x1400000
 2e4:	05200104 	streq	r0, [r0, #-260]!	; 0xfffffefc
 2e8:	1d053f01 	stcne	15, cr3, [r5, #-4]
 2ec:	4b0e055a 	blmi	38185c <startup-0x1fc7e7a4>
 2f0:	052e0505 	streq	r0, [lr, #-1285]!	; 0xfffffafb
 2f4:	04020010 	streq	r0, [r2], #-16
 2f8:	1c052103 	stfnes	f2, [r5], {3}
 2fc:	03040200 	movweq	r0, #16896	; 0x4200
 300:	0020052e 	eoreq	r0, r0, lr, lsr #10
 304:	74030402 	strvc	r0, [r3], #-1026	; 0xfffffbfe
 308:	02001e05 	andeq	r1, r0, #80	; 0x50
 30c:	052e0304 	streq	r0, [lr, #-772]!	; 0xfffffcfc
 310:	04020009 	streq	r0, [r2], #-9
 314:	28052003 	stmdacs	r5, {r0, r1, sp}
 318:	03040200 	movweq	r0, #16896	; 0x4200
 31c:	00340520 	eorseq	r0, r4, r0, lsr #10
 320:	2e030402 	cdpcs	4, 0, cr0, cr3, cr2, {0}
 324:	02003805 	andeq	r3, r0, #327680	; 0x50000
 328:	05740304 	ldrbeq	r0, [r4, #-772]!	; 0xfffffcfc
 32c:	04020036 	streq	r0, [r2], #-54	; 0xffffffca
 330:	09052e03 	stmdbeq	r5, {r0, r1, r9, sl, fp, sp}
 334:	03040200 	movweq	r0, #16896	; 0x4200
 338:	002d0520 	eoreq	r0, sp, r0, lsr #10
 33c:	3b030402 	blcc	c134c <startup-0x1ff3ecb4>
 340:	02001a05 	andeq	r1, r0, #20480	; 0x5000
 344:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 348:	0402001f 	streq	r0, [r2], #-31	; 0xffffffe1
 34c:	05052e01 	streq	r2, [r5, #-3585]	; 0xfffff1ff
 350:	01040200 	mrseq	r0, R12_usr
 354:	3f010520 	svccc	0x00010520
 358:	055a1c05 	ldrbeq	r1, [sl, #-3077]	; 0xfffff3fb
 35c:	1a054d10 	bne	1537a4 <startup-0x1feac85c>
 360:	2e17052e 	cfmul64cs	mvdx0, mvdx7, mvdx14
 364:	05200d05 	streq	r0, [r0, #-3333]!	; 0xfffff2fb
 368:	1a052f10 	bne	14bfb0 <startup-0x1feb4050>
 36c:	2e17052e 	cfmul64cs	mvdx0, mvdx7, mvdx14
 370:	05200d05 	streq	r0, [r0, #-3333]!	; 0xfffff2fb
 374:	1205320a 	andne	r3, r5, #-1610612736	; 0xa0000000
 378:	2e10052e 	cfmul64cs	mvdx0, mvdx0, mvdx14
 37c:	05200705 	streq	r0, [r0, #-1797]!	; 0xfffff8fb
 380:	05592f11 	ldrbeq	r2, [r9, #-3857]	; 0xfffff0ef
 384:	12053f0a 	andne	r3, r5, #10, 30	; 0x28
 388:	2e10052e 	cfmul64cs	mvdx0, mvdx0, mvdx14
 38c:	05200705 	streq	r0, [r0, #-1797]!	; 0xfffff8fb
 390:	10052f11 	andne	r2, r5, r1, lsl pc
 394:	3f0a0559 	svccc	0x000a0559
 398:	052e1205 	streq	r1, [lr, #-517]!	; 0xfffffdfb
 39c:	07052e10 	smladeq	r5, r0, lr, r2
 3a0:	2f110520 	svccs	0x00110520
 3a4:	3f0a0559 	svccc	0x000a0559
 3a8:	052e1205 	streq	r1, [lr, #-517]!	; 0xfffffdfb
 3ac:	07052e10 	smladeq	r5, r0, lr, r2
 3b0:	2f110520 	svccs	0x00110520
 3b4:	3e050559 	cfrshl32cc	mvfx5, mvfx9, r0
 3b8:	054b0105 	strbeq	r0, [fp, #-261]	; 0xfffffefb
 3bc:	00c5034f 	sbceq	r0, r5, pc, asr #6
 3c0:	750e054a 	strvc	r0, [lr, #-1354]	; 0xfffffab6
 3c4:	054b0f05 	strbeq	r0, [fp, #-3845]	; 0xfffff0fb
 3c8:	01054b0d 	tsteq	r5, sp, lsl #22
 3cc:	4c2a053d 	cfstr32mi	mvfx0, [sl], #-244	; 0xffffff0c
 3d0:	05690905 	strbeq	r0, [r9, #-2309]!	; 0xfffff6fb
 3d4:	07052e15 	smladeq	r5, r5, lr, r2
 3d8:	2f1b053c 	svccs	0x001b053c
 3dc:	052e2205 	streq	r2, [lr, #-517]!	; 0xfffffdfb
 3e0:	1b052e18 	blne	14bc48 <startup-0x1feb43b8>
 3e4:	2e220530 	mcrcs	5, 1, r0, cr2, cr0, {1}
 3e8:	052e1805 	streq	r1, [lr, #-2053]!	; 0xfffff7fb
 3ec:	0505310c 	streq	r3, [r5, #-268]	; 0xfffffef4
 3f0:	2110052e 	tstcs	r0, lr, lsr #10
 3f4:	052e0905 	streq	r0, [lr, #-2309]!	; 0xfffff6fb
 3f8:	2b052123 	blcs	14888c <startup-0x1feb7774>
 3fc:	3c3b052e 	cfldr32cc	mvfx0, [fp], #-184	; 0xffffff48
 400:	052e2905 	streq	r2, [lr, #-2309]!	; 0xfffff6fb
 404:	1405201b 	strne	r2, [r5], #-27	; 0xffffffe5
 408:	2e0d054b 	cfsh32cs	mvfx0, mvfx13, #43
 40c:	05211505 	streq	r1, [r1, #-1285]!	; 0xfffffafb
 410:	1d058214 	sfmne	f0, 1, [r5, #-80]	; 0xffffffb0
 414:	2e210521 	cfsh64cs	mvdx0, mvdx1, #17
 418:	052e2505 	streq	r2, [lr, #-1285]!	; 0xfffffafb
 41c:	15052e29 	strne	r2, [r5, #-3625]	; 0xfffff1d7
 420:	20300520 	eorscs	r0, r0, r0, lsr #10
 424:	053c3405 	ldreq	r3, [ip, #-1029]!	; 0xfffffbfb
 428:	21052015 	tstcs	r5, r5, lsl r0
 42c:	02040200 	andeq	r0, r4, #0, 4
 430:	000d053a 	andeq	r0, sp, sl, lsr r5
 434:	3c010402 	cfstrscc	mvf0, [r1], {2}
 438:	02002a05 	andeq	r2, r0, #20480	; 0x5000
 43c:	053a0204 	ldreq	r0, [sl, #-516]!	; 0xfffffdfc
 440:	04020009 	streq	r0, [r2], #-9
 444:	21053c01 	tstcs	r5, r1, lsl #24
 448:	02040200 	andeq	r0, r4, #0, 4
 44c:	00160549 	andseq	r0, r6, r9, asr #10
 450:	3c010402 	cfstrscc	mvf0, [r1], {2}
 454:	02000505 	andeq	r0, r0, #20971520	; 0x1400000
 458:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 45c:	3c090301 	stccc	3, cr0, [r9], {1}
 460:	055a1b05 	ldrbeq	r1, [sl, #-2821]	; 0xfffff4fb
 464:	05054b06 	streq	r4, [r5, #-2822]	; 0xfffff4fa
 468:	3d11052e 	cfldr32cc	mvfx0, [r1, #-184]	; 0xffffff48
 46c:	053c0d05 	ldreq	r0, [ip, #-3333]!	; 0xfffff2fb
 470:	0a05210b 	beq	1488a4 <startup-0x1feb775c>
 474:	2e090521 	cfsh32cs	mvfx0, mvfx9, #17
 478:	2c0d053d 	cfstr32cs	mvfx0, [sp], {61}	; 0x3d
 47c:	054a0c05 	strbeq	r0, [sl, #-3077]	; 0xfffff3fb
 480:	01053c0b 	tsteq	r5, fp, lsl #24
 484:	5c140532 	cfldr32pl	mvfx0, [r4], {50}	; 0x32
 488:	05350505 	ldreq	r0, [r5, #-1285]!	; 0xfffffafb
 48c:	05052013 	streq	r2, [r5, #-19]	; 0xffffffed
 490:	2014052f 	andscs	r0, r4, pc, lsr #10
 494:	052f0505 	streq	r0, [pc, #-1285]!	; ffffff97 <rear+0xdfff7daf>
 498:	05052015 	streq	r2, [r5, #-21]	; 0xffffffeb
 49c:	20130530 	andscs	r0, r3, r0, lsr r5
 4a0:	052f0505 	streq	r0, [pc, #-1285]!	; ffffffa3 <rear+0xdfff7dbb>
 4a4:	05052013 	streq	r2, [r5, #-19]	; 0xffffffed
 4a8:	2013053d 	andscs	r0, r3, sp, lsr r5
 4ac:	7505052f 	strvc	r0, [r5, #-1327]	; 0xfffffad1
 4b0:	05201405 	streq	r1, [r0, #-1029]!	; 0xfffffbfb
 4b4:	0105300c 	tsteq	r5, ip
 4b8:	0832053d 	ldmdaeq	r2!, {r0, r2, r3, r4, r5, r8, sl}
 4bc:	670d053e 	smladxvs	sp, lr, r5, r0
 4c0:	3d0e053d 	cfstr32cc	mvfx0, [lr, #-244]	; 0xffffff0c
 4c4:	052e0505 	streq	r0, [lr, #-1285]!	; 0xfffffafb
 4c8:	0402000c 	streq	r0, [r2], #-12
 4cc:	18052103 	stmdane	r5, {r0, r1, r8, sp}
 4d0:	03040200 	movweq	r0, #16896	; 0x4200
 4d4:	000a053d 	andeq	r0, sl, sp, lsr r5
 4d8:	2e030402 	cdpcs	4, 0, cr0, cr3, cr2, {0}
 4dc:	02001b05 	andeq	r1, r0, #5120	; 0x1400
 4e0:	052e0304 	streq	r0, [lr, #-772]!	; 0xfffffcfc
 4e4:	04020014 	streq	r0, [r2], #-20	; 0xffffffec
 4e8:	0a052003 	beq	1484fc <startup-0x1feb7b04>
 4ec:	03040200 	movweq	r0, #16896	; 0x4200
 4f0:	00140521 	andseq	r0, r4, r1, lsr #10
 4f4:	2e030402 	cdpcs	4, 0, cr0, cr3, cr2, {0}
 4f8:	02000905 	andeq	r0, r0, #81920	; 0x14000
 4fc:	052f0304 	streq	r0, [pc, #-772]!	; 200 <startup-0x1ffffe00>
 500:	0402000b 	streq	r0, [r2], #-11
 504:	02005903 	andeq	r5, r0, #49152	; 0xc000
 508:	053d0304 	ldreq	r0, [sp, #-772]!	; 0xfffffcfc
 50c:	0402001d 	streq	r0, [r2], #-29	; 0xffffffe3
 510:	3c7a0303 	ldclcc	3, cr0, [sl], #-12
 514:	02000505 	andeq	r0, r0, #20971520	; 0x1400000
 518:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 51c:	1d054401 	cfstrsne	mvf4, [r5, #-4]
 520:	4b09055a 	blmi	241a90 <startup-0x1fdbe570>
 524:	3301052f 	movwcc	r0, #5423	; 0x152f
 528:	054c2105 	strbeq	r2, [ip, #-261]	; 0xfffffefb
 52c:	13056709 	movwne	r6, #22281	; 0x5709
 530:	5b0d054a 	blpl	341a60 <startup-0x1fcbe5a0>
 534:	054a2005 	strbeq	r2, [sl, #-5]
 538:	052f4d05 	streq	r4, [pc, #-3333]!	; fffff83b <rear+0xdfff7653>
 53c:	0b05300a 	bleq	14c56c <startup-0x1feb3a94>
 540:	05200a03 	streq	r0, [r0, #-2563]!	; 0xfffff5fd
 544:	0591670d 	ldreq	r6, [r1, #1805]	; 0x70d
 548:	0e055915 			; <UNDEFINED> instruction: 0x0e055915
 54c:	210d053f 	tstcs	sp, pc, lsr r5
 550:	1a056832 	bne	15a620 <startup-0x1fea59e0>
 554:	670d0531 	smladxvs	sp, r1, r5, r0
 558:	05911d05 	ldreq	r1, [r1, #3333]	; 0xd05
 55c:	1c059011 	stcne	0, cr9, [r5], {17}
 560:	90110521 	andsls	r0, r1, r1, lsr #10
 564:	05211a05 	streq	r1, [r1, #-2565]!	; 0xfffff5fb
 568:	1c059011 	stcne	0, cr9, [r5], {17}
 56c:	90110521 	andsls	r0, r1, r1, lsr #10
 570:	05212105 	streq	r2, [r1, #-261]!	; 0xfffffefb
 574:	11054a2e 	tstne	r5, lr, lsr #20
 578:	21270558 			; <UNDEFINED> instruction: 0x21270558
 57c:	05581105 	ldrbeq	r1, [r8, #-261]	; 0xfffffefb
 580:	206f030e 	rsbcs	r0, pc, lr, lsl #6
 584:	70030a05 	andvc	r0, r3, r5, lsl #20
 588:	03010574 	movweq	r0, #5492	; 0x1574
 58c:	2a055825 	bcs	156628 <startup-0x1fea99d8>
 590:	0505a008 	streq	sl, [r5, #-8]
 594:	03010567 	movweq	r0, #5479	; 0x1567
 598:	0520081c 	streq	r0, [r0, #-2076]!	; 0xfffff7e4
 59c:	20660311 	rsbcs	r0, r6, r1, lsl r3
 5a0:	052e0f05 	streq	r0, [lr, #-3845]!	; 0xfffff0fb
 5a4:	11052f12 	tstne	r5, r2, lsl pc
 5a8:	500d052e 	andpl	r0, sp, lr, lsr #10
 5ac:	05221105 	streq	r1, [r2, #-261]!	; 0xfffffefb
 5b0:	12052e0f 	andne	r2, r5, #240	; 0xf0
 5b4:	2e11052f 	cfmul64cs	mvdx0, mvdx1, mvdx15
 5b8:	055b0d05 	ldrbeq	r0, [fp, #-3333]	; 0xfffff2fb
 5bc:	0f052211 	svceq	0x00052211
 5c0:	2f12052e 	svccs	0x0012052e
 5c4:	052e1105 	streq	r1, [lr, #-261]!	; 0xfffffefb
 5c8:	11055a0d 	tstne	r5, sp, lsl #20
 5cc:	2e0f0522 	cfsh32cs	mvfx0, mvfx15, #18
 5d0:	052f1205 	streq	r1, [pc, #-517]!	; 3d3 <startup-0x1ffffc2d>
 5d4:	0d052e11 	stceq	14, cr2, [r5, #-68]	; 0xffffffbc
 5d8:	206f034d 	rsbcs	r0, pc, sp, asr #6
 5dc:	05343334 	ldreq	r3, [r4, #-820]!	; 0xfffffccc
 5e0:	04022201 	streq	r2, [r2], #-513	; 0xfffffdff
 5e4:	e7010100 	str	r0, [r1, -r0, lsl #2]
 5e8:	03000000 	movweq	r0, #0
 5ec:	00005400 	andeq	r5, r0, r0, lsl #8
 5f0:	fb010200 	blx	40dfa <startup-0x1ffbf206>
 5f4:	01000d0e 	tsteq	r0, lr, lsl #26
 5f8:	00010101 	andeq	r0, r1, r1, lsl #2
 5fc:	00010000 	andeq	r0, r1, r0
 600:	552f0100 	strpl	r0, [pc, #-256]!	; 508 <startup-0x1ffffaf8>
 604:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 608:	6c6f672f 	stclvs	7, cr6, [pc], #-188	; 554 <startup-0x1ffffaac>
 60c:	2f6d756c 	svccs	0x006d756c
 610:	75636f44 	strbvc	r6, [r3, #-3908]!	; 0xfffff0bc
 614:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
 618:	6f6d2f73 	svcvs	0x006d2f73
 61c:	62616c70 	rsbvs	r6, r1, #112, 24	; 0x7000
 620:	7461726f 	strbtvc	r7, [r1], #-623	; 0xfffffd91
 624:	656e6f69 	strbvs	r6, [lr, #-3945]!	; 0xfffff097
 628:	4f4d2f72 	svcmi	0x004d2f72
 62c:	70532d50 	subsvc	r2, r3, r0, asr sp
 630:	532f6c65 			; <UNDEFINED> instruction: 0x532f6c65
 634:	656b616e 	strbvs	r6, [fp, #-366]!	; 0xfffffe92
 638:	656b0000 	strbvs	r0, [fp, #-0]!
 63c:	632e6279 			; <UNDEFINED> instruction: 0x632e6279
 640:	00000100 	andeq	r0, r0, r0, lsl #2
 644:	00190500 	andseq	r0, r9, r0, lsl #10
 648:	08a00205 	stmiaeq	r0!, {r0, r2, r9}
 64c:	05152000 	ldreq	r2, [r5, #-0]
 650:	1a054b1f 	bne	1532d4 <startup-0x1feacd2c>
 654:	2e05052e 	cfsh32cs	mvfx0, mvfx5, #30
 658:	05201605 	streq	r1, [r0, #-1541]!	; 0xfffff9fb
 65c:	13052f01 	movwne	r2, #24321	; 0x5f01
 660:	3e120576 	mrccc	5, 0, r0, cr2, cr6, {3}
 664:	05200a05 	streq	r0, [r0, #-2565]!	; 0xfffff5fb
 668:	05053d0b 	streq	r3, [r5, #-3339]	; 0xfffff2f5
 66c:	210d052e 	tstcs	sp, lr, lsr #10
 670:	05740c05 	ldrbeq	r0, [r4, #-3077]!	; 0xfffff3fb
 674:	17052114 	smladne	r5, r4, r1, r2
 678:	02040200 	andeq	r0, r4, #0, 4
 67c:	0005052c 	andeq	r0, r5, ip, lsr #10
 680:	3c010402 	cfstrscc	mvf0, [r1], {2}
 684:	05410c05 	strbeq	r0, [r1, #-3077]	; 0xfffff3fb
 688:	19052f01 	stmdbne	r5, {r0, r8, r9, sl, fp, sp}
 68c:	3d130569 	cfldr32cc	mvfx0, [r3, #-420]	; 0xfffffe5c
 690:	6a0e0575 	bvs	381c6c <startup-0x1fc7e394>
 694:	052e0505 	streq	r0, [lr, #-1285]!	; 0xfffffafb
 698:	13052109 	movwne	r2, #20745	; 0x5109
 69c:	4b0c054b 	blmi	301bd0 <startup-0x1fcfe430>
 6a0:	053d2605 	ldreq	r2, [sp, #-1541]!	; 0xfffff9fb
 6a4:	1a052e22 	bne	14bf34 <startup-0x1feb40cc>
 6a8:	001f052e 	andseq	r0, pc, lr, lsr #10
 6ac:	38020402 	stmdacc	r2, {r1, sl}
 6b0:	02000505 	andeq	r0, r0, #20971520	; 0x1400000
 6b4:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 6b8:	0105430c 	tsteq	r5, ip, lsl #6
 6bc:	01040200 	mrseq	r0, R12_usr
 6c0:	841e0521 	ldrhi	r0, [lr], #-1313	; 0xfffffadf
 6c4:	05680505 	strbeq	r0, [r8, #-1285]!	; 0xfffffafb
 6c8:	01052015 	tsteq	r5, r5, lsl r0
 6cc:	0006023e 	andeq	r0, r6, lr, lsr r2
 6d0:	009c0101 	addseq	r0, ip, r1, lsl #2
 6d4:	00030000 	andeq	r0, r3, r0
 6d8:	00000055 	andeq	r0, r0, r5, asr r0
 6dc:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
 6e0:	0101000d 	tsteq	r1, sp
 6e4:	00000101 	andeq	r0, r0, r1, lsl #2
 6e8:	00000100 	andeq	r0, r0, r0, lsl #2
 6ec:	73552f01 	cmpvc	r5, #1, 30
 6f0:	2f737265 	svccs	0x00737265
 6f4:	6c6c6f67 	stclvs	15, cr6, [ip], #-412	; 0xfffffe64
 6f8:	442f6d75 	strtmi	r6, [pc], #-3445	; 700 <startup-0x1ffff900>
 6fc:	6d75636f 	ldclvs	3, cr6, [r5, #-444]!	; 0xfffffe44
 700:	73746e65 	cmnvc	r4, #1616	; 0x650
 704:	706f6d2f 	rsbvc	r6, pc, pc, lsr #26
 708:	6f62616c 	svcvs	0x0062616c
 70c:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
 710:	72656e6f 	rsbvc	r6, r5, #1776	; 0x6f0
 714:	504f4d2f 	subpl	r4, pc, pc, lsr #26
 718:	6570532d 	ldrbvs	r5, [r0, #-813]!	; 0xfffffcd3
 71c:	6e532f6c 	cdpvs	15, 5, cr2, cr3, cr12, {3}
 720:	00656b61 	rsbeq	r6, r5, r1, ror #22
 724:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 728:	632e7961 			; <UNDEFINED> instruction: 0x632e7961
 72c:	00000100 	andeq	r0, r0, r0, lsl #2
 730:	00190500 	andseq	r0, r9, r0, lsl #10
 734:	09900205 	ldmibeq	r0, {r0, r2, r9}
 738:	05162000 	ldreq	r2, [r6, #-0]
 73c:	01053009 	tsteq	r5, r9
 740:	05200903 	streq	r0, [r0, #-2307]!	; 0xfffff6fd
 744:	09053017 	stmdbeq	r5, {r0, r1, r2, r4, ip, sp}
 748:	24010530 	strcs	r0, [r1], #-1328	; 0xfffffad0
 74c:	05302205 	ldreq	r2, [r0, #-517]!	; 0xfffffdfb
 750:	01054c09 	tsteq	r5, r9, lsl #24
 754:	3e220528 	cfsh64cc	mvdx0, mvdx2, #24
 758:	054c0c05 	strbeq	r0, [ip, #-3077]	; 0xfffff3fb
 75c:	0a05830b 	beq	161390 <startup-0x1fe9ec70>
 760:	2109053f 	tstcs	r9, pc, lsr r5
 764:	05570d05 	ldrbeq	r0, [r7, #-3333]	; 0xfffff2fb
 768:	01053c0a 	tsteq	r5, sl, lsl #24
 76c:	00050231 	andeq	r0, r5, r1, lsr r2
 770:	02c80101 	sbceq	r0, r8, #1073741824	; 0x40000000
 774:	00030000 	andeq	r0, r3, r0
 778:	00000081 	andeq	r0, r0, r1, lsl #1
 77c:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
 780:	0101000d 	tsteq	r1, sp
 784:	00000101 	andeq	r0, r0, r1, lsl #2
 788:	00000100 	andeq	r0, r0, r0, lsl #2
 78c:	73552f01 	cmpvc	r5, #1, 30
 790:	2f737265 	svccs	0x00737265
 794:	6c6c6f67 	stclvs	15, cr6, [ip], #-412	; 0xfffffe64
 798:	442f6d75 	strtmi	r6, [pc], #-3445	; 7a0 <startup-0x1ffff860>
 79c:	6d75636f 	ldclvs	3, cr6, [r5, #-444]!	; 0xfffffe44
 7a0:	73746e65 	cmnvc	r4, #1616	; 0x650
 7a4:	706f6d2f 	rsbvc	r6, pc, pc, lsr #26
 7a8:	6f62616c 	svcvs	0x0062616c
 7ac:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
 7b0:	72656e6f 	rsbvc	r6, r5, #1776	; 0x6f0
 7b4:	504f4d2f 	subpl	r4, pc, pc, lsr #26
 7b8:	6570532d 	ldrbvs	r5, [r0, #-813]!	; 0xfffffcd3
 7bc:	6e532f6c 	cdpvs	15, 5, cr2, cr3, cr12, {3}
 7c0:	00656b61 	rsbeq	r6, r5, r1, ror #22
 7c4:	6700002e 	strvs	r0, [r0, -lr, lsr #32]
 7c8:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 7cc:	69646369 	stmdbvs	r4!, {r0, r3, r5, r6, r8, r9, sp, lr}^
 7d0:	616c7073 	smcvs	50947	; 0xc703
 7d4:	00632e79 	rsbeq	r2, r3, r9, ror lr
 7d8:	67000001 	strvs	r0, [r0, -r1]
 7dc:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 7e0:	69646369 	stmdbvs	r4!, {r0, r3, r5, r6, r8, r9, sp, lr}^
 7e4:	616c7073 	smcvs	50947	; 0xc703
 7e8:	00682e79 	rsbeq	r2, r8, r9, ror lr
 7ec:	64000002 	strvs	r0, [r0], #-2
 7f0:	6e696665 	cdpvs	6, 6, cr6, cr9, cr5, {3}
 7f4:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
 7f8:	00000200 	andeq	r0, r0, r0, lsl #4
 7fc:	00180500 	andseq	r0, r8, r0, lsl #10
 800:	09f40205 	ldmibeq	r4!, {r0, r2, r9}^
 804:	05172000 	ldreq	r2, [r7, #-0]
 808:	3d3d2f05 	ldccc	15, cr2, [sp, #-20]!	; 0xffffffec
 80c:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
 810:	4b4b4b4b 	blmi	12d3544 <startup-0x1ed2cabc>
 814:	3d01054b 	cfstr32cc	mvfx0, [r1, #-300]	; 0xfffffed4
 818:	053e2705 	ldreq	r2, [lr, #-1797]!	; 0xfffff8fb
 81c:	07056a08 	streq	r6, [r5, -r8, lsl #20]
 820:	05bb4b20 	ldreq	r4, [fp, #2848]!	; 0xb20
 824:	14057505 	strne	r7, [r5], #-1285	; 0xfffffafb
 828:	3e010520 	cfsh32cc	mvfx0, mvfx1, #16
 82c:	05682505 	strbeq	r2, [r8, #-1285]!	; 0xfffffafb
 830:	07056a08 	streq	r6, [r5, -r8, lsl #20]
 834:	05754b20 	ldrbeq	r4, [r5, #-2848]!	; 0xfffff4e0
 838:	14056705 	strne	r6, [r5], #-1797	; 0xfffff8fb
 83c:	3d010520 	cfstr32cc	mvfx0, [r1, #-128]	; 0xffffff80
 840:	05682b05 	strbeq	r2, [r8, #-2821]!	; 0xfffff4fb
 844:	01056705 	tsteq	r5, r5, lsl #14
 848:	05ba1303 	ldreq	r1, [sl, #771]!	; 0x303
 84c:	206f030d 	rsbcs	r0, pc, sp, lsl #6
 850:	3d3d233d 	ldccc	3, cr2, [sp, #-244]!	; 0xffffff0c
 854:	233d3d23 	teqcs	sp, #2240	; 0x8c0
 858:	2201053d 	andcs	r0, r1, #255852544	; 0xf400000
 85c:	054c1e05 	strbeq	r1, [ip, #-3589]	; 0xfffff1fb
 860:	053d2f05 	ldreq	r2, [sp, #-3845]!	; 0xfffff0fb
 864:	05052013 	streq	r2, [r5, #-19]	; 0xffffffed
 868:	053d3d2f 	ldreq	r3, [sp, #-3375]!	; 0xfffff2d1
 86c:	04020009 	streq	r0, [r2], #-9
 870:	02003001 	andeq	r3, r0, #1, 0
 874:	003d0104 	eorseq	r0, sp, r4, lsl #2
 878:	2f010402 	svccs	0x00010402
 87c:	01040200 	mrseq	r0, R12_usr
 880:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
 884:	35052b01 	strcc	r2, [r5, #-2817]	; 0xfffff4ff
 888:	05580b03 	ldrbeq	r0, [r8, #-2819]	; 0xfffff4fd
 88c:	053d6705 	ldreq	r6, [sp, #-1797]!	; 0xfffff8fb
 890:	05052013 	streq	r2, [r5, #-19]	; 0xffffffed
 894:	2f593d2f 	svccs	0x00593d2f
 898:	2f1c053d 	svccs	0x001c053d
 89c:	05201305 	streq	r1, [r0, #-773]!	; 0xfffffcfb
 8a0:	053d4b05 	ldreq	r4, [sp, #-2821]!	; 0xfffff4fb
 8a4:	14052013 	strne	r2, [r5], #-19	; 0xffffffed
 8a8:	4a080530 	bmi	201d70 <startup-0x1fdfe290>
 8ac:	05210905 	streq	r0, [r1, #-2309]!	; 0xfffff6fb
 8b0:	08053f14 	stmdaeq	r5, {r2, r4, r8, r9, sl, fp, ip, sp}
 8b4:	2109054a 	tstcs	r9, sl, asr #10
 8b8:	053f0c05 	ldreq	r0, [pc, #-3077]!	; fffffcbb <rear+0xdfff7ad3>
 8bc:	2e053d01 	cdpcs	13, 0, cr3, cr5, cr1, {0}
 8c0:	670c05ca 	strvs	r0, [ip, -sl, asr #11]
 8c4:	67010559 	smlsdvs	r1, r9, r5, r0
 8c8:	054c3605 	strbeq	r3, [ip, #-1541]	; 0xfffff9fb
 8cc:	16059105 	strne	r9, [r5], -r5, lsl #2
 8d0:	3d050520 	cfstr32cc	mvfx0, [r5, #-128]	; 0xffffff80
 8d4:	2f3d2f59 	svccs	0x003d2f59
 8d8:	053e1305 	ldreq	r1, [lr, #-773]!	; 0xfffffcfb
 8dc:	09054a07 	stmdbeq	r5, {r0, r1, r2, r9, fp, lr}
 8e0:	3f130521 	svccc	0x00130521
 8e4:	054a0705 	strbeq	r0, [sl, #-1797]	; 0xfffff8fb
 8e8:	05052109 	streq	r2, [r5, #-265]	; 0xfffffef7
 8ec:	20160541 	andscs	r0, r6, r1, asr #10
 8f0:	3d2f0505 	cfstr32cc	mvfx0, [pc, #-20]!	; 8e4 <startup-0x1ffff71c>
 8f4:	053e0105 	ldreq	r0, [lr, #-261]!	; 0xfffffefb
 8f8:	0505683c 	streq	r6, [r5, #-2108]	; 0xfffff7c4
 8fc:	3d593d91 	ldclcc	13, cr3, [r9, #-580]	; 0xfffffdbc
 900:	8301053d 	movwhi	r0, #5437	; 0x153d
 904:	054c3a05 	strbeq	r3, [ip, #-2565]	; 0xfffff5fb
 908:	593d9105 	ldmdbpl	sp!, {r0, r2, r8, ip, pc}
 90c:	01053d3d 	tsteq	r5, sp, lsr sp
 910:	4c200583 	cfstr32mi	mvfx0, [r0], #-524	; 0xfffffdf4
 914:	053d0e05 	ldreq	r0, [sp, #-3589]!	; 0xfffff1fb
 918:	2c052e05 	stccs	14, cr2, [r5], {5}
 91c:	66090521 	strvs	r0, [r9], -r1, lsr #10
 920:	4b120559 	blmi	481e8c <startup-0x1fb7e174>
 924:	052e0905 	streq	r0, [lr, #-2309]!	; 0xfffff6fb
 928:	0402000d 	streq	r0, [r2], #-13
 92c:	28052103 	stmdacs	r5, {r0, r1, r8, sp}
 930:	03040200 	movweq	r0, #16896	; 0x4200
 934:	00090549 	andeq	r0, r9, r9, asr #10
 938:	3c010402 	cfstrscc	mvf0, [r1], {2}
 93c:	02002605 	andeq	r2, r0, #5242880	; 0x500000
 940:	05390204 	ldreq	r0, [r9, #-516]!	; 0xfffffdfc
 944:	04020005 	streq	r0, [r2], #-5
 948:	01053c01 	tsteq	r5, r1, lsl #24
 94c:	5a180543 	bpl	601e60 <startup-0x1f9fe1a0>
 950:	053e0c05 	ldreq	r0, [lr, #-3077]!	; 0xfffff3fb
 954:	17052e05 	strne	r2, [r5, -r5, lsl #28]
 958:	03040200 	movweq	r0, #16896	; 0x4200
 95c:	001c0521 	andseq	r0, ip, r1, lsr #10
 960:	57030402 	strpl	r0, [r3, -r2, lsl #8]
 964:	02000505 	andeq	r0, r0, #20971520	; 0x1400000
 968:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 96c:	23055a01 	movwcs	r5, #23041	; 0x5a01
 970:	5a090584 	bpl	241f88 <startup-0x1fdbe078>
 974:	052f0805 	streq	r0, [pc, #-2053]!	; 177 <startup-0x1ffffe89>
 978:	04020011 	streq	r0, [r2], #-17	; 0xffffffef
 97c:	19053c02 	stmdbne	r5, {r1, sl, fp, ip, sp}
 980:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
 984:	0022053c 	eoreq	r0, r2, ip, lsr r5
 988:	3c060402 	cfstrscc	mvf0, [r6], {2}
 98c:	053e1405 	ldreq	r1, [lr, #-1029]!	; 0xfffffbfb
 990:	0e052e17 	mcreq	14, 0, r2, cr5, cr7, {0}
 994:	2e0a052e 	cfsh32cs	mvfx0, mvfx10, #30
 998:	053e0705 	ldreq	r0, [lr, #-1797]!	; 0xfffff8fb
 99c:	0f053d0b 	svceq	0x00053d0b
 9a0:	3f15053d 	svccc	0x0015053d
 9a4:	052e1805 	streq	r1, [lr, #-2053]!	; 0xfffff7fb
 9a8:	1005201b 	andne	r2, r5, fp, lsl r0
 9ac:	2e0b0520 	cfsh32cs	mvfx0, mvfx11, #16
 9b0:	053e1705 	ldreq	r1, [lr, #-1797]!	; 0xfffff8fb
 9b4:	d675032c 	ldrbtle	r0, [r5], -ip, lsr #6
 9b8:	0c030105 	stfeqs	f0, [r3], {5}
 9bc:	5a1f0520 	bpl	7c1e44 <startup-0x1f83e1bc>
 9c0:	053e1205 	ldreq	r1, [lr, #-517]!	; 0xfffffdfb
 9c4:	0505300c 	streq	r3, [r5, #-12]
 9c8:	2114054a 	tstcs	r4, sl, asr #10
 9cc:	01040200 	mrseq	r0, R12_usr
 9d0:	02005806 	andeq	r5, r0, #393216	; 0x60000
 9d4:	002e0204 	eoreq	r0, lr, r4, lsl #4
 9d8:	20040402 	andcs	r0, r4, r2, lsl #8
 9dc:	02001005 	andeq	r1, r0, #5, 0
 9e0:	2f060404 	svccs	0x00060404
 9e4:	02000905 	andeq	r0, r0, #81920	; 0x14000
 9e8:	054a0404 	strbeq	r0, [sl, #-1028]	; 0xfffffbfc
 9ec:	05c9210d 	strbeq	r2, [r9, #269]	; 0x10d
 9f0:	0d056713 	stceq	7, cr6, [r5, #-76]	; 0xffffffb4
 9f4:	002e054a 	eoreq	r0, lr, sl, asr #10
 9f8:	21030402 	tstcs	r3, r2, lsl #8
 9fc:	02001105 	andeq	r1, r0, #1073741825	; 0x40000001
 a00:	054a0304 	strbeq	r0, [sl, #-772]	; 0xfffffcfc
 a04:	04020022 	streq	r0, [r2], #-34	; 0xffffffde
 a08:	27057303 	strcs	r7, [r5, -r3, lsl #6]
 a0c:	03040200 	movweq	r0, #16896	; 0x4200
 a10:	000d0566 	andeq	r0, sp, r6, ror #10
 a14:	3c010402 	cfstrscc	mvf0, [r1], {2}
 a18:	02001d05 	andeq	r1, r0, #320	; 0x140
 a1c:	05550204 	ldrbeq	r0, [r5, #-516]	; 0xfffffdfc
 a20:	04020009 	streq	r0, [r2], #-9
 a24:	19056601 	stmdbne	r5, {r0, r9, sl, sp, lr}
 a28:	02040200 	andeq	r0, r4, #0, 4
 a2c:	00050556 	andeq	r0, r5, r6, asr r5
 a30:	66010402 	strvs	r0, [r1], -r2, lsl #8
 a34:	0a030105 	beq	c0e50 <startup-0x1ff3f1b0>
 a38:	00080258 	andeq	r0, r8, r8, asr r2
 a3c:	01cd0101 	biceq	r0, sp, r1, lsl #2
 a40:	00030000 	andeq	r0, r3, r0
 a44:	00000155 	andeq	r0, r0, r5, asr r1
 a48:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
 a4c:	0101000d 	tsteq	r1, sp
 a50:	00000101 	andeq	r0, r0, r1, lsl #2
 a54:	00000100 	andeq	r0, r0, r0, lsl #2
 a58:	73552f01 	cmpvc	r5, #1, 30
 a5c:	2f737265 	svccs	0x00737265
 a60:	6c6c6f67 	stclvs	15, cr6, [ip], #-412	; 0xfffffe64
 a64:	442f6d75 	strtmi	r6, [pc], #-3445	; a6c <startup-0x1ffff594>
 a68:	6d75636f 	ldclvs	3, cr6, [r5, #-444]!	; 0xfffffe44
 a6c:	73746e65 	cmnvc	r4, #1616	; 0x650
 a70:	706f6d2f 	rsbvc	r6, pc, pc, lsr #26
 a74:	6f62616c 	svcvs	0x0062616c
 a78:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
 a7c:	72656e6f 	rsbvc	r6, r5, #1776	; 0x6f0
 a80:	504f4d2f 	subpl	r4, pc, pc, lsr #26
 a84:	6570532d 	ldrbvs	r5, [r0, #-813]!	; 0xfffffcd3
 a88:	6e532f6c 	cdpvs	15, 5, cr2, cr3, cr12, {3}
 a8c:	00656b61 	rsbeq	r6, r5, r1, ror #22
 a90:	7070412f 	rsbsvc	r4, r0, pc, lsr #2
 a94:	6163696c 	cmnvs	r3, ip, ror #18
 a98:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 a9c:	6f632f73 	svcvs	0x00632f73
 aa0:	696c6564 	stmdbvs	ip!, {r2, r5, r6, r8, sl, sp, lr}^
 aa4:	612e6574 			; <UNDEFINED> instruction: 0x612e6574
 aa8:	432f7070 			; <UNDEFINED> instruction: 0x432f7070
 aac:	65746e6f 	ldrbvs	r6, [r4, #-3695]!	; 0xfffff191
 ab0:	2f73746e 	svccs	0x0073746e
 ab4:	72616853 	rsbvc	r6, r1, #5439488	; 0x530000
 ab8:	75536465 	ldrbvc	r6, [r3, #-1125]	; 0xfffffb9b
 abc:	726f7070 	rsbvc	r7, pc, #112, 0	; 0x70
 ac0:	6f742f74 	svcvs	0x00742f74
 ac4:	2f736c6f 	svccs	0x00736c6f
 ac8:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
 acc:	2f6d7261 	svccs	0x006d7261
 ad0:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
 ad4:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
 ad8:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
 adc:	6e692f69 	cdpvs	15, 6, cr2, cr9, cr9, {3}
 ae0:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
 ae4:	79732f65 	ldmdbvc	r3!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
 ae8:	412f0073 			; <UNDEFINED> instruction: 0x412f0073
 aec:	696c7070 	stmdbvs	ip!, {r4, r5, r6, ip, sp, lr}^
 af0:	69746163 	ldmdbvs	r4!, {r0, r1, r5, r6, r8, sp, lr}^
 af4:	2f736e6f 	svccs	0x00736e6f
 af8:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
 afc:	6574696c 	ldrbvs	r6, [r4, #-2412]!	; 0xfffff694
 b00:	7070612e 	rsbsvc	r6, r0, lr, lsr #2
 b04:	6e6f432f 	cdpvs	3, 6, cr4, cr15, cr15, {1}
 b08:	746e6574 	strbtvc	r6, [lr], #-1396	; 0xfffffa8c
 b0c:	68532f73 	ldmdavs	r3, {r0, r1, r4, r5, r6, r8, r9, sl, fp, sp}^
 b10:	64657261 	strbtvs	r7, [r5], #-609	; 0xfffffd9f
 b14:	70707553 	rsbsvc	r7, r0, r3, asr r5
 b18:	2f74726f 	svccs	0x0074726f
 b1c:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 954 <startup-0x1ffff6ac>
 b20:	63672f73 	cmnvs	r7, #460	; 0x1cc
 b24:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
 b28:	696c2f6d 	stmdbvs	ip!, {r0, r2, r3, r5, r6, r8, r9, sl, fp, sp}^
 b2c:	63672f62 	cmnvs	r7, #392	; 0x188
 b30:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
 b34:	6f6e2d6d 	svcvs	0x006e2d6d
 b38:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
 b3c:	2f696261 	svccs	0x00696261
 b40:	2e322e39 	mrccs	14, 1, r2, cr2, cr9, {1}
 b44:	6e692f31 	mcrvs	15, 3, r2, cr9, cr1, {1}
 b48:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
 b4c:	71000065 	tstvc	r0, r5, rrx
 b50:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0xfffffa8b
 b54:	0100632e 	tsteq	r0, lr, lsr #6
 b58:	6f6c0000 	svcvs	0x006c0000
 b5c:	682e6b63 	stmdavs	lr!, {r0, r1, r5, r6, r8, r9, fp, sp, lr}
 b60:	00000200 	andeq	r0, r0, r0, lsl #4
 b64:	7079745f 	rsbsvc	r7, r9, pc, asr r4
 b68:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
 b6c:	00000200 	andeq	r0, r0, r0, lsl #4
 b70:	64647473 	strbtvs	r7, [r4], #-1139	; 0xfffffb8d
 b74:	682e6665 	stmdavs	lr!, {r0, r2, r5, r6, r9, sl, sp, lr}
 b78:	00000300 	andeq	r0, r0, r0, lsl #6
 b7c:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
 b80:	00682e74 	rsbeq	r2, r8, r4, ror lr
 b84:	67000002 	strvs	r0, [r0, -r2]
 b88:	656d6f65 	strbvs	r6, [sp, #-3941]!	; 0xfffff09b
 b8c:	63697274 	cmnvs	r9, #116, 4	; 0x40000007
 b90:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
 b94:	682e7463 	stmdavs	lr!, {r0, r1, r5, r6, sl, ip, sp, lr}
 b98:	00000100 	andeq	r0, r0, r0, lsl #2
 b9c:	00100500 	andseq	r0, r0, r0, lsl #10
 ba0:	0f180205 	svceq	0x00180205
 ba4:	0a032000 	beq	c8bac <startup-0x1ff37454>
 ba8:	2f130501 	svccs	0x00130501
 bac:	05590105 	ldrbeq	r0, [r9, #-261]	; 0xfffffefb
 bb0:	15057710 	strne	r7, [r5, #-1808]	; 0xfffff8f0
 bb4:	5901052f 	stmdbpl	r1, {r0, r1, r2, r3, r5, r8, sl}
 bb8:	055b0f05 	ldrbeq	r0, [fp, #-3845]	; 0xfffff0fb
 bbc:	01052f15 	tsteq	r5, r5, lsl pc
 bc0:	850c0583 	strhi	r0, [ip, #-1411]	; 0xfffffa7d
 bc4:	052f0b05 	streq	r0, [pc, #-2821]!	; c7 <startup-0x1fffff39>
 bc8:	1b052f01 	blne	14c7d4 <startup-0x1feb382c>
 bcc:	4c080569 	cfstr32mi	mvfx0, [r8], {105}	; 0x69
 bd0:	054a0705 	strbeq	r0, [sl, #-1797]	; 0xfffff8fb
 bd4:	0f053c06 	svceq	0x00053c06
 bd8:	2e090530 	cfmv64hrcs	mvdx9, r0
 bdc:	053d0f05 	ldreq	r0, [sp, #-3845]!	; 0xfffff0fb
 be0:	18054c10 	stmdane	r5, {r4, sl, fp, lr}
 be4:	2e10053c 	mrccs	5, 0, r0, cr0, cr12, {1}
 be8:	052e1805 	streq	r1, [lr, #-2053]!	; 0xfffff7fb
 bec:	01054b10 	tsteq	r5, r0, lsl fp
 bf0:	bc0e055a 	cfstr32lt	mvfx0, [lr], {90}	; 0x5a
 bf4:	053d2105 	ldreq	r2, [sp, #-261]!	; 0xfffffefb
 bf8:	0d05580c 	stceq	8, cr5, [r5, #-48]	; 0xffffffd0
 bfc:	2e06054c 	cfsh32cs	mvfx0, mvfx6, #44
 c00:	3f4b0d05 	svccc	0x004b0d05
 c04:	05590b05 	ldrbeq	r0, [r9, #-2821]	; 0xfffff4fb
 c08:	0b022101 	bleq	89014 <startup-0x1ff76fec>
 c0c:	Address 0x0000000000000c0c is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	616c6564 	cmnvs	ip, r4, ror #10
   4:	696d5f79 	stmdbvs	sp!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
   8:	00696c6c 	rsbeq	r6, r9, ip, ror #24
   c:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
  10:	6f675f69 	svcvs	0x00675f69
  14:	79786f74 	ldmdbvc	r8!, {r2, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
  18:	63736100 	cmnvs	r3, #0
  1c:	635f6969 	cmpvs	pc, #1720320	; 0x1a4000
  20:	5f6c7274 	svcpl	0x006c7274
  24:	5f746962 	svcpl	0x00746962
  28:	61656c63 	cmnvs	r5, r3, ror #24
  2c:	65640072 	strbvs	r0, [r4, #-114]!	; 0xffffff8e
  30:	5f79616c 	svcpl	0x0079616c
  34:	726b696d 	rsbvc	r6, fp, #1785856	; 0x1b4000
  38:	7361006f 	cmnvc	r1, #111, 0	; 0x6f
  3c:	5f696963 	svcpl	0x00696963
  40:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
  44:	6f635f65 	svcvs	0x00635f65
  48:	6f72746e 	svcvs	0x0072746e
  4c:	72656c6c 	rsbvc	r6, r5, #108, 24	; 0x6c00
  50:	554e4700 	strbpl	r4, [lr, #-1792]	; 0xfffff900
  54:	39394320 	ldmdbcc	r9!, {r5, r8, r9, lr}
  58:	322e3920 	eorcc	r3, lr, #32, 18	; 0x80000
  5c:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  60:	31393130 	teqcc	r9, r0, lsr r1
  64:	20353230 	eorscs	r3, r5, r0, lsr r2
  68:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  6c:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  70:	415b2029 	cmpmi	fp, r9, lsr #32
  74:	612f4d52 			; <UNDEFINED> instruction: 0x612f4d52
  78:	392d6d72 	pushcc	{r1, r4, r5, r6, r8, sl, fp, sp, lr}
  7c:	6172622d 	cmnvs	r2, sp, lsr #4
  80:	2068636e 	rsbcs	r6, r8, lr, ror #6
  84:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
  88:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
  8c:	37373220 	ldrcc	r3, [r7, -r0, lsr #4]!
  90:	5d393935 			; <UNDEFINED> instruction: 0x5d393935
  94:	746d2d20 	strbtvc	r2, [sp], #-3360	; 0xfffff2e0
  98:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
  9c:	666d2d20 	strbtvs	r2, [sp], -r0, lsr #26
  a0:	74616f6c 	strbtvc	r6, [r1], #-3948	; 0xfffff094
  a4:	6962612d 	stmdbvs	r2!, {r0, r2, r3, r5, r8, sp, lr}^
  a8:	666f733d 			; <UNDEFINED> instruction: 0x666f733d
  ac:	6d2d2074 	stcvs	0, cr2, [sp, #-464]!	; 0xfffffe30
  b0:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
  b4:	6d72613d 	ldfvse	f6, [r2, #-244]!	; 0xffffff0c
  b8:	6d2d3676 	stcvs	6, cr3, [sp, #-472]!	; 0xfffffe28
  bc:	20672d20 	rsbcs	r2, r7, r0, lsr #26
  c0:	20304f2d 	eorscs	r4, r0, sp, lsr #30
  c4:	6474732d 	ldrbtvs	r7, [r4], #-813	; 0xfffffcd3
  c8:	3939633d 	ldmdbcc	r9!, {r0, r2, r3, r4, r5, r8, r9, sp, lr}
  cc:	63736100 	cmnvs	r3, #0
  d0:	725f6969 	subsvc	r6, pc, #1720320	; 0x1a4000
  d4:	5f646165 	svcpl	0x00646165
  d8:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
  dc:	63007375 	movwvs	r7, #885	; 0x375
  e0:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
  e4:	7369645f 	cmnvc	r9, #1593835520	; 0x5f000000
  e8:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
  ec:	63736100 	cmnvs	r3, #0
  f0:	775f6969 	ldrbvc	r6, [pc, -r9, ror #18]
  f4:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
  f8:	7461645f 	strbtvc	r6, [r1], #-1119	; 0xfffffba1
  fc:	65640061 	strbvs	r0, [r4, #-97]!	; 0xffffff9f
 100:	5f79616c 	svcpl	0x0079616c
 104:	6e303532 	mrcvs	5, 1, r3, cr0, cr2, {1}
 108:	65720073 	ldrbvs	r0, [r2, #-115]!	; 0xffffff8d
 10c:	6c615674 	stclvs	6, cr5, [r1], #-464	; 0xfffffe30
 110:	64646100 	strbtvs	r6, [r4], #-256	; 0xffffff00
 114:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
 118:	63736100 	cmnvs	r3, #0
 11c:	725f6969 	subsvc	r6, pc, #1720320	; 0x1a4000
 120:	5f646165 	svcpl	0x00646165
 124:	746e6f63 	strbtvc	r6, [lr], #-3939	; 0xfffff09d
 128:	6c6c6f72 	stclvs	15, cr6, [ip], #-456	; 0xfffffe38
 12c:	61007265 	tstvs	r0, r5, ror #4
 130:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 134:	6165725f 	cmnvs	r5, pc, asr r2
 138:	61645f64 	cmnvs	r4, r4, ror #30
 13c:	64006174 	strvs	r6, [r0], #-372	; 0xfffffe8c
 140:	6c707369 	ldclvs	3, cr7, [r0], #-420	; 0xfffffe5c
 144:	635f7961 	cmpvs	pc, #1589248	; 0x184000
 148:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
 14c:	75006c6f 	strvc	r6, [r0, #-3183]	; 0xfffff391
 150:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
 154:	2064656e 	rsbcs	r6, r4, lr, ror #10
 158:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
 15c:	73552f00 	cmpvc	r5, #0, 30
 160:	2f737265 	svccs	0x00737265
 164:	6c6c6f67 	stclvs	15, cr6, [ip], #-412	; 0xfffffe64
 168:	442f6d75 	strtmi	r6, [pc], #-3445	; 170 <startup-0x1ffffe90>
 16c:	6d75636f 	ldclvs	3, cr6, [r5, #-444]!	; 0xfffffe44
 170:	73746e65 	cmnvc	r4, #1616	; 0x650
 174:	706f6d2f 	rsbvc	r6, pc, pc, lsr #26
 178:	6f62616c 	svcvs	0x0062616c
 17c:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
 180:	72656e6f 	rsbvc	r6, r5, #1776	; 0x6f0
 184:	504f4d2f 	subpl	r4, pc, pc, lsr #26
 188:	6570532d 	ldrbvs	r5, [r0, #-813]!	; 0xfffffcd3
 18c:	6e532f6c 	cdpvs	15, 5, cr2, cr3, cr12, {3}
 190:	00656b61 	rsbeq	r6, r5, r1, ror #22
 194:	44746572 	ldrbtmi	r6, [r4], #-1394	; 0xfffffa8e
 198:	00617461 	rsbeq	r7, r1, r1, ror #8
 19c:	746e7566 	strbtvc	r7, [lr], #-1382	; 0xfffffa9a
 1a0:	5f6e6f69 	svcpl	0x006e6f69
 1a4:	00746573 	rsbseq	r6, r4, r3, ror r5
 1a8:	65747962 	ldrbvs	r7, [r4, #-2402]!	; 0xfffff69e
 1ac:	63736100 	cmnvs	r3, #0
 1b0:	775f6969 	ldrbvc	r6, [pc, -r9, ror #18]
 1b4:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 1b8:	646d635f 	strbtvs	r6, [sp], #-863	; 0xfffffca1
 1bc:	74657200 	strbtvc	r7, [r5], #-512	; 0xfffffe00
 1c0:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
 1c4:	746e6500 	strbtvc	r6, [lr], #-1280	; 0xfffffb00
 1c8:	6d5f7972 	vldrvs.16	s15, [pc, #-228]	; ec <startup-0x1fffff14>	; <UNPREDICTABLE>
 1cc:	5f65646f 	svcpl	0x0065646f
 1d0:	00746573 	rsbseq	r6, r4, r3, ror r5
 1d4:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 1d8:	72775f69 	rsbsvc	r5, r7, #420	; 0x1a4
 1dc:	5f657469 	svcpl	0x00657469
 1e0:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
 1e4:	63736100 	cmnvs	r3, #0
 1e8:	635f6969 	cmpvs	pc, #1720320	; 0x1a4000
 1ec:	5f6c7274 	svcpl	0x006c7274
 1f0:	5f746962 	svcpl	0x00746962
 1f4:	00746573 	rsbseq	r6, r4, r3, ror r5
 1f8:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
 1fc:	672f7372 			; <UNDEFINED> instruction: 0x672f7372
 200:	756c6c6f 	strbvc	r6, [ip, #-3183]!	; 0xfffff391
 204:	6f442f6d 	svcvs	0x00442f6d
 208:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0xfffffa9d
 20c:	2f73746e 	svccs	0x0073746e
 210:	6c706f6d 	ldclvs	15, cr6, [r0], #-436	; 0xfffffe4c
 214:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
 218:	6f697461 	svcvs	0x00697461
 21c:	2f72656e 	svccs	0x0072656e
 220:	2d504f4d 	ldclcs	15, cr4, [r0, #-308]	; 0xfffffecc
 224:	6c657053 	stclvs	0, cr7, [r5], #-332	; 0xfffffeb4
 228:	616e532f 	cmnvs	lr, pc, lsr #6
 22c:	612f656b 			; <UNDEFINED> instruction: 0x612f656b
 230:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 234:	70736964 	rsbsvc	r6, r3, r4, ror #18
 238:	2e79616c 	rpwcsez	f6, f1, #4.0
 23c:	73610063 	cmnvc	r1, #99, 0	; 0x63
 240:	5f696963 	svcpl	0x00696963
 244:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
 248:	45475000 	strbmi	r5, [r7, #-0]
 24c:	54454d4f 	strbpl	r4, [r5], #-3407	; 0xfffff2b1
 250:	61005952 	tstvs	r0, r2, asr r9
 254:	00766772 	rsbseq	r6, r6, r2, ror r7
 258:	78726964 	ldmdavc	r2!, {r2, r5, r6, r8, fp, sp, lr}^
 25c:	72696400 	rsbvc	r6, r9, #0, 8
 260:	552f0079 	strpl	r0, [pc, #-121]!	; 1ef <startup-0x1ffffe11>
 264:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 268:	6c6f672f 	stclvs	7, cr6, [pc], #-188	; 1b4 <startup-0x1ffffe4c>
 26c:	2f6d756c 	svccs	0x006d756c
 270:	75636f44 	strbvc	r6, [r3, #-3908]!	; 0xfffff0bc
 274:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
 278:	6f6d2f73 	svcvs	0x006d2f73
 27c:	62616c70 	rsbvs	r6, r1, #112, 24	; 0x7000
 280:	7461726f 	strbtvc	r7, [r1], #-623	; 0xfffffd91
 284:	656e6f69 	strbvs	r6, [lr, #-3945]!	; 0xfffff097
 288:	4f4d2f72 	svcmi	0x004d2f72
 28c:	70532d50 	subsvc	r2, r3, r0, asr sp
 290:	532f6c65 			; <UNDEFINED> instruction: 0x532f6c65
 294:	656b616e 	strbvs	r6, [fp, #-366]!	; 0xfffffe92
 298:	6174732f 	cmnvs	r4, pc, lsr #6
 29c:	70757472 	rsbsvc	r7, r5, r2, ror r4
 2a0:	6400632e 	strvs	r6, [r0], #-814	; 0xfffffcd2
 2a4:	5f776172 	svcpl	0x00776172
 2a8:	6b616e73 	blvs	185bc7c <startup-0x1e7a4384>
 2ac:	6d690065 	stclvs	0, cr0, [r9, #-404]!	; 0xfffffe6c
 2b0:	5f656761 	svcpl	0x00656761
 2b4:	73746962 	cmnvc	r4, #1605632	; 0x188000
 2b8:	696e6900 	stmdbvs	lr!, {r8, fp, sp, lr}^
 2bc:	6e735f74 	mrcvs	15, 3, r5, cr3, cr4, {3}
 2c0:	00656b61 	rsbeq	r6, r5, r1, ror #22
 2c4:	696f5074 	stmdbvs	pc!, {r2, r4, r5, r6, ip, lr}^	; <UNPREDICTABLE>
 2c8:	7300746e 	movwvc	r7, #1134	; 0x46e
 2cc:	656b616e 	strbvs	r6, [fp, #-366]!	; 0xfffffe92
 2d0:	64616568 	strbtvs	r6, [r1], #-1384	; 0xfffffa98
 2d4:	6f65675f 	svcvs	0x0065675f
 2d8:	7274656d 	rsbsvc	r6, r4, #457179136	; 0x1b400000
 2dc:	4f500079 	svcmi	0x00500079
 2e0:	00544e49 	subseq	r4, r4, r9, asr #28
 2e4:	5f746573 	svcpl	0x00746573
 2e8:	65657073 	strbvs	r7, [r5, #-115]!	; 0xffffff8d
 2ec:	6f700064 	svcvs	0x00700064
 2f0:	70007873 	andvc	r7, r0, r3, ror r8
 2f4:	0079736f 	rsbseq	r7, r9, pc, ror #6
 2f8:	67696568 	strbvs	r6, [r9, -r8, ror #10]!
 2fc:	70007468 	andvc	r7, r0, r8, ror #8
 300:	006b6565 	rsbeq	r6, fp, r5, ror #10
 304:	6b616e73 	blvs	185bcd8 <startup-0x1e7a4328>
 308:	646f6265 	strbtvs	r6, [pc], #-613	; 310 <startup-0x1ffffcf0>
 30c:	65675f79 	strbvs	r5, [r7, #-3961]!	; 0xfffff087
 310:	74656d6f 	strbtvc	r6, [r5], #-3439	; 0xfffff291
 314:	66007972 			; <UNDEFINED> instruction: 0x66007972
 318:	5f646f6f 	svcpl	0x00646f6f
 31c:	6d6f6567 	cfstr64vs	mvdx6, [pc, #-412]!	; 188 <startup-0x1ffffe78>
 320:	79727465 	ldmdbvc	r2!, {r0, r2, r5, r6, sl, ip, sp, lr}^
 324:	69616d00 	stmdbvs	r1!, {r8, sl, fp, sp, lr}^
 328:	6e69006e 	cdpvs	0, 6, cr0, cr9, cr14, {3}
 32c:	615f7469 	cmpvs	pc, r9, ror #8
 330:	74007070 	strvc	r7, [r0], #-112	; 0xffffff90
 334:	006e7275 	rsbeq	r7, lr, r5, ror r2
 338:	6b616e73 	blvs	185bd0c <startup-0x1e7a42f4>
 33c:	646f6265 	strbtvs	r6, [pc], #-613	; 344 <startup-0x1ffffcbc>
 340:	47740079 			; <UNDEFINED> instruction: 0x47740079
 344:	656d6f65 	strbvs	r6, [sp, #-3941]!	; 0xfffff09b
 348:	00797274 	rsbseq	r7, r9, r4, ror r2
 34c:	6b616e73 	blvs	185bd20 <startup-0x1e7a42e0>
 350:	61656865 	cmnvs	r5, r5, ror #16
 354:	65720064 	ldrbvs	r0, [r2, #-100]!	; 0xffffff9c
 358:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 35c:	69730074 	ldmdbvs	r3!, {r2, r4, r5, r6}^
 360:	0078657a 	rsbseq	r6, r8, sl, ror r5
 364:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0xfffff68d
 368:	72610079 	rsbvc	r0, r1, #121, 0	; 0x79
 36c:	73006367 	movwvc	r6, #871	; 0x367
 370:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
 374:	64007075 	strvs	r7, [r0], #-117	; 0xffffff8b
 378:	00776172 	rsbseq	r6, r7, r2, ror r1
 37c:	646f6f66 	strbtvs	r6, [pc], #-3942	; 384 <startup-0x1ffffc7c>
 380:	6a626f5f 	bvs	189c104 <startup-0x1e763efc>
 384:	79656b00 	stmdbvc	r5!, {r8, r9, fp, sp, lr}^
 388:	7274735f 	rsbsvc	r7, r4, #2080374785	; 0x7c000001
 38c:	00656b6f 	rsbeq	r6, r5, pc, ror #22
 390:	74646977 	strbtvc	r6, [r4], #-2423	; 0xfffff689
 394:	61620068 	cmnvs	r2, r8, rrx
 398:	75426b63 	strbvc	r6, [r2, #-2915]	; 0xfffff49d
 39c:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
 3a0:	74657300 	strbtvc	r7, [r5], #-768	; 0xfffffd00
 3a4:	6a626f5f 	bvs	189c128 <startup-0x1e763ed8>
 3a8:	5f746365 	svcpl	0x00746365
 3ac:	65657073 	strbvs	r7, [r5, #-115]!	; 0xffffff8d
 3b0:	69770064 	ldmdbvs	r7!, {r2, r5, r6}^
 3b4:	5f687464 	svcpl	0x00687464
 3b8:	625f6e69 	subsvs	r6, pc, #1680	; 0x690
 3bc:	73657479 	cmnvc	r5, #2030043136	; 0x79000000
 3c0:	616f6c00 	cmnvs	pc, r0, lsl #24
 3c4:	70735f64 	rsbsvc	r5, r3, r4, ror #30
 3c8:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 3cc:	656c6300 	strbvs	r6, [ip, #-768]!	; 0xfffffd00
 3d0:	6f5f7261 	svcvs	0x005f7261
 3d4:	63656a62 	cmnvs	r5, #401408	; 0x62000
 3d8:	4f740074 	svcmi	0x00740074
 3dc:	64006a62 	strvs	r6, [r0], #-2658	; 0xfffff59e
 3e0:	5f776172 	svcpl	0x00776172
 3e4:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
 3e8:	72007463 	andvc	r7, r0, #1660944384	; 0x63000000
 3ec:	61747365 	cmnvs	r4, r5, ror #6
 3f0:	675f7472 			; <UNDEFINED> instruction: 0x675f7472
 3f4:	00656d61 	rsbeq	r6, r5, r1, ror #26
 3f8:	706d756e 	rsbvc	r7, sp, lr, ror #10
 3fc:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
 400:	72640073 	rsbvc	r0, r4, #115, 0	; 0x73
 404:	735f7761 	cmpvc	pc, #25427968	; 0x1840000
 408:	74697270 	strbtvc	r7, [r9], #-624	; 0xfffffd90
 40c:	6f6d0065 	svcvs	0x006d0065
 410:	6f5f6576 	svcvs	0x005f6576
 414:	63656a62 	cmnvs	r5, #401408	; 0x62000
 418:	6f660074 	svcvs	0x00660074
 41c:	7300646f 	movwvc	r6, #1135	; 0x46f
 420:	64656570 	strbtvs	r6, [r5], #-1392	; 0xfffffa90
 424:	70730078 	rsbsvc	r0, r3, r8, ror r0
 428:	79646565 	stmdbvc	r4!, {r0, r2, r5, r6, r8, sl, sp, lr}^
 42c:	424f5000 	submi	r5, pc, #0, 0
 430:	5443454a 	strbpl	r4, [r3], #-1354	; 0xfffffab6
 434:	706e6900 	rsbvc	r6, lr, r0, lsl #18
 438:	6b007475 	blvs	1d614 <startup-0x1ffe29ec>
 43c:	61567965 	cmpvs	r6, r5, ror #18
 440:	656b006c 	strbvs	r0, [fp, #-108]!	; 0xffffff94
 444:	6f006279 	svcvs	0x00006279
 448:	73377475 	teqvc	r7, #1962934272	; 0x75000000
 44c:	72006765 	andvc	r6, r0, #26476544	; 0x1940000
 450:	5f646165 	svcpl	0x00646165
 454:	6f6c6f63 	svcvs	0x006c6f63
 458:	006e6d75 	rsbeq	r6, lr, r5, ror sp
 45c:	5f79656b 	svcpl	0x0079656b
 460:	756c6176 	strbvc	r6, [ip, #-374]!	; 0xfffffe8a
 464:	63610065 	cmnvs	r1, #101, 0	; 0x65
 468:	61766974 	cmnvs	r6, r4, ror r9
 46c:	725f6574 	subsvc	r6, pc, #116, 10	; 0x1d000000
 470:	2f00776f 	svccs	0x0000776f
 474:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
 478:	6f672f73 	svcvs	0x00672f73
 47c:	6d756c6c 	ldclvs	12, cr6, [r5, #-432]!	; 0xfffffe50
 480:	636f442f 	cmnvs	pc, #788529152	; 0x2f000000
 484:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
 488:	6d2f7374 	stcvs	3, cr7, [pc, #-464]!	; 2c0 <startup-0x1ffffd40>
 48c:	616c706f 	cmnvs	ip, pc, rrx
 490:	61726f62 	cmnvs	r2, r2, ror #30
 494:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 498:	4d2f7265 	sfmmi	f7, 4, [pc, #-404]!	; 30c <startup-0x1ffffcf4>
 49c:	532d504f 			; <UNDEFINED> instruction: 0x532d504f
 4a0:	2f6c6570 	svccs	0x006c6570
 4a4:	6b616e53 	blvs	185bdf8 <startup-0x1e7a4208>
 4a8:	656b2f65 	strbvs	r2, [fp, #-3941]!	; 0xfffff09b
 4ac:	632e6279 			; <UNDEFINED> instruction: 0x632e6279
 4b0:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 4b4:	355f7961 	ldrbcc	r7, [pc, #-2401]	; fffffb5b <rear+0xdfff7973>
 4b8:	736e3030 	cmnvc	lr, #48, 0	; 0x30
 4bc:	73552f00 	cmpvc	r5, #0, 30
 4c0:	2f737265 	svccs	0x00737265
 4c4:	6c6c6f67 	stclvs	15, cr6, [ip], #-412	; 0xfffffe64
 4c8:	442f6d75 	strtmi	r6, [pc], #-3445	; 4d0 <startup-0x1ffffb30>
 4cc:	6d75636f 	ldclvs	3, cr6, [r5, #-444]!	; 0xfffffe44
 4d0:	73746e65 	cmnvc	r4, #1616	; 0x650
 4d4:	706f6d2f 	rsbvc	r6, pc, pc, lsr #26
 4d8:	6f62616c 	svcvs	0x0062616c
 4dc:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
 4e0:	72656e6f 	rsbvc	r6, r5, #1776	; 0x6f0
 4e4:	504f4d2f 	subpl	r4, pc, pc, lsr #26
 4e8:	6570532d 	ldrbvs	r5, [r0, #-813]!	; 0xfffffcd3
 4ec:	6e532f6c 	cdpvs	15, 5, cr2, cr3, cr12, {3}
 4f0:	2f656b61 	svccs	0x00656b61
 4f4:	616c6564 	cmnvs	ip, r4, ror #10
 4f8:	00632e79 	rsbeq	r2, r3, r9, ror lr
 4fc:	70617267 	rsbvc	r7, r1, r7, ror #4
 500:	5f636968 	svcpl	0x00636968
 504:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 508:	6f635f65 	svcvs	0x00635f65
 50c:	6e616d6d 	cdpvs	13, 6, cr6, cr1, cr13, {3}
 510:	72670064 	rsbvc	r0, r7, #100, 0	; 0x64
 514:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 518:	72645f63 	rsbvc	r5, r4, #396	; 0x18c
 51c:	735f7761 	cmpvc	pc, #25427968	; 0x1840000
 520:	65657263 	strbvs	r7, [r5, #-611]!	; 0xfffffd9d
 524:	552f006e 	strpl	r0, [pc, #-110]!	; 4be <startup-0x1ffffb42>
 528:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 52c:	6c6f672f 	stclvs	7, cr6, [pc], #-188	; 478 <startup-0x1ffffb88>
 530:	2f6d756c 	svccs	0x006d756c
 534:	75636f44 	strbvc	r6, [r3, #-3908]!	; 0xfffff0bc
 538:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
 53c:	6f6d2f73 	svcvs	0x006d2f73
 540:	62616c70 	rsbvs	r6, r1, #112, 24	; 0x7000
 544:	7461726f 	strbtvc	r7, [r1], #-623	; 0xfffffd91
 548:	656e6f69 	strbvs	r6, [lr, #-3945]!	; 0xfffff097
 54c:	4f4d2f72 	svcmi	0x004d2f72
 550:	70532d50 	subsvc	r2, r3, r0, asr sp
 554:	532f6c65 			; <UNDEFINED> instruction: 0x532f6c65
 558:	656b616e 	strbvs	r6, [fp, #-366]!	; 0xfffffe92
 55c:	6172672f 	cmnvs	r2, pc, lsr #14
 560:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 564:	70736964 	rsbsvc	r6, r3, r4, ror #18
 568:	2e79616c 	rpwcsez	f6, f1, #4.0
 56c:	72670063 	rsbvc	r0, r7, #99, 0	; 0x63
 570:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 574:	65725f63 	ldrbvs	r5, [r2, #-3939]!	; 0xfffff09d
 578:	645f6461 	ldrbvs	r6, [pc], #-1121	; 580 <startup-0x1ffffa80>
 57c:	00617461 	rsbeq	r7, r1, r1, ror #8
 580:	70617267 	rsbvc	r7, r1, r7, ror #4
 584:	5f636968 	svcpl	0x00636968
 588:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
 58c:	78697000 	stmdavc	r9!, {ip, sp, lr}^
 590:	67006c65 	strvs	r6, [r0, -r5, ror #24]
 594:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 598:	635f6369 	cmpvs	pc, #-1543503871	; 0xa4000001
 59c:	5f6c7274 	svcpl	0x006c7274
 5a0:	5f746962 	svcpl	0x00746962
 5a4:	00746573 	rsbseq	r6, r4, r3, ror r5
 5a8:	61656c63 	cmnvs	r5, r3, ror #24
 5ac:	61625f72 	smcvs	9714	; 0x25f2
 5b0:	75626b63 	strbvc	r6, [r2, #-2915]!	; 0xfffff49d
 5b4:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
 5b8:	61726700 	cmnvs	r2, r0, lsl #14
 5bc:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 5c0:	6961775f 	stmdbvs	r1!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 5c4:	65725f74 	ldrbvs	r5, [r2, #-3956]!	; 0xfffff08c
 5c8:	00796461 	rsbseq	r6, r9, r1, ror #8
 5cc:	6b73616d 	blvs	1cd8b88 <startup-0x1e327478>
 5d0:	6e697500 	cdpvs	5, 6, cr7, cr9, cr0, {0}
 5d4:	745f3874 	ldrbvc	r3, [pc], #-2164	; 5dc <startup-0x1ffffa24>
 5d8:	61726700 	cmnvs	r2, r0, lsl #14
 5dc:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 5e0:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 5e4:	73006574 	movwvc	r6, #1396	; 0x574
 5e8:	63656c65 	cmnvs	r5, #25856	; 0x6500
 5ec:	6f635f74 	svcvs	0x00635f74
 5f0:	6f72746e 	svcvs	0x0072746e
 5f4:	72656c6c 	rsbvc	r6, r5, #108, 24	; 0x6c00
 5f8:	646e6900 	strbtvs	r6, [lr], #-2304	; 0xfffff700
 5fc:	67007865 	strvs	r7, [r0, -r5, ror #16]
 600:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 604:	635f6369 	cmpvs	pc, #-1543503871	; 0xa4000001
 608:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
 60c:	7263735f 	rsbvc	r7, r3, #2080374785	; 0x7c000001
 610:	006e6565 	rsbeq	r6, lr, r5, ror #10
 614:	70617267 	rsbvc	r7, r1, r7, ror #4
 618:	5f636968 	svcpl	0x00636968
 61c:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 620:	61645f65 	cmnvs	r4, r5, ror #30
 624:	67006174 	smlsdxvs	r0, r4, r1, r6
 628:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 62c:	635f6369 	cmpvs	pc, #-1543503871	; 0xa4000001
 630:	5f6c7274 	svcpl	0x006c7274
 634:	5f746962 	svcpl	0x00746962
 638:	61656c63 	cmnvs	r5, r3, ror #24
 63c:	61700072 	cmnvs	r0, r2, ror r0
 640:	67006567 	strvs	r6, [r0, -r7, ror #10]
 644:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 648:	695f6369 	ldmdbvs	pc, {r0, r3, r5, r6, r8, r9, sp, lr}^	; <UNPREDICTABLE>
 64c:	0074696e 	rsbseq	r6, r4, lr, ror #18
 650:	76746572 			; <UNDEFINED> instruction: 0x76746572
 654:	5f006c61 	svcpl	0x00006c61
 658:	5f6f7364 	svcpl	0x006f7364
 65c:	646e6168 	strbtvs	r6, [lr], #-360	; 0xfffffe98
 660:	6900656c 	stmdbvs	r0, {r2, r3, r5, r6, r8, sl, sp, lr}
 664:	6c754673 	ldclvs	6, cr4, [r5], #-460	; 0xfffffe34
 668:	735f006c 	cmpvc	pc, #108, 0	; 0x6c
 66c:	00657a69 	rsbeq	r7, r5, r9, ror #20
 670:	6e61725f 	mcrvs	2, 3, r7, cr1, cr15, {2}
 674:	00383464 	eorseq	r3, r8, r4, ror #8
 678:	656d655f 	strbvs	r6, [sp, #-1375]!	; 0xfffffaa1
 67c:	6e656772 	mcrvs	7, 3, r6, cr5, cr2, {3}
 680:	5f007963 	svcpl	0x00007963
 684:	74726377 	ldrbtvc	r6, [r2], #-887	; 0xfffffc89
 688:	5f626d6f 	svcpl	0x00626d6f
 68c:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
 690:	775f0065 	ldrbvc	r0, [pc, -r5, rrx]
 694:	74727363 	ldrbtvc	r7, [r2], #-867	; 0xfffffc9d
 698:	73626d6f 	cmnvc	r2, #7104	; 0x1bc0
 69c:	6174735f 	cmnvs	r4, pc, asr r3
 6a0:	6c006574 	cfstr32vs	mvfx6, [r0], {116}	; 0x74
 6a4:	20676e6f 	rsbcs	r6, r7, pc, ror #28
 6a8:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
 6ac:	736e7520 	cmnvc	lr, #32, 10	; 0x8000000
 6b0:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
 6b4:	6e692064 	cdpvs	0, 6, cr2, cr9, cr4, {3}
 6b8:	6c5f0074 	mrrcvs	0, 7, r0, pc, cr4	; <UNPREDICTABLE>
 6bc:	69736662 	ldmdbvs	r3!, {r1, r5, r6, r9, sl, sp, lr}^
 6c0:	7200657a 	andvc	r6, r0, #511705088	; 0x1e800000
 6c4:	766f6d65 	strbtvc	r6, [pc], -r5, ror #26
 6c8:	5f5f0065 	svcpl	0x005f0065
 6cc:	61636f6c 	cmnvs	r3, ip, ror #30
 6d0:	745f656c 	ldrbvc	r6, [pc], #-1388	; 6d8 <startup-0x1ffff928>
 6d4:	626d5f00 	rsbvs	r5, sp, #0, 30
 6d8:	776f7472 			; <UNDEFINED> instruction: 0x776f7472
 6dc:	74735f63 	ldrbtvc	r5, [r3], #-3939	; 0xfffff09d
 6e0:	00657461 	rsbeq	r7, r5, r1, ror #8
 6e4:	6d745f5f 	ldclvs	15, cr5, [r4, #-380]!	; 0xfffffe84
 6e8:	6365735f 	cmnvs	r5, #2080374785	; 0x7c000001
 6ec:	6e6f6c00 	cdpvs	12, 6, cr6, cr15, cr0, {0}
 6f0:	6f6c2067 	svcvs	0x006c2067
 6f4:	6920676e 	stmdbvs	r0!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}
 6f8:	5f00746e 	svcpl	0x0000746e
 6fc:	66756275 			; <UNDEFINED> instruction: 0x66756275
 700:	61625f00 	cmnvs	r2, r0, lsl #30
 704:	5f006573 	svcpl	0x00006573
 708:	5f6d745f 	svcpl	0x006d745f
 70c:	72756f68 	rsbsvc	r6, r5, #104, 30	; 0x1a0
 710:	735f5f00 	cmpvc	pc, #0, 30
 714:	6f5f0066 	svcvs	0x005f0066
 718:	78655f6e 	stmdavc	r5!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
 71c:	615f7469 	cmpvs	pc, r9, ror #8
 720:	00736772 	rsbseq	r6, r3, r2, ror r7
 724:	6f6f635f 	svcvs	0x006f635f
 728:	0065696b 	rsbeq	r6, r5, fp, ror #18
 72c:	67735f5f 			; <UNDEFINED> instruction: 0x67735f5f
 730:	0065756c 	rsbeq	r7, r5, ip, ror #10
 734:	6d457369 	stclvs	3, cr7, [r5, #-420]	; 0xfffffe5c
 738:	00797470 	rsbseq	r7, r9, r0, ror r4
 73c:	616c665f 	cmnvs	ip, pc, asr r6
 740:	5f007367 	svcpl	0x00007367
 744:	635f7369 	cmpvs	pc, #-1543503871	; 0xa4000001
 748:	5f006178 	svcpl	0x00006178
 74c:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
 750:	625f006e 	subsvs	r0, pc, #110, 0	; 0x6e
 754:	69736b6c 	ldmdbvs	r3!, {r2, r3, r5, r6, r8, r9, fp, sp, lr}^
 758:	5f00657a 	svcpl	0x0000657a
 75c:	62747663 	rsbsvs	r7, r4, #103809024	; 0x6300000
 760:	5f006675 	svcpl	0x00006675
 764:	7366666f 	cmnvc	r6, #116391936	; 0x6f00000
 768:	5f007465 	svcpl	0x00007465
 76c:	7273626d 	rsbsvc	r6, r3, #-805306362	; 0xd0000006
 770:	63776f74 	cmnvs	r7, #116, 30	; 0x1d0
 774:	74735f73 	ldrbtvc	r5, [r3], #-3955	; 0xfffff08d
 778:	00657461 	rsbeq	r7, r5, r1, ror #8
 77c:	72626d5f 	rsbvc	r6, r2, #6080	; 0x17c0
 780:	5f6e656c 	svcpl	0x006e656c
 784:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
 788:	665f0065 	ldrbvs	r0, [pc], -r5, rrx
 78c:	6772616e 	ldrbvs	r6, [r2, -lr, ror #2]!
 790:	665f0073 			; <UNDEFINED> instruction: 0x665f0073
 794:	5f00736e 	svcpl	0x0000736e
 798:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
 79c:	6c665f00 	stclvs	15, cr5, [r6], #-0
 7a0:	5f6b636f 	svcpl	0x006b636f
 7a4:	735f0074 	cmpvc	pc, #116, 0	; 0x74
 7a8:	72656474 	rsbvc	r6, r5, #116, 8	; 0x74000000
 7ac:	425f0072 	subsmi	r0, pc, #114, 0	; 0x72
 7b0:	6e696769 	cdpvs	7, 6, cr6, cr9, cr9, {3}
 7b4:	675f0074 			; <UNDEFINED> instruction: 0x675f0074
 7b8:	616d6d61 	cmnvs	sp, r1, ror #26
 7bc:	6769735f 			; <UNDEFINED> instruction: 0x6769735f
 7c0:	6d61676e 	stclvs	7, cr6, [r1, #-440]!	; 0xfffffe48
 7c4:	65725f00 	ldrbvs	r5, [r2, #-3840]!	; 0xfffff100
 7c8:	746c7573 	strbtvc	r7, [ip], #-1395	; 0xfffffa8d
 7cc:	5f006b5f 	svcpl	0x00006b5f
 7d0:	006d745f 	rsbeq	r7, sp, pc, asr r4
 7d4:	63775f5f 	cmnvs	r7, #380	; 0x17c
 7d8:	5f006268 	svcpl	0x00006268
 7dc:	6f647473 	svcvs	0x00647473
 7e0:	5f007475 	svcpl	0x00007475
 7e4:	6c747663 	ldclvs	6, cr7, [r4], #-396	; 0xfffffe74
 7e8:	5f006e65 	svcpl	0x00006e65
 7ec:	656c6966 	strbvs	r6, [ip, #-2406]!	; 0xfffff69a
 7f0:	696e5f00 	stmdbvs	lr!, {r8, r9, sl, fp, ip, lr}^
 7f4:	0073626f 	rsbseq	r6, r3, pc, ror #4
 7f8:	726f6873 	rsbvc	r6, pc, #7536640	; 0x730000
 7fc:	6e752074 	mrcvs	0, 3, r2, cr5, cr4, {3}
 800:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
 804:	69206465 	stmdbvs	r0!, {r0, r2, r5, r6, sl, sp, lr}
 808:	5f00746e 	svcpl	0x0000746e
 80c:	78657461 	stmdavc	r5!, {r0, r5, r6, sl, ip, sp, lr}^
 810:	00307469 	eorseq	r7, r0, r9, ror #8
 814:	6769735f 			; <UNDEFINED> instruction: 0x6769735f
 818:	5f6c616e 	svcpl	0x006c616e
 81c:	00667562 	rsbeq	r7, r6, r2, ror #10
 820:	6373615f 	cmnvs	r3, #-1073741801	; 0xc0000017
 824:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
 828:	6675625f 			; <UNDEFINED> instruction: 0x6675625f
 82c:	65725f00 	ldrbvs	r5, [r2, #-3840]!	; 0xfffff100
 830:	746c7573 	strbtvc	r7, [ip], #-1395	; 0xfffffa8d
 834:	775f5f00 	ldrbvc	r5, [pc, -r0, lsl #30]
 838:	5f006863 	svcpl	0x00006863
 83c:	4b434f4c 	blmi	10d4574 <startup-0x1ef2ba8c>
 840:	7700545f 	smlsdvc	r0, pc, r4, r5	; <UNPREDICTABLE>
 844:	5f746e69 	svcpl	0x00746e69
 848:	665f0074 			; <UNDEFINED> instruction: 0x665f0074
 84c:	7367616c 	cmnvc	r7, #27
 850:	5f5f0032 	svcpl	0x005f0032
 854:	795f6d74 	ldmdbvc	pc, {r2, r4, r5, r6, r8, sl, fp, sp, lr}^	; <UNPREDICTABLE>
 858:	00726165 	rsbseq	r6, r2, r5, ror #2
 85c:	616d6e5f 	cmnvs	sp, pc, asr lr
 860:	636f6c6c 	cmnvs	pc, #108, 24	; 0x6c00
 864:	656e5f00 	strbvs	r5, [lr, #-3840]!	; 0xfffff100
 868:	00667478 	rsbeq	r7, r6, r8, ror r4
 86c:	6d745f5f 	ldclvs	15, cr5, [r4, #-380]!	; 0xfffffe84
 870:	6e6f6d5f 	mcrvs	13, 3, r6, cr15, cr15, {2}
 874:	74615f00 	strbtvc	r5, [r1], #-3840	; 0xfffff100
 878:	74697865 	strbtvc	r7, [r9], #-2149	; 0xfffff79b
 87c:	735f5f00 	cmpvc	pc, #0, 30
 880:	69646964 	stmdbvs	r4!, {r2, r5, r6, r8, fp, sp, lr}^
 884:	0074696e 	rsbseq	r6, r4, lr, ror #18
 888:	66666f5f 	uqsaxvs	r6, r6, pc	; <UNPREDICTABLE>
 88c:	5f00745f 	svcpl	0x0000745f
 890:	65657266 	strbvs	r7, [r5, #-614]!	; 0xfffffd9a
 894:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
 898:	63775f00 	cmnvs	r7, #0, 30
 89c:	626d6f74 	rsbvs	r6, sp, #116, 30	; 0x1d0
 8a0:	6174735f 	cmnvs	r4, pc, asr r3
 8a4:	5f006574 	svcpl	0x00006574
 8a8:	6c6f6f42 	stclvs	15, cr6, [pc], #-264	; 7a8 <startup-0x1ffff858>
 8ac:	656e5f00 	strbvs	r5, [lr, #-3840]!	; 0xfffff100
 8b0:	685f0077 	ldmdavs	pc, {r0, r1, r2, r4, r5, r6}^	; <UNPREDICTABLE>
 8b4:	7272655f 	rsbsvc	r6, r2, #398458880	; 0x17c00000
 8b8:	73006f6e 	movwvc	r6, #3950	; 0xf6e
 8bc:	74726f68 	ldrbtvc	r6, [r2], #-3944	; 0xfffff098
 8c0:	746e6920 	strbtvc	r6, [lr], #-2336	; 0xfffff6e0
 8c4:	745f5f00 	ldrbvc	r5, [pc], #-3840	; 8cc <startup-0x1ffff734>
 8c8:	64795f6d 	ldrbtvs	r5, [r9], #-3949	; 0xfffff093
 8cc:	5f007961 	svcpl	0x00007961
 8d0:	7562735f 	strbvc	r7, [r2, #-863]!	; 0xfffffca1
 8d4:	695f0066 	ldmdbvs	pc, {r1, r2, r5, r6}^	; <UNPREDICTABLE>
 8d8:	0073626f 	rsbseq	r6, r3, pc, ror #4
 8dc:	49465f5f 	stmdbmi	r6, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
 8e0:	5f00454c 	svcpl	0x0000454c
 8e4:	7473626d 	ldrbtvc	r6, [r3], #-621	; 0xfffffd93
 8e8:	5f657461 	svcpl	0x00657461
 8ec:	5f5f0074 	svcpl	0x005f0074
 8f0:	4c494673 	mcrrmi	6, 7, r4, r9, cr3
 8f4:	6d5f0045 	ldclvs	0, cr0, [pc, #-276]	; 7e8 <startup-0x1ffff818>
 8f8:	61747362 	cmnvs	r4, r2, ror #6
 8fc:	5f006574 	svcpl	0x00006574
 900:	646e6172 	strbtvs	r6, [lr], #-370	; 0xfffffe8e
 904:	78656e5f 	stmdavc	r5!, {r0, r1, r2, r3, r4, r6, r9, sl, fp, sp, lr}^
 908:	6e690074 	mcrvs	0, 3, r0, cr9, cr4, {3}
 90c:	74726573 	ldrbtvc	r6, [r2], #-1395	; 0xfffffa8d
 910:	626d5f00 	rsbvs	r5, sp, #0, 30
 914:	5f6e656c 	svcpl	0x006e656c
 918:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
 91c:	695f0065 	ldmdbvs	pc, {r0, r2, r5, r6}^	; <UNPREDICTABLE>
 920:	5f00636e 	svcpl	0x0000636e
 924:	00646e69 	rsbeq	r6, r4, r9, ror #28
 928:	636f6c5f 	cmnvs	pc, #24320	; 0x5f00
 92c:	00656c61 	rsbeq	r6, r5, r1, ror #24
 930:	6c635f5f 	stclvs	15, cr5, [r3], #-380	; 0xfffffe84
 934:	756e6165 	strbvc	r6, [lr, #-357]!	; 0xfffffe9b
 938:	755f0070 	ldrbvc	r0, [pc, #-112]	; 8d0 <startup-0x1ffff730>
 93c:	6570736e 	ldrbvs	r7, [r0, #-878]!	; 0xfffffc92
 940:	69666963 	stmdbvs	r6!, {r0, r1, r5, r6, r8, fp, sp, lr}^
 944:	6c5f6465 	cfldrdvs	mvd6, [pc], {101}	; 0x65
 948:	6c61636f 	stclvs	3, cr6, [r1], #-444	; 0xfffffe44
 94c:	6e695f65 	cdpvs	15, 6, cr5, cr9, cr5, {3}
 950:	5f006f66 	svcpl	0x00006f66
 954:	7778616d 	ldrbvc	r6, [r8, -sp, ror #2]!
 958:	5f007364 	svcpl	0x00007364
 95c:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
 960:	735f0074 	cmpvc	pc, #116, 0	; 0x74
 964:	00646565 	rsbeq	r6, r4, r5, ror #10
 968:	6f635f5f 	svcvs	0x00635f5f
 96c:	00746e75 	rsbseq	r6, r4, r5, ror lr
 970:	6f6c5f5f 	svcvs	0x006c5f5f
 974:	5f006b63 	svcpl	0x00006b63
 978:	6c61765f 	stclvs	6, cr7, [r1], #-380	; 0xfffffe84
 97c:	5f006575 	svcpl	0x00006575
 980:	6b656573 	blvs	1959f54 <startup-0x1e6a60ac>
 984:	70665f00 	rsbvc	r5, r6, r0, lsl #30
 988:	745f736f 	ldrbvc	r7, [pc], #-879	; 990 <startup-0x1ffff670>
 98c:	745f5f00 	ldrbvc	r5, [pc], #-3840	; 994 <startup-0x1ffff66c>
 990:	696d5f6d 	stmdbvs	sp!, {r0, r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
 994:	626f006e 	rsbvs	r0, pc, #110, 0	; 0x6e
 998:	7272416a 	rsbsvc	r4, r2, #-2147483622	; 0x8000001a
 99c:	5f007961 	svcpl	0x00007961
 9a0:	746c756d 	strbtvc	r7, [ip], #-1389	; 0xfffffa93
 9a4:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
 9a8:	6b6f7472 	blvs	1bddb78 <startup-0x1e422488>
 9ac:	73616c5f 	cmnvc	r1, #24320	; 0x5f00
 9b0:	65720074 	ldrbvs	r0, [r2, #-116]!	; 0xffffff8c
 9b4:	69007261 	stmdbvs	r0, {r0, r5, r6, r9, ip, sp, lr}
 9b8:	436d6574 	cmnmi	sp, #116, 10	; 0x1d000000
 9bc:	746e756f 	strbtvc	r7, [lr], #-1391	; 0xfffffa91
 9c0:	6e665f00 	cdpvs	15, 6, cr5, cr6, cr0, {0}
 9c4:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
 9c8:	615f0073 	cmpvs	pc, r3, ror r0	; <UNPREDICTABLE>
 9cc:	5f006464 	svcpl	0x00006464
 9d0:	6f4c555f 	svcvs	0x004c555f
 9d4:	5f00676e 	svcpl	0x0000676e
 9d8:	64746567 	ldrbtvs	r6, [r4], #-1383	; 0xfffffa99
 9dc:	5f657461 	svcpl	0x00657461
 9e0:	00727265 	rsbseq	r7, r2, r5, ror #4
 9e4:	6e6f7266 	cdpvs	2, 6, cr7, cr15, cr6, {3}
 9e8:	675f0074 			; <UNDEFINED> instruction: 0x675f0074
 9ec:	61626f6c 	cmnvs	r2, ip, ror #30
 9f0:	6d695f6c 	stclvs	15, cr5, [r9, #-432]!	; 0xfffffe50
 9f4:	65727570 	ldrbvs	r7, [r2, #-1392]!	; 0xfffffa90
 9f8:	7274705f 	rsbsvc	r7, r4, #95, 0	; 0x5f
 9fc:	6e755f00 	cdpvs	15, 7, cr5, cr5, cr0, {0}
 a00:	64657375 	strbtvs	r7, [r5], #-885	; 0xfffffc8b
 a04:	6e61725f 	mcrvs	2, 3, r7, cr1, cr15, {2}
 a08:	552f0064 	strpl	r0, [pc, #-100]!	; 9ac <startup-0x1ffff654>
 a0c:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 a10:	6c6f672f 	stclvs	7, cr6, [pc], #-188	; 95c <startup-0x1ffff6a4>
 a14:	2f6d756c 	svccs	0x006d756c
 a18:	75636f44 	strbvc	r6, [r3, #-3908]!	; 0xfffff0bc
 a1c:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
 a20:	6f6d2f73 	svcvs	0x006d2f73
 a24:	62616c70 	rsbvs	r6, r1, #112, 24	; 0x7000
 a28:	7461726f 	strbtvc	r7, [r1], #-623	; 0xfffffd91
 a2c:	656e6f69 	strbvs	r6, [lr, #-3945]!	; 0xfffff097
 a30:	4f4d2f72 	svcmi	0x004d2f72
 a34:	70532d50 	subsvc	r2, r3, r0, asr sp
 a38:	532f6c65 			; <UNDEFINED> instruction: 0x532f6c65
 a3c:	656b616e 	strbvs	r6, [fp, #-366]!	; 0xfffffe92
 a40:	6575712f 	ldrbvs	r7, [r5, #-303]!	; 0xfffffed1
 a44:	632e6575 			; <UNDEFINED> instruction: 0x632e6575
 a48:	64775f00 	ldrbtvs	r5, [r7], #-3840	; 0xfffff100
 a4c:	5f5f0073 	svcpl	0x005f0073
 a50:	775f6d74 			; <UNDEFINED> instruction: 0x775f6d74
 a54:	00796164 	rsbseq	r6, r9, r4, ror #2
 a58:	756c675f 	strbvc	r6, [ip, #-1887]!	; 0xfffff8a1
 a5c:	6c5f0065 	mrrcvs	0, 6, r0, pc, cr5	; <UNPREDICTABLE>
 a60:	5f613436 	svcpl	0x00613436
 a64:	00667562 	rsbeq	r7, r6, r2, ror #10
 a68:	6769735f 			; <UNDEFINED> instruction: 0x6769735f
 a6c:	6e75665f 	mrcvs	6, 3, r6, cr5, cr15, {2}
 a70:	6e5f0063 	cdpvs	0, 5, cr0, cr15, cr3, {3}
 a74:	00667562 	rsbeq	r7, r6, r2, ror #10
 a78:	756e755f 	strbvc	r7, [lr, #-1375]!	; 0xfffffaa1
 a7c:	00646573 	rsbeq	r6, r4, r3, ror r5
 a80:	6d745f5f 	ldclvs	15, cr5, [r4, #-380]!	; 0xfffffe84
 a84:	6473695f 	ldrbtvs	r6, [r3], #-2399	; 0xfffff6a1
 a88:	5f007473 	svcpl	0x00007473
 a8c:	61636f6c 	cmnvs	r3, ip, ror #30
 a90:	6d69746c 	cfstrdvs	mvd7, [r9, #-432]!	; 0xfffffe50
 a94:	75625f65 	strbvc	r5, [r2, #-3941]!	; 0xfffff09b
 a98:	635f0066 	cmpvs	pc, #102, 0	; 0x66
 a9c:	65736f6c 	ldrbvs	r6, [r3, #-3948]!	; 0xfffff094
 aa0:	34725f00 	ldrbtcc	r5, [r2], #-3840	; 0xfffff100
 aa4:	6d5f0038 	ldclvs	0, cr0, [pc, #-224]	; 9cc <startup-0x1ffff634>
 aa8:	776f7462 	strbvc	r7, [pc, -r2, ror #8]!
 aac:	74735f63 	ldrbtvc	r5, [r3], #-3939	; 0xfffff09d
 ab0:	00657461 	rsbeq	r7, r5, r1, ror #8
 ab4:	7335705f 	teqvc	r5, #95, 0	; 0x5f
 ab8:	745f5f00 	ldrbvc	r5, [pc], #-3840	; ac0 <startup-0x1ffff540>
 abc:	646d5f6d 	strbtvs	r5, [sp], #-3949	; 0xfffff093
 ac0:	Address 0x0000000000000ac0 is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	206d7241 	rsbcs	r7, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d39 	eorscc	r2, r2, r9, lsr sp
  30:	712d3931 			; <UNDEFINED> instruction: 0x712d3931
  34:	616d2d34 	cmnvs	sp, r4, lsr sp
  38:	29726f6a 	ldmdbcs	r2!, {r1, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
  3c:	322e3920 	eorcc	r3, lr, #32, 18	; 0x80000
  40:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  44:	31393130 	teqcc	r9, r0, lsr r1
  48:	20353230 	eorscs	r3, r5, r0, lsr r2
  4c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  50:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  54:	415b2029 	cmpmi	fp, r9, lsr #32
  58:	612f4d52 			; <UNDEFINED> instruction: 0x612f4d52
  5c:	392d6d72 	pushcc	{r1, r4, r5, r6, r8, sl, fp, sp, lr}
  60:	6172622d 	cmnvs	r2, sp, lsr #4
  64:	2068636e 	rsbcs	r6, r8, lr, ror #6
  68:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
  6c:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
  70:	37373220 	ldrcc	r3, [r7, -r0, lsr #4]!
  74:	5d393935 			; <UNDEFINED> instruction: 0x5d393935
	...

Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002b41 	andeq	r2, r0, r1, asr #22
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000021 	andeq	r0, r0, r1, lsr #32
  10:	2d533605 	ldclcs	6, cr3, [r3, #-20]	; 0xffffffec
  14:	0c06004d 	stceq	0, cr0, [r6], {77}	; 0x4d
  18:	01094d07 	tsteq	r9, r7, lsl #26
  1c:	01140412 	tsteq	r4, r2, lsl r4
  20:	03170115 	tsteq	r7, #1073741829	; 0x40000005
  24:	01190118 	tsteq	r9, r8, lsl r1
  28:	061e011a 			; <UNDEFINED> instruction: 0x061e011a

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	00000018 	andeq	r0, r0, r8, lsl r0
  14:	00000000 	andeq	r0, r0, r0
  18:	20000010 	andcs	r0, r0, r0, lsl r0
  1c:	0000001a 	andeq	r0, r0, sl, lsl r0
  20:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  24:	41018e02 	tstmi	r1, r2, lsl #28
  28:	0000070d 	andeq	r0, r0, sp, lsl #14
  2c:	0000001c 	andeq	r0, r0, ip, lsl r0
  30:	00000000 	andeq	r0, r0, r0
  34:	2000002a 	andcs	r0, r0, sl, lsr #32
  38:	00000032 	andeq	r0, r0, r2, lsr r0
  3c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  40:	41018e02 	tstmi	r1, r2, lsl #28
  44:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
  48:	00000007 	andeq	r0, r0, r7
  4c:	0000001c 	andeq	r0, r0, ip, lsl r0
  50:	00000000 	andeq	r0, r0, r0
  54:	2000005c 	andcs	r0, r0, ip, asr r0
  58:	0000003c 	andeq	r0, r0, ip, lsr r0
  5c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  60:	41018e02 	tstmi	r1, r2, lsl #28
  64:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
  68:	00000007 	andeq	r0, r0, r7
  6c:	0000001c 	andeq	r0, r0, ip, lsl r0
  70:	00000000 	andeq	r0, r0, r0
  74:	20000098 	mulcs	r0, r8, r0
  78:	0000002a 	andeq	r0, r0, sl, lsr #32
  7c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  80:	41018e02 	tstmi	r1, r2, lsl #28
  84:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
  88:	00000007 	andeq	r0, r0, r7
  8c:	0000001c 	andeq	r0, r0, ip, lsl r0
  90:	00000000 	andeq	r0, r0, r0
  94:	200000c2 	andcs	r0, r0, r2, asr #1
  98:	0000002a 	andeq	r0, r0, sl, lsr #32
  9c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  a0:	41018e02 	tstmi	r1, r2, lsl #28
  a4:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
  a8:	00000007 	andeq	r0, r0, r7
  ac:	0000001c 	andeq	r0, r0, ip, lsl r0
  b0:	00000000 	andeq	r0, r0, r0
  b4:	200000ec 	andcs	r0, r0, ip, ror #1
  b8:	00000030 	andeq	r0, r0, r0, lsr r0
  bc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  c0:	41018e02 	tstmi	r1, r2, lsl #28
  c4:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
  c8:	00000007 	andeq	r0, r0, r7
  cc:	0000001c 	andeq	r0, r0, ip, lsl r0
  d0:	00000000 	andeq	r0, r0, r0
  d4:	2000011c 	andcs	r0, r0, ip, lsl r1
  d8:	00000034 	andeq	r0, r0, r4, lsr r0
  dc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  e0:	41018e02 	tstmi	r1, r2, lsl #28
  e4:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
  e8:	00000007 	andeq	r0, r0, r7
  ec:	0000001c 	andeq	r0, r0, ip, lsl r0
  f0:	00000000 	andeq	r0, r0, r0
  f4:	20000150 	andcs	r0, r0, r0, asr r1
  f8:	0000003c 	andeq	r0, r0, ip, lsr r0
  fc:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
 100:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 104:	180e4101 	stmdane	lr, {r0, r8, lr}
 108:	00070d41 	andeq	r0, r7, r1, asr #26
 10c:	0000001c 	andeq	r0, r0, ip, lsl r0
 110:	00000000 	andeq	r0, r0, r0
 114:	2000018c 	andcs	r0, r0, ip, lsl #3
 118:	0000003c 	andeq	r0, r0, ip, lsr r0
 11c:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
 120:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 124:	180e4101 	stmdane	lr, {r0, r8, lr}
 128:	00070d41 	andeq	r0, r7, r1, asr #26
 12c:	00000018 	andeq	r0, r0, r8, lsl r0
 130:	00000000 	andeq	r0, r0, r0
 134:	200001c8 	andcs	r0, r0, r8, asr #3
 138:	0000002e 	andeq	r0, r0, lr, lsr #32
 13c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 140:	41018e02 	tstmi	r1, r2, lsl #28
 144:	0000070d 	andeq	r0, r0, sp, lsl #14
 148:	00000018 	andeq	r0, r0, r8, lsl r0
 14c:	00000000 	andeq	r0, r0, r0
 150:	200001f6 	strdcs	r0, [r0], -r6
 154:	0000002e 	andeq	r0, r0, lr, lsr #32
 158:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 15c:	41018e02 	tstmi	r1, r2, lsl #28
 160:	0000070d 	andeq	r0, r0, sp, lsl #14
 164:	00000018 	andeq	r0, r0, r8, lsl r0
 168:	00000000 	andeq	r0, r0, r0
 16c:	20000224 	andcs	r0, r0, r4, lsr #4
 170:	0000002e 	andeq	r0, r0, lr, lsr #32
 174:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 178:	41018e02 	tstmi	r1, r2, lsl #28
 17c:	0000070d 	andeq	r0, r0, sp, lsl #14
 180:	00000018 	andeq	r0, r0, r8, lsl r0
 184:	00000000 	andeq	r0, r0, r0
 188:	20000252 	andcs	r0, r0, r2, asr r2
 18c:	0000002e 	andeq	r0, r0, lr, lsr #32
 190:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 194:	41018e02 	tstmi	r1, r2, lsl #28
 198:	0000070d 	andeq	r0, r0, sp, lsl #14
 19c:	0000001c 	andeq	r0, r0, ip, lsl r0
 1a0:	00000000 	andeq	r0, r0, r0
 1a4:	20000280 	andcs	r0, r0, r0, lsl #5
 1a8:	0000002a 	andeq	r0, r0, sl, lsr #32
 1ac:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 1b0:	41018e02 	tstmi	r1, r2, lsl #28
 1b4:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 1b8:	00000007 	andeq	r0, r0, r7
 1bc:	0000001c 	andeq	r0, r0, ip, lsl r0
 1c0:	00000000 	andeq	r0, r0, r0
 1c4:	200002aa 	andcs	r0, r0, sl, lsr #5
 1c8:	0000004c 	andeq	r0, r0, ip, asr #32
 1cc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 1d0:	41018e02 	tstmi	r1, r2, lsl #28
 1d4:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 1d8:	00000007 	andeq	r0, r0, r7
 1dc:	0000000c 	andeq	r0, r0, ip
 1e0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 1e4:	7c020001 	stcvc	0, cr0, [r2], {1}
 1e8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 1ec:	0000000c 	andeq	r0, r0, ip
 1f0:	000001dc 	ldrdeq	r0, [r0], -ip
 1f4:	20000000 	andcs	r0, r0, r0
 1f8:	0000000c 	andeq	r0, r0, ip
 1fc:	0000001c 	andeq	r0, r0, ip, lsl r0
 200:	000001dc 	ldrdeq	r0, [r0], -ip
 204:	200002f8 	strdcs	r0, [r0], -r8
 208:	00000020 	andeq	r0, r0, r0, lsr #32
 20c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 210:	41018e02 	tstmi	r1, r2, lsl #28
 214:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 218:	00000007 	andeq	r0, r0, r7
 21c:	0000001c 	andeq	r0, r0, ip, lsl r0
 220:	000001dc 	ldrdeq	r0, [r0], -ip
 224:	20000318 	andcs	r0, r0, r8, lsl r3
 228:	00000062 	andeq	r0, r0, r2, rrx
 22c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 230:	41018e02 	tstmi	r1, r2, lsl #28
 234:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 238:	00000007 	andeq	r0, r0, r7
 23c:	0000001c 	andeq	r0, r0, ip, lsl r0
 240:	000001dc 	ldrdeq	r0, [r0], -ip
 244:	2000037a 	andcs	r0, r0, sl, ror r3
 248:	00000062 	andeq	r0, r0, r2, rrx
 24c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 250:	41018e02 	tstmi	r1, r2, lsl #28
 254:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 258:	00000007 	andeq	r0, r0, r7
 25c:	0000001c 	andeq	r0, r0, ip, lsl r0
 260:	000001dc 	ldrdeq	r0, [r0], -ip
 264:	200003dc 	ldrdcs	r0, [r0], -ip
 268:	000000ac 	andeq	r0, r0, ip, lsr #1
 26c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 270:	41018e02 	tstmi	r1, r2, lsl #28
 274:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 278:	00000007 	andeq	r0, r0, r7
 27c:	0000001c 	andeq	r0, r0, ip, lsl r0
 280:	000001dc 	ldrdeq	r0, [r0], -ip
 284:	20000488 	andcs	r0, r0, r8, lsl #9
 288:	0000002c 	andeq	r0, r0, ip, lsr #32
 28c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 290:	41018e02 	tstmi	r1, r2, lsl #28
 294:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 298:	00000007 	andeq	r0, r0, r7
 29c:	0000001c 	andeq	r0, r0, ip, lsl r0
 2a0:	000001dc 	ldrdeq	r0, [r0], -ip
 2a4:	200004b4 			; <UNDEFINED> instruction: 0x200004b4
 2a8:	000000c2 	andeq	r0, r0, r2, asr #1
 2ac:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 2b0:	41018e02 	tstmi	r1, r2, lsl #28
 2b4:	0d41300e 	stcleq	0, cr3, [r1, #-56]	; 0xffffffc8
 2b8:	00000007 	andeq	r0, r0, r7
 2bc:	0000001c 	andeq	r0, r0, ip, lsl r0
 2c0:	000001dc 	ldrdeq	r0, [r0], -ip
 2c4:	20000576 	andcs	r0, r0, r6, ror r5
 2c8:	00000046 	andeq	r0, r0, r6, asr #32
 2cc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 2d0:	41018e02 	tstmi	r1, r2, lsl #28
 2d4:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 2d8:	00000007 	andeq	r0, r0, r7
 2dc:	00000018 	andeq	r0, r0, r8, lsl r0
 2e0:	000001dc 	ldrdeq	r0, [r0], -ip
 2e4:	200005bc 			; <UNDEFINED> instruction: 0x200005bc
 2e8:	0000006c 	andeq	r0, r0, ip, rrx
 2ec:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 2f0:	41018e02 	tstmi	r1, r2, lsl #28
 2f4:	0000070d 	andeq	r0, r0, sp, lsl #14
 2f8:	0000001c 	andeq	r0, r0, ip, lsl r0
 2fc:	000001dc 	ldrdeq	r0, [r0], -ip
 300:	20000628 	andcs	r0, r0, r8, lsr #12
 304:	00000064 	andeq	r0, r0, r4, rrx
 308:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 30c:	41018e02 	tstmi	r1, r2, lsl #28
 310:	0d41200e 	stcleq	0, cr2, [r1, #-56]	; 0xffffffc8
 314:	00000007 	andeq	r0, r0, r7
 318:	0000001c 	andeq	r0, r0, ip, lsl r0
 31c:	000001dc 	ldrdeq	r0, [r0], -ip
 320:	2000068c 	andcs	r0, r0, ip, lsl #13
 324:	00000018 	andeq	r0, r0, r8, lsl r0
 328:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 32c:	41018e02 	tstmi	r1, r2, lsl #28
 330:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 334:	00000007 	andeq	r0, r0, r7
 338:	00000020 	andeq	r0, r0, r0, lsr #32
 33c:	000001dc 	ldrdeq	r0, [r0], -ip
 340:	200006a4 	andcs	r0, r0, r4, lsr #13
 344:	00000158 	andeq	r0, r0, r8, asr r1
 348:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
 34c:	87038504 	strhi	r8, [r3, -r4, lsl #10]
 350:	42018e02 	andmi	r8, r1, #2, 28
 354:	4110a80e 	tstmi	r0, lr, lsl #16
 358:	0000070d 	andeq	r0, r0, sp, lsl #14
 35c:	0000001c 	andeq	r0, r0, ip, lsl r0
 360:	000001dc 	ldrdeq	r0, [r0], -ip
 364:	200007fc 	strdcs	r0, [r0], -ip
 368:	000000a4 	andeq	r0, r0, r4, lsr #1
 36c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 370:	41018e02 	tstmi	r1, r2, lsl #28
 374:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 378:	00000007 	andeq	r0, r0, r7
 37c:	0000000c 	andeq	r0, r0, ip
 380:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 384:	7c020001 	stcvc	0, cr0, [r2], {1}
 388:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 38c:	0000001c 	andeq	r0, r0, ip, lsl r0
 390:	0000037c 	andeq	r0, r0, ip, ror r3
 394:	200008a0 	andcs	r0, r0, r0, lsr #17
 398:	00000024 	andeq	r0, r0, r4, lsr #32
 39c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 3a0:	41018e02 	tstmi	r1, r2, lsl #28
 3a4:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 3a8:	00000007 	andeq	r0, r0, r7
 3ac:	0000001c 	andeq	r0, r0, ip, lsl r0
 3b0:	0000037c 	andeq	r0, r0, ip, ror r3
 3b4:	200008c4 	andcs	r0, r0, r4, asr #17
 3b8:	00000044 	andeq	r0, r0, r4, asr #32
 3bc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 3c0:	41018e02 	tstmi	r1, r2, lsl #28
 3c4:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 3c8:	00000007 	andeq	r0, r0, r7
 3cc:	0000001c 	andeq	r0, r0, ip, lsl r0
 3d0:	0000037c 	andeq	r0, r0, ip, ror r3
 3d4:	20000908 	andcs	r0, r0, r8, lsl #18
 3d8:	00000068 	andeq	r0, r0, r8, rrx
 3dc:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
 3e0:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 3e4:	380e4101 	stmdacc	lr, {r0, r8, lr}
 3e8:	00070d41 	andeq	r0, r7, r1, asr #26
 3ec:	0000001c 	andeq	r0, r0, ip, lsl r0
 3f0:	0000037c 	andeq	r0, r0, ip, ror r3
 3f4:	20000970 	andcs	r0, r0, r0, ror r9
 3f8:	00000020 	andeq	r0, r0, r0, lsr #32
 3fc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 400:	41018e02 	tstmi	r1, r2, lsl #28
 404:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 408:	00000007 	andeq	r0, r0, r7
 40c:	0000000c 	andeq	r0, r0, ip
 410:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 414:	7c020001 	stcvc	0, cr0, [r2], {1}
 418:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 41c:	00000018 	andeq	r0, r0, r8, lsl r0
 420:	0000040c 	andeq	r0, r0, ip, lsl #8
 424:	20000990 	mulcs	r0, r0, r9
 428:	0000000a 	andeq	r0, r0, sl
 42c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 430:	41018e02 	tstmi	r1, r2, lsl #28
 434:	0000070d 	andeq	r0, r0, sp, lsl #14
 438:	00000018 	andeq	r0, r0, r8, lsl r0
 43c:	0000040c 	andeq	r0, r0, ip, lsl #8
 440:	2000099a 	mulcs	r0, sl, r9
 444:	0000000a 	andeq	r0, r0, sl
 448:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 44c:	41018e02 	tstmi	r1, r2, lsl #28
 450:	0000070d 	andeq	r0, r0, sp, lsl #14
 454:	0000001c 	andeq	r0, r0, ip, lsl r0
 458:	0000040c 	andeq	r0, r0, ip, lsl #8
 45c:	200009a4 	andcs	r0, r0, r4, lsr #19
 460:	00000010 	andeq	r0, r0, r0, lsl r0
 464:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 468:	41018e02 	tstmi	r1, r2, lsl #28
 46c:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 470:	00000007 	andeq	r0, r0, r7
 474:	0000001c 	andeq	r0, r0, ip, lsl r0
 478:	0000040c 	andeq	r0, r0, ip, lsl #8
 47c:	200009b4 			; <UNDEFINED> instruction: 0x200009b4
 480:	0000003e 	andeq	r0, r0, lr, lsr r0
 484:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 488:	41018e02 	tstmi	r1, r2, lsl #28
 48c:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 490:	00000007 	andeq	r0, r0, r7
 494:	0000000c 	andeq	r0, r0, ip
 498:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 49c:	7c020001 	stcvc	0, cr0, [r2], {1}
 4a0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 4a4:	00000018 	andeq	r0, r0, r8, lsl r0
 4a8:	00000494 	muleq	r0, r4, r4
 4ac:	200009f4 	strdcs	r0, [r0], -r4
 4b0:	0000005c 	andeq	r0, r0, ip, asr r0
 4b4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 4b8:	41018e02 	tstmi	r1, r2, lsl #28
 4bc:	0000070d 	andeq	r0, r0, sp, lsl #14
 4c0:	0000001c 	andeq	r0, r0, ip, lsl r0
 4c4:	00000494 	muleq	r0, r4, r4
 4c8:	20000a50 	andcs	r0, r0, r0, asr sl
 4cc:	00000050 	andeq	r0, r0, r0, asr r0
 4d0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 4d4:	41018e02 	tstmi	r1, r2, lsl #28
 4d8:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 4dc:	00000007 	andeq	r0, r0, r7
 4e0:	0000001c 	andeq	r0, r0, ip, lsl r0
 4e4:	00000494 	muleq	r0, r4, r4
 4e8:	20000aa0 	andcs	r0, r0, r0, lsr #21
 4ec:	00000044 	andeq	r0, r0, r4, asr #32
 4f0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 4f4:	41018e02 	tstmi	r1, r2, lsl #28
 4f8:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 4fc:	00000007 	andeq	r0, r0, r7
 500:	0000001c 	andeq	r0, r0, ip, lsl r0
 504:	00000494 	muleq	r0, r4, r4
 508:	20000ae4 	andcs	r0, r0, r4, ror #21
 50c:	0000005a 	andeq	r0, r0, sl, asr r0
 510:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 514:	41018e02 	tstmi	r1, r2, lsl #28
 518:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 51c:	00000007 	andeq	r0, r0, r7
 520:	00000018 	andeq	r0, r0, r8, lsl r0
 524:	00000494 	muleq	r0, r4, r4
 528:	20000b3e 	andcs	r0, r0, lr, lsr fp
 52c:	0000003e 	andeq	r0, r0, lr, lsr r0
 530:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 534:	41018e02 	tstmi	r1, r2, lsl #28
 538:	0000070d 	andeq	r0, r0, sp, lsl #14
 53c:	0000001c 	andeq	r0, r0, ip, lsl r0
 540:	00000494 	muleq	r0, r4, r4
 544:	20000b7c 	andcs	r0, r0, ip, ror fp
 548:	0000008c 	andeq	r0, r0, ip, lsl #1
 54c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 550:	41018e02 	tstmi	r1, r2, lsl #28
 554:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 558:	00000007 	andeq	r0, r0, r7
 55c:	0000001c 	andeq	r0, r0, ip, lsl r0
 560:	00000494 	muleq	r0, r4, r4
 564:	20000c08 	andcs	r0, r0, r8, lsl #24
 568:	0000002a 	andeq	r0, r0, sl, lsr #32
 56c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 570:	41018e02 	tstmi	r1, r2, lsl #28
 574:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 578:	00000007 	andeq	r0, r0, r7
 57c:	0000001c 	andeq	r0, r0, ip, lsl r0
 580:	00000494 	muleq	r0, r4, r4
 584:	20000c32 	andcs	r0, r0, r2, lsr ip
 588:	00000076 	andeq	r0, r0, r6, ror r0
 58c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 590:	41018e02 	tstmi	r1, r2, lsl #28
 594:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 598:	00000007 	andeq	r0, r0, r7
 59c:	0000001c 	andeq	r0, r0, ip, lsl r0
 5a0:	00000494 	muleq	r0, r4, r4
 5a4:	20000ca8 	andcs	r0, r0, r8, lsr #25
 5a8:	00000046 	andeq	r0, r0, r6, asr #32
 5ac:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 5b0:	41018e02 	tstmi	r1, r2, lsl #28
 5b4:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 5b8:	00000007 	andeq	r0, r0, r7
 5bc:	0000001c 	andeq	r0, r0, ip, lsl r0
 5c0:	00000494 	muleq	r0, r4, r4
 5c4:	20000cee 	andcs	r0, r0, lr, ror #25
 5c8:	00000046 	andeq	r0, r0, r6, asr #32
 5cc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 5d0:	41018e02 	tstmi	r1, r2, lsl #28
 5d4:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 5d8:	00000007 	andeq	r0, r0, r7
 5dc:	0000001c 	andeq	r0, r0, ip, lsl r0
 5e0:	00000494 	muleq	r0, r4, r4
 5e4:	20000d34 	andcs	r0, r0, r4, lsr sp
 5e8:	0000005a 	andeq	r0, r0, sl, asr r0
 5ec:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 5f0:	41018e02 	tstmi	r1, r2, lsl #28
 5f4:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 5f8:	00000007 	andeq	r0, r0, r7
 5fc:	0000001c 	andeq	r0, r0, ip, lsl r0
 600:	00000494 	muleq	r0, r4, r4
 604:	20000d8e 	andcs	r0, r0, lr, lsl #27
 608:	00000036 	andeq	r0, r0, r6, lsr r0
 60c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 610:	41018e02 	tstmi	r1, r2, lsl #28
 614:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 618:	00000007 	andeq	r0, r0, r7
 61c:	0000001c 	andeq	r0, r0, ip, lsl r0
 620:	00000494 	muleq	r0, r4, r4
 624:	20000dc4 	andcs	r0, r0, r4, asr #27
 628:	00000084 	andeq	r0, r0, r4, lsl #1
 62c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 630:	41018e02 	tstmi	r1, r2, lsl #28
 634:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 638:	00000007 	andeq	r0, r0, r7
 63c:	0000001c 	andeq	r0, r0, ip, lsl r0
 640:	00000494 	muleq	r0, r4, r4
 644:	20000e48 	andcs	r0, r0, r8, asr #28
 648:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 64c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 650:	41018e02 	tstmi	r1, r2, lsl #28
 654:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 658:	00000007 	andeq	r0, r0, r7
 65c:	0000000c 	andeq	r0, r0, ip
 660:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 664:	7c020001 	stcvc	0, cr0, [r2], {1}
 668:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 66c:	00000018 	andeq	r0, r0, r8, lsl r0
 670:	0000065c 	andeq	r0, r0, ip, asr r6
 674:	20000f18 	andcs	r0, r0, r8, lsl pc
 678:	0000001c 	andeq	r0, r0, ip, lsl r0
 67c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 680:	41018e02 	tstmi	r1, r2, lsl #28
 684:	0000070d 	andeq	r0, r0, sp, lsl #14
 688:	00000018 	andeq	r0, r0, r8, lsl r0
 68c:	0000065c 	andeq	r0, r0, ip, asr r6
 690:	20000f34 	andcs	r0, r0, r4, lsr pc
 694:	00000018 	andeq	r0, r0, r8, lsl r0
 698:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 69c:	41018e02 	tstmi	r1, r2, lsl #28
 6a0:	0000070d 	andeq	r0, r0, sp, lsl #14
 6a4:	00000018 	andeq	r0, r0, r8, lsl r0
 6a8:	0000065c 	andeq	r0, r0, ip, asr r6
 6ac:	20000f4c 	andcs	r0, r0, ip, asr #30
 6b0:	00000024 	andeq	r0, r0, r4, lsr #32
 6b4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 6b8:	41018e02 	tstmi	r1, r2, lsl #28
 6bc:	0000070d 	andeq	r0, r0, sp, lsl #14
 6c0:	00000018 	andeq	r0, r0, r8, lsl r0
 6c4:	0000065c 	andeq	r0, r0, ip, asr r6
 6c8:	20000f70 	andcs	r0, r0, r0, ror pc
 6cc:	00000014 	andeq	r0, r0, r4, lsl r0
 6d0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 6d4:	41018e02 	tstmi	r1, r2, lsl #28
 6d8:	0000070d 	andeq	r0, r0, sp, lsl #14
 6dc:	0000001c 	andeq	r0, r0, ip, lsl r0
 6e0:	0000065c 	andeq	r0, r0, ip, asr r6
 6e4:	20000f84 	andcs	r0, r0, r4, lsl #31
 6e8:	00000064 	andeq	r0, r0, r4, rrx
 6ec:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 6f0:	41018e02 	tstmi	r1, r2, lsl #28
 6f4:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 6f8:	00000007 	andeq	r0, r0, r7
 6fc:	0000001c 	andeq	r0, r0, ip, lsl r0
 700:	0000065c 	andeq	r0, r0, ip, asr r6
 704:	20000fe8 	andcs	r0, r0, r8, ror #31
 708:	0000004c 	andeq	r0, r0, ip, asr #32
 70c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 710:	41018e02 	tstmi	r1, r2, lsl #28
 714:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 718:	00000007 	andeq	r0, r0, r7
 71c:	0000000c 	andeq	r0, r0, ip
 720:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 724:	7c010001 	stcvc	0, cr0, [r1], {1}
 728:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 72c:	0000000c 	andeq	r0, r0, ip
 730:	0000071c 	andeq	r0, r0, ip, lsl r7
 734:	20001035 	andcs	r1, r0, r5, lsr r0
 738:	0000010a 	andeq	r0, r0, sl, lsl #2

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	200002f8 	strdcs	r0, [r0], -r8
   4:	200008a0 	andcs	r0, r0, r0, lsr #17
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...
